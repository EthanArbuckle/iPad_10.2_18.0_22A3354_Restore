unint64_t make_fcontext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;

  result = (a1 & 0xFFFFFFFFFFFFFFF0) - 176;
  *(_QWORD *)(result + 160) = a3;
  *(_QWORD *)(result + 152) = finish;
  return result;
}

void finish()
{
  _exit(0);
}

void google::protobuf::io::ZeroCopyOutputStream::WriteAliasedRaw(google::protobuf::io::ZeroCopyOutputStream *this, const void *a2)
{
  void *exception;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  std::string::append(&__p, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream.cc", 47, (uint64_t)&__p);
  exception = __cxa_allocate_exception(0x30uLL);
  google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream.cc", 47, (__int128 *)&__p);
}

void sub_224FEE41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::ZeroCopyOutputStream::AllowsAliasing(google::protobuf::io::ZeroCopyOutputStream *this)
{
  return 0;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24ED1D0C8, MEMORY[0x24BEDAAF0]);
}

void sub_224FEE4A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t google::protobuf::io::FileInputStream::CopyingFileInputStream::Close(google::protobuf::io::FileInputStream::CopyingFileInputStream *this)
{
  int v2;
  int v3;
  int *v4;
  uint64_t result;
  void *exception;
  std::string __p;

  if (*((_BYTE *)this + 13))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 119, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 119, (__int128 *)&__p);
  }
  *((_BYTE *)this + 13) = 1;
  v2 = *((_DWORD *)this + 2);
  while (1)
  {
    v3 = close(v2);
    if ((v3 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
      goto LABEL_8;
  }
  if (v3)
  {
LABEL_8:
    v4 = __error();
    result = 0;
    *((_DWORD *)this + 4) = *v4;
    return result;
  }
  return 1;
}

void sub_224FEE6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::FileInputStream::Next(google::protobuf::io::FileInputStream *this, const void **a2, int *a3)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Next((google::protobuf::io::FileInputStream *)((char *)this + 32), a2, a3);
}

void google::protobuf::io::FileInputStream::BackUp(google::protobuf::io::FileInputStream *this, int a2)
{
  google::protobuf::io::CopyingInputStreamAdaptor::BackUp((google::protobuf::io::FileInputStream *)((char *)this + 32), a2);
}

BOOL google::protobuf::io::FileInputStream::Skip(google::protobuf::io::FileInputStream *this, int a2)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Skip((google::protobuf::io::FileInputStream *)((char *)this + 32), a2);
}

uint64_t google::protobuf::io::FileInputStream::ByteCount(google::protobuf::io::FileInputStream *this)
{
  return *((_QWORD *)this + 7) - *((int *)this + 20);
}

void google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(google::protobuf::io::FileInputStream::CopyingFileInputStream *this)
{
  char *v2;
  std::string __p;

  *(_QWORD *)this = &off_24ED1E708;
  if (*((_BYTE *)this + 12) && (google::protobuf::io::FileInputStream::CopyingFileInputStream::Close(this) & 1) == 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "close() failed: ");
    v2 = strerror(*((_DWORD *)this + 4));
    std::string::append(&__p, v2);
    google::protobuf::internal::DefaultLogHandler(2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 113, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(this);
  JUMPOUT(0x2276933B8);
}

void sub_224FEE81C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

ssize_t google::protobuf::io::FileInputStream::CopyingFileInputStream::Read(google::protobuf::io::FileInputStream::CopyingFileInputStream *this, void *a2, int a3)
{
  ssize_t v6;
  void *exception;
  std::string __p;

  if (*((_BYTE *)this + 13))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 134, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 134, (__int128 *)&__p);
  }
  while (1)
  {
    v6 = read(*((_DWORD *)this + 2), a2, a3);
    if ((v6 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
    {
      *((_DWORD *)this + 4) = *__error();
      return v6;
    }
  }
  return v6;
}

void sub_224FEE974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::FileInputStream::CopyingFileInputStream::Skip_(google::protobuf::io::FileInputStream::CopyingFileInputStream *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  void *exception;
  int v13;
  std::string __p[169];
  uint64_t v15;

  v1 = MEMORY[0x24BDAC7A8](this);
  v3 = v2;
  v4 = (_BYTE *)v1;
  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v1 + 13))
  {
    memset(__p, 0, 24);
    std::string::append(__p, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 151, (uint64_t)__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 151, (__int128 *)__p);
  }
  if (!*(_BYTE *)(v1 + 20) && lseek(*(_DWORD *)(v1 + 8), (int)v2, 1) != -1)
    return v3;
  v5 = 0;
  v4[20] = 1;
  do
  {
    v6 = v5;
    v7 = __OFSUB__((_DWORD)v3, (_DWORD)v5);
    v8 = v3 - v5;
    if ((v8 < 0) ^ v7 | (v8 == 0))
      break;
    v9 = v8 >= 4096 ? 4096 : v8;
    v10 = (*(uint64_t (**)(_BYTE *, int *, uint64_t))(*(_QWORD *)v4 + 16))(v4, &v13, v9);
    v5 = (v10 + v6);
  }
  while (v10 > 0);
  return v6;
}

void sub_224FEEB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::io::FileOutputStream::~FileOutputStream(google::protobuf::io::FileOutputStream *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED1E738;
  if (!*((_BYTE *)this + 49) && *((_DWORD *)this + 19))
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), *((_QWORD *)this + 8)))
    {
      *((_QWORD *)this + 7) += *((int *)this + 19);
      *((_DWORD *)this + 19) = 0;
    }
    else
    {
      *((_BYTE *)this + 49) = 1;
      *((_DWORD *)this + 19) = 0;
      v2 = *((_QWORD *)this + 10);
      v3 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = 0;
      if (v2)
      {
        if (v3)
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      }
      else if (v3)
      {
        MEMORY[0x227693394](v3, 0x1000C8077774924);
      }
    }
  }
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((google::protobuf::io::FileOutputStream *)((char *)this + 32));
  google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream((google::protobuf::io::FileOutputStream *)((char *)this + 8));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED1E738;
  if (!*((_BYTE *)this + 49) && *((_DWORD *)this + 19))
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), *((_QWORD *)this + 8)))
    {
      *((_QWORD *)this + 7) += *((int *)this + 19);
      *((_DWORD *)this + 19) = 0;
    }
    else
    {
      *((_BYTE *)this + 49) = 1;
      *((_DWORD *)this + 19) = 0;
      v2 = *((_QWORD *)this + 10);
      v3 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = 0;
      if (v2)
      {
        if (v3)
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      }
      else if (v3)
      {
        MEMORY[0x227693394](v3, 0x1000C8077774924);
      }
    }
  }
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((google::protobuf::io::FileOutputStream *)((char *)this + 32));
  google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream((google::protobuf::io::FileOutputStream *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t google::protobuf::io::FileOutputStream::CopyingFileOutputStream::Close(google::protobuf::io::FileOutputStream::CopyingFileOutputStream *this)
{
  int v2;
  int v3;
  int *v4;
  uint64_t result;
  void *exception;
  std::string __p;

  if (*((_BYTE *)this + 13))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 209, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 209, (__int128 *)&__p);
  }
  *((_BYTE *)this + 13) = 1;
  v2 = *((_DWORD *)this + 2);
  while (1)
  {
    v3 = close(v2);
    if ((v3 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
      goto LABEL_8;
  }
  if (v3)
  {
LABEL_8:
    v4 = __error();
    result = 0;
    *((_DWORD *)this + 4) = *v4;
    return result;
  }
  return 1;
}

void sub_224FEEE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::FileOutputStream::Next(google::protobuf::io::FileOutputStream *this, void **a2, int *a3)
{
  return google::protobuf::io::CopyingOutputStreamAdaptor::Next((google::protobuf::io::FileOutputStream *)((char *)this + 32), a2, a3);
}

void google::protobuf::io::FileOutputStream::BackUp(google::protobuf::io::FileOutputStream *this, int a2)
{
  google::protobuf::io::CopyingOutputStreamAdaptor::BackUp((google::protobuf::io::FileOutputStream *)((char *)this + 32), a2);
}

uint64_t google::protobuf::io::FileOutputStream::ByteCount(google::protobuf::io::FileOutputStream *this)
{
  return *((_QWORD *)this + 7) + *((int *)this + 19);
}

void google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream(google::protobuf::io::FileOutputStream::CopyingFileOutputStream *this)
{
  char *v2;
  std::string __p;

  *(_QWORD *)this = &off_24ED1E780;
  if (*((_BYTE *)this + 12) && (google::protobuf::io::FileOutputStream::CopyingFileOutputStream::Close(this) & 1) == 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "close() failed: ");
    v2 = strerror(*((_DWORD *)this + 4));
    std::string::append(&__p, v2);
    google::protobuf::internal::DefaultLogHandler(2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 203, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream(this);
  JUMPOUT(0x2276933B8);
}

void sub_224FEEFE0(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

BOOL google::protobuf::io::FileOutputStream::CopyingFileOutputStream::Write(google::protobuf::io::FileOutputStream::CopyingFileOutputStream *this, char *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int *v10;
  _BOOL8 result;
  void *exception;
  std::string __p;

  if (*((_BYTE *)this + 13))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 225, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 225, (__int128 *)&__p);
  }
  if (a3 < 1)
    return 1;
  v6 = 0;
  do
  {
    while (1)
    {
      v7 = write(*((_DWORD *)this + 2), &a2[v6], a3 - v6);
      v8 = v7;
      if (v7 < 0)
        break;
      result = v7 != 0;
      v6 += v8;
      if (v8)
        v9 = v6 < a3;
      else
        v9 = 0;
      if (!v9)
        return result;
    }
  }
  while (*__error() == 4);
  v10 = __error();
  result = 0;
  *((_DWORD *)this + 4) = *v10;
  return result;
}

void sub_224FEF198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::io::FileInputStream::~FileInputStream(google::protobuf::io::FileInputStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED1E6C8;
  *((_QWORD *)this + 4) = &off_24ED1E8B0;
  if (*((_BYTE *)this + 48))
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_DWORD *)this + 19) = 0;
  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (!v4
      || ((*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3),
          v5 = *((_QWORD *)this + 8),
          *((_QWORD *)this + 8) = 0,
          !v5))
    {
LABEL_7:
      google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((google::protobuf::io::FileInputStream *)((char *)this + 8));
      return;
    }
  }
  else
  {
    if (!v4)
      goto LABEL_7;
    MEMORY[0x227693394](v4, 0x1000C8077774924);
    v5 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (!v5)
      goto LABEL_7;
  }
  MEMORY[0x227693394](v5, 0x1000C8077774924);
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((google::protobuf::io::FileInputStream *)((char *)this + 8));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED1E6C8;
  *((_QWORD *)this + 4) = &off_24ED1E8B0;
  if (*((_BYTE *)this + 48))
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_DWORD *)this + 19) = 0;
  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (!v4)
      goto LABEL_11;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (!v5)
      goto LABEL_11;
  }
  else if (!v4
         || (MEMORY[0x227693394](v4, 0x1000C8077774924), v5 = *((_QWORD *)this + 8), *((_QWORD *)this + 8) = 0, !v5))
  {
LABEL_11:
    google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((google::protobuf::io::FileInputStream *)((char *)this + 8));
    JUMPOUT(0x2276933B8);
  }
  MEMORY[0x227693394](v5, 0x1000C8077774924);
  goto LABEL_11;
}

BOOL google::protobuf::io::ArrayInputStream::Next(google::protobuf::io::ArrayInputStream *this, const void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 6);
  v4 = *((_DWORD *)this + 4);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 7) = 0;
    return 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 5))
      v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 7) = v5;
    *a2 = (const void *)(*((_QWORD *)this + 1) + v3);
    *a3 = v5;
    *((_DWORD *)this + 6) += *((_DWORD *)this + 7);
    return (int)v3 < v4;
  }
}

void google::protobuf::io::ArrayInputStream::BackUp(google::protobuf::io::ArrayInputStream *this, int a2)
{
  int v2;
  void *v3;
  void *exception;
  void *v5;
  std::string __p;

  v2 = *((_DWORD *)this + 7);
  if (v2 <= 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (last_returned_size_) > (0): ");
    std::string::append(&__p, "BackUp() can only be called after a successful Next().");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 80, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 80, (__int128 *)&__p);
  }
  if (v2 < a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) <= (last_returned_size_): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 82, (uint64_t)&__p);
    v3 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 82, (__int128 *)&__p);
  }
  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 83, (uint64_t)&__p);
    v5 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 83, (__int128 *)&__p);
  }
  *((_QWORD *)this + 3) = (*((_DWORD *)this + 6) - a2);
}

void sub_224FEF668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::io::ArrayInputStream::Skip(google::protobuf::io::ArrayInputStream *this, int a2)
{
  int v3;
  int v4;
  int v5;
  _BOOL8 result;
  int v7;
  void *exception;
  std::string __p;

  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 89, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 89, (__int128 *)&__p);
  }
  v3 = *((_DWORD *)this + 4);
  v4 = *((_DWORD *)this + 6);
  v5 = v3 - v4;
  result = v3 - v4 >= a2;
  v7 = v4 + a2;
  if (v5 >= a2)
    v3 = v7;
  *((_DWORD *)this + 6) = v3;
  *((_DWORD *)this + 7) = 0;
  return result;
}

void sub_224FEF7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::ArrayInputStream::ByteCount(google::protobuf::io::ArrayInputStream *this)
{
  return *((int *)this + 6);
}

void google::protobuf::io::ArrayInputStream::Seek(google::protobuf::io::ArrayInputStream *this, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *exception;
  std::string __p;

  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (offset) >= (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 104, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 104, (__int128 *)&__p);
  }
  v2 = *((int *)this + 4);
  if (v2 < a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (offset) <= (size_): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 105, (uint64_t)&__p);
    v3 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 105, (__int128 *)&__p);
  }
  *((_DWORD *)this + 6) = a2;
  *((_DWORD *)this + 7) = v2;
}

void sub_224FEF980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::io::ArrayOutputStream::Next(google::protobuf::io::ArrayOutputStream *this, void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 6);
  v4 = *((_DWORD *)this + 4);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 7) = 0;
    return 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 5))
      v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 7) = v5;
    *a2 = (void *)(*((_QWORD *)this + 1) + v3);
    *a3 = v5;
    *((_DWORD *)this + 6) += *((_DWORD *)this + 7);
    return (int)v3 < v4;
  }
}

void google::protobuf::io::ArrayOutputStream::BackUp(google::protobuf::io::ArrayOutputStream *this, int a2)
{
  int v2;
  void *v3;
  void *exception;
  void *v5;
  std::string __p;

  v2 = *((_DWORD *)this + 7);
  if (v2 <= 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (last_returned_size_) > (0): ");
    std::string::append(&__p, "BackUp() can only be called after a successful Next().");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 134, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 134, (__int128 *)&__p);
  }
  if (v2 < a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) <= (last_returned_size_): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 136, (uint64_t)&__p);
    v3 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 136, (__int128 *)&__p);
  }
  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 137, (uint64_t)&__p);
    v5 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 137, (__int128 *)&__p);
  }
  *((_QWORD *)this + 3) = (*((_DWORD *)this + 6) - a2);
}

void sub_224FEFC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::ArrayOutputStream::ByteCount(google::protobuf::io::ArrayOutputStream *this)
{
  return *((int *)this + 6);
}

void google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED1E8B0;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_DWORD *)this + 11) = 0;
  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (!v4)
      return;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v5)
      return;
LABEL_10:
    MEMORY[0x227693394](v5, 0x1000C8077774924);
    return;
  }
  if (v4)
  {
    MEMORY[0x227693394](v4, 0x1000C8077774924);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v5)
      goto LABEL_10;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED1E8B0;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_DWORD *)this + 11) = 0;
  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (!v4)
      goto LABEL_11;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v5)
      goto LABEL_11;
  }
  else if (!v4
         || (MEMORY[0x227693394](v4, 0x1000C8077774924), v5 = *((_QWORD *)this + 4), *((_QWORD *)this + 4) = 0, !v5))
  {
LABEL_11:
    JUMPOUT(0x2276933B8);
  }
  MEMORY[0x227693394](v5, 0x1000C8077774924);
  goto LABEL_11;
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::Next(google::protobuf::io::CopyingInputStreamAdaptor *this, const void **a2, int *a3)
{
  uint64_t (***v7)(_QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  std::string __p;

  if (*((_BYTE *)this + 17))
    return 0;
  if (!*((_QWORD *)this + 4))
  {
    v7 = (uint64_t (***)(_QWORD, _QWORD))*((_QWORD *)this + 7);
    if (v7)
    {
      v8 = (**v7)(v7, *((int *)this + 10));
      v9 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v8;
      if (!v9)
        goto LABEL_7;
      goto LABEL_6;
    }
    v12 = operator new[]();
    v9 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v9)
LABEL_6:
      MEMORY[0x227693394](v9, 0x1000C8077774924);
  }
LABEL_7:
  v10 = *((unsigned int *)this + 12);
  if ((int)v10 >= 1)
  {
    *a2 = (const void *)(*((_QWORD *)this + 4) + *((int *)this + 11) - v10);
    *a3 = v10;
    *((_DWORD *)this + 12) = 0;
    return 1;
  }
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4), *((unsigned int *)this + 10));
  *((_DWORD *)this + 11) = v11;
  if (v11 > 0)
  {
    *((_QWORD *)this + 3) += v11;
    *a3 = v11;
    *a2 = (const void *)*((_QWORD *)this + 4);
    return 1;
  }
  if (v11 < 0)
    *((_BYTE *)this + 17) = 1;
  if (*((_DWORD *)this + 12))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (backup_bytes_) == (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 253, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 253, (__int128 *)&__p);
  }
  *((_DWORD *)this + 11) = 0;
  v13 = *((_QWORD *)this + 7);
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return 0;
    }
    return 0;
  }
  if (!v14)
    return 0;
  MEMORY[0x227693394](v14, 0x1000C8077774924);
  return 0;
}

void sub_224FF00E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::io::CopyingInputStreamAdaptor::BackUp(google::protobuf::io::CopyingInputStreamAdaptor *this, int a2)
{
  void *exception;
  void *v3;
  void *v4;
  std::string __p;

  if (*((_DWORD *)this + 12) || !*((_QWORD *)this + 4))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: backup_bytes_ == 0 && buffer_.get() != NULL: ");
    std::string::append(&__p, " BackUp() can only be called after Next().");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 265, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 265, (__int128 *)&__p);
  }
  if (*((_DWORD *)this + 11) < a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) <= (buffer_used_): ");
    std::string::append(&__p, " Can't back up over more bytes than were returned by the last call to Next().");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 267, (uint64_t)&__p);
    v3 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 267, (__int128 *)&__p);
  }
  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) >= (0): ");
    std::string::append(&__p, " Parameter to BackUp() can't be negative.");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 270, (uint64_t)&__p);
    v4 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 270, (__int128 *)&__p);
  }
  *((_DWORD *)this + 12) = a2;
}

void sub_224FF0394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::io::CopyingInputStreamAdaptor::Skip(google::protobuf::io::CopyingInputStreamAdaptor *this, int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  void *exception;
  std::string __p;

  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 276, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 276, (__int128 *)&__p);
  }
  if (*((_BYTE *)this + 17))
    return 0;
  v4 = *((_DWORD *)this + 12);
  if (v4 >= a2)
  {
    *((_DWORD *)this + 12) = v4 - a2;
    return 1;
  }
  else
  {
    v5 = (a2 - v4);
    *((_DWORD *)this + 12) = 0;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v5);
    *((_QWORD *)this + 3) += v6;
    return v6 == (_DWORD)v5;
  }
}

void sub_224FF0534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::ByteCount(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  return *((_QWORD *)this + 3) - *((int *)this + 12);
}

void google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24ED1E8F0;
  if (!*((_BYTE *)this + 17) && *((_DWORD *)this + 11))
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4)))
    {
      *((_QWORD *)this + 3) += *((int *)this + 11);
      *((_DWORD *)this + 11) = 0;
    }
    else
    {
      *((_BYTE *)this + 17) = 1;
      *((_DWORD *)this + 11) = 0;
      v6 = *((_QWORD *)this + 6);
      v7 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = 0;
      if (v6)
      {
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      else if (v7)
      {
        MEMORY[0x227693394](v7, 0x1000C8077774924);
      }
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_DWORD *)this + 11) = 0;
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (!v4)
      return;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v5)
      return;
LABEL_14:
    MEMORY[0x227693394](v5, 0x1000C8077774924);
    return;
  }
  if (v4)
  {
    MEMORY[0x227693394](v4, 0x1000C8077774924);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v5)
      goto LABEL_14;
  }
}

{
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(this);
  JUMPOUT(0x2276933B8);
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::Flush(google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 17))
    return 0;
  if (!*((_DWORD *)this + 11))
    return 1;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4)))
  {
    *((_QWORD *)this + 3) += *((int *)this + 11);
    *((_DWORD *)this + 11) = 0;
    return 1;
  }
  *((_BYTE *)this + 17) = 1;
  *((_DWORD *)this + 11) = 0;
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return 0;
    }
    return 0;
  }
  if (!v4)
    return 0;
  MEMORY[0x227693394](v4, 0x1000C8077774924);
  return 0;
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::Next(google::protobuf::io::CopyingOutputStreamAdaptor *this, void **a2, int *a3)
{
  int v6;
  uint64_t v8;
  uint64_t (***v9)(_QWORD, _QWORD);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *((_DWORD *)this + 11);
  if (v6 != *((_DWORD *)this + 10))
    goto LABEL_7;
  if (*((_BYTE *)this + 17))
    return 0;
  if (!v6)
  {
LABEL_7:
    v8 = *((_QWORD *)this + 4);
    if (!v8)
    {
      v9 = (uint64_t (***)(_QWORD, _QWORD))*((_QWORD *)this + 6);
      if (!v9)
      {
        v8 = operator new[]();
        v10 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v8;
        if (!v10)
          goto LABEL_11;
        goto LABEL_10;
      }
      v8 = (**v9)(v9, *((int *)this + 10));
      v10 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v8;
      if (v10)
      {
LABEL_10:
        MEMORY[0x227693394](v10, 0x1000C8077774924);
        v8 = *((_QWORD *)this + 4);
      }
    }
LABEL_11:
    v11 = *((_DWORD *)this + 10);
    v12 = *((int *)this + 11);
    *a2 = (void *)(v8 + v12);
    *a3 = v11 - v12;
    *((_DWORD *)this + 11) = *((_DWORD *)this + 10);
    return 1;
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4)))
  {
    *((_QWORD *)this + 3) += *((int *)this + 11);
    *((_DWORD *)this + 11) = 0;
    goto LABEL_7;
  }
  *((_BYTE *)this + 17) = 1;
  *((_DWORD *)this + 11) = 0;
  v13 = *((_QWORD *)this + 6);
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (!v14)
      return 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return 0;
  }
  else
  {
    if (!v14)
      return 0;
    MEMORY[0x227693394](v14, 0x1000C8077774924);
    return 0;
  }
}

void google::protobuf::io::CopyingOutputStreamAdaptor::BackUp(google::protobuf::io::CopyingOutputStreamAdaptor *this, int a2)
{
  int v2;
  void *v3;
  void *v4;
  void *exception;
  std::string __p;

  if (a2 < 0)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 361, (uint64_t)&__p);
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 361, (__int128 *)&__p);
  }
  v2 = *((_DWORD *)this + 11);
  if (v2 != *((_DWORD *)this + 10))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (buffer_used_) == (buffer_size_): ");
    std::string::append(&__p, " BackUp() can only be called after Next().");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 362, (uint64_t)&__p);
    v3 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 362, (__int128 *)&__p);
  }
  if (v2 < a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (count) <= (buffer_used_): ");
    std::string::append(&__p, " Can't back up over more bytes than were returned by the last call to Next().");
    google::protobuf::internal::DefaultLogHandler(3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 364, (uint64_t)&__p);
    v4 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 364, (__int128 *)&__p);
  }
  *((_DWORD *)this + 11) = v2 - a2;
}

void sub_224FF0BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount(google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  return *((_QWORD *)this + 3) + *((int *)this + 11);
}

void google::protobuf::io::ArrayInputStream::~ArrayInputStream(google::protobuf::io::ArrayInputStream *this)
{
  JUMPOUT(0x2276933B8);
}

void google::protobuf::io::ArrayOutputStream::~ArrayOutputStream(google::protobuf::io::ArrayOutputStream *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24ED1E9E0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_224FF0D24(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24ED1E9E0;
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_24ED1E9E0;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x2276933B8);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

void re::FixedArray<CoreIKTransform>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 32 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 32);
    v8 = (_OWORD *)((char *)v8 + v5 - 32);
  }
  *v8 = 0u;
  v8[1] = 0u;
}

uint64_t re::internal::filterSolverCallback(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, re::RigDataValue *a7, uint64_t a8, _QWORD *a9)
{
  float *Runtime;
  uint64_t v13;
  int v14;
  uint64_t result;

  if (a4 <= 1)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, a4);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  Runtime = (float *)re::RigDataValue::getRuntimeValue<float>(a3 + 288, a2);
  MEMORY[0x2276912AC](*a9, *Runtime);
  if (!a8)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    result = _os_crash();
    __break(1u);
    return result;
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v14 = MEMORY[0x2276912A0](*a9, a9[4], a9[3]);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::internal::updateOutputBasedOnSolveResult(v14, a3, (_OWORD *)a9 + 1, a7);
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<float>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 272) > v5)
    {
      v6 = *(_QWORD *)(v4 + 280);
      return v6 + 4 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 56) > v5)
    {
      v6 = *(_QWORD *)(v7 + 64);
      return v6 + 4 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::filterSolverCompile(re::Allocator **a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  const re::RigDataValue *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _anonymous_namespace_ *v15;
  uint64_t v16;
  StringID v18;
  _OWORD v19[2];
  int v20;
  _OWORD v21[2];
  int v22;
  uint64_t v23;
  _BYTE v24[288];
  _BYTE v25[288];
  uint64_t *v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  if (a3 == 1)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  if (a3 <= 2)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
LABEL_9:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  if (!a5)
    goto LABEL_9;
  v6 = a2[1];
  v7 = (const re::RigDataValue *)a2[2];
  v8 = *a4;
  v9 = *(const char **)(*a2 + 232);
  v10 = strlen(v9);
  v11 = MEMORY[0x22769136C](v9, v10);
  v12 = (uint64_t)*a1;
  v13 = (uint64_t *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 40, 8);
  *v13 = CoreIKCreateACPFilteringSolverFromRig();
  v13[1] = v12;
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = 0;
  v14 = MEMORY[0x2276916F0](v11);
  re::FixedArray<CoreIKTransform>::init<>(v13 + 2, v12, v14);
  v26 = v13;
  v27[0] = &off_24ED1EA48;
  v27[3] = v27;
  v27[1] = v12;
  v15 = *(_anonymous_namespace_ **)(v6 + 184);
  re::internal::makePoseFromRig(a1, v15, v11, (uint64_t)v25);
  v16 = MEMORY[0x2276916F0](v11);
  re::internal::makePose(a1, v16, (uint64_t)v24);
  v23 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v19, *a1);
  *(_QWORD *)&v18.var0 = 0x10643527A253C4;
  v18.var1 = "TargetPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v19, &v18, (const re::RigDataValue *)v25);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x1AC11FE5968114CLL;
  v18.var1 = "FilterAlpha";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v19, &v18, v7);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x10498EC9357CACLL;
  v18.var1 = "SolvedPose";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v19, &v18, (re::RigDataValue *)v24);
  re::StringID::destroyString((re::StringID *)&v18);
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v19, (uint64_t)a1, (uint64_t)re::internal::filterSolverCallback, (uint64_t *)&v26);
  re::internal::bindCallbackOutputToNodeOutputPose(v15, (re::RigDataValue *)v24, v11, (uint64_t)a1, v8);
  MEMORY[0x2276913A8](v11);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v21 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v19 + 8);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v24);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v25);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v26);
  return 1;
}

void re::internal::registerFilterSolverNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[0] = constinit_0;
  v7[1] = *(_OWORD *)&off_24ED1EA08;
  v7[2] = xmmword_24ED1EA18;
  v7[3] = *(_OWORD *)off_24ED1EA28;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 1uLL, (unint64_t)re::internal::filterSolverCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_34CoreIKACPFilteringSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_34CoreIKACPFilteringSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED1EA48;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_34CoreIKACPFilteringSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED1EA48;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_34CoreIKACPFilteringSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    CoreIKDestroyACPFilteringSolver();
    v4 = v2[2];
    if (v4)
    {
      if (v2[3])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[4]);
        v2[3] = 0;
        v2[4] = 0;
      }
      v2[2] = 0;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_34CoreIKACPFilteringSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN2re8internal14makeNodeUniqueINS0_34CoreIKACPFilteringSolverNodeHelperENS_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_34CoreIKACPFilteringSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
  return &_ZTIZN2re8internal14makeNodeUniqueINS0_34CoreIKACPFilteringSolverNodeHelperENS_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_;
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        do
        {
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 24);
          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::RigDataValue::~RigDataValue(re::RigDataValue *this)
{
  re::RigDataValue::deinit(this);
  re::DynamicArray<re::RigDataValue>::deinit((uint64_t)this + 240);
  re::StringID::destroyString((re::RigDataValue *)((char *)this + 224));
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 23);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 56);
  re::StringID::destroyString((re::RigDataValue *)((char *)this + 40));
}

uint64_t re::DynamicArray<re::RigDataValue>::deinit(uint64_t a1)
{
  uint64_t result;
  re::RigDataValue *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::RigDataValue **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 288 * v4;
        do
        {
          re::RigDataValue::~RigDataValue(v3);
          v3 = (re::RigDataValue *)((char *)v3 + 288);
          v5 -= 288;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::RigDataValue **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::RigDataValue *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t *std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (v3)
    {
      return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
    }
  }
  return result;
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit();
}

uint64_t re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 32 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 32;
          v5 -= 32;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 32 * v2;
      do
      {
        re::StringID::destroyString((re::StringID *)(v4 + 16));
        re::StringID::destroyString((re::StringID *)v4);
        v4 += 32;
        v5 -= 32;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::RigGraphCallbackBuilder::init(re::RigGraphCallbackBuilder *this, re::Allocator *a2)
{
  re::RigGraphCallbackBuilder *v3;
  _QWORD *result;

  v3 = this;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a2;
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::setCapacity((_QWORD *)this + 1, 0);
  *((_QWORD *)v3 + 6) = a2;
  v3 = (re::RigGraphCallbackBuilder *)((char *)v3 + 48);
  ++*((_DWORD *)v3 - 4);
  result = re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::setCapacity(v3, 0);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::RigGraphCallbackBuilder::addInputParam(re::RigGraphCallbackBuilder *this, const StringID *a2, const re::RigDataValue *a3)
{
  _QWORD *v4;
  uint64_t v5[3];

  v4 = (_QWORD *)((char *)this + 8);
  re::StringID::StringID((re::StringID *)v5, a2);
  v5[2] = (uint64_t)a3;
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::add(v4, v5);
  re::StringID::destroyString((re::StringID *)v5);
}

_QWORD *re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 24 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v7 = a2[2];
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v5[2] = v7;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::RigGraphCallbackBuilder::addOutputParam(re::RigGraphCallbackBuilder *this, const StringID *a2, re::RigDataValue *a3)
{
  _QWORD *v4;
  uint64_t v5[3];

  v4 = (_QWORD *)((char *)this + 48);
  re::StringID::StringID((re::StringID *)v5, a2);
  v5[2] = (uint64_t)a3;
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::add(v4, v5);
  re::StringID::destroyString((re::StringID *)v5);
}

uint64_t *re::RigGraphCallbackBuilder::buildCallbackData(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  re::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  _QWORD *v95;
  _BYTE v96[12];
  __int16 v97;
  int v98;
  __int16 v99;
  unint64_t v100;
  __int16 v101;
  unint64_t v102;
  _OWORD v103[5];
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v9 = (re::Allocator *)*a1;
  v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 112, 8);
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  v93 = v10;
  v94[0] = &off_24ED1EAD8;
  v95 = v94;
  v94[1] = v9;
  *(_QWORD *)v10 = a3;
  *(_QWORD *)(v10 + 8) = a4;
  re::FixedArray<re::StringID>::init<>((_QWORD *)(v10 + 16), (uint64_t)v9, a1[3]);
  re::FixedArray<re::RigDataValue>::init<>(v10 + 40, (uint64_t)v9, a1[3]);
  re::FixedArray<re::StringID>::init<>((_QWORD *)(v10 + 64), (uint64_t)v9, a1[8]);
  re::FixedArray<re::RigDataValue>::init<>(v10 + 88, (uint64_t)v9, a1[8]);
  re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)v23);
  re::EvaluationContextManager::init((re::EvaluationContextManager *)v23, v9);
  if (a1[3])
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 16;
    while (1)
    {
      v4 = *(_QWORD *)(v10 + 24);
      if (v4 <= v13)
        break;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)(v10 + 32) + v11), (uint64_t *)(a1[5] + v14 - 16));
      v4 = a1[3];
      if (v4 <= v13)
        goto LABEL_28;
      v4 = *(_QWORD *)(v10 + 48);
      if (v4 <= v13)
        goto LABEL_29;
      re::RigDataValue::operator=((_QWORD *)(*(_QWORD *)(v10 + 56) + v12), *(_QWORD *)(a1[5] + v14));
      v4 = *(_QWORD *)(v10 + 48);
      if (v4 <= v13)
        goto LABEL_30;
      re::RigDataValue::resolveRuntimeInputValues((re::RigDataValue *)(*(_QWORD *)(v10 + 56) + v12), (re::EvaluationContextManager *)v23);
      ++v13;
      v12 += 288;
      v14 += 24;
      v11 += 16;
      if (v13 >= a1[3])
        goto LABEL_8;
    }
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 468;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 789;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 468;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 468;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_31;
  }
LABEL_8:
  if (a1[8])
  {
    v15 = 0;
    v16 = 0;
    v13 = 0;
    v17 = 16;
    while (1)
    {
      v4 = *(_QWORD *)(v10 + 72);
      if (v4 <= v13)
        break;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)(v10 + 80) + v15), (uint64_t *)(a1[10] + v17 - 16));
      v4 = a1[8];
      if (v4 <= v13)
        goto LABEL_33;
      v4 = *(_QWORD *)(v10 + 96);
      if (v4 <= v13)
        goto LABEL_34;
      re::RigDataValue::operator=((_QWORD *)(*(_QWORD *)(v10 + 104) + v16), *(_QWORD *)(a1[10] + v17));
      v4 = *(_QWORD *)(v10 + 96);
      if (v4 <= v13)
        goto LABEL_35;
      re::RigDataValue::resolveRuntimeOutputValues((_QWORD *)(*(_QWORD *)(v10 + 104) + v16), (re::EvaluationContextManager *)v23);
      ++v13;
      v16 += 288;
      v17 += 24;
      v15 += 16;
      if (v13 >= a1[8])
        goto LABEL_15;
    }
LABEL_32:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 468;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 789;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 468;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_35:
    *(_QWORD *)v96 = 0;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v103[0]) = 136315906;
    *(_QWORD *)((char *)v103 + 4) = "operator[]";
    WORD6(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 14) = 468;
    WORD1(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 4) = v13;
    WORD6(v103[1]) = 2048;
    *(_QWORD *)((char *)&v103[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_15:
  if (!v60)
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)v23);
  *(_QWORD *)&v62 = v25;
  *((_QWORD *)&v62 + 1) = v24;
  *(_QWORD *)&v63 = v27;
  *((_QWORD *)&v63 + 1) = v26;
  *(_QWORD *)&v64 = v29;
  *((_QWORD *)&v64 + 1) = v28;
  *(_QWORD *)&v65 = v31;
  *((_QWORD *)&v65 + 1) = v30;
  *(_QWORD *)&v66 = v33;
  *((_QWORD *)&v66 + 1) = v32;
  v67 = v35;
  v68 = v34;
  v69 = v37;
  v70 = v36;
  v71 = v39;
  v72 = v38;
  v73 = v41;
  v74 = v40;
  v75 = v43;
  v76 = v42;
  v77 = v45;
  v78 = v44;
  v79 = v47;
  v80 = v46;
  v81 = v49;
  v82 = v48;
  v83 = v51;
  v84 = v50;
  v85 = v53;
  v86 = v52;
  v87 = v55;
  v88 = v54;
  v89 = v57;
  v90 = v56;
  v91 = v59;
  v92 = v58;
  if (a1[8])
  {
    v18 = 0;
    v13 = 0;
    v19 = 16;
    while (1)
    {
      v12 = *(_QWORD *)(v10 + 96);
      if (v12 <= v13)
        break;
      re::RigDataValue::setCompilationValueFromCallbackOutput(*(_QWORD *)(a1[10] + v19), (re::RigDataValue *)(*(_QWORD *)(v10 + 104) + v18), &v62);
      ++v13;
      v19 += 24;
      v18 += 288;
      if (v13 >= a1[8])
        goto LABEL_21;
    }
LABEL_31:
    v61 = 0;
    memset(v103, 0, sizeof(v103));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    v97 = 1024;
    v98 = 468;
    v99 = 2048;
    v100 = v13;
    v101 = 2048;
    v102 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
LABEL_21:
  v20 = (_QWORD *)re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::addUninitialized(a2 + 32);
  v21 = v93;
  v93 = 0;
  *v20 = v21;
  if (v95)
  {
    if (v95 == v94)
    {
      v20[4] = v20 + 1;
      (*(void (**)(_QWORD *))(*v95 + 24))(v95);
    }
    else
    {
      v20[4] = v95;
      v95 = 0;
    }
  }
  else
  {
    v20[4] = 0;
  }
  re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)v23);
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v93);
}

_QWORD *re::FixedArray<re::StringID>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[1] = &str_110;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[1] = &str_110;
  return result;
}

uint64_t re::FixedArray<re::RigDataValue>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0xE38E38E38E38E4)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 288, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 288 * a3, 16);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_BYTE *)(result + 32) = 0;
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = &str_110;
      *(_QWORD *)(result + 88) = 0;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_DWORD *)(result + 80) = 0;
      *(_BYTE *)(result + 96) = 0;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_OWORD *)(result + 128) = 0uLL;
      *(_OWORD *)(result + 144) = 0uLL;
      *(_OWORD *)(result + 160) = 0uLL;
      *(_QWORD *)(result + 176) = -1;
      *(_QWORD *)(result + 184) = 0;
      *(_QWORD *)(result + 216) = 0;
      *(_QWORD *)(result + 224) = 0;
      *(_QWORD *)(result + 272) = 0;
      *(_DWORD *)(result + 264) = 0;
      *(_QWORD *)(result + 232) = &str_110;
      *(_QWORD *)(result + 240) = 0;
      *(_QWORD *)(result + 248) = 0;
      *(_QWORD *)(result + 256) = 0;
      result += 288;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)(result + 32) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &str_110;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_QWORD *)(result + 176) = -1;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_DWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 232) = &str_110;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  return result;
}

uint64_t re::EvaluationContextManager::init(re::EvaluationContextManager *this, re::Allocator *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  re::Allocator *v8;

  v8 = a2;
  *(_QWORD *)this = a2;
  re::DynamicRegisterIdTable::initArrays<re::Allocator *&>((_QWORD *)this + 1, &v8);
  *((_QWORD *)this + 41) = v8;
  re::DynamicArray<re::EvaluationSRT>::setCapacity((_QWORD *)this + 41, 0);
  ++*((_DWORD *)this + 88);
  re::DynamicRegisterTable::initArrays<re::Allocator *&>((_QWORD *)this + 46, &v8);
  *((_QWORD *)this + 86) = v8;
  re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)this + 86, 0);
  v3 = 0;
  ++*((_DWORD *)this + 178);
  do
  {
    *(_QWORD *)((char *)this + v3 + 728) = v8;
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::setCapacity((re::EvaluationContextManager *)((char *)this + v3 + 728), 0);
    ++*(_DWORD *)((char *)this + v3 + 752);
    v3 += 40;
  }
  while (v3 != 360);
  for (i = 0; i != 360; i += 40)
  {
    *(_QWORD *)((char *)this + i + 1088) = v8;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((re::EvaluationContextManager *)((char *)this + i + 1088), 0);
    ++*(_DWORD *)((char *)this + i + 1112);
  }
  re::DynamicRegisterIdTable::initArrays<re::Allocator *&>((_QWORD *)this + 181, &v8);
  *((_QWORD *)this + 221) = v8;
  re::DynamicArray<re::EvaluationSRT>::setCapacity((_QWORD *)this + 221, 0);
  v5 = 0;
  ++*((_DWORD *)this + 448);
  do
  {
    *(_QWORD *)((char *)this + v5 + 1808) = v8;
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::setCapacity((re::EvaluationContextManager *)((char *)this + v5 + 1808), 0);
    ++*(_DWORD *)((char *)this + v5 + 1832);
    v5 += 40;
  }
  while (v5 != 360);
  for (j = 0; j != 360; j += 40)
  {
    *(_QWORD *)((char *)this + j + 2168) = v8;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((re::EvaluationContextManager *)((char *)this + j + 2168), 0);
    ++*(_DWORD *)((char *)this + j + 2192);
  }
  *((_BYTE *)this + 2528) = 0;
  return re::EvaluationContext::deinit((re::EvaluationContextManager *)((char *)this + 2536));
}

uint64_t re::`anonymous namespace'::resolveEvaluationContextCallback(re::EvaluationContext *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 56);
    v6 = 288 * v4;
    do
    {
      re::RigDataValue::setRuntimeContext(v5, a1);
      v5 += 288;
      v6 -= 288;
    }
    while (v6);
  }
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  if (v7)
  {
    v9 = 288 * v7;
    do
    {
      re::RigDataValue::setRuntimeContext(v8, a1);
      v8 += 288;
      v9 -= 288;
    }
    while (v9);
    v10 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 104);
  }
  else
  {
    v10 = 0;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))a2)(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 72), v8, v10, *(_QWORD *)(a2 + 8));
}

_QWORD *re::RigGraphCallbackBuilder::buildCallbackData(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;

  re::RigGraphCallbackBuilder::buildCallbackData(a1, a2, a3, *a4);
  v6 = (_QWORD *)re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::addUninitialized(a2 + 32);
  return std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](v6, a4);
}

double re::EvaluationContextManager::EvaluationContextManager(re::EvaluationContextManager *this)
{
  uint64_t v1;
  char *v2;
  uint64_t i;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t j;
  char *v8;
  double result;

  v1 = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 78) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_DWORD *)this + 108) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 118) = 0;
  *((_DWORD *)this + 128) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_DWORD *)this + 138) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 0;
  *((_DWORD *)this + 158) = 0;
  *((_DWORD *)this + 168) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 90) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 178) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  do
  {
    v2 = (char *)this + v1;
    *((_QWORD *)v2 + 95) = 0;
    *((_QWORD *)v2 + 91) = 0;
    *((_QWORD *)v2 + 93) = 0;
    *((_QWORD *)v2 + 92) = 0;
    v1 += 40;
    *((_DWORD *)v2 + 188) = 0;
  }
  while (v1 != 360);
  for (i = 0; i != 360; i += 40)
  {
    v4 = (char *)this + i;
    *((_QWORD *)v4 + 140) = 0;
    *((_QWORD *)v4 + 136) = 0;
    *((_QWORD *)v4 + 138) = 0;
    *((_QWORD *)v4 + 137) = 0;
    *((_DWORD *)v4 + 278) = 0;
  }
  v5 = 0;
  *((_QWORD *)this + 181) = 0;
  *((_QWORD *)this + 182) = 0;
  *((_DWORD *)this + 368) = 0;
  *((_QWORD *)this + 183) = 0;
  *((_DWORD *)this + 378) = 0;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_DWORD *)this + 388) = 0;
  *((_DWORD *)this + 398) = 0;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_DWORD *)this + 408) = 0;
  *((_DWORD *)this + 418) = 0;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_DWORD *)this + 428) = 0;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 438) = 0;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *((_QWORD *)this + 225) = 0;
  *((_DWORD *)this + 448) = 0;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 111) = 0u;
  do
  {
    v6 = (char *)this + v5;
    *((_QWORD *)v6 + 230) = 0;
    *((_QWORD *)v6 + 226) = 0;
    *((_QWORD *)v6 + 228) = 0;
    *((_QWORD *)v6 + 227) = 0;
    v5 += 40;
    *((_DWORD *)v6 + 458) = 0;
  }
  while (v5 != 360);
  for (j = 0; j != 360; j += 40)
  {
    v8 = (char *)this + j;
    *((_QWORD *)v8 + 275) = 0;
    *((_QWORD *)v8 + 271) = 0;
    *((_QWORD *)v8 + 273) = 0;
    *((_QWORD *)v8 + 272) = 0;
    *((_DWORD *)v8 + 548) = 0;
  }
  *((_BYTE *)this + 2528) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  *(_OWORD *)((char *)this + 2760) = 0u;
  *(_OWORD *)((char *)this + 2776) = 0u;
  *(_OWORD *)((char *)this + 2792) = 0u;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *(_OWORD *)((char *)this + 2840) = 0u;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *(_OWORD *)((char *)this + 2872) = 0u;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *(_OWORD *)((char *)this + 2904) = 0u;
  *(_OWORD *)((char *)this + 2920) = 0u;
  *(_OWORD *)((char *)this + 2936) = 0u;
  *(_OWORD *)((char *)this + 2952) = 0u;
  return result;
}

_QWORD *re::DynamicRegisterIdTable::initArrays<re::Allocator *&>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = a1;
  *a1 = *a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(a1, 0);
  ++*((_DWORD *)v3 + 6);
  v3[5] = *a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3 + 5, 0);
  ++*((_DWORD *)v3 + 16);
  v3[10] = *a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3 + 10, 0);
  ++*((_DWORD *)v3 + 26);
  v3[15] = *a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3 + 15, 0);
  ++*((_DWORD *)v3 + 36);
  v3[20] = *a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3 + 20, 0);
  ++*((_DWORD *)v3 + 46);
  v3[25] = *a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3 + 25, 0);
  v3[30] = *a2;
  v3 += 30;
  ++*((_DWORD *)v3 - 4);
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3, 0);
  ++*((_DWORD *)v3 + 6);
  v3[5] = *a2;
  result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3 + 5, 0);
  ++*((_DWORD *)v3 + 16);
  return result;
}

_QWORD *re::DynamicRegisterTable::initArrays<re::Allocator *&>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = a1;
  *a1 = *a2;
  re::DynamicArray<int>::setCapacity(a1, 0);
  ++*((_DWORD *)v3 + 6);
  v3[5] = *a2;
  re::DynamicArray<int>::setCapacity(v3 + 5, 0);
  ++*((_DWORD *)v3 + 16);
  v3[10] = *a2;
  re::DynamicArray<int>::setCapacity(v3 + 10, 0);
  ++*((_DWORD *)v3 + 26);
  v3[15] = *a2;
  re::DynamicArray<re::Matrix3x3<float>>::setCapacity(v3 + 15, 0);
  ++*((_DWORD *)v3 + 36);
  v3[20] = *a2;
  re::DynamicArray<re::Matrix4x4<float>>::setCapacity(v3 + 20, 0);
  ++*((_DWORD *)v3 + 46);
  v3[25] = *a2;
  re::DynamicArray<re::Quaternion<float>>::setCapacity(v3 + 25, 0);
  v3[30] = *a2;
  v3 += 30;
  ++*((_DWORD *)v3 - 4);
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v3, 0);
  ++*((_DWORD *)v3 + 6);
  v3[5] = *a2;
  result = re::DynamicArray<re::Quaternion<float>>::setCapacity(v3 + 5, 0);
  ++*((_DWORD *)v3 + 16);
  return result;
}

uint64_t re::EvaluationContext::deinit(re::EvaluationContext *this)
{
  uint64_t v2;
  uint64_t result;

  re::FixedRegisterTable::deinit(this);
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  re::FixedRegisterTable::deinit((re::EvaluationContext *)((char *)this + 216));
  result = *((_QWORD *)this + 51);
  if (result)
  {
    if (*((_QWORD *)this + 52))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 53));
      *((_QWORD *)this + 52) = 0;
      *((_QWORD *)this + 53) = 0;
    }
    *((_QWORD *)this + 51) = 0;
  }
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationSRT>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 24 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationSRT>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<int>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 62)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 4, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 4 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 4 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 4 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<int>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Matrix3x3<float>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 48 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Matrix3x3<float>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Matrix4x4<float>>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 6);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Matrix4x4<float>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Quaternion<float>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Quaternion<float>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationContextManager::BindPointReference>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationContextManager::BindPointReference>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::BindPoint::BindPoint(v11, (uint64_t *)v8);
          *(_BYTE *)(v11 + 48) = *(_BYTE *)(v8 + 48);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v8 + 8);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v8 + 8);
          v8 += 56;
          v11 += 56;
          v10 -= 56;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::BindPoint::BindPoint(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  v3 = a2[2];
  *(_QWORD *)(result + 8) = a2[1];
  *(_QWORD *)(result + 16) = v3;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = a2[3];
  a2[3] = v4;
  v5 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = a2[5];
  a2[5] = v5;
  ++*((_DWORD *)a2 + 8);
  ++*(_DWORD *)(result + 32);
  return result;
}

uint64_t re::FixedRegisterTable::deinit(re::FixedRegisterTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    if (*((_QWORD *)this + 10))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 11));
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 14));
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  v7 = *((_QWORD *)this + 15);
  if (v7)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  v8 = *((_QWORD *)this + 18);
  if (v8)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  result = *((_QWORD *)this + 21);
  if (result)
  {
    if (*((_QWORD *)this + 22))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 23));
      *((_QWORD *)this + 22) = 0;
      *((_QWORD *)this + 23) = 0;
    }
    *((_QWORD *)this + 21) = 0;
  }
  return result;
}

void re::EvaluationContextManager::~EvaluationContextManager(re::EvaluationContextManager *this)
{
  re::FixedRegisterTable *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  uint64_t k;
  _QWORD *v11;
  uint64_t v12;
  uint64_t m;
  uint64_t v14;
  uint64_t v15;

  v2 = (re::EvaluationContextManager *)((char *)this + 2536);
  v3 = *((_QWORD *)this + 368);
  if (v3)
  {
    if (*((_QWORD *)this + 369))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 370));
      *((_QWORD *)this + 369) = 0;
      *((_QWORD *)this + 370) = 0;
    }
    *((_QWORD *)this + 368) = 0;
  }
  re::FixedRegisterTable::~FixedRegisterTable((re::EvaluationContextManager *)((char *)this + 2752));
  v4 = *((_QWORD *)this + 341);
  if (v4)
  {
    if (*((_QWORD *)this + 342))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 343));
      *((_QWORD *)this + 342) = 0;
      *((_QWORD *)this + 343) = 0;
    }
    *((_QWORD *)this + 341) = 0;
  }
  re::FixedRegisterTable::~FixedRegisterTable(v2);
  for (i = 0; i != -360; i -= 40)
  {
    v6 = (_QWORD *)((char *)this + i);
    v7 = *(_QWORD *)((char *)this + i + 2488);
    if (v7)
    {
      if (v6[315])
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v6[315] = 0;
      v6[312] = 0;
      v6[313] = 0;
      v6[311] = 0;
      ++*(_DWORD *)((char *)this + i + 2512);
    }
  }
  for (j = 2128; j != 1768; j -= 40)
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit((uint64_t)this + j);
  v9 = *((_QWORD *)this + 221);
  if (v9)
  {
    if (*((_QWORD *)this + 225))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *((_QWORD *)this + 225) = 0;
    *((_QWORD *)this + 222) = 0;
    *((_QWORD *)this + 223) = 0;
    *((_QWORD *)this + 221) = 0;
    ++*((_DWORD *)this + 448);
  }
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationContextManager *)((char *)this + 1448));
  for (k = 0; k != -360; k -= 40)
  {
    v11 = (_QWORD *)((char *)this + k);
    v12 = *(_QWORD *)((char *)this + k + 1408);
    if (v12)
    {
      if (v11[180])
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v11[180] = 0;
      v11[177] = 0;
      v11[178] = 0;
      v11[176] = 0;
      ++*(_DWORD *)((char *)this + k + 1432);
    }
  }
  for (m = 1048; m != 688; m -= 40)
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit((uint64_t)this + m);
  v14 = *((_QWORD *)this + 86);
  if (v14)
  {
    if (*((_QWORD *)this + 90))
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    *((_QWORD *)this + 90) = 0;
    *((_QWORD *)this + 87) = 0;
    *((_QWORD *)this + 88) = 0;
    *((_QWORD *)this + 86) = 0;
    ++*((_DWORD *)this + 178);
  }
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationContextManager *)((char *)this + 368));
  v15 = *((_QWORD *)this + 41);
  if (v15)
  {
    if (*((_QWORD *)this + 45))
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    *((_QWORD *)this + 45) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 43) = 0;
    *((_QWORD *)this + 41) = 0;
    ++*((_DWORD *)this + 88);
  }
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationContextManager *)((char *)this + 8));
}

void re::FixedRegisterTable::~FixedRegisterTable(re::FixedRegisterTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    if (*((_QWORD *)this + 22))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 23));
      *((_QWORD *)this + 22) = 0;
      *((_QWORD *)this + 23) = 0;
    }
    *((_QWORD *)this + 21) = 0;
  }
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 14));
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    if (*((_QWORD *)this + 10))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 11));
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
}

uint64_t re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 8;
        v6 = 56 * v4;
        do
        {
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v5);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v5);
          v5 += 56;
          v6 -= 56;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicRegisterIdTable::~DynamicRegisterIdTable(re::DynamicRegisterIdTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    if (*((_QWORD *)this + 39))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 35) = 0;
    ++*((_DWORD *)this + 76);
  }
  v3 = *((_QWORD *)this + 30);
  if (v3)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    if (*((_QWORD *)this + 29))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 25) = 0;
    ++*((_DWORD *)this + 56);
  }
  v5 = *((_QWORD *)this + 20);
  if (v5)
  {
    if (*((_QWORD *)this + 24))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 20) = 0;
    ++*((_DWORD *)this + 46);
  }
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 15) = 0;
    ++*((_DWORD *)this + 36);
  }
  v7 = *((_QWORD *)this + 10);
  if (v7)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

_QWORD *re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  re::StringID *v8;
  uint64_t v9;
  re::StringID *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::StringID *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (re::StringID *)((char *)v8 + 24 * v9);
        v11 = v7;
        do
        {
          v12 = *(_QWORD *)v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v8 & 1;
          *v11 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v13 = *((_QWORD *)v8 + 2);
          v11[1] = *((_QWORD *)v8 + 1);
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = &str_110;
          v11[2] = v13;
          re::StringID::destroyString(v8);
          v8 = (re::StringID *)((char *)v8 + 24);
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (re::StringID *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::StringID *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::StringID,re::RigDataValue const*,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void std::__function::__func<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0,std::allocator<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0,std::allocator<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED1EAD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0,std::allocator<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED1EAD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0,std::allocator<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0>,void ()(void *)>::operator()(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::FixedArray<re::RigDataValue>::deinit(v2 + 11);
    re::FixedArray<re::StringID>::deinit(v2 + 8);
    re::FixedArray<re::RigDataValue>::deinit(v2 + 5);
    re::FixedArray<re::StringID>::deinit(v2 + 2);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0,std::allocator<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0,std::allocator<re::RigGraphCallbackBuilder::buildCallbackData(re::RigGraphSystem &,void (*)(re::Slice<re::StringID>,re::Slice<re::RigDataValue>,re::Slice<re::StringID>,re::MutableSlice<re::RigDataValue>,void *),void *)::$_0>,void ()(void *)>::target_type()
{
}

_QWORD *re::FixedArray<re::RigDataValue>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::RigDataValue *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::RigDataValue *)result[2];
      v5 = 288 * v2;
      do
      {
        re::RigDataValue::~RigDataValue(v4);
        v4 = (re::RigDataValue *)(v6 + 288);
        v5 -= 288;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::StringID>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::StringID *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::StringID *)result[2];
      v5 = 16 * v2;
      do
      {
        re::StringID::destroyString(v4);
        v4 = (re::StringID *)((char *)v4 + 16);
        v5 -= 16;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::EvaluationContextManager::buildEvaluationContext(re::EvaluationContextManager *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[2];

  *((_BYTE *)this + 2528) = 1;
  v2 = (char *)this + 2536;
  v3 = (_QWORD *)((char *)this + 368);
  re::FixedRegisterTable::initSize<re::DynamicRegisterTable>((uint64_t *)this + 317, *(_QWORD *)this, (unint64_t *)this + 46);
  re::FixedRegisterTable::operator=<re::DynamicRegisterTable>((uint64_t)v2, v3);
  re::FixedArray<re::GenericSRT<float>>::init<>((_QWORD *)this + 341, *(_QWORD *)this, *((_QWORD *)this + 88));
  v4 = *((_QWORD *)this + 88);
  v6[0] = *((_QWORD *)this + 90);
  v6[1] = v4;
  re::FixedArray<re::GenericSRT<float>>::operator=((re::EvaluationContextManager *)((char *)this + 2728), (uint64_t)v6);
  re::FixedRegisterTable::initSize<re::DynamicRegisterTable>((uint64_t *)this + 344, *(_QWORD *)this, (unint64_t *)this + 181);
  return re::FixedArray<re::GenericSRT<float>>::init<>((_QWORD *)this + 368, *(_QWORD *)this, *((_QWORD *)this + 223));
}

_QWORD *re::SliceRegisterIdTable::operator=<re::DynamicRegisterIdTable>(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2[2];
  *result = a2[4];
  result[1] = v2;
  v3 = a2[7];
  result[2] = a2[9];
  result[3] = v3;
  v4 = a2[12];
  result[4] = a2[14];
  result[5] = v4;
  v5 = a2[17];
  result[6] = a2[19];
  result[7] = v5;
  v6 = a2[22];
  result[8] = a2[24];
  result[9] = v6;
  v7 = a2[27];
  result[10] = a2[29];
  result[11] = v7;
  v8 = a2[32];
  result[12] = a2[34];
  result[13] = v8;
  v9 = a2[37];
  result[14] = a2[39];
  result[15] = v9;
  return result;
}

void re::FixedRegisterTable::initSize<re::DynamicRegisterTable>(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  re::FixedArray<int>::init<>(a1, a2, a3[2]);
  re::FixedArray<int>::init<>(a1 + 3, a2, a3[7]);
  re::FixedArray<int>::init<>(a1 + 6, a2, a3[12]);
  re::FixedArray<re::Matrix3x3<float>>::init<>(a1 + 9, a2, a3[17]);
  re::FixedArray<re::Matrix4x4<float>>::init<>(a1 + 12, a2, a3[22]);
  re::FixedArray<re::Quaternion<float>>::init<>(a1 + 15, a2, a3[27]);
  re::FixedArray<re::Vector2<float>>::init<>(a1 + 18, a2, a3[32]);
  re::FixedArray<re::Vector3<float>>::init<>(a1 + 21, a2, a3[37]);
}

uint64_t re::FixedRegisterTable::operator=<re::DynamicRegisterTable>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[2];
  v13 = a2[4];
  v14 = v4;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)a1, (uint64_t)&v13);
  v5 = a2[7];
  v13 = a2[9];
  v14 = v5;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a1 + 24), (uint64_t)&v13);
  v6 = a2[12];
  v13 = a2[14];
  v14 = v6;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a1 + 48), (uint64_t)&v13);
  v7 = a2[17];
  v13 = a2[19];
  v14 = v7;
  re::FixedArray<re::Matrix3x3<float>>::operator=((_anonymous_namespace_ *)(a1 + 72), (uint64_t)&v13);
  v8 = a2[22];
  v13 = a2[24];
  v14 = v8;
  re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a1 + 96), (uint64_t)&v13);
  v9 = a2[27];
  v13 = a2[29];
  v14 = v9;
  re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(a1 + 120), (uint64_t)&v13);
  v10 = a2[32];
  v13 = a2[34];
  v14 = v10;
  re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(a1 + 144), (uint64_t)&v13);
  v11 = a2[37];
  v13 = a2[39];
  v14 = v11;
  re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(a1 + 168), (uint64_t)&v13);
  return a1;
}

_QWORD *re::FixedArray<re::GenericSRT<float>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48 * a3, 16);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0x3F8000003F800000;
      result[1] = 1065353216;
      result[2] = 0;
      result[3] = 0x3F80000000000000;
      result[4] = 0;
      result[5] = 0;
      result += 6;
      --v6;
    }
    while (v6);
  }
  *result = 0x3F8000003F800000;
  result[1] = 1065353216;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  result[4] = 0;
  result[5] = 0;
  return result;
}

_anonymous_namespace_ *re::FixedArray<re::GenericSRT<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Matrix3x3<float>>::copy(a1, a2);
  }
  return a1;
}

void re::FixedArray<int>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 4 * a3;
  v6 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 4 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 4);
    v8 = (_DWORD *)((char *)v8 + v5 - 4);
  }
  *v8 = 0;
}

void re::FixedArray<re::Matrix3x3<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0x555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 48 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 48);
    v8 = (_OWORD *)((char *)v8 + v5 - 48);
  }
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
}

void re::FixedArray<re::Matrix4x4<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = a3 << 6;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 6, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 64);
    v8 = (_OWORD *)((char *)v8 + v5 - 64);
  }
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
}

void re::FixedArray<re::Quaternion<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 16 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    memset_pattern16(v6, &memset_pattern, v5 - 16);
    v8 = (_OWORD *)((char *)v8 + v5 - 16);
  }
  *v8 = xmmword_2260E5D70;
}

void re::FixedArray<re::Vector2<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

void re::FixedArray<re::Vector3<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 16 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    v8 = (_OWORD *)((char *)v8 + v5 - 16);
  }
  *v8 = 0u;
}

_anonymous_namespace_ *re::FixedArray<int>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<int>::copy(a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::FixedArray<re::Matrix3x3<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Matrix3x3<float>>::copy(a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::FixedArray<re::Matrix4x4<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Matrix4x4<float>>::copy(a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::FixedArray<re::Quaternion<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Quaternion<float>>::copy(a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::FixedArray<re::Vector2<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Vector2<float>>::copy(a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::FixedArray<re::Vector3<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Quaternion<float>>::copy(a1, a2);
  }
  return a1;
}

void *re::FixedArray<int>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 4 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)(a2 + 16), 4 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void *re::FixedArray<re::Matrix3x3<float>>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 48 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void *re::FixedArray<re::Matrix4x4<float>>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, v2 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)(a2 + 16), v2 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void *re::FixedArray<re::Quaternion<float>>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 16 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void *re::FixedArray<re::Vector2<float>>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 8 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

#error "224FF58F8: too big function (funcsize=0)"

_QWORD *re::DynamicArray<re::RigComponentConstraint>::add(_QWORD *this, __int16 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigComponentConstraint>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 88 * v4;
  v6 = *a2;
  *(_BYTE *)(v5 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)v5 = v6;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  v7 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(v5 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v5 + 16) = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  ++*((_DWORD *)a2 + 8);
  ++*(_DWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 72) = 0;
  v10 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(v5 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(v5 + 56) = v10;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v11 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  ++*((_DWORD *)a2 + 18);
  ++*(_DWORD *)(v5 + 72);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<unsigned long>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<unsigned long>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

float re::DynamicArray<float>::add(_anonymous_namespace_ *this, float *a2)
{
  unint64_t v4;
  float result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<float>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(float *)(*((_QWORD *)this + 4) + 4 * v4) = *a2;
  *((_QWORD *)this + 2) = v4 + 1;
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::RigBasicConstraint>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigBasicConstraint>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 80 * v4;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 48) = v9;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v10;
  v11 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v11;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(v5 + 64);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

__n128 re::DynamicArray<re::RigAimConstraint>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigAimConstraint>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 144 * v4;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)v5 = result;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 72) = 0;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 56) = v8;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v9 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v10;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v5 + 96) = v11;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v12 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v12;
  v13 = *(_QWORD *)(v5 + 120);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v5 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v13;
  ++*(_DWORD *)(a2 + 112);
  ++*(_DWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 128) = v14;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::RigTwoBoneIKHandles>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigTwoBoneIKHandles>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::RigTwoBoneIKHandles::RigTwoBoneIKHandles(*((_QWORD *)this + 4) + 240 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::RigTransform>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigTransform>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 48) = v8;
  *(__n128 *)v5 = result;
  *(_OWORD *)(v5 + 16) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::RigJoint>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigJoint>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 96 * v4;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  result = *(__n128 *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v9;
  *(__n128 *)(v5 + 32) = result;
  *(_OWORD *)(v5 + 48) = v8;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::RigNodeConstraint>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigNodeConstraint>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::RigNode>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigNode>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 56 * v4;
  v6 = a2->n128_u64[0];
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | a2->n128_u64[0] & 1;
  *(_QWORD *)v5 = a2->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = (unint64_t)&str_110;
  result = a2[1];
  v8 = a2[2];
  *(_QWORD *)(v5 + 48) = a2[3].n128_u64[0];
  *(__n128 *)(v5 + 16) = result;
  *(__n128 *)(v5 + 32) = v8;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RigTwoBoneIKHandles::~RigTwoBoneIKHandles(re::RigTwoBoneIKHandles *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)((char *)this + 200);
  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    if (*((_QWORD *)this + 29))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 29) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 56);
  }
  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    if (*((_QWORD *)this + 24))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 20) = 0;
    ++*((_DWORD *)this + 46);
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 15) = 0;
    ++*((_DWORD *)this + 36);
  }
  v6 = *((_QWORD *)this + 10);
  if (v6)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

_QWORD *re::DynamicArray<re::RigComponentConstraint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigComponentConstraint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int16 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 88 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::RigComponentConstraint>(v8, v11);
          v8 += 44;
          v11 += 88;
          v10 -= 88;
        }
        while (v10);
        v8 = (__int16 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int16 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::RigComponentConstraint>(__int16 *a1, uint64_t a2)
{
  __int16 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v3 = *a1;
  *(_BYTE *)(a2 + 2) = *((_BYTE *)a1 + 2);
  *(_WORD *)a2 = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  v4 = (uint64_t *)(a1 + 4);
  v5 = *((_QWORD *)a1 + 2);
  *(_QWORD *)(a2 + 8) = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *((_QWORD *)a1 + 2) = 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v7;
  ++*((_DWORD *)a1 + 8);
  ++*(_DWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  v8 = a1 + 24;
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 6);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = 0;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)v8 + 2);
  ++*((_DWORD *)v8 + 6);
  ++*(_DWORD *)(a2 + 72);
  *((_QWORD *)v8 + 2) = v11;
  *((_QWORD *)v8 + 4) = v9;
  if (v10)
  {
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v9);
    *((_QWORD *)a1 + 10) = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    ++*((_DWORD *)a1 + 18);
  }
  result = *v4;
  if (*v4)
  {
    if (*((_QWORD *)a1 + 5))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *((_QWORD *)a1 + 5) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*((_DWORD *)a1 + 8);
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigBasicConstraint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigBasicConstraint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 80 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::RigBasicConstraint>(v8, v11);
          v8 += 80;
          v11 += 80;
          v10 -= 80;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::RigBasicConstraint>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  ++*(_DWORD *)(a1 + 24);
  ++*(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  v6 = a1 + 40;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v6 + 8) = 0;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v6 + 16);
  ++*(_DWORD *)(v6 + 24);
  ++*(_DWORD *)(a2 + 64);
  *(_QWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 32) = v7;
  if (v8)
  {
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, v7);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = 0;
    ++*(_DWORD *)(a1 + 64);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigAimConstraint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigAimConstraint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 144 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::RigAimConstraint>(v8, v11);
          v8 += 9;
          v11 += 144;
          v10 -= 144;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::RigAimConstraint>(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v3 = *a1;
  v4 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  v5 = (uint64_t *)(a1 + 3);
  v6 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  *(_QWORD *)(a2 + 56) = v6;
  *((_QWORD *)a1 + 7) = 0;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = v8;
  ++*((_DWORD *)a1 + 18);
  ++*(_DWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  v9 = (uint64_t)a1 + 88;
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = 0;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a1 + 15);
  v11 = *((_QWORD *)a1 + 11);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v9 + 8) = 0;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = v12;
  ++*(_DWORD *)(v9 + 24);
  ++*(_DWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 32) = v10;
  if (v11)
  {
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v10);
    *((_QWORD *)a1 + 15) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)v9 = 0;
    ++*((_DWORD *)a1 + 28);
  }
  result = *v5;
  if (*v5)
  {
    if (*((_QWORD *)a1 + 10))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *((_QWORD *)a1 + 10) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*((_DWORD *)a1 + 18);
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigTwoBoneIKHandles>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::RigTwoBoneIKHandles *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigTwoBoneIKHandles>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          v2 = 240 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::RigTwoBoneIKHandles *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 240 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::RigTwoBoneIKHandles::RigTwoBoneIKHandles(v11, (uint64_t)v8);
          re::RigTwoBoneIKHandles::~RigTwoBoneIKHandles(v8);
          v8 = (re::RigTwoBoneIKHandles *)((char *)v8 + 240);
          v11 += 240;
          v10 -= 240;
        }
        while (v10);
        v8 = (re::RigTwoBoneIKHandles *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::RigTwoBoneIKHandles *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RigTwoBoneIKHandles::RigTwoBoneIKHandles(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  v4 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v8;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_QWORD *)(result + 96);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  v10 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 144) = 0;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 128) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_QWORD *)(result + 136);
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v12;
  v13 = *(_QWORD *)(result + 152);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 144);
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(result + 168) = v14;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v15 = *(_QWORD *)(result + 176);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v15;
  v16 = *(_QWORD *)(result + 192);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v16;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(result + 184);
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 224) = 0;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(result + 208) = v17;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v18 = *(_QWORD *)(result + 216);
  *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v18;
  v19 = *(_QWORD *)(result + 232);
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = v19;
  ++*(_DWORD *)(a2 + 224);
  ++*(_DWORD *)(result + 224);
  return result;
}

_QWORD *re::DynamicArray<re::RigSingleChainIKHandles>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigSingleChainIKHandles>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 7;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::RigSingleChainIKHandles>(v8, v11);
          v8 += 128;
          v11 += 128;
          v10 -= 128;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::RigSingleChainIKHandles>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  ++*(_DWORD *)(a1 + 24);
  ++*(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  ++*(_DWORD *)(a1 + 64);
  ++*(_DWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  v10 = a1 + 80;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v13;
  ++*(_DWORD *)(v10 + 24);
  ++*(_DWORD *)(a2 + 104);
  *(_QWORD *)(v10 + 32) = v11;
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(v10 + 40);
  if (v12)
  {
    if (v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v11);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  if (*v6)
  {
    if (*(_QWORD *)(a1 + 72))
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
    *(_QWORD *)(a1 + 72) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    ++*(_DWORD *)(a1 + 64);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigTransform>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 6);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigTransform>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigJoint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 96 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigJoint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigNodeConstraint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigNode>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigNode>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[7 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = *((_OWORD *)v8 + 1);
          v14 = *((_OWORD *)v8 + 2);
          v11[6] = v8[6];
          *((_OWORD *)v11 + 1) = v13;
          *((_OWORD *)v11 + 2) = v14;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigComponentConstraint>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigComponentConstraint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigComponentConstraint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<unsigned long>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<float>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<int>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<int>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigBasicConstraint>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigBasicConstraint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigBasicConstraint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigAimConstraint>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigAimConstraint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigAimConstraint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigTwoBoneIKHandles>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigTwoBoneIKHandles>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigTwoBoneIKHandles>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigTransform>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigTransform>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigTransform>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigJoint>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigJoint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigJoint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigNodeConstraint>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigNodeConstraint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigNode>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigNode>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigNode>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::StateMachine::init(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, const re::StringID *a5, uint64_t a6)
{
  unint64_t StateGraphByName;
  uint64_t result;
  uint64_t v13;
  unint64_t v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  StateGraphByName = re::StateGraph::findStateGraphByName(a2, a4);
  *(_QWORD *)a1 = StateGraphByName;
  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (StateGraphByName == -1)
    return 0;
  if (*(_QWORD *)(a2 + 16) <= StateGraphByName)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)v14 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * StateGraphByName);
  if (result)
  {
    v14[0] = -1;
    result = re::StateGraph::findStateByName((re::StateGraph *)result, a5, v14);
    if (result)
    {
      v13 = result;
      *(_QWORD *)(a1 + 8) = v14[0];
      *(_DWORD *)(a1 + 40) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)result + 16))(result, a1, a2, a3, 0.0);
      re::StateMachineState::internalEnterState(v13, a1, a2, a3, a6);
      return 1;
    }
  }
  return result;
}

uint64_t re::StateMachine::currentState(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *a1;
  if (*a1 == -1 || v2 >= *(_QWORD *)(a2 + 16))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v2);
  if (!v4)
    return 0;
  v5 = a1[1];
  if (v5 == -1 || *(_QWORD *)(v4 + 40) <= v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
}

uint64_t re::StateMachine::previousState(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == -1 || v2 >= *(_QWORD *)(a2 + 16))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v2);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 == -1 || *(_QWORD *)(v4 + 40) <= v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
}

float re::StateMachine::tryDoStateTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float result)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t canTransition;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  __n128 v26;

  if (*(_QWORD *)(a2 + 16) <= *(_QWORD *)a1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8 * *(_QWORD *)a1);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10 == -1 || v9[5] <= v10)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v9[7] + 8 * v10);
  v12 = *(_QWORD *)(a1 + 24);
  if (v12 == -1 || v9[5] <= v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v9[7] + 8 * v12);
  v14 = v9[8];
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
  {
    switch(*(_BYTE *)(v15 + 76))
    {
      case 1:
        if (!v14)
        {
          canTransition = 0;
          goto LABEL_38;
        }
        canTransition = re::StateMachineState::canTransition(v14, a3, v15);
        if (!canTransition)
          goto LABEL_38;
        goto LABEL_42;
      case 2:
        if (v14)
          goto LABEL_30;
        canTransition = 0;
        goto LABEL_31;
      case 3:
        if (v14)
        {
          canTransition = re::StateMachineState::canTransition(v14, a3, v15);
          if (canTransition)
            goto LABEL_31;
        }
        else
        {
          canTransition = 0;
        }
        if (v13)
        {
          v15 = *(_QWORD *)(a1 + 32);
          v14 = v13;
LABEL_30:
          canTransition = re::StateMachineState::canTransition(v14, a3, v15);
        }
LABEL_31:
        if (canTransition || !v11)
          goto LABEL_42;
        v19 = *(_QWORD *)(a1 + 32);
        v17 = v11;
        goto LABEL_40;
      case 4:
        if (v14)
        {
          canTransition = re::StateMachineState::canTransition(v14, a3, v15);
          if (canTransition)
            goto LABEL_37;
        }
        else
        {
          canTransition = 0;
        }
        if (v11)
          canTransition = re::StateMachineState::canTransition(v11, a3, *(_QWORD *)(a1 + 32));
LABEL_37:
        if (canTransition)
          goto LABEL_42;
LABEL_38:
        if (!v13)
          goto LABEL_42;
        v19 = *(_QWORD *)(a1 + 32);
        v17 = v13;
LABEL_40:
        v18 = a3;
        break;
      default:
        return result;
    }
  }
  else
  {
    if (v14)
    {
      canTransition = re::StateMachineState::canTransition(v14, a3, 0);
      if (canTransition)
      {
LABEL_43:
        v20 = *(_QWORD *)(canTransition + 56);
        if (v20 < *(_QWORD *)(a2 + 16))
        {
          v21 = *(_QWORD *)(canTransition + 64);
          if (v21 != -1)
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v20);
            if (*(_QWORD *)(v22 + 40) > v21)
            {
              v23 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v21);
              if (v23)
              {
                v24 = *(float *)(canTransition + 72);
                if (v24 <= 0.0)
                  v25 = 0;
                else
                  v25 = canTransition;
                *(_QWORD *)(a1 + 32) = v25;
                *(float *)(a1 + 40) = fmaxf(v24, 0.0);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, a1, a2, a3);
                v26.n128_u32[0] = *(_DWORD *)(a1 + 40);
                if (v26.n128_f32[0] == 0.0)
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, a1, a2, a3);
                  v26.n128_u32[0] = *(_DWORD *)(a1 + 40);
                }
                *(_OWORD *)(a1 + 16) = *(_OWORD *)a1;
                *(_OWORD *)a1 = *(_OWORD *)(canTransition + 56);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v23 + 16))(v23, a1, a2, a3, v26);
                return re::StateMachineState::internalEnterState(v23, a1, a2, a3, a4);
              }
            }
          }
        }
        return result;
      }
    }
    v17 = v11;
    v18 = a3;
    v19 = 0;
  }
  canTransition = re::StateMachineState::canTransition(v17, v18, v19);
LABEL_42:
  if (canTransition)
    goto LABEL_43;
  return result;
}

uint64_t re::StateMachine::processStateUpdates(uint64_t result, uint64_t a2, float a3)
{
  _QWORD *v5;
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 32);
  v7 = 0.0;
  if (v6)
  {
    v8 = *(float *)(v6 + 72);
    if (v8 > 0.0)
      v7 = *(float *)(result + 40) / v8;
  }
  if (*(_QWORD *)result < *(_QWORD *)(a2 + 16))
  {
    v9 = *(_QWORD *)(result + 8);
    if (v9 != -1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * *(_QWORD *)result);
      if (*(_QWORD *)(v10 + 40) > v9)
      {
        v11 = *(float **)(*(_QWORD *)(v10 + 56) + 8 * v9);
        if (v11)
        {
          result = (*(uint64_t (**)(float *, float, float))(*(_QWORD *)v11 + 48))(v11, a3, 1.0 - v7);
          v12 = v11[27];
          if (v12 > 0.0)
            v11[27] = fmaxf(v12 - a3, 0.0);
        }
      }
    }
  }
  v13 = v5[2];
  if (v13 < *(_QWORD *)(a2 + 16))
  {
    v14 = v5[3];
    if (v14 != -1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v13);
      if (*(_QWORD *)(v15 + 40) > v14)
      {
        v16 = *(float **)(*(_QWORD *)(v15 + 56) + 8 * v14);
        if (v16)
        {
          if (v5[4])
          {
            result = (*(uint64_t (**)(float *, float, float))(*(_QWORD *)v16 + 48))(v16, a3, v7);
            v17 = v16[27];
            if (v17 > 0.0)
              v16[27] = fmaxf(v17 - a3, 0.0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::StateMachine::processTimedStateTransition(uint64_t result, uint64_t a2, float a3)
{
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(float *)(result + 40);
  if (v3 > 0.0)
  {
    v4 = v3 - a3;
    *(float *)(result + 40) = v4;
    if (v4 < 0.0)
    {
      *(_DWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 32) = 0;
      v5 = *(_QWORD *)(result + 16);
      if (v5 < *(_QWORD *)(a2 + 16))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5) + 56) + 8 * *(_QWORD *)(result + 24));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      }
    }
  }
  return result;
}

unint64_t *re::StateMachine::update(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v5;
  uint64_t v9;

  v5 = *result;
  if (*result != -1 && v5 < *(_QWORD *)(a2 + 16))
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5))
    {
      v9 = (uint64_t)result;
      re::StateMachine::tryDoStateTransition((uint64_t)result, a2, a3, a4, a5);
      re::StateMachine::processStateUpdates(v9, a2, a5);
      return (unint64_t *)re::StateMachine::processTimedStateTransition(v9, a2, a5);
    }
  }
  return result;
}

void re::IntrospectionBase::~IntrospectionBase(re::IntrospectionBase *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::IntrospectionBase::allocator(re::IntrospectionBase *this)
{
  return re::globalAllocators(this)[2];
}

void re::IntrospectionBase::childInfoCount(re::IntrospectionBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Needs to be implemented in derived type.", "!\"Unreachable code\"", "childInfoCount", 378);
  _os_crash();
  __break(1u);
}

void re::IntrospectionBase::childInfo(re::IntrospectionBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Needs to be implemented in derived type.", "!\"Unreachable code\"", "childInfo", 386);
  _os_crash();
  __break(1u);
}

void re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(re::internal::AnimationCompositionChainBase *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = off_24ED1EFB0;
  v3 = (_QWORD *)((char *)this + 56);
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 11) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 20);
  }
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
}

void re::internal::AnimationCompositionChain<float>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1EBB0;
  re::internal::AnimationCompositionChain<float>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1EBB0;
  re::internal::AnimationCompositionChain<float>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<float>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<float>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 108))
      *(_BYTE *)(a1 + 108) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

int *re::internal::AnimationCompositionChain<float>::update(int *result)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  int *v9;
  int v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  float v22;
  float v23;
  uint64_t *v24;
  float v25;
  uint64_t *v26;
  int v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  _DWORD *v36;
  float *v37;
  re::BindPoint *v38;
  int v39;
  char v40;
  float *v41;
  uint64_t v42;
  int *v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  _BYTE *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v42 = *((_QWORD *)result + 9);
  if (!v42)
    return result;
  v5 = result;
  v6 = (unint64_t)(result + 2);
  result = (int *)re::BindPoint::isAlive((re::BindPoint *)(result + 2));
  if (!(_DWORD)result)
    return result;
  v47 = 0;
  v48 = 0;
  v39 = re::BindPoint::supportsOverrideValue((re::BindPoint *)v6);
  if (v39)
  {
    result = (int *)re::BindPoint::baseValueUntyped((re::BindPoint *)v6);
  }
  else
  {
    v48 = 1;
    result = &v47;
  }
  v8 = &v58;
  if (*((_BYTE *)v5 + 108))
    v9 = v5 + 28;
  else
    v9 = result;
  v5[29] = *v9;
  v46 = 0;
  v41 = (float *)(v5 + 29);
  if (!*((_QWORD *)v5 + 9))
    goto LABEL_92;
  v37 = (float *)result;
  v38 = (re::BindPoint *)v6;
  v3 = 0;
  v6 = 0;
  v10 = *(_DWORD *)(*((_QWORD *)v5 + 11) + 16);
  v43 = result;
  v44 = 0;
  v45 = 0;
  v11 = 0.0;
  v12 = 24;
  v40 = v39;
  while (1)
  {
    v1 = *((_QWORD *)v5 + 9);
    if (v1 <= v3)
    {
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 789;
      v54 = 2048;
      v55 = v3;
      v56 = 2048;
      v57 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_86:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 476;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_88:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 476;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 476;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = (_BYTE *)v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_90;
    }
    v13 = *((_QWORD *)v5 + 11);
    v14 = (int *)(v13 + 24 * v3);
    v15 = v14[4];
    if (v10 != v15 && (_DWORD)v6)
    {
      v6 = 0;
      *v41 = v11 + *v41;
    }
    v10 = v15;
    v16 = *(_QWORD **)v14;
    v4 = v14[2];
    v1 = *(_QWORD *)(*(_QWORD *)v14 + 56);
    v17 = v4 + 1;
    if (v1 <= v4 + 1)
      v18 = v4 + 1;
    else
      v18 = *(_QWORD *)(*(_QWORD *)v14 + 56);
    do
    {
      if (v18 == v17)
        goto LABEL_22;
      v2 = (_BYTE *)v16[1];
      if ((unint64_t)v2 <= v17)
      {
        v49 = 0;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v5 = (int *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v50 = 136315906;
        v51 = "operator[]";
        v52 = 1024;
        v53 = 476;
        v54 = 2048;
        v55 = v17;
        v56 = 2048;
        v57 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_80;
      }
      v19 = *(_DWORD *)(v16[2] + 4 * v17++);
    }
    while (v19 >= (int)v4);
    LODWORD(v18) = v17 - 1;
LABEL_22:
    if (v1 <= v4)
      goto LABEL_86;
    v20 = v18 - v4;
    if (!v20)
      goto LABEL_87;
    v1 = v16[16];
    if (v1 <= v4)
      goto LABEL_88;
    v1 = v16[8];
    v21 = (_BYTE *)(v1 + 72 * (int)v4);
    v2 = *(_BYTE **)(v16[17] + 8 * v4);
    if (!v21[16])
      goto LABEL_51;
    v12 = v16[13];
    if (v12 <= v4)
      goto LABEL_89;
    v22 = *(float *)(v16[14] + 4 * v4);
    v23 = fabsf(v22);
    v12 = 24;
    if (v23 < 0.00001)
      goto LABEL_52;
    if (v22 != 1.0 && fabsf(v22 + -1.0) >= (float)((float)((float)(v23 + 1.0) + 1.0) * 0.00001))
    {
      if (!BYTE4(v46))
        BYTE4(v46) = 1;
      v26 = (uint64_t *)(v5 + 29);
      if ((_DWORD)v6)
      {
        *(float *)&v46 = v11 + *v41;
        v26 = &v46;
      }
      v27 = v44;
      result = (int *)(*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD, uint64_t *, int **, uint64_t *))(*(_QWORD *)v2 + 96))(v2, v21, v20, v26, &v43, &v46);
      if (v44 != v27)
        return (int *)(*(uint64_t (**)(int *))(*(_QWORD *)v5 + 32))(v5);
      if (v2[72])
      {
        v1 = *((_QWORD *)v5 + 9);
        if (v1 <= v3)
          goto LABEL_94;
        if ((*(_BYTE *)(*((_QWORD *)v5 + 11) + 24 * v3 + 20) & 4) != 0)
        {
          v28 = (float *)(v5 + 29);
          v33 = *v41;
          v31 = *(float *)&v46 + *v41;
          *(float *)&v46 = v31;
          if ((_DWORD)v6)
            v34 = v11;
          else
            v34 = -0.0;
          v30 = v34 + v33;
        }
        else
        {
          v28 = (float *)(v5 + 29);
          if ((_DWORD)v6)
            v29 = v11;
          else
            v29 = -0.0;
          v30 = v29 + *v41;
          v31 = *(float *)&v46 + v30;
          *(float *)&v46 = *(float *)&v46 + v30;
        }
      }
      else
      {
        v28 = (float *)(v5 + 29);
        if ((_DWORD)v6)
          v32 = v11;
        else
          v32 = -0.0;
        v30 = v32 + *v41;
        v31 = *(float *)&v46;
      }
      v6 = 0;
      *v28 = (float)(v22 * v31) + (float)(v30 * (float)(1.0 - v22));
      goto LABEL_52;
    }
    *(_BYTE *)(v13 + 24 * v3 + 20) &= ~4u;
    if (v2[72])
      break;
    v45 = 1;
LABEL_51:
    result = (int *)(*(uint64_t (**)(_BYTE *, unint64_t, _QWORD, float *, int **, float *))(*(_QWORD *)v2 + 96))(v2, v1 + 72 * (int)v4, v20, v41, &v43, v41);
LABEL_52:
    if (++v3 == v42)
    {
      if ((_DWORD)v6)
        *v41 = v11 + *v41;
      return result;
    }
  }
  if (!BYTE4(v46))
    BYTE4(v46) = 1;
  v24 = (uint64_t *)(v5 + 29);
  if ((_DWORD)v6)
  {
    *(float *)&v46 = v11 + *v41;
    v24 = &v46;
  }
  result = (int *)(*(uint64_t (**)(_BYTE *, unint64_t, _QWORD, uint64_t *, int **, uint64_t *))(*(_QWORD *)v2 + 96))(v2, v1 + 72 * (int)v4, v20, v24, &v43, &v46);
  if (!v39)
  {
LABEL_39:
    if ((_DWORD)v6)
      v25 = v11;
    else
      v25 = -0.0;
    v11 = v25 + *(float *)&v46;
    if ((v40 & 1) != 0)
    {
      v6 = *((_QWORD *)v5 + 9);
      if (v6 <= v3)
        goto LABEL_91;
      v40 = 0;
      v6 = 1;
      if ((*(_BYTE *)(*((_QWORD *)v5 + 11) + 24 * v3 + 20) & 2) != 0 && *v21 == 5)
      {
        *v41 = v11 + *v41;
        result = (int *)re::BindPoint::baseValueUntyped(v38);
        if (result)
        {
          *result = *(_DWORD *)v41;
          result = (int *)re::BindPoint::markAsWritten((uint64_t)v38);
        }
        v6 = *((_QWORD *)v5 + 9);
        if (v6 <= v3)
          goto LABEL_93;
        v6 = 0;
        *(_BYTE *)(*((_QWORD *)v5 + 11) + 24 * v3 + 20) &= ~2u;
        v40 = 1;
        *v21 = 1;
      }
    }
    else
    {
      v40 = 0;
      v6 = 1;
    }
    goto LABEL_52;
  }
  v2 = (_BYTE *)*((_QWORD *)v5 + 9);
  if ((unint64_t)v2 <= v3)
  {
LABEL_90:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v3;
    v56 = 2048;
    v57 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v3;
    v56 = 2048;
    v57 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_92:
    v43 = 0;
    v8[3] = 0u;
    v8[4] = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = 0;
    v56 = 2048;
    v57 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_93:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v3;
    v56 = 2048;
    v57 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v3;
    v56 = 2048;
    v57 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v3;
    v56 = 2048;
    v57 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(*((_QWORD *)v5 + 11) + 24 * v3 + 20) & 1) == 0 || !*(_BYTE *)(v1 + 72 * (int)v4 + 32))
    goto LABEL_39;
LABEL_80:
  v35 = *(float *)&v46;
  *v41 = -*(float *)&v46;
  *v41 = *v37 - v35;
  v36 = (_DWORD *)re::BindPoint::baseValueUntyped(v38);
  if (v36)
  {
    *v36 = *(_DWORD *)v41;
    re::BindPoint::markAsWritten((uint64_t)v38);
  }
  v6 = *((_QWORD *)v5 + 9);
  if (v6 <= v3)
    goto LABEL_95;
  *(_BYTE *)(*((_QWORD *)v5 + 11) + 24 * v3 + 20) &= ~1u;
  return (int *)(*(uint64_t (**)(int *))(*(_QWORD *)v5 + 32))(v5);
}

uint64_t re::internal::AnimationCompositionChain<float>::apply(uint64_t a1)
{
  re::BindPoint *v2;
  uint64_t result;
  _DWORD *v4;
  _DWORD *v5;

  v2 = (re::BindPoint *)(a1 + 8);
  result = re::BindPoint::isAlive((re::BindPoint *)(a1 + 8));
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      return re::BindPoint::setValue<float>((uint64_t)v2, (float *)(a1 + 116));
    }
    else
    {
      if (*(_BYTE *)(a1 + 104) && re::BindPoint::isOverridden(v2))
      {
        v4 = (_DWORD *)re::BindPoint::overrideValueUntyped(v2);
        v5 = (_DWORD *)re::BindPoint::baseValueUntyped(v2);
        if (v5)
        {
          *v5 = *v4;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      return re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
  return result;
}

uint64_t re::BindPoint::setValue<float>(uint64_t result, float *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  _QWORD v16[2];
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 797;
        v21 = 2048;
        v22 = v10;
        v23 = 2048;
        v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float *)v13;
      result = re::BindPoint::isOverridden(v4);
      v15 = *a2;
      if (!(_DWORD)result || *v14 != v15)
      {
        *v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result && *(float *)result != *a2)
      {
        *(float *)result = *a2;
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<float>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 108))
      *(_BYTE *)(result + 108) = 1;
    v2 = *(_DWORD *)(result + 116);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 108))
    {
      *(_BYTE *)(v1 + 108) = 1;
      *(_DWORD *)(v1 + 112) = 0;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v2 = *(_DWORD *)result;
LABEL_14:
    *(_DWORD *)(v1 + 112) = v2;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 108))
    {
      *(_BYTE *)(v1 + 108) = 1;
      *(_DWORD *)(v1 + 112) = 0;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 108))
    *(_BYTE *)(v1 + 108) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<double>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1EC08;
  re::internal::AnimationCompositionChain<double>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1EC08;
  re::internal::AnimationCompositionChain<double>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<double>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<double>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

uint64_t *re::internal::AnimationCompositionChain<double>::update(uint64_t *result)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t *v9;
  int v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  float v22;
  float v23;
  double *v24;
  double v25;
  double *v26;
  int v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _QWORD *v36;
  double *v37;
  re::BindPoint *v38;
  int v39;
  char v40;
  double *v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  char v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  unint64_t v56;
  __int16 v57;
  _BYTE *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v42 = result[9];
  if (!v42)
    return result;
  v5 = result;
  v6 = (unint64_t)(result + 1);
  result = (uint64_t *)re::BindPoint::isAlive((re::BindPoint *)(result + 1));
  if (!(_DWORD)result)
    return result;
  v48 = 0;
  v49 = 0;
  v39 = re::BindPoint::supportsOverrideValue((re::BindPoint *)v6);
  if (v39)
  {
    result = (uint64_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)v6);
  }
  else
  {
    v49 = 1;
    result = &v48;
  }
  v8 = &v59;
  if (*((_BYTE *)v5 + 112))
    v9 = v5 + 15;
  else
    v9 = result;
  v5[16] = *v9;
  v46 = 0.0;
  v47 = 0;
  v41 = (double *)(v5 + 16);
  if (!v5[9])
    goto LABEL_88;
  v37 = (double *)result;
  v38 = (re::BindPoint *)v6;
  v3 = 0;
  v6 = 0;
  v10 = *(_DWORD *)(v5[11] + 16);
  v43 = result;
  v44 = 0;
  v45 = 0;
  v11 = 0.0;
  v12 = 24;
  v40 = v39;
  while (1)
  {
    v1 = v5[9];
    if (v1 <= v3)
    {
      v50 = 0;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      v59 = 0u;
      v60 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v51 = 136315906;
      v52 = "operator[]";
      v53 = 1024;
      v54 = 789;
      v55 = 2048;
      v56 = v3;
      v57 = 2048;
      v58 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      v50 = 0;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      v59 = 0u;
      v60 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v51 = 136315906;
      v52 = "operator[]";
      v53 = 1024;
      v54 = 476;
      v55 = 2048;
      v56 = v4;
      v57 = 2048;
      v58 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_84:
      v50 = 0;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      v59 = 0u;
      v60 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v51 = 136315906;
      v52 = "operator[]";
      v53 = 1024;
      v54 = 476;
      v55 = 2048;
      v56 = v4;
      v57 = 2048;
      v58 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      v50 = 0;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      v59 = 0u;
      v60 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v51 = 136315906;
      v52 = "operator[]";
      v53 = 1024;
      v54 = 476;
      v55 = 2048;
      v56 = v4;
      v57 = 2048;
      v58 = (_BYTE *)v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_86;
    }
    v13 = v5[11];
    v14 = (int *)(v13 + 24 * v3);
    v15 = v14[4];
    if (v10 != v15 && (_DWORD)v6)
    {
      v6 = 0;
      *v41 = v11 + *v41;
    }
    v10 = v15;
    v16 = *(_QWORD **)v14;
    v4 = v14[2];
    v1 = *(_QWORD *)(*(_QWORD *)v14 + 56);
    v17 = v4 + 1;
    if (v1 <= v4 + 1)
      v18 = v4 + 1;
    else
      v18 = *(_QWORD *)(*(_QWORD *)v14 + 56);
    do
    {
      if (v18 == v17)
        goto LABEL_22;
      v2 = (_BYTE *)v16[1];
      if ((unint64_t)v2 <= v17)
      {
        v50 = 0;
        v62 = 0u;
        v63 = 0u;
        v61 = 0u;
        v59 = 0u;
        v60 = 0u;
        v5 = (uint64_t *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v51 = 136315906;
        v52 = "operator[]";
        v53 = 1024;
        v54 = 476;
        v55 = 2048;
        v56 = v17;
        v57 = 2048;
        v58 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_76;
      }
      v19 = *(_DWORD *)(v16[2] + 4 * v17++);
    }
    while (v19 >= (int)v4);
    LODWORD(v18) = v17 - 1;
LABEL_22:
    if (v1 <= v4)
      goto LABEL_82;
    v20 = v18 - v4;
    if (!v20)
      goto LABEL_83;
    v1 = v16[16];
    if (v1 <= v4)
      goto LABEL_84;
    v1 = v16[8];
    v21 = (_BYTE *)(v1 + 72 * (int)v4);
    v2 = *(_BYTE **)(v16[17] + 8 * v4);
    if (!v21[16])
      goto LABEL_50;
    v12 = v16[13];
    if (v12 <= v4)
      goto LABEL_85;
    v22 = *(float *)(v16[14] + 4 * v4);
    v23 = fabsf(v22);
    v12 = 24;
    if (v23 < 0.00001)
      goto LABEL_51;
    if (v22 != 1.0 && fabsf(v22 + -1.0) >= (float)((float)((float)(v23 + 1.0) + 1.0) * 0.00001))
    {
      if (!(_BYTE)v47)
        LOBYTE(v47) = 1;
      v26 = (double *)(v5 + 16);
      if ((_DWORD)v6)
      {
        v46 = v11 + *v41;
        v26 = &v46;
      }
      v27 = v44;
      result = (uint64_t *)(*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD, double *, uint64_t **, double *))(*(_QWORD *)v2 + 96))(v2, v21, v20, v26, &v43, &v46);
      if (v44 != v27)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v5 + 32))(v5);
      if (v2[72])
      {
        v1 = v5[9];
        if (v1 <= v3)
          goto LABEL_90;
        if ((*(_BYTE *)(v5[11] + 24 * v3 + 20) & 4) != 0)
        {
          v28 = (double *)(v5 + 16);
          v33 = *v41;
          v31 = v46 + *v41;
          v46 = v31;
          v34 = -0.0;
          if ((_DWORD)v6)
            v34 = v11;
          v30 = v34 + v33;
        }
        else
        {
          v28 = (double *)(v5 + 16);
          v29 = -0.0;
          if ((_DWORD)v6)
            v29 = v11;
          v30 = v29 + *v41;
          v31 = v46 + v30;
          v46 = v46 + v30;
        }
      }
      else
      {
        v28 = (double *)(v5 + 16);
        v32 = -0.0;
        if ((_DWORD)v6)
          v32 = v11;
        v30 = v32 + *v41;
        v31 = v46;
      }
      v6 = 0;
      *v28 = v31 * v22 + v30 * (float)(1.0 - v22);
      goto LABEL_51;
    }
    *(_BYTE *)(v13 + 24 * v3 + 20) &= ~4u;
    if (v2[72])
      break;
    v45 = 1;
LABEL_50:
    result = (uint64_t *)(*(uint64_t (**)(_BYTE *, unint64_t, _QWORD, double *, uint64_t **, double *))(*(_QWORD *)v2 + 96))(v2, v1 + 72 * (int)v4, v20, v41, &v43, v41);
LABEL_51:
    if (++v3 == v42)
    {
      if ((_DWORD)v6)
        *v41 = v11 + *v41;
      return result;
    }
  }
  if (!(_BYTE)v47)
    LOBYTE(v47) = 1;
  v24 = (double *)(v5 + 16);
  if ((_DWORD)v6)
  {
    v46 = v11 + *v41;
    v24 = &v46;
  }
  result = (uint64_t *)(*(uint64_t (**)(_BYTE *, unint64_t, _QWORD, double *, uint64_t **, double *))(*(_QWORD *)v2 + 96))(v2, v1 + 72 * (int)v4, v20, v24, &v43, &v46);
  if (!v39)
  {
LABEL_39:
    v25 = -0.0;
    if ((_DWORD)v6)
      v25 = v11;
    v11 = v25 + v46;
    if ((v40 & 1) != 0)
    {
      v6 = v5[9];
      if (v6 <= v3)
        goto LABEL_87;
      v40 = 0;
      v6 = 1;
      if ((*(_BYTE *)(v5[11] + 24 * v3 + 20) & 2) != 0 && *v21 == 5)
      {
        *v41 = v11 + *v41;
        result = (uint64_t *)re::BindPoint::baseValueUntyped(v38);
        if (result)
        {
          *result = *(_QWORD *)v41;
          result = (uint64_t *)re::BindPoint::markAsWritten((uint64_t)v38);
        }
        v6 = v5[9];
        if (v6 <= v3)
          goto LABEL_89;
        v6 = 0;
        *(_BYTE *)(v5[11] + 24 * v3 + 20) &= ~2u;
        v40 = 1;
        *v21 = 1;
      }
    }
    else
    {
      v40 = 0;
      v6 = 1;
    }
    goto LABEL_51;
  }
  v2 = (_BYTE *)v5[9];
  if ((unint64_t)v2 <= v3)
  {
LABEL_86:
    v50 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51 = 136315906;
    v52 = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v3;
    v57 = 2048;
    v58 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    v50 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51 = 136315906;
    v52 = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v3;
    v57 = 2048;
    v58 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    v43 = 0;
    v8[3] = 0u;
    v8[4] = 0u;
    v8[2] = 0u;
    v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51 = 136315906;
    v52 = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = 0;
    v57 = 2048;
    v58 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    v50 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51 = 136315906;
    v52 = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v3;
    v57 = 2048;
    v58 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_90:
    v50 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51 = 136315906;
    v52 = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v3;
    v57 = 2048;
    v58 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    v50 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51 = 136315906;
    v52 = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v3;
    v57 = 2048;
    v58 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(v5[11] + 24 * v3 + 20) & 1) == 0 || !*(_BYTE *)(v1 + 72 * (int)v4 + 32))
    goto LABEL_39;
LABEL_76:
  v35 = v46;
  *v41 = -v46;
  *v41 = *v37 - v35;
  v36 = (_QWORD *)re::BindPoint::baseValueUntyped(v38);
  if (v36)
  {
    *v36 = *(_QWORD *)v41;
    re::BindPoint::markAsWritten((uint64_t)v38);
  }
  v6 = v5[9];
  if (v6 <= v3)
    goto LABEL_91;
  *(_BYTE *)(v5[11] + 24 * v3 + 20) &= ~1u;
  return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v5 + 32))(v5);
}

re::BindPoint *re::internal::AnimationCompositionChain<double>::apply(uint64_t a1)
{
  re::BindPoint *v2;
  re::BindPoint *result;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (re::BindPoint *)(a1 + 8);
  result = (re::BindPoint *)re::BindPoint::isAlive((re::BindPoint *)(a1 + 8));
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      return re::BindPoint::setValue<double>(v2, (double *)(a1 + 128));
    }
    else
    {
      if (*(_BYTE *)(a1 + 104) && re::BindPoint::isOverridden(v2))
      {
        v4 = (_QWORD *)re::BindPoint::overrideValueUntyped(v2);
        v5 = (_QWORD *)re::BindPoint::baseValueUntyped(v2);
        if (v5)
        {
          *v5 = *v4;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      return (re::BindPoint *)re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
  return result;
}

re::BindPoint *re::BindPoint::setValue<double>(re::BindPoint *result, double *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  _QWORD v16[2];
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v4 = result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 797;
        v21 = 2048;
        v22 = v10;
        v23 = 2048;
        v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (double *)v13;
      result = (re::BindPoint *)re::BindPoint::isOverridden(v4);
      v15 = *a2;
      if (!(_DWORD)result || *v14 != v15)
      {
        *v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (re::BindPoint *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (re::BindPoint *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result && *(double *)result != *a2)
      {
        *(double *)result = *a2;
        return (re::BindPoint *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<double>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 112))
      *(_BYTE *)(result + 112) = 1;
    v2 = *(_QWORD *)(result + 128);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 120) = 0;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v2 = *(_QWORD *)result;
LABEL_14:
    *(_QWORD *)(v1 + 120) = v2;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 120) = 0;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<re::Vector2<float>>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1EC60;
  re::internal::AnimationCompositionChain<re::Vector2<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1EC60;
  re::internal::AnimationCompositionChain<re::Vector2<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector2<float>>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector2<float>>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

float32x2_t *re::internal::AnimationCompositionChain<re::Vector2<float>>::update(float32x2_t *result)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  unint64_t v4;
  float32x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float32x2_t v11;
  unint64_t v12;
  float32x2_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  _QWORD *v19;
  _BYTE *v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  float v25;
  float v26;
  float32x2_t *v27;
  int32x2_t v28;
  int32x2_t v29;
  float32x2_t *v30;
  int v31;
  int32x2_t v32;
  int32x2_t v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t *v40;
  float32x2_t *v41;
  re::BindPoint *v42;
  float v43;
  int v44;
  char v45;
  float32x2_t v46;
  int v47;
  float32x2_t *v48;
  int v49;
  char v50;
  float32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  _BYTE *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v46 = result[9];
  if (!*(_QWORD *)&v46)
    return result;
  v5 = result;
  v6 = (unint64_t)&result[1];
  result = (float32x2_t *)re::BindPoint::isAlive((re::BindPoint *)&result[1]);
  if (!(_DWORD)result)
    return result;
  v53 = 0;
  v54 = 0;
  v44 = re::BindPoint::supportsOverrideValue((re::BindPoint *)v6);
  if (v44)
  {
    result = (float32x2_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)v6);
  }
  else
  {
    v54 = 1;
    v53 = 0;
    result = (float32x2_t *)&v53;
  }
  v8 = &v64;
  if (v5[14].i8[0])
    v9 = v5 + 15;
  else
    v9 = result;
  v5[16] = *v9;
  v10 = v5 + 16;
  v51 = 0;
  v52 = 0;
  if (!*(_QWORD *)&v5[9])
    goto LABEL_81;
  v41 = result;
  v42 = (re::BindPoint *)v6;
  v4 = 0;
  v6 = 0;
  v47 = *(_DWORD *)(*(_QWORD *)&v5[11] + 16);
  v48 = result;
  v49 = 0;
  v50 = 0;
  v11 = 0;
  v12 = 24;
  v45 = v44;
  while (1)
  {
    v1 = (unint64_t)v5[9];
    if (v1 <= v4)
    {
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      v64 = 0u;
      v65 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 789;
      v60 = 2048;
      v61 = v4;
      v62 = 2048;
      v63 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_75:
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      v64 = 0u;
      v65 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 476;
      v60 = 2048;
      v61 = v1;
      v62 = 2048;
      v63 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_76:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_77:
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      v64 = 0u;
      v65 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 476;
      v60 = 2048;
      v61 = v1;
      v62 = 2048;
      v63 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_78:
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      v64 = 0u;
      v65 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 476;
      v60 = 2048;
      v61 = v1;
      v62 = 2048;
      v63 = (_BYTE *)v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_79;
    }
    v13 = v5[11];
    v14 = *(_QWORD *)&v13 + 24 * v4;
    v17 = *(_DWORD *)(v14 + 16);
    v15 = (int *)(v14 + 16);
    v16 = v17;
    if (v47 != v17)
    {
      if ((_DWORD)v6)
      {
        v6 = 0;
        *v10 = vadd_f32(v11, *v10);
        v47 = *v15;
      }
      else
      {
        v47 = v16;
      }
    }
    v18 = (int *)(*(_QWORD *)&v13 + 24 * v4);
    v19 = *(_QWORD **)v18;
    v1 = v18[2];
    v2 = *(_BYTE **)(*(_QWORD *)v18 + 56);
    v3 = v1 + 1;
    if ((unint64_t)v2 <= v1 + 1)
      v20 = (_BYTE *)(v1 + 1);
    else
      v20 = *(_BYTE **)(*(_QWORD *)v18 + 56);
    do
    {
      if (v20 == (_BYTE *)v3)
        goto LABEL_23;
      v21 = v19[1];
      if (v21 <= v3)
      {
        v55 = 0;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        v64 = 0u;
        v65 = 0u;
        v5 = (float32x2_t *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v56 = 136315906;
        v57 = "operator[]";
        v58 = 1024;
        v59 = 476;
        v60 = 2048;
        v61 = v3;
        v62 = 2048;
        v63 = (_BYTE *)v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_69;
      }
      v22 = *(_DWORD *)(v19[2] + 4 * v3++);
    }
    while (v22 >= (int)v1);
    LODWORD(v20) = v3 - 1;
LABEL_23:
    if ((unint64_t)v2 <= v1)
      goto LABEL_75;
    v23 = (_DWORD)v20 - v1;
    if (!v23)
      goto LABEL_76;
    v2 = (_BYTE *)v19[16];
    if ((unint64_t)v2 <= v1)
      goto LABEL_77;
    v24 = v19[8];
    v2 = (_BYTE *)(v24 + 72 * (int)v1);
    v3 = *(_QWORD *)(v19[17] + 8 * v1);
    if (!v2[16])
      goto LABEL_49;
    v12 = v19[13];
    if (v12 <= v1)
      goto LABEL_78;
    v25 = *(float *)(v19[14] + 4 * v1);
    v26 = fabsf(v25);
    v12 = 24;
    if (v26 < 0.00001)
      goto LABEL_50;
    if (v25 != 1.0 && fabsf(v25 + -1.0) >= (float)((float)((float)(v26 + 1.0) + 1.0) * 0.00001))
    {
      if (!(_BYTE)v52)
        LOBYTE(v52) = 1;
      v43 = v25;
      v30 = v5 + 16;
      if ((_DWORD)v6)
      {
        v51 = vadd_f32(v11, *v10);
        v30 = &v51;
      }
      v31 = v49;
      result = (float32x2_t *)(*(uint64_t (**)(unint64_t, _BYTE *, _QWORD, float32x2_t *, float32x2_t **, float32x2_t *))(*(_QWORD *)v3 + 96))(v3, v2, v23, v30, &v48, &v51);
      if (v49 != v31)
        return (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v5 + 32))(v5);
      if (*(_BYTE *)(v3 + 72))
      {
        v1 = (unint64_t)v5[9];
        v34 = v43;
        if (v1 <= v4)
          goto LABEL_83;
        v32.i32[0] = 0;
        v33.i32[0] = v6;
        if ((*(_BYTE *)(*(_QWORD *)&v5[11] + 24 * v4 + 20) & 4) != 0)
        {
          v37 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v33, v32), 0), (int8x8_t)0x8000000080000000, (int8x8_t)v11);
          v38 = *v10;
          v36 = vadd_f32(v51, *v10);
          v51 = v36;
          v35 = vadd_f32(v37, v38);
        }
        else
        {
          v35 = vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v33, v32), 0), (int8x8_t)0x8000000080000000, (int8x8_t)v11), *v10);
          v36 = vadd_f32(v51, v35);
          v51 = v36;
        }
      }
      else
      {
        v32.i32[0] = 0;
        v33.i32[0] = v6;
        v35 = vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v33, v32), 0), (int8x8_t)0x8000000080000000, (int8x8_t)v11), *v10);
        v36 = v51;
        v34 = v43;
      }
      v6 = 0;
      *v10 = vadd_f32(vmul_n_f32(v35, 1.0 - v34), vmul_n_f32(v36, v34));
      goto LABEL_50;
    }
    *(_BYTE *)(*(_QWORD *)&v13 + 24 * v4 + 20) &= ~4u;
    if (*(_BYTE *)(v3 + 72))
      break;
    v50 = 1;
LABEL_49:
    result = (float32x2_t *)(*(uint64_t (**)(unint64_t, uint64_t, _QWORD, float32x2_t *, float32x2_t **, float32x2_t *))(*(_QWORD *)v3 + 96))(v3, v24 + 72 * (int)v1, v23, v5 + 16, &v48, v5 + 16);
LABEL_50:
    if (++v4 == *(_QWORD *)&v46)
    {
      if ((_DWORD)v6)
        *v10 = vadd_f32(v11, *v10);
      return result;
    }
  }
  if (!(_BYTE)v52)
    LOBYTE(v52) = 1;
  v27 = v5 + 16;
  if ((_DWORD)v6)
  {
    v51 = vadd_f32(v11, *v10);
    v27 = &v51;
  }
  result = (float32x2_t *)(*(uint64_t (**)(unint64_t, uint64_t, _QWORD, float32x2_t *, float32x2_t **, float32x2_t *))(*(_QWORD *)v3 + 96))(v3, v24 + 72 * (int)v1, v23, v27, &v48, &v51);
  if (!v44)
  {
LABEL_40:
    v28.i32[0] = 0;
    v29.i32[0] = v6;
    v11 = vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v29, v28), 0), (int8x8_t)0x8000000080000000, (int8x8_t)v11), v51);
    if ((v45 & 1) != 0)
    {
      v6 = (unint64_t)v5[9];
      if (v6 <= v4)
        goto LABEL_80;
      v45 = 0;
      v6 = 1;
      if ((*(_BYTE *)(*(_QWORD *)&v5[11] + 24 * v4 + 20) & 2) != 0 && *v2 == 5)
      {
        *v10 = vadd_f32(v11, *v10);
        result = (float32x2_t *)re::BindPoint::baseValueUntyped(v42);
        if (result)
        {
          *result = *v10;
          result = (float32x2_t *)re::BindPoint::markAsWritten((uint64_t)v42);
        }
        v6 = (unint64_t)v5[9];
        if (v6 <= v4)
          goto LABEL_82;
        v6 = 0;
        *(_BYTE *)(*(_QWORD *)&v5[11] + 24 * v4 + 20) &= ~2u;
        v45 = 1;
        *v2 = 1;
      }
    }
    else
    {
      v45 = 0;
      v6 = 1;
    }
    goto LABEL_50;
  }
  v3 = (unint64_t)v5[9];
  if (v3 <= v4)
  {
LABEL_79:
    v55 = 0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    v64 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = v4;
    v62 = 2048;
    v63 = (_BYTE *)v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    v55 = 0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    v64 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = v4;
    v62 = 2048;
    v63 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    v48 = 0;
    v8[3] = 0u;
    v8[4] = 0u;
    v8[2] = 0u;
    v64 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = 0;
    v62 = 2048;
    v63 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    v55 = 0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    v64 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = v4;
    v62 = 2048;
    v63 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    v55 = 0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    v64 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = v4;
    v62 = 2048;
    v63 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    v55 = 0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    v64 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = v4;
    v62 = 2048;
    v63 = (_BYTE *)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(*(_QWORD *)&v5[11] + 24 * v4 + 20) & 1) == 0 || !*(_BYTE *)(v24 + 72 * (int)v1 + 32))
    goto LABEL_40;
LABEL_69:
  v39 = v51;
  *v10 = vneg_f32(v51);
  *v10 = vsub_f32(*v41, v39);
  v40 = (float32x2_t *)re::BindPoint::baseValueUntyped(v42);
  if (v40)
  {
    *v40 = *v10;
    re::BindPoint::markAsWritten((uint64_t)v42);
  }
  v6 = (unint64_t)v5[9];
  if (v6 <= v4)
    goto LABEL_84;
  *(_BYTE *)(*(_QWORD *)&v5[11] + 24 * v4 + 20) &= ~1u;
  return (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v5 + 32))(v5);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector2<float>>::apply(float32x2_t *a1)
{
  re::BindPoint *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (re::BindPoint *)&a1[1];
  result = re::BindPoint::isAlive((re::BindPoint *)&a1[1]);
  if ((_DWORD)result)
  {
    if (a1[9])
    {
      return re::BindPoint::setValue<re::Vector2<float>>((uint64_t)v2, a1 + 16);
    }
    else
    {
      if (a1[13].i8[0] && re::BindPoint::isOverridden(v2))
      {
        v4 = (_QWORD *)re::BindPoint::overrideValueUntyped(v2);
        v5 = (_QWORD *)re::BindPoint::baseValueUntyped(v2);
        if (v5)
        {
          *v5 = *v4;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      return re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
  return result;
}

uint64_t re::BindPoint::setValue<re::Vector2<float>>(uint64_t result, float32x2_t *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x2_t *v14;
  uint32x2_t v15;
  float32x2_t v16;
  uint32x2_t v17;
  _QWORD v18[2];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v18[1] = 0;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v19 = 136315906;
        v20 = "operator[]";
        v21 = 1024;
        v22 = 797;
        v23 = 2048;
        v24 = v10;
        v25 = 2048;
        v26 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float32x2_t *)v13;
      result = re::BindPoint::isOverridden(v4);
      if ((result & 1) != 0)
      {
        v15 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*v14, *a2));
        if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
          return result;
        v16 = *a2;
      }
      else
      {
        v16 = *a2;
      }
      *v14 = v16;
      re::BindPoint::setIsOverridden((uint64_t)v4, 1);
      return re::BindPoint::markAsWritten((uint64_t)v4);
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
    if (result)
    {
      v17 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)result, *a2));
      if ((vpmax_u32(v17, v17).u32[0] & 0x80000000) != 0)
      {
        *(float32x2_t *)result = *a2;
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<re::Vector2<float>>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 112))
      *(_BYTE *)(result + 112) = 1;
    v2 = *(_QWORD *)(result + 128);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 120) = 0;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v2 = *(_QWORD *)result;
LABEL_14:
    *(_QWORD *)(v1 + 120) = v2;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 120) = 0;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<re::Vector3<float>>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1ECB8;
  re::internal::AnimationCompositionChain<re::Vector3<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1ECB8;
  re::internal::AnimationCompositionChain<re::Vector3<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector3<float>>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector3<float>>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<re::Vector3<float>>::update(uint64_t result)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  float32x4_t *v4;
  unint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  __int128 *v8;
  __int128 v9;
  float32x4_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  float v26;
  float v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t *v31;
  int v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  re::BindPoint *v38;
  float32x4_t *v39;
  float v40;
  int v41;
  char v42;
  float32x4_t v43;
  uint64_t v44;
  int v45;
  float32x4_t *v46;
  int v47;
  char v48;
  uint64_t v49;
  float32x4_t v50;
  __int128 v51;
  _QWORD v52[2];
  char v53;
  int v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  _BYTE *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v44 = *(_QWORD *)(result + 72);
  if (!v44)
    return result;
  v4 = (float32x4_t *)result;
  v5 = result + 8;
  result = re::BindPoint::isAlive((re::BindPoint *)(result + 8));
  if (!(_DWORD)result)
    return result;
  result = re::BindPoint::supportsOverrideValue((re::BindPoint *)v5);
  v52[0] = 0;
  v52[1] = 0;
  v53 = 0;
  v41 = result;
  if ((_DWORD)result)
  {
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)v5);
    v39 = (float32x4_t *)result;
  }
  else
  {
    v53 = 1;
    v39 = (float32x4_t *)v52;
  }
  if (v4[7].i8[0])
    v7 = v4[8];
  else
    v7 = *v39;
  v4[9] = v7;
  v8 = &v62;
  v50 = 0u;
  v51 = 0u;
  v9 = 0uLL;
  v43 = 0u;
  if (!v4[4].i64[1])
    goto LABEL_83;
  v38 = (re::BindPoint *)v5;
  v3 = 0;
  v5 = 0;
  v45 = *(_DWORD *)(v4[5].i64[1] + 16);
  v10 = v4 + 9;
  v46 = v39;
  v47 = 0;
  v48 = 0;
  v11 = 24;
  v42 = v41;
  while (1)
  {
    v1 = v4[4].u64[1];
    if (v1 <= v3)
    {
      v49 = 0;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v62 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v54 = 136315906;
      v55 = "operator[]";
      v56 = 1024;
      v57 = 789;
      v58 = 2048;
      v59 = v3;
      v60 = 2048;
      v61 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_77:
      v49 = 0;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v62 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v54 = 136315906;
      v55 = "operator[]";
      v56 = 1024;
      v57 = 476;
      v58 = 2048;
      v59 = v1;
      v60 = 2048;
      v61 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_78:
      re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_79:
      v49 = 0;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v62 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v54 = 136315906;
      v55 = "operator[]";
      v56 = 1024;
      v57 = 476;
      v58 = 2048;
      v59 = v1;
      v60 = 2048;
      v61 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_80:
      v49 = 0;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v62 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v54 = 136315906;
      v55 = "operator[]";
      v56 = 1024;
      v57 = 476;
      v58 = 2048;
      v59 = v1;
      v60 = 2048;
      v61 = (_BYTE *)v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_81;
    }
    v12 = v4[5].i64[1];
    v13 = v12 + 24 * v3;
    v16 = *(_DWORD *)(v13 + 16);
    v14 = (int *)(v13 + 16);
    v15 = v16;
    if (v45 != v16)
    {
      if ((_DWORD)v5)
      {
        v5 = 0;
        *v10 = vaddq_f32(v43, *v10);
        v45 = *v14;
      }
      else
      {
        v45 = v15;
      }
    }
    v17 = (int *)(v12 + 24 * v3);
    v18 = *(_QWORD **)v17;
    v1 = v17[2];
    v2 = *(_BYTE **)(*(_QWORD *)v17 + 56);
    v19 = v1 + 1;
    if ((unint64_t)v2 <= v1 + 1)
      v20 = v1 + 1;
    else
      v20 = *(_QWORD *)(*(_QWORD *)v17 + 56);
    do
    {
      if (v20 == v19)
        goto LABEL_23;
      v21 = (_BYTE *)v18[1];
      if ((unint64_t)v21 <= v19)
      {
        v49 = 0;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        v4 = (float32x4_t *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v54 = 136315906;
        v55 = "operator[]";
        v56 = 1024;
        v57 = 476;
        v58 = 2048;
        v59 = v19;
        v60 = 2048;
        v61 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_71;
      }
      v22 = *(_DWORD *)(v18[2] + 4 * v19++);
    }
    while (v22 >= (int)v1);
    LODWORD(v20) = v19 - 1;
LABEL_23:
    if ((unint64_t)v2 <= v1)
      goto LABEL_77;
    v23 = v20 - v1;
    if (!v23)
      goto LABEL_78;
    v2 = (_BYTE *)v18[16];
    if ((unint64_t)v2 <= v1)
      goto LABEL_79;
    v24 = v18[8];
    v2 = (_BYTE *)(v24 + 72 * (int)v1);
    v25 = *(_BYTE **)(v18[17] + 8 * v1);
    if (!v2[16])
      goto LABEL_49;
    v11 = v18[13];
    if (v11 <= v1)
      goto LABEL_80;
    v26 = *(float *)(v18[14] + 4 * v1);
    v27 = fabsf(v26);
    v11 = 24;
    if (v27 < 0.00001)
      goto LABEL_50;
    if (v26 != 1.0 && fabsf(v26 + -1.0) >= (float)((float)((float)(v27 + 1.0) + 1.0) * 0.00001))
    {
      if (!(_BYTE)v51)
        LOBYTE(v51) = 1;
      v40 = v26;
      v31 = v4 + 9;
      if ((_DWORD)v5)
      {
        v50 = vaddq_f32(v43, *v10);
        v31 = &v50;
      }
      v32 = v47;
      result = (*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v25 + 96))(v25, v2, v23, v31, &v46, &v50);
      if (v47 != v32)
        return (*(uint64_t (**)(float32x4_t *))(v4->i64[0] + 32))(v4);
      if (v25[72])
      {
        v1 = v4[4].u64[1];
        if (v1 <= v3)
          goto LABEL_85;
        if ((*(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) & 4) == 0)
        {
          v33.i32[0] = 0;
          v34.i32[0] = v5;
          v35 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v34, v33), 0), *(int8x16_t *)v10, (int8x16_t)vaddq_f32(v43, *v10));
          v50 = vaddq_f32(v50, v35);
LABEL_64:
          v5 = 0;
          *v10 = vmlaq_n_f32(vmulq_n_f32(v50, v40), v35, 1.0 - v40);
          goto LABEL_50;
        }
        v35 = *v10;
        v50 = vaddq_f32(v50, *v10);
        if (!(_DWORD)v5)
          goto LABEL_64;
      }
      else
      {
        v35 = *v10;
        if (!(_DWORD)v5)
          goto LABEL_64;
      }
      v35 = vaddq_f32(v43, v35);
      goto LABEL_64;
    }
    *(_BYTE *)(v12 + 24 * v3 + 20) &= ~4u;
    if (v25[72])
      break;
    v48 = 1;
LABEL_49:
    result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v25 + 96))(v25, v24 + 72 * (int)v1, v23, v4 + 9, &v46, v4 + 9);
LABEL_50:
    if (++v3 == v44)
    {
      if ((_DWORD)v5)
        *v10 = vaddq_f32(v43, *v10);
      return result;
    }
  }
  if (!(_BYTE)v51)
    LOBYTE(v51) = 1;
  v28 = v4 + 9;
  if ((_DWORD)v5)
  {
    v50 = vaddq_f32(v43, *v10);
    v28 = &v50;
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v25 + 96))(v25, v24 + 72 * (int)v1, v23, v28, &v46, &v50);
  if (!v41)
  {
LABEL_40:
    v29.i32[0] = 0;
    v30.i32[0] = v5;
    v43 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v30, v29), 0), (int8x16_t)v50, (int8x16_t)vaddq_f32(v43, v50));
    if ((v42 & 1) != 0)
    {
      v5 = v4[4].u64[1];
      if (v5 <= v3)
        goto LABEL_82;
      v42 = 0;
      v5 = 1;
      if ((*(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) & 2) != 0 && *v2 == 5)
      {
        *v10 = vaddq_f32(v43, *v10);
        result = re::BindPoint::baseValueUntyped(v38);
        if (result)
        {
          *(float32x4_t *)result = *v10;
          result = re::BindPoint::markAsWritten((uint64_t)v38);
        }
        v5 = v4[4].u64[1];
        if (v5 <= v3)
          goto LABEL_84;
        v5 = 0;
        *(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) &= ~2u;
        v42 = 1;
        *v2 = 1;
      }
    }
    else
    {
      v42 = 0;
      v5 = 1;
    }
    goto LABEL_50;
  }
  v11 = v4[4].u64[1];
  if (v11 <= v3)
  {
LABEL_81:
    v49 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 789;
    v58 = 2048;
    v59 = v3;
    v60 = 2048;
    v61 = (_BYTE *)v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    v49 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 789;
    v58 = 2048;
    v59 = v3;
    v60 = 2048;
    v61 = (_BYTE *)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    v46 = 0;
    v8[3] = v9;
    v8[4] = v9;
    v8[1] = v9;
    v8[2] = v9;
    *v8 = v9;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 789;
    v58 = 2048;
    v59 = 0;
    v60 = 2048;
    v61 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    v49 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 789;
    v58 = 2048;
    v59 = v3;
    v60 = 2048;
    v61 = (_BYTE *)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    v49 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 789;
    v58 = 2048;
    v59 = v3;
    v60 = 2048;
    v61 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    v49 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 789;
    v58 = 2048;
    v59 = v3;
    v60 = 2048;
    v61 = (_BYTE *)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = 24;
  if ((*(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) & 1) == 0 || !*(_BYTE *)(v24 + 72 * (int)v1 + 32))
    goto LABEL_40;
LABEL_71:
  v36 = v50;
  *v10 = vnegq_f32(v50);
  *v10 = vsubq_f32(*v39, v36);
  v37 = (float32x4_t *)re::BindPoint::baseValueUntyped(v38);
  if (v37)
  {
    *v37 = *v10;
    re::BindPoint::markAsWritten((uint64_t)v38);
  }
  v5 = v4[4].u64[1];
  if (v5 <= v3)
    goto LABEL_86;
  *(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) &= ~1u;
  return (*(uint64_t (**)(float32x4_t *))(v4->i64[0] + 32))(v4);
}

void re::internal::AnimationCompositionChain<re::Vector3<float>>::apply(float32x4_t *a1)
{
  re::BindPoint *v2;
  _OWORD *v3;
  _OWORD *v4;

  v2 = (re::BindPoint *)&a1->u32[2];
  if (re::BindPoint::isAlive((re::BindPoint *)&a1->u32[2]))
  {
    if (a1[4].i64[1])
    {
      re::BindPoint::setValue<re::Vector3<float>>(v2, a1 + 9);
    }
    else
    {
      if (a1[6].i8[8] && re::BindPoint::isOverridden(v2))
      {
        v3 = (_OWORD *)re::BindPoint::overrideValueUntyped(v2);
        v4 = (_OWORD *)re::BindPoint::baseValueUntyped(v2);
        if (v4)
        {
          *v4 = *v3;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
}

float re::BindPoint::setValue<re::Vector3<float>>(re::BindPoint *a1, float32x4_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  float32x4_t *v13;
  uint32x4_t v14;
  float result;
  float32x4_t *v16;
  uint32x4_t v17;
  _QWORD v18[2];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 3);
  if (v2)
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (_QWORD *)((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v18[1] = 0;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v19 = 136315906;
        v20 = "operator[]";
        v21 = 1024;
        v22 = 797;
        v23 = 2048;
        v24 = v10;
        v25 = 2048;
        v26 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)a1 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v2 - 1);
    if (v12)
    {
      v13 = (float32x4_t *)v12;
      if (!re::BindPoint::isOverridden(a1)
        || (v14 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v13, *a2)),
            v14.i32[3] = v14.i32[2],
            result = COERCE_FLOAT(vmaxvq_u32(v14)),
            (LODWORD(result) & 0x80000000) != 0))
      {
        *v13 = *a2;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      v16 = (float32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v2 - 1);
      if (v16)
      {
        v17 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v16, *a2));
        v17.i32[3] = v17.i32[2];
        result = COERCE_FLOAT(vmaxvq_u32(v17));
        if ((LODWORD(result) & 0x80000000) != 0)
        {
          *v16 = *a2;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<re::Vector3<float>>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 112))
      *(_BYTE *)(result + 112) = 1;
    v2 = *(_OWORD *)(result + 144);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_OWORD *)(v1 + 128) = 0u;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v2 = *(_OWORD *)result;
LABEL_14:
    *(_OWORD *)(v1 + 128) = v2;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_OWORD *)(v1 + 128) = 0u;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<re::Vector4<float>>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1ED10;
  re::internal::AnimationCompositionChain<re::Vector4<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1ED10;
  re::internal::AnimationCompositionChain<re::Vector4<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector4<float>>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<re::Vector4<float>>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<re::Vector4<float>>::update(uint64_t result)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  float32x4_t *v4;
  unint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  __int128 *v8;
  __int128 v9;
  float32x4_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  float v26;
  float v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t *v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  float v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  re::BindPoint *v45;
  float32x4_t *v46;
  float v47;
  int v48;
  char v49;
  float32x4_t v50;
  uint64_t v51;
  int v52;
  float32x4_t *v53;
  int v54;
  char v55;
  uint64_t v56;
  float32x4_t v57;
  __int128 v58;
  _QWORD v59[2];
  char v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  _BYTE *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v51 = *(_QWORD *)(result + 72);
  if (!v51)
    return result;
  v4 = (float32x4_t *)result;
  v5 = result + 8;
  result = re::BindPoint::isAlive((re::BindPoint *)(result + 8));
  if (!(_DWORD)result)
    return result;
  result = re::BindPoint::supportsOverrideValue((re::BindPoint *)v5);
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  v48 = result;
  if ((_DWORD)result)
  {
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)v5);
    v46 = (float32x4_t *)result;
  }
  else
  {
    v60 = 1;
    v46 = (float32x4_t *)v59;
  }
  if (v4[7].i8[0])
    v7 = v4[8];
  else
    v7 = *v46;
  v4[9] = v7;
  v8 = &v69;
  v57 = 0u;
  v58 = 0u;
  v9 = 0uLL;
  v50 = 0u;
  if (!v4[4].i64[1])
    goto LABEL_81;
  v45 = (re::BindPoint *)v5;
  v3 = 0;
  v5 = 0;
  v52 = *(_DWORD *)(v4[5].i64[1] + 16);
  v10 = v4 + 9;
  v53 = v46;
  v54 = 0;
  v55 = 0;
  v11 = 24;
  v49 = v48;
  while (1)
  {
    v1 = v4[4].u64[1];
    if (v1 <= v3)
    {
      v56 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 789;
      v65 = 2048;
      v66 = v3;
      v67 = 2048;
      v68 = (_BYTE *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_75:
      v56 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v1;
      v67 = 2048;
      v68 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_76:
      re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_77:
      v56 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v1;
      v67 = 2048;
      v68 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_78:
      v56 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v1;
      v67 = 2048;
      v68 = (_BYTE *)v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_79;
    }
    v12 = v4[5].i64[1];
    v13 = v12 + 24 * v3;
    v16 = *(_DWORD *)(v13 + 16);
    v14 = (int *)(v13 + 16);
    v15 = v16;
    if (v52 != v16)
    {
      if ((_DWORD)v5)
      {
        v5 = 0;
        *v10 = vaddq_f32(v50, *v10);
        v52 = *v14;
      }
      else
      {
        v52 = v15;
      }
    }
    v17 = (int *)(v12 + 24 * v3);
    v18 = *(_QWORD **)v17;
    v1 = v17[2];
    v2 = *(_BYTE **)(*(_QWORD *)v17 + 56);
    v19 = v1 + 1;
    if ((unint64_t)v2 <= v1 + 1)
      v20 = v1 + 1;
    else
      v20 = *(_QWORD *)(*(_QWORD *)v17 + 56);
    do
    {
      if (v20 == v19)
        goto LABEL_23;
      v21 = (_BYTE *)v18[1];
      if ((unint64_t)v21 <= v19)
      {
        v56 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v4 = (float32x4_t *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v61 = 136315906;
        v62 = "operator[]";
        v63 = 1024;
        v64 = 476;
        v65 = 2048;
        v66 = v19;
        v67 = 2048;
        v68 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_69;
      }
      v22 = *(_DWORD *)(v18[2] + 4 * v19++);
    }
    while (v22 >= (int)v1);
    LODWORD(v20) = v19 - 1;
LABEL_23:
    if ((unint64_t)v2 <= v1)
      goto LABEL_75;
    v23 = v20 - v1;
    if (!v23)
      goto LABEL_76;
    v2 = (_BYTE *)v18[16];
    if ((unint64_t)v2 <= v1)
      goto LABEL_77;
    v24 = v18[8];
    v2 = (_BYTE *)(v24 + 72 * (int)v1);
    v25 = *(_BYTE **)(v18[17] + 8 * v1);
    if (!v2[16])
      goto LABEL_49;
    v11 = v18[13];
    if (v11 <= v1)
      goto LABEL_78;
    v26 = *(float *)(v18[14] + 4 * v1);
    v27 = fabsf(v26);
    v11 = 24;
    if (v27 < 0.00001)
      goto LABEL_50;
    if (v26 != 1.0 && fabsf(v26 + -1.0) >= (float)((float)((float)(v27 + 1.0) + 1.0) * 0.00001))
    {
      if (!(_BYTE)v58)
        LOBYTE(v58) = 1;
      v47 = v26;
      v32 = v4 + 9;
      if ((_DWORD)v5)
      {
        v57 = vaddq_f32(v50, *v10);
        v32 = &v57;
      }
      v33 = v54;
      result = (*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v25 + 96))(v25, v2, v23, v32, &v53, &v57);
      if (v54 != v33)
        return (*(uint64_t (**)(float32x4_t *))(v4->i64[0] + 32))(v4);
      if (v25[72])
      {
        v1 = v4[4].u64[1];
        v36 = v47;
        if (v1 <= v3)
          goto LABEL_83;
        v34.i32[0] = 0;
        v35.i32[0] = v5;
        v37.i64[0] = 0x8000000080000000;
        v37.i64[1] = 0x8000000080000000;
        if ((*(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) & 4) != 0)
        {
          v41 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v35, v34), 0), v37, (int8x16_t)v50);
          v42 = *v10;
          v39 = vaddq_f32(v57, *v10);
          v57 = v39;
          v38 = vaddq_f32(v41, v42);
        }
        else
        {
          v38 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v35, v34), 0), v37, (int8x16_t)v50), *v10);
          v39 = vaddq_f32(v57, v38);
          v57 = v39;
        }
      }
      else
      {
        v34.i32[0] = 0;
        v35.i32[0] = v5;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v38 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v35, v34), 0), v40, (int8x16_t)v50), *v10);
        v39 = v57;
        v36 = v47;
      }
      v5 = 0;
      *v10 = vaddq_f32(vmulq_n_f32(v38, 1.0 - v36), vmulq_n_f32(v39, v36));
      goto LABEL_50;
    }
    *(_BYTE *)(v12 + 24 * v3 + 20) &= ~4u;
    if (v25[72])
      break;
    v55 = 1;
LABEL_49:
    result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v25 + 96))(v25, v24 + 72 * (int)v1, v23, v4 + 9, &v53, v4 + 9);
LABEL_50:
    if (++v3 == v51)
    {
      if ((_DWORD)v5)
        *v10 = vaddq_f32(v50, *v10);
      return result;
    }
  }
  if (!(_BYTE)v58)
    LOBYTE(v58) = 1;
  v28 = v4 + 9;
  if ((_DWORD)v5)
  {
    v57 = vaddq_f32(v50, *v10);
    v28 = &v57;
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v25 + 96))(v25, v24 + 72 * (int)v1, v23, v28, &v53, &v57);
  if (!v48)
  {
LABEL_40:
    v29.i32[0] = 0;
    v30.i32[0] = v5;
    v31.i64[0] = 0x8000000080000000;
    v31.i64[1] = 0x8000000080000000;
    v50 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v30, v29), 0), v31, (int8x16_t)v50), v57);
    if ((v49 & 1) != 0)
    {
      v5 = v4[4].u64[1];
      if (v5 <= v3)
        goto LABEL_80;
      v49 = 0;
      v5 = 1;
      if ((*(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) & 2) != 0 && *v2 == 5)
      {
        *v10 = vaddq_f32(v50, *v10);
        result = re::BindPoint::baseValueUntyped(v45);
        if (result)
        {
          *(float32x4_t *)result = *v10;
          result = re::BindPoint::markAsWritten((uint64_t)v45);
        }
        v5 = v4[4].u64[1];
        if (v5 <= v3)
          goto LABEL_82;
        v5 = 0;
        *(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) &= ~2u;
        v49 = 1;
        *v2 = 1;
      }
    }
    else
    {
      v49 = 0;
      v5 = 1;
    }
    goto LABEL_50;
  }
  v11 = v4[4].u64[1];
  if (v11 <= v3)
  {
LABEL_79:
    v56 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v3;
    v67 = 2048;
    v68 = (_BYTE *)v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    v56 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v3;
    v67 = 2048;
    v68 = (_BYTE *)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    v53 = 0;
    v8[3] = v9;
    v8[4] = v9;
    v8[1] = v9;
    v8[2] = v9;
    *v8 = v9;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = 0;
    v67 = 2048;
    v68 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    v56 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v3;
    v67 = 2048;
    v68 = (_BYTE *)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    v56 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v3;
    v67 = 2048;
    v68 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    v56 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v3;
    v67 = 2048;
    v68 = (_BYTE *)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = 24;
  if ((*(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) & 1) == 0 || !*(_BYTE *)(v24 + 72 * (int)v1 + 32))
    goto LABEL_40;
LABEL_69:
  v43 = v57;
  *v10 = vnegq_f32(v57);
  *v10 = vsubq_f32(*v46, v43);
  v44 = (float32x4_t *)re::BindPoint::baseValueUntyped(v45);
  if (v44)
  {
    *v44 = *v10;
    re::BindPoint::markAsWritten((uint64_t)v45);
  }
  v5 = v4[4].u64[1];
  if (v5 <= v3)
    goto LABEL_84;
  *(_BYTE *)(v4[5].i64[1] + 24 * v3 + 20) &= ~1u;
  return (*(uint64_t (**)(float32x4_t *))(v4->i64[0] + 32))(v4);
}

void re::internal::AnimationCompositionChain<re::Vector4<float>>::apply(float32x4_t *a1)
{
  re::BindPoint *v2;
  _OWORD *v3;
  _OWORD *v4;

  v2 = (re::BindPoint *)&a1->u32[2];
  if (re::BindPoint::isAlive((re::BindPoint *)&a1->u32[2]))
  {
    if (a1[4].i64[1])
    {
      re::BindPoint::setValue<re::Vector4<float>>(v2, a1 + 9);
    }
    else
    {
      if (a1[6].i8[8] && re::BindPoint::isOverridden(v2))
      {
        v3 = (_OWORD *)re::BindPoint::overrideValueUntyped(v2);
        v4 = (_OWORD *)re::BindPoint::baseValueUntyped(v2);
        if (v4)
        {
          *v4 = *v3;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
}

float re::BindPoint::setValue<re::Vector4<float>>(re::BindPoint *a1, float32x4_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float result;
  float32x4_t *v16;
  _QWORD v17[2];
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 3);
  if (v2)
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (_QWORD *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v17[1] = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v18 = 136315906;
        v19 = "operator[]";
        v20 = 1024;
        v21 = 797;
        v22 = 2048;
        v23 = v10;
        v24 = 2048;
        v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)a1 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float32x4_t *)v13;
      if (!re::BindPoint::isOverridden(a1)
        || (result = COERCE_FLOAT(vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v14, *a2)))),
            (LODWORD(result) & 0x80000000) != 0))
      {
        *v14 = *a2;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      v16 = (float32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (v16)
      {
        result = COERCE_FLOAT(vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v16, *a2))));
        if ((LODWORD(result) & 0x80000000) != 0)
        {
          *v16 = *a2;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<re::Vector4<float>>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 112))
      *(_BYTE *)(result + 112) = 1;
    v2 = *(_OWORD *)(result + 144);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 128) = 0;
      *(_QWORD *)(v1 + 136) = 0;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v2 = *(_OWORD *)result;
LABEL_14:
    *(_OWORD *)(v1 + 128) = v2;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 128) = 0;
      *(_QWORD *)(v1 + 136) = 0;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<re::Quaternion<float>>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1ED68;
  re::internal::AnimationCompositionChain<re::Quaternion<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1ED68;
  re::internal::AnimationCompositionChain<re::Quaternion<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<re::Quaternion<float>>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<re::Quaternion<float>>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

void re::internal::AnimationCompositionChain<re::Quaternion<float>>::update(float32x4_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  unint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  __int128 *v10;
  float32x4_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  float32x4_t v20;
  float32x4_t v21;
  int *v27;
  _QWORD *v28;
  _BYTE *v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  float32x4_t *v36;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v47;
  float32x4_t v50;
  float32x4_t v51;
  int v53;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v68;
  float32x4_t *v69;
  float32x4_t v72;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x4_t v79;
  int32x4_t v83;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v90;
  float32x2_t v91;
  int32x4_t v93;
  float32x4_t v94;
  int32x4_t v96;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t *v100;
  re::BindPoint *v101;
  float32x4_t *v102;
  int v103;
  char v104;
  int8x16_t v105;
  uint64_t v106;
  int v107;
  float32x4_t *v108;
  int v109;
  char v110;
  uint64_t v111;
  float32x4_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  char v116;
  int v117;
  const char *v118;
  __int16 v119;
  int v120;
  __int16 v121;
  unint64_t v122;
  __int16 v123;
  _BYTE *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v106 = a1[4].i64[1];
  if (!v106)
    return;
  v6 = a1;
  v7 = (unint64_t)&a1->u64[1];
  if (!re::BindPoint::isAlive((re::BindPoint *)&a1->u32[2]))
    return;
  v105 = (int8x16_t)xmmword_2260E5D70;
  v115 = xmmword_2260E5D70;
  v116 = 0;
  v103 = re::BindPoint::supportsOverrideValue((re::BindPoint *)v7);
  if (v103)
  {
    v102 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)v7);
  }
  else
  {
    v116 = 1;
    *(_QWORD *)&v115 = 0;
    *((_QWORD *)&v115 + 1) = 0x3F80000000000000;
    v102 = (float32x4_t *)&v115;
  }
  if (v6[7].i8[0])
    v9 = v6[8];
  else
    v9 = *v102;
  v6[9] = v9;
  v10 = &v125;
  v113 = 0;
  v114 = 0;
  v112 = (float32x4_t)xmmword_2260E5D70;
  if (!v6[4].i64[1])
    goto LABEL_90;
  v101 = (re::BindPoint *)v7;
  v5 = 0;
  v1 = 0;
  v107 = *(_DWORD *)(v6[5].i64[1] + 16);
  v11 = v6 + 9;
  v108 = v102;
  v109 = 0;
  v110 = 0;
  v12 = 24;
  v104 = v103;
  while (1)
  {
    v2 = v6[4].u64[1];
    if (v2 <= v5)
    {
      v111 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v125 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v117 = 136315906;
      v118 = "operator[]";
      v119 = 1024;
      v120 = 789;
      v121 = 2048;
      v122 = v5;
      v123 = 2048;
      v124 = (_BYTE *)v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      v111 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v125 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v117 = 136315906;
      v118 = "operator[]";
      v119 = 1024;
      v120 = 476;
      v121 = 2048;
      v122 = v2;
      v123 = 2048;
      v124 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_86:
      v111 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v125 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v117 = 136315906;
      v118 = "operator[]";
      v119 = 1024;
      v120 = 476;
      v121 = 2048;
      v122 = v2;
      v123 = 2048;
      v124 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      v111 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v125 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v117 = 136315906;
      v118 = "operator[]";
      v119 = 1024;
      v120 = 476;
      v121 = 2048;
      v122 = v2;
      v123 = 2048;
      v124 = (_BYTE *)v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_88;
    }
    v13 = v6[5].i64[1];
    v14 = v13 + 24 * v5;
    v17 = *(_DWORD *)(v14 + 16);
    v15 = (int *)(v14 + 16);
    v16 = v17;
    if (v107 != v17)
    {
      if ((_DWORD)v1)
      {
        v1 = 0;
        _Q0 = *(int32x4_t *)v11;
        _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(*v11)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v11, 0xCuLL));
        v20 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, *v11, 3);
        _Q2.i32[0] = v105.i32[3];
        v21 = vmlaq_laneq_f32(v20, *v11, (float32x4_t)v105, 3);
        __asm { FMLA            S3, S2, V0.S[3] }
        v21.i32[3] = _S3;
        *v11 = v21;
        v107 = *v15;
      }
      else
      {
        v107 = v16;
      }
    }
    v27 = (int *)(v13 + 24 * v5);
    v28 = *(_QWORD **)v27;
    v2 = v27[2];
    v3 = *(_BYTE **)(*(_QWORD *)v27 + 56);
    v4 = v2 + 1;
    if ((unint64_t)v3 <= v2 + 1)
      v29 = (_BYTE *)(v2 + 1);
    else
      v29 = *(_BYTE **)(*(_QWORD *)v27 + 56);
    do
    {
      if (v29 == (_BYTE *)v4)
        goto LABEL_23;
      v30 = v28[1];
      if (v30 <= v4)
      {
        v111 = 0;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v125 = 0u;
        v6 = (float32x4_t *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v117 = 136315906;
        v118 = "operator[]";
        v119 = 1024;
        v120 = 476;
        v121 = 2048;
        v122 = v4;
        v123 = 2048;
        v124 = (_BYTE *)v30;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_78;
      }
      v31 = *(_DWORD *)(v28[2] + 4 * v4++);
    }
    while (v31 >= (int)v2);
    LODWORD(v29) = v4 - 1;
LABEL_23:
    if ((unint64_t)v3 <= v2)
      goto LABEL_84;
    v32 = (_DWORD)v29 - v2;
    if (!v32)
      goto LABEL_85;
    v3 = (_BYTE *)v28[16];
    if ((unint64_t)v3 <= v2)
      goto LABEL_86;
    v33 = v28[8];
    v3 = (_BYTE *)(v33 + 72 * (int)v2);
    v4 = *(_QWORD *)(v28[17] + 8 * v2);
    v7 = 72;
    if (!v3[16])
      goto LABEL_43;
    v12 = v28[13];
    if (v12 <= v2)
      goto LABEL_87;
    v34 = *(float *)(v28[14] + 4 * v2);
    v35 = fabsf(v34);
    v12 = 24;
    if (v35 < 0.00001)
      goto LABEL_44;
    if (v34 != 1.0 && fabsf(v34 + -1.0) >= (float)((float)((float)(v35 + 1.0) + 1.0) * 0.00001))
    {
      if (!(_BYTE)v113)
        LOBYTE(v113) = 1;
      v47 = v6 + 9;
      if ((_DWORD)v1)
      {
        _Q0 = *(int32x4_t *)v11;
        _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(*v11)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v11, 0xCuLL));
        v50 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, *v11, 3);
        _Q2.i32[0] = v105.i32[3];
        v51 = vmlaq_laneq_f32(v50, *v11, (float32x4_t)v105, 3);
        __asm { FMLA            S3, S2, V0.S[3] }
        v51.i32[3] = _S3;
        v112 = v51;
        v47 = &v112;
      }
      v53 = v109;
      (*(void (**)(unint64_t, _BYTE *, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v4 + 96))(v4, v3, v32, v47, &v108, &v112);
      if (v109 != v53)
        goto LABEL_82;
      if (*(_BYTE *)(v4 + 72))
      {
        v2 = v6[4].u64[1];
        if (v2 <= v5)
          goto LABEL_92;
        _Q0 = v6[9];
        if ((*(_BYTE *)(v6[5].i64[1] + 24 * v5 + 20) & 4) == 0)
        {
          if ((_DWORD)v1)
          {
            _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(_Q0)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
            v56 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, _Q0, 3);
            _Q2.i32[0] = v105.i32[3];
            v57 = vmlaq_laneq_f32(v56, _Q0, (float32x4_t)v105, 3);
            __asm { FMLA            S3, S2, V0.S[3] }
            v57.i32[3] = _S3;
            *v11 = v57;
            _Q0 = v57;
          }
          _Q3 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL), vnegq_f32(_Q0)), v112, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
          v60 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q3, _Q3), (int8x16_t)_Q3, 0xCuLL), v112, _Q0, 3);
          _Q3.i32[0] = v112.i32[3];
          v61 = vmlaq_laneq_f32(v60, _Q0, v112, 3);
          __asm { FMLA            S1, S3, V0.S[3] }
          v61.i32[3] = _S1;
          v112 = v61;
          goto LABEL_72;
        }
        v75 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL);
        v76 = vnegq_f32(_Q0);
        v77 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL), v76), v112, v75);
        _S5 = v112.i32[3];
        v79 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), v112, _Q0, 3), _Q0, v112, 3);
        __asm { FMLA            S3, S5, V0.S[3] }
        v79.i32[3] = _S3;
        v112 = v79;
        if ((_DWORD)v1)
        {
          _S3 = _Q0.i32[3];
          _Q6 = (int32x4_t)v105;
          v83 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), v105, 0xCuLL), v76), (float32x4_t)v105, v75);
          v74 = vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v83, v83), (int8x16_t)v83, 0xCuLL), (float32x4_t)v105, (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q0, 3)), _Q0, (float32x4_t)v105, 3);
          __asm { FMLA            S0, S3, V6.S[3] }
          v74.i32[3] = _S0;
LABEL_71:
          *v11 = v74;
        }
      }
      else if ((_DWORD)v1)
      {
        _Q0 = *(int32x4_t *)v11;
        _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(*v11)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v11, 0xCuLL));
        v72 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, *v11, 3);
        _Q2.i32[0] = v105.i32[3];
        v74 = vmlaq_laneq_f32(v72, *v11, (float32x4_t)v105, 3);
        __asm { FMLA            S3, S2, V0.S[3] }
        v74.i32[3] = _S3;
        goto LABEL_71;
      }
LABEL_72:
      re::AnimationValueTraits<re::Quaternion<float>>::interpolate(v6 + 9, &v112, (uint64_t *)&v6[9], v34);
      v1 = 0;
      goto LABEL_44;
    }
    *(_BYTE *)(v13 + 24 * v5 + 20) &= ~4u;
    if (*(_BYTE *)(v4 + 72))
      break;
    v110 = 1;
LABEL_43:
    (*(void (**)(unint64_t, uint64_t, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v4 + 96))(v4, v33 + 72 * (int)v2, v32, v6 + 9, &v108, v6 + 9);
LABEL_44:
    if (++v5 == v106)
    {
      _Q0 = *v11;
      if ((_DWORD)v1)
      {
        _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(_Q0)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
        v87 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, _Q0, 3);
        _Q2.i32[0] = v105.i32[3];
        v88 = vmlaq_laneq_f32(v87, _Q0, (float32x4_t)v105, 3);
        __asm { FMLA            S3, S2, V0.S[3] }
        v88.i32[3] = _S3;
        _Q0 = v88;
      }
      v90 = (int8x16_t)vmulq_f32(_Q0, _Q0);
      *(float32x2_t *)v90.i8 = vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
      v90.i32[0] = vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1)).u32[0];
      v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
      *v11 = vmulq_n_f32(_Q0, vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91))).f32[0]);
      return;
    }
  }
  if (!(_BYTE)v113)
    LOBYTE(v113) = 1;
  v36 = v6 + 9;
  if ((_DWORD)v1)
  {
    _Q0 = *(int32x4_t *)v11;
    _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(*v11)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v11, 0xCuLL));
    v39 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, *v11, 3);
    _Q2.i32[0] = v105.i32[3];
    v40 = vmlaq_laneq_f32(v39, *v11, (float32x4_t)v105, 3);
    __asm { FMLA            S3, S2, V0.S[3] }
    v40.i32[3] = _S3;
    v112 = v40;
    v36 = &v112;
  }
  (*(void (**)(unint64_t, uint64_t, _QWORD, float32x4_t *, float32x4_t **, float32x4_t *))(*(_QWORD *)v4 + 96))(v4, v33 + 72 * (int)v2, v32, v36, &v108, &v112);
  if (!v103)
  {
LABEL_40:
    if ((_DWORD)v1)
    {
      _Q4 = (int32x4_t)v105;
      _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL), vnegq_f32((float32x4_t)v105)), v112, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q4, _Q4), v105, 0xCuLL));
      v44 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), v112, (float32x4_t)v105, 3);
      _Q2.i32[0] = v112.i32[3];
      v45 = vmlaq_laneq_f32(v44, (float32x4_t)v105, v112, 3);
      __asm { FMLA            S0, S2, V4.S[3] }
      v45.i32[3] = _S0;
      v105 = (int8x16_t)v45;
    }
    else
    {
      v105 = (int8x16_t)v112;
    }
    if ((v104 & 1) != 0)
    {
      v1 = v6[4].u64[1];
      if (v1 <= v5)
        goto LABEL_89;
      v104 = 0;
      v1 = 1;
      if ((*(_BYTE *)(v6[5].i64[1] + 24 * v5 + 20) & 2) != 0 && *v3 == 5)
      {
        _Q0 = *(int32x4_t *)v11;
        _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL), vnegq_f32(*v11)), (float32x4_t)v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v11, 0xCuLL));
        v65 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), (float32x4_t)v105, *v11, 3);
        _Q2.i32[0] = v105.i32[3];
        v66 = vmlaq_laneq_f32(v65, *v11, (float32x4_t)v105, 3);
        __asm { FMLA            S3, S2, V0.S[3] }
        v66.i32[3] = _S3;
        v68 = (int8x16_t)vmulq_f32(v66, v66);
        *(float32x2_t *)v68.i8 = vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
        v68.i32[0] = vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.i8, 1)).u32[0];
        *(float32x2_t *)_Q2.i8 = vrsqrte_f32((float32x2_t)v68.u32[0]);
        *v11 = vmulq_n_f32(v66, vmul_f32(*(float32x2_t *)_Q2.i8, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)_Q2.i8))).f32[0]);
        v69 = (float32x4_t *)re::BindPoint::baseValueUntyped(v101);
        if (v69)
        {
          *v69 = *v11;
          re::BindPoint::markAsWritten((uint64_t)v101);
        }
        v1 = v6[4].u64[1];
        if (v1 <= v5)
          goto LABEL_91;
        v1 = 0;
        *(_BYTE *)(v6[5].i64[1] + 24 * v5 + 20) &= ~2u;
        v104 = 1;
        *v3 = 1;
      }
    }
    else
    {
      v104 = 0;
      v1 = 1;
    }
    goto LABEL_44;
  }
  v4 = v6[4].u64[1];
  if (v4 <= v5)
  {
LABEL_88:
    v111 = 0;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v117 = 136315906;
    v118 = "operator[]";
    v119 = 1024;
    v120 = 789;
    v121 = 2048;
    v122 = v5;
    v123 = 2048;
    v124 = (_BYTE *)v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    v111 = 0;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v117 = 136315906;
    v118 = "operator[]";
    v119 = 1024;
    v120 = 789;
    v121 = 2048;
    v122 = v5;
    v123 = 2048;
    v124 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_90:
    v108 = 0;
    v10[3] = 0u;
    v10[4] = 0u;
    v10[1] = 0u;
    v10[2] = 0u;
    *v10 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v117 = 136315906;
    v118 = "operator[]";
    v119 = 1024;
    v120 = 789;
    v121 = 2048;
    v122 = 0;
    v123 = 2048;
    v124 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    v111 = 0;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v117 = 136315906;
    v118 = "operator[]";
    v119 = 1024;
    v120 = 789;
    v121 = 2048;
    v122 = v5;
    v123 = 2048;
    v124 = (_BYTE *)v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_92:
    v111 = 0;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v117 = 136315906;
    v118 = "operator[]";
    v119 = 1024;
    v120 = 789;
    v121 = 2048;
    v122 = v5;
    v123 = 2048;
    v124 = (_BYTE *)v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_93:
    v111 = 0;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v117 = 136315906;
    v118 = "operator[]";
    v119 = 1024;
    v120 = 789;
    v121 = 2048;
    v122 = v5;
    v123 = 2048;
    v124 = (_BYTE *)v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(v6[5].i64[1] + 24 * v5 + 20) & 1) == 0 || !*(_BYTE *)(v33 + 72 * (int)v2 + 32))
    goto LABEL_40;
LABEL_78:
  *v11 = v112;
  _Q0 = *v11;
  v93 = (int32x4_t)vnegq_f32(*v11);
  v94 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v93, v93), (int8x16_t)v93, 0xCuLL);
  v93.i32[3] = HIDWORD(*(unsigned __int128 *)v11);
  *v11 = (float32x4_t)v93;
  _Q3 = *(int32x4_t *)v102;
  v96 = (int32x4_t)vmlsq_f32(vmulq_f32(v94, vnegq_f32(*v102)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q3, _Q3), *(int8x16_t *)v102, 0xCuLL), _Q0);
  _S4 = _Q0.i32[3];
  v98 = vmlaq_laneq_f32(vmlsq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL), _Q0, *v102, 3), *v102, _Q0, 3);
  __asm { FMLA            S0, S4, V3.S[3] }
  v98.i32[3] = _Q0.i32[0];
  v99 = (int8x16_t)vmulq_f32(v98, v98);
  *(float32x2_t *)v99.i8 = vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL));
  v99.i32[0] = vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1)).u32[0];
  *(float32x2_t *)v93.i8 = vrsqrte_f32((float32x2_t)v99.u32[0]);
  *v11 = vmulq_n_f32(v98, vmul_f32(*(float32x2_t *)v93.i8, vrsqrts_f32((float32x2_t)v99.u32[0], vmul_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v93.i8))).f32[0]);
  v100 = (float32x4_t *)re::BindPoint::baseValueUntyped(v101);
  if (v100)
  {
    *v100 = *v11;
    re::BindPoint::markAsWritten((uint64_t)v101);
  }
  v7 = v6[4].u64[1];
  if (v7 <= v5)
    goto LABEL_93;
  *(_BYTE *)(v6[5].i64[1] + 24 * v5 + 20) &= ~1u;
LABEL_82:
  (*(void (**)(float32x4_t *))(v6->i64[0] + 32))(v6);
}

void re::AnimationValueTraits<re::Quaternion<float>>::interpolate(float32x4_t *a1, float32x4_t *a2, uint64_t *a3, float a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int32 v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;

  v6 = vmulq_f32(*a1, *a2);
  v7 = (float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL);
  *(float32x2_t *)v6.f32 = vadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32);
  v6.f32[0] = vaddv_f32(*(float32x2_t *)v6.f32);
  v7.i32[0] = 0;
  v8 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v6, v7)), 0), (int8x16_t)vnegq_f32(*a2), *(int8x16_t *)a2);
  v9 = 1.0;
  v10 = 1.0 - a4;
  v11 = vsubq_f32(*a1, v8);
  v12 = (int8x16_t)vmulq_f32(v11, v11);
  v39 = v8;
  v40 = *a1;
  v13 = vaddq_f32(*a1, v8);
  v14 = (int8x16_t)vmulq_f32(v13, v13);
  v15 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)))));
  v16 = v15 + v15;
  v17 = (float)(v15 + v15) == 0.0;
  v18 = 1.0;
  if (!v17)
    v18 = sinf(v16) / v16;
  v19 = v18;
  v20 = vrecpe_f32((float32x2_t)LODWORD(v18));
  v21 = vmul_f32(v20, vrecps_f32((float32x2_t)LODWORD(v19), v20));
  LODWORD(v22) = vmul_f32(v21, vrecps_f32((float32x2_t)LODWORD(v19), v21)).u32[0];
  if ((float)(v10 * v16) != 0.0)
  {
    v37 = v22;
    v21.f32[0] = sinf(v10 * v16);
    v22 = v37;
    v9 = v21.f32[0] / (float)(v10 * v16);
  }
  v21.f32[0] = v10 * (float)(v22 * v9);
  v23 = (float32x4_t)vdupq_lane_s32((int32x2_t)v21, 0);
  v24 = v16 * a4;
  v25 = 1.0;
  if (v24 != 0.0)
  {
    v36 = v23;
    v38 = v22;
    v26 = sinf(v24);
    v23 = v36;
    v22 = v38;
    v25 = v26 / v24;
  }
  v27 = vmlaq_f32(vmulq_n_f32(v39, (float)(v22 * v25) * a4), v40, v23);
  v28 = (int8x16_t)vmulq_f32(v27, v27);
  v29 = vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
  if (vaddv_f32(v29) == 0.0)
  {
    v30 = 0;
    v31 = 0x3F80000000000000;
  }
  else
  {
    v32 = vadd_f32(v29, (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1)).u32[0];
    v33 = vrsqrte_f32((float32x2_t)v32);
    v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32, vmul_f32(v33, v33)));
    v35 = vmulq_n_f32(v27, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32, vmul_f32(v34, v34))).f32[0]);
    v31 = v35.i64[1];
    v30 = v35.i64[0];
  }
  *a3 = v30;
  a3[1] = v31;
}

void re::internal::AnimationCompositionChain<re::Quaternion<float>>::apply(float32x4_t *a1)
{
  re::BindPoint *v2;
  _OWORD *v3;
  _OWORD *v4;

  v2 = (re::BindPoint *)&a1->u32[2];
  if (re::BindPoint::isAlive((re::BindPoint *)&a1->u32[2]))
  {
    if (a1[4].i64[1])
    {
      re::BindPoint::setValue<re::Vector4<float>>(v2, a1 + 9);
    }
    else
    {
      if (a1[6].i8[8] && re::BindPoint::isOverridden(v2))
      {
        v3 = (_OWORD *)re::BindPoint::overrideValueUntyped(v2);
        v4 = (_OWORD *)re::BindPoint::baseValueUntyped(v2);
        if (v4)
        {
          *v4 = *v3;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
}

uint64_t re::internal::AnimationCompositionChain<re::Quaternion<float>>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 112))
      *(_BYTE *)(result + 112) = 1;
    v2 = *(_OWORD *)(result + 144);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_OWORD *)(v1 + 128) = xmmword_2260E5D70;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v2 = *(_OWORD *)result;
LABEL_14:
    *(_OWORD *)(v1 + 128) = v2;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_OWORD *)(v1 + 128) = xmmword_2260E5D70;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<re::GenericSRT<float>>::~AnimationCompositionChain(re::internal::AnimationCompositionChainBase *a1)
{
  *(_QWORD *)a1 = &off_24ED1EDC0;
  re::internal::AnimationCompositionChain<re::GenericSRT<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
}

{
  *(_QWORD *)a1 = &off_24ED1EDC0;
  re::internal::AnimationCompositionChain<re::GenericSRT<float>>::deinit((uint64_t)a1);
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::AnimationCompositionChain<re::GenericSRT<float>>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  return re::BindPoint::baseValueUntyped((re::BindPoint *)a2);
}

uint64_t re::internal::AnimationCompositionChain<re::GenericSRT<float>>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

void re::internal::AnimationCompositionChain<re::GenericSRT<float>>::update(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  re::BindPoint *v5;
  uint64_t v6;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  int v10;
  float32x4_t *v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  float32x4_t *v22;
  float v23;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int v39;
  int *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  int *v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  re::BindPoint *v73;
  _QWORD *v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  int v80;
  char v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[6];
  char v94;
  int v95;
  const char *v96;
  __int16 v97;
  int v98;
  __int16 v99;
  unint64_t v100;
  __int16 v101;
  unint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  __n128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v77 = *(_QWORD *)(a1 + 72);
  if (!v77)
    return;
  v4 = a1;
  v5 = (re::BindPoint *)(a1 + 8);
  if (!re::BindPoint::isAlive((re::BindPoint *)(a1 + 8)))
    return;
  v93[0] = 0x3F8000003F800000;
  v93[1] = 1065353216;
  v93[2] = 0;
  v93[3] = 0x3F80000000000000;
  v93[4] = 0;
  v93[5] = 0;
  v94 = 0;
  v75 = re::BindPoint::supportsOverrideValue(v5);
  if (v75)
  {
    v74 = (_QWORD *)re::BindPoint::baseValueUntyped(v5);
  }
  else
  {
    v94 = 1;
    v74 = v93;
  }
  if (*(_BYTE *)(v4 + 112))
  {
    v7 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)(v4 + 176) = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(v4 + 192) = v7;
    v8 = *(__n128 *)(v4 + 160);
    *(__n128 *)(v4 + 208) = v8;
  }
  else
  {
    v8 = *(__n128 *)v74;
    v9 = *((_OWORD *)v74 + 2);
    *(_OWORD *)(v4 + 192) = *((_OWORD *)v74 + 1);
    *(_OWORD *)(v4 + 208) = v9;
    *(__n128 *)(v4 + 176) = v8;
  }
  v88.i64[0] = 0x3F8000003F800000;
  v88.i64[1] = 1065353216;
  v89.i64[0] = 0;
  v89.i64[1] = 0x3F80000000000000;
  v92 = 0;
  v90 = 0uLL;
  v91 = 0;
  v83.i64[0] = 0x3F8000003F800000;
  v83.i64[1] = 1065353216;
  v84.i64[0] = 0;
  v84.i64[1] = 0x3F80000000000000;
  v87 = 0;
  v85 = 0uLL;
  v86 = 0;
  if (!*(_QWORD *)(v4 + 72))
    goto LABEL_95;
  v73 = v5;
  v3 = 0;
  v78 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 16);
  v11 = (float32x4_t *)(v4 + 176);
  v79 = v74;
  v80 = 0;
  v81 = 0;
  v76 = v75;
  while (1)
  {
    v12 = *(_QWORD *)(v4 + 72);
    if (v12 <= v3)
    {
      v82 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v95 = 136315906;
      v96 = "operator[]";
      v97 = 1024;
      v98 = 789;
      v99 = 2048;
      v100 = v3;
      v101 = 2048;
      v102 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      v82 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v95 = 136315906;
      v96 = "operator[]";
      v97 = 1024;
      v98 = 789;
      v99 = 2048;
      v100 = v3;
      v101 = 2048;
      v102 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v82 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v95 = 136315906;
      v96 = "operator[]";
      v97 = 1024;
      v98 = 476;
      v99 = 2048;
      v100 = v12;
      v101 = 2048;
      v102 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_91:
      v82 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v95 = 136315906;
      v96 = "operator[]";
      v97 = 1024;
      v98 = 476;
      v99 = 2048;
      v100 = v12;
      v101 = 2048;
      v102 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      v82 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v95 = 136315906;
      v96 = "operator[]";
      v97 = 1024;
      v98 = 476;
      v99 = 2048;
      v100 = v12;
      v101 = 2048;
      v102 = (unint64_t)v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_93;
    }
    if (v10 != *(_DWORD *)(*(_QWORD *)(v4 + 88) + 24 * v3 + 16))
    {
      if (v78)
      {
        v8 = (__n128)re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v88, v11, v11);
        v78 = 0;
        v12 = *(_QWORD *)(v4 + 72);
      }
      else
      {
        v78 = 0;
      }
    }
    if (v12 <= v3)
      goto LABEL_88;
    v13 = *(_QWORD *)(v4 + 88);
    v14 = (int *)(v13 + 24 * v3);
    v10 = v14[4];
    v15 = *(_QWORD **)v14;
    v12 = v14[2];
    v1 = *(_QWORD *)(*(_QWORD *)v14 + 56);
    v16 = v12 + 1;
    if (v1 <= v12 + 1)
      v17 = v12 + 1;
    else
      v17 = *(_QWORD *)(*(_QWORD *)v14 + 56);
    do
    {
      if (v17 == v16)
        goto LABEL_24;
      v2 = v15[1];
      if (v2 <= v16)
      {
        v82 = 0;
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        v103 = 0u;
        v4 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v95 = 136315906;
        v96 = "operator[]";
        v97 = 1024;
        v98 = 476;
        v99 = 2048;
        v100 = v16;
        v101 = 2048;
        v102 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_82;
      }
      v18 = *(_DWORD *)(v15[2] + 4 * v16++);
    }
    while (v18 >= (int)v12);
    LODWORD(v17) = v16 - 1;
LABEL_24:
    if (v1 <= v12)
      goto LABEL_89;
    v19 = v17 - v12;
    if (!v19)
      goto LABEL_90;
    v1 = v15[16];
    if (v1 <= v12)
      goto LABEL_91;
    v2 = v19;
    v1 = v15[8];
    v20 = (_BYTE *)(v1 + 72 * (int)v12);
    v21 = *(_BYTE **)(v15[17] + 8 * v12);
    if (!v20[16])
      goto LABEL_47;
    v22 = v11;
    v11 = (float32x4_t *)v15[13];
    if ((unint64_t)v11 <= v12)
      goto LABEL_92;
    v23 = *(float *)(v15[14] + 4 * v12);
    v8.n128_f32[0] = fabsf(v23);
    if (v8.n128_f32[0] < 0.00001)
    {
      v11 = v22;
      goto LABEL_48;
    }
    v11 = v22;
    if (v23 != 1.0)
    {
      v8.n128_f32[0] = (float)((float)(v8.n128_f32[0] + 1.0) + 1.0) * 0.00001;
      if (fabsf(v23 + -1.0) >= v8.n128_f32[0])
      {
        if (!(_BYTE)v86)
          LOBYTE(v86) = 1;
        v39 = v80;
        if (v78)
        {
          v11 = &v83;
          v8 = (__n128)re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v88, v22, &v83);
        }
        (*(void (**)(_BYTE *, _BYTE *, unint64_t, float32x4_t *, _QWORD **, float32x4_t *, __n128))(*(_QWORD *)v21 + 96))(v21, v20, v2, v11, &v79, &v83, v8);
        if (v80 != v39)
          goto LABEL_86;
        if (v21[72])
        {
          v40 = *(int **)(v4 + 72);
          if ((unint64_t)v40 <= v3)
            goto LABEL_97;
          v11 = v22;
          if ((*(_BYTE *)(*(_QWORD *)(v4 + 88) + 24 * v3 + 20) & 4) == 0)
          {
            if (v78)
              re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v88, v22, v22);
            v41 = &v83;
            v42 = &v83;
            v43 = v22;
LABEL_75:
            re::AnimationValueTraits<re::GenericSRT<float>>::combine(v41, v43, v42);
            goto LABEL_76;
          }
          re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v83, v22, &v83);
        }
        else
        {
          v11 = v22;
        }
        if (v78)
        {
          v41 = &v88;
          v43 = v11;
          v42 = v11;
          goto LABEL_75;
        }
LABEL_76:
        re::lerp<float>(v11, &v83, &v103, v23);
        v78 = 0;
        v52 = v104;
        *v11 = v103;
        v11[1] = v52;
        v8 = v105;
        v11[2] = (float32x4_t)v105;
        goto LABEL_48;
      }
    }
    *(_BYTE *)(v13 + 24 * v3 + 20) &= ~4u;
    if (v21[72])
      break;
    v81 = 1;
LABEL_47:
    (*(void (**)(_BYTE *, unint64_t, _QWORD, float32x4_t *, _QWORD **, float32x4_t *))(*(_QWORD *)v21 + 96))(v21, v1 + 72 * (int)v12, v19, v11, &v79, v11);
LABEL_48:
    if (++v3 == v77)
    {
      if (v78)
        re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v88, v11, v11);
      v53 = *(float32x4_t *)(v4 + 192);
      v54 = (int8x16_t)vmulq_f32(v53, v53);
      *(float32x2_t *)v54.i8 = vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
      v54.i32[0] = vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1)).u32[0];
      v55 = vrsqrte_f32((float32x2_t)v54.u32[0]);
      v56 = vmul_f32(v55, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(v55, v55)));
      *(float32x4_t *)(v4 + 192) = vmulq_n_f32(v53, vmul_f32(v56, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(v56, v56))).f32[0]);
      return;
    }
  }
  if (!(_BYTE)v86)
    LOBYTE(v86) = 1;
  if (v78)
  {
    v22 = &v83;
    v8 = (__n128)re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v88, v11, &v83);
  }
  (*(void (**)(_BYTE *, unint64_t, unint64_t, float32x4_t *, _QWORD **, float32x4_t *, __n128))(*(_QWORD *)v21 + 96))(v21, v1 + 72 * (int)v12, v2, v22, &v79, &v83, v8);
  if (!v75)
  {
LABEL_42:
    if (!(_BYTE)v91)
      LOBYTE(v91) = 1;
    if (v78)
    {
      _Q1 = (int32x4_t)v89;
      v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q1, _Q1), (int8x16_t)v89, 0xCuLL);
      v26 = vnegq_f32(v89);
      v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL), v26), v84, v25);
      v28 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL), v84, v89, 3), v89, v84, 3);
      _S3 = v84.i32[3];
      __asm { FMLA            S7, S3, V1.S[3] }
      v28.i32[3] = _S7;
      v35 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v85, v85), (int8x16_t)v85, 0xCuLL), v26), (float32x4_t)v85, v25);
      v36 = (int32x4_t)vaddq_f32(v35, v35);
      v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL);
      v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), v26), v37, v25);
      v8 = (__n128)vaddq_f32(v90, vmulq_f32(v88, vaddq_f32(vaddq_f32((float32x4_t)v85, vmulq_laneq_f32(v37, v89, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL))));
      v88 = vmulq_f32(v88, v83);
      v89 = v28;
    }
    else
    {
      v88 = v83;
      v89 = v84;
      v8 = (__n128)v85;
    }
    v90 = (float32x4_t)v8;
    if ((v76 & 1) != 0)
    {
      v44 = *(int **)(v4 + 72);
      if ((unint64_t)v44 <= v3)
        goto LABEL_94;
      v76 = 0;
      v78 = 1;
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 88) + 24 * v3 + 20) & 2) != 0 && *v20 == 5)
      {
        re::AnimationValueTraits<re::GenericSRT<float>>::combine(&v88, v11, v11);
        v45 = *(float32x4_t *)(v4 + 192);
        v46 = (int8x16_t)vmulq_f32(v45, v45);
        *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
        v46.i32[0] = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
        v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
        v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
        *(float32x4_t *)(v4 + 192) = vmulq_n_f32(v45, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]);
        v49 = (float32x4_t *)re::BindPoint::baseValueUntyped(v73);
        if (v49)
        {
          v50 = *v11;
          v51 = v11[2];
          v49[1] = v11[1];
          v49[2] = v51;
          *v49 = v50;
          re::BindPoint::markAsWritten((uint64_t)v73);
        }
        v40 = *(int **)(v4 + 72);
        if ((unint64_t)v40 <= v3)
          goto LABEL_96;
        v78 = 0;
        *(_BYTE *)(*(_QWORD *)(v4 + 88) + 24 * v3 + 20) &= ~2u;
        v76 = 1;
        *v20 = 1;
      }
    }
    else
    {
      v76 = 0;
      v78 = 1;
    }
    goto LABEL_48;
  }
  v2 = *(_QWORD *)(v4 + 72);
  if (v2 <= v3)
  {
LABEL_93:
    v82 = 0;
    v44 = &v95;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v95 = 136315906;
    v96 = "operator[]";
    v97 = 1024;
    v98 = 789;
    v99 = 2048;
    v100 = v3;
    v101 = 2048;
    v102 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    v82 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v95 = 136315906;
    v96 = "operator[]";
    v97 = 1024;
    v98 = 789;
    v99 = 2048;
    v100 = v3;
    v101 = 2048;
    v102 = (unint64_t)v44;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    v79 = 0;
    v40 = &v95;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v95 = 136315906;
    v96 = "operator[]";
    v97 = 1024;
    v98 = 789;
    v99 = 2048;
    v100 = 0;
    v101 = 2048;
    v102 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    v82 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v95 = 136315906;
    v96 = "operator[]";
    v97 = 1024;
    v98 = 789;
    v99 = 2048;
    v100 = v3;
    v101 = 2048;
    v102 = (unint64_t)v40;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_97:
    v82 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v95 = 136315906;
    v96 = "operator[]";
    v97 = 1024;
    v98 = 789;
    v99 = 2048;
    v100 = v3;
    v101 = 2048;
    v102 = (unint64_t)v40;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_98:
    v82 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v95 = 136315906;
    v96 = "operator[]";
    v97 = 1024;
    v98 = 789;
    v99 = 2048;
    v100 = v3;
    v101 = 2048;
    v102 = (unint64_t)v40;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 88) + 24 * v3 + 20) & 1) == 0 || !*(_BYTE *)(v1 + 72 * (int)v12 + 32))
    goto LABEL_42;
LABEL_82:
  __asm { FMOV            V3.4S, #1.0 }
  v58 = vdivq_f32(_Q3, v83);
  v59 = (int32x4_t)vnegq_f32(v84);
  v60 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL);
  v59.i32[3] = v84.i32[3];
  v61 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v85, v85), (int8x16_t)v85, 0xCuLL), v84), (float32x4_t)v85, v60);
  v62 = (int32x4_t)vaddq_f32(v61, v61);
  v63 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v62, v62), (int8x16_t)v62, 0xCuLL);
  v64 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL), v84), v63, v60);
  v65 = vmulq_f32(vaddq_f32(vaddq_f32((float32x4_t)v85, vmulq_laneq_f32(v63, v84, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v64, v64), (int8x16_t)v64, 0xCuLL)), vnegq_f32(v58));
  *(float32x4_t *)(v4 + 176) = v58;
  *(int32x4_t *)(v4 + 192) = v59;
  *(float32x4_t *)(v4 + 208) = v65;
  re::AnimationValueTraits<re::GenericSRT<float>>::combine(v11, (float32x4_t *)v74, v11);
  v66 = *(float32x4_t *)(v4 + 192);
  v67 = (int8x16_t)vmulq_f32(v66, v66);
  *(float32x2_t *)v67.i8 = vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
  v67.i32[0] = vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1)).u32[0];
  v68 = vrsqrte_f32((float32x2_t)v67.u32[0]);
  v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v68, v68)));
  *(float32x4_t *)(v4 + 192) = vmulq_n_f32(v66, vmul_f32(v69, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v69, v69))).f32[0]);
  v70 = (float32x4_t *)re::BindPoint::baseValueUntyped(v73);
  if (v70)
  {
    v71 = *v11;
    v72 = v11[2];
    v70[1] = v11[1];
    v70[2] = v72;
    *v70 = v71;
    re::BindPoint::markAsWritten((uint64_t)v73);
  }
  v40 = *(int **)(v4 + 72);
  if ((unint64_t)v40 <= v3)
    goto LABEL_98;
  *(_BYTE *)(*(_QWORD *)(v4 + 88) + 24 * v3 + 20) &= ~1u;
LABEL_86:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
}

float32x4_t re::AnimationValueTraits<re::GenericSRT<float>>::combine(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t result;

  _Q1 = a2[1];
  _Q3 = a1[1];
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL);
  v6 = vnegq_f32(_Q1);
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), (int8x16_t)_Q3, 0xCuLL), v6), _Q3, v5);
  v8 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL), _Q3, _Q1, 3), _Q1, _Q3, 3);
  _Q3.i32[0] = _Q3.i32[3];
  __asm { FMLA            S7, S3, V1.S[3] }
  v8.i32[3] = _S7;
  v14 = a1[2];
  v15 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), v6), v14, v5);
  v16 = (int32x4_t)vaddq_f32(v15, v15);
  v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  v18 = vaddq_f32(v14, vmulq_laneq_f32(v17, _Q1, 3));
  v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v6), v17, v5);
  result = vaddq_f32(a2[2], vmulq_f32(*a2, vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL))));
  *a3 = vmulq_f32(*a2, *a1);
  a3[1] = v8;
  a3[2] = result;
  return result;
}

float32x4_t *re::internal::AnimationCompositionChain<re::GenericSRT<float>>::apply(float32x4_t *a1)
{
  float32x4_t *v2;
  float32x4_t *result;
  __int128 *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  v2 = (float32x4_t *)&a1->u32[2];
  result = (float32x4_t *)re::BindPoint::isAlive((re::BindPoint *)&a1->u32[2]);
  if ((_DWORD)result)
  {
    if (a1[4].i64[1])
    {
      return re::BindPoint::setValue<re::GenericSRT<float>>(v2, a1 + 11);
    }
    else
    {
      if (a1[6].i8[8] && re::BindPoint::isOverridden((re::BindPoint *)v2))
      {
        v4 = (__int128 *)re::BindPoint::overrideValueUntyped((re::BindPoint *)v2);
        v5 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v2);
        if (v5)
        {
          v6 = *v4;
          v7 = v4[2];
          v5[1] = v4[1];
          v5[2] = v7;
          *v5 = v6;
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      return (float32x4_t *)re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
  return result;
}

float32x4_t *re::BindPoint::setValue<re::GenericSRT<float>>(float32x4_t *result, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint32x4_t v15;
  uint32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  _QWORD v23[2];
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = result[1].i64[1];
  if (v2)
  {
    v4 = (uint64_t *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = v4[3];
    do
    {
      if (v10 == v9)
      {
        v23[1] = 0;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v32 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 797;
        v28 = 2048;
        v29 = v10;
        v30 = 2048;
        v31 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(v4[5] + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float32x4_t *)v13;
      result = (float32x4_t *)re::BindPoint::isOverridden((re::BindPoint *)v4);
      if (!(_DWORD)result
        || (v15 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v14, *a2)),
            v15.i32[3] = v15.i32[2],
            (vmaxvq_u32(v15) & 0x80000000) != 0)
        || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v14[1], a2[1]))) & 0x80000000) != 0
        || (v16 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v14[2], a2[2])),
            v16.i32[3] = v16.i32[2],
            (vmaxvq_u32(v16) & 0x80000000) != 0))
      {
        v17 = *a2;
        v18 = a2[2];
        v14[1] = a2[1];
        v14[2] = v18;
        *v14 = v17;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (float32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        v19 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*result, *a2));
        v19.i32[3] = v19.i32[2];
        if ((vmaxvq_u32(v19) & 0x80000000) != 0
          || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(result[1], a2[1]))) & 0x80000000) != 0
          || (v20 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(result[2], a2[2])),
              v20.i32[3] = v20.i32[2],
              (vmaxvq_u32(v20) & 0x80000000) != 0))
        {
          v21 = *a2;
          v22 = a2[2];
          result[1] = a2[1];
          result[2] = v22;
          *result = v21;
          return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::AnimationCompositionChain<re::GenericSRT<float>>::takeSnapshot(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v1 = result;
  if (*(_QWORD *)(result + 72))
  {
    if (!*(_BYTE *)(result + 112))
      *(_BYTE *)(result + 112) = 1;
    v2 = *(_OWORD *)(result + 192);
    *(_OWORD *)(result + 128) = *(_OWORD *)(result + 176);
    *(_OWORD *)(result + 144) = v2;
    v3 = *(_OWORD *)(result + 208);
    goto LABEL_14;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(result + 8)))
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 128) = 0x3F8000003F800000;
      *(_QWORD *)(v1 + 136) = 1065353216;
      *(_QWORD *)(v1 + 144) = 0;
      *(_QWORD *)(v1 + 152) = 0x3F80000000000000;
      *(_QWORD *)(v1 + 160) = 0;
      *(_QWORD *)(v1 + 168) = 0;
    }
    result = re::BindPoint::baseValueUntyped((re::BindPoint *)(v1 + 8));
LABEL_13:
    v4 = *(_OWORD *)(result + 16);
    v3 = *(_OWORD *)(result + 32);
    *(_OWORD *)(v1 + 128) = *(_OWORD *)result;
    *(_OWORD *)(v1 + 144) = v4;
LABEL_14:
    *(_OWORD *)(v1 + 160) = v3;
    return result;
  }
  result = re::BindPoint::isAlive((re::BindPoint *)(v1 + 8));
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v1 + 112))
    {
      *(_BYTE *)(v1 + 112) = 1;
      *(_QWORD *)(v1 + 128) = 0x3F8000003F800000;
      *(_QWORD *)(v1 + 136) = 1065353216;
      *(_QWORD *)(v1 + 144) = 0;
      *(_QWORD *)(v1 + 152) = 0x3F80000000000000;
      *(_QWORD *)(v1 + 160) = 0;
      *(_QWORD *)(v1 + 168) = 0;
    }
    result = re::BindPoint::valueUntyped((re::BindPoint *)(v1 + 8));
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  return result;
}

void re::internal::AnimationCompositionChain<re::SkeletalPose>::~AnimationCompositionChain(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24ED1EE18;
  re::internal::AnimationCompositionChain<re::SkeletalPose>::deinit((_QWORD *)a1);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 208));
  if (*(_BYTE *)(a1 + 112))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 120));
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase((re::internal::AnimationCompositionChainBase *)a1);
}

{
  re::internal::AnimationCompositionChain<re::SkeletalPose>::~AnimationCompositionChain(a1);
  JUMPOUT(0x2276933B8);
}

void re::internal::AnimationCompositionChain<re::SkeletalPose>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  v5 = (uint64_t *)(re::BindPoint::baseValueUntyped((re::BindPoint *)a2) + 80);
  re::SkeletalPose::init((uint64_t *)(v3 + 152), v5);
}

_QWORD *re::internal::AnimationCompositionChain<re::SkeletalPose>::deinit(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = result + 7;
  if (result[7])
  {
    v2 = result;
    re::internal::AnimationCompositionChain<re::SkeletalPose>::clearSnapshot((uint64_t)result);
    re::SkeletalPose::deinit((re::SkeletalPose *)(v2 + 26));
    result = (_QWORD *)v2[7];
    if (result)
    {
      if (v2[11])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v2[11] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v2 + 20);
    }
  }
  return result;
}

void re::internal::AnimationCompositionChain<re::SkeletalPose>::clearSnapshot(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)(a1 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
    re::SkeletalPose::deinit((re::SkeletalPose *)(a1 + 120));
    LOBYTE(v2) = 0;
    re::Optional<re::SkeletalPose>::operator=(v1, &v2);
    if ((_BYTE)v2)
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v3);
  }
}

void re::internal::AnimationCompositionChain<re::SkeletalPose>::update(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  re::BindPoint *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  float v26;
  float v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  re::BindPoint *v40;
  uint64_t *v41;
  int v42;
  char v43;
  int *v44;
  int v45;
  uint64_t *v46;
  int v47;
  char v48;
  uint64_t v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int *v75;
  __int16 v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    return;
  v2 = a1;
  v3 = (re::BindPoint *)(a1 + 8);
  if (!re::BindPoint::isAlive((re::BindPoint *)(a1 + 8)))
    return;
  v65 = 0;
  v66 = 0;
  v63 = 0u;
  v64 = 0u;
  v61[0] = 0;
  v62 = 0u;
  v61[1] = (uint64_t)&str_110;
  v67 = 0;
  v68 = 0;
  v40 = v3;
  v42 = re::BindPoint::supportsOverrideValue(v3);
  if (v42)
  {
    v4 = (uint64_t *)re::BindPoint::baseValueUntyped(v3);
  }
  else
  {
    v4 = v61;
    re::SkeletalPose::init(v61, (uint64_t *)(v2 + 288));
    v68 = 1;
    if (*((_QWORD *)&v62 + 1))
    {
      v5 = (_QWORD *)v63;
      v6 = (_QWORD *)(v63 + 48 * *((_QWORD *)&v62 + 1));
      do
      {
        *v5 = 0x3F8000003F800000;
        v5[1] = 1065353216;
        v5[2] = 0;
        v5[3] = 0x3F80000000000000;
        v5[4] = 0;
        v5[5] = 0;
        v5 += 6;
      }
      while (v5 != v6);
      v4 = v61;
    }
  }
  v7 = &v70;
  if (*(_BYTE *)(v2 + 112))
    v8 = (uint64_t *)(v2 + 120);
  else
    v8 = v4;
  v9 = (uint64_t *)(v2 + 208);
  re::AnimationValueTraits<re::SkeletalPose>::copy(v8, (_QWORD *)(v2 + 208));
  v11 = 0uLL;
  v57 = 0u;
  v58 = 0u;
  v55[0] = 0;
  v56 = 0u;
  v55[1] = (uint64_t)&str_110;
  v59 = 0uLL;
  v60 = 0uLL;
  v51 = 0u;
  v52 = 0u;
  v49[0] = 0;
  v50 = 0u;
  v49[1] = (uint64_t)&str_110;
  v53 = 0uLL;
  v54 = 0uLL;
  if (!*(_QWORD *)(v2 + 72))
    goto LABEL_101;
  v7 = 0;
  v45 = 0;
  v12 = *(_DWORD *)(*(_QWORD *)(v2 + 88) + 16);
  v46 = v4;
  v47 = 0;
  v48 = 0;
  v41 = (uint64_t *)(v2 + 288);
  v37 = v4;
  v38 = v2 + 224;
  v39 = (uint64_t *)(v2 + 248);
  if (v1 <= 1)
    v13 = 1;
  else
    v13 = v1;
  v44 = (int *)v13;
  v43 = v42;
  while (1)
  {
    v1 = *(_QWORD *)(v2 + 72);
    if (v1 <= (unint64_t)v7)
    {
      v69 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v70 = 136315906;
      v71 = "operator[]";
      v72 = 1024;
      v73 = 789;
      v74 = 2048;
      v75 = v7;
      v76 = 2048;
      v77 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      v69 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v70 = 136315906;
      v71 = "operator[]";
      v72 = 1024;
      v73 = 789;
      v74 = 2048;
      v75 = v7;
      v76 = 2048;
      v77 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      v69 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v70 = 136315906;
      v71 = "operator[]";
      v72 = 1024;
      v73 = 476;
      v74 = 2048;
      v75 = (int *)v1;
      v76 = 2048;
      v77 = (unint64_t)v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v37);
      _os_crash();
      __break(1u);
LABEL_97:
      v69 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v70 = 136315906;
      v71 = "operator[]";
      v72 = 1024;
      v73 = 476;
      v74 = 2048;
      v75 = (int *)v1;
      v76 = 2048;
      v77 = (unint64_t)v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      v69 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v70 = 136315906;
      v71 = "operator[]";
      v72 = 1024;
      v73 = 476;
      v74 = 2048;
      v75 = (int *)v1;
      v76 = 2048;
      v77 = (unint64_t)v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_99;
    }
    if (v12 != *(_DWORD *)(*(_QWORD *)(v2 + 88) + 24 * (_QWORD)v7 + 16))
    {
      if (v45)
      {
        re::AnimationValueTraits<re::SkeletalPose>::combine(v55, (_QWORD *)(v2 + 208), (_QWORD *)(v2 + 208));
        v45 = 0;
        v1 = *(_QWORD *)(v2 + 72);
      }
      else
      {
        v45 = 0;
      }
    }
    if (v1 <= (unint64_t)v7)
      goto LABEL_94;
    v14 = *(_QWORD *)(v2 + 88);
    v15 = (int *)(v14 + 24 * (_QWORD)v7);
    v12 = v15[4];
    v16 = *(_QWORD **)v15;
    v1 = v15[2];
    v4 = *(uint64_t **)(*(_QWORD *)v15 + 56);
    v17 = v1 + 1;
    if ((unint64_t)v4 <= v1 + 1)
      v18 = v1 + 1;
    else
      v18 = *(_QWORD *)(*(_QWORD *)v15 + 56);
    do
    {
      if (v18 == v17)
        goto LABEL_30;
      v19 = v16[1];
      if (v19 <= v17)
      {
        v69 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        v2 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v70 = 136315906;
        v71 = "operator[]";
        v72 = 1024;
        v73 = 476;
        v74 = 2048;
        v75 = (int *)v17;
        v76 = 2048;
        v77 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_88;
      }
      v20 = *(_DWORD *)(v16[2] + 4 * v17++);
    }
    while (v20 >= (int)v1);
    LODWORD(v18) = v17 - 1;
LABEL_30:
    if ((unint64_t)v4 <= v1)
      goto LABEL_95;
    v21 = v18 - v1;
    if (!v21)
      goto LABEL_96;
    v4 = (uint64_t *)v16[16];
    if ((unint64_t)v4 <= v1)
      goto LABEL_97;
    v22 = v21;
    v23 = v16[8];
    v24 = (_BYTE *)(v23 + 72 * (int)v1);
    v25 = *(_BYTE **)(v16[17] + 8 * v1);
    if (!v24[16])
      goto LABEL_53;
    v4 = (uint64_t *)v16[13];
    if ((unint64_t)v4 <= v1)
      goto LABEL_98;
    v26 = *(float *)(v16[14] + 4 * v1);
    v27 = fabsf(v26);
    if (v27 < 0.00001)
    {
      re::AnimationValueTraits<re::SkeletalPose>::copy((_QWORD *)(v2 + 208), (_QWORD *)(v2 + 208));
      goto LABEL_54;
    }
    if (v26 != 1.0 && fabsf(v26 + -1.0) >= (float)((float)((float)(v27 + 1.0) + 1.0) * 0.00001))
    {
      if (!BYTE8(v54))
      {
        re::SkeletalPose::init(v49, v41);
        BYTE8(v54) = 1;
      }
      v28 = v47;
      v4 = (uint64_t *)(v2 + 208);
      if (v45)
      {
        v4 = v49;
        re::AnimationValueTraits<re::SkeletalPose>::combine(v55, (_QWORD *)(v2 + 208), v49);
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t *, uint64_t **, uint64_t *))(*(_QWORD *)v25 + 96))(v25, v24, v22, v4, &v46, v49);
      if (v47 != v28)
        goto LABEL_92;
      if (v25[72])
      {
        v1 = *(_QWORD *)(v2 + 72);
        if (v1 <= (unint64_t)v7)
          goto LABEL_103;
        if ((*(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * (_QWORD)v7 + 20) & 4) == 0)
        {
          if (v45)
            re::AnimationValueTraits<re::SkeletalPose>::combine(v55, (_QWORD *)(v2 + 208), (_QWORD *)(v2 + 208));
          v29 = v49;
          v30 = v49;
          v31 = (_QWORD *)(v2 + 208);
LABEL_81:
          re::AnimationValueTraits<re::SkeletalPose>::combine(v29, v31, v30);
          goto LABEL_82;
        }
        re::AnimationValueTraits<re::SkeletalPose>::combine(v49, (_QWORD *)(v2 + 208), v49);
      }
      if (v45)
      {
        v29 = v55;
        v31 = (_QWORD *)(v2 + 208);
        v30 = (uint64_t *)(v2 + 208);
        goto LABEL_81;
      }
LABEL_82:
      re::AnimationValueTraits<re::SkeletalPose>::interpolate((_QWORD *)(v2 + 208), v49, (_QWORD *)(v2 + 208), v26);
      v45 = 0;
      goto LABEL_54;
    }
    *(_BYTE *)(v14 + 24 * (_QWORD)v7 + 20) &= ~4u;
    if (v25[72])
      break;
    v48 = 1;
LABEL_53:
    (*(void (**)(_BYTE *, uint64_t, _QWORD, uint64_t, uint64_t **, uint64_t))(*(_QWORD *)v25 + 96))(v25, v23 + 72 * (int)v1, v21, v2 + 208, &v46, v2 + 208);
LABEL_54:
    v7 = (int *)((char *)v7 + 1);
    if (v7 == v44)
    {
      if (v45)
        re::AnimationValueTraits<re::SkeletalPose>::combine(v55, (_QWORD *)(v2 + 208), (_QWORD *)(v2 + 208));
      goto LABEL_85;
    }
  }
  if (!BYTE8(v54))
  {
    re::SkeletalPose::init(v49, v41);
    BYTE8(v54) = 1;
  }
  v4 = (uint64_t *)(v2 + 208);
  if (v45)
  {
    v4 = v49;
    re::AnimationValueTraits<re::SkeletalPose>::combine(v55, (_QWORD *)(v2 + 208), v49);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t *, uint64_t **, uint64_t *))(*(_QWORD *)v25 + 96))(v25, v23 + 72 * (int)v1, v22, v4, &v46, v49);
  if (!v42)
  {
LABEL_48:
    if (!BYTE8(v60))
    {
      re::SkeletalPose::init(v55, v41);
      BYTE8(v60) = 1;
    }
    if (v45)
      re::AnimationValueTraits<re::SkeletalPose>::combine(v49, v55, v55);
    else
      re::AnimationValueTraits<re::SkeletalPose>::copy(v49, v55);
    if ((v43 & 1) != 0)
    {
      v1 = *(_QWORD *)(v2 + 72);
      if (v1 <= (unint64_t)v7)
        goto LABEL_100;
      v43 = 0;
      v45 = 1;
      if ((*(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * (_QWORD)v7 + 20) & 2) != 0 && *v24 == 5)
      {
        re::AnimationValueTraits<re::SkeletalPose>::combine(v55, (_QWORD *)(v2 + 208), (_QWORD *)(v2 + 208));
        v32 = (unint64_t *)re::BindPoint::baseValueUntyped(v40);
        if (v32)
        {
          v4 = (uint64_t *)v32;
          v33 = re::StringID::operator=(v32, (uint64_t *)(v2 + 208));
          re::FixedArray<re::GenericSRT<float>>::operator=(v33 + 2, v38);
          re::DynamicArray<BOOL>::operator=((uint64_t)(v4 + 5), v39);
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v4 + 10, *v41);
          re::BindPoint::markAsWritten((uint64_t)v40);
        }
        v1 = *(_QWORD *)(v2 + 72);
        if (v1 <= (unint64_t)v7)
          goto LABEL_102;
        v45 = 0;
        *(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * (_QWORD)v7 + 20) &= ~2u;
        v43 = 1;
        *v24 = 1;
      }
    }
    else
    {
      v43 = 0;
      v45 = 1;
    }
    goto LABEL_54;
  }
  v4 = *(uint64_t **)(v2 + 72);
  if (v4 <= (uint64_t *)v7)
  {
LABEL_99:
    v69 = 0;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    v71 = "operator[]";
    v72 = 1024;
    v73 = 789;
    v74 = 2048;
    v75 = v7;
    v76 = 2048;
    v77 = (unint64_t)v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_100:
    v69 = 0;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    v71 = "operator[]";
    v72 = 1024;
    v73 = 789;
    v74 = 2048;
    v75 = v7;
    v76 = 2048;
    v77 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    v46 = 0;
    v81 = v11;
    v82 = v11;
    v79 = v11;
    v80 = v11;
    v78 = v11;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    *(_QWORD *)(v7 + 1) = "operator[]";
    v72 = 1024;
    *(int *)((char *)v7 + 14) = 789;
    v74 = 2048;
    *(_QWORD *)(v7 + 5) = 0;
    v76 = 2048;
    *(_QWORD *)((char *)v7 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    v69 = 0;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    v71 = "operator[]";
    v72 = 1024;
    v73 = 789;
    v74 = 2048;
    v75 = v7;
    v76 = 2048;
    v77 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    v69 = 0;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    v71 = "operator[]";
    v72 = 1024;
    v73 = 789;
    v74 = 2048;
    v75 = v7;
    v76 = 2048;
    v77 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    v69 = 0;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    v71 = "operator[]";
    v72 = 1024;
    v73 = 789;
    v74 = 2048;
    v75 = v7;
    v76 = 2048;
    v77 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * (_QWORD)v7 + 20) & 1) == 0 || !*(_BYTE *)(v23 + 72 * (int)v1 + 32))
    goto LABEL_48;
LABEL_88:
  re::AnimationValueTraits<re::SkeletalPose>::invert(v49, v9);
  re::AnimationValueTraits<re::SkeletalPose>::combine(v9, v37, v9);
  v34 = (unint64_t *)re::BindPoint::baseValueUntyped(v40);
  if (v34)
  {
    v35 = v34;
    v36 = re::StringID::operator=(v34, v9);
    re::FixedArray<re::GenericSRT<float>>::operator=(v36 + 2, v38);
    re::DynamicArray<BOOL>::operator=((uint64_t)(v35 + 5), v39);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v35 + 10, *v41);
    re::BindPoint::markAsWritten((uint64_t)v40);
  }
  v1 = *(_QWORD *)(v2 + 72);
  if (v1 <= (unint64_t)v7)
    goto LABEL_104;
  *(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * (_QWORD)v7 + 20) &= ~1u;
LABEL_92:
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_85:
  re::internal::ValueWrapper<re::SkeletalPose>::~ValueWrapper((re::SkeletalPose *)v49);
  re::internal::ValueWrapper<re::SkeletalPose>::~ValueWrapper((re::SkeletalPose *)v55);
  re::internal::ValueWrapper<re::SkeletalPose>::~ValueWrapper((re::SkeletalPose *)v61);
}

uint64_t re::internal::AnimationCompositionChain<re::SkeletalPose>::apply(uint64_t a1)
{
  re::BindPoint *v2;
  uint64_t result;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;

  v2 = (re::BindPoint *)(a1 + 8);
  result = re::BindPoint::isAlive((re::BindPoint *)(a1 + 8));
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      return re::BindPoint::setValue<re::SkeletalPose>((uint64_t)v2, a1 + 208);
    }
    else
    {
      if (*(_BYTE *)(a1 + 104) && re::BindPoint::isOverridden(v2))
      {
        v4 = (uint64_t *)re::BindPoint::overrideValueUntyped(v2);
        v5 = (unint64_t *)re::BindPoint::baseValueUntyped(v2);
        if (v5)
        {
          v6 = v5;
          v7 = re::StringID::operator=(v5, v4);
          re::FixedArray<re::GenericSRT<float>>::operator=(v7 + 2, (uint64_t)(v4 + 2));
          re::DynamicArray<BOOL>::operator=((uint64_t)(v6 + 5), v4 + 5);
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v6 + 10, v4[10]);
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      return re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
  return result;
}

uint64_t re::BindPoint::setValue<re::SkeletalPose>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  uint64_t *v16;
  _QWORD v17[2];
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v17[1] = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v18 = 136315906;
        v19 = "operator[]";
        v20 = 1024;
        v21 = 797;
        v22 = 2048;
        v23 = v10;
        v24 = 2048;
        v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (_QWORD *)v13;
      if (!re::BindPoint::isOverridden(v4)
        || v14[10] != *(_QWORD *)(a2 + 80)
        || (result = re::FixedArray<re::GenericSRT<float>>::operator==((uint64_t)(v14 + 2), *(_QWORD *)(a2 + 24), *(float32x4_t **)(a2 + 32)), (result & 1) == 0))
      {
        re::StringID::operator=(v14, (uint64_t *)a2);
        re::FixedArray<re::GenericSRT<float>>::operator=(v14 + 2, a2 + 16);
        re::DynamicArray<BOOL>::operator=((uint64_t)(v14 + 5), (uint64_t *)(a2 + 40));
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v14 + 10, *(_QWORD *)(a2 + 80));
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        v15 = (unint64_t *)result;
        v16 = (uint64_t *)(result + 80);
        if (*(_QWORD *)(result + 80) != *(_QWORD *)(a2 + 80)
          || (result = re::FixedArray<re::GenericSRT<float>>::operator==(result + 16, *(_QWORD *)(a2 + 24), *(float32x4_t **)(a2 + 32)), (result & 1) == 0))
        {
          re::StringID::operator=(v15, (uint64_t *)a2);
          re::FixedArray<re::GenericSRT<float>>::operator=(v15 + 2, a2 + 16);
          re::DynamicArray<BOOL>::operator=((uint64_t)(v15 + 5), (uint64_t *)(a2 + 40));
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v16, *(_QWORD *)(a2 + 80));
          return re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

void re::internal::AnimationCompositionChain<re::SkeletalPose>::takeSnapshot(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[88];

  if (*(_QWORD *)(a1 + 72))
  {
    if (!*(_BYTE *)(a1 + 112))
    {
      v8 = 0;
      v9 = 0;
      v6 = 0u;
      v7 = 0u;
      v3 = 0;
      v5 = 0u;
      v4 = &str_110;
      v10 = 0;
      re::Optional<re::SkeletalPose>::Optional((uint64_t)&v11, (uint64_t)&v3);
      re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a1 + 112), &v11);
      if ((_BYTE)v11)
        re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v12);
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v3);
      re::SkeletalPose::init((uint64_t *)(a1 + 120), (uint64_t *)(a1 + 288));
    }
    v2 = (_QWORD *)(a1 + 208);
LABEL_19:
    re::AnimationValueTraits<re::SkeletalPose>::copy(v2, (_QWORD *)(a1 + 120));
    return;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(a1 + 8)))
  {
    if (!*(_BYTE *)(a1 + 112))
    {
      v8 = 0;
      v9 = 0;
      v6 = 0u;
      v7 = 0u;
      v3 = 0;
      v5 = 0u;
      v4 = &str_110;
      v10 = 0;
      re::Optional<re::SkeletalPose>::Optional((uint64_t)&v11, (uint64_t)&v3);
      re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a1 + 112), &v11);
      if ((_BYTE)v11)
        re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v12);
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v3);
      re::SkeletalPose::init((uint64_t *)(a1 + 120), (uint64_t *)(a1 + 288));
    }
    v2 = (_QWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 8));
    goto LABEL_19;
  }
  if (re::BindPoint::isAlive((re::BindPoint *)(a1 + 8)))
  {
    if (!*(_BYTE *)(a1 + 112))
    {
      v8 = 0;
      v9 = 0;
      v6 = 0u;
      v7 = 0u;
      v3 = 0;
      v5 = 0u;
      v4 = &str_110;
      v10 = 0;
      re::Optional<re::SkeletalPose>::Optional((uint64_t)&v11, (uint64_t)&v3);
      re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a1 + 112), &v11);
      if ((_BYTE)v11)
        re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v12);
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v3);
      re::SkeletalPose::init((uint64_t *)(a1 + 120), (uint64_t *)(a1 + 288));
    }
    v2 = (_QWORD *)re::BindPoint::valueUntyped((re::BindPoint *)(a1 + 8));
    goto LABEL_19;
  }
  re::internal::AnimationCompositionChain<re::SkeletalPose>::clearSnapshot(a1);
}

unsigned __int8 *re::Optional<re::SkeletalPose>::operator=(unsigned __int8 *a1, uint64_t *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  unint64_t *v8;
  BOOL v9;
  uint64_t v10;
  id v11;

  v3 = *a1;
  v4 = *(unsigned __int8 *)a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 8));
      *a1 = 0;
    }
    else
    {
      v8 = (unint64_t *)(a1 + 8);
      if (v3)
        v9 = 1;
      else
        v9 = v4 == 0;
      if (v9)
      {
        re::StringID::operator=(v8, a2 + 1);
        re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)a1 + 3, (uint64_t)(a2 + 3));
        re::DynamicArray<BOOL>::operator=((uint64_t)(a1 + 48), a2 + 6);
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)a1 + 11, a2[11]);
      }
      else
      {
        *a1 = 1;
        re::StringID::StringID((re::StringID *)v8, (const StringID *)(a2 + 1));
        re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)a1 + 3, (uint64_t)(a2 + 3));
        re::DynamicArray<BOOL>::DynamicArray((uint64_t)(a1 + 48), a2 + 6);
        v10 = a2[11];
        *((_QWORD *)a1 + 11) = v10;
        if (v10)
          v11 = (id)(v10 + 8);
      }
    }
  }
  return a1;
}

void re::internal::AnimationCompositionChain<re::BlendShapeWeights>::~AnimationCompositionChain(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24ED1EE70;
  re::internal::AnimationCompositionChain<re::BlendShapeWeights>::deinit((_QWORD *)a1);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)(a1 + 152));
  if (*(_BYTE *)(a1 + 112))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)(a1 + 120));
  re::internal::AnimationCompositionChainBase::~AnimationCompositionChainBase((re::internal::AnimationCompositionChainBase *)a1);
}

{
  re::internal::AnimationCompositionChain<re::BlendShapeWeights>::~AnimationCompositionChain(a1);
  JUMPOUT(0x2276933B8);
}

void re::internal::AnimationCompositionChain<re::BlendShapeWeights>::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;

  v3 = a1;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::operator=(a1 + 16, a2 + 1);
  v3 += 56;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  v5 = (uint64_t *)(re::BindPoint::baseValueUntyped((re::BindPoint *)a2) + 24);
  re::BlendShapeWeights::init((uint64_t *)(v3 + 96), v5);
}

_QWORD *re::internal::AnimationCompositionChain<re::BlendShapeWeights>::deinit(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = result + 7;
  if (result[7])
  {
    v2 = result;
    re::internal::AnimationCompositionChain<re::BlendShapeWeights>::clearSnapshot((uint64_t)result);
    re::BlendShapeWeights::deinit((re::BlendShapeWeights *)(v2 + 19));
    result = (_QWORD *)v2[7];
    if (result)
    {
      if (v2[11])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v2[11] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v2 + 20);
    }
  }
  return result;
}

void re::internal::AnimationCompositionChain<re::BlendShapeWeights>::clearSnapshot(uint64_t a1)
{
  uint64_t *v1;
  unsigned __int8 v2[8];
  uint64_t v3;

  v1 = (uint64_t *)(a1 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
    re::BlendShapeWeights::deinit((re::BlendShapeWeights *)(a1 + 120));
    v2[0] = 0;
    re::Optional<re::BlendShapeWeights>::operator=(v1, v2);
    if (v2[0])
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v3);
  }
}

void re::internal::AnimationCompositionChain<re::BlendShapeWeights>::update(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  re::BindPoint *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  float v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  re::BindPoint *v33;
  uint64_t *v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  unsigned int v40;
  char v41;
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  int v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  unint64_t v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v37 = *(_QWORD *)(a1 + 72);
  if (!v37)
    return;
  v2 = a1;
  v3 = (re::BindPoint *)(a1 + 8);
  if (!re::BindPoint::isAlive((re::BindPoint *)(a1 + 8)))
    return;
  v48 = 0;
  v46 = 0u;
  *(_OWORD *)v47 = 0u;
  v35 = re::BindPoint::supportsOverrideValue(v3);
  if (v35)
  {
    v4 = re::BindPoint::baseValueUntyped(v3);
  }
  else
  {
    v4 = (unint64_t)&v46;
    re::BlendShapeWeights::init((uint64_t *)&v46, (uint64_t *)(v2 + 176));
    v48 = 1;
    if (*((_QWORD *)&v46 + 1))
    {
      bzero(v47[0], 4 * *((_QWORD *)&v46 + 1));
      v4 = (unint64_t)&v46;
    }
  }
  v5 = (unint64_t)&v50;
  if (*(_BYTE *)(v2 + 112))
    v6 = (uint64_t *)(v2 + 120);
  else
    v6 = (uint64_t *)v4;
  v7 = (_QWORD *)(v2 + 152);
  re::AnimationValueTraits<re::BlendShapeWeights>::copy(v6, (uint64_t *)(v2 + 152));
  v45 = 0;
  v9 = 0uLL;
  memset(v44, 0, sizeof(v44));
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  if (!*(_QWORD *)(v2 + 72))
    goto LABEL_96;
  v10 = (_QWORD *)v4;
  v4 = 0;
  v38 = 0;
  v11 = *(_DWORD *)(*(_QWORD *)(v2 + 88) + 16);
  v32 = v10;
  v33 = v3;
  v39 = v10;
  v40 = 0;
  v41 = 0;
  v34 = (uint64_t *)(v2 + 176);
  v12 = 24;
  v36 = v35;
  while (1)
  {
    v13 = *(_QWORD *)(v2 + 72);
    if (v13 <= v4)
    {
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 789;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 789;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 476;
      v54 = 2048;
      v55 = v13;
      v56 = 2048;
      v57 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v32);
      _os_crash();
      __break(1u);
LABEL_92:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 476;
      v54 = 2048;
      v55 = v13;
      v56 = 2048;
      v57 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      v49 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 476;
      v54 = 2048;
      v55 = v13;
      v56 = 2048;
      v57 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_94;
    }
    if (v11 != *(_DWORD *)(*(_QWORD *)(v2 + 88) + 24 * v4 + 16))
    {
      if (v38)
      {
        re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, (_QWORD *)(v2 + 152), (_QWORD *)(v2 + 152));
        v38 = 0;
        v13 = *(_QWORD *)(v2 + 72);
      }
      else
      {
        v38 = 0;
      }
    }
    if (v13 <= v4)
      goto LABEL_89;
    v14 = *(_QWORD *)(v2 + 88);
    v15 = (int *)(v14 + 24 * v4);
    v11 = v15[4];
    v16 = *(_QWORD **)v15;
    v13 = v15[2];
    v5 = *(_QWORD *)(*(_QWORD *)v15 + 56);
    v17 = v13 + 1;
    if (v5 <= v13 + 1)
      v18 = v13 + 1;
    else
      v18 = *(_QWORD *)(*(_QWORD *)v15 + 56);
    do
    {
      if (v18 == v17)
        goto LABEL_25;
      v1 = v16[1];
      if (v1 <= v17)
      {
        v49 = 0;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v2 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v50 = 136315906;
        v51 = "operator[]";
        v52 = 1024;
        v53 = 476;
        v54 = 2048;
        v55 = v17;
        v56 = 2048;
        v57 = v1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_83;
      }
      v19 = *(_DWORD *)(v16[2] + 4 * v17++);
    }
    while (v19 >= (int)v13);
    LODWORD(v18) = v17 - 1;
LABEL_25:
    if (v5 <= v13)
      goto LABEL_90;
    v20 = v18 - v13;
    if (!v20)
      goto LABEL_91;
    v5 = v16[16];
    if (v5 <= v13)
      goto LABEL_92;
    v1 = v20;
    v5 = v16[8];
    v21 = (_BYTE *)(v5 + 72 * (int)v13);
    v22 = *(_BYTE **)(v16[17] + 8 * v13);
    if (!v21[16])
      goto LABEL_48;
    v12 = v16[13];
    if (v12 <= v13)
      goto LABEL_93;
    v23 = *(float *)(v16[14] + 4 * v13);
    v9.n128_f32[0] = fabsf(v23);
    v12 = 24;
    if (v9.n128_f32[0] < 0.00001)
    {
      re::AnimationValueTraits<re::BlendShapeWeights>::copy((uint64_t *)(v2 + 152), (uint64_t *)(v2 + 152));
      goto LABEL_49;
    }
    if (v23 != 1.0)
    {
      v9.n128_f32[0] = (float)((float)(v9.n128_f32[0] + 1.0) + 1.0) * 0.00001;
      if (fabsf(v23 + -1.0) >= v9.n128_f32[0])
      {
        if (!(_BYTE)v43)
        {
          re::BlendShapeWeights::init((uint64_t *)v42, v34);
          LOBYTE(v43) = 1;
        }
        v5 = v40;
        v25 = (_OWORD *)(v2 + 152);
        if (v38)
        {
          v25 = v42;
          v9.n128_f32[0] = re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, (_QWORD *)(v2 + 152), v42);
        }
        (*(void (**)(_BYTE *, _BYTE *, unint64_t, _OWORD *, _QWORD **, _OWORD *, __n128))(*(_QWORD *)v22 + 96))(v22, v21, v1, v25, &v39, v42, v9);
        if (v40 != (_DWORD)v5)
          goto LABEL_87;
        if (v22[72])
        {
          v5 = *(_QWORD *)(v2 + 72);
          v12 = 24;
          if (v5 <= v4)
            goto LABEL_98;
          if ((*(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * v4 + 20) & 4) == 0)
          {
            if (v38)
              re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, (_QWORD *)(v2 + 152), (_QWORD *)(v2 + 152));
            v26 = v42;
            v27 = v42;
            v28 = (_QWORD *)(v2 + 152);
LABEL_76:
            re::AnimationValueTraits<re::BlendShapeWeights>::combine(v26, v28, v27);
            goto LABEL_77;
          }
          re::AnimationValueTraits<re::BlendShapeWeights>::combine(v42, (_QWORD *)(v2 + 152), v42);
        }
        else
        {
          v12 = 24;
        }
        if (v38)
        {
          v26 = v44;
          v28 = (_QWORD *)(v2 + 152);
          v27 = (_QWORD *)(v2 + 152);
          goto LABEL_76;
        }
LABEL_77:
        re::AnimationValueTraits<re::BlendShapeWeights>::interpolate((_anonymous_namespace_ *)(v2 + 152), v42, (_QWORD *)(v2 + 152), v23);
        v38 = 0;
        goto LABEL_49;
      }
    }
    *(_BYTE *)(v14 + 24 * v4 + 20) &= ~4u;
    if (v22[72])
      break;
    v41 = 1;
LABEL_48:
    (*(void (**)(_BYTE *, unint64_t, _QWORD, uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v22 + 96))(v22, v5 + 72 * (int)v13, v20, v2 + 152, &v39, v2 + 152);
LABEL_49:
    if (++v4 == v37)
    {
      if (v38)
        re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, (_QWORD *)(v2 + 152), (_QWORD *)(v2 + 152));
      goto LABEL_80;
    }
  }
  if (!(_BYTE)v43)
  {
    re::BlendShapeWeights::init((uint64_t *)v42, v34);
    LOBYTE(v43) = 1;
  }
  v24 = (_OWORD *)(v2 + 152);
  if (v38)
  {
    v24 = v42;
    v9.n128_f32[0] = re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, (_QWORD *)(v2 + 152), v42);
  }
  (*(void (**)(_BYTE *, unint64_t, unint64_t, _OWORD *, _QWORD **, _OWORD *, __n128))(*(_QWORD *)v22 + 96))(v22, v5 + 72 * (int)v13, v1, v24, &v39, v42, v9);
  v12 = 24;
  if (!v35)
  {
LABEL_43:
    if (!(_BYTE)v45)
    {
      re::BlendShapeWeights::init((uint64_t *)v44, v34);
      LOBYTE(v45) = 1;
    }
    if (v38)
      re::AnimationValueTraits<re::BlendShapeWeights>::combine(v42, v44, v44);
    else
      re::AnimationValueTraits<re::BlendShapeWeights>::copy((uint64_t *)v42, (uint64_t *)v44);
    if ((v36 & 1) != 0)
    {
      v5 = *(_QWORD *)(v2 + 72);
      if (v5 <= v4)
        goto LABEL_95;
      v36 = 0;
      v38 = 1;
      if ((*(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * v4 + 20) & 2) != 0 && *v21 == 5)
      {
        re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, (_QWORD *)(v2 + 152), (_QWORD *)(v2 + 152));
        v29 = (uint64_t *)re::BindPoint::baseValueUntyped(v33);
        if (v29)
        {
          v1 = (unint64_t)v29;
          re::FixedArray<float>::operator=(v29, v2 + 152);
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v1 + 24), *v34);
          re::BindPoint::markAsWritten((uint64_t)v33);
        }
        v5 = *(_QWORD *)(v2 + 72);
        if (v5 <= v4)
          goto LABEL_97;
        v38 = 0;
        *(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * v4 + 20) &= ~2u;
        v36 = 1;
        *v21 = 1;
      }
    }
    else
    {
      v36 = 0;
      v38 = 1;
    }
    goto LABEL_49;
  }
  v1 = *(_QWORD *)(v2 + 72);
  if (v1 <= v4)
  {
LABEL_94:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v4;
    v56 = 2048;
    v57 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v4;
    v56 = 2048;
    v57 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    v39 = 0;
    v61 = v9;
    v62 = v9;
    v59 = v9;
    v60 = v9;
    v58 = v9;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v52 = 1024;
    *(_DWORD *)(v5 + 14) = 789;
    v54 = 2048;
    *(_QWORD *)(v5 + 20) = 0;
    v56 = 2048;
    *(_QWORD *)(v5 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_97:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v4;
    v56 = 2048;
    v57 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_98:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v4;
    v56 = 2048;
    v57 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_99:
    v49 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50 = 136315906;
    v51 = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v4;
    v56 = 2048;
    v57 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * v4 + 20) & 1) == 0 || !*(_BYTE *)(v5 + 72 * (int)v13 + 32))
    goto LABEL_43;
LABEL_83:
  re::AnimationValueTraits<re::BlendShapeWeights>::invert(v42, v7);
  re::AnimationValueTraits<re::BlendShapeWeights>::combine(v7, v32, v7);
  v30 = (uint64_t *)re::BindPoint::baseValueUntyped(v33);
  if (v30)
  {
    v31 = v30;
    re::FixedArray<float>::operator=(v30, (uint64_t)v7);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v31 + 3, *v34);
    re::BindPoint::markAsWritten((uint64_t)v33);
  }
  v5 = *(_QWORD *)(v2 + 72);
  if (v5 <= v4)
    goto LABEL_99;
  *(_BYTE *)(*(_QWORD *)(v2 + 88) + 24 * v4 + 20) &= ~1u;
LABEL_87:
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_80:
  re::internal::ValueWrapper<re::BlendShapeWeights>::~ValueWrapper((re::BlendShapeWeights *)v42);
  re::internal::ValueWrapper<re::BlendShapeWeights>::~ValueWrapper((re::BlendShapeWeights *)v44);
  re::internal::ValueWrapper<re::BlendShapeWeights>::~ValueWrapper((re::BlendShapeWeights *)&v46);
}

uint64_t *re::internal::AnimationCompositionChain<re::BlendShapeWeights>::apply(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  v2 = (uint64_t *)(a1 + 8);
  result = (uint64_t *)re::BindPoint::isAlive((re::BindPoint *)(a1 + 8));
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      return re::BindPoint::setValue<re::BlendShapeWeights>(v2, (_QWORD *)(a1 + 152));
    }
    else
    {
      if (*(_BYTE *)(a1 + 104) && re::BindPoint::isOverridden((re::BindPoint *)v2))
      {
        v4 = re::BindPoint::overrideValueUntyped((re::BindPoint *)v2);
        v5 = (uint64_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)v2);
        if (v5)
        {
          v6 = v5;
          re::FixedArray<float>::operator=(v5, v4);
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v6 + 3, *(_QWORD *)(v4 + 24));
          re::BindPoint::markAsWritten((uint64_t)v2);
        }
      }
      return (uint64_t *)re::BindPoint::setIsOverridden((uint64_t)v2, 0);
    }
  }
  return result;
}

uint64_t *re::BindPoint::setValue<re::BlendShapeWeights>(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = result[3];
  if (v2)
  {
    v4 = result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = v4[3];
    do
    {
      if (v10 == v9)
      {
        v24[1] = 0;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v25 = 136315906;
        v26 = "operator[]";
        v27 = 1024;
        v28 = 797;
        v29 = 2048;
        v30 = v10;
        v31 = 2048;
        v32 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(v4[5] + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (uint64_t *)v13;
      result = (uint64_t *)re::BindPoint::isOverridden((re::BindPoint *)v4);
      if ((_DWORD)result)
      {
        if (v14[3] == a2[3])
        {
          v15 = v14[1];
          if (v15 == a2[1])
          {
            if (!v15)
              return result;
            v16 = (float *)v14[2];
            v17 = (float *)a2[2];
            v18 = 4 * v15;
            while (*v16 == *v17)
            {
              ++v16;
              ++v17;
              v18 -= 4;
              if (!v18)
                return result;
            }
          }
        }
      }
      re::FixedArray<float>::operator=(v14, (uint64_t)a2);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v14 + 3, a2[3]);
      re::BindPoint::setIsOverridden((uint64_t)v4, 1);
    }
    else
    {
      result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (!result)
        return result;
      v19 = result + 3;
      if (result[3] == a2[3])
      {
        v20 = result[1];
        if (v20 == a2[1])
        {
          if (!v20)
            return result;
          v21 = (float *)result[2];
          v22 = (float *)a2[2];
          v23 = 4 * v20;
          while (*v21 == *v22)
          {
            ++v21;
            ++v22;
            v23 -= 4;
            if (!v23)
              return result;
          }
        }
      }
      re::FixedArray<float>::operator=(result, (uint64_t)a2);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v19, a2[3]);
    }
    return (uint64_t *)re::BindPoint::markAsWritten((uint64_t)v4);
  }
  return result;
}

void re::internal::AnimationCompositionChain<re::BlendShapeWeights>::takeSnapshot(_QWORD *a1)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  unsigned __int8 v5[8];
  _BYTE v6[32];

  if (a1[9])
  {
    if (!*((_BYTE *)a1 + 112))
    {
      v3 = 0u;
      v4 = 0u;
      re::Optional<re::BlendShapeWeights>::Optional((uint64_t)v5, (uint64_t)&v3);
      re::Optional<re::BlendShapeWeights>::operator=(a1 + 14, v5);
      if (v5[0])
        re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v6);
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v3);
      re::BlendShapeWeights::init(a1 + 15, a1 + 22);
    }
    v2 = a1 + 19;
LABEL_19:
    re::AnimationValueTraits<re::BlendShapeWeights>::copy(v2, a1 + 15);
    return;
  }
  if (re::BindPoint::supportsOverrideValue((re::BindPoint *)(a1 + 1)))
  {
    if (!*((_BYTE *)a1 + 112))
    {
      v3 = 0u;
      v4 = 0u;
      re::Optional<re::BlendShapeWeights>::Optional((uint64_t)v5, (uint64_t)&v3);
      re::Optional<re::BlendShapeWeights>::operator=(a1 + 14, v5);
      if (v5[0])
        re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v6);
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v3);
      re::BlendShapeWeights::init(a1 + 15, a1 + 22);
    }
    v2 = (uint64_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 1));
    goto LABEL_19;
  }
  if (re::BindPoint::isAlive((re::BindPoint *)(a1 + 1)))
  {
    if (!*((_BYTE *)a1 + 112))
    {
      v3 = 0u;
      v4 = 0u;
      re::Optional<re::BlendShapeWeights>::Optional((uint64_t)v5, (uint64_t)&v3);
      re::Optional<re::BlendShapeWeights>::operator=(a1 + 14, v5);
      if (v5[0])
        re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v6);
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v3);
      re::BlendShapeWeights::init(a1 + 15, a1 + 22);
    }
    v2 = (uint64_t *)re::BindPoint::valueUntyped((re::BindPoint *)(a1 + 1));
    goto LABEL_19;
  }
  re::internal::AnimationCompositionChain<re::BlendShapeWeights>::clearSnapshot((uint64_t)a1);
}

uint64_t *re::Optional<re::BlendShapeWeights>::operator=(uint64_t *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  id v11;

  v3 = *(unsigned __int8 *)a1;
  v4 = *a2;
  if (*(_BYTE *)a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*(_BYTE *)a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)(a1 + 1));
      *(_BYTE *)a1 = 0;
    }
    else
    {
      v8 = a1 + 1;
      if (v3)
        v9 = 1;
      else
        v9 = v4 == 0;
      if (v9)
      {
        re::FixedArray<float>::operator=(v8, (uint64_t)(a2 + 8));
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 4, *((_QWORD *)a2 + 4));
      }
      else
      {
        *(_BYTE *)a1 = 1;
        re::FixedArray<float>::FixedArray(v8, (uint64_t)(a2 + 8));
        v10 = *((_QWORD *)a2 + 4);
        a1[4] = v10;
        if (v10)
          v11 = (id)(v10 + 8);
      }
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::BindPoint::BindPointData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::BindPoint::BindPointData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::BindPoint::BindPointData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::BindPoint::BindPointData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::BindPoint::BindPointData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::BindPoint::BindPointData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  re::BindPoint::BindPointData *v6;
  const re::BindPoint::BindPointData *v7;
  uint64_t v8;
  re::BindPoint::BindPointData *v9;
  uint64_t v10;
  const re::BindPoint::BindPointData *v11;
  uint64_t v12;
  re::BindPoint::BindPointData *v13;
  uint64_t v14;
  const re::BindPoint::BindPointData *v15;
  re::BindPoint::BindPointData *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::BindPoint::BindPointData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    v11 = *(const re::BindPoint::BindPointData **)(a2 + 32);
    v12 = a1[2];
    v13 = (re::BindPoint::BindPointData *)a1[4];
    if (v12)
    {
      v14 = 32 * v12;
      do
      {
        re::BindPoint::BindPointData::copy(v13, v11);
        v11 = (const re::BindPoint::BindPointData *)((char *)v11 + 32);
        v13 = (re::BindPoint::BindPointData *)((char *)v13 + 32);
        v14 -= 32;
      }
      while (v14);
      v13 = (re::BindPoint::BindPointData *)a1[4];
      v12 = a1[2];
      v11 = *(const re::BindPoint::BindPointData **)(a2 + 32);
    }
    if (v12 != v4)
    {
      v15 = (const re::BindPoint::BindPointData *)((char *)v11 + 32 * v12);
      v16 = (re::BindPoint::BindPointData *)((char *)v13 + 32 * v12);
      v17 = 32 * v4 - 32 * v12;
      do
      {
        *(_OWORD *)v16 = 0u;
        *((_OWORD *)v16 + 1) = 0u;
        re::BindPoint::BindPointData::copy(v16, v15);
        v15 = (const re::BindPoint::BindPointData *)((char *)v15 + 32);
        v16 = (re::BindPoint::BindPointData *)((char *)v16 + 32);
        v17 -= 32;
      }
      while (v17);
    }
  }
  else
  {
    v6 = (re::BindPoint::BindPointData *)a1[4];
    if (v4)
    {
      v7 = *(const re::BindPoint::BindPointData **)(a2 + 32);
      v8 = 32 * v4;
      do
      {
        re::BindPoint::BindPointData::copy(v6, v7);
        v7 = (const re::BindPoint::BindPointData *)((char *)v7 + 32);
        v6 = (re::BindPoint::BindPointData *)((char *)v6 + 32);
        v8 -= 32;
      }
      while (v8);
      v6 = (re::BindPoint::BindPointData *)a1[4];
      v5 = a1[2];
    }
    if (v4 != v5)
    {
      v9 = (re::BindPoint::BindPointData *)((char *)v6 + 32 * v4);
      v10 = 32 * v5 - 32 * v4;
      do
      {
        re::BindPoint::BindPointData::deinit(v9);
        v9 = (re::BindPoint::BindPointData *)((char *)v9 + 32);
        v10 -= 32;
      }
      while (v10);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::BindPoint::BindPointData>::clear(uint64_t a1)
{
  uint64_t v2;
  re::BindPoint::BindPointData *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::BindPoint::BindPointData **)(a1 + 32);
    v4 = 32 * v2;
    do
    {
      re::BindPoint::BindPointData::deinit(v3);
      v3 = (re::BindPoint::BindPointData *)((char *)v3 + 32);
      v4 -= 32;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::BindPoint::BindPointData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  re::BindPoint::BindPointData *v7;
  re::BindPoint::BindPointData *v8;
  uint64_t v9;
  uint64_t v10;
  re::BindPoint::BindPointData *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BindPoint::BindPointData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = (re::BindPoint::BindPointData *)result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::BindPoint::BindPointData *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 32 * v9;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          re::BindPoint::BindPointData::move(v11, v8);
          re::BindPoint::BindPointData::deinit(v8);
          v8 = (re::BindPoint::BindPointData *)((char *)v8 + 32);
          v11 = (re::BindPoint::BindPointData *)((char *)v11 + 32);
          v10 -= 32;
        }
        while (v10);
        v8 = (re::BindPoint::BindPointData *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::BindPoint::BindPointData *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::BindPoint::BindPointData::deinit(re::BindPoint::BindPointData *this)
{
  uint64_t v2;
  void (***v3)(_QWORD);
  double result;

  if (*(_QWORD *)this)
  {
    (**(void (***)(re::BindPoint::BindPointData *))this)(this);
  }
  else
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = (void (***)(_QWORD))*((_QWORD *)this + 2);
      if (v3)
      {
        (**v3)(*((_QWORD *)this + 2));
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v2 + 40))(v2, v3);
      }
    }
  }
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void re::SkeletalPose::~SkeletalPose(re::SkeletalPose *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {

    *((_QWORD *)this + 10) = 0;
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 4));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
  re::StringID::destroyString(this);
}

uint64_t re::Optional<re::SkeletalPose>::Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  *(_BYTE *)a1 = 1;
  re::StringID::StringID((re::StringID *)(a1 + 8), (const StringID *)a2);
  re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)(a1 + 24), a2 + 16);
  re::DynamicArray<BOOL>::DynamicArray(a1 + 48, (uint64_t *)(a2 + 40));
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  return a1;
}

_QWORD *re::FixedArray<re::GenericSRT<float>>::FixedArray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::GenericSRT<float>>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::GenericSRT<float>>::copy(a1, a2);
  }
  return a1;
}

void *re::FixedArray<re::GenericSRT<float>>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)(a2 + 16), 48 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::DynamicArray<BOOL>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<BOOL>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<BOOL>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<BOOL>::copy(void **result, uint64_t a2)
{
  void **v3;
  size_t v4;
  size_t v5;
  char *v6;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<BOOL>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = (size_t)v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), v5);
      v6 = (char *)v3[2];
    }
    else
    {
      v6 = 0;
    }
    result = (void **)memcpy(&v6[(_QWORD)v3[4]], &v6[*(_QWORD *)(a2 + 32)], v4 - (_QWORD)v6);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicArray<BOOL>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v4)
      {
        if (!a2)
        {
          v6 = 0;
          if (!v2)
            goto LABEL_8;
          goto LABEL_7;
        }
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2, 1);
        if (result)
        {
          v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], v4[2]);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, a2, *(_QWORD *)(*v4 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<BOOL>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

void re::BlendShapeWeights::~BlendShapeWeights(re::BlendShapeWeights *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
}

uint64_t re::Optional<re::BlendShapeWeights>::Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  *(_BYTE *)a1 = 1;
  re::FixedArray<float>::FixedArray((uint64_t *)(a1 + 8), a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  return a1;
}

uint64_t *re::FixedArray<float>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<int>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<float>::copy(a1, a2);
  }
  return a1;
}

void *re::FixedArray<float>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)(a2 + 16), 4 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 24 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::internal::ValueWrapper<re::SkeletalPose>::~ValueWrapper(re::SkeletalPose *this)
{
  if (*((_BYTE *)this + 88))
    re::SkeletalPose::deinit(this);
  re::SkeletalPose::~SkeletalPose(this);
}

_QWORD *re::FixedArray<re::GenericSRT<float>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::GenericSRT<float>>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::GenericSRT<float>>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<BOOL>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<BOOL>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<BOOL>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<BOOL>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  id v5;

  v2 = *a1;
  if (*a1 != a2)
  {
    if (a2)
    {
      v5 = (id)(a2 + 8);
      v2 = *a1;
    }
    if (v2)

    *a1 = a2;
  }
}

uint64_t re::FixedArray<re::GenericSRT<float>>::operator==(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t *v3;
  float32x4_t *v4;
  uint32x4_t v5;
  uint32x4_t v6;

  if (*(_QWORD *)(a1 + 8) == a2)
  {
    if (!a2)
      return 1;
    v3 = *(float32x4_t **)(a1 + 16);
    v4 = &v3[3 * a2];
    while (1)
    {
      v5 = (uint32x4_t)vceqq_f32(*v3, *a3);
      v5.i32[3] = v5.i32[2];
      if ((vminvq_u32(v5) & 0x80000000) == 0)
        break;
      if ((vminvq_u32((uint32x4_t)vceqq_f32(v3[1], a3[1])) & 0x80000000) == 0)
        break;
      v6 = (uint32x4_t)vceqq_f32(v3[2], a3[2]);
      v6.i32[3] = v6.i32[2];
      if ((vminvq_u32(v6) & 0x80000000) == 0)
        break;
      v3 += 3;
      a3 += 3;
      if (v3 == v4)
        return 1;
    }
  }
  return 0;
}

void re::internal::ValueWrapper<re::BlendShapeWeights>::~ValueWrapper(re::BlendShapeWeights *this)
{
  if (*((_BYTE *)this + 32))
    re::BlendShapeWeights::deinit(this);
  re::BlendShapeWeights::~BlendShapeWeights(this);
}

uint64_t *re::FixedArray<float>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (uint64_t *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<int>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<float>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::internal::performRayCastCallback(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, _QWORD *a9)
{
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  v13 = re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a3, a2);
  if (a4 == 1)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v15 = (__int128 *)v13;
  v16 = re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a3 + 288, v14);
  if (a4 <= 2)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  v18 = (__int128 *)v16;
  v19 = *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(a3 + 576, v17);
  v28 = *v15;
  v29 = *v18;
  LODWORD(v30) = v19;
  re::internal::RayCaster::cast(a9, (uint64_t)&v28, (uint64_t)v33);
  if (v33[0])
  {
    v30 = v36;
    v31 = v37;
    v32 = v38;
    v28 = v34;
    v29 = v35;
    if (a8)
    {
      *(_DWORD *)re::RigDataValue::getRuntimeValue<int>(a7, v20) = 1;
      if (a8 != 1)
      {
        v22 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a7 + 288, v21);
        *v22 = v29;
        if (a8 > 2)
        {
          result = re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a7 + 576, v23);
          *(_OWORD *)result = v30;
          return result;
        }
        goto LABEL_19;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, 1);
      _os_crash();
      __break(1u);
LABEL_19:
      re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, 2);
      _os_crash();
      __break(1u);
      goto LABEL_20;
    }
LABEL_17:
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0, v28);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  if (!a8)
  {
LABEL_20:
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_21;
  }
  *(_DWORD *)re::RigDataValue::getRuntimeValue<int>(a7, v20) = 0;
  if (a8 == 1)
  {
LABEL_21:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, 1);
    _os_crash();
    __break(1u);
LABEL_22:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, 2);
    _os_crash();
    __break(1u);
  }
  v26 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a7 + 288, v25);
  *v26 = 0;
  v26[1] = 0;
  if (a8 <= 2)
    goto LABEL_22;
  result = re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a7 + 576, v27);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<re::Vector3<float>>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 392) > v5)
    {
      v6 = *(_QWORD *)(v4 + 400);
      return v6 + 16 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 176) > v5)
    {
      v6 = *(_QWORD *)(v7 + 184);
      return v6 + 16 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::performRayCastCompile(uint64_t a1, const re::RigDataValue **a2, unint64_t a3, re::RigDataValue **a4, unint64_t a5)
{
  uint64_t v10;
  re::Allocator *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[2];
  int v21;
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  StringID v25;
  re::Allocator *v26;
  char **p_var1;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v24 = 0;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v11 = *(re::Allocator **)a1;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v20, *(re::Allocator **)a1);
  *(_QWORD *)&v25.var0 = 0x278AE88E3643096;
  v25.var1 = "inRayOrigin";
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v20, &v25, *a2);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v25.var0 = 0x99DEBA556D37A074;
  v25.var1 = "inRayDirection";
  if (a3 == 1)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v20, &v25, a2[1]);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v25.var0 = 0x278AE88D7BD4816;
  v25.var1 = "inRayLength";
  if (a3 <= 2)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v20, &v25, a2[2]);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v25.var0 = 0xCFE442BDE2A1D5BCLL;
  v25.var1 = "outHitSuccess";
  if (!a5)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v20, &v25, *a4);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v25.var0 = 0x2CA414A24852A074;
  v25.var1 = "outHitLocation";
  if (a5 == 1)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
  }
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v20, &v25, a4[1]);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v25.var0 = 0x51075CFDCC599558;
  v25.var1 = "outHitNormal";
  if (a5 <= 2)
    goto LABEL_13;
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v20, &v25, a4[2]);
  re::StringID::destroyString((re::StringID *)&v25);
  v18 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 112, 16);
  *(_QWORD *)v18 = v10;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 20) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v18 + 60) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 76) = 0u;
  *(_OWORD *)(v18 + 44) = 0u;
  *(_OWORD *)(v18 + 28) = 0u;
  *(_DWORD *)(v18 + 64) = 1;
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 72) = 0;
  *(_DWORD *)(v18 + 96) = 0;
  *(_QWORD *)&v25.var0 = v18;
  v25.var1 = (char *)&off_24ED1F0C8;
  p_var1 = &v25.var1;
  v26 = v11;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v20, a1, (uint64_t)re::internal::performRayCastCallback, (uint64_t *)&v25);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v25);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v22 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v20 + 8);
  return 1;
}

void re::internal::generatePenetrationCorrectionIKTargetCallback(int a1, uint64_t a2, re::internal *this, unint64_t a4, int a5, int a6, const re::RigDataValue *a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float *Runtime;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v28;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  _OWORD *v39;
  float32x4_t v40;
  float32x4_t v41;
  _QWORD v42[2];
  char v43[8];
  uint64_t v44;
  uint64_t v45;
  char v46;
  _OWORD v47[2];
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60[16];
  float32x4_t v61;
  float32x4_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[296];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    re::internal::assertLog((re::internal *)6, a2, this, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  re::internal::getSRTFromRDV(this, &v52);
  if (a4 == 1)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  v14 = (float32x4_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>((uint64_t)this + 288, v13);
  if (a4 <= 2)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  v40 = *v14;
  Runtime = (float *)re::RigDataValue::getRuntimeValue<float>((uint64_t)this + 576, v15);
  if (a4 == 3)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3, *(_OWORD *)&v40);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
  }
  v18 = *Runtime;
  re::internal::getSRTFromRDV((re::internal *)((char *)this + 864), &v49);
  if (!a8)
    goto LABEL_16;
  v20 = (int32x4_t)vmulq_f32(v40, v40);
  v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
  v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
  v41 = vmulq_n_f32(v40, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).f32[0]);
  re::RigDataValue::RigDataValue((re::RigDataValue *)v66, a7);
  _Q2 = (int32x4_t)v50;
  v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL);
  v25 = vnegq_f32(v50);
  v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v53, v53), (int8x16_t)v53, 0xCuLL), v25), (float32x4_t)v53, v24);
  _S7 = v53.i32[3];
  v28 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL), (float32x4_t)v53, v50, 3), v50, (float32x4_t)v53, 3);
  __asm { FMLA            S1, S7, V2.S[3] }
  v28.i32[3] = _S1;
  v34 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v54, v54), (int8x16_t)v54, 0xCuLL), v25), (float32x4_t)v54, v24);
  v35 = (int32x4_t)vaddq_f32(v34, v34);
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
  v37 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v25), v36, v24);
  v47[0] = vmulq_f32(v49, v52);
  v47[1] = v28;
  v48 = vaddq_f32(v51, vmulq_f32(v49, vaddq_f32(vaddq_f32((float32x4_t)v54, vmulq_laneq_f32(v36, v50, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL))));
  v55 = vsubq_f32(v48, vmulq_n_f32(v41, v18 * 0.5));
  v56 = v41;
  *(float *)&v57 = v18;
  re::internal::RayCaster::cast(a9, (uint64_t)&v55, (uint64_t)v60);
  re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>((uint64_t)a7, v47);
  if (v60[0])
  {
    v57 = v63;
    v58 = v64;
    v59 = v65;
    v55 = v61;
    v56 = v62;
    v42[0] = "translation";
    v42[1] = 11;
    re::RigDataValue::attributeValue((uint64_t)a7, (uint64_t)v42, (uint64_t)v43);
    v39 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v44, v38);
    *v39 = v56;
    if (!v43[0] && v45 && (v46 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
  }
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v66);
}

_OWORD *re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *result;
  const char *v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  _OWORD *v12;
  char v13;

  v8 = "scale";
  v9 = 5;
  re::RigDataValue::attributeValue(a1, (uint64_t)&v8, (uint64_t)v10);
  *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v11, v4) = *a2;
  if (!v10[0] && v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  v8 = "rotation";
  v9 = 8;
  re::RigDataValue::attributeValue(a1, (uint64_t)&v8, (uint64_t)v10);
  *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v11, v5) = a2[1];
  if (!v10[0] && v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  v8 = "translation";
  v9 = 11;
  re::RigDataValue::attributeValue(a1, (uint64_t)&v8, (uint64_t)v10);
  result = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v11, v6);
  *result = a2[2];
  if (!v10[0])
  {
    result = v12;
    if (v12)
    {
      if ((v13 & 1) != 0)
        return (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
    }
  }
  return result;
}

uint64_t re::internal::generatePenetrationCorrectionIKTargetCompile(uint64_t a1, _QWORD *a2, unint64_t a3, re::RigDataValue **a4, uint64_t a5)
{
  const StringID *v6;
  const re::RigDataValue *v7;
  const re::RigDataValue *v8;
  const re::RigDataValue *v9;
  re::RigDataValue *v10;
  __int128 *v11;
  uint64_t v12;
  re::Allocator *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  int v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;
  _BYTE v22[8];
  const char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  StringID v34;
  re::Allocator *v35;
  char **p_var1;
  _BYTE v37[296];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  if (a3 == 1)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  if (a3 <= 2)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  if (a3 == 3)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (a3 <= 4)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 4, 4);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  if (!a5)
    goto LABEL_13;
  v6 = (const StringID *)a2[1];
  v8 = (const re::RigDataValue *)a2[2];
  v7 = (const re::RigDataValue *)a2[3];
  v9 = (const re::RigDataValue *)a2[4];
  v10 = *a4;
  v11 = *(__int128 **)(*a2 + 184);
  v12 = *((_QWORD *)v11 + 2);
  v24 = *v11;
  v25 = v12;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v26, (uint64_t)v11 + 24);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v27, (uint64_t)v11 + 72);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::DynamicArray((uint64_t)&v28, (uint64_t *)v11 + 15);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::DynamicArray((uint64_t)&v29, (uint64_t *)v11 + 20);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)&v30, (uint64_t *)v11 + 25);
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)&v31, (uint64_t *)v11 + 30);
  re::DynamicArray<re::RigHierarchyJointTransform>::DynamicArray((uint64_t)&v32, (uint64_t *)v11 + 35);
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)&v33, (uint64_t *)v11 + 40);
  re::StringID::StringID((re::StringID *)v22, v6 + 14);
  re::internal::makeModelSpaceJointPoseRDV((re::Allocator **)a1, (_anonymous_namespace_ *)&v24, v23, (re::RigDataValue *)v37);
  v21 = 0;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v13 = *(re::Allocator **)a1;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v17, *(re::Allocator **)a1);
  *(_QWORD *)&v34.var0 = 0xBE9DBE8BDF4D9A08;
  v34.var1 = "inModelSpaceJointTransform";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v17, &v34, (const re::RigDataValue *)v37);
  re::StringID::destroyString((re::StringID *)&v34);
  *(_QWORD *)&v34.var0 = 0xA12D024F0067AC76;
  v34.var1 = "inRayCastDirection";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v17, &v34, v8);
  re::StringID::destroyString((re::StringID *)&v34);
  *(_QWORD *)&v34.var0 = 0xA1F853E9BF7E8B54;
  v34.var1 = "inRayCastLength";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v17, &v34, v7);
  re::StringID::destroyString((re::StringID *)&v34);
  *(_QWORD *)&v34.var0 = 0x7C0955B5D8590FELL;
  v34.var1 = "inWorldTransform";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v17, &v34, v9);
  re::StringID::destroyString((re::StringID *)&v34);
  *(_QWORD *)&v34.var0 = 0xB240A197B4FELL;
  v34.var1 = "outTarget";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v17, &v34, v10);
  re::StringID::destroyString((re::StringID *)&v34);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v15 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 112, 16);
  *(_QWORD *)v15 = v14;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 20) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v15 + 60) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 76) = 0u;
  *(_OWORD *)(v15 + 44) = 0u;
  *(_OWORD *)(v15 + 28) = 0u;
  *(_DWORD *)(v15 + 64) = 1;
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_DWORD *)(v15 + 96) = 0;
  *(_QWORD *)&v34.var0 = v15;
  v34.var1 = (char *)&off_24ED1F148;
  p_var1 = &v34.var1;
  v35 = v13;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v17, a1, (uint64_t)re::internal::generatePenetrationCorrectionIKTargetCallback, (uint64_t *)&v34);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v34);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v19 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v17 + 8);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v37);
  re::StringID::destroyString((re::StringID *)v22);
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)&v24);
  return 1;
}

void re::internal::registerPerformRayCastNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[6];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[2] = xmmword_24ED1F018;
  v7[3] = *(_OWORD *)&off_24ED1F028;
  v7[4] = xmmword_24ED1F038;
  v7[5] = *(_OWORD *)&off_24ED1F048;
  v7[0] = constinit_1;
  v7[1] = *(_OWORD *)&off_24ED1F008;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 3uLL, (unint64_t)re::internal::performRayCastCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void re::internal::registerGeneratePenetrationCorrectionIKTarget(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[6];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[2] = xmmword_24ED1F078;
  v7[3] = *(_OWORD *)&off_24ED1F088;
  v7[4] = xmmword_24ED1F098;
  v7[5] = *(_OWORD *)off_24ED1F0A8;
  v7[0] = constinit_22;
  v7[1] = *(_OWORD *)&off_24ED1F068;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 5uLL, 1uLL, (unint64_t)re::internal::generatePenetrationCorrectionIKTargetCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 344) > v5)
    {
      v6 = *(_QWORD *)(v4 + 352);
      return v6 + 16 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 128) > v5)
    {
      v6 = *(_QWORD *)(v7 + 136);
      return v6 + 16 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (_QWORD *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 56;
    }
  }
}

void re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_51, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = (__n128 *)(v7 + v4);
        v9 = *(_DWORD *)(v7 + v4 + 8);
        if (v9 < 0)
        {
          v8->n128_u32[2] = v9 & 0x7FFFFFFF;
          v12 = v8[1].n128_i64[0];
          v11 = v8 + 1;
          v10 = v12;
          if (v12)
          {
            if ((*(_BYTE *)(v7 + v4 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 56;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v13 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v13;
  }
}

void re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 48));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

double re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
        }
        ++v6;
        v5 += 56;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  re::StringID *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicString,re::RigDataTypeClass,true> *,re::Pair<re::DynamicString,re::RigDataTypeClass,true> *,re::Pair<re::DynamicString,re::RigDataTypeClass,true> *>((uint64_t)&v15, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 96 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = a1[4];
      v12 = 96 * v9;
      v13 = 96 * v4;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v11 + v12), (const re::DynamicString *)(v10 + v12));
        *(_BYTE *)(v11 + v12 + 32) = *(_BYTE *)(v10 + v12 + 32);
        re::StringID::StringID((re::StringID *)(v11 + v12 + 40), (const StringID *)(v10 + v12 + 40));
        result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray(v11 + v12 + 56, (uint64_t *)(v10 + v12 + 56));
        v10 += 96;
        v13 -= 96;
        v11 += 96;
      }
      while (v12 != v13);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicString,re::RigDataTypeClass,true> *,re::Pair<re::DynamicString,re::RigDataTypeClass,true> *,re::Pair<re::DynamicString,re::RigDataTypeClass,true> *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 96 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = (re::StringID *)(a1[4] + 96 * v4 + 40);
      v8 = 96 * v6 - 96 * v4;
      do
      {
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v7 + 16);
        re::StringID::destroyString(v7);
        result = *((_QWORD *)v7 - 5);
        if (result)
        {
          if ((*((_BYTE *)v7 - 32) & 1) != 0)
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)v7 - 3));
          *(_OWORD *)((char *)v7 - 40) = 0u;
          *(_OWORD *)((char *)v7 - 24) = 0u;
        }
        v7 = (re::StringID *)((char *)v7 + 96);
        v8 -= 96;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 96 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          *v13 = 0;
          v15 = *(_QWORD *)(v8 + v10 + 16);
          v13[3] = 0;
          v17 = v7[v10 / 8 + 1];
          v16 = v7[v10 / 8 + 2];
          v12[1] = v14;
          v12[2] = v15;
          v13[1] = v17;
          v13[2] = v16;
          *((_BYTE *)v12 + 32) = *(_BYTE *)(v8 + v10 + 32);
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 5], (const StringID *)(v8 + v10 + 40));
          re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)&v7[v10 / 8 + 7], (uint64_t *)(v8 + v10 + 56));
          re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(v8 + v10 + 56);
          re::StringID::destroyString((re::StringID *)(v8 + v10 + 40));
          if (*(_QWORD *)(v8 + v10))
          {
            if ((v13[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + v10) + 40))(*(_QWORD *)(v8 + v10), v13[2]);
            *(_OWORD *)v13 = 0u;
            *((_OWORD *)v13 + 1) = 0u;
          }
          v10 += 96;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const StringID *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v13, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 32 * *(_QWORD *)(a1 + 16)), *(unint64_t **)(a1 + 32));
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v4)
    {
      v9 = (const StringID *)(*(_QWORD *)(a2 + 32) + 32 * v8);
      v10 = *(_QWORD *)(a1 + 32) + 32 * v8;
      v11 = 32 * v4 - 32 * v8;
      do
      {
        re::StringID::StringID((re::StringID *)v10, v9);
        re::StringID::StringID((re::StringID *)(v10 + 16), v9 + 1);
        v9 += 2;
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v12, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 32 * v4), *(unint64_t **)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 != v5)
    {
      v6 = *(_QWORD *)(a1 + 32) + 32 * v4;
      v7 = 32 * v5 - 32 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 32;
        v7 -= 32;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
}

_QWORD *re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[4 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = &str_110;
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = &str_110;
          v8[2] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 4;
          v11 += 4;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::StringID::operator=(a4, v5);
      re::StringID::operator=(a4 + 2, v5 + 2);
      v5 += 4;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicString,re::RigDataTypeClass,true> *,re::Pair<re::DynamicString,re::RigDataTypeClass,true> *,re::Pair<re::DynamicString,re::RigDataTypeClass,true> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::DynamicString::operator=((re::DynamicString *)(a4 + v7), (re::DynamicString *)(a2 + v7));
    *(_BYTE *)(a4 + v7 + 32) = *(_BYTE *)(a2 + v7 + 32);
    re::StringID::operator=((unint64_t *)(a4 + v7 + 40), (uint64_t *)(a2 + v7 + 40));
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::operator=(a4 + v7 + 56, (uint64_t *)(a2 + v7 + 56));
    v7 += 96;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 32 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::DynamicArray<re::DynamicArray<re::RigDataValue>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::DynamicArray<re::RigDataValue>>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<re::RigDataValue> *,re::DynamicArray<re::RigDataValue> *,re::DynamicArray<re::RigDataValue> *,0>(*(re::RigDataValue **)(a2 + 32), (re::RigDataValue *)(*(_QWORD *)(a2 + 32) + 40 * *(_QWORD *)(a1 + 16)), *(re::RigDataValue **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 5 * v9;
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      result = *(_QWORD *)(a1 + 32) + 8 * v10;
      v12 = 40 * v4 - 8 * v10;
      do
      {
        v13 = re::DynamicArray<re::RigDataValue>::DynamicArray(result, v11);
        v11 += 5;
        result = v13 + 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<re::RigDataValue> *,re::DynamicArray<re::RigDataValue> *,re::DynamicArray<re::RigDataValue> *,0>(*(re::RigDataValue **)(a2 + 32), (re::RigDataValue *)(*(_QWORD *)(a2 + 32) + 40 * v4), *(re::RigDataValue **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = *(_QWORD *)(a1 + 32) + 40 * v4;
      v8 = 40 * v6 - 40 * v4;
      do
      {
        result = re::DynamicArray<re::RigDataValue>::deinit(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

_QWORD *re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 40 * v9;
        v11 = v7 + 4;
        do
        {
          *v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          v12 = *(_QWORD *)(v8 + 8);
          *(v11 - 4) = *(_QWORD *)v8;
          *(v11 - 3) = v12;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v13 = *(v11 - 2);
          *(v11 - 2) = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = v13;
          v14 = *v11;
          *v11 = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<re::RigDataValue>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

re::RigDataValue *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<re::RigDataValue> *,re::DynamicArray<re::RigDataValue> *,re::DynamicArray<re::RigDataValue> *,0>(re::RigDataValue *a1, re::RigDataValue *a2, re::RigDataValue *a3)
{
  re::RigDataValue *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::DynamicArray<re::RigDataValue>::operator=(a3, v4);
      v4 = (re::RigDataValue *)((char *)v4 + 40);
      a3 = (re::RigDataValue *)((char *)a3 + 40);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

re::RigDataValue *re::DynamicArray<re::RigDataValue>::operator=(re::RigDataValue *a1, re::RigDataValue *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RigDataValue>::copy((uint64_t)a1, (uint64_t)a2);
        ++*((_DWORD *)a1 + 6);
      }
      else
      {
        re::DynamicArray<re::RigDataValue>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = *((_QWORD *)a2 + 2);
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RigDataValue>::setCapacity(a1, v5);
      ++*((_DWORD *)a1 + 6);
      re::DynamicArray<re::RigDataValue>::copy((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a1;
}

re::RigDataValue *re::DynamicArray<re::RigDataValue>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  re::RigDataValue *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const re::RigDataValue *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::RigDataValue>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = (re::RigDataValue *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RigDataValue *,re::RigDataValue *,re::RigDataValue *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 288 * *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 9 * v9;
      v11 = (const re::RigDataValue *)(*(_QWORD *)(a2 + 32) + 32 * v10);
      result = (re::RigDataValue *)(*(_QWORD *)(a1 + 32) + 32 * v10);
      v12 = 288 * v4 - 32 * v10;
      do
      {
        v13 = re::RigDataValue::RigDataValue(result, v11);
        v11 = (const re::RigDataValue *)((char *)v11 + 288);
        result = (re::RigDataValue *)(v13 + 288);
        v12 -= 288;
      }
      while (v12);
    }
  }
  else
  {
    result = (re::RigDataValue *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RigDataValue *,re::RigDataValue *,re::RigDataValue *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 288 * v4, *(_QWORD **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      result = (re::RigDataValue *)(*(_QWORD *)(a1 + 32) + 288 * v4);
      v7 = 288 * v6 - 288 * v4;
      do
      {
        re::RigDataValue::~RigDataValue(result);
        result = (re::RigDataValue *)(v8 + 288);
        v7 -= 288;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

re::RigDataValue *re::DynamicArray<re::RigDataValue>::clear(re::RigDataValue *result)
{
  re::RigDataValue *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::RigDataValue *)*((_QWORD *)result + 4);
    v3 = 288 * v2;
    do
    {
      re::RigDataValue::~RigDataValue(result);
      result = (re::RigDataValue *)(v4 + 288);
      v3 -= 288;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::RigDataValue>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  re::RigDataValue *v7;
  const re::RigDataValue *v8;
  uint64_t v9;
  uint64_t v10;
  re::RigDataValue *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigDataValue>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x120uLL))
        {
          v2 = 288 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 288 * a2, 16);
          if (result)
          {
            v7 = (re::RigDataValue *)result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 288, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (const re::RigDataValue *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 288 * v9;
        v11 = v7;
        do
        {
          re::RigDataValue::RigDataValue(v11, v8);
          re::RigDataValue::~RigDataValue(v8);
          v8 = (const re::RigDataValue *)((char *)v8 + 288);
          v11 = (re::RigDataValue *)((char *)v11 + 288);
          v10 -= 288;
        }
        while (v10);
        v8 = (const re::RigDataValue *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, const re::RigDataValue *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RigDataValue *,re::RigDataValue *,re::RigDataValue *,0>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::RigDataValue::operator=(a3, v4);
      v4 += 288;
      a3 += 36;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::RigDataValue>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigDataValue>::setCapacity(a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigDataValue>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::StringID>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::StringID>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::StringID>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  re::StringID *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  const StringID *v17;
  re::StringID *v18;
  uint64_t v19;
  re::StringID *v20;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::StringID>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    v12 = *(uint64_t **)(a2 + 32);
    v13 = a1[2];
    v14 = (unint64_t *)a1[4];
    if (v13)
    {
      v15 = 16 * v13;
      do
      {
        v16 = re::StringID::operator=(v14, v12);
        v12 += 2;
        v14 = v16 + 2;
        v15 -= 16;
      }
      while (v15);
      v14 = (unint64_t *)a1[4];
      v13 = a1[2];
      v12 = *(uint64_t **)(a2 + 32);
    }
    if (v13 != v4)
    {
      v17 = (const StringID *)&v12[2 * v13];
      v18 = (re::StringID *)&v14[2 * v13];
      v19 = 16 * v4 - 16 * v13;
      do
      {
        v20 = re::StringID::StringID(v18, v17++);
        v18 = (re::StringID *)((char *)v20 + 16);
        v19 -= 16;
      }
      while (v19);
    }
  }
  else
  {
    v6 = (unint64_t *)a1[4];
    if (v4)
    {
      v7 = *(uint64_t **)(a2 + 32);
      v8 = 16 * v4;
      do
      {
        v9 = re::StringID::operator=(v6, v7);
        v7 += 2;
        v6 = v9 + 2;
        v8 -= 16;
      }
      while (v8);
      v6 = (unint64_t *)a1[4];
      v5 = a1[2];
    }
    if (v4 != v5)
    {
      v10 = (re::StringID *)&v6[2 * v4];
      v11 = 16 * v5 - 16 * v4;
      do
      {
        re::StringID::destroyString(v10);
        v10 = (re::StringID *)((char *)v10 + 16);
        v11 -= 16;
      }
      while (v11);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::StringID>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  re::StringID *v8;
  uint64_t v9;
  re::StringID *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::StringID>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::StringID *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (re::StringID *)((char *)v8 + 16 * v9);
        v11 = v7;
        do
        {
          v12 = *(_QWORD *)v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v8 & 1;
          *v11 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = *((_QWORD *)v8 + 1);
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = &str_110;
          re::StringID::destroyString(v8);
          v8 = (re::StringID *)((char *)v8 + 16);
          v11 += 2;
        }
        while (v8 != v10);
        v8 = (re::StringID *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::StringID *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<unsigned long>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<unsigned long>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<unsigned long>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 8 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 8 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 8 * (_QWORD)v5), 8 * v4 - 8 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 8 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::DynamicArray<re::RigHierarchyJointTransform>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigHierarchyJointTransform>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::RigHierarchyJointTransform>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 160 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 160 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 160 * (_QWORD)v5), 160 * v4 - 160 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 160 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 160 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::RigHierarchy::~RigHierarchy(re::RigHierarchy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  v2 = *((_QWORD *)this + 40);
  if (v2)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  v3 = *((_QWORD *)this + 35);
  if (v3)
  {
    if (*((_QWORD *)this + 39))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 35) = 0;
    ++*((_DWORD *)this + 76);
  }
  v4 = *((_QWORD *)this + 30);
  if (v4)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 200);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)this + 160);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)this + 120);
  v6 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 9, v5);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 3, v6);
}

uint64_t re::DynamicArray<re::StringID>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        do
        {
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 16);
          v5 -= 16;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::DynamicArray<re::RigDataValue>::deinit(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  re::StringID *v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (re::StringID *)(v3 + 40);
        v6 = 96 * v4;
        do
        {
          re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v5 + 16);
          re::StringID::destroyString(v5);
          v7 = *((_QWORD *)v5 - 5);
          if (v7)
          {
            if ((*((_BYTE *)v5 - 32) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v5 - 3));
            *(_OWORD *)((char *)v5 - 40) = 0u;
            *(_OWORD *)((char *)v5 - 24) = 0u;
          }
          v5 = (re::StringID *)((char *)v5 + 96);
          v6 -= 96;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<int>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 224) > v5)
    {
      v6 = *(_QWORD *)(v4 + 232);
      return v6 + 4 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 8) > v5)
    {
      v6 = *(_QWORD *)(v7 + 16);
      return v6 + 4 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

void std::__function::__func<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED1F0C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED1F0C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::BucketArray<re::CollisionCastHit,10ul>::deinit(v2 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 48);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::performRayCastCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::target_type()
{
}

uint64_t re::BucketArray<re::CollisionCastHit,10ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::CollisionCastHit,10ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  int v5;

  v2 = *a1;
  if ((a1[2] & 1) != 0)
    v3 = a1 + 3;
  else
    v3 = (uint64_t *)a1[4];
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3[a1[1] - 1]);
  v5 = *((_DWORD *)a1 + 4);
  --a1[1];
  *((_DWORD *)a1 + 4) = v5 + 2;
  return result;
}

uint64_t re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_DWORD *)(a1 + 16);
    if ((v3 & 1) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 32));
      v3 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = (v3 | 1) + 2;
  }
  return result;
}

unint64_t re::BucketArray<re::CollisionCastHit,10ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 / 0xA)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 / 0xA)) + 80 * (a2 % 0xA);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 / 0xA)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 / 0xA)) + 80 * (a2 % 0xA);
}

void std::__function::__func<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED1F148;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED1F148;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::BucketArray<re::CollisionCastHit,10ul>::deinit(v2 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 48);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::generatePenetrationCorrectionIKTargetCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::target_type()
{
}

void *re::IntrospectionInfo<re::StringID>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  const re::IntrospectionBase *v7;
  std::__shared_mutex_base *v8;
  int v10;
  int v11;
  __int128 v12;

  if ((v2 & 1) == 0)
  {
    v10 = a1;
    a1 = v10;
    if (v11)
    {
      re::IntrospectionStringID::IntrospectionStringID((re::IntrospectionStringID *)&re::IntrospectionInfo<re::StringID>::get(BOOL)::info);
      a1 = v10;
    }
  }
  if (a1)
  {
    if (!re::IntrospectionInfo<re::StringID>::get(BOOL)::isInitialized)
    {
      re::IntrospectionInfo<re::StringID>::get(BOOL)::isInitialized = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::IntrospectionInfo<re::StringID>::get(BOOL)::info, a2);
      xmmword_2557FF108 = v12;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    v3 = re::IntrospectionInfo<re::StringID>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    if (!v3)
    {
      v5 = re::introspectionSharedMutex(v4);
      std::__shared_mutex_base::lock(v5);
      if (!re::IntrospectionInfo<re::StringID>::get(BOOL)::isInitialized)
      {
        re::IntrospectionInfo<re::StringID>::get(BOOL)::isInitialized = 1;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::IntrospectionInfo<re::StringID>::get(BOOL)::info, v7);
        xmmword_2557FF108 = v12;
      }
      v8 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  return &re::IntrospectionInfo<re::StringID>::get(BOOL)::info;
}

void re::internal::defaultConstruct<re::AnimationBlendTreeNodeDescription>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
  a3[4] = 0;
  a3[5] = &str_110;
  a3[6] = 0;
  a3[7] = &str_110;
  a3[8] = 0;
  a3[9] = &str_110;
}

void re::internal::defaultDestruct<re::AnimationBlendTreeNodeDescription>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 64));
  re::StringID::destroyString((re::StringID *)(a3 + 48));
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::AnimationBlendTreeNodeDescription>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  result[4] = 0;
  result[5] = &str_110;
  result[6] = 0;
  result[7] = &str_110;
  result[8] = 0;
  result[9] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::AnimationBlendTreeNodeDescription>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 64));
  re::StringID::destroyString((re::StringID *)(a1 + 48));
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_AnimationBlendTreeDefinition(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F7D30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7D30))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F7E48, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F7E58 = 0;
    qword_2540F7E68 = 0;
    qword_2540F7E70 = 0xFFFFFFFFLL;
    qword_2540F7E48 = (uint64_t)&off_24ED7DAA8;
    qword_2540F7E78 = (uint64_t)"AnimationBlendTreeDefinition";
    dword_2540F7E80 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540F7EB8 = 0;
    __cxa_guard_release(&qword_2540F7D30);
  }
  return &qword_2540F7E48;
}

void re::initInfo_AnimationBlendTreeDefinition(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xD8F7C530701B187CLL;
  v15[1] = "AnimationBlendTreeDefinition";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F7D38);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F7D38);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::AnimationBlendTreeNodeDescription>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "nodes";
      *(_QWORD *)(v7 + 16) = &qword_2540F7D90;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_2540F7D48 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      v9 = re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(1);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "connections";
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F7D50 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_BlendSpaceDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "blendSpace";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000003;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540F7D58 = v13;
      __cxa_guard_release(&qword_2540F7D38);
    }
  }
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540F7D48;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AnimationBlendTreeDefinition>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AnimationBlendTreeDefinition>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AnimationBlendTreeDefinition>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AnimationBlendTreeDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::IntrospectionInfo<re::DynamicArray<re::AnimationBlendTreeNodeDescription>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39[2];
  __int128 v40;
  const char *v41;
  __int128 v42;

  v0 = atomic_load((unsigned __int8 *)&qword_2540F7D40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7D40))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540F7D90);
    qword_2540F7D90 = (uint64_t)&off_24ED1F1D8;
    __cxa_guard_release(&qword_2540F7D40);
  }
  if ((_MergedGlobals_13 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540F7D28;
    if (qword_2540F7D28)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540F7D18);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7D18))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F7DD0, 0);
      *(uint64_t *)((char *)&qword_2540F7DE0 + 6) = 0;
      qword_2540F7DE0 = 0;
      *(_QWORD *)&xmmword_2540F7DF0 = 0;
      *((_QWORD *)&xmmword_2540F7DF0 + 1) = 0xFFFFFFFFLL;
      qword_2540F7DD0 = (uint64_t)&off_24ED7DAA8;
      qword_2540F7E00 = (uint64_t)"AnimationBlendTreeNodeDescription";
      dword_2540F7E08 = 0;
      *(_OWORD *)&qword_2540F7E10 = 0u;
      xmmword_2540F7E20 = 0u;
      *(_OWORD *)&qword_2540F7E30 = 0u;
      qword_2540F7E40 = 0;
      __cxa_guard_release(&qword_2540F7D18);
    }
    qword_2540F7D28 = (uint64_t)&qword_2540F7DD0;
    *(_QWORD *)&v42 = 0x9EA2DEB19834991ELL;
    *((_QWORD *)&v42 + 1) = "AnimationBlendTreeNodeDescription";
    re::StringID::destroyString((re::StringID *)&v42);
    xmmword_2540F7DF0 = v40;
    v4 = atomic_load((unsigned __int8 *)&qword_2540F7D20);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_2540F7D20);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "name";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_2540F7D60 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "type";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x1000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_2540F7D68 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v23 = re::IntrospectionInfo<re::StringID>::get(1, v22);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "path";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x2000000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_2540F7D70 = v24;
        v25 = re::introspectionAllocator((re *)v24);
        v27 = re::IntrospectionInfo<re::StringID>::get(1, v26);
        v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
        *(_DWORD *)v28 = 1;
        *(_QWORD *)(v28 + 8) = "defaultValue";
        *(_QWORD *)(v28 + 16) = v27;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0x3000000004;
        *(_DWORD *)(v28 + 40) = 0;
        *(_QWORD *)(v28 + 48) = 0;
        *(_QWORD *)(v28 + 56) = 0;
        *(_DWORD *)(v28 + 64) = 0;
        qword_2540F7D78 = v28;
        v29 = re::introspectionAllocator((re *)v28);
        v31 = re::IntrospectionInfo<re::StringID>::get(1, v30);
        v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 8) = "weightPath";
        *(_QWORD *)(v32 + 16) = v31;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 32) = 0x4000000005;
        *(_DWORD *)(v32 + 40) = 0;
        *(_QWORD *)(v32 + 48) = 0;
        *(_QWORD *)(v32 + 56) = 0;
        *(_DWORD *)(v32 + 64) = 0;
        qword_2540F7D80 = v32;
        v33 = re::introspectionAllocator((re *)v32);
        v35 = re::introspect_float((re *)1, v34);
        v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = "defaultWeight";
        *(_QWORD *)(v36 + 16) = v35;
        *(_QWORD *)(v36 + 24) = 0;
        *(_QWORD *)(v36 + 32) = 0x5000000006;
        *(_DWORD *)(v36 + 40) = 0;
        *(_QWORD *)(v36 + 48) = 0;
        *(_QWORD *)(v36 + 56) = 0;
        *(_DWORD *)(v36 + 64) = 0;
        qword_2540F7D88 = v36;
        __cxa_guard_release(&qword_2540F7D20);
      }
    }
    qword_2540F7DE0 = 0x5800000008;
    v1 = &qword_2540F7DD0;
    dword_2540F7DE8 = 8;
    word_2540F7DEC = 0;
    dword_2540F7E08 = 6;
    qword_2540F7E10 = (uint64_t)&qword_2540F7D60;
    unk_2540F7E18 = re::internal::defaultConstruct<re::AnimationBlendTreeNodeDescription>;
    *(_QWORD *)&xmmword_2540F7E20 = re::internal::defaultDestruct<re::AnimationBlendTreeNodeDescription>;
    *((_QWORD *)&xmmword_2540F7E20 + 1) = 0;
    qword_2540F7E30 = 0;
    unk_2540F7E38 = re::internal::defaultConstructV2<re::AnimationBlendTreeNodeDescription>;
    qword_2540F7E40 = (uint64_t)re::internal::defaultDestructV2<re::AnimationBlendTreeNodeDescription>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540F7DD0, v3);
    v42 = v40;
    if ((_MergedGlobals_13 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_13 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F7D90, 0);
      qword_2540F7DA0 = 0x2800000003;
      dword_2540F7DA8 = v5;
      word_2540F7DAC = 0;
      *(_QWORD *)&xmmword_2540F7DB0 = 0;
      *((_QWORD *)&xmmword_2540F7DB0 + 1) = 0xFFFFFFFFLL;
      qword_2540F7DC0 = (uint64_t)v1;
      unk_2540F7DC8 = 0;
      qword_2540F7D90 = (uint64_t)&off_24ED1F1D8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540F7D90, (const re::IntrospectionBase *)&v40);
      if ((BYTE8(v40) & 1) != 0)
        v8 = v41;
      else
        v8 = (char *)&v40 + 9;
      if ((_QWORD)v40 && (BYTE8(v40) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v40 + 40))();
      v38 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v39);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v37 + 1) = v10;
      }
      else
      {
        v42 = v38;
        re::TypeBuilder::beginListType((uint64_t)&v40, v39, 1, 0x28uLL, 8uLL, &v42);
        re::TypeBuilder::setConstructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v40, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v40, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v40, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v40, v11);
      }
      xmmword_2540F7DB0 = v37;
      re::StringID::destroyString((re::StringID *)v39);
    }
  }
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info = (uint64_t)&off_24ED1F970;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::introspect_RigGraphConnection((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info, 0);
    qword_2557FF0A8 = 0x2800000003;
    dword_2557FF0B0 = v10;
    word_2557FF0B4 = 0;
    *(_QWORD *)&xmmword_2557FF0B8 = 0;
    *((_QWORD *)&xmmword_2557FF0B8 + 1) = 0xFFFFFFFFLL;
    qword_2557FF0C8 = v9;
    unk_2557FF0D0 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info = (uint64_t)&off_24ED1F970;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_2557FF0B8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::AnimationBlendTreeDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_DWORD *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::AnimationBlendTreeDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 128);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 88);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 40));
  return re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3);
}

double re::internal::defaultConstructV2<re::AnimationBlendTreeDefinition>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::AnimationBlendTreeDefinition>(uint64_t a1)
{
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 128);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 88);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 40));
  return re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1);
}

uint64_t re::introspect_AnimationBlendTreeDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationBlendTreeDefinition", (uint64_t (*)(re::internal *))re::allocInfo_AnimationBlendTreeDefinition, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationBlendTreeDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationBlendTreeDefinition>, this);
}

uint64_t re::AnimationBlendTree<float>::createInstance(uint64_t a1, re::Allocator *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  uint64_t v32;
  __n128 v33;
  unint64_t v34;
  int v35;
  _DWORD *Runtime;
  size_t v37;
  uint64_t v38;
  __n128 v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  int v45;
  size_t v46;
  uint64_t v47;
  __n128 v48;
  unint64_t v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  size_t v53;
  uint64_t v54;
  __n128 v55;
  unint64_t v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  size_t v61;
  uint64_t v62;
  __n128 v63;
  unint64_t v64;
  _OWORD *v65;
  size_t v66;
  uint64_t v67;
  __n128 v68;
  unint64_t v69;
  _QWORD *v70;
  size_t v71;
  uint64_t v72;
  __n128 v73;
  unint64_t v74;
  size_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t i;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _anonymous_namespace_ *v99;
  _anonymous_namespace_ *v100;
  _anonymous_namespace_ *v101;
  _anonymous_namespace_ *v102;
  _anonymous_namespace_ *v103;
  _anonymous_namespace_ *v104;
  re::EvaluationContextManager *v105;
  uint64_t v106;
  const re::RigEnvironment *v107;
  re::EvaluationTree *v108;
  _QWORD v109[2];
  _QWORD v110[3];
  uint64_t v111;
  char v112;
  _QWORD v113[2];
  _QWORD v114[2];
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120[24];
  __int128 v121;
  __int128 v122;
  char v123[24];
  __int128 v124;
  __int128 v125;
  char v126[24];
  __int128 v127;
  __int128 v128;
  char v129[24];
  __int128 v130;
  __int128 v131;
  char v132[24];
  __int128 v133;
  __int128 v134;
  char v135[24];
  __int128 v136;
  __int128 v137;
  char v138[24];
  __int128 v139;
  __int128 v140;
  char v141[24];
  __int128 v142;
  __int128 v143;
  uint64_t v144[3];
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  _BYTE v153[14];
  __int16 v154;
  _BYTE v155[18];
  _BYTE v156[114];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 __s1;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 456, 8);
  *(_QWORD *)v6 = off_24ED1F350;
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v6 + 16) = v7;
  re::StringID::StringID((re::StringID *)(v6 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v6 + 40), (const re::DynamicString *)(a1 + 40));
  *(_BYTE *)(v6 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v6 = &off_24ED1F270;
  *(_QWORD *)(v6 + 80) = a1;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = v6 + 88;
  *(_DWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 416) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 356) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_DWORD *)(v6 + 8) = 47;
  *(_QWORD *)(v6 + 440) = 0;
  *(_QWORD *)(v6 + 448) = a2;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v6 + 344) = a2;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v6 + 344), 0);
    ++*(_DWORD *)(v6 + 368);
    *(_QWORD *)(v6 + 384) = a2;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v6 + 384), 0);
    ++*(_DWORD *)(v6 + 408);
  }
  else
  {
    v98 = a3;
    v9 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 6408, 8);
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)v9 = 0;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_DWORD *)(v9 + 24) = 0;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_DWORD *)(v9 + 64) = 0;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_DWORD *)(v9 + 104) = 0;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_DWORD *)(v9 + 144) = 0;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_QWORD *)(v9 + 280) = 0;
    *(_OWORD *)(v9 + 264) = 0u;
    *(_OWORD *)(v9 + 248) = 0u;
    *(_DWORD *)(v9 + 176) = 1;
    *(_QWORD *)(v9 + 192) = 0;
    *(_QWORD *)(v9 + 200) = 0;
    *(_DWORD *)(v9 + 208) = 0;
    *(_QWORD *)(v9 + 184) = 0;
    *(_QWORD *)(v9 + 224) = 0;
    *(_QWORD *)(v9 + 232) = 0;
    *(_DWORD *)(v9 + 240) = 0;
    *(_QWORD *)(v9 + 216) = 0;
    *(_OWORD *)(v9 + 248) = 0u;
    *(_OWORD *)(v9 + 264) = 0u;
    v10 = (char *)(v9 + 296);
    *(_DWORD *)(v9 + 280) = 0;
    bzero((void *)(v9 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v9 + 296));
    v11 = v9 + 2360;
    bzero((void *)(v9 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v9 + 2360));
    *(_OWORD *)(v9 + 5344) = 0u;
    *(_OWORD *)(v9 + 5360) = 0u;
    *(_OWORD *)(v9 + 5376) = 0u;
    *(_OWORD *)(v9 + 5328) = 0u;
    *(_DWORD *)(v9 + 5344) = 1;
    *(_QWORD *)(v9 + 5352) = 0;
    *(_QWORD *)(v9 + 5368) = 0;
    *(_QWORD *)(v9 + 5360) = 0;
    *(_DWORD *)(v9 + 5376) = 0;
    *(_OWORD *)(v9 + 5392) = 0u;
    *(_OWORD *)(v9 + 5408) = 0u;
    *(_OWORD *)(v9 + 5424) = 0u;
    *(_OWORD *)(v9 + 5440) = 0u;
    *(_OWORD *)(v9 + 5456) = 0u;
    *(_OWORD *)(v9 + 5472) = 0u;
    *(_OWORD *)(v9 + 5488) = 0u;
    *(_OWORD *)(v9 + 5504) = 0u;
    *(_OWORD *)(v9 + 5520) = 0u;
    *(_OWORD *)(v9 + 5536) = 0u;
    *(_OWORD *)(v9 + 5552) = 0u;
    *(_OWORD *)(v9 + 5568) = 0u;
    *(_QWORD *)(v9 + 5584) = 0;
    *(_DWORD *)(v9 + 5480) = 1;
    *(_QWORD *)(v9 + 5504) = 0;
    *(_DWORD *)(v9 + 5512) = 0;
    *(_QWORD *)(v9 + 5488) = 0;
    *(_QWORD *)(v9 + 5496) = 0;
    *(_QWORD *)(v9 + 5536) = 0;
    *(_DWORD *)(v9 + 5544) = 0;
    *(_QWORD *)(v9 + 5520) = 0;
    *(_QWORD *)(v9 + 5528) = 0;
    *(_QWORD *)(v9 + 5592) = 0;
    *(_OWORD *)(v9 + 5552) = 0u;
    *(_OWORD *)(v9 + 5568) = 0u;
    *(_QWORD *)(v9 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v9 + 5608) = -1;
    *(_DWORD *)(v9 + 5584) = 0;
    bzero((void *)(v9 + 5616), 0x318uLL);
    *(_QWORD *)(v6 + 440) = v9;
    v12 = *(_QWORD **)(v6 + 80);
    *(_QWORD *)v9 = a2;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v9, 0);
    ++*(_DWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 40) = a2;
    re::DynamicArray<int>::setCapacity((_QWORD *)(v9 + 40), 0);
    ++*(_DWORD *)(v9 + 64);
    v108 = (re::EvaluationTree *)(v9 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v9 + 296), a2);
    v105 = (re::EvaluationContextManager *)(v9 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v9 + 2360), a2);
    re::RigEnvironment::init((re::RigEnvironment *)(v9 + 5328), a2);
    *(_QWORD *)(v9 + 5432) = a2;
    v107 = (const re::RigEnvironment *)(v9 + 5328);
    *(_QWORD *)(v9 + 5448) = v9 + 5328;
    *(_BYTE *)(v9 + 5456) = 0;
    *(_QWORD *)(v9 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v9 + 5464), a2);
    v13 = v12[54];
    *(_QWORD *)(v9 + 80) = a2;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v9 + 80), v13);
    ++*(_DWORD *)(v9 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v9 + 80), v12[54]);
    if (v12[54])
    {
      v14 = 0;
      v15 = 0;
      v102 = (_anonymous_namespace_ *)(v9 + 904);
      v103 = (_anonymous_namespace_ *)(v9 + 584);
      v104 = (_anonymous_namespace_ *)(v9 + 2240);
      v10 = (char *)&v157 + 8;
      v100 = (_anonymous_namespace_ *)(v9 + 824);
      v101 = (_anonymous_namespace_ *)(v9 + 504);
      v99 = (_anonymous_namespace_ *)(v9 + 2160);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v12 + 10), v107, v108, a2, v15, (uint64_t)&v157);
        re::DynamicArray<re::RigDataValue>::add(v9 + 120, (const re::RigDataValue *)&v157);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v157);
        v16 = *(_QWORD *)(v9 + 152);
        v17 = *(_QWORD *)(v9 + 136) - 1;
        v11 = v16 + 288 * v17;
        switch(*(_BYTE *)(v11 + 32))
        {
          case 1:
            *(_DWORD *)v156 = 0;
            LODWORD(v157) = 0;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v9 + 1960), (uint64_t)&v157);
            *(_QWORD *)&v157 = *(_QWORD *)(v9 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 304), &v157);
            re::DynamicArray<int>::add((_QWORD *)(v9 + 624), v156);
            v18 = *(_QWORD *)(v9 + 336);
            v19 = *(_QWORD *)(v9 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v156 = 0;
            LODWORD(v157) = 1;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v9 + 2000), (uint64_t)&v157);
            *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 344), &v157);
            re::DynamicArray<int>::add((_QWORD *)(v9 + 664), v156);
            v18 = *(_QWORD *)(v9 + 376);
            v19 = *(_QWORD *)(v9 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v156 = 0;
            v11 = 2;
            LODWORD(v157) = 2;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v9 + 2040), (uint64_t)&v157);
            *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 384), &v157);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v9 + 704), (float *)v156);
            v20 = *(_QWORD *)(*(_QWORD *)(v9 + 416) + 8 * *(_QWORD *)(v9 + 400) - 8);
            v21 = v16 + 288 * v17;
            *(_BYTE *)(v21 + 96) = 2;
            goto LABEL_15;
          case 4:
            v158 = 0u;
            v159 = 0u;
            v157 = 0u;
            *(_DWORD *)v156 = 3;
            memset(&v156[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v9 + 2080), (uint64_t)v156);
            *(_QWORD *)v156 = *(_QWORD *)(v9 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 424), v156);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v9 + 744), (uint64_t)&v157);
            v18 = *(_QWORD *)(v9 + 456);
            v19 = *(_QWORD *)(v9 + 440);
            goto LABEL_14;
          case 5:
            v159 = 0u;
            __s1 = 0u;
            v157 = 0u;
            v158 = 0u;
            *(_DWORD *)v156 = 4;
            memset(&v156[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v9 + 2120), (uint64_t)v156);
            *(_QWORD *)v156 = *(_QWORD *)(v9 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 464), v156);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v9 + 784), (uint64_t)&v157);
            v18 = *(_QWORD *)(v9 + 496);
            v19 = *(_QWORD *)(v9 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v156 = xmmword_2260E5D70;
            LODWORD(v157) = 5;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v99, (uint64_t)&v157);
            *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v101, &v157);
            re::DynamicArray<re::Vector3<float>>::add(v100, (__n128 *)v156);
            v18 = *(_QWORD *)(v9 + 536);
            v19 = *(_QWORD *)(v9 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v156 = 0;
            LODWORD(v157) = 6;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v9 + 2200), (uint64_t)&v157);
            *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 544), &v157);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v9 + 864), v156);
            v18 = *(_QWORD *)(v9 + 576);
            v19 = *(_QWORD *)(v9 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v156 = 0u;
            LODWORD(v157) = 7;
            v158 = 0uLL;
            *((_QWORD *)&v157 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v104, (uint64_t)&v157);
            *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v103, &v157);
            re::DynamicArray<re::Vector3<float>>::add(v102, (__n128 *)v156);
            v18 = *(_QWORD *)(v9 + 616);
            v19 = *(_QWORD *)(v9 + 600);
LABEL_14:
            v20 = *(_QWORD *)(v18 + 8 * v19 - 8);
            v21 = v16 + 288 * v17;
            *(_BYTE *)(v21 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v21 + 176) = v20;
            goto LABEL_16;
          case 0xA:
            v11 = *(_QWORD *)(v11 + 184);
            re::RigHierarchy::deinit((re::RigHierarchy *)v11);
            re::RigHierarchy::init((re::RigHierarchy *)v11, v107, (const re::Skeleton *)(MEMORY[0x50] + 24), a2, v108);
            re::RigHierarchy::getEvaluationSkeletalPose((re::RigHierarchy *)v11, a2, 0, (uint64_t)&v166);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)&v166, v105, &v147);
            v22 = *(_QWORD *)(v9 + 96);
            if (v22 <= v15)
              goto LABEL_175;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v9 + 112) + v14), &v147);
            if (v147)
            {
              if (v148)
              {
                (*(void (**)(void))(*(_QWORD *)v147 + 40))();
                v148 = 0;
                v149 = 0;
              }
              v147 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v166);
LABEL_16:
            ++v15;
            v14 += 24;
            if (v15 >= v12[54])
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v16 + 288 * v17 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v23 = *(char **)(v16 + 288 * v17 + 48);
              if (v23 == "SRT" || !strcmp(v23, "SRT"))
              {
                *(_OWORD *)v156 = 0u;
                LODWORD(v157) = 7;
                v158 = 0uLL;
                *((_QWORD *)&v157 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v104, (uint64_t)&v157);
                *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v103, &v157);
                re::DynamicArray<re::Vector3<float>>::add(v102, (__n128 *)v156);
                v96 = *(_QWORD *)(*(_QWORD *)(v9 + 616) + 8 * *(_QWORD *)(v9 + 600) - 8);
                *(_OWORD *)v156 = xmmword_2260E5D70;
                LODWORD(v157) = 5;
                v158 = 0uLL;
                *((_QWORD *)&v157 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v99, (uint64_t)&v157);
                *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v101, &v157);
                re::DynamicArray<re::Vector3<float>>::add(v100, (__n128 *)v156);
                v97 = *(_QWORD *)(*(_QWORD *)(v9 + 536) + 8 * *(_QWORD *)(v9 + 520) - 8);
                *(_OWORD *)v156 = 0u;
                LODWORD(v157) = 7;
                v158 = 0uLL;
                *((_QWORD *)&v157 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v104, (uint64_t)&v157);
                *(_QWORD *)&v157 = *(_QWORD *)(v9 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v103, &v157);
                re::DynamicArray<re::Vector3<float>>::add(v102, (__n128 *)v156);
                v24 = *(_QWORD *)(*(_QWORD *)(v9 + 616) + 8 * *(_QWORD *)(v9 + 600) - 8);
                *(_QWORD *)v156 = "scale";
                *(_QWORD *)&v156[8] = 5;
                re::RigDataValue::attributeValue(v11, (uint64_t)v156, (uint64_t)&v157);
                v25 = *((_QWORD *)&v157 + 1);
                *(_BYTE *)(*((_QWORD *)&v157 + 1) + 96) = 2;
                *(_QWORD *)(v25 + 176) = v96;
                if (!(_BYTE)v157 && *((_QWORD *)&v158 + 1) && (v159 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v158 + 1) + 40))();
                *(_QWORD *)v156 = "rotation";
                *(_QWORD *)&v156[8] = 8;
                re::RigDataValue::attributeValue(v11, (uint64_t)v156, (uint64_t)&v157);
                v26 = *((_QWORD *)&v157 + 1);
                *(_BYTE *)(*((_QWORD *)&v157 + 1) + 96) = 2;
                *(_QWORD *)(v26 + 176) = v97;
                if (!(_BYTE)v157 && *((_QWORD *)&v158 + 1) && (v159 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v158 + 1) + 40))();
                *(_QWORD *)v156 = "translation";
                *(_QWORD *)&v156[8] = 11;
                re::RigDataValue::attributeValue(v11, (uint64_t)v156, (uint64_t)&v157);
                v27 = *((_QWORD *)&v157 + 1);
                *(_BYTE *)(*((_QWORD *)&v157 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v24;
                if (!(_BYTE)v157 && *((_QWORD *)&v158 + 1) && (v159 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v158 + 1) + 40))();
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v9 + 5432, v12 + 10, (uint64_t)v108, v105, *(_QWORD **)(v9 + 152), *(_QWORD *)(v9 + 136), (uint64_t)v156);
    re::RigGraphCompilation::operator=((_QWORD *)(v9 + 160), &v156[8]);
    if (!*(_QWORD *)(v9 + 272))
      goto LABEL_176;
    v29 = *(_QWORD *)(v9 + 288);
    if (*(_BYTE *)(v29 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v29 + 184), a2, 0, (uint64_t)&v157);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v157, v105, (uint64_t *)&v166);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v9 + 6384), (uint64_t *)&v166);
      if ((_QWORD)v166)
      {
        if (*((_QWORD *)&v166 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v166 + 40))();
          *((_QWORD *)&v166 + 1) = 0;
          *(_QWORD *)&v167 = 0;
        }
        *(_QWORD *)&v166 = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v157);
    }
    re::EvaluationContextManager::buildEvaluationContext(v105);
    if (!*(_BYTE *)(v9 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v105);
    re::RigGraphCompilation::setRuntimeContext(v9 + 160, (re::EvaluationContext *)(v9 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v105, (uint64_t)&v157);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, re::Allocator *, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v9 + 5600) + 32))(&v147, v9 + 5600, a2, v108, &v157);
    v30 = (_QWORD *)(v9 + 248);
    if (v12[54])
    {
      v22 = 0;
      v11 = 0;
      v15 = 32;
      while (1)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v12 + 10), v107, v108, a2, v11, (uint64_t)&v157);
        switch((char)v159)
        {
          case 1:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
            {
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_160:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_161:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_162:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_163:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_164:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_165:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_166:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_167:
              re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v34);
              _os_crash();
              __break(1u);
LABEL_168:
              re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v40);
              _os_crash();
              __break(1u);
LABEL_169:
              re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v44);
              _os_crash();
              __break(1u);
LABEL_170:
              re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v49);
              _os_crash();
              __break(1u);
LABEL_171:
              re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v56);
              _os_crash();
              __break(1u);
LABEL_172:
              re::internal::assertLog((re::internal *)6, v62, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v64);
              _os_crash();
              __break(1u);
LABEL_173:
              re::internal::assertLog((re::internal *)6, v67, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v69);
              _os_crash();
              __break(1u);
LABEL_174:
              re::internal::assertLog((re::internal *)6, v72, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v74);
              _os_crash();
              __break(1u);
LABEL_175:
              v144[0] = 0;
              __s1 = 0u;
              v161 = 0u;
              v158 = 0u;
              v159 = 0u;
              v157 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v156 = 136315906;
              *(_QWORD *)&v156[4] = "operator[]";
              *(_WORD *)&v156[12] = 1024;
              *(_DWORD *)&v156[14] = 789;
              *(_WORD *)&v156[18] = 2048;
              *(_QWORD *)&v156[20] = v15;
              *(_WORD *)&v156[28] = 2048;
              *(_QWORD *)&v156[30] = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_176:
              re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
              _os_crash();
              __break(1u);
LABEL_177:
              v110[0] = 0;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v166 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v152 = 136315906;
              *(_QWORD *)v153 = "operator[]";
              *(_WORD *)&v153[8] = 1024;
              *(_DWORD *)&v153[10] = 797;
              v154 = 2048;
              *(_QWORD *)v155 = v11;
              *(_WORD *)&v155[8] = 2048;
              *(_QWORD *)&v155[10] = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_178:
              re::internal::assertLog((re::internal *)6, v86, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v89);
              _os_crash();
              __break(1u);
            }
            v31 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v31;
            v33 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v141);
            if (!v141[0] && (_QWORD)v142)
            {
              if ((BYTE8(v142) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v142 + 40))(v33);
              v142 = 0u;
              v143 = 0u;
            }
            v34 = *(_QWORD *)(v9 + 232);
            if (v34 <= v11)
              goto LABEL_167;
            v35 = v162;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v30 + v22, v32);
LABEL_67:
            *Runtime = v35;
LABEL_131:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v157);
            ++v11;
            v90 = v12[54];
            v22 += 288;
            v15 += 40;
            if (v11 >= v90)
            {
              *(_QWORD *)&v157 = 0;
              if (v90)
              {
                for (i = 0; i < v90; *(_QWORD *)&v157 = i)
                {
                  v92 = v12[56];
                  if (*(_QWORD *)(v92 + 16 * i) <= 1uLL)
                  {
                    v93 = *(char **)(v92 + 16 * i + 8);
                    if (v93 == "" || !*v93)
                    {
                      re::DynamicArray<unsigned long>::add((_QWORD *)v9, &v157);
                      i = v157;
                      v90 = v12[54];
                    }
                  }
                  ++i;
                }
              }
              goto LABEL_149;
            }
            break;
          case 2:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_160;
            v37 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v37;
            v39 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v138);
            if (!v138[0] && (_QWORD)v139)
            {
              if ((BYTE8(v139) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v139 + 40))(v39);
              v139 = 0u;
              v140 = 0u;
            }
            v40 = *(_QWORD *)(v9 + 232);
            if (v40 <= v11)
              goto LABEL_168;
            v35 = v162;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v30 + v22, v38);
            goto LABEL_67;
          case 3:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_161;
            v41 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v144);
            if (!LOBYTE(v144[0]) && (_QWORD)v145)
            {
              if ((BYTE8(v145) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v145 + 40))(v43);
              v145 = 0u;
              v146 = 0u;
            }
            v44 = *(_QWORD *)(v9 + 232);
            if (v44 <= v11)
              goto LABEL_169;
            v45 = v162;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v30 + v22, v42) = v45;
            goto LABEL_131;
          case 4:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_162;
            v46 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v46;
            v48 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v129);
            if (!v129[0] && (_QWORD)v130)
            {
              if ((BYTE8(v130) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v130 + 40))(v48);
              v130 = 0u;
              v131 = 0u;
            }
            v49 = *(_QWORD *)(v9 + 232);
            if (v49 <= v11)
              goto LABEL_170;
            v50 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v30 + v22, v47);
            v52 = v163;
            v51 = v164;
            *v50 = v162;
            v50[1] = v52;
            v50[2] = v51;
            goto LABEL_131;
          case 5:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_163;
            v53 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v53;
            v55 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v126);
            if (!v126[0] && (_QWORD)v127)
            {
              if ((BYTE8(v127) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v127 + 40))(v55);
              v127 = 0u;
              v128 = 0u;
            }
            v56 = *(_QWORD *)(v9 + 232);
            if (v56 <= v11)
              goto LABEL_171;
            v57 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v30 + v22, v54);
            v58 = v165;
            v60 = v162;
            v59 = v163;
            v57[2] = v164;
            v57[3] = v58;
            *v57 = v60;
            v57[1] = v59;
            goto LABEL_131;
          case 6:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_164;
            v61 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v61;
            v63 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v123);
            if (!v123[0] && (_QWORD)v124)
            {
              if ((BYTE8(v124) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v124 + 40))(v63);
              v124 = 0u;
              v125 = 0u;
            }
            v64 = *(_QWORD *)(v9 + 232);
            if (v64 <= v11)
              goto LABEL_172;
            v65 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v30 + v22, v62);
            goto LABEL_116;
          case 7:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_165;
            v66 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v66;
            v68 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v135);
            if (!v135[0] && (_QWORD)v136)
            {
              if ((BYTE8(v136) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v136 + 40))(v68);
              v136 = 0u;
              v137 = 0u;
            }
            v69 = *(_QWORD *)(v9 + 232);
            if (v69 <= v11)
              goto LABEL_173;
            v70 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v30 + v22, v67);
            *v70 = v162;
            goto LABEL_131;
          case 8:
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_166;
            v71 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v71;
            v73 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v132);
            if (!v132[0] && (_QWORD)v133)
            {
              if ((BYTE8(v133) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v133 + 40))(v73);
              v133 = 0u;
              v134 = 0u;
            }
            v74 = *(_QWORD *)(v9 + 232);
            if (v74 <= v11)
              goto LABEL_174;
            v65 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v30 + v22, v72);
LABEL_116:
            *v65 = v162;
            goto LABEL_131;
          case 13:
            if ((*((_QWORD *)&v159 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_131;
            }
            v10 = (char *)v12[12];
            if ((unint64_t)v10 <= v11)
              goto LABEL_177;
            v75 = strlen(*(const char **)(v12[14] + v15));
            *(_QWORD *)&v166 = *(_QWORD *)(v12[14] + v15);
            *((_QWORD *)&v166 + 1) = v75;
            v76 = re::RigDataValue::setBuildTimeValueWithString(&v157, (uint64_t)&v166, (uint64_t)v120);
            if (!v120[0] && (_QWORD)v121)
            {
              if ((BYTE8(v121) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v121 + 40))(v76);
              v121 = 0u;
              v122 = 0u;
            }
            v114[0] = "scale";
            v114[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v157, (uint64_t)v114, (uint64_t)&v166);
            v78 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*((uint64_t *)&v166 + 1), v77);
            v79 = *v78;
            v106 = v78[1];
            v113[0] = "rotation";
            v113[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v157, (uint64_t)v113, (uint64_t)&v152);
            v81 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v153[4], v80);
            v82 = *v81;
            v83 = v81[1];
            v109[0] = "translation";
            v109[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v157, (uint64_t)v109, (uint64_t)v110);
            v85 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v110[1], v84);
            v88 = *v85;
            v87 = v85[1];
            *(_QWORD *)&v115 = v79;
            *((_QWORD *)&v115 + 1) = v106;
            v116 = v82;
            v117 = v83;
            v118 = v88;
            v119 = v87;
            if (!LOBYTE(v110[0]) && v111 && (v112 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v111 + 40))();
            v30 = (_QWORD *)(v9 + 248);
            if (!(_BYTE)v152 && *(_QWORD *)&v155[4] && (v155[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v155[4] + 40))();
            if (!(_BYTE)v166 && *((_QWORD *)&v167 + 1) && (v168 & 1) != 0)
              (*(void (**)(void))(**((_QWORD **)&v167 + 1) + 40))();
            v89 = *(_QWORD *)(v9 + 232);
            if (v89 <= v11)
              goto LABEL_178;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v9 + 248) + v22, &v115);
            goto LABEL_131;
          default:
            goto LABEL_131;
        }
      }
    }
LABEL_149:
    if (!(_BYTE)v147 && v150 && (v151 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v150 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v156);
    v8 = v6 + 88;
    a3 = v98;
  }
  v94 = *(_QWORD *)(v6 + 80);
  if (*(_DWORD *)(v94 + 536))
    re::BlendSpace::init(v8, (uint64_t)a2, (unint64_t *)(v94 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    re::AnimationBlendTreeInstance<float>::initBindPoints<float>(v6 + 280, (uint64_t)a2, *(_QWORD *)(v6 + 80) + 376, (re::BindNode **)a3);
    re::AnimationBlendTreeInstance<float>::initBindPoints<float>(v6 + 304, (uint64_t)a2, *(_QWORD *)(v6 + 80) + 416, (re::BindNode **)a3);
  }
  return v6;
}

uint64_t re::AnimationBlendTree<double>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  const re::IntrospectionBase *v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  _anonymous_namespace_ *v124;
  re::EvaluationContextManager *v125;
  uint64_t v126;
  const re::RigEnvironment *v127;
  re::EvaluationTree *v128;
  uint64_t v129;
  _QWORD v130[2];
  _QWORD v131[3];
  uint64_t v132;
  char v133;
  _QWORD v134[2];
  _QWORD v135[2];
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141[24];
  __int128 v142;
  __int128 v143;
  char v144[24];
  __int128 v145;
  __int128 v146;
  char v147[24];
  __int128 v148;
  __int128 v149;
  char v150[24];
  __int128 v151;
  __int128 v152;
  char v153[24];
  __int128 v154;
  __int128 v155;
  char v156[24];
  __int128 v157;
  __int128 v158;
  char v159[24];
  __int128 v160;
  __int128 v161;
  char v162[24];
  __int128 v163;
  __int128 v164;
  uint64_t v165[3];
  __int128 v166;
  __int128 v167;
  unint64_t v168;
  size_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  int v173;
  _BYTE v174[14];
  __int16 v175;
  _BYTE v176[18];
  _BYTE v177[114];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 __s1;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187[6];
  __int128 v188;
  __int128 v189;
  uint64_t v190;

  p_info = a2;
  v190 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F3C0;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v129 = v9;
  v126 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v129 + 368);
    *(_QWORD *)(v129 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v129 + 384), 0);
    v11 = v129;
    ++*(_DWORD *)(v129 + 408);
  }
  else
  {
    v118 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v128 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v125 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v127 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v123 = (_anonymous_namespace_ *)(v13 + 904);
      v124 = (_anonymous_namespace_ *)(v13 + 584);
      v121 = (_anonymous_namespace_ *)(v13 + 504);
      v122 = (_anonymous_namespace_ *)(v13 + 2240);
      v119 = (_anonymous_namespace_ *)(v13 + 2160);
      v120 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v127, v128, (re::Allocator *)p_info, v17, (uint64_t)&v178);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v178);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v178);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v177 = 0;
            LODWORD(v178) = 0;
            v179 = 0uLL;
            *((_QWORD *)&v178 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v178);
            *(_QWORD *)&v178 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v178);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v177);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v177 = 0;
            LODWORD(v178) = 1;
            v179 = 0uLL;
            *((_QWORD *)&v178 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v178);
            *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v178);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v177);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v177 = 0;
            LODWORD(v178) = 2;
            v179 = 0uLL;
            *((_QWORD *)&v178 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v178);
            *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v178);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v177);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v179 = 0u;
            v180 = 0u;
            v178 = 0u;
            *(_DWORD *)v177 = 3;
            memset(&v177[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v177);
            *(_QWORD *)v177 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v177);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v178);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v180 = 0u;
            __s1 = 0u;
            v178 = 0u;
            v179 = 0u;
            *(_DWORD *)v177 = 4;
            memset(&v177[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v177);
            *(_QWORD *)v177 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v177);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v178);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v177 = xmmword_2260E5D70;
            LODWORD(v178) = 5;
            v179 = 0uLL;
            *((_QWORD *)&v178 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v119, (uint64_t)&v178);
            *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v121, &v178);
            re::DynamicArray<re::Vector3<float>>::add(v120, (__n128 *)v177);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v177 = 0;
            LODWORD(v178) = 6;
            v179 = 0uLL;
            *((_QWORD *)&v178 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v178);
            *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v178);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v177);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v177 = 0u;
            LODWORD(v178) = 7;
            v179 = 0uLL;
            *((_QWORD *)&v178 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v122, (uint64_t)&v178);
            *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v124, &v178);
            re::DynamicArray<re::Vector3<float>>::add(v123, (__n128 *)v177);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v127, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v128);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v187);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v187, v125, &v168);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v168);
            p_info = (__objc2_class_ro **)v126;
            if (v168)
            {
              if (v169)
              {
                (*(void (**)(void))(*(_QWORD *)v168 + 40))();
                v169 = 0;
                v170 = 0;
              }
              v168 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v187);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v177 = 0u;
                LODWORD(v178) = 7;
                v179 = 0uLL;
                *((_QWORD *)&v178 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v122, (uint64_t)&v178);
                *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v124, &v178);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v123, (__n128 *)v177);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v177 = xmmword_2260E5D70;
                LODWORD(v178) = 5;
                v179 = 0uLL;
                *((_QWORD *)&v178 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v119, (uint64_t)&v178);
                *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v121, &v178);
                re::DynamicArray<re::Vector3<float>>::add(v120, (__n128 *)v177);
                v117 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v177 = 0u;
                LODWORD(v178) = 7;
                v179 = 0uLL;
                *((_QWORD *)&v178 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v122, (uint64_t)&v178);
                *(_QWORD *)&v178 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v124, &v178);
                re::DynamicArray<re::Vector3<float>>::add(v123, (__n128 *)v177);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v177 = "scale";
                *(_QWORD *)&v177[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v177, (uint64_t)&v178);
                v27 = *((_QWORD *)&v178 + 1);
                *(_BYTE *)(*((_QWORD *)&v178 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v116;
                if (!(_BYTE)v178 && *((_QWORD *)&v179 + 1) && (v180 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v179 + 1) + 40))();
                *(_QWORD *)v177 = "rotation";
                *(_QWORD *)&v177[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v177, (uint64_t)&v178);
                v28 = *((_QWORD *)&v178 + 1);
                *(_BYTE *)(*((_QWORD *)&v178 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v117;
                if (!(_BYTE)v178 && *((_QWORD *)&v179 + 1) && (v180 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v179 + 1) + 40))();
                *(_QWORD *)v177 = "translation";
                *(_QWORD *)&v177[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v177, (uint64_t)&v178);
                v29 = *((_QWORD *)&v178 + 1);
                *(_BYTE *)(*((_QWORD *)&v178 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v178 && *((_QWORD *)&v179 + 1) && (v180 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v179 + 1) + 40))();
                p_info = (__objc2_class_ro **)v126;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v128, v125, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v177);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v177[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v178);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v178, v125, v187);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v187);
      if (v187[0])
      {
        if (v187[1])
        {
          (*(void (**)(void))(*(_QWORD *)v187[0] + 40))();
          v187[1] = 0;
          v187[2] = 0;
        }
        v187[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v178);
    }
    re::EvaluationContextManager::buildEvaluationContext(v125);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v125);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v125, (uint64_t)&v178);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v168, v13 + 5600, p_info, v128, &v178);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v127, v128, (re::Allocator *)p_info, v14, (uint64_t)&v178);
        switch((char)v180)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v162);
            p_info = (__objc2_class_ro **)v126;
            if (!v162[0] && (_QWORD)v163)
            {
              if ((BYTE8(v163) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v163 + 40))(v37);
              v163 = 0u;
              v164 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v183;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v159);
            p_info = (__objc2_class_ro **)v126;
            if (!v159[0] && (_QWORD)v160)
            {
              if ((BYTE8(v160) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v160 + 40))(v43);
              v160 = 0u;
              v161 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v183;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v165);
            p_info = (__objc2_class_ro **)v126;
            if (!LOBYTE(v165[0]) && (_QWORD)v166)
            {
              if ((BYTE8(v166) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v166 + 40))(v47);
              v166 = 0u;
              v167 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v183;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v150);
            p_info = (__objc2_class_ro **)v126;
            if (!v150[0] && (_QWORD)v151)
            {
              if ((BYTE8(v151) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v151 + 40))(v52);
              v151 = 0u;
              v152 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v184;
            v55 = v185;
            *v54 = v183;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v147);
            p_info = (__objc2_class_ro **)v126;
            if (!v147[0] && (_QWORD)v148)
            {
              if ((BYTE8(v148) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v148 + 40))(v59);
              v148 = 0u;
              v149 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v186;
            v64 = v183;
            v63 = v184;
            v61[2] = v185;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v144);
            p_info = (__objc2_class_ro **)v126;
            if (!v144[0] && (_QWORD)v145)
            {
              if ((BYTE8(v145) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v145 + 40))(v67);
              v145 = 0u;
              v146 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v156);
            p_info = (__objc2_class_ro **)v126;
            if (!v156[0] && (_QWORD)v157)
            {
              if ((BYTE8(v157) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v157 + 40))(v72);
              v157 = 0u;
              v158 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v183;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v153);
            p_info = (__objc2_class_ro **)v126;
            if (!v153[0] && (_QWORD)v154)
            {
              if ((BYTE8(v154) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v154 + 40))(v77);
              v154 = 0u;
              v155 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v183;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v180 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v187[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v187[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v178, (uint64_t)v187, (uint64_t)v141);
            if (!v141[0] && (_QWORD)v142)
            {
              if ((BYTE8(v142) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v142 + 40))(v80);
              v142 = 0u;
              v143 = 0u;
            }
            v135[0] = "scale";
            v135[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v178, (uint64_t)v135, (uint64_t)v187);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v187[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v134[0] = "rotation";
            v134[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v178, (uint64_t)v134, (uint64_t)&v173);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v174[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v130[0] = "translation";
            v130[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v178, (uint64_t)v130, (uint64_t)v131);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v131[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v136 = v84;
            *((_QWORD *)&v136 + 1) = v83;
            v137 = v88;
            v138 = v87;
            v139 = v93;
            v140 = v92;
            if (!LOBYTE(v131[0]) && v132 && (v133 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v132 + 40))();
            p_info = (__objc2_class_ro **)v126;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v173 && *(_QWORD *)&v176[4] && (v176[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v176[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v187[0]) && v187[3] && (v187[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v187[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v136);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v178);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v178 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v178 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v178);
                    i = v178;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v168 && v171 && (v172 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v171 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v177);
    a3 = v118;
    v11 = v129;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v129 + 80);
    re::FixedArray<re::BindPoint>::init<>(v129 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v168 = v3;
        v169 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v168, (uint64_t)v177);
        v105 = *(_QWORD *)(v129 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v129 + 296) + v17);
        *v107 = *(_QWORD *)v177;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v177[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v177[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v177[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v168 = 0;
      __s1 = 0u;
      v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v187[0]) = 136315906;
      *(uint64_t *)((char *)v187 + 4) = (uint64_t)"operator[]";
      WORD2(v187[1]) = 1024;
      *(_DWORD *)((char *)&v187[1] + 6) = 797;
      WORD1(v187[2]) = 2048;
      *(uint64_t *)((char *)&v187[2] + 4) = v14;
      WORD2(v187[3]) = 2048;
      *(uint64_t *)((char *)&v187[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v165[0] = 0;
      __s1 = 0u;
      v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v187[0]) = 136315906;
      *(uint64_t *)((char *)v187 + 4) = (uint64_t)"operator[]";
      WORD2(v187[1]) = 1024;
      *(_DWORD *)((char *)&v187[1] + 6) = 468;
      WORD1(v187[2]) = 2048;
      *(uint64_t *)((char *)&v187[2] + 4) = v14;
      WORD2(v187[3]) = 2048;
      *(uint64_t *)((char *)&v187[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v129 + 80);
    re::FixedArray<re::BindPoint>::init<>(v129 + 304, v126, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v177[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v114);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v168 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v169 = v112;
        re::BindNode::bindPointWithOverride(v100, re::introspect<double>(void)::info, (uint64_t *)&v168, (uint64_t)v177);
        v103 = *(__guard **)(v129 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v129 + 320) + v14);
        *v113 = *(_QWORD *)v177;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v177[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v177[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v177[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v129;
      }
LABEL_179:
      v168 = 0;
      __s1 = 0u;
      v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v187[0]) = 136315906;
      *(uint64_t *)((char *)v187 + 4) = (uint64_t)"operator[]";
      WORD2(v187[1]) = 1024;
      *(_DWORD *)((char *)&v187[1] + 6) = 797;
      WORD1(v187[2]) = 2048;
      *(uint64_t *)((char *)&v187[2] + 4) = v3;
      WORD2(v187[3]) = 2048;
      *(uint64_t *)((char *)&v187[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v165[0] = 0;
      __s1 = 0u;
      v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v187[0]) = 136315906;
      *(uint64_t *)((char *)v187 + 4) = (uint64_t)"operator[]";
      WORD2(v187[1]) = 1024;
      *(_DWORD *)((char *)&v187[1] + 6) = 468;
      WORD1(v187[2]) = 2048;
      *(uint64_t *)((char *)&v187[2] + 4) = v3;
      WORD2(v187[3]) = 2048;
      *(uint64_t *)((char *)&v187[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v165[0] = 0;
      __s1 = 0u;
      v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v177 = 136315906;
      *(_QWORD *)&v177[4] = "operator[]";
      *(_WORD *)&v177[12] = 1024;
      *(_DWORD *)&v177[14] = 789;
      *(_WORD *)&v177[18] = 2048;
      *(_QWORD *)&v177[20] = v17;
      *(_WORD *)&v177[28] = 2048;
      *(_QWORD *)&v177[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v131[0] = 0;
      v188 = 0u;
      v189 = 0u;
      memset(v187, 0, sizeof(v187));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v173 = 136315906;
      *(_QWORD *)v174 = "operator[]";
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)&v174[10] = 797;
      v175 = 2048;
      *(_QWORD *)v176 = v14;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v129;
}

uint64_t re::AnimationBlendTree<re::Vector2<float>>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  re::EvaluationContextManager *v124;
  uint64_t v125;
  const re::RigEnvironment *v126;
  re::EvaluationTree *v127;
  uint64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[24];
  __int128 v141;
  __int128 v142;
  char v143[24];
  __int128 v144;
  __int128 v145;
  char v146[24];
  __int128 v147;
  __int128 v148;
  char v149[24];
  __int128 v150;
  __int128 v151;
  char v152[24];
  __int128 v153;
  __int128 v154;
  char v155[24];
  __int128 v156;
  __int128 v157;
  char v158[24];
  __int128 v159;
  __int128 v160;
  char v161[24];
  __int128 v162;
  __int128 v163;
  uint64_t v164[3];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int v172;
  _BYTE v173[14];
  __int16 v174;
  _BYTE v175[18];
  _BYTE v176[114];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 __s1;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[6];
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  p_info = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F490;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v128 = v9;
  v125 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v128 + 368);
    *(_QWORD *)(v128 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v128 + 384), 0);
    v11 = v128;
    ++*(_DWORD *)(v128 + 408);
  }
  else
  {
    v117 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v127 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v124 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v126 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v122 = (_anonymous_namespace_ *)(v13 + 904);
      v123 = (_anonymous_namespace_ *)(v13 + 584);
      v120 = (_anonymous_namespace_ *)(v13 + 504);
      v121 = (_anonymous_namespace_ *)(v13 + 2240);
      v118 = (_anonymous_namespace_ *)(v13 + 2160);
      v119 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v126, v127, (re::Allocator *)p_info, v17, (uint64_t)&v177);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v177);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 0;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v176);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 1;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v176);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 2;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v177);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v176);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v178 = 0u;
            v179 = 0u;
            v177 = 0u;
            *(_DWORD *)v176 = 3;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v176);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v179 = 0u;
            __s1 = 0u;
            v177 = 0u;
            v178 = 0u;
            *(_DWORD *)v176 = 4;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v176);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v176 = xmmword_2260E5D70;
            LODWORD(v177) = 5;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v120, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v176 = 0;
            LODWORD(v177) = 6;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v177);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v176);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v176 = 0u;
            LODWORD(v177) = 7;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v123, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v126, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v127);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v186);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v186, v124, &v167);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v167);
            p_info = (__objc2_class_ro **)v125;
            if (v167)
            {
              if (v168)
              {
                (*(void (**)(void))(*(_QWORD *)v167 + 40))();
                v168 = 0;
                v169 = 0;
              }
              v167 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v186);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v115 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v176 = xmmword_2260E5D70;
                LODWORD(v177) = 5;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v120, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v176 = "scale";
                *(_QWORD *)&v176[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v27 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v115;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "rotation";
                *(_QWORD *)&v176[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v28 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v116;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "translation";
                *(_QWORD *)&v176[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v29 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                p_info = (__objc2_class_ro **)v125;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v127, v124, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v176);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v176[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v177);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v177, v124, v186);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v186);
      if (v186[0])
      {
        if (v186[1])
        {
          (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
          v186[1] = 0;
          v186[2] = 0;
        }
        v186[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v177);
    }
    re::EvaluationContextManager::buildEvaluationContext(v124);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v124);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v124, (uint64_t)&v177);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v167, v13 + 5600, p_info, v127, &v177);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v126, v127, (re::Allocator *)p_info, v14, (uint64_t)&v177);
        switch((char)v179)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v161);
            p_info = (__objc2_class_ro **)v125;
            if (!v161[0] && (_QWORD)v162)
            {
              if ((BYTE8(v162) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v162 + 40))(v37);
              v162 = 0u;
              v163 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v158);
            p_info = (__objc2_class_ro **)v125;
            if (!v158[0] && (_QWORD)v159)
            {
              if ((BYTE8(v159) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v159 + 40))(v43);
              v159 = 0u;
              v160 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v164);
            p_info = (__objc2_class_ro **)v125;
            if (!LOBYTE(v164[0]) && (_QWORD)v165)
            {
              if ((BYTE8(v165) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v165 + 40))(v47);
              v165 = 0u;
              v166 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v182;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v149);
            p_info = (__objc2_class_ro **)v125;
            if (!v149[0] && (_QWORD)v150)
            {
              if ((BYTE8(v150) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v150 + 40))(v52);
              v150 = 0u;
              v151 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v183;
            v55 = v184;
            *v54 = v182;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v146);
            p_info = (__objc2_class_ro **)v125;
            if (!v146[0] && (_QWORD)v147)
            {
              if ((BYTE8(v147) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v147 + 40))(v59);
              v147 = 0u;
              v148 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v185;
            v64 = v182;
            v63 = v183;
            v61[2] = v184;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v143);
            p_info = (__objc2_class_ro **)v125;
            if (!v143[0] && (_QWORD)v144)
            {
              if ((BYTE8(v144) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v144 + 40))(v67);
              v144 = 0u;
              v145 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v155);
            p_info = (__objc2_class_ro **)v125;
            if (!v155[0] && (_QWORD)v156)
            {
              if ((BYTE8(v156) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v156 + 40))(v72);
              v156 = 0u;
              v157 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v182;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v152);
            p_info = (__objc2_class_ro **)v125;
            if (!v152[0] && (_QWORD)v153)
            {
              if ((BYTE8(v153) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v153 + 40))(v77);
              v153 = 0u;
              v154 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v182;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v179 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v140);
            if (!v140[0] && (_QWORD)v141)
            {
              if ((BYTE8(v141) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v141 + 40))(v80);
              v141 = 0u;
              v142 = 0u;
            }
            v134[0] = "scale";
            v134[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v134, (uint64_t)v186);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v186[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v133[0] = "rotation";
            v133[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v133, (uint64_t)&v172);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v173[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v129[0] = "translation";
            v129[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v129, (uint64_t)v130);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v130[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v135 = v84;
            *((_QWORD *)&v135 + 1) = v83;
            v136 = v88;
            v137 = v87;
            v138 = v93;
            v139 = v92;
            if (!LOBYTE(v130[0]) && v131 && (v132 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v131 + 40))();
            p_info = (__objc2_class_ro **)v125;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v172 && *(_QWORD *)&v175[4] && (v175[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v175[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v186[0]) && v186[3] && (v186[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v186[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v135);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v177 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v177 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v177);
                    i = v177;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v167 && v170 && (v171 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v176);
    a3 = v117;
    v11 = v128;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v167 = v3;
        v168 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v105 = *(_QWORD *)(v128 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v128 + 296) + v17);
        *v107 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 304, v125, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v176[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v167 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v168 = v112;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v103 = *(__guard **)(v128 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v128 + 320) + v14);
        *v113 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v128;
      }
LABEL_179:
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v176 = 136315906;
      *(_QWORD *)&v176[4] = "operator[]";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 789;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v17;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v128;
}

uint64_t re::AnimationBlendTree<re::Vector3<float>>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  re::EvaluationContextManager *v124;
  uint64_t v125;
  const re::RigEnvironment *v126;
  re::EvaluationTree *v127;
  uint64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[24];
  __int128 v141;
  __int128 v142;
  char v143[24];
  __int128 v144;
  __int128 v145;
  char v146[24];
  __int128 v147;
  __int128 v148;
  char v149[24];
  __int128 v150;
  __int128 v151;
  char v152[24];
  __int128 v153;
  __int128 v154;
  char v155[24];
  __int128 v156;
  __int128 v157;
  char v158[24];
  __int128 v159;
  __int128 v160;
  char v161[24];
  __int128 v162;
  __int128 v163;
  uint64_t v164[3];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int v172;
  _BYTE v173[14];
  __int16 v174;
  _BYTE v175[18];
  _BYTE v176[114];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 __s1;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[6];
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  p_info = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F560;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v128 = v9;
  v125 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v128 + 368);
    *(_QWORD *)(v128 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v128 + 384), 0);
    v11 = v128;
    ++*(_DWORD *)(v128 + 408);
  }
  else
  {
    v117 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v127 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v124 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v126 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v122 = (_anonymous_namespace_ *)(v13 + 904);
      v123 = (_anonymous_namespace_ *)(v13 + 584);
      v120 = (_anonymous_namespace_ *)(v13 + 504);
      v121 = (_anonymous_namespace_ *)(v13 + 2240);
      v118 = (_anonymous_namespace_ *)(v13 + 2160);
      v119 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v126, v127, (re::Allocator *)p_info, v17, (uint64_t)&v177);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v177);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 0;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v176);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 1;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v176);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 2;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v177);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v176);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v178 = 0u;
            v179 = 0u;
            v177 = 0u;
            *(_DWORD *)v176 = 3;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v176);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v179 = 0u;
            __s1 = 0u;
            v177 = 0u;
            v178 = 0u;
            *(_DWORD *)v176 = 4;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v176);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v176 = xmmword_2260E5D70;
            LODWORD(v177) = 5;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v120, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v176 = 0;
            LODWORD(v177) = 6;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v177);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v176);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v176 = 0u;
            LODWORD(v177) = 7;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v123, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v126, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v127);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v186);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v186, v124, &v167);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v167);
            p_info = (__objc2_class_ro **)v125;
            if (v167)
            {
              if (v168)
              {
                (*(void (**)(void))(*(_QWORD *)v167 + 40))();
                v168 = 0;
                v169 = 0;
              }
              v167 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v186);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v115 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v176 = xmmword_2260E5D70;
                LODWORD(v177) = 5;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v120, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v176 = "scale";
                *(_QWORD *)&v176[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v27 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v115;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "rotation";
                *(_QWORD *)&v176[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v28 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v116;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "translation";
                *(_QWORD *)&v176[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v29 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                p_info = (__objc2_class_ro **)v125;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v127, v124, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v176);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v176[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v177);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v177, v124, v186);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v186);
      if (v186[0])
      {
        if (v186[1])
        {
          (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
          v186[1] = 0;
          v186[2] = 0;
        }
        v186[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v177);
    }
    re::EvaluationContextManager::buildEvaluationContext(v124);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v124);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v124, (uint64_t)&v177);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v167, v13 + 5600, p_info, v127, &v177);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v126, v127, (re::Allocator *)p_info, v14, (uint64_t)&v177);
        switch((char)v179)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v161);
            p_info = (__objc2_class_ro **)v125;
            if (!v161[0] && (_QWORD)v162)
            {
              if ((BYTE8(v162) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v162 + 40))(v37);
              v162 = 0u;
              v163 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v158);
            p_info = (__objc2_class_ro **)v125;
            if (!v158[0] && (_QWORD)v159)
            {
              if ((BYTE8(v159) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v159 + 40))(v43);
              v159 = 0u;
              v160 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v164);
            p_info = (__objc2_class_ro **)v125;
            if (!LOBYTE(v164[0]) && (_QWORD)v165)
            {
              if ((BYTE8(v165) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v165 + 40))(v47);
              v165 = 0u;
              v166 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v182;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v149);
            p_info = (__objc2_class_ro **)v125;
            if (!v149[0] && (_QWORD)v150)
            {
              if ((BYTE8(v150) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v150 + 40))(v52);
              v150 = 0u;
              v151 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v183;
            v55 = v184;
            *v54 = v182;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v146);
            p_info = (__objc2_class_ro **)v125;
            if (!v146[0] && (_QWORD)v147)
            {
              if ((BYTE8(v147) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v147 + 40))(v59);
              v147 = 0u;
              v148 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v185;
            v64 = v182;
            v63 = v183;
            v61[2] = v184;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v143);
            p_info = (__objc2_class_ro **)v125;
            if (!v143[0] && (_QWORD)v144)
            {
              if ((BYTE8(v144) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v144 + 40))(v67);
              v144 = 0u;
              v145 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v155);
            p_info = (__objc2_class_ro **)v125;
            if (!v155[0] && (_QWORD)v156)
            {
              if ((BYTE8(v156) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v156 + 40))(v72);
              v156 = 0u;
              v157 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v182;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v152);
            p_info = (__objc2_class_ro **)v125;
            if (!v152[0] && (_QWORD)v153)
            {
              if ((BYTE8(v153) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v153 + 40))(v77);
              v153 = 0u;
              v154 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v182;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v179 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v140);
            if (!v140[0] && (_QWORD)v141)
            {
              if ((BYTE8(v141) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v141 + 40))(v80);
              v141 = 0u;
              v142 = 0u;
            }
            v134[0] = "scale";
            v134[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v134, (uint64_t)v186);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v186[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v133[0] = "rotation";
            v133[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v133, (uint64_t)&v172);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v173[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v129[0] = "translation";
            v129[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v129, (uint64_t)v130);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v130[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v135 = v84;
            *((_QWORD *)&v135 + 1) = v83;
            v136 = v88;
            v137 = v87;
            v138 = v93;
            v139 = v92;
            if (!LOBYTE(v130[0]) && v131 && (v132 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v131 + 40))();
            p_info = (__objc2_class_ro **)v125;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v172 && *(_QWORD *)&v175[4] && (v175[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v175[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v186[0]) && v186[3] && (v186[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v186[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v135);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v177 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v177 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v177);
                    i = v177;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v167 && v170 && (v171 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v176);
    a3 = v117;
    v11 = v128;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v167 = v3;
        v168 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v105 = *(_QWORD *)(v128 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v128 + 296) + v17);
        *v107 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 304, v125, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v176[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v167 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v168 = v112;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v103 = *(__guard **)(v128 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v128 + 320) + v14);
        *v113 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v128;
      }
LABEL_179:
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v176 = 136315906;
      *(_QWORD *)&v176[4] = "operator[]";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 789;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v17;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v128;
}

uint64_t re::AnimationBlendTree<re::Vector4<float>>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  re::EvaluationContextManager *v124;
  uint64_t v125;
  const re::RigEnvironment *v126;
  re::EvaluationTree *v127;
  uint64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[24];
  __int128 v141;
  __int128 v142;
  char v143[24];
  __int128 v144;
  __int128 v145;
  char v146[24];
  __int128 v147;
  __int128 v148;
  char v149[24];
  __int128 v150;
  __int128 v151;
  char v152[24];
  __int128 v153;
  __int128 v154;
  char v155[24];
  __int128 v156;
  __int128 v157;
  char v158[24];
  __int128 v159;
  __int128 v160;
  char v161[24];
  __int128 v162;
  __int128 v163;
  uint64_t v164[3];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int v172;
  _BYTE v173[14];
  __int16 v174;
  _BYTE v175[18];
  _BYTE v176[114];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 __s1;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[6];
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  p_info = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F630;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v128 = v9;
  v125 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v128 + 368);
    *(_QWORD *)(v128 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v128 + 384), 0);
    v11 = v128;
    ++*(_DWORD *)(v128 + 408);
  }
  else
  {
    v117 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v127 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v124 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v126 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v122 = (_anonymous_namespace_ *)(v13 + 904);
      v123 = (_anonymous_namespace_ *)(v13 + 584);
      v120 = (_anonymous_namespace_ *)(v13 + 504);
      v121 = (_anonymous_namespace_ *)(v13 + 2240);
      v118 = (_anonymous_namespace_ *)(v13 + 2160);
      v119 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v126, v127, (re::Allocator *)p_info, v17, (uint64_t)&v177);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v177);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 0;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v176);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 1;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v176);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 2;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v177);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v176);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v178 = 0u;
            v179 = 0u;
            v177 = 0u;
            *(_DWORD *)v176 = 3;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v176);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v179 = 0u;
            __s1 = 0u;
            v177 = 0u;
            v178 = 0u;
            *(_DWORD *)v176 = 4;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v176);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v176 = xmmword_2260E5D70;
            LODWORD(v177) = 5;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v120, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v176 = 0;
            LODWORD(v177) = 6;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v177);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v176);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v176 = 0u;
            LODWORD(v177) = 7;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v123, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v126, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v127);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v186);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v186, v124, &v167);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v167);
            p_info = (__objc2_class_ro **)v125;
            if (v167)
            {
              if (v168)
              {
                (*(void (**)(void))(*(_QWORD *)v167 + 40))();
                v168 = 0;
                v169 = 0;
              }
              v167 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v186);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v115 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v176 = xmmword_2260E5D70;
                LODWORD(v177) = 5;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v120, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v176 = "scale";
                *(_QWORD *)&v176[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v27 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v115;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "rotation";
                *(_QWORD *)&v176[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v28 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v116;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "translation";
                *(_QWORD *)&v176[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v29 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                p_info = (__objc2_class_ro **)v125;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v127, v124, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v176);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v176[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v177);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v177, v124, v186);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v186);
      if (v186[0])
      {
        if (v186[1])
        {
          (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
          v186[1] = 0;
          v186[2] = 0;
        }
        v186[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v177);
    }
    re::EvaluationContextManager::buildEvaluationContext(v124);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v124);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v124, (uint64_t)&v177);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v167, v13 + 5600, p_info, v127, &v177);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v126, v127, (re::Allocator *)p_info, v14, (uint64_t)&v177);
        switch((char)v179)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v161);
            p_info = (__objc2_class_ro **)v125;
            if (!v161[0] && (_QWORD)v162)
            {
              if ((BYTE8(v162) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v162 + 40))(v37);
              v162 = 0u;
              v163 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v158);
            p_info = (__objc2_class_ro **)v125;
            if (!v158[0] && (_QWORD)v159)
            {
              if ((BYTE8(v159) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v159 + 40))(v43);
              v159 = 0u;
              v160 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v164);
            p_info = (__objc2_class_ro **)v125;
            if (!LOBYTE(v164[0]) && (_QWORD)v165)
            {
              if ((BYTE8(v165) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v165 + 40))(v47);
              v165 = 0u;
              v166 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v182;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v149);
            p_info = (__objc2_class_ro **)v125;
            if (!v149[0] && (_QWORD)v150)
            {
              if ((BYTE8(v150) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v150 + 40))(v52);
              v150 = 0u;
              v151 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v183;
            v55 = v184;
            *v54 = v182;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v146);
            p_info = (__objc2_class_ro **)v125;
            if (!v146[0] && (_QWORD)v147)
            {
              if ((BYTE8(v147) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v147 + 40))(v59);
              v147 = 0u;
              v148 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v185;
            v64 = v182;
            v63 = v183;
            v61[2] = v184;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v143);
            p_info = (__objc2_class_ro **)v125;
            if (!v143[0] && (_QWORD)v144)
            {
              if ((BYTE8(v144) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v144 + 40))(v67);
              v144 = 0u;
              v145 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v155);
            p_info = (__objc2_class_ro **)v125;
            if (!v155[0] && (_QWORD)v156)
            {
              if ((BYTE8(v156) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v156 + 40))(v72);
              v156 = 0u;
              v157 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v182;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v152);
            p_info = (__objc2_class_ro **)v125;
            if (!v152[0] && (_QWORD)v153)
            {
              if ((BYTE8(v153) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v153 + 40))(v77);
              v153 = 0u;
              v154 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v182;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v179 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v140);
            if (!v140[0] && (_QWORD)v141)
            {
              if ((BYTE8(v141) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v141 + 40))(v80);
              v141 = 0u;
              v142 = 0u;
            }
            v134[0] = "scale";
            v134[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v134, (uint64_t)v186);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v186[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v133[0] = "rotation";
            v133[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v133, (uint64_t)&v172);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v173[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v129[0] = "translation";
            v129[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v129, (uint64_t)v130);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v130[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v135 = v84;
            *((_QWORD *)&v135 + 1) = v83;
            v136 = v88;
            v137 = v87;
            v138 = v93;
            v139 = v92;
            if (!LOBYTE(v130[0]) && v131 && (v132 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v131 + 40))();
            p_info = (__objc2_class_ro **)v125;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v172 && *(_QWORD *)&v175[4] && (v175[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v175[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v186[0]) && v186[3] && (v186[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v186[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v135);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v177 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v177 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v177);
                    i = v177;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v167 && v170 && (v171 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v176);
    a3 = v117;
    v11 = v128;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v167 = v3;
        v168 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v105 = *(_QWORD *)(v128 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v128 + 296) + v17);
        *v107 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 304, v125, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v176[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v167 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v168 = v112;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v103 = *(__guard **)(v128 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v128 + 320) + v14);
        *v113 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v128;
      }
LABEL_179:
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v176 = 136315906;
      *(_QWORD *)&v176[4] = "operator[]";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 789;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v17;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v128;
}

uint64_t re::AnimationBlendTree<re::Quaternion<float>>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  re::EvaluationContextManager *v124;
  uint64_t v125;
  const re::RigEnvironment *v126;
  re::EvaluationTree *v127;
  uint64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[24];
  __int128 v141;
  __int128 v142;
  char v143[24];
  __int128 v144;
  __int128 v145;
  char v146[24];
  __int128 v147;
  __int128 v148;
  char v149[24];
  __int128 v150;
  __int128 v151;
  char v152[24];
  __int128 v153;
  __int128 v154;
  char v155[24];
  __int128 v156;
  __int128 v157;
  char v158[24];
  __int128 v159;
  __int128 v160;
  char v161[24];
  __int128 v162;
  __int128 v163;
  uint64_t v164[3];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int v172;
  _BYTE v173[14];
  __int16 v174;
  _BYTE v175[18];
  _BYTE v176[114];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 __s1;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[6];
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  p_info = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F700;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v128 = v9;
  v125 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v128 + 368);
    *(_QWORD *)(v128 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v128 + 384), 0);
    v11 = v128;
    ++*(_DWORD *)(v128 + 408);
  }
  else
  {
    v117 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v127 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v124 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v126 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v122 = (_anonymous_namespace_ *)(v13 + 904);
      v123 = (_anonymous_namespace_ *)(v13 + 584);
      v120 = (_anonymous_namespace_ *)(v13 + 504);
      v121 = (_anonymous_namespace_ *)(v13 + 2240);
      v118 = (_anonymous_namespace_ *)(v13 + 2160);
      v119 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v126, v127, (re::Allocator *)p_info, v17, (uint64_t)&v177);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v177);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 0;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v176);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 1;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v176);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 2;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v177);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v176);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v178 = 0u;
            v179 = 0u;
            v177 = 0u;
            *(_DWORD *)v176 = 3;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v176);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v179 = 0u;
            __s1 = 0u;
            v177 = 0u;
            v178 = 0u;
            *(_DWORD *)v176 = 4;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v176);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v176 = xmmword_2260E5D70;
            LODWORD(v177) = 5;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v120, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v176 = 0;
            LODWORD(v177) = 6;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v177);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v176);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v176 = 0u;
            LODWORD(v177) = 7;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v123, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v126, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v127);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v186);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v186, v124, &v167);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v167);
            p_info = (__objc2_class_ro **)v125;
            if (v167)
            {
              if (v168)
              {
                (*(void (**)(void))(*(_QWORD *)v167 + 40))();
                v168 = 0;
                v169 = 0;
              }
              v167 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v186);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v115 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v176 = xmmword_2260E5D70;
                LODWORD(v177) = 5;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v120, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v176 = "scale";
                *(_QWORD *)&v176[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v27 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v115;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "rotation";
                *(_QWORD *)&v176[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v28 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v116;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "translation";
                *(_QWORD *)&v176[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v29 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                p_info = (__objc2_class_ro **)v125;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v127, v124, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v176);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v176[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v177);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v177, v124, v186);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v186);
      if (v186[0])
      {
        if (v186[1])
        {
          (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
          v186[1] = 0;
          v186[2] = 0;
        }
        v186[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v177);
    }
    re::EvaluationContextManager::buildEvaluationContext(v124);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v124);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v124, (uint64_t)&v177);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v167, v13 + 5600, p_info, v127, &v177);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v126, v127, (re::Allocator *)p_info, v14, (uint64_t)&v177);
        switch((char)v179)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v161);
            p_info = (__objc2_class_ro **)v125;
            if (!v161[0] && (_QWORD)v162)
            {
              if ((BYTE8(v162) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v162 + 40))(v37);
              v162 = 0u;
              v163 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v158);
            p_info = (__objc2_class_ro **)v125;
            if (!v158[0] && (_QWORD)v159)
            {
              if ((BYTE8(v159) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v159 + 40))(v43);
              v159 = 0u;
              v160 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v164);
            p_info = (__objc2_class_ro **)v125;
            if (!LOBYTE(v164[0]) && (_QWORD)v165)
            {
              if ((BYTE8(v165) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v165 + 40))(v47);
              v165 = 0u;
              v166 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v182;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v149);
            p_info = (__objc2_class_ro **)v125;
            if (!v149[0] && (_QWORD)v150)
            {
              if ((BYTE8(v150) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v150 + 40))(v52);
              v150 = 0u;
              v151 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v183;
            v55 = v184;
            *v54 = v182;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v146);
            p_info = (__objc2_class_ro **)v125;
            if (!v146[0] && (_QWORD)v147)
            {
              if ((BYTE8(v147) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v147 + 40))(v59);
              v147 = 0u;
              v148 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v185;
            v64 = v182;
            v63 = v183;
            v61[2] = v184;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v143);
            p_info = (__objc2_class_ro **)v125;
            if (!v143[0] && (_QWORD)v144)
            {
              if ((BYTE8(v144) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v144 + 40))(v67);
              v144 = 0u;
              v145 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v155);
            p_info = (__objc2_class_ro **)v125;
            if (!v155[0] && (_QWORD)v156)
            {
              if ((BYTE8(v156) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v156 + 40))(v72);
              v156 = 0u;
              v157 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v182;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v152);
            p_info = (__objc2_class_ro **)v125;
            if (!v152[0] && (_QWORD)v153)
            {
              if ((BYTE8(v153) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v153 + 40))(v77);
              v153 = 0u;
              v154 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v182;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v179 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v140);
            if (!v140[0] && (_QWORD)v141)
            {
              if ((BYTE8(v141) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v141 + 40))(v80);
              v141 = 0u;
              v142 = 0u;
            }
            v134[0] = "scale";
            v134[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v134, (uint64_t)v186);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v186[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v133[0] = "rotation";
            v133[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v133, (uint64_t)&v172);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v173[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v129[0] = "translation";
            v129[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v129, (uint64_t)v130);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v130[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v135 = v84;
            *((_QWORD *)&v135 + 1) = v83;
            v136 = v88;
            v137 = v87;
            v138 = v93;
            v139 = v92;
            if (!LOBYTE(v130[0]) && v131 && (v132 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v131 + 40))();
            p_info = (__objc2_class_ro **)v125;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v172 && *(_QWORD *)&v175[4] && (v175[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v175[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v186[0]) && v186[3] && (v186[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v186[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v135);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v177 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v177 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v177);
                    i = v177;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v167 && v170 && (v171 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v176);
    a3 = v117;
    v11 = v128;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v167 = v3;
        v168 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v105 = *(_QWORD *)(v128 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v128 + 296) + v17);
        *v107 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 304, v125, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v176[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v167 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v168 = v112;
        re::BindNode::bindPointWithOverride(v100, re::introspect<re::Quaternion<float>>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v103 = *(__guard **)(v128 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v128 + 320) + v14);
        *v113 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v128;
      }
LABEL_179:
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v176 = 136315906;
      *(_QWORD *)&v176[4] = "operator[]";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 789;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v17;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v128;
}

uint64_t re::AnimationBlendTree<re::GenericSRT<float>>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  re::EvaluationContextManager *v124;
  uint64_t v125;
  const re::RigEnvironment *v126;
  re::EvaluationTree *v127;
  uint64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[24];
  __int128 v141;
  __int128 v142;
  char v143[24];
  __int128 v144;
  __int128 v145;
  char v146[24];
  __int128 v147;
  __int128 v148;
  char v149[24];
  __int128 v150;
  __int128 v151;
  char v152[24];
  __int128 v153;
  __int128 v154;
  char v155[24];
  __int128 v156;
  __int128 v157;
  char v158[24];
  __int128 v159;
  __int128 v160;
  char v161[24];
  __int128 v162;
  __int128 v163;
  uint64_t v164[3];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int v172;
  _BYTE v173[14];
  __int16 v174;
  _BYTE v175[18];
  _BYTE v176[114];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 __s1;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[6];
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  p_info = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F7D0;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v128 = v9;
  v125 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v128 + 368);
    *(_QWORD *)(v128 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v128 + 384), 0);
    v11 = v128;
    ++*(_DWORD *)(v128 + 408);
  }
  else
  {
    v117 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v127 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v124 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v126 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v122 = (_anonymous_namespace_ *)(v13 + 904);
      v123 = (_anonymous_namespace_ *)(v13 + 584);
      v120 = (_anonymous_namespace_ *)(v13 + 504);
      v121 = (_anonymous_namespace_ *)(v13 + 2240);
      v118 = (_anonymous_namespace_ *)(v13 + 2160);
      v119 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v126, v127, (re::Allocator *)p_info, v17, (uint64_t)&v177);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v177);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 0;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v176);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 1;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v176);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 2;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v177);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v176);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v178 = 0u;
            v179 = 0u;
            v177 = 0u;
            *(_DWORD *)v176 = 3;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v176);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v179 = 0u;
            __s1 = 0u;
            v177 = 0u;
            v178 = 0u;
            *(_DWORD *)v176 = 4;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v176);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v176 = xmmword_2260E5D70;
            LODWORD(v177) = 5;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v120, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v176 = 0;
            LODWORD(v177) = 6;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v177);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v176);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v176 = 0u;
            LODWORD(v177) = 7;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v123, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v126, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v127);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v186);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v186, v124, &v167);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v167);
            p_info = (__objc2_class_ro **)v125;
            if (v167)
            {
              if (v168)
              {
                (*(void (**)(void))(*(_QWORD *)v167 + 40))();
                v168 = 0;
                v169 = 0;
              }
              v167 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v186);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v115 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v176 = xmmword_2260E5D70;
                LODWORD(v177) = 5;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v120, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v176 = "scale";
                *(_QWORD *)&v176[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v27 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v115;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "rotation";
                *(_QWORD *)&v176[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v28 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v116;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "translation";
                *(_QWORD *)&v176[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v29 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                p_info = (__objc2_class_ro **)v125;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v127, v124, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v176);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v176[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v177);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v177, v124, v186);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v186);
      if (v186[0])
      {
        if (v186[1])
        {
          (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
          v186[1] = 0;
          v186[2] = 0;
        }
        v186[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v177);
    }
    re::EvaluationContextManager::buildEvaluationContext(v124);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v124);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v124, (uint64_t)&v177);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v167, v13 + 5600, p_info, v127, &v177);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v126, v127, (re::Allocator *)p_info, v14, (uint64_t)&v177);
        switch((char)v179)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v161);
            p_info = (__objc2_class_ro **)v125;
            if (!v161[0] && (_QWORD)v162)
            {
              if ((BYTE8(v162) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v162 + 40))(v37);
              v162 = 0u;
              v163 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v158);
            p_info = (__objc2_class_ro **)v125;
            if (!v158[0] && (_QWORD)v159)
            {
              if ((BYTE8(v159) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v159 + 40))(v43);
              v159 = 0u;
              v160 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v164);
            p_info = (__objc2_class_ro **)v125;
            if (!LOBYTE(v164[0]) && (_QWORD)v165)
            {
              if ((BYTE8(v165) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v165 + 40))(v47);
              v165 = 0u;
              v166 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v182;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v149);
            p_info = (__objc2_class_ro **)v125;
            if (!v149[0] && (_QWORD)v150)
            {
              if ((BYTE8(v150) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v150 + 40))(v52);
              v150 = 0u;
              v151 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v183;
            v55 = v184;
            *v54 = v182;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v146);
            p_info = (__objc2_class_ro **)v125;
            if (!v146[0] && (_QWORD)v147)
            {
              if ((BYTE8(v147) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v147 + 40))(v59);
              v147 = 0u;
              v148 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v185;
            v64 = v182;
            v63 = v183;
            v61[2] = v184;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v143);
            p_info = (__objc2_class_ro **)v125;
            if (!v143[0] && (_QWORD)v144)
            {
              if ((BYTE8(v144) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v144 + 40))(v67);
              v144 = 0u;
              v145 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v155);
            p_info = (__objc2_class_ro **)v125;
            if (!v155[0] && (_QWORD)v156)
            {
              if ((BYTE8(v156) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v156 + 40))(v72);
              v156 = 0u;
              v157 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v182;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v152);
            p_info = (__objc2_class_ro **)v125;
            if (!v152[0] && (_QWORD)v153)
            {
              if ((BYTE8(v153) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v153 + 40))(v77);
              v153 = 0u;
              v154 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v182;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v179 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v140);
            if (!v140[0] && (_QWORD)v141)
            {
              if ((BYTE8(v141) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v141 + 40))(v80);
              v141 = 0u;
              v142 = 0u;
            }
            v134[0] = "scale";
            v134[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v134, (uint64_t)v186);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v186[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v133[0] = "rotation";
            v133[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v133, (uint64_t)&v172);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v173[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v129[0] = "translation";
            v129[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v129, (uint64_t)v130);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v130[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v135 = v84;
            *((_QWORD *)&v135 + 1) = v83;
            v136 = v88;
            v137 = v87;
            v138 = v93;
            v139 = v92;
            if (!LOBYTE(v130[0]) && v131 && (v132 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v131 + 40))();
            p_info = (__objc2_class_ro **)v125;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v172 && *(_QWORD *)&v175[4] && (v175[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v175[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v186[0]) && v186[3] && (v186[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v186[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v135);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v177 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v177 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v177);
                    i = v177;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v167 && v170 && (v171 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v176);
    a3 = v117;
    v11 = v128;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v167 = v3;
        v168 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v105 = *(_QWORD *)(v128 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v128 + 296) + v17);
        *v107 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 304, v125, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v176[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v167 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v168 = v112;
        re::BindNode::bindPointWithOverride(v100, re::introspect<re::GenericSRT<float>>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v103 = *(__guard **)(v128 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v128 + 320) + v14);
        *v113 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v128;
      }
LABEL_179:
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v176 = 136315906;
      *(_QWORD *)&v176[4] = "operator[]";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 789;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v17;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v128;
}

uint64_t re::AnimationBlendTree<re::SkeletalPose>::createInstance(uint64_t a1, __objc2_class_ro **a2, uint64_t a3)
{
  unint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re::RigHierarchy *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  re::RigGraphNode *v34;
  size_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  int v39;
  _DWORD *Runtime;
  size_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  size_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  _OWORD *v69;
  size_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  size_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  re::BindNode **v100;
  uint64_t v101;
  uint64_t v102;
  __guard *v103;
  unsigned __int8 v104;
  unint64_t v105;
  size_t v106;
  _QWORD *v107;
  const re::IntrospectionBase *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  size_t v112;
  _QWORD *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  re::EvaluationContextManager *v124;
  uint64_t v125;
  const re::RigEnvironment *v126;
  re::EvaluationTree *v127;
  uint64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[24];
  __int128 v141;
  __int128 v142;
  char v143[24];
  __int128 v144;
  __int128 v145;
  char v146[24];
  __int128 v147;
  __int128 v148;
  char v149[24];
  __int128 v150;
  __int128 v151;
  char v152[24];
  __int128 v153;
  __int128 v154;
  char v155[24];
  __int128 v156;
  __int128 v157;
  char v158[24];
  __int128 v159;
  __int128 v160;
  char v161[24];
  __int128 v162;
  __int128 v163;
  uint64_t v164[3];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int v172;
  _BYTE v173[14];
  __int16 v174;
  _BYTE v175[18];
  _BYTE v176[114];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 __s1;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[6];
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  p_info = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*a2)->base_meths)(a2, 456, 8);
  *(_QWORD *)v7 = off_24ED1F350;
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = v8;
  re::StringID::StringID((re::StringID *)(v7 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v7 + 40), (const re::DynamicString *)(a1 + 40));
  v9 = v7;
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v7 = &off_24ED1F8A0;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = (_OWORD *)(v7 + 88);
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 416) = 0;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 356) = 0u;
  *(_DWORD *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_DWORD *)(v9 + 8) = 47;
  *(_QWORD *)(v9 + 440) = 0;
  *(_QWORD *)(v9 + 448) = p_info;
  v128 = v9;
  v125 = (uint64_t)p_info;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)(v9 + 344) = p_info;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v9 + 344), 0);
    ++*(_DWORD *)(v128 + 368);
    *(_QWORD *)(v128 + 384) = p_info;
    re::DynamicArray<float *>::setCapacity((_QWORD *)(v128 + 384), 0);
    v11 = v128;
    ++*(_DWORD *)(v128 + 408);
  }
  else
  {
    v117 = a3;
    v12 = v9;
    v13 = ((uint64_t (*)(__objc2_class_ro **, uint64_t, uint64_t))(*p_info)->base_meths)(p_info, 6408, 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v13 + 4888;
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_DWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_DWORD *)(v13 + 104) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_DWORD *)(v13 + 144) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_QWORD *)(v13 + 280) = 0;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 176) = 1;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_DWORD *)(v13 + 208) = 0;
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_DWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 216) = 0;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_OWORD *)(v13 + 264) = 0u;
    *(_DWORD *)(v13 + 280) = 0;
    bzero((void *)(v13 + 288), 0x818uLL);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)(v13 + 296));
    bzero((void *)(v13 + 2360), 0xB98uLL);
    re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(v13 + 2360));
    *(_OWORD *)(v13 + 5344) = 0u;
    *(_OWORD *)(v13 + 5360) = 0u;
    *(_OWORD *)(v13 + 5376) = 0u;
    *(_OWORD *)(v13 + 5328) = 0u;
    *(_DWORD *)(v13 + 5344) = 1;
    *(_QWORD *)(v13 + 5352) = 0;
    *(_QWORD *)(v13 + 5368) = 0;
    *(_QWORD *)(v13 + 5360) = 0;
    *(_DWORD *)(v13 + 5376) = 0;
    *(_OWORD *)(v13 + 5392) = 0u;
    *(_OWORD *)(v13 + 5408) = 0u;
    *(_OWORD *)(v13 + 5424) = 0u;
    *(_OWORD *)(v13 + 5440) = 0u;
    *(_OWORD *)(v13 + 5456) = 0u;
    *(_OWORD *)(v13 + 5472) = 0u;
    *(_OWORD *)(v13 + 5488) = 0u;
    *(_OWORD *)(v13 + 5504) = 0u;
    *(_OWORD *)(v13 + 5520) = 0u;
    *(_OWORD *)(v13 + 5536) = 0u;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5584) = 0;
    *(_DWORD *)(v13 + 5480) = 1;
    *(_QWORD *)(v13 + 5504) = 0;
    *(_DWORD *)(v13 + 5512) = 0;
    *(_QWORD *)(v13 + 5488) = 0;
    *(_QWORD *)(v13 + 5496) = 0;
    *(_QWORD *)(v13 + 5536) = 0;
    *(_DWORD *)(v13 + 5544) = 0;
    *(_QWORD *)(v13 + 5520) = 0;
    *(_QWORD *)(v13 + 5528) = 0;
    *(_QWORD *)(v13 + 5592) = 0;
    *(_OWORD *)(v13 + 5552) = 0u;
    *(_OWORD *)(v13 + 5568) = 0u;
    *(_QWORD *)(v13 + 5600) = &off_24ED26FC0;
    *(_DWORD *)(v13 + 5608) = -1;
    *(_DWORD *)(v13 + 5584) = 0;
    bzero((void *)(v13 + 5616), 0x318uLL);
    *(_QWORD *)(v12 + 440) = v13;
    v3 = *(_QWORD *)(v12 + 80);
    *(_QWORD *)v13 = p_info;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)v13, 0);
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 40) = p_info;
    re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)(v13 + 40), 0);
    ++*(_DWORD *)(v13 + 64);
    v127 = (re::EvaluationTree *)(v13 + 296);
    re::EvaluationTree::init((re::EvaluationTree *)(v13 + 296), (re::Allocator *)p_info);
    v124 = (re::EvaluationContextManager *)(v13 + 2360);
    re::EvaluationContextManager::init((re::EvaluationContextManager *)(v13 + 2360), (re::Allocator *)p_info);
    re::RigEnvironment::init((re::RigEnvironment *)(v13 + 5328), (re::Allocator *)p_info);
    *(_QWORD *)(v13 + 5432) = p_info;
    v126 = (const re::RigEnvironment *)(v13 + 5328);
    *(_QWORD *)(v13 + 5448) = v13 + 5328;
    *(_BYTE *)(v13 + 5456) = 0;
    *(_QWORD *)(v13 + 5440) = 0;
    re::RigGraphCompilation::init((re::RigGraphCompilation *)(v13 + 5464), (re::Allocator *)p_info);
    v15 = *(_QWORD *)(v3 + 432);
    *(_QWORD *)(v13 + 80) = p_info;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v13 + 80), v15);
    ++*(_DWORD *)(v13 + 104);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)(v13 + 80), *(_QWORD *)(v3 + 432));
    if (*(_QWORD *)(v3 + 432))
    {
      v16 = 0;
      v17 = 0;
      v122 = (_anonymous_namespace_ *)(v13 + 904);
      v123 = (_anonymous_namespace_ *)(v13 + 584);
      v120 = (_anonymous_namespace_ *)(v13 + 504);
      v121 = (_anonymous_namespace_ *)(v13 + 2240);
      v118 = (_anonymous_namespace_ *)(v13 + 2160);
      v119 = (_anonymous_namespace_ *)(v13 + 824);
      while (2)
      {
        re::RigGraphNode::inputValue((re::RigGraphNode *)(v3 + 80), v126, v127, (re::Allocator *)p_info, v17, (uint64_t)&v177);
        re::DynamicArray<re::RigDataValue>::add(v13 + 120, (const re::RigDataValue *)&v177);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
        v14 = *(_QWORD *)(v13 + 152);
        v18 = *(_QWORD *)(v13 + 136) - 1;
        v19 = v14 + 288 * v18;
        switch(*(_BYTE *)(v19 + 32))
        {
          case 1:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 0;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 1960), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 1976) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 304), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 624), v176);
            v20 = *(_QWORD *)(v13 + 336);
            v21 = *(_QWORD *)(v13 + 320);
            goto LABEL_14;
          case 2:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 1;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2000), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2016) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 344), &v177);
            re::DynamicArray<int>::add((_QWORD *)(v13 + 664), v176);
            v20 = *(_QWORD *)(v13 + 376);
            v21 = *(_QWORD *)(v13 + 360);
            goto LABEL_14;
          case 3:
            *(_DWORD *)v176 = 0;
            LODWORD(v177) = 2;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2040), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2056) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 384), &v177);
            re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 704), (float *)v176);
            v22 = *(_QWORD *)(*(_QWORD *)(v13 + 416) + 8 * *(_QWORD *)(v13 + 400) - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
            goto LABEL_15;
          case 4:
            v178 = 0u;
            v179 = 0u;
            v177 = 0u;
            *(_DWORD *)v176 = 3;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2080), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2096) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 424), v176);
            re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 744), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 456);
            v21 = *(_QWORD *)(v13 + 440);
            goto LABEL_14;
          case 5:
            v179 = 0u;
            __s1 = 0u;
            v177 = 0u;
            v178 = 0u;
            *(_DWORD *)v176 = 4;
            memset(&v176[8], 0, 24);
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2120), (uint64_t)v176);
            *(_QWORD *)v176 = *(_QWORD *)(v13 + 2136) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 464), v176);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 784), (uint64_t)&v177);
            v20 = *(_QWORD *)(v13 + 496);
            v21 = *(_QWORD *)(v13 + 480);
            goto LABEL_14;
          case 6:
            *(_OWORD *)v176 = xmmword_2260E5D70;
            LODWORD(v177) = 5;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
            re::DynamicArray<unsigned long>::add(v120, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 536);
            v21 = *(_QWORD *)(v13 + 520);
            goto LABEL_14;
          case 7:
            *(_QWORD *)v176 = 0;
            LODWORD(v177) = 6;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 2200), (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2216) - 1;
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 544), &v177);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v13 + 864), v176);
            v20 = *(_QWORD *)(v13 + 576);
            v21 = *(_QWORD *)(v13 + 560);
            goto LABEL_14;
          case 8:
            *(_OWORD *)v176 = 0u;
            LODWORD(v177) = 7;
            v178 = 0uLL;
            *((_QWORD *)&v177 + 1) = 0;
            re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
            *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
            re::DynamicArray<unsigned long>::add(v123, &v177);
            re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
            v20 = *(_QWORD *)(v13 + 616);
            v21 = *(_QWORD *)(v13 + 600);
LABEL_14:
            v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
            v23 = v14 + 288 * v18;
            *(_BYTE *)(v23 + 96) = 2;
LABEL_15:
            *(_QWORD *)(v23 + 176) = v22;
            goto LABEL_16;
          case 0xA:
            v24 = *(re::RigHierarchy **)(v19 + 184);
            re::RigHierarchy::deinit(v24);
            re::RigHierarchy::init(v24, v126, (const re::Skeleton *)(MEMORY[0x50] + 24), (re::Allocator *)p_info, v127);
            re::RigHierarchy::getEvaluationSkeletalPose(v24, (re::Allocator *)p_info, 0, (uint64_t)v186);
            re::EvaluationSkeletalPose::createInputHandle((re::EvaluationSkeletalPose *)v186, v124, &v167);
            p_info = *(__objc2_class_ro ***)(v13 + 96);
            if ((unint64_t)p_info <= v17)
              goto LABEL_197;
            re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(*(_QWORD *)(v13 + 112) + v16), (uint64_t *)&v167);
            p_info = (__objc2_class_ro **)v125;
            if (v167)
            {
              if (v168)
              {
                (*(void (**)(void))(*(_QWORD *)v167 + 40))();
                v168 = 0;
                v169 = 0;
              }
              v167 = 0;
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v186);
LABEL_16:
            ++v17;
            v16 += 24;
            if (v17 >= *(_QWORD *)(v3 + 432))
              break;
            continue;
          case 0xD:
            if ((*(_QWORD *)(v14 + 288 * v18 + 40) & 0xFFFFFFFFFFFFFFFELL) == 0x283AA)
            {
              v25 = *(char **)(v14 + 288 * v18 + 48);
              if (v25 == "SRT" || !strcmp(v25, "SRT"))
              {
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                v14 = v13 + 904;
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v115 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_OWORD *)v176 = xmmword_2260E5D70;
                LODWORD(v177) = 5;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v118, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2176) - 1;
                re::DynamicArray<unsigned long>::add(v120, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v119, (__n128 *)v176);
                v116 = *(_QWORD *)(*(_QWORD *)(v13 + 536) + 8 * *(_QWORD *)(v13 + 520) - 8);
                *(_OWORD *)v176 = 0u;
                LODWORD(v177) = 7;
                v178 = 0uLL;
                *((_QWORD *)&v177 + 1) = 0;
                re::DynamicArray<re::EvaluationRegister>::add(v121, (uint64_t)&v177);
                *(_QWORD *)&v177 = *(_QWORD *)(v13 + 2256) - 1;
                re::DynamicArray<unsigned long>::add(v123, &v177);
                re::DynamicArray<re::Vector3<float>>::add(v122, (__n128 *)v176);
                v26 = *(_QWORD *)(*(_QWORD *)(v13 + 616) + 8 * *(_QWORD *)(v13 + 600) - 8);
                *(_QWORD *)v176 = "scale";
                *(_QWORD *)&v176[8] = 5;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v27 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v27 + 176) = v115;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "rotation";
                *(_QWORD *)&v176[8] = 8;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v28 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v28 + 176) = v116;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                *(_QWORD *)v176 = "translation";
                *(_QWORD *)&v176[8] = 11;
                re::RigDataValue::attributeValue(v19, (uint64_t)v176, (uint64_t)&v177);
                v29 = *((_QWORD *)&v177 + 1);
                *(_BYTE *)(*((_QWORD *)&v177 + 1) + 96) = 2;
                *(_QWORD *)(v29 + 176) = v26;
                if (!(_BYTE)v177 && *((_QWORD *)&v178 + 1) && (v179 & 1) != 0)
                  (*(void (**)(void))(**((_QWORD **)&v178 + 1) + 40))();
                p_info = (__objc2_class_ro **)v125;
              }
            }
            goto LABEL_16;
          default:
            goto LABEL_16;
        }
        break;
      }
    }
    re::RigGraphSystem::compile(v13 + 5432, (_QWORD *)(v3 + 80), (uint64_t)v127, v124, *(_QWORD **)(v13 + 152), *(_QWORD *)(v13 + 136), (uint64_t)v176);
    re::RigGraphCompilation::operator=((_QWORD *)(v13 + 160), &v176[8]);
    if (!*(_QWORD *)(v13 + 272))
      goto LABEL_198;
    v31 = *(_QWORD *)(v13 + 288);
    if (*(_BYTE *)(v31 + 32) == 10)
    {
      re::RigHierarchy::getEvaluationSkeletalPose(*(re::RigHierarchy **)(v31 + 184), (re::Allocator *)p_info, 0, (uint64_t)&v177);
      re::EvaluationSkeletalPose::createOutputHandle((re::EvaluationSkeletalPose *)&v177, v124, v186);
      re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=((uint64_t *)(v13 + 6384), v186);
      if (v186[0])
      {
        if (v186[1])
        {
          (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
          v186[1] = 0;
          v186[2] = 0;
        }
        v186[0] = 0;
      }
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v177);
    }
    re::EvaluationContextManager::buildEvaluationContext(v124);
    if (!*(_BYTE *)(v13 + 4888))
      re::EvaluationContextManager::buildEvaluationContext(v124);
    re::RigGraphCompilation::setRuntimeContext(v13 + 160, (re::EvaluationContext *)(v13 + 4896));
    re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v124, (uint64_t)&v177);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, __objc2_class_ro **, re::EvaluationTree *, __int128 *))(*(_QWORD *)(v13 + 5600) + 32))(&v167, v13 + 5600, p_info, v127, &v177);
    v32 = (_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v3 + 432))
    {
      v33 = 0;
      v14 = 0;
      v17 = 32;
      v34 = (re::RigGraphNode *)(v3 + 80);
      while (2)
      {
        re::RigGraphNode::inputValue(v34, v126, v127, (re::Allocator *)p_info, v14, (uint64_t)&v177);
        switch((char)v179)
        {
          case 1:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_181;
            v35 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v35;
            v37 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v161);
            p_info = (__objc2_class_ro **)v125;
            if (!v161[0] && (_QWORD)v162)
            {
              if ((BYTE8(v162) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v162 + 40))(v37);
              v162 = 0u;
              v163 = 0u;
            }
            v38 = *(_QWORD *)(v13 + 232);
            if (v38 <= v14)
              goto LABEL_189;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(*v32 + v33, v36);
            goto LABEL_68;
          case 2:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_182;
            v41 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v41;
            v43 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v158);
            p_info = (__objc2_class_ro **)v125;
            if (!v158[0] && (_QWORD)v159)
            {
              if ((BYTE8(v159) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v159 + 40))(v43);
              v159 = 0u;
              v160 = 0u;
            }
            v44 = *(_QWORD *)(v13 + 232);
            if (v44 <= v14)
              goto LABEL_190;
            v39 = v182;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(*v32 + v33, v42);
LABEL_68:
            *Runtime = v39;
            v34 = (re::RigGraphNode *)(v3 + 80);
            goto LABEL_132;
          case 3:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_183;
            v45 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v45;
            v47 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v164);
            p_info = (__objc2_class_ro **)v125;
            if (!LOBYTE(v164[0]) && (_QWORD)v165)
            {
              if ((BYTE8(v165) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v165 + 40))(v47);
              v165 = 0u;
              v166 = 0u;
            }
            v48 = *(_QWORD *)(v13 + 232);
            if (v48 <= v14)
              goto LABEL_191;
            v49 = v182;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*v32 + v33, v46) = v49;
            goto LABEL_132;
          case 4:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_184;
            v50 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v50;
            v52 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v149);
            p_info = (__objc2_class_ro **)v125;
            if (!v149[0] && (_QWORD)v150)
            {
              if ((BYTE8(v150) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v150 + 40))(v52);
              v150 = 0u;
              v151 = 0u;
            }
            v53 = *(_QWORD *)(v13 + 232);
            if (v53 <= v14)
              goto LABEL_192;
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(*v32 + v33, v51);
            v56 = v183;
            v55 = v184;
            *v54 = v182;
            v54[1] = v56;
            v54[2] = v55;
            goto LABEL_132;
          case 5:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_185;
            v57 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v57;
            v59 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v146);
            p_info = (__objc2_class_ro **)v125;
            if (!v146[0] && (_QWORD)v147)
            {
              if ((BYTE8(v147) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v147 + 40))(v59);
              v147 = 0u;
              v148 = 0u;
            }
            v60 = *(_QWORD *)(v13 + 232);
            if (v60 <= v14)
              goto LABEL_193;
            v61 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(*v32 + v33, v58);
            v62 = v185;
            v64 = v182;
            v63 = v183;
            v61[2] = v184;
            v61[3] = v62;
            *v61 = v64;
            v61[1] = v63;
            goto LABEL_132;
          case 6:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_186;
            v65 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v65;
            v67 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v143);
            p_info = (__objc2_class_ro **)v125;
            if (!v143[0] && (_QWORD)v144)
            {
              if ((BYTE8(v144) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v144 + 40))(v67);
              v144 = 0u;
              v145 = 0u;
            }
            v68 = *(_QWORD *)(v13 + 232);
            if (v68 <= v14)
              goto LABEL_194;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*v32 + v33, v66);
            goto LABEL_117;
          case 7:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_187;
            v70 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v70;
            v72 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v155);
            p_info = (__objc2_class_ro **)v125;
            if (!v155[0] && (_QWORD)v156)
            {
              if ((BYTE8(v156) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v156 + 40))(v72);
              v156 = 0u;
              v157 = 0u;
            }
            v73 = *(_QWORD *)(v13 + 232);
            if (v73 <= v14)
              goto LABEL_195;
            v74 = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*v32 + v33, v71);
            *v74 = v182;
            goto LABEL_132;
          case 8:
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_188;
            v75 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v75;
            v77 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v152);
            p_info = (__objc2_class_ro **)v125;
            if (!v152[0] && (_QWORD)v153)
            {
              if ((BYTE8(v153) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v153 + 40))(v77);
              v153 = 0u;
              v154 = 0u;
            }
            v78 = *(_QWORD *)(v13 + 232);
            if (v78 <= v14)
              goto LABEL_196;
            v69 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*v32 + v33, v76);
LABEL_117:
            *v69 = v182;
            goto LABEL_132;
          case 13:
            if ((*((_QWORD *)&v179 + 1) & 0xFFFFFFFFFFFFFFFELL) != 0x283AA
              || (char *)__s1 != "SRT" && strcmp((const char *)__s1, "SRT"))
            {
              goto LABEL_132;
            }
            p_info = *(__objc2_class_ro ***)(v3 + 96);
            if ((unint64_t)p_info <= v14)
              goto LABEL_199;
            v79 = strlen(*(const char **)(*(_QWORD *)(v3 + 112) + v17));
            v186[0] = *(_QWORD *)(*(_QWORD *)(v3 + 112) + v17);
            v186[1] = v79;
            v80 = re::RigDataValue::setBuildTimeValueWithString(&v177, (uint64_t)v186, (uint64_t)v140);
            if (!v140[0] && (_QWORD)v141)
            {
              if ((BYTE8(v141) & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v141 + 40))(v80);
              v141 = 0u;
              v142 = 0u;
            }
            v134[0] = "scale";
            v134[1] = 5;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v134, (uint64_t)v186);
            v82 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v186[1], v81);
            v84 = *v82;
            v83 = v82[1];
            v133[0] = "rotation";
            v133[1] = 8;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v133, (uint64_t)&v172);
            v86 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v173[4], v85);
            v88 = *v86;
            v87 = v86[1];
            v129[0] = "translation";
            v129[1] = 11;
            re::RigDataValue::attributeValue((uint64_t)&v177, (uint64_t)v129, (uint64_t)v130);
            v90 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v130[1], v89);
            v93 = *v90;
            v92 = v90[1];
            *(_QWORD *)&v135 = v84;
            *((_QWORD *)&v135 + 1) = v83;
            v136 = v88;
            v137 = v87;
            v138 = v93;
            v139 = v92;
            if (!LOBYTE(v130[0]) && v131 && (v132 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v131 + 40))();
            p_info = (__objc2_class_ro **)v125;
            v32 = (_QWORD *)(v13 + 248);
            if (!(_BYTE)v172 && *(_QWORD *)&v175[4] && (v175[12] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v175[4] + 40))();
            v34 = (re::RigGraphNode *)(v3 + 80);
            if (!LOBYTE(v186[0]) && v186[3] && (v186[4] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v186[3] + 40))();
            v94 = *(_QWORD *)(v13 + 232);
            if (v94 <= v14)
              goto LABEL_200;
            re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(v13 + 248) + v33, &v135);
LABEL_132:
            re::RigDataValue::~RigDataValue((re::RigDataValue *)&v177);
            ++v14;
            v95 = *(_QWORD *)(v3 + 432);
            v33 += 288;
            v17 += 40;
            if (v14 < v95)
              continue;
            *(_QWORD *)&v177 = 0;
            if (v95)
            {
              for (i = 0; i < v95; *(_QWORD *)&v177 = i)
              {
                v97 = *(_QWORD *)(v3 + 448);
                if (*(_QWORD *)(v97 + 16 * i) <= 1uLL)
                {
                  v98 = *(char **)(v97 + 16 * i + 8);
                  if (v98 == "" || !*v98)
                  {
                    re::DynamicArray<unsigned long>::add((_QWORD *)v13, &v177);
                    i = v177;
                    v95 = *(_QWORD *)(v3 + 432);
                  }
                }
                ++i;
              }
            }
            break;
          default:
            goto LABEL_132;
        }
        break;
      }
    }
    if (!(_BYTE)v167 && v170 && (v171 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
    re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)v176);
    a3 = v117;
    v11 = v128;
  }
  v99 = *(_QWORD *)(v11 + 80);
  if (*(_DWORD *)(v99 + 536))
    re::BlendSpace::init((uint64_t)v10, (uint64_t)p_info, (unint64_t *)(v99 + 536), (re::BindNode **)a3);
  if (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16))
  {
    v100 = (re::BindNode **)a3;
    v101 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 280, (uint64_t)p_info, *(_QWORD *)(v101 + 392));
    if (*(_QWORD *)(v101 + 392))
    {
      v17 = 0;
      v14 = 0;
      v102 = 8;
      p_info = VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v104 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v108);
        }
        v105 = *(_QWORD *)(v101 + 392);
        if (v105 <= v14)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v101 + 408) + v102);
        v106 = strlen((const char *)v3);
        v167 = v3;
        v168 = v106;
        re::BindNode::bindPointWithOverride(v100, (uint64_t)re::introspect<float>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v105 = *(_QWORD *)(v128 + 288);
        if (v105 <= v14)
          goto LABEL_178;
        v107 = (_QWORD *)(*(_QWORD *)(v128 + 296) + v17);
        *v107 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v107 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v14;
        v17 += 48;
        v102 += 16;
        if (v14 >= *(_QWORD *)(v101 + 392))
          goto LABEL_164;
      }
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v14;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = v105;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_179;
    }
LABEL_164:
    v109 = *(_QWORD *)(v128 + 80);
    re::FixedArray<re::BindPoint>::init<>(v128 + 304, v125, *(_QWORD *)(v109 + 432));
    if (*(_QWORD *)(v109 + 432))
    {
      v14 = 0;
      v3 = 0;
      p_info = (__objc2_class_ro **)&v176[8];
      v110 = 8;
      v17 = (unint64_t)VideoSpillMapMetalSession.info;
      while (1)
      {
        if ((v111 & 1) == 0
        {
          re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
        }
        v103 = *(__guard **)(v109 + 432);
        if ((unint64_t)v103 <= v3)
          break;
        v112 = strlen(*(const char **)(*(_QWORD *)(v109 + 448) + v110));
        v167 = *(_QWORD *)(*(_QWORD *)(v109 + 448) + v110);
        v168 = v112;
        re::BindNode::bindPointWithOverride(v100, re::introspect<re::SkeletalPose>(void)::info, (uint64_t *)&v167, (uint64_t)v176);
        v103 = *(__guard **)(v128 + 312);
        if ((unint64_t)v103 <= v3)
          goto LABEL_180;
        v113 = (_QWORD *)(*(_QWORD *)(v128 + 320) + v14);
        *v113 = *(_QWORD *)v176;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v113 + 1), (uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v176[8]);
        ++v3;
        v14 += 48;
        v110 += 16;
        if (v3 >= *(_QWORD *)(v109 + 432))
          return v128;
      }
LABEL_179:
      v167 = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 797;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v186[0]) = 136315906;
      *(uint64_t *)((char *)v186 + 4) = (uint64_t)"operator[]";
      WORD2(v186[1]) = 1024;
      *(_DWORD *)((char *)&v186[1] + 6) = 468;
      WORD1(v186[2]) = 2048;
      *(uint64_t *)((char *)&v186[2] + 4) = v3;
      WORD2(v186[3]) = 2048;
      *(uint64_t *)((char *)&v186[3] + 6) = (uint64_t)v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_187:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_188:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_189:
      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v38);
      _os_crash();
      __break(1u);
LABEL_190:
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v44);
      _os_crash();
      __break(1u);
LABEL_191:
      re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v48);
      _os_crash();
      __break(1u);
LABEL_192:
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v53);
      _os_crash();
      __break(1u);
LABEL_193:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v60);
      _os_crash();
      __break(1u);
LABEL_194:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v68);
      _os_crash();
      __break(1u);
LABEL_195:
      re::internal::assertLog((re::internal *)6, v71, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v73);
      _os_crash();
      __break(1u);
LABEL_196:
      re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v78);
      _os_crash();
      __break(1u);
LABEL_197:
      v164[0] = 0;
      __s1 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v177 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v176 = 136315906;
      *(_QWORD *)&v176[4] = "operator[]";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 789;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v17;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v130[0] = 0;
      v187 = 0u;
      v188 = 0u;
      memset(v186, 0, sizeof(v186));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v172 = 136315906;
      *(_QWORD *)v173 = "operator[]";
      *(_WORD *)&v173[8] = 1024;
      *(_DWORD *)&v173[10] = 797;
      v174 = 2048;
      *(_QWORD *)v175 = v14;
      *(_WORD *)&v175[8] = 2048;
      *(_QWORD *)&v175[10] = p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v94);
      _os_crash();
      __break(1u);
    }
  }
  return v128;
}

uint64_t re::AnimationBlendTreeDefinition::findClipIndex(re::AnimationBlendTreeDefinition *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  if (*((_QWORD *)this + 2) <= a2)
    return -1;
  v2 = 0;
  v3 = a2;
  if (a2)
  {
    v4 = (_QWORD *)(*((_QWORD *)this + 4) + 16);
    do
    {
      v2 += re::StringID::operator==(v4, re::AnimationBlendTreeNodeDescription::kClip);
      v4 += 11;
      --v3;
    }
    while (v3);
  }
  return v2;
}

re::IntrospectionSharedLock *re::IntrospectionSharedLock::IntrospectionSharedLock(re::IntrospectionSharedLock *this)
{
  re *v2;
  re *v3;
  int v4;
  std::__shared_mutex_base *v5;

  v2 = (re *)re::IntrospectionSharedLock::m_sharedLockLevel();
  v3 = v2;
  v4 = *(_DWORD *)v2;
  if (!*(_DWORD *)v2)
  {
    v5 = re::introspectionSharedMutex(v2);
    std::__shared_mutex_base::lock_shared(v5);
    v4 = *(_DWORD *)v3;
  }
  *(_DWORD *)v3 = v4 + 1;
  return this;
}

void re::IntrospectionSharedLock::~IntrospectionSharedLock(re::IntrospectionSharedLock *this)
{
  re *v1;
  std::__shared_mutex_base *v3;

  v1 = (re *)re::IntrospectionSharedLock::m_sharedLockLevel();
  if ((*(_DWORD *)v1)-- == 1)
  {
    v3 = re::introspectionSharedMutex(v1);
    std::__shared_mutex_base::unlock_shared(v3);
  }
}

re::IntrospectionDynamicArrayBase *re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase(re::IntrospectionDynamicArrayBase *this)
{
  _QWORD *v2;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED1FA08;
  *((_QWORD *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2 + 6);
  return this;
}

_QWORD *re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::IntrospectionDynamicArrayBase::childInfoCount(re::IntrospectionDynamicArrayBase *this)
{
  return 1;
}

uint64_t re::IntrospectionDynamicArrayBase::childInfo(re::IntrospectionDynamicArrayBase *this, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return *((_QWORD *)this + 6);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Index out of range.", "index == 0", "childInfo", 489);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[4];

  v10[0] = 0;
  v11[0] = 0;
  v12[0] = 0;
  v13[0] = 0;
  v14[0] = 0;
  v10[1] = &str_110;
  v11[1] = &str_110;
  v12[1] = &str_110;
  v13[1] = &str_110;
  v14[1] = &str_110;
  v14[2] = 0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(this, (float *)v10);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 88 * *((_QWORD *)this + 2) - 88);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AnimationBlendTreeNodeDescription>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

void re::IntrospectionDynamicArrayBase::~IntrospectionDynamicArrayBase(re::IntrospectionDynamicArrayBase *this)
{
  *(_QWORD *)this = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArrayBase::resize(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "resize", 480);
  _os_crash();
  __break(1u);
}

void re::IntrospectionDynamicArrayBase::addElement(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "addElement", 481);
  _os_crash();
  __break(1u);
}

void re::IntrospectionDynamicArrayBase::size(re::IntrospectionDynamicArrayBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "size", 482);
  _os_crash();
  __break(1u);
}

void re::IntrospectionDynamicArrayBase::elementAt(re::IntrospectionDynamicArrayBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "elementAt", 483);
  _os_crash();
  __break(1u);
}

{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "elementAt", 484);
  _os_crash();
  __break(1u);
}

_QWORD *re::SerializedReference<re::IntrospectionBase const*>::reset(_QWORD *result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;

  *result = 0;
  v1 = (uint64_t *)result[1];
  if (v1)
  {
    v2 = result;
    v3 = *v1;
    if (*v1)
    {
      if ((v1[1] & 1) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(*v1, v1[2]);
      *(_OWORD *)v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
    }
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 40))(v3, v1);
    v2[1] = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 88 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 64));
          re::StringID::destroyString((re::StringID *)(v3 + 48));
          re::StringID::destroyString((re::StringID *)(v3 + 32));
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 88;
          v5 -= 88;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::AnimationBlendTreeNodeDescription>((uint64_t *)v5[4], (uint64_t *)(v5[4] + 88 * v5[2]), v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::AnimationBlendTreeNodeDescription>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFFELL | *v5 & 1;
      *(_QWORD *)a3 = *v5 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 8) = v5[1];
      *v5 = 0;
      v5[1] = (uint64_t)&str_110;
      LOBYTE(v6) = v5[2];
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
      *(_QWORD *)(a3 + 16) = v5[2] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 24) = v5[3];
      v5[3] = (uint64_t)&str_110;
      v5[2] = 0;
      LOBYTE(v6) = v5[4];
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL | v5[4] & 1;
      *(_QWORD *)(a3 + 32) = v5[4] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 40) = v5[5];
      v5[5] = (uint64_t)&str_110;
      v5[4] = 0;
      LOBYTE(v6) = v5[6];
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFFELL | v5[6] & 1;
      *(_QWORD *)(a3 + 48) = v5[6] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 56) = v5[7];
      v5[7] = (uint64_t)&str_110;
      v5[6] = 0;
      LOBYTE(v6) = v5[8];
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFFFFELL | v5[8] & 1;
      *(_QWORD *)(a3 + 64) = v5[8] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 72) = v5[9];
      v5[9] = (uint64_t)&str_110;
      v5[8] = 0;
      *(_DWORD *)(a3 + 80) = *((_DWORD *)v5 + 20);
      re::StringID::destroyString((re::StringID *)(v5 + 8));
      re::StringID::destroyString((re::StringID *)(v5 + 6));
      re::StringID::destroyString((re::StringID *)(v5 + 4));
      re::StringID::destroyString((re::StringID *)(v5 + 2));
      re::StringID::destroyString((re::StringID *)v5);
      v5 += 11;
      a3 += 88;
    }
    while (v5 != a2);
  }
}

void re::DynamicArray<re::AnimationBlendTreeNodeDescription>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 88 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 64));
      re::StringID::destroyString((re::StringID *)(v10 + 48));
      re::StringID::destroyString((re::StringID *)(v10 + 32));
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 88;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 88 * v4 + 40;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)(v7 - 40) = 0;
        *(_QWORD *)(v7 - 32) = &str_110;
        *(_QWORD *)(v7 - 24) = 0;
        *(_QWORD *)(v7 - 16) = &str_110;
        *(_QWORD *)(v7 - 8) = 0;
        *(_QWORD *)v7 = &str_110;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = &str_110;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = &str_110;
        *(_DWORD *)(v7 + 40) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

float re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(_anonymous_namespace_ *this, float *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 88 * v4;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)a2 & 1;
  *(_QWORD *)v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = &str_110;
  v7 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = &str_110;
  v8 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(_QWORD *)(v5 + 32) = *((_QWORD *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(_QWORD *)(v5 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = &str_110;
  v9 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(_QWORD *)(v5 + 48) = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(_QWORD *)(v5 + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = &str_110;
  v10 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  *(_QWORD *)(v5 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = &str_110;
  result = a2[20];
  *(float *)(v5 + 80) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::AnimationBlendTreeNodeDescription>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 88 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::AnimationBlendTreeNodeDescription>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 88 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 64));
      re::StringID::destroyString((re::StringID *)(v3 + 48));
      re::StringID::destroyString((re::StringID *)(v3 + 32));
      re::StringID::destroyString((re::StringID *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 88;
      v4 -= 88;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 88 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationBlendTreeNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphConnection>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphConnection>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigGraphConnection>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphConnection>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::DynamicArray<re::RigGraphConnection>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphConnection>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphConnection>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigGraphConnection>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphConnection>::addElement(uint64_t a1, re *a2, int a3, _QWORD *a4)
{
  re::IntrospectionBase *v5;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];

  v18 = 0u;
  v19[0] = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  re::StringID::invalid((re::StringID *)&v11);
  re::StringID::invalid((re::StringID *)&v12);
  re::StringID::invalid((re::StringID *)&v13);
  re::StringID::invalid((re::StringID *)&v14);
  re::StringID::invalid((re::StringID *)&v15);
  re::StringID::invalid((re::StringID *)&v16);
  re::StringID::invalid((re::StringID *)&v17);
  re::StringID::invalid((re::StringID *)&v18);
  re::StringID::invalid((re::StringID *)v19);
  re::DynamicArray<re::RigGraphConnection>::add(a4, (uint64_t *)&v10);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v16);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v13);
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  v5 = (re::IntrospectionBase *)(a4[4] + 160 * a4[2] - 160);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v5);
  return v5;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphConnection>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphConnection>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 160 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 160 * a3;
}

_QWORD *re::DynamicArray<re::RigGraphConnection>::deinit(_QWORD *result)
{
  _QWORD *v1;

  if (*result)
  {
    v1 = result;
    result = (_QWORD *)result[4];
    if (result)
    {
      re::ObjectHelper::destroy<re::RigGraphConnection>((uint64_t)result, (uint64_t)&result[20 * v1[2]]);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[4]);
    }
    v1[4] = 0;
    v1[1] = 0;
    v1[2] = 0;
    *v1 = 0;
    ++*((_DWORD *)v1 + 6);
  }
  return result;
}

void re::ObjectHelper::destroy<re::RigGraphConnection>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 144));
      re::StringID::destroyString((re::StringID *)(v3 + 128));
      re::StringID::destroyString((re::StringID *)(v3 + 112));
      re::StringID::destroyString((re::StringID *)(v3 + 96));
      re::StringID::destroyString((re::StringID *)(v3 + 80));
      re::StringID::destroyString((re::StringID *)(v3 + 64));
      re::StringID::destroyString((re::StringID *)(v3 + 48));
      re::StringID::destroyString((re::StringID *)(v3 + 32));
      re::StringID::destroyString((re::StringID *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 160;
    }
    while (v3 != a2);
  }
}

_QWORD *re::DynamicArray<re::RigGraphConnection>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphConnection>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 160 * v9;
        v11 = v7;
        do
        {
          re::ObjectHelper::move<re::RigGraphConnection>(v8, v11);
          v8 += 20;
          v11 += 20;
          v10 -= 160;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::RigGraphConnection>(_QWORD *a1, unint64_t *a2)
{
  uint64_t v3;
  char v4;
  re::StringID *v5;
  char v6;
  re::StringID *v7;
  char v8;
  re::StringID *v9;
  char v10;
  re::StringID *v11;
  char v12;
  re::StringID *v13;
  char v14;
  re::StringID *v15;
  char v16;
  re::StringID *v17;
  char v18;
  re::StringID *v19;
  re::StringID *v20;
  uint64_t v21;

  v3 = *a1;
  *a2 = *a2 & 0xFFFFFFFFFFFFFFFELL | *a1 & 1;
  *a2 = *a1 & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  a2[1] = a1[1];
  *a1 = 0;
  a1[1] = &str_110;
  v5 = (re::StringID *)(a1 + 2);
  v4 = a1[2];
  a2[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | a1[2] & 1;
  a2[2] = a1[2] & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  a2[3] = a1[3];
  a1[3] = &str_110;
  v7 = (re::StringID *)(a1 + 4);
  v6 = a1[4];
  a1[2] = 0;
  a2[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  a2[4] = a1[4] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  a2[5] = a1[5];
  a1[5] = &str_110;
  a1[4] = 0;
  v9 = (re::StringID *)(a1 + 6);
  v8 = a1[6];
  a2[6] = a2[6] & 0xFFFFFFFFFFFFFFFELL | a1[6] & 1;
  a2[6] = a1[6] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  a2[7] = a1[7];
  a1[7] = &str_110;
  a1[6] = 0;
  v11 = (re::StringID *)(a1 + 8);
  v10 = a1[8];
  a2[8] = a2[8] & 0xFFFFFFFFFFFFFFFELL | a1[8] & 1;
  a2[8] = a1[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  a2[9] = a1[9];
  a1[9] = &str_110;
  a1[8] = 0;
  v13 = (re::StringID *)(a1 + 10);
  v12 = a1[10];
  a2[10] = a2[10] & 0xFFFFFFFFFFFFFFFELL | a1[10] & 1;
  a2[10] = a1[10] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  a2[11] = a1[11];
  a1[11] = &str_110;
  a1[10] = 0;
  v15 = (re::StringID *)(a1 + 12);
  v14 = a1[12];
  a2[12] = a2[12] & 0xFFFFFFFFFFFFFFFELL | a1[12] & 1;
  a2[12] = a1[12] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  a2[13] = a1[13];
  a1[13] = &str_110;
  a1[12] = 0;
  v17 = (re::StringID *)(a1 + 14);
  v16 = a1[14];
  a2[14] = a2[14] & 0xFFFFFFFFFFFFFFFELL | a1[14] & 1;
  a2[14] = a1[14] & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  a2[15] = a1[15];
  a1[15] = &str_110;
  v19 = (re::StringID *)(a1 + 16);
  v18 = a1[16];
  a1[14] = 0;
  a2[16] = a2[16] & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  a2[16] = a1[16] & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  a2[17] = a1[17];
  a1[17] = &str_110;
  a1[16] = 0;
  v21 = a1[18];
  v20 = (re::StringID *)(a1 + 18);
  a2[18] = a2[18] & 0xFFFFFFFFFFFFFFFELL | v21 & 1;
  a2[18] = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFFELL | v21 & 1;
  a2[19] = a1[19];
  a1[19] = &str_110;
  *(_QWORD *)v20 = 0;
  re::StringID::destroyString(v20);
  re::StringID::destroyString(v19);
  re::StringID::destroyString(v17);
  re::StringID::destroyString(v15);
  re::StringID::destroyString(v13);
  re::StringID::destroyString(v11);
  re::StringID::destroyString(v9);
  re::StringID::destroyString(v7);
  re::StringID::destroyString(v5);
  re::StringID::destroyString((re::StringID *)a1);
}

void re::DynamicArray<re::RigGraphConnection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  re::StringID *v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 160 * a2 + 144;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 48));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 64));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 80));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 96));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 112));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 128));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 144));
      ++v9;
      v8 += 160;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 160 * v4 + 144;
      do
      {
        v7 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)((char *)v7 - 144));
        re::StringID::invalid((re::StringID *)((char *)v7 - 128));
        re::StringID::invalid((re::StringID *)((char *)v7 - 112));
        re::StringID::invalid((re::StringID *)((char *)v7 - 96));
        re::StringID::invalid((re::StringID *)((char *)v7 - 80));
        re::StringID::invalid((re::StringID *)((char *)v7 - 64));
        re::StringID::invalid((re::StringID *)((char *)v7 - 48));
        re::StringID::invalid((re::StringID *)((char *)v7 - 32));
        re::StringID::invalid((re::StringID *)((char *)v7 - 16));
        re::StringID::invalid(v7);
        v6 += 160;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::RigGraphConnection>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigGraphConnection>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 160 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  v8 = a2[4];
  v5[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[5] = a2[5];
  a2[4] = 0;
  a2[5] = (uint64_t)&str_110;
  v9 = a2[6];
  v5[6] = v5[6] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v5[6] = a2[6] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v5[7] = a2[7];
  a2[6] = 0;
  a2[7] = (uint64_t)&str_110;
  v10 = a2[8];
  v5[8] = v5[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v5[8] = a2[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v5[9] = a2[9];
  a2[8] = 0;
  a2[9] = (uint64_t)&str_110;
  v11 = a2[10];
  v5[10] = v5[10] & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  v5[10] = a2[10] & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  v5[11] = a2[11];
  a2[10] = 0;
  a2[11] = (uint64_t)&str_110;
  v12 = a2[12];
  v5[12] = v5[12] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v5[12] = a2[12] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v5[13] = a2[13];
  a2[12] = 0;
  a2[13] = (uint64_t)&str_110;
  v13 = a2[14];
  v5[14] = v5[14] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v5[14] = a2[14] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v5[15] = a2[15];
  a2[14] = 0;
  a2[15] = (uint64_t)&str_110;
  v14 = a2[16];
  v5[16] = v5[16] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  v5[16] = a2[16] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  v5[17] = a2[17];
  a2[16] = 0;
  a2[17] = (uint64_t)&str_110;
  v15 = a2[18];
  v5[18] = v5[18] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
  v5[18] = a2[18] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
  v5[19] = a2[19];
  a2[18] = 0;
  a2[19] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::RigGraphConnection>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigGraphConnection>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigGraphConnection>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  if (*(re::Allocator **)a2 == a4)
  {
    v9 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    re::ObjectHelper::destroy<re::RigGraphConnection>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 160 * v9);
  }
  else
  {
    re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)a2);
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<re::RigGraphConnection>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = 160 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 160;
        v13 -= 160;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 160 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 160 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 6;
        do
        {
          v6 = *(_QWORD *)(v3 + 24);
          if (v6)
          {
            if (*(_QWORD *)(v3 + 56))
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
            *(_QWORD *)(v3 + 56) = 0;
            *(_QWORD *)(v3 + 32) = 0;
            *(_QWORD *)(v3 + 40) = 0;
            *(_QWORD *)(v3 + 24) = 0;
            ++*(_DWORD *)(v3 + 48);
          }
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 64;
          v5 -= 64;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 48 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 48;
          v5 -= 48;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::AnimationBlendTreeInstance<float>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<float>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<float>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const re::IntrospectionBase *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[7];
}

uint64_t re::AnimationBlendTreeInstance<float>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<float>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<float>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<float>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

uint64_t re::Timeline::derivedFillMode(re::Timeline *this)
{
  return *((char *)this + 16);
}

double re::AnimationImpl<float>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 120, 8);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1EBB0;
  *(_BYTE *)(v2 + 108) = 0;
  return result;
}

BOOL re::AnimationImpl<float>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v6);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[7] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<float>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<float>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  BOOL v6;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    *a6 = *a4;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<float>::evaluateCore(unint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t a6, __n128 a7)
{
  unint64_t v7;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  re::BindPoint *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  float *Runtime;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  unint64_t v82;
  uint64_t v83;

  v12 = a1;
  v83 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7.n128_f64[0]);
  v13 = *(_QWORD **)(v12 + 80);
  if (v13[36])
  {
    v14 = 0;
    v15 = *(_QWORD *)(v12 + 400);
    do
    {
      if (v15 >= *(_QWORD *)(v12 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(v12 + 384), v15 + 1);
        v15 = *(_QWORD *)(v12 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 416) + 8 * v15++) = (char *)&v57 + v14;
      *(_QWORD *)(v12 + 400) = v15;
      ++*(_DWORD *)(v12 + 408);
      v14 += 4;
    }
    while (v14 != 12);
    *(_QWORD *)(v12 + 328) = a2;
    *(_QWORD *)(v12 + 336) = a3;
    *(_QWORD *)(v12 + 424) = a4;
    *(_QWORD *)(v12 + 432) = a5;
    a7.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<float>::evaluateBlend(v12, 0, 0, a7);
    v16 = *(_QWORD *)(v12 + 360);
    if (v16)
    {
      v17 = *(_DWORD **)(*(_QWORD *)(v12 + 376) + 16 * v16 - 16);
      if (v17 != (_DWORD *)a6)
        *(_DWORD *)a6 = *v17;
    }
    *(_QWORD *)(v12 + 400) = 0;
    ++*(_DWORD *)(v12 + 408);
    *(_QWORD *)(v12 + 360) = 0;
    ++*(_DWORD *)(v12 + 368);
    return;
  }
  v49 = (_DWORD *)a6;
  v18 = *(_QWORD *)(v12 + 440);
  v19 = *(re::BindPoint **)(v12 + 320);
  v51 = *(_QWORD *)(v12 + 312);
  v55[0] = a2;
  v55[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v52, (uint64_t)(v13 + 44));
  v20 = v13[39];
  if (v20 != *(_QWORD *)(v18 + 56))
  {
    if (!v20)
      goto LABEL_34;
    a6 = 0;
    v12 = v18 + 40;
    do
    {
      LODWORD(v57) = 0;
      re::DynamicArray<float>::add((_anonymous_namespace_ *)(v18 + 40), (float *)&v57);
      ++a6;
      v20 = v13[39];
    }
    while (a6 < v20);
  }
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    while (1)
    {
      a6 = v53;
      if (v53 <= v22)
        break;
      v12 = *(_QWORD *)(v54 + 8 * v22);
      v7 = v13[42];
      if (v7 <= v12)
        goto LABEL_65;
      a6 = v12 + 1;
      if (v7 <= v12 + 1)
        goto LABEL_66;
      if (v20 <= v12)
        goto LABEL_67;
      v23 = v13[43];
      v24 = *(_QWORD *)(v23 + 8 * v12);
      v12 = *(_QWORD *)(v13[40] + 8 * v12);
      v25 = (_BYTE *)re::Slice<re::AnimationClock>::range(v55, v24, *(_QWORD *)(v23 + 8 * a6));
      a6 = *(_QWORD *)(v18 + 56);
      if (a6 <= v22)
        goto LABEL_68;
      v27 = v26;
      if (!v26)
        goto LABEL_69;
      v28 = *(_QWORD *)(v18 + 72);
      if (v25[16])
        v29 = *v25 == 2;
      else
        v29 = 1;
      if (!v29 || (*(_DWORD *)(v28 + 4 * v22) = *a4, *(_DWORD *)(v12 + 8) == 49))
        (*(void (**)(unint64_t, _BYTE *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v12 + 104))(v12, v25, v26, a4, a5, v28 + v21);
      a6 = *(_QWORD *)(v18 + 16);
      if (a6 <= v22)
        goto LABEL_70;
      a6 = *(_QWORD *)(v18 + 56);
      if (a6 <= v22)
        goto LABEL_71;
      re::AnimationBlendTreeRigContext<float>::setRigDataValue<float>(v18, *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v22), *(float *)(*(_QWORD *)(v18 + 72) + 4 * v22));
      ++v22;
      v20 = v13[39];
      v21 += 4;
      if (v22 >= v20)
        goto LABEL_34;
    }
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 476;
    v79 = 2048;
    v80 = v22;
    v81 = 2048;
    v82 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 476;
    v79 = 2048;
    v80 = v12;
    v81 = 2048;
    v82 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    v20 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 476;
    v79 = 2048;
    v80 = a6;
    v81 = 2048;
    v82 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 476;
    v79 = 2048;
    v80 = v12;
    v81 = 2048;
    v82 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 789;
    v79 = 2048;
    v80 = v22;
    v81 = 2048;
    v82 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    re::internal::assertLog((re::internal *)6, v26, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_70:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 789;
    v79 = 2048;
    v80 = v22;
    v81 = 2048;
    v82 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 789;
    v79 = 2048;
    v80 = v22;
    v81 = 2048;
    v82 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)6, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a6, v34);
    _os_crash();
    __break(1u);
LABEL_73:
    re::internal::assertLog((re::internal *)6, v48, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
LABEL_74:
    v56 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v75 = 136315906;
    v76 = "operator[]";
    v77 = 1024;
    v78 = 789;
    v79 = 2048;
    v80 = a6;
    v81 = 2048;
    v82 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_34:
  if (v51)
  {
    v30 = 0;
    v31 = 0;
    a6 = 0;
    do
    {
      if (*((_QWORD *)v19 + 3) && re::BindPoint::isAlive(v19))
      {
        v32 = (float *)re::BindPoint::valueUntyped(v19);
        v34 = *(_QWORD *)(v18 + 232);
        if (v34 <= a6)
          goto LABEL_72;
        v35 = *(_QWORD *)(v18 + 248);
        v36 = v32;
        switch(*(_BYTE *)(v35 + v31 + 32))
        {
          case 1:
            v37 = *v32;
            Runtime = (float *)re::RigDataValue::getRuntimeValue<int>(v35 + v31, v33);
            goto LABEL_42;
          case 2:
            v37 = *v32;
            Runtime = (float *)re::RigDataValue::getRuntimeValue<unsigned int>(v35 + v31, v33);
LABEL_42:
            *Runtime = v37;
            break;
          case 3:
            re::AnimationBlendTreeRigContext<float>::setRigDataValue<float>(v18, a6, *v32);
            break;
          case 4:
            v39 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v35 + v31, v33);
            v41 = *((_OWORD *)v36 + 1);
            v40 = *((_OWORD *)v36 + 2);
            *v39 = *(_OWORD *)v36;
            v39[1] = v41;
            v39[2] = v40;
            break;
          case 5:
            v42 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v35 + v31, v33);
            v43 = *((_OWORD *)v36 + 3);
            v45 = *(_OWORD *)v36;
            v44 = *((_OWORD *)v36 + 1);
            v42[2] = *((_OWORD *)v36 + 2);
            v42[3] = v43;
            *v42 = v45;
            v42[1] = v44;
            break;
          case 6:
            v46 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v35 + v31, v33);
            goto LABEL_49;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v35 + v31, v33) = *(_QWORD *)v32;
            break;
          case 8:
            v46 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v35 + v31, v33);
LABEL_49:
            *v46 = *(_OWORD *)v36;
            break;
          case 0xA:
            v7 = *(_QWORD *)(v18 + 96);
            if (v7 <= a6)
              goto LABEL_74;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v18 + 112) + v30), (const re::SkeletalPose *)v32);
            break;
          case 0xD:
            if (*(_QWORD *)(v35 + v31 + 40) >> 1 == 82389)
            {
              v47 = *(char **)(v35 + v31 + 48);
              if (v47 == "SRT" || !strcmp(v47, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v35 + v31, v36);
            }
            break;
          default:
            break;
        }
      }
      v19 = (re::BindPoint *)((char *)v19 + 48);
      ++a6;
      v31 += 288;
      v30 += 24;
    }
    while (v51 != a6);
  }
  if (!*(_BYTE *)(v18 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v18 + 2360));
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v57, (re::EvaluationContext *)(v18 + 4896));
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v18 + 5600) + 16))(v18 + 5600, &v57);
  if (!*(_QWORD *)(v18 + 272))
    goto LABEL_73;
  *v49 = *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(*(_QWORD *)(v18 + 288), v48);
  if (v52 && v53)
    (*(void (**)(void))(*(_QWORD *)v52 + 40))();
}

void re::AnimationImpl<float>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::Timeline::childCount(re::Timeline *this)
{
  return 0;
}

void re::Timeline::child(re::Timeline *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Not implemented.", "!\"Unreachable code\"", "child", 181);
  _os_crash();
  __break(1u);
}

uint64_t re::Timeline::isInstanced(re::Timeline *this)
{
  return 0;
}

uint64_t re::Timeline::makeCompositionChain(re::Timeline *this, Allocator *a2)
{
  return 0;
}

uint64_t re::Timeline::isValidBindPoint()
{
  return 0;
}

uint64_t re::Timeline::animationValueType(re::Timeline *this)
{
  return 0;
}

uint64_t re::AnimationBlendTreeInstance<float>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F270;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::EvaluationModelSingleThread::~EvaluationModelSingleThread(re::EvaluationModelSingleThread *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24ED26FC0;
  v2 = *((_QWORD *)this + 95);
  if (v2)
  {
    if (*((_QWORD *)this + 96))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 97));
      *((_QWORD *)this + 96) = 0;
      *((_QWORD *)this + 97) = 0;
    }
    *((_QWORD *)this + 95) = 0;
  }
  v3 = *((_QWORD *)this + 92);
  if (v3)
  {
    if (*((_QWORD *)this + 93))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 94));
      *((_QWORD *)this + 93) = 0;
      *((_QWORD *)this + 94) = 0;
    }
    *((_QWORD *)this + 92) = 0;
  }
  v4 = *((_QWORD *)this + 89);
  if (v4)
  {
    if (*((_QWORD *)this + 90))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 91));
      *((_QWORD *)this + 90) = 0;
      *((_QWORD *)this + 91) = 0;
    }
    *((_QWORD *)this + 89) = 0;
  }
  v5 = *((_QWORD *)this + 86);
  if (v5)
  {
    if (*((_QWORD *)this + 87))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 88));
      *((_QWORD *)this + 87) = 0;
      *((_QWORD *)this + 88) = 0;
    }
    *((_QWORD *)this + 86) = 0;
  }
  re::FixedRegisterTable::~FixedRegisterTable((re::EvaluationModelSingleThread *)((char *)this + 496));
  v6 = *((_QWORD *)this + 59);
  if (v6)
  {
    if (*((_QWORD *)this + 60))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 61));
      *((_QWORD *)this + 60) = 0;
      *((_QWORD *)this + 61) = 0;
    }
    *((_QWORD *)this + 59) = 0;
  }
  re::FixedRegisterTable::~FixedRegisterTable((re::EvaluationModelSingleThread *)((char *)this + 280));
  re::FixedArray<re::EvaluationModelSingleThread::BranchGroupExecutionData>::deinit((_QWORD *)this + 32);
  re::FixedArray<re::EvaluationContext>::deinit((_QWORD *)this + 29);
  re::FixedArray<re::EvaluationCallbackData>::deinit((_QWORD *)this + 26);
  re::FixedRegisterTable::~FixedRegisterTable((re::EvaluationModelSingleThread *)((char *)this + 16));
}

{
  re::EvaluationModelSingleThread::~EvaluationModelSingleThread(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<re::EvaluationModelSingleThread::BranchGroupExecutionData>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = 456 * v2;
      do
      {
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v4 + 33));
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v4 + 9));
        re::FixedArray<re::EvaluationModelSingleThread>::deinit(v4 + 6);
        re::FixedArray<re::FixedRegisterIdTable>::deinit(v4 + 3);
        if (*v4)
        {
          if (v4[1])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[2]);
            v4[1] = 0;
            v4[2] = 0;
          }
          *v4 = 0;
        }
        v4 += 57;
        v5 -= 456;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::EvaluationModelSingleThread>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void (***v4)(_QWORD);
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (void (***)(_QWORD))result[2];
      v5 = 784 * v2;
      do
      {
        (**v4)(v4);
        v4 += 98;
        v5 -= 784;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::FixedRegisterIdTable>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::FixedRegisterTable *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::FixedRegisterTable *)result[2];
      v5 = 192 * v2;
      do
      {
        re::FixedRegisterTable::~FixedRegisterTable(v4);
        v4 = (re::FixedRegisterTable *)(v6 + 192);
        v5 -= 192;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::EvaluationContext>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  re::FixedRegisterTable *v5;
  uint64_t v6;
  uint64_t v7;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 432 * v2;
      v5 = (re::FixedRegisterTable *)(result[2] + 216);
      do
      {
        v6 = *((_QWORD *)v5 + 24);
        if (v6)
        {
          if (*((_QWORD *)v5 + 25))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)v5 + 26));
            *((_QWORD *)v5 + 25) = 0;
            *((_QWORD *)v5 + 26) = 0;
          }
          *((_QWORD *)v5 + 24) = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable(v5);
        v7 = *((_QWORD *)v5 - 3);
        if (v7)
        {
          if (*((_QWORD *)v5 - 2))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v5 - 1));
            *((_QWORD *)v5 - 2) = 0;
            *((_QWORD *)v5 - 1) = 0;
          }
          *((_QWORD *)v5 - 3) = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)((char *)v5 - 216));
        v5 = (re::FixedRegisterTable *)((char *)v5 + 432);
        v4 -= 432;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::EvaluationCallbackData>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 448 * v2;
      v5 = (_QWORD *)(result[2] + 432);
      do
      {
        v6 = *(v5 - 2);
        if (v6)
        {
          if (*(v5 - 1))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *v5);
            *(v5 - 1) = 0;
            *v5 = 0;
          }
          *(v5 - 2) = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v5 - 26));
        v7 = *(v5 - 29);
        if (v7)
        {
          if (*(v5 - 28))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(v5 - 27));
            *(v5 - 28) = 0;
            *(v5 - 27) = 0;
          }
          *(v5 - 29) = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v5 - 53));
        v5 += 56;
        v4 -= 448;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (uint64_t *)re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[](a1, i);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v4 + 28);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v4 + 22);
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v4 + 16);
      re::DataArray<re::RigGraphOperatorDefinition>::~DataArray(v4 + 8);
      re::DataArray<re::RigGraphNode>::~DataArray(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 272 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 272 * (a2 & 7);
}

double re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 32;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *a1)
{
  uint64_t v2;

  if ((*a1 & 0x80000000) != 0)
  {
    *a1 &= ~0x80000000;
    v2 = (uint64_t)(a1 + 12);
    re::StringID::destroyString((re::StringID *)(a1 + 2));
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(v2);
    re::StringID::destroyString((re::StringID *)(a1 + 8));
  }
}

_QWORD *re::DataArray<re::RigGraphOperatorDefinition>::~DataArray(_QWORD *a1)
{
  re::DataArray<re::RigGraphOperatorDefinition>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DataArray<re::RigGraphOperatorDefinition>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::RigGraphOperatorDefinition>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::RigGraphOperatorDefinition>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::RigGraphOperatorDefinition>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::DataArray<re::RigGraphOperatorDefinition>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;

  v2 = a2;
  v4 = a2 >> 16;
  v5 = re::DataArray<re::RigGraphOperatorDefinition>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    v6 = (re::StringID *)v5;
    re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)(v5 + 40));
    re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)v6 + 2);
    re::StringID::destroyString(v6);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *(_DWORD *)v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

unint64_t re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle(unsigned __int16 *a1)
{
  unint64_t v1;

  v1 = a1[5];
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (v1 << 16) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v1 + 8)
                                                    + 4 * a1[4]) & 0xFFFFFF) << 32) | a1[4];
}

uint64_t re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = v2 - 1;
  if (v2 - 1 > a2)
  {
    *(_OWORD *)(*(_QWORD *)(result + 32) + 16 * a2) = *(_OWORD *)(*(_QWORD *)(result + 32) + 16 * v2 - 16);
    v3 = *(_QWORD *)(result + 16) - 1;
  }
  *(_QWORD *)(result + 16) = v3;
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator(uint64_t a1, uint64_t a2, char a3)
{
  *(_QWORD *)a1 = a2;
  if ((a3 & 1) != 0 || !*(_DWORD *)(a2 + 40))
  {
    *(_DWORD *)(a1 + 8) = -1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    if (!*(_QWORD *)(a2 + 16))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (!**(_DWORD **)(*(_QWORD *)(a2 + 32) + 8))
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)a1);
  }
  return a1;
}

_WORD *re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(_WORD *result)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  v3 = v2 - 1;
  v4 = result[4];
  v5 = result[5];
  while (1)
  {
    ++v4;
    if (v5 < v3 && *(_DWORD *)(v1 + 44) <= v4)
    {
      v4 = 0;
      result[5] = ++v5;
    }
    if (v5 == v3 && *(_DWORD *)(v1 + 48) <= v4)
      break;
    if (v2 <= v5)
    {
      result[4] = v4;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 16 * v5 + 8) + 4 * v4))
    {
      result[4] = v4;
      return result;
    }
  }
  *((_DWORD *)result + 2) = -1;
  return result;
}

uint64_t re::DataArray<re::RigGraphOperatorDefinition>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 72 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

_QWORD *re::DataArray<re::RigGraphNode>::~DataArray(_QWORD *a1)
{
  re::DataArray<re::RigGraphNode>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DataArray<re::RigGraphNode>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::RigGraphNode>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::RigGraphNode>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::RigGraphNode>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

uint64_t re::DataArray<re::RigGraphNode>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t result;
  _DWORD *v6;

  v2 = a2;
  v4 = a2 >> 16;
  result = re::DataArray<re::RigGraphNode>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    v6 = (_DWORD *)result;
    re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(result + 160);
    re::DynamicArray<re::StringID>::deinit((uint64_t)(v6 + 30));
    re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(v6 + 20));
    re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(v6 + 10));
    result = re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v6);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DataArray<re::RigGraphNode>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 200 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StringID *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        v6 = (re::StringID *)(v3 + 8);
        do
        {
          re::StringID::destroyString(v6);
          v6 = (re::StringID *)((char *)v6 + 24);
          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RigGraphNodeChild>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 96 * v4;
        do
        {
          re::DynamicArray<re::RigGraphNodeOutputParameter>::deinit((uint64_t)v3 + 56);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v3 + 16);
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 96);
          v5 -= 96;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RigGraphNodeOutputParameter>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 6;
        do
        {
          re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit((uint64_t)v3 + 24);
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 64);
          v5 -= 64;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 40));
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 56;
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 24));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::EvaluationTree::~EvaluationTree(re::EvaluationTree *this)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 253);
  if (v2)
  {
    if (*((_QWORD *)this + 257))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 257) = 0;
    *((_QWORD *)this + 254) = 0;
    *((_QWORD *)this + 255) = 0;
    *((_QWORD *)this + 253) = 0;
    ++*((_DWORD *)this + 512);
  }
  re::DynamicArray<re::EvaluationCallbackData>::deinit((uint64_t)this + 1984);
  for (i = 0; i != -320; i -= 40)
  {
    v4 = (_QWORD *)((char *)this + i);
    v5 = *(_QWORD *)((char *)this + i + 1944);
    if (v5)
    {
      if (v4[247])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v4[247] = 0;
      v4[244] = 0;
      v4[245] = 0;
      v4[243] = 0;
      ++*(_DWORD *)((char *)this + i + 1968);
    }
  }
  re::BucketArray<re::EvaluationBranchGroupData,8ul>::deinit((uint64_t)this + 1608);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1608);
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationTree *)((char *)this + 1288));
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationTree *)((char *)this + 968));
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationTree *)((char *)this + 648));
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationTree *)((char *)this + 328));
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::EvaluationTree *)((char *)this + 8));
}

uint64_t re::DynamicArray<re::EvaluationCallbackData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 448 * v4;
        v6 = (_QWORD *)(v3 + 432);
        do
        {
          v7 = *(v6 - 2);
          if (v7)
          {
            if (*(v6 - 1))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *v6);
              *(v6 - 1) = 0;
              *v6 = 0;
            }
            *(v6 - 2) = 0;
          }
          re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v6 - 26));
          v8 = *(v6 - 29);
          if (v8)
          {
            if (*(v6 - 28))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(v6 - 27));
              *(v6 - 28) = 0;
              *(v6 - 27) = 0;
            }
            *(v6 - 29) = 0;
          }
          re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v6 - 53));
          v6 += 56;
          v5 -= 448;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::BucketArray<re::EvaluationBranchGroupData,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](a1, i);
      re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::DynamicRegisterIdTable *)(v4 + 376));
      re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::DynamicRegisterIdTable *)(v4 + 56));
      re::BucketArray<re::EvaluationBranchData,8ul>::deinit(v4);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 696 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 696 * (a2 & 7);
}

uint64_t re::BucketArray<re::EvaluationBranchData,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (uint64_t *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](a1, i);
      re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::DynamicRegisterIdTable *)(v4 + 6));
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::EvaluationBranchData,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 368 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 368 * (a2 & 7);
}

void re::RigGraphCompilation::~RigGraphCompilation(re::RigGraphCompilation *this)
{
  re::DynamicArray<re::RigDataValue>::deinit((uint64_t)this + 96);
  re::DynamicArray<re::RigDataValue>::deinit((uint64_t)this + 56);
  re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::deinit((uint64_t)this);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this);
}

uint64_t re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (uint64_t *)re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::operator[](a1, i);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 6)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 6)) + 40 * (a2 & 0x3F);
}

uint64_t re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        v6 = (_QWORD *)(v3 + 8);
        do
        {
          v7 = *(v6 - 1);
          if (v7)
          {
            if (*v6)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v6[1]);
              *v6 = 0;
              v6[1] = 0;
            }
            *(v6 - 1) = 0;
          }
          v6 += 3;
          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::FixedArray<re::BindPoint>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2] + 8;
      v5 = 48 * v2;
      do
      {
        re::DynamicArray<re::BindPoint::BindPointData>::deinit(v4);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit(v4);
        v4 += 48;
        v5 -= 48;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::BlendSpace::~BlendSpace(re::BlendSpace *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    if (*((_QWORD *)this + 22))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 23));
      *((_QWORD *)this + 22) = 0;
      *((_QWORD *)this + 23) = 0;
    }
    *((_QWORD *)this + 21) = 0;
  }
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)this + 12);
  re::FixedArray<re::BlendSpaceAxisDefinition>::deinit((_QWORD *)this + 9);
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
}

_QWORD *re::FixedArray<re::BlendSpaceAxisDefinition>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 48 * v2;
      do
      {
        re::StringID::destroyString((re::StringID *)(v4 + 16));
        re::StringID::destroyString((re::StringID *)v4);
        v4 += 48;
        v5 -= 48;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

float re::AnimationBlendTreeInstance<float>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  float v48;
  float v49;
  unint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  unint64_t v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = a2;
    v67 = 2048;
    v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v60 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v52 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v4;
    v67 = 2048;
    v68 = v52;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<float>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v57, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v58;
    if (v58 > v4)
    {
      v4 = *(_QWORD *)(v59 + 8 * v4);
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(_DWORD **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                v33 = *v29 == 2;
              else
                v33 = 1;
              if (!v33 || (*(_DWORD *)v7 = *v31, v28[2] == 49))
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, _DWORD *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              v34 = a1 + 344;
              v69.n128_u64[0] = v7;
              v69.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v57 = 0;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v69 = 0u;
          v56 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v61 = 136315906;
          v62 = "operator[]";
          v63 = 1024;
          v64 = 476;
          v65 = 2048;
          v66 = v4;
          v67 = 2048;
          v68 = v56;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v57 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v54 = v23;
        v55 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v61 = 136315906;
        v62 = "operator[]";
        v63 = 1024;
        v64 = 476;
        v65 = 2048;
        v66 = v55;
        v67 = 2048;
        v68 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v57 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v53 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v4;
      v67 = 2048;
      v68 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 468;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v69.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v69.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v69);
  }
LABEL_37:
  v9 = v12 + v9;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v9;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(float **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * (v36 - 2);
  v44 = *(float **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(float **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  v48 = *v44;
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
    v49 = v48 + *v39;
  else
    v49 = (float)((float)(v12 / v9) * *v39) + (float)(v48 * (float)(1.0 - (float)(v12 / v9)));
  *v46 = v49;
  v69.n128_u64[0] = (unint64_t)v46;
  v69.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v69);
  if (v45)
  {
    v50 = *(_QWORD *)(a1 + 400);
    if (v50 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v50 + 1);
      v50 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v50) = v45;
    *(_QWORD *)(a1 + 400) = v50 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

_QWORD *re::DynamicArray<float *>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<float *>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<float *>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<float *>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<float *>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::Slice<re::AnimationClock>::range(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 < a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive <= size()", "range", 241, a2, v3);
    _os_crash();
    __break(1u);
  }
  else if (v3 >= a3)
  {
    return *a1 + 72 * a2;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 242, a2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

__n128 re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(a1 + 32) + 16 * v5) = *a2;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t *re::FixedArray<unsigned long>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<unsigned long>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<unsigned long>::copy(a1, a2);
  }
  return a1;
}

void re::FixedArray<unsigned long>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

void *re::FixedArray<unsigned long>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)(a2 + 16), 8 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 8 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

float *re::AnimationBlendTreeRigContext<float>::setRigDataValue<float>(uint64_t a1, unint64_t a2, float a3)
{
  unint64_t v3;
  float *result;

  v3 = *(_QWORD *)(a1 + 232);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
    result = (float *)_os_crash();
    __break(1u);
  }
  else
  {
    result = (float *)re::RigDataValue::getRuntimeValue<float>(*(_QWORD *)(a1 + 248) + 288 * a2, a2);
    *result = a3;
  }
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<unsigned int>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 248) > v5)
    {
      v6 = *(_QWORD *)(v4 + 256);
      return v6 + 4 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 32) > v5)
    {
      v6 = *(_QWORD *)(v7 + 40);
      return v6 + 4 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<re::Vector2<float>>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 368) > v5)
    {
      v6 = *(_QWORD *)(v4 + 376);
      return v6 + 8 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 152) > v5)
    {
      v6 = *(_QWORD *)(v7 + 160);
      return v6 + 8 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 296) > v5)
    {
      v6 = *(_QWORD *)(v4 + 304);
      return v6 + 48 * v5;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 80) > v5)
    {
      v6 = *(_QWORD *)(v7 + 88);
      return v6 + 48 * v5;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v4 + 320) > v5)
    {
      v6 = *(_QWORD *)(v4 + 328);
      return v6 + (v5 << 6);
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 == 3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(v7 + 104) > v5)
    {
      v6 = *(_QWORD *)(v7 + 112);
      return v6 + (v5 << 6);
    }
    goto LABEL_12;
  }
  if (v2 == 1)
    return a1 + 112;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected runtime value type: %u", "!\"Unreachable code\"", "getRuntimeValue", 256, *(unsigned __int8 *)(a1 + 96));
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::EvaluationContextSlices::init(re::EvaluationContextSlices *this, re::EvaluationContext *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  re::SliceRegisterTable::operator=<re::FixedRegisterTable>(this, a2);
  v4 = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 26);
  *((_QWORD *)this + 17) = v4;
  result = re::SliceRegisterTable::operator=<re::FixedRegisterTable>((_QWORD *)this + 18, (_QWORD *)a2 + 27);
  v6 = *((_QWORD *)a2 + 52);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 53);
  *((_QWORD *)this + 35) = v6;
  return result;
}

_QWORD *re::SliceRegisterTable::operator=<re::FixedRegisterTable>(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2[1];
  *result = a2[2];
  result[1] = v2;
  v3 = a2[4];
  result[2] = a2[5];
  result[3] = v3;
  v4 = a2[7];
  result[4] = a2[8];
  result[5] = v4;
  v5 = a2[10];
  result[6] = a2[11];
  result[7] = v5;
  v6 = a2[13];
  result[8] = a2[14];
  result[9] = v6;
  v7 = a2[16];
  result[10] = a2[17];
  result[11] = v7;
  v8 = a2[19];
  result[12] = a2[20];
  result[13] = v8;
  v9 = a2[22];
  result[14] = a2[23];
  result[15] = v9;
  return result;
}

uint64_t re::AnimationBlendTreeInstance<float>::initBindPoints<float>(uint64_t a1, uint64_t a2, uint64_t a3, re::BindNode **a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  size_t v13;
  _QWORD *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16[2];
  uint64_t v17;
  _QWORD v18[6];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  result = re::FixedArray<re::BindPoint>::init<>(a1, a2, *(_QWORD *)(a3 + 16));
  if (*(_QWORD *)(a3 + 16))
  {
    v8 = 0;
    v9 = 0;
    v10 = 8;
    do
    {
      if ((v11 & 1) == 0)
      {
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v15);
        }
      }
      v12 = *(_QWORD *)(a3 + 16);
      if (v12 <= v9)
      {
        v16[0] = 0;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v19 = 136315906;
        v20 = "operator[]";
        v21 = 1024;
        v22 = 797;
        v23 = 2048;
        v24 = v9;
        v25 = 2048;
        v26 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_12:
        v18[5] = 0;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v19 = 136315906;
        v20 = "operator[]";
        v21 = 1024;
        v22 = 468;
        v23 = 2048;
        v24 = v9;
        v25 = 2048;
        v26 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v13 = strlen(*(const char **)(*(_QWORD *)(a3 + 32) + v10));
      v16[0] = *(_QWORD *)(*(_QWORD *)(a3 + 32) + v10);
      v16[1] = v13;
      re::BindNode::bindPointWithOverride(a4, (uint64_t)re::introspect<float>(void)::info, v16, (uint64_t)&v17);
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 <= v9)
        goto LABEL_12;
      v14 = (_QWORD *)(*(_QWORD *)(a1 + 16) + v8);
      *v14 = v17;
      re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v14 + 1), (uint64_t)v18);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v18);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v18);
      ++v9;
      v10 += 16;
      v8 += 48;
    }
    while (v9 < *(_QWORD *)(a3 + 16));
  }
  return result;
}

double re::EvaluationTree::EvaluationTree(re::EvaluationTree *this)
{
  uint64_t v1;
  char *v2;
  double result;

  v1 = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((_DWORD *)this + 406) = 1;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 78) = 0;
  *((_DWORD *)this + 98) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 118) = 0;
  *((_DWORD *)this + 128) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_DWORD *)this + 138) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 158) = 0;
  *((_DWORD *)this + 178) = 0;
  *((_DWORD *)this + 188) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_DWORD *)this + 198) = 0;
  *((_DWORD *)this + 208) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 218) = 0;
  *((_DWORD *)this + 228) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_DWORD *)this + 238) = 0;
  *((_DWORD *)this + 258) = 0;
  *((_DWORD *)this + 268) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_DWORD *)this + 278) = 0;
  *((_DWORD *)this + 288) = 0;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_DWORD *)this + 298) = 0;
  *((_DWORD *)this + 308) = 0;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_DWORD *)this + 318) = 0;
  *((_DWORD *)this + 338) = 0;
  *((_DWORD *)this + 348) = 0;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_DWORD *)this + 358) = 0;
  *((_DWORD *)this + 368) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_DWORD *)this + 378) = 0;
  *((_DWORD *)this + 388) = 0;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_DWORD *)this + 398) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 168) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 248) = 0;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_DWORD *)this + 328) = 0;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_QWORD *)this + 201) = 0;
  *((_QWORD *)this + 200) = 0;
  *((_QWORD *)this + 202) = 0;
  *((_QWORD *)this + 205) = 0;
  *((_QWORD *)this + 204) = 0;
  *((_DWORD *)this + 414) = 0;
  *((_QWORD *)this + 206) = 0;
  do
  {
    v2 = (char *)this + v1;
    *((_QWORD *)v2 + 212) = 0;
    *((_QWORD *)v2 + 208) = 0;
    *((_QWORD *)v2 + 210) = 0;
    *((_QWORD *)v2 + 209) = 0;
    v1 += 40;
    *((_DWORD *)v2 + 422) = 0;
  }
  while (v1 != 320);
  *((_DWORD *)this + 502) = 0;
  *((_QWORD *)this + 250) = 0;
  result = 0.0;
  *((_OWORD *)this + 124) = 0u;
  *((_QWORD *)this + 257) = 0;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_DWORD *)this + 512) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      result = *(_QWORD **)(v10 + v8);
      if (result)
      {
        if (*(_QWORD *)(v10 + v8 + 8))
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v10 + v8 + 16));
          *(_QWORD *)(v10 + v8 + 8) = 0;
          *(_QWORD *)(v10 + v8 + 16) = 0;
          v4 = v3[2];
        }
        *(_QWORD *)(v10 + v8) = 0;
      }
      ++v9;
      v8 += 24;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = (_QWORD *)(v3[4] + v6);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

re::RigDataValue *re::DynamicArray<re::RigDataValue>::add(uint64_t a1, const re::RigDataValue *a2)
{
  unint64_t v4;
  re::RigDataValue *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicArray<re::RigDataValue>::growCapacity((_QWORD *)a1, v4 + 1);
    v4 = *(_QWORD *)(a1 + 16);
  }
  result = re::RigDataValue::RigDataValue((re::RigDataValue *)(*(_QWORD *)(a1 + 32) + 288 * v4), a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_QWORD *re::RigGraphCompilation::operator=(_QWORD *a1, _QWORD *a2)
{
  re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::operator=(a1, a2);
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(a1 + 7), (uint64_t)(a2 + 7));
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  return a1;
}

_QWORD *re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>@<X0>(re::EvaluationContextManager *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (!*((_BYTE *)this + 2528))
    re::EvaluationContextManager::buildEvaluationContext(this);
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  re::SliceRegisterIdTable::operator=<re::DynamicRegisterIdTable>((_QWORD *)a2, (_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 43);
  *(_QWORD *)(a2 + 128) = *((_QWORD *)this + 45);
  *(_QWORD *)(a2 + 136) = v4;
  result = re::SliceRegisterIdTable::operator=<re::DynamicRegisterIdTable>((_QWORD *)(a2 + 144), (_QWORD *)this + 181);
  v6 = *((_QWORD *)this + 223);
  *(_QWORD *)(a2 + 272) = *((_QWORD *)this + 225);
  *(_QWORD *)(a2 + 280) = v6;
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v12 = v8[1];
          *v11 = *v8;
          v11[1] = v12;
          *v8 = 0;
          v8[1] = 0;
          v13 = v11[2];
          v11[2] = v8[2];
          v8[2] = v13;
          if (*v8)
            *v8 = 0;
          v8 += 3;
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigDataValue>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigDataValue>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigDataValue>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

__n128 re::DynamicArray<re::EvaluationRegister>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  _OWORD *v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::EvaluationRegister>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_OWORD *)(*((_QWORD *)this + 4) + 32 * v4);
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationRegister>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::EvaluationRegister>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::EvaluationRegister>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::EvaluationRegister>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<int>::add(_QWORD *this, _DWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<float>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_DWORD *)(v3[4] + 4 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

__n128 re::DynamicArray<re::Vector3<float>>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Vector3<float>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Vector3<float>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Quaternion<float>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Quaternion<float>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

__n128 re::DynamicArray<re::Matrix3x3<float>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Matrix3x3<float>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)v5 = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Matrix3x3<float>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Matrix3x3<float>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Matrix3x3<float>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

__n128 re::DynamicArray<re::Matrix4x4<float>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Matrix4x4<float>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 48) = v8;
  *(__n128 *)v5 = result;
  *(_OWORD *)(v5 + 16) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Matrix4x4<float>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Matrix4x4<float>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Matrix4x4<float>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t *re::FixedArray<re::EvaluationInputHandle<re::GenericSRT<float>>>::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v2 = *result;
    v3 = *a2;
    if (*result)
      v4 = v2 == v3;
    else
      v4 = 1;
    if (v4)
    {
      *result = v3;
      *a2 = v2;
      v5 = result[1];
      v6 = result[2];
      v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*a1)
    {
      if (*a2 && *a1 != *a2)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::swap((uint64_t)a1, (uint64_t)a2);
  }
  return (uint64_t)a1;
}

uint64_t re::DynamicArray<re::RigDataValue>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray((uint64_t)v6, a1);
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::operator=(a1, a2);
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::operator=(a2, (uint64_t)v6);
  result = v6[0];
  if (v6[0] && (v7 & 1) == 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v6[0] + 40))();
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v5;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a2 + 48);
  return result;
}

uint64_t re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a2 && *(_QWORD *)a1 != *(_QWORD *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move(a1, a2);
    }
    else
    {
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 16) += 2;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, v4);
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = (void *)(v11 + 8 * v12);
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v14 = a2 + 24;
        else
          v14 = *(_QWORD *)(a2 + 32);
        result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 8 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t *re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  *result = *a2;
  result[1] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = result[4];
  result[4] = a2[4];
  a2[4] = v5;
  *((_DWORD *)a2 + 4) = a2[2] & 0xFFFFFFFE | result[2] & 1;
  *((_DWORD *)result + 4) &= ~1u;
  v6 = result[3];
  result[3] = a2[3];
  a2[3] = v6;
  *((_DWORD *)a2 + 4) += 2;
  *((_DWORD *)result + 4) += 2;
  return result;
}

_QWORD *re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::Result<re::RigGraphCompilation,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(a1 + 8));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::FixedArray<re::BindPoint>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)(result + 40) = 0;
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_DWORD *)(result + 32) = 0;
      result += 48;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(result + 40) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void re::AnimationBlendTreeInstance<double>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<double>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<double>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const re::IntrospectionBase *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[9];
}

uint64_t re::AnimationBlendTreeInstance<double>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<double>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<double>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<double>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<double>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 136, 8);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1EC08;
  *(_BYTE *)(v2 + 112) = 0;
  return result;
}

BOOL re::AnimationImpl<double>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v6);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[9] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<double>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<double>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  BOOL v6;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    *a6 = *a4;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<double>::evaluateCore(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6, __n128 a7)
{
  unint64_t v7;
  unint64_t v8;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  re::BindPoint *v21;
  unint64_t v22;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  const re::SkeletalPose *v35;
  uint64_t v36;
  unint64_t v37;
  const re::SkeletalPose *v38;
  int v39;
  _DWORD *Runtime;
  int v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  char *v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  unint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7.n128_f64[0]);
  v15 = *(_QWORD **)(a1 + 80);
  if (v15[36])
  {
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 400);
    do
    {
      if (v17 >= *(_QWORD *)(a1 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v17 + 1);
        v17 = *(_QWORD *)(a1 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v17++) = (char *)&v57 + v16;
      *(_QWORD *)(a1 + 400) = v17;
      ++*(_DWORD *)(a1 + 408);
      v16 += 8;
    }
    while (v16 != 24);
    *(_QWORD *)(a1 + 328) = a2;
    *(_QWORD *)(a1 + 336) = a3;
    *(_QWORD *)(a1 + 424) = a4;
    *(_QWORD *)(a1 + 432) = a5;
    a7.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<double>::evaluateBlend(a1, 0, 0, a7);
    v18 = *(_QWORD *)(a1 + 360);
    if (v18)
    {
      v19 = *(_QWORD **)(*(_QWORD *)(a1 + 376) + 16 * v18 - 16);
      if (v19 != a6)
        *a6 = *v19;
    }
    *(_QWORD *)(a1 + 400) = 0;
    ++*(_DWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 368);
    return;
  }
  v20 = *(_QWORD *)(a1 + 440);
  v21 = *(re::BindPoint **)(a1 + 320);
  v51 = *(_DWORD **)(a1 + 312);
  v55[0] = a2;
  v55[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v52, (uint64_t)(v15 + 44));
  v22 = v15[39];
  if (v22 == *(_QWORD *)(v20 + 56))
    goto LABEL_16;
  if (v22)
  {
    for (i = 0; i < v22; ++i)
    {
      *(_QWORD *)&v57 = 0;
      re::DynamicArray<double>::add((_anonymous_namespace_ *)(v20 + 40), (double *)&v57);
      v22 = v15[39];
    }
LABEL_16:
    if (v22)
    {
      for (j = 0; j < v22; ++j)
      {
        k = (unint64_t)v53;
        if ((unint64_t)v53 <= j)
        {
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 476;
          v79 = 2048;
          v80 = j;
          v81 = 2048;
          v82 = k;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 476;
          v79 = 2048;
          v80 = k;
          v81 = 2048;
          v82 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_65:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 476;
          v79 = 2048;
          v80 = v7;
          v81 = 2048;
          v82 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_66:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 476;
          v79 = 2048;
          v80 = k;
          v81 = 2048;
          v82 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_67:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 789;
          v79 = 2048;
          v80 = j;
          v81 = 2048;
          v82 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_68:
          re::internal::assertLog((re::internal *)6, v29, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
LABEL_69:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 789;
          v79 = 2048;
          v80 = j;
          v81 = 2048;
          v82 = k;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 789;
          v79 = 2048;
          v80 = j;
          v81 = 2048;
          v82 = k;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_71:
          re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, k, v37);
          _os_crash();
          __break(1u);
LABEL_72:
          v56 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v75 = 136315906;
          v76 = "operator[]";
          v77 = 1024;
          v78 = 789;
          v79 = 2048;
          v80 = k;
          v81 = 2048;
          v82 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        k = *(_QWORD *)(v54 + 8 * j);
        v8 = v15[42];
        if (v8 <= k)
          goto LABEL_64;
        v7 = k + 1;
        if (v8 <= k + 1)
          goto LABEL_65;
        if (v22 <= k)
          goto LABEL_66;
        v26 = v15[43];
        v27 = *(_QWORD *)(v26 + 8 * k);
        k = *(_QWORD *)(v15[40] + 8 * k);
        v28 = (_BYTE *)re::Slice<re::AnimationClock>::range(v55, v27, *(_QWORD *)(v26 + 8 * v7));
        v22 = *(_QWORD *)(v20 + 56);
        if (v22 <= j)
          goto LABEL_67;
        v30 = v29;
        if (!v29)
          goto LABEL_68;
        v31 = (_QWORD *)(*(_QWORD *)(v20 + 72) + 8 * j);
        if (v28[16])
          v32 = *v28 == 2;
        else
          v32 = 1;
        if (!v32 || (*v31 = *a4, *(_DWORD *)(k + 8) == 49))
          (*(void (**)(unint64_t, _BYTE *, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)k + 104))(k, v28, v29, a4, a5, v31);
        k = *(_QWORD *)(v20 + 16);
        if (k <= j)
          goto LABEL_69;
        k = *(_QWORD *)(v20 + 56);
        if (k <= j)
          goto LABEL_70;
        v22 = v15[39];
      }
    }
  }
  if (v51)
  {
    v33 = 0;
    v34 = 0;
    for (k = 0; (_DWORD *)k != v51; ++k)
    {
      if (*((_QWORD *)v21 + 3) && re::BindPoint::isAlive(v21))
      {
        v35 = (const re::SkeletalPose *)re::BindPoint::valueUntyped(v21);
        v37 = *(_QWORD *)(v20 + 232);
        if (v37 <= k)
          goto LABEL_71;
        v7 = *(_QWORD *)(v20 + 248);
        v38 = v35;
        switch(*(_BYTE *)(v7 + v34 + 32))
        {
          case 1:
            v39 = *(_DWORD *)v35;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v7 + v34, v36);
            goto LABEL_42;
          case 2:
            v39 = *(_DWORD *)v35;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v7 + v34, v36);
LABEL_42:
            *Runtime = v39;
            break;
          case 3:
            v41 = *(_DWORD *)v35;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v7 + v34, v36) = v41;
            break;
          case 4:
            v42 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v7 + v34, v36);
            v44 = *((_OWORD *)v38 + 1);
            v43 = *((_OWORD *)v38 + 2);
            *v42 = *(_OWORD *)v38;
            v42[1] = v44;
            v42[2] = v43;
            break;
          case 5:
            v45 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v7 + v34, v36);
            v46 = *((_OWORD *)v38 + 3);
            v48 = *(_OWORD *)v38;
            v47 = *((_OWORD *)v38 + 1);
            v45[2] = *((_OWORD *)v38 + 2);
            v45[3] = v46;
            *v45 = v48;
            v45[1] = v47;
            break;
          case 6:
            v49 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v7 + v34, v36);
            goto LABEL_49;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v7 + v34, v36) = *(_QWORD *)v35;
            break;
          case 8:
            v49 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v7 + v34, v36);
LABEL_49:
            *v49 = *(_OWORD *)v38;
            break;
          case 0xA:
            v7 = *(_QWORD *)(v20 + 96);
            if (v7 <= k)
              goto LABEL_72;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v20 + 112) + v33), v35);
            break;
          case 0xD:
            if (*(_QWORD *)(v7 + v34 + 40) >> 1 == 82389)
            {
              v50 = *(char **)(v7 + v34 + 48);
              if (v50 == "SRT" || !strcmp(v50, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v7 + v34, v38);
            }
            break;
          default:
            break;
        }
      }
      v21 = (re::BindPoint *)((char *)v21 + 48);
      v34 += 288;
      v33 += 24;
    }
  }
  if (!*(_BYTE *)(v20 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v20 + 2360));
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v57, (re::EvaluationContext *)(v20 + 4896));
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v20 + 5600) + 16))(v20 + 5600, &v57);
  if (v52 && v53)
    (*(void (**)(void))(*(_QWORD *)v52 + 40))();
}

void re::AnimationImpl<double>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<double>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F3C0;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

float re::AnimationBlendTreeInstance<double>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  double v48;
  double v49;
  unint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  unint64_t v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = a2;
    v67 = 2048;
    v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v60 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v52 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v4;
    v67 = 2048;
    v68 = v52;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<double>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v57, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v58;
    if (v58 > v4)
    {
      v4 = *(_QWORD *)(v59 + 8 * v4);
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(_QWORD **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                v33 = *v29 == 2;
              else
                v33 = 1;
              if (!v33 || (*(_QWORD *)v7 = *v31, v28[2] == 49))
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              v34 = a1 + 344;
              v69.n128_u64[0] = v7;
              v69.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v57 = 0;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v69 = 0u;
          v56 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v61 = 136315906;
          v62 = "operator[]";
          v63 = 1024;
          v64 = 476;
          v65 = 2048;
          v66 = v4;
          v67 = 2048;
          v68 = v56;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v57 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v54 = v23;
        v55 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v61 = 136315906;
        v62 = "operator[]";
        v63 = 1024;
        v64 = 476;
        v65 = 2048;
        v66 = v55;
        v67 = 2048;
        v68 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v57 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v53 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v4;
      v67 = 2048;
      v68 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 468;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v69.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v69.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v69);
  }
LABEL_37:
  v9 = v12 + v9;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v9;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(double **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * (v36 - 2);
  v44 = *(double **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(double **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  v48 = *v44;
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
    v49 = v48 + *v39;
  else
    v49 = *v39 * (float)(v12 / v9) + v48 * (float)(1.0 - (float)(v12 / v9));
  *v46 = v49;
  v69.n128_u64[0] = (unint64_t)v46;
  v69.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v69);
  if (v45)
  {
    v50 = *(_QWORD *)(a1 + 400);
    if (v50 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v50 + 1);
      v50 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v50) = v45;
    *(_QWORD *)(a1 + 400) = v50 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

double re::DynamicArray<double>::add(_anonymous_namespace_ *this, double *a2)
{
  unint64_t v4;
  double result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<float *>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(double *)(*((_QWORD *)this + 4) + 8 * v4) = *a2;
  *((_QWORD *)this + 2) = v4 + 1;
  ++*((_DWORD *)this + 6);
  return result;
}

void re::AnimationBlendTreeInstance<re::Vector2<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<re::Vector2<float>>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<re::Vector2<float>>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[11];
}

uint64_t re::AnimationBlendTreeInstance<re::Vector2<float>>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Vector2<float>>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Vector2<float>>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<re::Vector2<float>>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<re::Vector2<float>>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 136, 8);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1EC60;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  return result;
}

BOOL re::AnimationImpl<re::Vector2<float>>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[11] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<re::Vector2<float>>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<re::Vector2<float>>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  BOOL v6;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    *a6 = *a4;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Vector2<float>>::evaluateCore(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _QWORD *a6, __n128 a7)
{
  unint64_t v7;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  re::BindPoint *v19;
  unint64_t v20;
  unint64_t i;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  int v39;
  _DWORD *Runtime;
  int v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  unint64_t v82;
  __int16 v83;
  unint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7.n128_f64[0]);
  v13 = *(_QWORD **)(a1 + 80);
  if (v13[36])
  {
    v14 = 0;
    v59 = 0uLL;
    *(_QWORD *)&v60 = 0;
    v15 = *(_QWORD *)(a1 + 400);
    do
    {
      if (v15 >= *(_QWORD *)(a1 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v15 + 1);
        v15 = *(_QWORD *)(a1 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v15++) = (char *)&v59 + v14;
      *(_QWORD *)(a1 + 400) = v15;
      ++*(_DWORD *)(a1 + 408);
      v14 += 8;
    }
    while (v14 != 24);
    *(_QWORD *)(a1 + 328) = a2;
    *(_QWORD *)(a1 + 336) = a3;
    *(_QWORD *)(a1 + 424) = a4;
    *(_QWORD *)(a1 + 432) = a5;
    a7.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<re::Vector2<float>>::evaluateBlend(a1, 0, 0, a7);
    v16 = *(_QWORD *)(a1 + 360);
    if (v16)
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 376) + 16 * v16 - 16);
      if (v17 != a6)
        *a6 = *v17;
    }
    *(_QWORD *)(a1 + 400) = 0;
    ++*(_DWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 368);
    return;
  }
  v18 = *(_QWORD *)(a1 + 440);
  v19 = *(re::BindPoint **)(a1 + 320);
  v53 = *(_QWORD *)(a1 + 312);
  v57[0] = a2;
  v57[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v54, (uint64_t)(v13 + 44));
  v20 = v13[39];
  if (v20 != *(_QWORD *)(v18 + 56))
  {
    if (!v20)
      goto LABEL_34;
    for (i = 0; i < v20; ++i)
    {
      *(_QWORD *)&v59 = 0;
      re::DynamicArray<unsigned long>::add((_QWORD *)(v18 + 40), &v59);
      v20 = v13[39];
    }
  }
  if (v20)
  {
    v22 = 0;
    while (1)
    {
      v23 = (unint64_t)v55;
      if ((unint64_t)v55 <= v22)
        break;
      v23 = *(_QWORD *)(v56 + 8 * v22);
      v24 = v13[42];
      if (v24 <= v23)
        goto LABEL_65;
      v7 = v23 + 1;
      if (v24 <= v23 + 1)
        goto LABEL_66;
      if (v20 <= v23)
        goto LABEL_67;
      v25 = v13[43];
      v26 = *(_QWORD *)(v25 + 8 * v23);
      v23 = *(_QWORD *)(v13[40] + 8 * v23);
      v27 = (_BYTE *)re::Slice<re::AnimationClock>::range(v57, v26, *(_QWORD *)(v25 + 8 * v7));
      v20 = *(_QWORD *)(v18 + 56);
      if (v20 <= v22)
        goto LABEL_68;
      v29 = v28;
      if (!v28)
        goto LABEL_69;
      v30 = (_QWORD *)(*(_QWORD *)(v18 + 72) + 8 * v22);
      if (v27[16])
        v31 = *v27 == 2;
      else
        v31 = 1;
      if (!v31 || (*v30 = *a4, *(_DWORD *)(v23 + 8) == 49))
        (*(void (**)(unint64_t, _BYTE *, uint64_t, _QWORD *, unint64_t, _QWORD *))(*(_QWORD *)v23 + 104))(v23, v27, v28, a4, a5, v30);
      v23 = *(_QWORD *)(v18 + 16);
      if (v23 <= v22)
        goto LABEL_70;
      v23 = *(_QWORD *)(v18 + 56);
      if (v23 <= v22)
        goto LABEL_71;
      re::AnimationBlendTreeRigContext<re::Vector2<float>>::setRigDataValue<re::Vector2<float>>(v18, *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v22), (_QWORD *)(*(_QWORD *)(v18 + 72) + 8 * v22));
      ++v22;
      v20 = v13[39];
      if (v22 >= v20)
        goto LABEL_34;
    }
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v24 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 476;
    v81 = 2048;
    v82 = v22;
    v83 = 2048;
    v84 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 476;
    v81 = 2048;
    v82 = v23;
    v83 = 2048;
    v84 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 476;
    v81 = 2048;
    v82 = v7;
    v83 = 2048;
    v84 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 476;
    v81 = 2048;
    v82 = v23;
    v83 = 2048;
    v84 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 789;
    v81 = 2048;
    v82 = v22;
    v83 = 2048;
    v84 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    re::internal::assertLog((re::internal *)6, v28, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_70:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 789;
    v81 = 2048;
    v82 = v22;
    v83 = 2048;
    v84 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 789;
    v81 = 2048;
    v82 = v22;
    v83 = 2048;
    v84 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, v36);
    _os_crash();
    __break(1u);
LABEL_73:
    re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
LABEL_74:
    v58 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 789;
    v81 = 2048;
    v82 = a5;
    v83 = 2048;
    v84 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_34:
  if (v53)
  {
    v32 = 0;
    v33 = 0;
    a5 = 0;
    do
    {
      if (*((_QWORD *)v19 + 3) && re::BindPoint::isAlive(v19))
      {
        v34 = (_QWORD *)re::BindPoint::valueUntyped(v19);
        v36 = *(_QWORD *)(v18 + 232);
        if (v36 <= a5)
          goto LABEL_72;
        v37 = *(_QWORD *)(v18 + 248);
        v38 = v34;
        switch(*(_BYTE *)(v37 + v33 + 32))
        {
          case 1:
            v39 = *(_DWORD *)v34;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v37 + v33, v35);
            goto LABEL_42;
          case 2:
            v39 = *(_DWORD *)v34;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v37 + v33, v35);
LABEL_42:
            *Runtime = v39;
            break;
          case 3:
            v41 = *(_DWORD *)v34;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v37 + v33, v35) = v41;
            break;
          case 4:
            v42 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v37 + v33, v35);
            v44 = v38[1];
            v43 = v38[2];
            *v42 = *v38;
            v42[1] = v44;
            v42[2] = v43;
            break;
          case 5:
            v45 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v37 + v33, v35);
            v46 = v38[3];
            v48 = *v38;
            v47 = v38[1];
            v45[2] = v38[2];
            v45[3] = v46;
            *v45 = v48;
            v45[1] = v47;
            break;
          case 6:
            v49 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v37 + v33, v35);
            goto LABEL_49;
          case 7:
            re::AnimationBlendTreeRigContext<re::Vector2<float>>::setRigDataValue<re::Vector2<float>>(v18, a5, v34);
            break;
          case 8:
            v49 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v37 + v33, v35);
LABEL_49:
            *v49 = *v38;
            break;
          case 0xA:
            v7 = *(_QWORD *)(v18 + 96);
            if (v7 <= a5)
              goto LABEL_74;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v18 + 112) + v32), (const re::SkeletalPose *)v34);
            break;
          case 0xD:
            if (*(_QWORD *)(v37 + v33 + 40) >> 1 == 82389)
            {
              v50 = *(char **)(v37 + v33 + 48);
              if (v50 == "SRT" || !strcmp(v50, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v37 + v33, v38);
            }
            break;
          default:
            break;
        }
      }
      v19 = (re::BindPoint *)((char *)v19 + 48);
      ++a5;
      v33 += 288;
      v32 += 24;
    }
    while (v53 != a5);
  }
  if (!*(_BYTE *)(v18 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v18 + 2360));
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v59, (re::EvaluationContext *)(v18 + 4896));
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v18 + 5600) + 16))(v18 + 5600, &v59);
  if (!*(_QWORD *)(v18 + 272))
    goto LABEL_73;
  *a6 = *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*(_QWORD *)(v18 + 288), v51);
  if (v54 && v55)
    (*(void (**)(void))(*(_QWORD *)v54 + 40))();
}

void re::AnimationImpl<re::Vector2<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<re::Vector2<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F490;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

float re::AnimationBlendTreeInstance<re::Vector2<float>>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t *v44;
  float32x2_t *v45;
  float32x2_t *v46;
  uint64_t v47;
  float32x2_t v48;
  float32x2_t v49;
  unint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  unint64_t v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = a2;
    v67 = 2048;
    v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v60 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v52 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v4;
    v67 = 2048;
    v68 = v52;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<re::Vector2<float>>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v57, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v58;
    if (v58 > v4)
    {
      v4 = *(_QWORD *)(v59 + 8 * v4);
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(_QWORD **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                v33 = *v29 == 2;
              else
                v33 = 1;
              if (!v33 || (*(_QWORD *)v7 = *v31, v28[2] == 49))
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              v34 = a1 + 344;
              v69.n128_u64[0] = v7;
              v69.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v57 = 0;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v69 = 0u;
          v56 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v61 = 136315906;
          v62 = "operator[]";
          v63 = 1024;
          v64 = 476;
          v65 = 2048;
          v66 = v4;
          v67 = 2048;
          v68 = v56;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v57 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v54 = v23;
        v55 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v61 = 136315906;
        v62 = "operator[]";
        v63 = 1024;
        v64 = 476;
        v65 = 2048;
        v66 = v55;
        v67 = 2048;
        v68 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v57 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v53 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v4;
      v67 = 2048;
      v68 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 468;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v69.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v69.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v69);
  }
LABEL_37:
  v9 = v12 + v9;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v9;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(float32x2_t **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * (v36 - 2);
  v44 = *(float32x2_t **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(float32x2_t **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  v48 = *v44;
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
  {
    v49 = *v39;
  }
  else
  {
    v48 = vmul_n_f32(v48, 1.0 - (float)(v12 / v9));
    v49 = vmul_n_f32(*v39, v12 / v9);
  }
  *v46 = vadd_f32(v48, v49);
  v69.n128_u64[0] = (unint64_t)v46;
  v69.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v69);
  if (v45)
  {
    v50 = *(_QWORD *)(a1 + 400);
    if (v50 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v50 + 1);
      v50 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v50) = v45;
    *(_QWORD *)(a1 + 400) = v50 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

_QWORD *re::AnimationBlendTreeRigContext<re::Vector2<float>>::setRigDataValue<re::Vector2<float>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 232);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
    result = (_QWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    result = (_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(*(_QWORD *)(a1 + 248) + 288 * a2, a2);
    *result = *a3;
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Vector3<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<re::Vector3<float>>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<re::Vector3<float>>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[13];
}

uint64_t re::AnimationBlendTreeInstance<re::Vector3<float>>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Vector3<float>>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Vector3<float>>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<re::Vector3<float>>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<re::Vector3<float>>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 160, 16);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1ECB8;
  *(_BYTE *)(v2 + 112) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  return result;
}

BOOL re::AnimationImpl<re::Vector3<float>>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[13] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<re::Vector3<float>>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<re::Vector3<float>>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  BOOL v6;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    *a6 = *a4;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Vector3<float>>::evaluateCore(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, unint64_t a6, double a7)
{
  unint64_t v7;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  re::BindPoint *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  int v38;
  _DWORD *Runtime;
  int v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  __n128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  __int16 v82;
  unint64_t v83;
  uint64_t v84;

  v12 = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7);
  v13 = *(_QWORD **)(v12 + 80);
  if (v13[36])
  {
    v14 = 0;
    v15.n128_u32[1] = 0;
    v15.n128_u64[1] = 0;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    v16 = *(_QWORD *)(v12 + 400);
    do
    {
      if (v16 >= *(_QWORD *)(v12 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(v12 + 384), v16 + 1);
        v16 = *(_QWORD *)(v12 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 416) + 8 * v16++) = (char *)&v58 + v14;
      *(_QWORD *)(v12 + 400) = v16;
      ++*(_DWORD *)(v12 + 408);
      v14 += 16;
    }
    while (v14 != 48);
    *(_QWORD *)(v12 + 328) = a2;
    *(_QWORD *)(v12 + 336) = a3;
    *(_QWORD *)(v12 + 424) = a4;
    *(_QWORD *)(v12 + 432) = a5;
    v15.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<re::Vector3<float>>::evaluateBlend(v12, 0, 0, v15);
    v17 = *(_QWORD *)(v12 + 360);
    if (v17)
    {
      v18 = *(_OWORD **)(*(_QWORD *)(v12 + 376) + 16 * v17 - 16);
      if (v18 != (_OWORD *)a6)
        *(_OWORD *)a6 = *v18;
    }
    *(_QWORD *)(v12 + 400) = 0;
    ++*(_DWORD *)(v12 + 408);
    *(_QWORD *)(v12 + 360) = 0;
    ++*(_DWORD *)(v12 + 368);
    return;
  }
  v50 = (_OWORD *)a6;
  v19 = *(_QWORD *)(v12 + 440);
  v20 = *(re::BindPoint **)(v12 + 320);
  v52 = *(_QWORD *)(v12 + 312);
  v56[0] = a2;
  v56[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v53, (uint64_t)(v13 + 44));
  v21 = v13[39];
  if (v21 != *(_QWORD *)(v19 + 56))
  {
    if (!v21)
      goto LABEL_34;
    a6 = 0;
    v12 = v19 + 40;
    do
    {
      v58 = 0u;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v19 + 40), &v58);
      ++a6;
      v21 = v13[39];
    }
    while (a6 < v21);
  }
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      a6 = v54;
      if (v54 <= v23)
        break;
      v12 = *(_QWORD *)(v55 + 8 * v23);
      v7 = v13[42];
      if (v7 <= v12)
        goto LABEL_64;
      a6 = v12 + 1;
      if (v7 <= v12 + 1)
        goto LABEL_65;
      if (v21 <= v12)
        goto LABEL_66;
      v24 = v13[43];
      v25 = *(_QWORD *)(v24 + 8 * v12);
      v12 = *(_QWORD *)(v13[40] + 8 * v12);
      v26 = (_BYTE *)re::Slice<re::AnimationClock>::range(v56, v25, *(_QWORD *)(v24 + 8 * a6));
      a6 = *(_QWORD *)(v19 + 56);
      if (a6 <= v23)
        goto LABEL_67;
      v28 = v27;
      if (!v27)
        goto LABEL_68;
      v29 = (_OWORD *)(*(_QWORD *)(v19 + 72) + v22);
      if (v26[16])
        v30 = *v26 == 2;
      else
        v30 = 1;
      if (!v30 || (*v29 = *a4, *(_DWORD *)(v12 + 8) == 49))
        (*(void (**)(unint64_t, _BYTE *, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)v12 + 104))(v12, v26, v27, a4, a5, v29);
      a6 = *(_QWORD *)(v19 + 16);
      if (a6 <= v23)
        goto LABEL_69;
      a6 = *(_QWORD *)(v19 + 56);
      if (a6 <= v23)
        goto LABEL_70;
      re::AnimationBlendTreeRigContext<re::Vector3<float>>::setRigDataValue<re::Vector3<float>>(v19, *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v23++), (_OWORD *)(*(_QWORD *)(v19 + 72) + v22));
      v21 = v13[39];
      v22 += 16;
      if (v23 >= v21)
        goto LABEL_34;
    }
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = v12;
    v82 = 2048;
    v83 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = a6;
    v82 = 2048;
    v83 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = v12;
    v82 = 2048;
    v83 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    re::internal::assertLog((re::internal *)6, v27, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_69:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_70:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a6, v35);
    _os_crash();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
LABEL_73:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = a6;
    v82 = 2048;
    v83 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_34:
  if (v52)
  {
    v31 = 0;
    v32 = 0;
    a6 = 0;
    do
    {
      if (*((_QWORD *)v20 + 3) && re::BindPoint::isAlive(v20))
      {
        v33 = (_OWORD *)re::BindPoint::valueUntyped(v20);
        v35 = *(_QWORD *)(v19 + 232);
        if (v35 <= a6)
          goto LABEL_71;
        v36 = *(_QWORD *)(v19 + 248);
        v37 = v33;
        switch(*(_BYTE *)(v36 + v32 + 32))
        {
          case 1:
            v38 = *(_DWORD *)v33;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v36 + v32, v34);
            goto LABEL_42;
          case 2:
            v38 = *(_DWORD *)v33;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v36 + v32, v34);
LABEL_42:
            *Runtime = v38;
            break;
          case 3:
            v40 = *(_DWORD *)v33;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v36 + v32, v34) = v40;
            break;
          case 4:
            v41 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v36 + v32, v34);
            v43 = v37[1];
            v42 = v37[2];
            *v41 = *v37;
            v41[1] = v43;
            v41[2] = v42;
            break;
          case 5:
            v44 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v36 + v32, v34);
            v45 = v37[3];
            v47 = *v37;
            v46 = v37[1];
            v44[2] = v37[2];
            v44[3] = v45;
            *v44 = v47;
            v44[1] = v46;
            break;
          case 6:
            *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v36 + v32, v34) = *v33;
            break;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v36 + v32, v34) = *(_QWORD *)v33;
            break;
          case 8:
            re::AnimationBlendTreeRigContext<re::Vector3<float>>::setRigDataValue<re::Vector3<float>>(v19, a6, v33);
            break;
          case 0xA:
            v7 = *(_QWORD *)(v19 + 96);
            if (v7 <= a6)
              goto LABEL_73;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v19 + 112) + v31), (const re::SkeletalPose *)v33);
            break;
          case 0xD:
            if (*(_QWORD *)(v36 + v32 + 40) >> 1 == 82389)
            {
              v48 = *(char **)(v36 + v32 + 48);
              if (v48 == "SRT" || !strcmp(v48, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v36 + v32, v37);
            }
            break;
          default:
            break;
        }
      }
      v20 = (re::BindPoint *)((char *)v20 + 48);
      ++a6;
      v32 += 288;
      v31 += 24;
    }
    while (v52 != a6);
  }
  if (!*(_BYTE *)(v19 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v19 + 2360));
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v58, (re::EvaluationContext *)(v19 + 4896));
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)(v19 + 5600) + 16))(v19 + 5600, &v58);
  if (!*(_QWORD *)(v19 + 272))
    goto LABEL_72;
  *v50 = *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*(_QWORD *)(v19 + 288), v49);
  if (v53 && v54)
    (*(void (**)(void))(*(_QWORD *)v53 + 40))();
}

void re::AnimationImpl<re::Vector3<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<re::Vector3<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F560;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

float re::AnimationBlendTreeInstance<re::Vector3<float>>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  unint64_t v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = a2;
    v67 = 2048;
    v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v60 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v52 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v4;
    v67 = 2048;
    v68 = v52;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<re::Vector3<float>>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v57, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v58;
    if (v58 > v4)
    {
      v4 = *(_QWORD *)(v59 + 8 * v4);
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(_OWORD **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                v33 = *v29 == 2;
              else
                v33 = 1;
              if (!v33 || (*(_OWORD *)v7 = *v31, v28[2] == 49))
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, _OWORD *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              v34 = a1 + 344;
              v69.n128_u64[0] = v7;
              v69.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v57 = 0;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v69 = 0u;
          v56 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v61 = 136315906;
          v62 = "operator[]";
          v63 = 1024;
          v64 = 476;
          v65 = 2048;
          v66 = v4;
          v67 = 2048;
          v68 = v56;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v57 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v54 = v23;
        v55 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v61 = 136315906;
        v62 = "operator[]";
        v63 = 1024;
        v64 = 476;
        v65 = 2048;
        v66 = v55;
        v67 = 2048;
        v68 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v57 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v53 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v4;
      v67 = 2048;
      v68 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 468;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v69.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v69.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v69);
  }
LABEL_37:
  v9 = v12 + v9;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v9;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(float32x4_t **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * (v36 - 2);
  v44 = *(float32x4_t **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(float32x4_t **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  v48 = *v44;
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
    v49 = vaddq_f32(v48, *v39);
  else
    v49 = vmlaq_n_f32(vmulq_n_f32(*v39, v12 / v9), v48, 1.0 - (float)(v12 / v9));
  *v46 = v49;
  v69.n128_u64[0] = (unint64_t)v46;
  v69.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v69);
  if (v45)
  {
    v50 = *(_QWORD *)(a1 + 400);
    if (v50 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v50 + 1);
      v50 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v50) = v45;
    *(_QWORD *)(a1 + 400) = v50 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

_OWORD *re::AnimationBlendTreeRigContext<re::Vector3<float>>::setRigDataValue<re::Vector3<float>>(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _OWORD *result;

  v3 = *(_QWORD *)(a1 + 232);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    result = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*(_QWORD *)(a1 + 248) + 288 * a2, a2);
    *result = *a3;
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Vector4<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<re::Vector4<float>>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<re::Vector4<float>>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[15];
}

uint64_t re::AnimationBlendTreeInstance<re::Vector4<float>>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Vector4<float>>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Vector4<float>>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<re::Vector4<float>>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<re::Vector4<float>>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 160, 16);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1ED10;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  return result;
}

BOOL re::AnimationImpl<re::Vector4<float>>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[15] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<re::Vector4<float>>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<re::Vector4<float>>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  BOOL v6;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    *a6 = *a4;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Vector4<float>>::evaluateCore(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6, double a7)
{
  unint64_t v7;
  unint64_t j;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  re::BindPoint *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t i;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  const re::SkeletalPose *v35;
  uint64_t v36;
  unint64_t v37;
  const re::SkeletalPose *v38;
  int v39;
  _DWORD *Runtime;
  int v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  char *v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  __n128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  __int16 v82;
  unint64_t v83;
  uint64_t v84;

  j = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7);
  v13 = *(_QWORD **)(j + 80);
  if (v13[36])
  {
    v14 = 0;
    v15.n128_u32[1] = 0;
    v15.n128_u64[1] = 0;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    v16 = *(_QWORD *)(j + 400);
    do
    {
      if (v16 >= *(_QWORD *)(j + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(j + 384), v16 + 1);
        v16 = *(_QWORD *)(j + 400);
      }
      *(_QWORD *)(*(_QWORD *)(j + 416) + 8 * v16++) = (char *)&v58 + v14;
      *(_QWORD *)(j + 400) = v16;
      ++*(_DWORD *)(j + 408);
      v14 += 16;
    }
    while (v14 != 48);
    *(_QWORD *)(j + 328) = a2;
    *(_QWORD *)(j + 336) = a3;
    *(_QWORD *)(j + 424) = a4;
    *(_QWORD *)(j + 432) = a5;
    v15.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<re::Vector4<float>>::evaluateBlend(j, 0, 0, v15);
    v17 = *(_QWORD *)(j + 360);
    if (v17)
    {
      v18 = *(_OWORD **)(*(_QWORD *)(j + 376) + 16 * v17 - 16);
      if (v18 != a6)
        *a6 = *v18;
    }
    *(_QWORD *)(j + 400) = 0;
    ++*(_DWORD *)(j + 408);
    *(_QWORD *)(j + 360) = 0;
    ++*(_DWORD *)(j + 368);
    return;
  }
  v19 = *(_QWORD *)(j + 440);
  v20 = *(re::BindPoint **)(j + 320);
  v52 = *(_QWORD *)(j + 312);
  v56[0] = a2;
  v56[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v53, (uint64_t)(v13 + 44));
  v21 = v13[39];
  if (v21 == *(_QWORD *)(v19 + 56))
    goto LABEL_16;
  if (v21)
  {
    v22 = 0;
    j = v19 + 40;
    do
    {
      v58 = 0uLL;
      re::DynamicArray<re::Vector4<float>>::add((_anonymous_namespace_ *)(v19 + 40), &v58);
      ++v22;
      v21 = v13[39];
    }
    while (v22 < v21);
LABEL_16:
    if (v21)
    {
      v23 = 0;
      for (i = 0; i < v21; ++i)
      {
        v25 = v54;
        if (v54 <= i)
        {
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 476;
          v80 = 2048;
          v81 = i;
          v82 = 2048;
          v83 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 476;
          v80 = 2048;
          v81 = j;
          v82 = 2048;
          v83 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_65:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 476;
          v80 = 2048;
          v81 = v25;
          v82 = 2048;
          v83 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_66:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 476;
          v80 = 2048;
          v81 = j;
          v82 = 2048;
          v83 = v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_67:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 789;
          v80 = 2048;
          v81 = i;
          v82 = 2048;
          v83 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_68:
          re::internal::assertLog((re::internal *)6, v29, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
LABEL_69:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 789;
          v80 = 2048;
          v81 = i;
          v82 = 2048;
          v83 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 789;
          v80 = 2048;
          v81 = i;
          v82 = 2048;
          v83 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_71:
          re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, j, v37);
          _os_crash();
          __break(1u);
LABEL_72:
          v57 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v76 = 136315906;
          v77 = "operator[]";
          v78 = 1024;
          v79 = 789;
          v80 = 2048;
          v81 = j;
          v82 = 2048;
          v83 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        j = *(_QWORD *)(v55 + 8 * i);
        v7 = v13[42];
        if (v7 <= j)
          goto LABEL_64;
        v25 = j + 1;
        if (v7 <= j + 1)
          goto LABEL_65;
        if (v21 <= j)
          goto LABEL_66;
        v26 = v13[43];
        v27 = *(_QWORD *)(v26 + 8 * j);
        j = *(_QWORD *)(v13[40] + 8 * j);
        v28 = (_BYTE *)re::Slice<re::AnimationClock>::range(v56, v27, *(_QWORD *)(v26 + 8 * v25));
        v25 = *(_QWORD *)(v19 + 56);
        if (v25 <= i)
          goto LABEL_67;
        v30 = v29;
        if (!v29)
          goto LABEL_68;
        v31 = (_OWORD *)(*(_QWORD *)(v19 + 72) + v23);
        if (v28[16])
          v32 = *v28 == 2;
        else
          v32 = 1;
        if (!v32 || (*v31 = *a4, *(_DWORD *)(j + 8) == 49))
          (*(void (**)(unint64_t, _BYTE *, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)j + 104))(j, v28, v29, a4, a5, v31);
        v25 = *(_QWORD *)(v19 + 16);
        if (v25 <= i)
          goto LABEL_69;
        v25 = *(_QWORD *)(v19 + 56);
        if (v25 <= i)
          goto LABEL_70;
        v21 = v13[39];
        v23 += 16;
      }
    }
  }
  if (v52)
  {
    v33 = 0;
    v34 = 0;
    for (j = 0; j != v52; ++j)
    {
      if (*((_QWORD *)v20 + 3) && re::BindPoint::isAlive(v20))
      {
        v35 = (const re::SkeletalPose *)re::BindPoint::valueUntyped(v20);
        v37 = *(_QWORD *)(v19 + 232);
        if (v37 <= j)
          goto LABEL_71;
        v7 = *(_QWORD *)(v19 + 248);
        v38 = v35;
        switch(*(_BYTE *)(v7 + v34 + 32))
        {
          case 1:
            v39 = *(_DWORD *)v35;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v7 + v34, v36);
            goto LABEL_42;
          case 2:
            v39 = *(_DWORD *)v35;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v7 + v34, v36);
LABEL_42:
            *Runtime = v39;
            break;
          case 3:
            v41 = *(_DWORD *)v35;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v7 + v34, v36) = v41;
            break;
          case 4:
            v42 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v7 + v34, v36);
            v44 = *((_OWORD *)v38 + 1);
            v43 = *((_OWORD *)v38 + 2);
            *v42 = *(_OWORD *)v38;
            v42[1] = v44;
            v42[2] = v43;
            break;
          case 5:
            v45 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v7 + v34, v36);
            v46 = *((_OWORD *)v38 + 3);
            v48 = *(_OWORD *)v38;
            v47 = *((_OWORD *)v38 + 1);
            v45[2] = *((_OWORD *)v38 + 2);
            v45[3] = v46;
            *v45 = v48;
            v45[1] = v47;
            break;
          case 6:
            v49 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v7 + v34, v36);
            goto LABEL_49;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v7 + v34, v36) = *(_QWORD *)v35;
            break;
          case 8:
            v49 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v7 + v34, v36);
LABEL_49:
            *v49 = *(_OWORD *)v38;
            break;
          case 0xA:
            v7 = *(_QWORD *)(v19 + 96);
            if (v7 <= j)
              goto LABEL_72;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v19 + 112) + v33), v35);
            break;
          case 0xD:
            if (*(_QWORD *)(v7 + v34 + 40) >> 1 == 82389)
            {
              v50 = *(char **)(v7 + v34 + 48);
              if (v50 == "SRT" || !strcmp(v50, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v7 + v34, v38);
            }
            break;
          default:
            break;
        }
      }
      v20 = (re::BindPoint *)((char *)v20 + 48);
      v34 += 288;
      v33 += 24;
    }
  }
  if (!*(_BYTE *)(v19 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v19 + 2360));
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v58, (re::EvaluationContext *)(v19 + 4896));
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)(v19 + 5600) + 16))(v19 + 5600, &v58);
  if (v53 && v54)
    (*(void (**)(void))(*(_QWORD *)v53 + 40))();
}

void re::AnimationImpl<re::Vector4<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<re::Vector4<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F630;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

float re::AnimationBlendTreeInstance<re::Vector4<float>>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  unint64_t v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = a2;
    v67 = 2048;
    v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v60 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v52 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 476;
    v65 = 2048;
    v66 = v4;
    v67 = 2048;
    v68 = v52;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<re::Vector4<float>>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v57, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v58;
    if (v58 > v4)
    {
      v4 = *(_QWORD *)(v59 + 8 * v4);
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(_OWORD **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                v33 = *v29 == 2;
              else
                v33 = 1;
              if (!v33 || (*(_OWORD *)v7 = *v31, v28[2] == 49))
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, _OWORD *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              v34 = a1 + 344;
              v69.n128_u64[0] = v7;
              v69.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v57 = 0;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v69 = 0u;
          v56 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v61 = 136315906;
          v62 = "operator[]";
          v63 = 1024;
          v64 = 476;
          v65 = 2048;
          v66 = v4;
          v67 = 2048;
          v68 = v56;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v57 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v54 = v23;
        v55 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v61 = 136315906;
        v62 = "operator[]";
        v63 = 1024;
        v64 = 476;
        v65 = 2048;
        v66 = v55;
        v67 = 2048;
        v68 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v57 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v53 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v4;
      v67 = 2048;
      v68 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v57 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v61 = 136315906;
    v62 = "operator[]";
    v63 = 1024;
    v64 = 468;
    v65 = 2048;
    v66 = v7;
    v67 = 2048;
    v68 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v69.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v69.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v69);
  }
LABEL_37:
  v9 = v12 + v9;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v9;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(float32x4_t **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * (v36 - 2);
  v44 = *(float32x4_t **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(float32x4_t **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  v48 = *v44;
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
  {
    v49 = *v39;
  }
  else
  {
    v48 = vmulq_n_f32(v48, 1.0 - (float)(v12 / v9));
    v49 = vmulq_n_f32(*v39, v12 / v9);
  }
  *v46 = vaddq_f32(v48, v49);
  v69.n128_u64[0] = (unint64_t)v46;
  v69.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v69);
  if (v45)
  {
    v50 = *(_QWORD *)(a1 + 400);
    if (v50 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v50 + 1);
      v50 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v50) = v45;
    *(_QWORD *)(a1 + 400) = v50 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

__n128 re::DynamicArray<re::Vector4<float>>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Vector4<float>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Vector4<float>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Vector4<float>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Vector4<float>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Vector4<float>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Vector4<float>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Quaternion<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<re::Quaternion<float>>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<re::Quaternion<float>>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[17];
}

uint64_t re::AnimationBlendTreeInstance<re::Quaternion<float>>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Quaternion<float>>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::Quaternion<float>>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<re::Quaternion<float>>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<re::Quaternion<float>>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 160, 16);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1ED68;
  *(_BYTE *)(v2 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 144) = xmmword_2260E5D70;
  return result;
}

BOOL re::AnimationImpl<re::Quaternion<float>>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[17] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<re::Quaternion<float>>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<re::Quaternion<float>>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  BOOL v6;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    *a6 = *a4;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::Quaternion<float>>::evaluateCore(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, unint64_t a6, double a7)
{
  unint64_t v7;
  unint64_t v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  re::BindPoint *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  int v38;
  _DWORD *Runtime;
  int v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  __int128 __b;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  __int16 v82;
  unint64_t v83;
  uint64_t v84;

  v12 = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7);
  v13 = *(_QWORD **)(v12 + 80);
  if (v13[36])
  {
    memset_pattern16(&__b, &xmmword_2260E5D70, 0x30uLL);
    v15 = 0;
    v16 = *(_QWORD *)(v12 + 400);
    do
    {
      if (v16 >= *(_QWORD *)(v12 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(v12 + 384), v16 + 1);
        v16 = *(_QWORD *)(v12 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 416) + 8 * v16++) = (char *)&__b + v15;
      *(_QWORD *)(v12 + 400) = v16;
      ++*(_DWORD *)(v12 + 408);
      v15 += 16;
    }
    while (v15 != 48);
    *(_QWORD *)(v12 + 328) = a2;
    *(_QWORD *)(v12 + 336) = a3;
    *(_QWORD *)(v12 + 424) = a4;
    *(_QWORD *)(v12 + 432) = a5;
    v14.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<re::Quaternion<float>>::evaluateBlend(v12, 0, 0, v14);
    v17 = *(_QWORD *)(v12 + 360);
    if (v17)
    {
      v18 = *(_OWORD **)(*(_QWORD *)(v12 + 376) + 16 * v17 - 16);
      if (v18 != (_OWORD *)a6)
        *(_OWORD *)a6 = *v18;
    }
    *(_QWORD *)(v12 + 400) = 0;
    ++*(_DWORD *)(v12 + 408);
    *(_QWORD *)(v12 + 360) = 0;
    ++*(_DWORD *)(v12 + 368);
    return;
  }
  v50 = (_OWORD *)a6;
  v19 = *(_QWORD *)(v12 + 440);
  v20 = *(re::BindPoint **)(v12 + 320);
  v52 = *(_QWORD *)(v12 + 312);
  v56[0] = a2;
  v56[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v53, (uint64_t)(v13 + 44));
  v21 = v13[39];
  if (v21 != *(_QWORD *)(v19 + 56))
  {
    if (!v21)
      goto LABEL_34;
    a6 = 0;
    v12 = v19 + 40;
    do
    {
      __b = xmmword_2260E5D70;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v19 + 40), (__n128 *)&__b);
      ++a6;
      v21 = v13[39];
    }
    while (a6 < v21);
  }
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      a6 = v54;
      if (v54 <= v23)
        break;
      v12 = *(_QWORD *)(v55 + 8 * v23);
      v7 = v13[42];
      if (v7 <= v12)
        goto LABEL_64;
      a6 = v12 + 1;
      if (v7 <= v12 + 1)
        goto LABEL_65;
      if (v21 <= v12)
        goto LABEL_66;
      v24 = v13[43];
      v25 = *(_QWORD *)(v24 + 8 * v12);
      v12 = *(_QWORD *)(v13[40] + 8 * v12);
      v26 = (_BYTE *)re::Slice<re::AnimationClock>::range(v56, v25, *(_QWORD *)(v24 + 8 * a6));
      a6 = *(_QWORD *)(v19 + 56);
      if (a6 <= v23)
        goto LABEL_67;
      v28 = v27;
      if (!v27)
        goto LABEL_68;
      v29 = (_OWORD *)(*(_QWORD *)(v19 + 72) + v22);
      if (v26[16])
        v30 = *v26 == 2;
      else
        v30 = 1;
      if (!v30 || (*v29 = *a4, *(_DWORD *)(v12 + 8) == 49))
        (*(void (**)(unint64_t, _BYTE *, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)v12 + 104))(v12, v26, v27, a4, a5, v29);
      a6 = *(_QWORD *)(v19 + 16);
      if (a6 <= v23)
        goto LABEL_69;
      a6 = *(_QWORD *)(v19 + 56);
      if (a6 <= v23)
        goto LABEL_70;
      re::AnimationBlendTreeRigContext<re::Quaternion<float>>::setRigDataValue<re::Quaternion<float>>(v19, *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v23++), (_OWORD *)(*(_QWORD *)(v19 + 72) + v22));
      v21 = v13[39];
      v22 += 16;
      if (v23 >= v21)
        goto LABEL_34;
    }
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = v12;
    v82 = 2048;
    v83 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = a6;
    v82 = 2048;
    v83 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 476;
    v80 = 2048;
    v81 = v12;
    v82 = 2048;
    v83 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    re::internal::assertLog((re::internal *)6, v27, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_69:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_70:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = v23;
    v82 = 2048;
    v83 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a6, v35);
    _os_crash();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
LABEL_73:
    v57 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    __b = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v76 = 136315906;
    v77 = "operator[]";
    v78 = 1024;
    v79 = 789;
    v80 = 2048;
    v81 = a6;
    v82 = 2048;
    v83 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_34:
  if (v52)
  {
    v31 = 0;
    v32 = 0;
    a6 = 0;
    do
    {
      if (*((_QWORD *)v20 + 3) && re::BindPoint::isAlive(v20))
      {
        v33 = (_OWORD *)re::BindPoint::valueUntyped(v20);
        v35 = *(_QWORD *)(v19 + 232);
        if (v35 <= a6)
          goto LABEL_71;
        v36 = *(_QWORD *)(v19 + 248);
        v37 = v33;
        switch(*(_BYTE *)(v36 + v32 + 32))
        {
          case 1:
            v38 = *(_DWORD *)v33;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v36 + v32, v34);
            goto LABEL_42;
          case 2:
            v38 = *(_DWORD *)v33;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v36 + v32, v34);
LABEL_42:
            *Runtime = v38;
            break;
          case 3:
            v40 = *(_DWORD *)v33;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v36 + v32, v34) = v40;
            break;
          case 4:
            v41 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v36 + v32, v34);
            v43 = v37[1];
            v42 = v37[2];
            *v41 = *v37;
            v41[1] = v43;
            v41[2] = v42;
            break;
          case 5:
            v44 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v36 + v32, v34);
            v45 = v37[3];
            v47 = *v37;
            v46 = v37[1];
            v44[2] = v37[2];
            v44[3] = v45;
            *v44 = v47;
            v44[1] = v46;
            break;
          case 6:
            re::AnimationBlendTreeRigContext<re::Quaternion<float>>::setRigDataValue<re::Quaternion<float>>(v19, a6, v33);
            break;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v36 + v32, v34) = *(_QWORD *)v33;
            break;
          case 8:
            *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v36 + v32, v34) = *v33;
            break;
          case 0xA:
            v7 = *(_QWORD *)(v19 + 96);
            if (v7 <= a6)
              goto LABEL_73;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v19 + 112) + v31), (const re::SkeletalPose *)v33);
            break;
          case 0xD:
            if (*(_QWORD *)(v36 + v32 + 40) >> 1 == 82389)
            {
              v48 = *(char **)(v36 + v32 + 48);
              if (v48 == "SRT" || !strcmp(v48, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v36 + v32, v37);
            }
            break;
          default:
            break;
        }
      }
      v20 = (re::BindPoint *)((char *)v20 + 48);
      ++a6;
      v32 += 288;
      v31 += 24;
    }
    while (v52 != a6);
  }
  if (!*(_BYTE *)(v19 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v19 + 2360));
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  __b = 0u;
  v59 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&__b, (re::EvaluationContext *)(v19 + 4896));
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v19 + 5600) + 16))(v19 + 5600, &__b);
  if (!*(_QWORD *)(v19 + 272))
    goto LABEL_72;
  *v50 = *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(_QWORD *)(v19 + 288), v49);
  if (v53 && v54)
    (*(void (**)(void))(*(_QWORD *)v53 + 40))();
}

void re::AnimationImpl<re::Quaternion<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<re::Quaternion<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F700;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

float re::AnimationBlendTreeInstance<re::Quaternion<float>>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t *v44;
  int32x4_t *v45;
  uint64_t *v46;
  uint64_t v47;
  float32x4_t v50;
  float32x4_t v51;
  unint64_t v56;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  __n128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v63 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v67 = 136315906;
    v68 = "operator[]";
    v69 = 1024;
    v70 = 476;
    v71 = 2048;
    v72 = a2;
    v73 = 2048;
    v74 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v63 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v67 = 136315906;
    v68 = "operator[]";
    v69 = 1024;
    v70 = 476;
    v71 = 2048;
    v72 = v7;
    v73 = 2048;
    v74 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v66 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v58 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v67 = 136315906;
    v68 = "operator[]";
    v69 = 1024;
    v70 = 476;
    v71 = 2048;
    v72 = v4;
    v73 = 2048;
    v74 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<re::Quaternion<float>>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v63, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v64;
    if (v64 > v4)
    {
      v4 = *(_QWORD *)(v65 + 8 * v4);
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(_OWORD **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                _ZF = *v29 == 2;
              else
                _ZF = 1;
              if (!_ZF || (*(_OWORD *)v7 = *v31, v28[2] == 49))
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, _OWORD *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              v34 = a1 + 344;
              v75.n128_u64[0] = v7;
              v75.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v63 = 0;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          v62 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v67 = 136315906;
          v68 = "operator[]";
          v69 = 1024;
          v70 = 476;
          v71 = 2048;
          v72 = v4;
          v73 = 2048;
          v74 = v62;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v63 = 0;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v60 = v23;
        v61 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v67 = 136315906;
        v68 = "operator[]";
        v69 = 1024;
        v70 = 476;
        v71 = 2048;
        v72 = v61;
        v73 = 2048;
        v74 = v60;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v63 = 0;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v75 = 0u;
      v59 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v67 = 136315906;
      v68 = "operator[]";
      v69 = 1024;
      v70 = 476;
      v71 = 2048;
      v72 = v4;
      v73 = 2048;
      v74 = v59;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v63 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v67 = 136315906;
    v68 = "operator[]";
    v69 = 1024;
    v70 = 468;
    v71 = 2048;
    v72 = v7;
    v73 = 2048;
    v74 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v75.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v75.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v75);
  }
LABEL_37:
  v9 = v12 + v9;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v9;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(int32x4_t **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * v42;
  v44 = *(float32x4_t **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = (uint64_t *)v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = (uint64_t *)v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(uint64_t **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
  {
    _Q0 = *(int32x4_t *)v44;
    _Q3 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v39, *v39), *(int8x16_t *)v39, 0xCuLL), vnegq_f32(*v44)), *(float32x4_t *)v39, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v44, 0xCuLL));
    v50 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q3, _Q3), (int8x16_t)_Q3, 0xCuLL), *(float32x4_t *)v39, *v44, 3);
    _Q3.i32[0] = HIDWORD(*(unsigned __int128 *)v39);
    v51 = vmlaq_laneq_f32(v50, *v44, *(float32x4_t *)v39, 3);
    __asm { FMLA            S1, S3, V0.S[3] }
    v51.i32[3] = _S1;
    *(float32x4_t *)v46 = v51;
  }
  else
  {
    re::AnimationValueTraits<re::Quaternion<float>>::interpolate(v44, (float32x4_t *)v39, v46, v12 / v9);
  }
  v75.n128_u64[0] = (unint64_t)v46;
  v75.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v75);
  if (v45)
  {
    v56 = *(_QWORD *)(a1 + 400);
    if (v56 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v56 + 1);
      v56 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v56) = v45;
    *(_QWORD *)(a1 + 400) = v56 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

_OWORD *re::AnimationBlendTreeRigContext<re::Quaternion<float>>::setRigDataValue<re::Quaternion<float>>(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _OWORD *result;

  v3 = *(_QWORD *)(a1 + 232);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    result = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(_QWORD *)(a1 + 248) + 288 * a2, a2);
    *result = *a3;
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::GenericSRT<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<re::GenericSRT<float>>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<re::GenericSRT<float>>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[39];
}

uint64_t re::AnimationBlendTreeInstance<re::GenericSRT<float>>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::GenericSRT<float>>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::GenericSRT<float>>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<re::GenericSRT<float>>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<re::GenericSRT<float>>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 224, 16);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1EDC0;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 176) = 0x3F8000003F800000;
  *(_QWORD *)(v2 + 184) = 1065353216;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0x3F80000000000000;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  return result;
}

BOOL re::AnimationImpl<re::GenericSRT<float>>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  return p_info[39] == *(__objc2_class_ro **)this && re::BindPoint::valueUntyped(this) != 0;
}

uint64_t re::AnimationBlendTreeInstance<re::GenericSRT<float>>::isInstanced()
{
  return 1;
}

_DWORD *re::AnimationImpl<re::GenericSRT<float>>::evaluate(_DWORD *result, _BYTE *a2, uint64_t a3, __int128 *a4, uint64_t a5, _OWORD *a6)
{
  BOOL v6;
  __int128 v7;
  __int128 v8;

  if (a3)
  {
    if (a2[16])
      v6 = *a2 == 2;
    else
      v6 = 1;
    if (!v6)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
    v7 = *a4;
    v8 = a4[2];
    a6[1] = a4[1];
    a6[2] = v8;
    *a6 = v7;
    if (result[2] == 49)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::GenericSRT<float>>::evaluateCore(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, __n128 a7)
{
  unint64_t v7;
  unint64_t v12;
  _QWORD *v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  re::BindPoint *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  const re::SkeletalPose *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const re::SkeletalPose *v43;
  int v44;
  _DWORD *Runtime;
  int v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[3];
  uint64_t v84;
  char v85;
  _QWORD v86[2];
  _QWORD v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  _BYTE v107[14];
  __int16 v108;
  _BYTE v109[18];
  uint64_t v110;

  v12 = a1;
  v110 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7.n128_f64[0]);
  v13 = *(_QWORD **)(v12 + 80);
  if (v13[36])
  {
    for (i = 0; i != 144; i += 48)
    {
      v15 = (_QWORD *)((char *)&v88 + i);
      *v15 = 0x3F8000003F800000;
      v15[1] = 1065353216;
      v15[2] = 0;
      v15[3] = 0x3F80000000000000;
      v15[4] = 0;
      v15[5] = 0;
    }
    v16 = 0;
    v17 = *(_QWORD *)(v12 + 400);
    do
    {
      if (v17 >= *(_QWORD *)(v12 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(v12 + 384), v17 + 1);
        v17 = *(_QWORD *)(v12 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 416) + 8 * v17++) = (char *)&v88 + v16;
      *(_QWORD *)(v12 + 400) = v17;
      ++*(_DWORD *)(v12 + 408);
      v16 += 48;
    }
    while (v16 != 144);
    *(_QWORD *)(v12 + 328) = a2;
    *(_QWORD *)(v12 + 336) = a3;
    *(_QWORD *)(v12 + 424) = a4;
    *(_QWORD *)(v12 + 432) = a5;
    a7.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<re::GenericSRT<float>>::evaluateBlend(v12, 0, 0, a7);
    v18 = *(_QWORD *)(v12 + 360);
    if (v18)
    {
      v19 = *(__int128 **)(*(_QWORD *)(v12 + 376) + 16 * v18 - 16);
      if (v19 != a6)
      {
        v20 = *v19;
        v21 = v19[2];
        a6[1] = v19[1];
        a6[2] = v21;
        *a6 = v20;
      }
    }
    *(_QWORD *)(v12 + 400) = 0;
    ++*(_DWORD *)(v12 + 408);
    *(_QWORD *)(v12 + 360) = 0;
    ++*(_DWORD *)(v12 + 368);
    return;
  }
  v22 = *(_QWORD *)(v12 + 440);
  v23 = *(re::BindPoint **)(v12 + 320);
  v76 = *(__int128 **)(v12 + 312);
  v81[0] = a2;
  v81[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v78, (uint64_t)(v13 + 44));
  v24 = v13[39];
  v75 = a6;
  if (v24 != *(_QWORD *)(v22 + 56))
  {
    if (!v24)
      goto LABEL_36;
    a6 = 0;
    v12 = v22 + 40;
    v7 = 0x3F80000000000000;
    do
    {
      *(_QWORD *)&v88 = 0x3F8000003F800000;
      *((_QWORD *)&v88 + 1) = 1065353216;
      *(_QWORD *)&v89 = 0;
      *((_QWORD *)&v89 + 1) = 0x3F80000000000000;
      v90 = 0uLL;
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v22 + 40), (uint64_t)&v88);
      a6 = (__int128 *)((char *)a6 + 1);
      v24 = v13[39];
    }
    while ((unint64_t)a6 < v24);
  }
  if (v24)
  {
    v25 = 0;
    v26 = 0;
    while (1)
    {
      a6 = v79;
      if ((unint64_t)v79 <= v26)
        break;
      v12 = *(_QWORD *)(v80 + 8 * v26);
      a6 = (__int128 *)v13[42];
      if ((unint64_t)a6 <= v12)
        goto LABEL_81;
      v7 = v12 + 1;
      if ((unint64_t)a6 <= v12 + 1)
        goto LABEL_82;
      if (v24 <= v12)
        goto LABEL_83;
      v27 = v13[43];
      v28 = *(_QWORD *)(v27 + 8 * v12);
      v12 = *(_QWORD *)(v13[40] + 8 * v12);
      v29 = (_BYTE *)re::Slice<re::AnimationClock>::range(v81, v28, *(_QWORD *)(v27 + 8 * v7));
      a6 = *(__int128 **)(v22 + 56);
      if ((unint64_t)a6 <= v26)
        goto LABEL_84;
      v31 = v30;
      if (!v30)
        goto LABEL_85;
      v32 = (_OWORD *)(*(_QWORD *)(v22 + 72) + v25);
      if (v29[16])
        v33 = *v29 == 2;
      else
        v33 = 1;
      if (!v33 || (v34 = *a4, v35 = a4[2], v32[1] = a4[1], v32[2] = v35, *v32 = v34, *(_DWORD *)(v12 + 8) == 49))
        (*(void (**)(unint64_t, _BYTE *, uint64_t, __int128 *, uint64_t, _OWORD *))(*(_QWORD *)v12
                                                                                                  + 104))(v12, v29, v30, a4, a5, v32);
      a6 = *(__int128 **)(v22 + 16);
      if ((unint64_t)a6 <= v26)
        goto LABEL_86;
      a6 = *(__int128 **)(v22 + 56);
      if ((unint64_t)a6 <= v26)
        goto LABEL_87;
      re::AnimationBlendTreeRigContext<re::GenericSRT<float>>::setRigDataValue<re::GenericSRT<float>>(v22, *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v26++), (_OWORD *)(*(_QWORD *)(v22 + 72) + v25));
      v24 = v13[39];
      v25 += 48;
      if (v26 >= v24)
        goto LABEL_36;
    }
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 476;
    v108 = 2048;
    *(_QWORD *)v109 = v26;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 476;
    v108 = 2048;
    *(_QWORD *)v109 = v12;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    v24 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 476;
    v108 = 2048;
    *(_QWORD *)v109 = v7;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 476;
    v108 = 2048;
    *(_QWORD *)v109 = v12;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 789;
    v108 = 2048;
    *(_QWORD *)v109 = v26;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    re::internal::assertLog((re::internal *)6, v30, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_86:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 789;
    v108 = 2048;
    *(_QWORD *)v109 = v26;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 789;
    v108 = 2048;
    *(_QWORD *)v109 = v26;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a6, v41);
    _os_crash();
    __break(1u);
    goto LABEL_89;
  }
LABEL_36:
  v36 = v76;
  if (v76)
  {
    v37 = 0;
    v38 = 0;
    a6 = 0;
    do
    {
      if (*((_QWORD *)v23 + 3) && re::BindPoint::isAlive(v23))
      {
        v39 = (const re::SkeletalPose *)re::BindPoint::valueUntyped(v23);
        v41 = *(_QWORD *)(v22 + 232);
        if (v41 <= (unint64_t)a6)
          goto LABEL_88;
        v42 = *(_QWORD *)(v22 + 248);
        v43 = v39;
        switch(*(_BYTE *)(v42 + v38 + 32))
        {
          case 1:
            v44 = *(_DWORD *)v39;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v42 + v38, v40);
            goto LABEL_44;
          case 2:
            v44 = *(_DWORD *)v39;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v42 + v38, v40);
LABEL_44:
            *Runtime = v44;
            v36 = v76;
            break;
          case 3:
            v46 = *(_DWORD *)v39;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v42 + v38, v40) = v46;
            break;
          case 4:
            v47 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v42 + v38, v40);
            v49 = *((_OWORD *)v43 + 1);
            v48 = *((_OWORD *)v43 + 2);
            *v47 = *(_OWORD *)v43;
            v47[1] = v49;
            v47[2] = v48;
            break;
          case 5:
            v50 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v42 + v38, v40);
            v51 = *((_OWORD *)v43 + 3);
            v53 = *(_OWORD *)v43;
            v52 = *((_OWORD *)v43 + 1);
            v50[2] = *((_OWORD *)v43 + 2);
            v50[3] = v51;
            *v50 = v53;
            v50[1] = v52;
            break;
          case 6:
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v42 + v38, v40);
            goto LABEL_51;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v42 + v38, v40) = *(_QWORD *)v39;
            break;
          case 8:
            v54 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v42 + v38, v40);
LABEL_51:
            *v54 = *(_OWORD *)v43;
            break;
          case 0xA:
            v7 = *(_QWORD *)(v22 + 96);
            if (v7 <= (unint64_t)a6)
              goto LABEL_92;
            re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(v22 + 112) + v37), v39);
            break;
          case 0xD:
            v55 = v42 + v38;
            if (*(_QWORD *)(v55 + 40) >> 1 == 82389)
            {
              v56 = *(char **)(v55 + 48);
              if (v56 == "SRT" || !strcmp(v56, "SRT"))
                re::AnimationBlendTreeRigContext<re::GenericSRT<float>>::setRigDataValue<re::GenericSRT<float>>(v22, (unint64_t)a6, v43);
            }
            break;
          default:
            break;
        }
      }
      v23 = (re::BindPoint *)((char *)v23 + 48);
      a6 = (__int128 *)((char *)a6 + 1);
      v38 += 288;
      v37 += 24;
    }
    while (v36 != a6);
  }
  if (!*(_BYTE *)(v22 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v22 + 2360));
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v88, (re::EvaluationContext *)(v22 + 4896));
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v22 + 5600) + 16))(v22 + 5600, &v88);
  if (!*(_QWORD *)(v22 + 272))
  {
LABEL_89:
    re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_90;
  }
  v58 = *(_QWORD *)(v22 + 288);
  v87[0] = "scale";
  v87[1] = 5;
  re::RigDataValue::attributeValue(v58, (uint64_t)v87, (uint64_t)&v88);
  v60 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(*((uint64_t *)&v88 + 1), v59);
  if (!*(_QWORD *)(v22 + 272))
  {
LABEL_90:
    re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_91;
  }
  v63 = *v60;
  v62 = v60[1];
  v64 = *(_QWORD *)(v22 + 288);
  v86[0] = "rotation";
  v86[1] = 8;
  re::RigDataValue::attributeValue(v64, (uint64_t)v86, (uint64_t)&v106);
  v66 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(*(uint64_t *)&v107[4], v65);
  if (!*(_QWORD *)(v22 + 272))
  {
LABEL_91:
    re::internal::assertLog((re::internal *)6, v67, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
LABEL_92:
    v83[0] = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v88 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v106 = 136315906;
    *(_QWORD *)v107 = "operator[]";
    *(_WORD *)&v107[8] = 1024;
    *(_DWORD *)&v107[10] = 789;
    v108 = 2048;
    *(_QWORD *)v109 = a6;
    *(_WORD *)&v109[8] = 2048;
    *(_QWORD *)&v109[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v69 = *v66;
  v68 = v66[1];
  v70 = *(_QWORD *)(v22 + 288);
  v82[0] = "translation";
  v82[1] = 11;
  re::RigDataValue::attributeValue(v70, (uint64_t)v82, (uint64_t)v83);
  v72 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v83[1], v71);
  v74 = *v72;
  v73 = v72[1];
  *(_QWORD *)v75 = v63;
  *((_QWORD *)v75 + 1) = v62;
  *((_QWORD *)v75 + 2) = v69;
  *((_QWORD *)v75 + 3) = v68;
  *((_QWORD *)v75 + 4) = v74;
  *((_QWORD *)v75 + 5) = v73;
  if (!LOBYTE(v83[0]) && v84 && (v85 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v84 + 40))();
  if (!(_BYTE)v106 && *(_QWORD *)&v109[4] && (v109[12] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v109[4] + 40))();
  if (!(_BYTE)v88 && *((_QWORD *)&v89 + 1) && (v90 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v89 + 1) + 40))();
  if (v78 && v79)
    (*(void (**)(void))(*(_QWORD *)v78 + 40))();
}

void re::AnimationImpl<re::GenericSRT<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<re::GenericSRT<float>>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED1F7D0;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    v5 = v2[5];
    if (v5)
    {
      if (v2[9])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v2[9] = 0;
      v2[6] = 0;
      v2[7] = 0;
      v2[5] = 0;
      ++*((_DWORD *)v2 + 16);
    }
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v6 = *(_QWORD *)(a1 + 384);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v7 = *(_QWORD *)(a1 + 344);
  if (v7)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

float re::AnimationBlendTreeInstance<re::GenericSRT<float>>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  float v9;
  uint64_t v11;
  float v12;
  float *v13;
  re::BindPoint *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  re::BindPoint *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t *v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  unint64_t v70;
  __n128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(v6 + 288);
  if (v7 <= a2)
  {
    v59 = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v63 = 136315906;
    v64 = "operator[]";
    v65 = 1024;
    v66 = 476;
    v67 = 2048;
    v68 = a2;
    v69 = 2048;
    v70 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v9 = a4.n128_f32[0];
  v11 = *(_QWORD *)(v6 + 296);
  v12 = *(float *)(v11 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v7 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v13 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v7);
LABEL_6:
      v12 = *v13;
      goto LABEL_11;
    }
LABEL_55:
    v59 = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v63 = 136315906;
    v64 = "operator[]";
    v65 = 1024;
    v66 = 476;
    v67 = 2048;
    v68 = v7;
    v69 = 2048;
    v70 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v62 = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    v54 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v63 = 136315906;
    v64 = "operator[]";
    v65 = 1024;
    v66 = 476;
    v67 = 2048;
    v68 = v4;
    v69 = 2048;
    v70 = v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v14 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v14 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v13 = (float *)re::BindPoint::valueUntyped(v14);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v12 <= 0.001)
    return v9;
  v15 = v11 + 8 * a2;
  v16 = (unsigned __int8 *)(v15 + 6);
  if (*(_BYTE *)(v15 + 6))
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 360);
    v19 = (__int16 *)(v15 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<re::GenericSRT<float>>::evaluateBlend(a1, v17 + *v19, v18, a4);
      ++v17;
    }
    while (v17 < *v16);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v15 + 7) & 2) == 0)
  {
    v20 = *(_QWORD *)(a1 + 400) - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v20);
    *(_QWORD *)(a1 + 400) = v20;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v59, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v11 + 8 * a2 + 4);
    v21 = v60;
    if (v60 > v4)
    {
      v4 = *(_QWORD *)(v61 + 8 * v4);
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = v22[42];
      if (v23 > v4)
      {
        v24 = v4 + 1;
        if (v23 > v4 + 1)
        {
          v25 = v22[39];
          if (v25 > v4)
          {
            v26 = v22[43];
            v27 = *(_QWORD *)(v26 + 8 * v4);
            v28 = *(_DWORD **)(v22[40] + 8 * v4);
            v29 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v27, *(_QWORD *)(v26 + 8 * v24));
            if (v30)
            {
              v31 = *(__int128 **)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v29[16])
                v33 = *v29 == 2;
              else
                v33 = 1;
              if (!v33
                || (v34 = *v31,
                    v35 = v31[2],
                    *(_OWORD *)(v7 + 16) = v31[1],
                    *(_OWORD *)(v7 + 32) = v35,
                    *(_OWORD *)v7 = v34,
                    v28[2] == 49))
              {
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, __int128 *, uint64_t, unint64_t))(*(_QWORD *)v28 + 104))(v28, v29, v30, v31, v32, v7);
              }
              v36 = a1 + 344;
              v71.n128_u64[0] = v7;
              v71.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v59 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = 0u;
          v58 = v25;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 476;
          v67 = 2048;
          v68 = v4;
          v69 = 2048;
          v70 = v58;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v59 = 0;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v71 = 0u;
        v56 = v23;
        v57 = v24;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v63 = 136315906;
        v64 = "operator[]";
        v65 = 1024;
        v66 = 476;
        v67 = 2048;
        v68 = v57;
        v69 = 2048;
        v70 = v56;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v59 = 0;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      v55 = v23;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v63 = 136315906;
      v64 = "operator[]";
      v65 = 1024;
      v66 = 476;
      v67 = 2048;
      v68 = v4;
      v69 = 2048;
      v70 = v55;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v7 = *(__int16 *)(v11 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v7)
  {
LABEL_57:
    v59 = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v63 = 136315906;
    v64 = "operator[]";
    v65 = 1024;
    v66 = 468;
    v67 = 2048;
    v68 = v7;
    v69 = 2048;
    v70 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v37 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v11 + 8 * a2 + 4));
  if (*((_QWORD *)v37 + 3) && re::BindPoint::isAlive(v37))
  {
    v71.n128_u64[0] = re::BindPoint::valueUntyped(v37);
    v71.n128_u32[2] = 1;
    v36 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v36, &v71);
  }
LABEL_37:
  v9 = v12 + v9;
  v38 = *(_QWORD *)(a1 + 360);
  if (v38 != a3 + 2)
    return v9;
  v39 = *(_QWORD *)(a1 + 376);
  v40 = v39 + 16 * v38;
  v41 = *(float32x4_t **)(v40 - 16);
  v42 = *(_DWORD *)(v40 - 8);
  v43 = *(_DWORD *)(a1 + 368);
  v44 = v38 - 2;
  v45 = v39 + 16 * (v38 - 2);
  v46 = *(float32x4_t **)v45;
  LODWORD(v45) = *(_DWORD *)(v45 + 8);
  *(_QWORD *)(a1 + 360) = v44;
  *(_DWORD *)(a1 + 368) = v43 + 2;
  if ((v45 & 1) == 0)
  {
    if ((v42 & 1) != 0)
      v47 = 0;
    else
      v47 = v41;
    v48 = (unint64_t)v46;
LABEL_44:
    if (v48)
      goto LABEL_46;
    goto LABEL_45;
  }
  v47 = 0;
  v48 = (unint64_t)v41;
  if ((v42 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v49 = *(_QWORD *)(a1 + 400) - 1;
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v49);
  *(_QWORD *)(a1 + 400) = v49;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  if ((*(_BYTE *)(v11 + 8 * a2 + 7) & 1) != 0)
  {
    re::AnimationValueTraits<re::GenericSRT<float>>::combine(v41, v46, (float32x4_t *)v48);
  }
  else
  {
    re::lerp<float>(v46, v41, (float32x4_t *)&v71, v12 / v9);
    v50 = v71;
    v51 = v73;
    *(_OWORD *)(v48 + 16) = v72;
    *(_OWORD *)(v48 + 32) = v51;
    *(__n128 *)v48 = v50;
  }
  v71.n128_u64[0] = v48;
  v71.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v71);
  if (v47)
  {
    v52 = *(_QWORD *)(a1 + 400);
    if (v52 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v52 + 1);
      v52 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v52) = v47;
    *(_QWORD *)(a1 + 400) = v52 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v9;
}

_OWORD *re::AnimationBlendTreeRigContext<re::GenericSRT<float>>::setRigDataValue<re::GenericSRT<float>>(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _OWORD *result;

  v3 = *(_QWORD *)(a1 + 232);
  if (v3 > a2)
    return re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(*(_QWORD *)(a1 + 248) + 288 * a2, a3);
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
  result = (_OWORD *)_os_crash();
  __break(1u);
  return result;
}

void re::AnimationBlendTreeInstance<re::SkeletalPose>::~AnimationBlendTreeInstance(uint64_t a1)
{
  re::AnimationBlendTreeInstance<re::SkeletalPose>::~AnimationBlendTreeInstance(a1);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::Animation<re::SkeletalPose>::animationValueType()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[37];
}

uint64_t re::AnimationBlendTreeInstance<re::SkeletalPose>::childCount(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::SkeletalPose>::child(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
}

uint64_t re::AnimationBlendTreeInstance<re::SkeletalPose>::totalDuration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
}

float re::AnimationImpl<re::SkeletalPose>::timelineDesc@<S0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float result;

  v4 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 0;
  result = v4;
  *(float *)(a2 + 4) = result;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 25) = a1[16];
  return result;
}

double re::AnimationImpl<re::SkeletalPose>::makeCompositionChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 296, 8);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)v2 = &off_24ED1EE18;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = &str_110;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_DWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  return result;
}

uint64_t re::AnimationImpl<re::SkeletalPose>::isValidBindPoint(int a1, re::BindPoint *this)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  uint64_t result;
  int v5;
  re::BindPoint *v6;

  if (!*((_QWORD *)this + 3))
    return 0;
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    this = v6;
    if (v5)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      this = v6;
    }
  }
  if (p_info[37] != *(__objc2_class_ro **)this)
    return 0;
  result = re::BindPoint::valueUntyped(this);
  if (result)
    return *(_QWORD *)(result + 80) != 0;
  return result;
}

uint64_t re::AnimationBlendTreeInstance<re::SkeletalPose>::isInstanced()
{
  return 1;
}

uint64_t re::AnimationImpl<re::SkeletalPose>::evaluate(_DWORD *a1, _BYTE *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  BOOL v12;
  uint64_t result;

  if (a3)
  {
    if (a2[16])
      v12 = *a2 == 2;
    else
      v12 = 1;
    if (!v12)
      return (*(uint64_t (**)(_DWORD *, _BYTE *, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4, a5, a6);
    result = (uint64_t)re::AnimationValueTraits<re::SkeletalPose>::copy(a4, a6);
    if (a1[2] == 49)
      return (*(uint64_t (**)(_DWORD *, _BYTE *, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::AnimationBlendTreeInstance<re::SkeletalPose>::evaluateCore(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t *a6, double a7)
{
  unint64_t v7;
  unint64_t v11;
  _QWORD *ii;
  uint64_t i;
  char *v14;
  uint64_t j;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t k;
  uint64_t m;
  uint64_t v22;
  re::BindPoint *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t n;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  BOOL v34;
  uint64_t v35;
  re::SkeletalPose *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  re::SkeletalPose *v40;
  int v41;
  _DWORD *Runtime;
  int v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  char *v52;
  __n128 v53;
  _QWORD *v54;
  re::SkeletalPose *v55;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  int v63;
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  uint64_t *v70;
  StringID v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v11 = a1;
  v89 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 96))
    re::BlendSpace::computeWeights((re::BlendSpace *)(a1 + 88), a7);
  ii = *(_QWORD **)(v11 + 80);
  if (ii[36])
  {
    for (i = 0; i != 264; i += 88)
    {
      v14 = (char *)&v71 + i;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = &str_110;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_DWORD *)v14 + 16) = 0;
      *((_QWORD *)v14 + 9) = 0;
      *((_QWORD *)v14 + 10) = 0;
    }
    for (j = 0; j != 264; j += 88)
    {
      v16 = *(_QWORD *)(v11 + 400);
      if (v16 >= *(_QWORD *)(v11 + 392))
      {
        re::DynamicArray<float *>::growCapacity((_QWORD *)(v11 + 384), v16 + 1);
        v16 = *(_QWORD *)(v11 + 400);
      }
      *(_QWORD *)(*(_QWORD *)(v11 + 416) + 8 * v16) = (char *)&v71 + j;
      *(_QWORD *)(v11 + 400) = v16 + 1;
      ++*(_DWORD *)(v11 + 408);
      re::SkeletalPose::init((uint64_t *)((char *)&v71 + j), a6 + 10);
    }
    *(_QWORD *)(v11 + 328) = a2;
    *(_QWORD *)(v11 + 336) = a3;
    *(_QWORD *)(v11 + 424) = a4;
    *(_QWORD *)(v11 + 432) = a5;
    v17.n128_u32[0] = 0;
    re::AnimationBlendTreeInstance<re::SkeletalPose>::evaluateBlend(v11, 0, 0, v17);
    v18 = *(_QWORD *)(v11 + 360);
    if (v18)
    {
      v19 = *(uint64_t **)(*(_QWORD *)(v11 + 376) + 16 * v18 - 16);
      if (v19 != a6)
        re::AnimationValueTraits<re::SkeletalPose>::copy(v19, a6);
    }
    for (k = 0; k != 264; k += 88)
      re::SkeletalPose::deinit((re::SkeletalPose *)((char *)&v71 + k));
    *(_QWORD *)(v11 + 400) = 0;
    ++*(_DWORD *)(v11 + 408);
    *(_QWORD *)(v11 + 360) = 0;
    ++*(_DWORD *)(v11 + 368);
    for (m = 176; m != -88; m -= 88)
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v71 + m));
    return;
  }
  v22 = *(_QWORD *)(v11 + 440);
  v23 = *(re::BindPoint **)(v11 + 320);
  v54 = *(_QWORD **)(v11 + 312);
  v55 = (re::SkeletalPose *)a6;
  v61[0] = a2;
  v61[1] = a3;
  re::FixedArray<unsigned long>::FixedArray(&v58, (uint64_t)(ii + 44));
  v24 = ii[39];
  if (v24 == *(_QWORD *)(v22 + 56))
    goto LABEL_22;
  if (v24)
  {
    v25 = 0;
    v11 = v22 + 40;
    v7 = (unint64_t)&v72;
    a3 = a6 + 10;
    do
    {
      v75 = 0uLL;
      *(_QWORD *)&v71.var0 = 0;
      v71.var1 = (char *)&str_110;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      *(_QWORD *)&v76 = 0;
      re::DynamicArray<re::SkeletalPose>::add((_anonymous_namespace_ *)(v22 + 40), &v71);
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v71);
      re::SkeletalPose::init((uint64_t *)(*(_QWORD *)(v22 + 72) + 88 * *(_QWORD *)(v22 + 56) - 88), a3);
      ++v25;
      v24 = ii[39];
    }
    while (v25 < v24);
LABEL_22:
    if (v24)
    {
      v26 = 0;
      for (n = 0; n < v24; ++n)
      {
        v28 = v59;
        if ((unint64_t)v59 <= n)
        {
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 476;
          v67 = 2048;
          v68 = n;
          v69 = 2048;
          v70 = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_69:
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 476;
          v67 = 2048;
          v68 = v11;
          v69 = 2048;
          v70 = a3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 476;
          v67 = 2048;
          v68 = v7;
          v69 = 2048;
          v70 = a3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_71:
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          n = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 476;
          v67 = 2048;
          v68 = v11;
          v69 = 2048;
          v70 = (uint64_t *)v24;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_72:
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 789;
          v67 = 2048;
          v68 = n;
          v69 = 2048;
          v70 = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_73:
          re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
LABEL_74:
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 789;
          v67 = 2048;
          v68 = n;
          v69 = 2048;
          v70 = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_75:
          v62 = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v63 = 136315906;
          v64 = "operator[]";
          v65 = 1024;
          v66 = 789;
          v67 = 2048;
          v68 = n;
          v69 = 2048;
          v70 = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, ii, v38);
          _os_crash();
          __break(1u);
        }
        v11 = *(_QWORD *)(v60 + 8 * n);
        a3 = (uint64_t *)ii[42];
        if ((unint64_t)a3 <= v11)
          goto LABEL_69;
        v7 = v11 + 1;
        if ((unint64_t)a3 <= v11 + 1)
          goto LABEL_70;
        if (v24 <= v11)
          goto LABEL_71;
        v29 = ii[43];
        v30 = *(_QWORD *)(v29 + 8 * v11);
        v11 = *(_QWORD *)(ii[40] + 8 * v11);
        v31 = (_BYTE *)re::Slice<re::AnimationClock>::range(v61, v30, *(_QWORD *)(v29 + 8 * v7));
        v28 = *(uint64_t **)(v22 + 56);
        if ((unint64_t)v28 <= n)
          goto LABEL_72;
        a3 = (uint64_t *)v32;
        if (!v32)
          goto LABEL_73;
        v33 = v31;
        v7 = *(_QWORD *)(v22 + 72) + v26;
        if (v31[16])
          v34 = *v31 == 2;
        else
          v34 = 1;
        if (!v34
          || (re::AnimationValueTraits<re::SkeletalPose>::copy(a4, (_QWORD *)(*(_QWORD *)(v22 + 72) + v26)),
              *(_DWORD *)(v11 + 8) == 49))
        {
          (*(void (**)(unint64_t, _BYTE *, uint64_t *, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)v11 + 104))(v11, v33, a3, a4, a5, v7);
        }
        v28 = *(uint64_t **)(v22 + 16);
        if ((unint64_t)v28 <= n)
          goto LABEL_74;
        v28 = *(uint64_t **)(v22 + 56);
        if ((unint64_t)v28 <= n)
          goto LABEL_75;
        re::AnimationBlendTreeRigContext<re::SkeletalPose>::setRigDataValue<re::SkeletalPose>(v22, *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * n), (re::SkeletalPose *)(*(_QWORD *)(v22 + 72) + v26));
        v24 = ii[39];
        v26 += 88;
      }
    }
  }
  if (v54)
  {
    v35 = 0;
    for (ii = 0; ii != v54; ii = (_QWORD *)((char *)ii + 1))
    {
      if (*((_QWORD *)v23 + 3) && re::BindPoint::isAlive(v23))
      {
        v36 = (re::SkeletalPose *)re::BindPoint::valueUntyped(v23);
        v38 = *(_QWORD *)(v22 + 232);
        if (v38 <= (unint64_t)ii)
          goto LABEL_76;
        v39 = *(_QWORD *)(v22 + 248);
        v40 = v36;
        switch(*(_BYTE *)(v39 + v35 + 32))
        {
          case 1:
            v41 = *(_DWORD *)v36;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v39 + v35, v37);
            goto LABEL_48;
          case 2:
            v41 = *(_DWORD *)v36;
            Runtime = (_DWORD *)re::RigDataValue::getRuntimeValue<unsigned int>(v39 + v35, v37);
LABEL_48:
            *Runtime = v41;
            break;
          case 3:
            v43 = *(_DWORD *)v36;
            *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v39 + v35, v37) = v43;
            break;
          case 4:
            v44 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix3x3<float>>(v39 + v35, v37);
            v46 = *((_OWORD *)v40 + 1);
            v45 = *((_OWORD *)v40 + 2);
            *v44 = *(_OWORD *)v40;
            v44[1] = v46;
            v44[2] = v45;
            break;
          case 5:
            v47 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Matrix4x4<float>>(v39 + v35, v37);
            v48 = *((_OWORD *)v40 + 3);
            v50 = *(_OWORD *)v40;
            v49 = *((_OWORD *)v40 + 1);
            v47[2] = *((_OWORD *)v40 + 2);
            v47[3] = v48;
            *v47 = v50;
            v47[1] = v49;
            break;
          case 6:
            v51 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v39 + v35, v37);
            goto LABEL_55;
          case 7:
            *(_QWORD *)re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v39 + v35, v37) = *(_QWORD *)v36;
            break;
          case 8:
            v51 = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v39 + v35, v37);
LABEL_55:
            *v51 = *(_OWORD *)v40;
            break;
          case 0xA:
            re::AnimationBlendTreeRigContext<re::SkeletalPose>::setRigDataValue<re::SkeletalPose>(v22, (unint64_t)ii, v36);
            break;
          case 0xD:
            if (*(_QWORD *)(v39 + v35 + 40) >> 1 == 82389)
            {
              v52 = *(char **)(v39 + v35 + 48);
              if (v52 == "SRT" || !strcmp(v52, "SRT"))
                re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v39 + v35, v40);
            }
            break;
          default:
            break;
        }
      }
      v23 = (re::BindPoint *)((char *)v23 + 48);
      v35 += 288;
    }
  }
  if (!*(_BYTE *)(v22 + 4888))
    re::EvaluationContextManager::buildEvaluationContext((re::EvaluationContextManager *)(v22 + 2360));
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = (StringID)0;
  v72 = 0u;
  re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v71, (re::EvaluationContext *)(v22 + 4896));
  (*(void (**)(uint64_t, StringID *))(*(_QWORD *)(v22 + 5600) + 16))(v22 + 5600, &v71);
  v53 = re::EvaluationSkeletalPoseOutputHandle::get((re::EvaluationSkeletalPoseOutputHandle *)(v22 + 6384), v55);
  if (v58 && v59)
    (*(void (**)(__n128))(*(_QWORD *)v58 + 40))(v53);
}

void re::AnimationImpl<re::SkeletalPose>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

uint64_t re::AnimationBlendTreeInstance<re::SkeletalPose>::~AnimationBlendTreeInstance(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED1F8A0;
  v2 = *(_QWORD **)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = v2[798];
    if (v4)
    {
      if (v2[799])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[800]);
        v2[799] = 0;
        v2[800] = 0;
      }
      v2[798] = 0;
    }
    re::EvaluationModelSingleThread::~EvaluationModelSingleThread((re::EvaluationModelSingleThread *)(v2 + 700));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 683));
    re::BindNode::deinit((re::BindNode *)(v2 + 674));
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)(v2 + 666));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 666));
    re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)(v2 + 295));
    re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)(v2 + 37));
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v2 + 20));
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)(v2 + 15));
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(v2 + 10));
    re::DynamicArray<re::SkeletalPose>::deinit((uint64_t)(v2 + 5));
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v5 = *(_QWORD *)(a1 + 384);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    ++*(_DWORD *)(a1 + 408);
  }
  v6 = *(_QWORD *)(a1 + 344);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    ++*(_DWORD *)(a1 + 368);
  }
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 304));
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)(a1 + 280));
  re::BlendSpace::~BlendSpace((re::BlendSpace *)(a1 + 88));
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::DynamicArray<re::SkeletalPose>::deinit(uint64_t a1)
{
  uint64_t result;
  re::SkeletalPose *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::SkeletalPose **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 88 * v4;
        do
        {
          re::SkeletalPose::~SkeletalPose(v3);
          v3 = (re::SkeletalPose *)((char *)v3 + 88);
          v5 -= 88;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::SkeletalPose **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::SkeletalPose *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

float re::AnimationBlendTreeInstance<re::SkeletalPose>::evaluateBlend(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  float v11;
  uint64_t v13;
  float v14;
  float *v15;
  re::BindPoint *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  re::BindPoint *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  __n128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(v8 + 288);
  if (v9 <= a2)
  {
    v50 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 476;
    v58 = 2048;
    v59 = a2;
    v60 = 2048;
    v61 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v11 = a4.n128_f32[0];
  v13 = *(_QWORD *)(v8 + 296);
  v14 = *(float *)(v13 + 8 * a2);
  if (a2 && *(_DWORD *)(a1 + 96))
  {
    v9 = a2 - 1;
    v4 = *(_QWORD *)(a1 + 264);
    if (v4 > a2 - 1)
    {
      v15 = (float *)(*(_QWORD *)(a1 + 272) + 4 * v9);
LABEL_6:
      v14 = *v15;
      goto LABEL_11;
    }
LABEL_55:
    v50 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 476;
    v58 = 2048;
    v59 = v9;
    v60 = 2048;
    v61 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v53 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 476;
    v58 = 2048;
    v59 = v4;
    v60 = 2048;
    v61 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (*(_QWORD *)(a1 + 288) > a2)
  {
    v16 = (re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2);
    if (*((_QWORD *)v16 + 3))
    {
      if (re::BindPoint::isAlive((re::BindPoint *)(*(_QWORD *)(a1 + 296) + 48 * a2)))
      {
        v15 = (float *)re::BindPoint::valueUntyped(v16);
        goto LABEL_6;
      }
    }
  }
LABEL_11:
  if (v14 <= 0.001)
    return v11;
  v17 = v13 + 8 * a2;
  v18 = (unsigned __int8 *)(v17 + 6);
  if (*(_BYTE *)(v17 + 6))
  {
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 360);
    v21 = (__int16 *)(v17 + 4);
    a4.n128_u32[0] = 0;
    do
    {
      re::AnimationBlendTreeInstance<re::SkeletalPose>::evaluateBlend(a1, v19 + *v21, v20, a4);
      ++v19;
    }
    while (v19 < *v18);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v17 + 7) & 2) == 0)
  {
    v22 = *(_QWORD *)(a1 + 400) - 1;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v22);
    *(_QWORD *)(a1 + 400) = v22;
    ++*(_DWORD *)(a1 + 408);
    re::FixedArray<unsigned long>::FixedArray(&v50, *(_QWORD *)(a1 + 80) + 352);
    v4 = *(__int16 *)(v13 + 8 * a2 + 4);
    v5 = v51;
    if (v51 > v4)
    {
      v4 = *(_QWORD *)(v52 + 8 * v4);
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
      v23 = *(_QWORD **)(a1 + 80);
      v5 = v23[42];
      if (v5 > v4)
      {
        v6 = v4 + 1;
        if (v5 > v4 + 1)
        {
          v5 = v23[39];
          if (v5 > v4)
          {
            v24 = v23[43];
            v25 = *(_QWORD *)(v24 + 8 * v4);
            v26 = *(_DWORD **)(v23[40] + 8 * v4);
            v27 = (_BYTE *)re::Slice<re::AnimationClock>::range((_QWORD *)(a1 + 328), v25, *(_QWORD *)(v24 + 8 * v6));
            if (v28)
            {
              v29 = v27;
              v30 = v28;
              v31 = *(_QWORD *)(a1 + 424);
              v32 = *(_QWORD *)(a1 + 432);
              if (v27[16])
                v33 = *v27 == 2;
              else
                v33 = 1;
              if (!v33
                || (re::AnimationValueTraits<re::SkeletalPose>::copy(*(_QWORD **)(a1 + 424), (_QWORD *)v9), v26[2] == 49))
              {
                (*(void (**)(_DWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 104))(v26, v29, v30, v31, v32, v9);
              }
              v34 = a1 + 344;
              v62.n128_u64[0] = v9;
              v62.n128_u32[2] = 0;
              goto LABEL_36;
            }
LABEL_61:
            re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
            _os_crash();
            __break(1u);
          }
LABEL_60:
          v50 = 0;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v62 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v54 = 136315906;
          v55 = "operator[]";
          v56 = 1024;
          v57 = 476;
          v58 = 2048;
          v59 = v4;
          v60 = 2048;
          v61 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        v50 = 0;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v54 = 136315906;
        v55 = "operator[]";
        v56 = 1024;
        v57 = 476;
        v58 = 2048;
        v59 = v6;
        v60 = 2048;
        v61 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      v50 = 0;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v62 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v54 = 136315906;
      v55 = "operator[]";
      v56 = 1024;
      v57 = 476;
      v58 = 2048;
      v59 = v4;
      v60 = 2048;
      v61 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v9 = *(__int16 *)(v13 + 8 * a2 + 4);
  v4 = *(_QWORD *)(a1 + 312);
  if (v4 <= v9)
  {
LABEL_57:
    v50 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v54 = 136315906;
    v55 = "operator[]";
    v56 = 1024;
    v57 = 468;
    v58 = 2048;
    v59 = v9;
    v60 = 2048;
    v61 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v35 = (re::BindPoint *)(*(_QWORD *)(a1 + 320) + 48 * *(__int16 *)(v13 + 8 * a2 + 4));
  if (*((_QWORD *)v35 + 3) && re::BindPoint::isAlive(v35))
  {
    v62.n128_u64[0] = re::BindPoint::valueUntyped(v35);
    v62.n128_u32[2] = 1;
    v34 = a1 + 344;
LABEL_36:
    re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(v34, &v62);
  }
LABEL_37:
  v11 = v14 + v11;
  v36 = *(_QWORD *)(a1 + 360);
  if (v36 != a3 + 2)
    return v11;
  v37 = *(_QWORD *)(a1 + 376);
  v38 = v37 + 16 * v36;
  v39 = *(_QWORD **)(v38 - 16);
  v40 = *(_DWORD *)(v38 - 8);
  v41 = *(_DWORD *)(a1 + 368);
  v42 = v36 - 2;
  v43 = v37 + 16 * (v36 - 2);
  v44 = *(_QWORD **)v43;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  *(_QWORD *)(a1 + 360) = v42;
  *(_DWORD *)(a1 + 368) = v41 + 2;
  if ((v43 & 1) == 0)
  {
    if ((v40 & 1) != 0)
      v45 = 0;
    else
      v45 = v39;
    v46 = v44;
LABEL_44:
    if (v46)
      goto LABEL_46;
    goto LABEL_45;
  }
  v45 = 0;
  v46 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_45:
  v47 = *(_QWORD *)(a1 + 400) - 1;
  v46 = *(_QWORD **)(*(_QWORD *)(a1 + 416) + 8 * v47);
  *(_QWORD *)(a1 + 400) = v47;
  ++*(_DWORD *)(a1 + 408);
LABEL_46:
  if ((*(_BYTE *)(v13 + 8 * a2 + 7) & 1) != 0)
    re::AnimationValueTraits<re::SkeletalPose>::combine(v39, v44, v46);
  else
    re::AnimationValueTraits<re::SkeletalPose>::interpolate(v44, v39, v46, v14 / v11);
  v62.n128_u64[0] = (unint64_t)v46;
  v62.n128_u32[2] = 0;
  re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add(a1 + 344, &v62);
  if (v45)
  {
    v48 = *(_QWORD *)(a1 + 400);
    if (v48 >= *(_QWORD *)(a1 + 392))
    {
      re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 384), v48 + 1);
      v48 = *(_QWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v48) = v45;
    *(_QWORD *)(a1 + 400) = v48 + 1;
    ++*(_DWORD *)(a1 + 408);
  }
  return v11;
}

id re::DynamicArray<re::SkeletalPose>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  re::StringID *v5;
  id result;
  uint64_t v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SkeletalPose>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (re::StringID *)(*((_QWORD *)this + 4) + 88 * v4);
  re::StringID::StringID(v5, a2);
  re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)v5 + 2, (uint64_t)&a2[1]);
  result = (id)re::DynamicArray<BOOL>::DynamicArray((uint64_t)v5 + 40, (uint64_t *)&a2[2].var1);
  v7 = *(_QWORD *)&a2[5].var0;
  *((_QWORD *)v5 + 10) = v7;
  if (v7)
    result = (id)(v7 + 8);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

double re::AnimationBlendTreeRigContext<re::SkeletalPose>::setRigDataValue<re::SkeletalPose>(uint64_t a1, unint64_t a2, re::SkeletalPose *a3)
{
  double result;

  if (*(_QWORD *)(a1 + 96) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)&result = re::EvaluationSkeletalPoseInputHandle::set((re::EvaluationSkeletalPoseInputHandle *)(*(_QWORD *)(a1 + 112) + 24 * a2), a3).n128_u64[0];
  return result;
}

_QWORD *re::DynamicArray<re::SkeletalPose>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SkeletalPose>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalPose>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::SkeletalPose>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SkeletalPose>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 88 * v9;
        do
        {
          re::StringID::StringID((re::StringID *)&v7[v10 / 8], (const StringID *)(v8 + v10));
          re::FixedArray<re::GenericSRT<float>>::FixedArray(&v7[v10 / 8 + 2], v8 + v10 + 16);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v7[v10 / 8 + 5], (uint64_t *)(v8 + v10 + 40));
          v12 = *(_QWORD *)(v8 + v10 + 80);
          v7[v10 / 8 + 10] = v12;
          if (v12)
            v13 = (id)(v12 + 8);
          re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(v8 + v10));
          v10 += 88;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::RigHierarchyJointTransform::init(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v7 = a2 + 116;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 116, &v36);
  a1[1] = a2[118] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 106, &v36);
  a1[2] = a2[108] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(v7, &v36);
  a1[3] = a2[118] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(v7, &v36);
  a1[4] = a2[118] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 106, &v36);
  a1[5] = a2[108] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(v7, &v36);
  a1[6] = a2[118] + 0x7FFFFFFFFFFFFFFELL;
  v8 = a1[5];
  LODWORD(v36) = 21;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a2 + 233), (uint64_t)&v36);
  v9 = a2[235] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>((uint64_t)(a2 + 208), v9) + 8) = v8;
  a1[7] = v9;
  v10 = a1[4];
  v11 = a1[5];
  LODWORD(v36) = 39;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a2 + 223), (uint64_t)&v36);
  v12 = a2[225] - 1;
  v13 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix3x3<float>>((uint64_t)(a2 + 208), v12);
  *(_QWORD *)(v13 + 8) = v10;
  *(_QWORD *)(v13 + 16) = v11;
  a1[8] = v12;
  LODWORD(v36) = 19;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a2 + 223), (uint64_t)&v36);
  v14 = a2[225] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix3x3<float>>((uint64_t)(a2 + 208), v14) + 8) = v12;
  a1[9] = v14;
  v15 = a1[8];
  v16 = a1[6];
  LODWORD(v36) = 40;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a2 + 228), (uint64_t)&v36);
  v17 = a2[230] - 1;
  v18 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix4x4<float>>((uint64_t)(a2 + 208), v17);
  *(_QWORD *)(v18 + 8) = v15;
  *(_QWORD *)(v18 + 16) = v16;
  a1[10] = v17;
  LODWORD(v36) = 20;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a2 + 228), (uint64_t)&v36);
  v19 = a2[230] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix4x4<float>>((uint64_t)(a2 + 208), v19) + 8) = v17;
  a1[11] = v19;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(v7, &v36);
  a1[12] = a2[118] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 106, &v36);
  a1[13] = a2[108] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(v7, &v36);
  a1[14] = a2[118] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 106, &v36);
  a1[15] = a2[108] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 96, &v36);
  a1[16] = a2[98] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 96, &v36);
  a1[17] = a2[98] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 101, &v36);
  a1[18] = a2[103] + 0x7FFFFFFFFFFFFFFELL;
  *(_QWORD *)&v36 = -1;
  re::DynamicArray<unsigned long>::add(a2 + 101, &v36);
  a1[19] = a2[103] + 0x7FFFFFFFFFFFFFFELL;
  v20 = a1[12] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[118] <= v20)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v21 = a2[120];
  *(_QWORD *)(v21 + 8 * v20) = *a3;
  v22 = a1[13] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[108] <= v22)
  {
LABEL_11:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v23 = a2[110];
  *(_QWORD *)(v23 + 8 * v22) = a3[1];
  v24 = a1[14] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[118] <= v24)
  {
LABEL_12:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v21 + 8 * v24) = a3[2];
  v25 = a1[15] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[108] <= v25)
  {
LABEL_13:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v23 + 8 * v25) = a3[1];
  v26 = a1[16] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[98] <= v26)
  {
LABEL_14:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v27 = a2[100];
  *(_QWORD *)(v27 + 8 * v26) = a4;
  v28 = a1[17] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[98] <= v28)
  {
LABEL_15:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  *(_QWORD *)(v27 + 8 * v28) = a4;
  v29 = a1[18] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[103] <= v29)
  {
LABEL_16:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v30 = a2[105];
  *(_QWORD *)(v30 + 8 * v29) = a5;
  v31 = a1[19] - 0x7FFFFFFFFFFFFFFFLL;
  if (a2[103] <= v31)
    goto LABEL_17;
  *(_QWORD *)(v30 + 8 * v31) = a5;
  re::RigHierarchyJointTransform::setLocalSpaceJointScale(a1, *a3);
  re::RigHierarchyJointTransform::setLocalSpaceJointRotation(a1, a3[1]);
  return re::RigHierarchyJointTransform::setLocalSpaceJointTranslation(a1, a3[2]);
}

uint64_t re::RigHierarchyJointTransform::setLocalSpaceJointScale(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = a1[1] - 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(*a1 + 944) <= v3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v2[120] + 8 * v3) = a2;
  v4 = a1[4];
  v5 = a1[12];
  v6 = a1[1];
  LODWORD(v9) = 25;
  v10 = 0uLL;
  *((_QWORD *)&v9 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v2 + 243), (uint64_t)&v9);
  v7 = v2[245] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>((uint64_t)(v2 + 208), v7);
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  if (v2[118] <= (unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL))
    goto LABEL_5;
  *(_QWORD *)(v2[120] + 8 * (v4 - 0x7FFFFFFFFFFFFFFFLL)) = v7;
  return result;
}

uint64_t re::RigHierarchyJointTransform::setLocalSpaceJointRotation(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = a1[2] - 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(*a1 + 864) <= v3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v2[110] + 8 * v3) = a2;
  v4 = a1[5];
  v5 = a1[13];
  v6 = a1[2];
  LODWORD(v9) = 24;
  v10 = 0uLL;
  *((_QWORD *)&v9 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v2 + 233), (uint64_t)&v9);
  v7 = v2[235] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>((uint64_t)(v2 + 208), v7);
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  if (v2[108] <= (unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL))
    goto LABEL_5;
  *(_QWORD *)(v2[110] + 8 * (v4 - 0x7FFFFFFFFFFFFFFFLL)) = v7;
  return result;
}

uint64_t re::RigHierarchyJointTransform::setLocalSpaceJointTranslation(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = a1[3] - 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(*a1 + 944) <= v3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v2[120] + 8 * v3) = a2;
  v4 = a1[6];
  v5 = a1[18];
  v6 = a1[3];
  LODWORD(v9) = 43;
  v10 = 0uLL;
  *((_QWORD *)&v9 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v2 + 243), (uint64_t)&v9);
  v7 = v2[245] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>((uint64_t)(v2 + 208), v7);
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  if (v2[118] <= (unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL))
    goto LABEL_5;
  *(_QWORD *)(v2[120] + 8 * (v4 - 0x7FFFFFFFFFFFFFFFLL)) = v7;
  return result;
}

void re::RigHierarchyJointTransform::setParentTransform(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[38];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)*a1;
  if (a2)
  {
    v6 = a1[12] - 0x7FFFFFFFFFFFFFFFLL;
    v7 = v5[118];
    if (v7 <= v6)
    {
      v21 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v25 = 136315906;
      *(_QWORD *)&v25[4] = "operator[]";
      *(_WORD *)&v25[12] = 1024;
      *(_DWORD *)&v25[14] = 789;
      *(_WORD *)&v25[18] = 2048;
      *(_QWORD *)&v25[20] = v6;
      *(_WORD *)&v25[28] = 2048;
      *(_QWORD *)&v25[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v8 = v5[120];
      *(_QWORD *)(v8 + 8 * v6) = a2[4];
      v6 = a1[13] - 0x7FFFFFFFFFFFFFFFLL;
      v7 = v5[108];
      if (v7 > v6)
      {
        v9 = v5[110];
        *(_QWORD *)(v9 + 8 * v6) = a2[5];
        v6 = a1[14] - 0x7FFFFFFFFFFFFFFFLL;
        v7 = v5[118];
        if (v7 > v6)
        {
          *(_QWORD *)(v8 + 8 * v6) = a2[6];
          v6 = a1[15] - 0x7FFFFFFFFFFFFFFFLL;
          v7 = v5[108];
          if (v7 > v6)
          {
            *(_QWORD *)(v9 + 8 * v6) = a2[7];
            v6 = a1[16] - 0x7FFFFFFFFFFFFFFFLL;
            v7 = v5[98];
            if (v7 > v6)
            {
              v10 = v5[100];
              *(_QWORD *)(v10 + 8 * v6) = a2[8];
              v6 = a1[17] - 0x7FFFFFFFFFFFFFFFLL;
              v7 = v5[98];
              if (v7 > v6)
              {
                *(_QWORD *)(v10 + 8 * v6) = a2[9];
                v6 = a1[18] - 0x7FFFFFFFFFFFFFFFLL;
                v7 = v5[103];
                if (v7 > v6)
                {
                  v11 = v5[105];
                  *(_QWORD *)(v11 + 8 * v6) = a2[10];
                  v6 = a1[19] - 0x7FFFFFFFFFFFFFFFLL;
                  v7 = v5[103];
                  if (v7 > v6)
                  {
                    *(_QWORD *)(v11 + 8 * v6) = a2[11];
                    return;
                  }
                  goto LABEL_28;
                }
LABEL_27:
                v21 = 0;
                v29 = 0u;
                v30 = 0u;
                v27 = 0u;
                v28 = 0u;
                v26 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v25 = 136315906;
                *(_QWORD *)&v25[4] = "operator[]";
                *(_WORD *)&v25[12] = 1024;
                *(_DWORD *)&v25[14] = 789;
                *(_WORD *)&v25[18] = 2048;
                *(_QWORD *)&v25[20] = v6;
                *(_WORD *)&v25[28] = 2048;
                *(_QWORD *)&v25[30] = v7;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_28:
                v21 = 0;
                v29 = 0u;
                v30 = 0u;
                v27 = 0u;
                v28 = 0u;
                v26 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v25 = 136315906;
                *(_QWORD *)&v25[4] = "operator[]";
                *(_WORD *)&v25[12] = 1024;
                *(_DWORD *)&v25[14] = 789;
                *(_WORD *)&v25[18] = 2048;
                *(_QWORD *)&v25[20] = v6;
                *(_WORD *)&v25[28] = 2048;
                *(_QWORD *)&v25[30] = v7;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_29;
              }
LABEL_26:
              v21 = 0;
              v29 = 0u;
              v30 = 0u;
              v27 = 0u;
              v28 = 0u;
              v26 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v25 = 136315906;
              *(_QWORD *)&v25[4] = "operator[]";
              *(_WORD *)&v25[12] = 1024;
              *(_DWORD *)&v25[14] = 789;
              *(_WORD *)&v25[18] = 2048;
              *(_QWORD *)&v25[20] = v6;
              *(_WORD *)&v25[28] = 2048;
              *(_QWORD *)&v25[30] = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_27;
            }
LABEL_25:
            v21 = 0;
            v29 = 0u;
            v30 = 0u;
            v27 = 0u;
            v28 = 0u;
            v26 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v25 = 136315906;
            *(_QWORD *)&v25[4] = "operator[]";
            *(_WORD *)&v25[12] = 1024;
            *(_DWORD *)&v25[14] = 789;
            *(_WORD *)&v25[18] = 2048;
            *(_QWORD *)&v25[20] = v6;
            *(_WORD *)&v25[28] = 2048;
            *(_QWORD *)&v25[30] = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_26;
          }
LABEL_24:
          v21 = 0;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v26 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v25 = 136315906;
          *(_QWORD *)&v25[4] = "operator[]";
          *(_WORD *)&v25[12] = 1024;
          *(_DWORD *)&v25[14] = 789;
          *(_WORD *)&v25[18] = 2048;
          *(_QWORD *)&v25[20] = v6;
          *(_WORD *)&v25[28] = 2048;
          *(_QWORD *)&v25[30] = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        v21 = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v25 = 136315906;
        *(_QWORD *)&v25[4] = "operator[]";
        *(_WORD *)&v25[12] = 1024;
        *(_DWORD *)&v25[14] = 789;
        *(_WORD *)&v25[18] = 2048;
        *(_QWORD *)&v25[20] = v6;
        *(_WORD *)&v25[28] = 2048;
        *(_QWORD *)&v25[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_24;
      }
    }
    v21 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v6;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  v26 = xmmword_2260E5F10;
  v27 = xmmword_2260E5F20;
  v28 = xmmword_2260E5F40;
  *(_DWORD *)v25 = 3;
  memset(&v25[8], 0, 24);
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v5 + 223), (uint64_t)v25);
  *(_QWORD *)v25 = v5[225] - 1;
  re::DynamicArray<unsigned long>::add(v5 + 16, v25);
  re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v5 + 56), (uint64_t)&v26);
  v5 = *(_QWORD **)(v5[20] + 8 * v5[18] - 8);
  v12 = (_QWORD *)*a1;
  v26 = xmmword_2260E5F10;
  v27 = xmmword_2260E5F20;
  v28 = xmmword_2260E5F40;
  v29 = xmmword_2260E5D70;
  *(_DWORD *)v25 = 4;
  memset(&v25[8], 0, 24);
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v12 + 228), (uint64_t)v25);
  *(_QWORD *)v25 = v12[230] - 1;
  v2 = v25;
  re::DynamicArray<unsigned long>::add(v12 + 21, v25);
  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v12 + 61), (uint64_t)&v26);
  v13 = *(_QWORD *)(v12[25] + 8 * v12[23] - 8);
  v14 = (_QWORD *)*a1;
  *(_QWORD *)&v26 = 0x3F8000003F800000;
  *((_QWORD *)&v26 + 1) = 1065353216;
  *(_QWORD *)&v27 = 0;
  *((_QWORD *)&v27 + 1) = 0x3F80000000000000;
  v28 = 0uLL;
  re::EvaluationTree::createInputRegister(v14, (__n128 *)&v26, &v21);
  v15 = (_QWORD *)*a1;
  v7 = a1[12] - 0x7FFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(*a1 + 944);
  if (v3 <= v7)
  {
LABEL_29:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  v16 = v15[120];
  *(_QWORD *)(v16 + 8 * v7) = v21;
  v7 = a1[13] - 0x7FFFFFFFFFFFFFFFLL;
  v2 = (_BYTE *)v15[108];
  if ((unint64_t)v2 <= v7)
  {
LABEL_30:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_31;
  }
  v17 = v22;
  v18 = v15[110];
  *(_QWORD *)(v18 + 8 * v7) = v22;
  v7 = a1[14] - 0x7FFFFFFFFFFFFFFFLL;
  v2 = (_BYTE *)v15[118];
  if ((unint64_t)v2 <= v7)
  {
LABEL_31:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
  *(_QWORD *)(v16 + 8 * v7) = v23;
  v7 = a1[15] - 0x7FFFFFFFFFFFFFFFLL;
  v2 = (_BYTE *)v15[108];
  if ((unint64_t)v2 <= v7)
  {
LABEL_32:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
  *(_QWORD *)(v18 + 8 * v7) = v17;
  v7 = a1[16] - 0x7FFFFFFFFFFFFFFFLL;
  v2 = (_BYTE *)v15[98];
  if ((unint64_t)v2 <= v7)
  {
LABEL_33:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_34;
  }
  v19 = v15[100];
  *(_QWORD *)(v19 + 8 * v7) = v5;
  v7 = a1[17] - 0x7FFFFFFFFFFFFFFFLL;
  v2 = (_BYTE *)v15[98];
  if ((unint64_t)v2 <= v7)
  {
LABEL_34:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v19 + 8 * v7) = v5;
  v7 = a1[18] - 0x7FFFFFFFFFFFFFFFLL;
  v5 = (_QWORD *)v15[103];
  if ((unint64_t)v5 <= v7)
  {
LABEL_35:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_36:
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    *(_WORD *)&v25[18] = 2048;
    *(_QWORD *)&v25[20] = v7;
    *(_WORD *)&v25[28] = 2048;
    *(_QWORD *)&v25[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v20 = v15[105];
  *(_QWORD *)(v20 + 8 * v7) = v13;
  v7 = a1[19] - 0x7FFFFFFFFFFFFFFFLL;
  v5 = (_QWORD *)v15[103];
  if ((unint64_t)v5 <= v7)
    goto LABEL_36;
  *(_QWORD *)(v20 + 8 * v7) = v13;
}

uint64_t re::RigHierarchyJointTransform::setModelSpaceJointScale(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = a1[4] - 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(*a1 + 944) <= v3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v2[120] + 8 * v3) = a2;
  v4 = a1[1];
  v5 = a1[4];
  v6 = a1[12];
  LODWORD(v9) = 17;
  v10 = 0uLL;
  *((_QWORD *)&v9 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v2 + 243), (uint64_t)&v9);
  v7 = v2[245] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>((uint64_t)(v2 + 208), v7);
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  if (v2[118] <= (unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL))
    goto LABEL_5;
  *(_QWORD *)(v2[120] + 8 * (v4 - 0x7FFFFFFFFFFFFFFFLL)) = v7;
  return result;
}

uint64_t re::RigHierarchyJointTransform::setModelSpaceJointRotation(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = a1[5] - 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(*a1 + 864) <= v3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v2[110] + 8 * v3) = a2;
  v4 = a1[2];
  v5 = a1[15];
  v6 = a1[5];
  LODWORD(v9) = 24;
  v10 = 0uLL;
  *((_QWORD *)&v9 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v2 + 233), (uint64_t)&v9);
  v7 = v2[235] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>((uint64_t)(v2 + 208), v7);
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  if (v2[108] <= (unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL))
    goto LABEL_5;
  *(_QWORD *)(v2[110] + 8 * (v4 - 0x7FFFFFFFFFFFFFFFLL)) = v7;
  return result;
}

uint64_t re::RigHierarchyJointTransform::setModelSpaceJointTranslation(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = a1[6] - 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(*a1 + 944) <= v3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v2[120] + 8 * v3) = a2;
  v4 = a1[3];
  v5 = a1[19];
  v6 = a1[6];
  LODWORD(v9) = 43;
  v10 = 0uLL;
  *((_QWORD *)&v9 + 1) = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v2 + 243), (uint64_t)&v9);
  v7 = v2[245] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>((uint64_t)(v2 + 208), v7);
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  if (v2[118] <= (unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL))
    goto LABEL_5;
  *(_QWORD *)(v2[120] + 8 * (v4 - 0x7FFFFFFFFFFFFFFFLL)) = v7;
  return result;
}

void *re::RigHierarchy::init(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  void *result;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  const char *v33;
  _anonymous_namespace_ *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  int v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  _BYTE *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  __int128 v101;
  unint64_t i;
  uint64_t v103;
  float32x4_t *v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float32x4_t v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float32x4_t v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  _QWORD *v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  size_t v138;
  re::DynamicString *v139;
  size_t v140;
  unint64_t v141;
  _anonymous_namespace_ *v142;
  _anonymous_namespace_ *v143;
  _anonymous_namespace_ *v144;
  _anonymous_namespace_ *v145;
  _anonymous_namespace_ *v146;
  _anonymous_namespace_ *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  _QWORD *v151;
  _QWORD *v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  _BYTE v161[48];
  __int128 v162;
  _BYTE v163[48];
  __int128 v164;
  float32x4_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  simd_float4x4 v171;
  simd_float4x4 v172;
  simd_float4x4 v173;

  v6 = a6;
  v170 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v11 = a1 + 24;
  if (2 * a6 <= 0x80)
    v12 = 128;
  else
    v12 = 2 * a6;
  v149 = v11;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(v11, a3, v12);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 72, a3, 8);
  *(_QWORD *)(a1 + 120) = a3;
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::setCapacity((_QWORD *)(a1 + 120), 8uLL);
  ++*(_DWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 160) = a3;
  v145 = (_anonymous_namespace_ *)(a1 + 160);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity((_QWORD *)(a1 + 160), v6);
  ++*(_DWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 200) = a3;
  v147 = (_anonymous_namespace_ *)(a1 + 200);
  re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(a1 + 200), v6);
  *(_QWORD *)(a1 + 240) = a3;
  ++*(_DWORD *)(a1 + 224);
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)(a1 + 240), v6);
  ++*(_DWORD *)(a1 + 264);
  v165 = (float32x4_t)xmmword_2260E5F10;
  v166 = xmmword_2260E5F20;
  v167 = xmmword_2260E5F40;
  *(_DWORD *)v163 = 3;
  memset(&v163[8], 0, 24);
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 223), (uint64_t)v163);
  *(_QWORD *)v163 = a4[225] - 1;
  re::DynamicArray<unsigned long>::add(a4 + 16, v163);
  re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a4 + 56), (uint64_t)&v165);
  v13 = *(_QWORD *)(a4[20] + 8 * a4[18] - 8);
  v165 = (float32x4_t)xmmword_2260E5F10;
  v166 = xmmword_2260E5F20;
  v167 = xmmword_2260E5F40;
  v168 = xmmword_2260E5D70;
  *(_DWORD *)v163 = 4;
  memset(&v163[8], 0, 24);
  v142 = (_anonymous_namespace_ *)(a4 + 228);
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 228), (uint64_t)v163);
  *(_QWORD *)v163 = a4[230] - 1;
  v144 = (_anonymous_namespace_ *)(a4 + 21);
  re::DynamicArray<unsigned long>::add(a4 + 21, v163);
  v143 = (_anonymous_namespace_ *)(a4 + 61);
  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a4 + 61), (uint64_t)&v165);
  v14 = *(_QWORD *)(a4[25] + 8 * a4[23] - 8);
  v165.i64[0] = 0x3F8000003F800000;
  v165.i64[1] = 1065353216;
  *(_QWORD *)&v166 = 0;
  *((_QWORD *)&v166 + 1) = 0x3F80000000000000;
  v167 = 0uLL;
  v151 = a4;
  re::EvaluationTree::createInputRegister(a4, (__n128 *)&v165, &v158);
  v148 = a3;
  *(_QWORD *)(a1 + 280) = a3;
  re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity((_QWORD *)(a1 + 280), v6);
  ++*(_DWORD *)(a1 + 304);
  v146 = (_anonymous_namespace_ *)(a1 + 240);
  v15 = *(_QWORD *)(a1 + 296);
  v152 = (_QWORD *)a1;
  if (v15 >= v6)
  {
    if (v15 <= v6)
      goto LABEL_14;
  }
  else
  {
    if (*(_QWORD *)(a1 + 288) < v6)
    {
      re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity((_QWORD *)(a1 + 280), v6);
      v15 = *(_QWORD *)(a1 + 296);
    }
    if (v15 < v6)
    {
      v16 = *(_QWORD *)(a1 + 312);
      v17 = v16 + 160 * v15;
      v18 = v16 + 160 * v6 - v17;
      if (v18 >= 1)
      {
        v19 = v18 / 0xA0uLL + 1;
        *(_QWORD *)&v20 = -1;
        *((_QWORD *)&v20 + 1) = -1;
        do
        {
          *(_QWORD *)v17 = 0;
          *(_OWORD *)(v17 + 8) = v20;
          *(_OWORD *)(v17 + 24) = v20;
          *(_OWORD *)(v17 + 40) = v20;
          *(_OWORD *)(v17 + 56) = v20;
          *(_OWORD *)(v17 + 72) = v20;
          *(_OWORD *)(v17 + 88) = v20;
          *(_OWORD *)(v17 + 104) = v20;
          *(_OWORD *)(v17 + 120) = v20;
          --v19;
          *(_OWORD *)(v17 + 136) = v20;
          *(_QWORD *)(v17 + 152) = -1;
          v17 += 160;
        }
        while (v19 > 1);
      }
    }
  }
  *(_QWORD *)(a1 + 296) = v6;
  ++*(_DWORD *)(a1 + 304);
LABEL_14:
  *(_QWORD *)(a1 + 320) = a3;
  result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)(a1 + 320), v6);
  v22 = (_QWORD *)a1;
  ++*(_DWORD *)(a1 + 344);
  v23 = *(_QWORD *)(a1 + 336);
  if (v23 >= v6)
  {
    if (v23 <= v6)
      goto LABEL_22;
  }
  else
  {
    if (*(_QWORD *)(a1 + 328) < v6)
    {
      result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)(a1 + 320), v6);
      v22 = (_QWORD *)a1;
      v23 = *(_QWORD *)(a1 + 336);
    }
    if (v23 < v6)
    {
      result = (void *)(v22[44] + 8 * v23);
      v24 = 8 * v6 - 8 * v23;
      if (v24 >= 1)
      {
        result = memset(result, 255, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
        v22 = (_QWORD *)a1;
      }
    }
  }
  v22[42] = v6;
  ++*((_DWORD *)v22 + 86);
LABEL_22:
  if (!v6)
    return result;
  v25 = 0;
  v26 = 0;
  v27 = (unint64_t)v163;
  do
  {
    v28 = (__n128 *)v22[37];
    if ((unint64_t)v28 <= v26)
      goto LABEL_109;
    v29 = (_QWORD *)(v22[39] + v25);
    v156 = v158;
    v157 = v159;
    result = (void *)re::RigHierarchyJointTransform::init(v29, v151, (uint64_t *)&v156, v13, v14);
    v22 = v152;
    ++v26;
    v25 += 160;
  }
  while (v6 != v26);
  v30 = 0;
  v155 = 0;
  v28 = (__n128 *)&v165;
  v141 = v6;
  do
  {
    v31 = a5 + 176 * v30;
    v33 = *(const char **)v31;
    v32 = *(_QWORD *)(v31 + 8);
    v165.i64[0] = 0;
    v165.i64[1] = (uint64_t)&str_110;
    re::DynamicArray<re::StringID>::add(v147, (uint64_t *)&v165);
    re::StringID::destroyString((re::StringID *)&v165);
    v165.i64[1] = 0;
    v166 = 0uLL;
    v35 = *(_QWORD *)(v31 + 8);
    if (v35)
      v36 = v35 + 1;
    else
      v36 = 0;
    re::DynamicString::setCapacity(&v165, v36);
    re::DynamicString::operator=((re::DynamicString *)&v165, a5 + 176 * v30);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>(v149, (re::DynamicString *)&v165, &v155);
    if (v165.i64[0] && (v165.i8[8] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v165.i64[0] + 40))();
    v37 = a5 + 176 * v30;
    v150 = (unint64_t *)(v37 + 16);
    re::DynamicArray<unsigned long>::add(v146, (_QWORD *)(v37 + 16));
    v26 = *(_QWORD *)(v37 + 16);
    v41 = *(unsigned __int8 *)(v37 + 96);
    v40 = (_BYTE *)(v37 + 96);
    v39 = v41;
    v13 = 160;
    if (v26 == -1)
    {
      if (v39)
      {
        *(_OWORD *)v163 = 0u;
        *(_OWORD *)v161 = xmmword_2260E5D70;
        v153 = 0u;
        re::decomposeScaleRotationTranslation<float>(a5 + 176 * v30 + 112, (int32x4_t *)v163, v161, &v153);
        v165 = *(float32x4_t *)v163;
        v166 = *(_OWORD *)v161;
        v167 = v153;
        re::EvaluationTree::createInputRegister(v151, (__n128 *)&v165, v161);
        v26 = v155;
        v27 = v152[37];
        if (v27 <= v155)
          goto LABEL_116;
        re::RigHierarchyJointTransform::setLocalSpaceJointScale((_QWORD *)(v152[39] + 160 * v155), *(uint64_t *)v161);
        v26 = v155;
        v27 = v152[37];
        if (v27 <= v155)
        {
LABEL_117:
          *(_QWORD *)&v153 = 0;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v163 = 136315906;
          *(_QWORD *)&v163[4] = "operator[]";
          *(_WORD *)&v163[12] = 1024;
          *(_DWORD *)&v163[14] = 789;
          *(_WORD *)&v163[18] = 2048;
          *(_QWORD *)&v163[20] = v26;
          *(_WORD *)&v163[28] = 2048;
          *(_QWORD *)&v163[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_118:
          *(_QWORD *)&v153 = 0;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v163 = 136315906;
          *(_QWORD *)&v163[4] = "operator[]";
          *(_WORD *)&v163[12] = 1024;
          *(_DWORD *)&v163[14] = 789;
          *(_WORD *)&v163[18] = 2048;
          *(_QWORD *)&v163[20] = v26;
          *(_WORD *)&v163[28] = 2048;
          *(_QWORD *)&v163[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_119;
        }
        v68 = v40;
        re::RigHierarchyJointTransform::setLocalSpaceJointRotation((_QWORD *)(v152[39] + 160 * v155), *(uint64_t *)&v161[8]);
        v69 = v152;
        v26 = v155;
        v27 = v152[37];
        if (v27 <= v155)
          goto LABEL_118;
      }
      else
      {
        v68 = v40;
        v69 = v152;
        if (!*(_BYTE *)(a5 + 176 * v30 + 32))
          goto LABEL_70;
        re::EvaluationTree::createInputRegister(v151, (__n128 *)(a5 + 176 * v30 + 48), v161);
        v26 = v155;
        v27 = v152[37];
        if (v27 <= v155)
        {
LABEL_124:
          *(_QWORD *)&v153 = 0;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v163 = 136315906;
          *(_QWORD *)&v163[4] = "operator[]";
          *(_WORD *)&v163[12] = 1024;
          *(_DWORD *)&v163[14] = 789;
          *(_WORD *)&v163[18] = 2048;
          *(_QWORD *)&v163[20] = v26;
          *(_WORD *)&v163[28] = 2048;
          *(_QWORD *)&v163[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_125;
        }
        re::RigHierarchyJointTransform::setLocalSpaceJointScale((_QWORD *)(v152[39] + 160 * v155), *(uint64_t *)v161);
        v26 = v155;
        v27 = v152[37];
        if (v27 <= v155)
        {
LABEL_125:
          *(_QWORD *)&v153 = 0;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v163 = 136315906;
          *(_QWORD *)&v163[4] = "operator[]";
          *(_WORD *)&v163[12] = 1024;
          *(_DWORD *)&v163[14] = 789;
          *(_WORD *)&v163[18] = 2048;
          *(_QWORD *)&v163[20] = v26;
          *(_WORD *)&v163[28] = 2048;
          *(_QWORD *)&v163[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_126:
          *(_QWORD *)&v153 = 0;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v163 = 136315906;
          *(_QWORD *)&v163[4] = "operator[]";
          *(_WORD *)&v163[12] = 1024;
          *(_DWORD *)&v163[14] = 789;
          *(_WORD *)&v163[18] = 2048;
          *(_QWORD *)&v163[20] = v26;
          *(_WORD *)&v163[28] = 2048;
          *(_QWORD *)&v163[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::RigHierarchyJointTransform::setLocalSpaceJointRotation((_QWORD *)(v152[39] + 160 * v155), *(uint64_t *)&v161[8]);
        v69 = v152;
        v26 = v155;
        v27 = v152[37];
        if (v27 <= v155)
          goto LABEL_126;
      }
      re::RigHierarchyJointTransform::setLocalSpaceJointTranslation((_QWORD *)(v69[39] + 160 * v26), *(uint64_t *)&v161[16]);
      goto LABEL_70;
    }
    if (!v39)
    {
      v68 = v40;
      v69 = v152;
      if (!*(_BYTE *)(a5 + 176 * v30 + 32))
        goto LABEL_67;
      re::EvaluationTree::createInputRegister(v151, (__n128 *)(a5 + 176 * v30 + 48), v161);
      v26 = v155;
      v27 = v152[37];
      if (v27 <= v155)
        goto LABEL_120;
      re::RigHierarchyJointTransform::setLocalSpaceJointScale((_QWORD *)(v152[39] + 160 * v155), *(uint64_t *)v161);
      v26 = v155;
      v27 = v152[37];
      if (v27 <= v155)
      {
LABEL_121:
        *(_QWORD *)&v153 = 0;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v163 = 136315906;
        *(_QWORD *)&v163[4] = "operator[]";
        *(_WORD *)&v163[12] = 1024;
        *(_DWORD *)&v163[14] = 789;
        *(_WORD *)&v163[18] = 2048;
        *(_QWORD *)&v163[20] = v26;
        *(_WORD *)&v163[28] = 2048;
        *(_QWORD *)&v163[30] = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        re::RigHierarchyJointTransform::setLocalSpaceJointRotation((_QWORD *)(v152[39] + 160 * v155), *(uint64_t *)&v161[8]);
        v69 = v152;
        v26 = v155;
        v27 = v152[37];
        if (v27 > v155)
        {
          v70 = (_QWORD *)(v152[39] + 160 * v155);
          v71 = *(_QWORD *)&v161[16];
          goto LABEL_66;
        }
      }
      *(_QWORD *)&v153 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      *(_QWORD *)&v153 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v161 = 136315906;
      *(_QWORD *)&v161[4] = "operator[]";
      *(_WORD *)&v161[12] = 1024;
      *(_DWORD *)&v161[14] = 789;
      *(_WORD *)&v161[18] = 2048;
      *(_QWORD *)&v161[20] = v26;
      *(_WORD *)&v161[28] = 2048;
      *(_QWORD *)&v161[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_124;
    }
    v42 = (_OWORD *)(a5 + 176 * v30);
    v43 = v42[7];
    v44 = v42[8];
    v45 = v42[10];
    *(_OWORD *)&v161[32] = v42[9];
    v162 = v45;
    *(_OWORD *)v161 = v43;
    *(_OWORD *)&v161[16] = v44;
    while (1)
    {
      if (v6 <= v26)
      {
        re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v26, v6);
        _os_crash();
        __break(1u);
LABEL_108:
        re::internal::assertLog((re::internal *)6, v74, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v6);
        _os_crash();
        __break(1u);
LABEL_109:
        *(_QWORD *)v161 = 0;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v163 = 136315906;
        *(_QWORD *)(v27 + 4) = "operator[]";
        *(_WORD *)&v163[12] = 1024;
        *(_DWORD *)(v27 + 14) = 789;
        *(_WORD *)&v163[18] = 2048;
        *(_QWORD *)(v27 + 20) = v26;
        *(_WORD *)&v163[28] = 2048;
        *(_QWORD *)(v27 + 30) = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_110;
      }
      if (*(_BYTE *)(a5 + 176 * v26 + 32))
      {
        v46 = a5 + 176 * v26;
        v47 = *(float *)(v46 + 64);
        v48 = *(float *)(v46 + 68);
        v49 = v47 + v47;
        v50 = v48 + v48;
        v51 = *(float *)(v46 + 72);
        v52 = *(float *)(v46 + 76);
        v53 = v51 + v51;
        v54 = v47 * (float)(v47 + v47);
        v55 = v48 * (float)(v48 + v48);
        v56 = v51 * (float)(v51 + v51);
        v57 = v49 * v48;
        v58 = v49 * v51;
        v59 = v50 * v51;
        v60 = v49 * v52;
        v61 = v50 * v52;
        v62 = v53 * v52;
        v63.i32[3] = 0;
        v63.f32[0] = 1.0 - (float)(v55 + v56);
        v63.f32[1] = v57 + v62;
        v63.f32[2] = v58 - v61;
        v64.i32[3] = 0;
        v64.f32[0] = v57 - v62;
        v64.f32[1] = 1.0 - (float)(v54 + v56);
        v64.f32[2] = v59 + v60;
        v65.i32[3] = 0;
        v65.f32[0] = v58 + v61;
        v65.f32[1] = v59 - v60;
        v65.f32[2] = 1.0 - (float)(v54 + v55);
        v66 = *(float32x4_t *)(v46 + 48);
        v171.columns[0] = (simd_float4)vmulq_n_f32(v63, v66.f32[0]);
        v171.columns[1] = (simd_float4)vmulq_n_f32(v64, *(float *)vshrq_n_u64((uint64x2_t)v66, 0x20uLL).i32);
        v171.columns[2] = (simd_float4)vmulq_laneq_f32(v65, v66, 2);
        v171.columns[3] = *(simd_float4 *)(v46 + 80);
        v171.columns[3].i32[3] = 1.0;
        v172 = __invert_f4(v171);
        v67 = 0;
        *(_OWORD *)v163 = *(_OWORD *)v161;
        *(_OWORD *)&v163[16] = *(_OWORD *)&v161[16];
        *(_OWORD *)&v163[32] = *(_OWORD *)&v161[32];
        v164 = v162;
        do
        {
          *(float32x4_t *)((char *)&v165 + v67) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v172.columns[0], COERCE_FLOAT(*(_OWORD *)&v163[v67])), (float32x4_t)v172.columns[1], *(float32x2_t *)&v163[v67], 1), (float32x4_t)v172.columns[2], *(float32x4_t *)&v163[v67], 2), (float32x4_t)v172.columns[3], *(float32x4_t *)&v163[v67], 3);
          v67 += 16;
        }
        while (v67 != 64);
        *(float32x4_t *)v161 = v165;
        *(_OWORD *)&v161[16] = v166;
        *(_OWORD *)&v161[32] = v167;
        v162 = v168;
        goto LABEL_42;
      }
      if (*(_BYTE *)(a5 + 176 * v26 + 96))
        break;
LABEL_42:
      v26 = *(_QWORD *)(a5 + 176 * v26 + 16);
      if (v26 == -1)
        goto LABEL_62;
    }
    v173 = __invert_f4(*(simd_float4x4 *)(a5 + 176 * v26 + 112));
    v72 = 0;
    *(_OWORD *)v163 = *(_OWORD *)v161;
    *(_OWORD *)&v163[16] = *(_OWORD *)&v161[16];
    *(_OWORD *)&v163[32] = *(_OWORD *)&v161[32];
    v164 = v162;
    do
    {
      *(float32x4_t *)((char *)&v165 + v72) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v173.columns[0], COERCE_FLOAT(*(_OWORD *)&v163[v72])), (float32x4_t)v173.columns[1], *(float32x2_t *)&v163[v72], 1), (float32x4_t)v173.columns[2], *(float32x4_t *)&v163[v72], 2), (float32x4_t)v173.columns[3], *(float32x4_t *)&v163[v72], 3);
      v72 += 16;
    }
    while (v72 != 64);
    *(float32x4_t *)v161 = v165;
    *(_OWORD *)&v161[16] = v166;
    *(_OWORD *)&v161[32] = v167;
    v162 = v168;
LABEL_62:
    *(_OWORD *)v163 = 0u;
    v153 = xmmword_2260E5D70;
    v160 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v161, (int32x4_t *)v163, &v153, &v160);
    v165 = *(float32x4_t *)v163;
    v166 = v153;
    v167 = v160;
    re::EvaluationTree::createInputRegister(v151, (__n128 *)&v165, &v153);
    v26 = v155;
    v27 = v152[37];
    if (v27 <= v155)
      goto LABEL_113;
    re::RigHierarchyJointTransform::setLocalSpaceJointScale((_QWORD *)(v152[39] + 160 * v155), v153);
    v26 = v155;
    v27 = v152[37];
    if (v27 <= v155)
      goto LABEL_114;
    v68 = v40;
    re::RigHierarchyJointTransform::setLocalSpaceJointRotation((_QWORD *)(v152[39] + 160 * v155), *((uint64_t *)&v153 + 1));
    v69 = v152;
    v26 = v155;
    v27 = v152[37];
    if (v27 <= v155)
      goto LABEL_115;
    v70 = (_QWORD *)(v152[39] + 160 * v155);
    v71 = v154;
LABEL_66:
    re::RigHierarchyJointTransform::setLocalSpaceJointTranslation(v70, v71);
LABEL_67:
    v13 = v155;
    v26 = v69[37];
    if (v26 <= v155)
      goto LABEL_111;
    v27 = *v150;
    if (v26 <= *v150)
    {
LABEL_112:
      *(_QWORD *)v161 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v27;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_113:
      *(_QWORD *)&v160 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_114:
      *(_QWORD *)&v160 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      *(_QWORD *)&v160 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      *(_QWORD *)&v153 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_117;
    }
    re::RigHierarchyJointTransform::setParentTransform((_QWORD *)(v69[39] + 160 * v155), (_QWORD *)(v69[39] + 160 * v27));
LABEL_70:
    *(_QWORD *)&v167 = 0;
    *(_QWORD *)&v166 = 0;
    v165 = 0uLL;
    DWORD2(v166) = 0;
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::add(v145, (uint64_t)&v165);
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)&v165);
    v73 = v69[24] + 40 * v69[22];
    *(_QWORD *)(v73 - 40) = v148;
    v26 = v73 - 40;
    re::DynamicArray<re::RigDataValue>::setCapacity((_QWORD *)v26, 8uLL);
    ++*(_DWORD *)(v26 + 24);
    if (*v68)
    {
      v165.i32[0] = 4;
      v166 = 0uLL;
      v165.i64[1] = 0;
      re::DynamicArray<re::EvaluationRegister>::add(v142, (uint64_t)&v165);
      v13 = (uint64_t)v151;
      v165.i64[0] = v151[230] - 1;
      re::DynamicArray<unsigned long>::add(v144, &v165);
      re::DynamicArray<re::Matrix4x4<float>>::add(v143, a5 + 176 * v30 + 112);
      v26 = v155;
      v27 = v69[42];
      v6 = v141;
      if (v27 > v155)
      {
        v75 = *(_QWORD *)(v151[25] + 8 * v151[23] - 8);
        v76 = v69[44];
        goto LABEL_90;
      }
LABEL_110:
      *(_QWORD *)v161 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_111:
      *(_QWORD *)v161 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v13;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_112;
    }
    v13 = (uint64_t)v151;
    v6 = v141;
    if (*(_BYTE *)(a5 + 176 * v30 + 32))
    {
      v77 = a5 + 176 * v30;
      v78 = *(float *)(v77 + 64);
      v79 = *(float *)(v77 + 68);
      v80 = v78 + v78;
      v81 = v79 + v79;
      v82 = *(float *)(v77 + 72);
      v83 = *(float *)(v77 + 76);
      v84 = v82 + v82;
      v85 = v78 * (float)(v78 + v78);
      v86 = v79 * (float)(v79 + v79);
      v87 = v82 * (float)(v82 + v82);
      v88 = v80 * v79;
      v89 = v80 * v82;
      v90 = v81 * v82;
      v91 = v80 * v83;
      v92 = v81 * v83;
      v93 = v84 * v83;
      v94.i32[3] = 0;
      v94.f32[0] = 1.0 - (float)(v86 + v87);
      v94.f32[1] = v88 + v93;
      v94.f32[2] = v89 - v92;
      v95.i32[3] = 0;
      v95.f32[0] = v88 - v93;
      v95.f32[1] = 1.0 - (float)(v85 + v87);
      v95.f32[2] = v90 + v91;
      v96.i32[3] = 0;
      v96.f32[0] = v89 + v92;
      v96.f32[1] = v90 - v91;
      v96.f32[2] = 1.0 - (float)(v85 + v86);
      v97 = *(float32x4_t *)(v77 + 48);
      v98 = vmulq_n_f32(v94, v97.f32[0]);
      v99 = vmulq_n_f32(v95, *(float *)vshrq_n_u64((uint64x2_t)v97, 0x20uLL).i32);
      *(float32x4_t *)v161 = v98;
      *(float32x4_t *)&v161[16] = v99;
      v100 = vmulq_laneq_f32(v96, v97, 2);
      *(float32x4_t *)&v161[32] = v100;
      v101 = *(_OWORD *)(v77 + 80);
      HIDWORD(v101) = 1.0;
      v162 = v101;
      for (i = *v150; i != -1; i = *(_QWORD *)(a5 + 176 * i + 16))
      {
        if (v141 <= i)
          goto LABEL_108;
        if (*(_BYTE *)(a5 + 176 * i + 32))
        {
          v103 = 0;
          v104 = (float32x4_t *)(a5 + 176 * i);
          v105 = v104[4].f32[0];
          v106 = v104[4].f32[1];
          v107 = v104[4].f32[2];
          v108 = v104[4].f32[3];
          v109 = v104[3];
          v125 = v104[5];
          v110 = v105 + v105;
          v111 = v106 + v106;
          v112 = v105 * (float)(v105 + v105);
          v113 = v106 * (float)(v106 + v106);
          v114 = v107 * (float)(v107 + v107);
          v115 = v110 * v106;
          v116 = (float)(v107 + v107) * v108;
          v117.i32[3] = 0;
          v117.f32[0] = 1.0 - (float)(v113 + v114);
          v117.f32[1] = v115 + v116;
          v118 = v110 * v107;
          v119 = v111 * v107;
          v120 = v110 * v108;
          v121 = v111 * v108;
          v117.f32[2] = v118 - v121;
          v122.i32[3] = 0;
          v122.f32[0] = v115 - v116;
          v122.f32[1] = 1.0 - (float)(v112 + v114);
          v122.f32[2] = v119 + v120;
          v123.i32[3] = 0;
          v123.f32[0] = v118 + v121;
          v123.f32[1] = v119 - v120;
          v123.f32[2] = 1.0 - (float)(v112 + v113);
          v124 = vmulq_n_f32(v117, v109.f32[0]);
          v125.i32[3] = 1.0;
          v126 = vmulq_n_f32(v122, *(float *)vshrq_n_u64((uint64x2_t)v109, 0x20uLL).i32);
          *(float32x4_t *)v163 = v98;
          *(float32x4_t *)&v163[16] = v99;
          v127 = vmulq_laneq_f32(v123, v109, 2);
          *(float32x4_t *)&v163[32] = v100;
          v164 = v101;
          do
          {
            *(float32x4_t *)((char *)&v165 + v103) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, COERCE_FLOAT(*(_OWORD *)&v163[v103])), v126, *(float32x2_t *)&v163[v103], 1), v127, *(float32x4_t *)&v163[v103], 2), v125, *(float32x4_t *)&v163[v103], 3);
            v103 += 16;
          }
          while (v103 != 64);
          v98 = v165;
          v99 = (float32x4_t)v166;
          v100 = (float32x4_t)v167;
          v101 = v168;
          *(float32x4_t *)v161 = v165;
          *(_OWORD *)&v161[16] = v166;
          *(_OWORD *)&v161[32] = v167;
          v162 = v168;
        }
        else if (*(_BYTE *)(a5 + 176 * i + 96))
        {
          v129 = 0;
          v130 = (float32x4_t *)(a5 + 176 * i);
          v131 = v130[7];
          v132 = v130[8];
          v133 = v130[9];
          v134 = v130[10];
          *(float32x4_t *)v163 = v98;
          *(float32x4_t *)&v163[16] = v99;
          *(float32x4_t *)&v163[32] = v100;
          v164 = v101;
          do
          {
            *(float32x4_t *)((char *)&v165 + v129) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v131, COERCE_FLOAT(*(_OWORD *)&v163[v129])), v132, *(float32x2_t *)&v163[v129], 1), v133, *(float32x4_t *)&v163[v129], 2), v134, *(float32x4_t *)&v163[v129], 3);
            v129 += 16;
          }
          while (v129 != 64);
          *(float32x4_t *)v161 = v165;
          *(_OWORD *)&v161[16] = v166;
          *(_OWORD *)&v161[32] = v167;
          v162 = v168;
          break;
        }
      }
      v165.i32[0] = 4;
      v166 = 0uLL;
      v165.i64[1] = 0;
      re::DynamicArray<re::EvaluationRegister>::add(v142, (uint64_t)&v165);
      v165.i64[0] = v151[230] - 1;
      re::DynamicArray<unsigned long>::add(v144, &v165);
      re::DynamicArray<re::Matrix4x4<float>>::add(v143, (uint64_t)v161);
      v26 = v155;
      v128 = v152;
      v27 = v152[42];
      if (v27 > v155)
        goto LABEL_89;
LABEL_119:
      *(_QWORD *)&v153 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_120:
      *(_QWORD *)&v153 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v163 = 136315906;
      *(_QWORD *)&v163[4] = "operator[]";
      *(_WORD *)&v163[12] = 1024;
      *(_DWORD *)&v163[14] = 789;
      *(_WORD *)&v163[18] = 2048;
      *(_QWORD *)&v163[20] = v26;
      *(_WORD *)&v163[28] = 2048;
      *(_QWORD *)&v163[30] = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_121;
    }
    *(_OWORD *)v163 = xmmword_2260E5F10;
    *(_OWORD *)&v163[16] = xmmword_2260E5F20;
    *(_OWORD *)&v163[32] = xmmword_2260E5F40;
    v164 = xmmword_2260E5D70;
    v165.i32[0] = 4;
    v166 = 0uLL;
    v165.i64[1] = 0;
    re::DynamicArray<re::EvaluationRegister>::add(v142, (uint64_t)&v165);
    v165.i64[0] = v151[230] - 1;
    re::DynamicArray<unsigned long>::add(v144, &v165);
    re::DynamicArray<re::Matrix4x4<float>>::add(v143, (uint64_t)v163);
    v26 = v155;
    v128 = v152;
    v27 = v152[42];
    if (v27 <= v155)
      goto LABEL_123;
LABEL_89:
    v75 = *(_QWORD *)(v151[25] + 8 * v151[23] - 8);
    v76 = v128[44];
LABEL_90:
    *(_QWORD *)(v76 + 8 * v26) = v75;
    v30 = v155 + 1;
    v155 = v30;
  }
  while (v30 < v6);
  v135 = 0;
  *(_QWORD *)&v153 = 0;
  do
  {
    v136 = a5 + 176 * v135;
    v165.i64[1] = 0;
    v166 = 0uLL;
    v137 = *(_QWORD *)(v136 + 8);
    if (v137)
      v138 = v137 + 1;
    else
      v138 = 0;
    re::DynamicString::setCapacity(&v165, v138);
    v139 = re::DynamicString::operator=((re::DynamicString *)&v165, v136);
    re::DynamicString::rfind((uint64_t)v139, 47, v161);
    if (v161[0])
    {
      v140 = (v165.i8[8] & 1) != 0 ? (unint64_t)v165.i64[1] >> 1 : v165.i8[8] >> 1;
      re::DynamicString::substr((re::DynamicString *)&v165, *(_QWORD *)&v161[8] + 1, v140, (re::DynamicString *)v163);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>(v149, (re::DynamicString *)v163, &v153);
      if (*(_QWORD *)v163)
      {
        if ((v163[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v163 + 40))();
      }
    }
    result = (void *)v165.i64[0];
    if (v165.i64[0])
    {
      if ((v165.i8[8] & 1) != 0)
        result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v165.i64[0] + 40))();
    }
    v135 = v153 + 1;
    *(_QWORD *)&v153 = v135;
  }
  while (v135 < v6);
  return result;
}

_QWORD *re::DynamicArray<re::StringID>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::StringID>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 16 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>(uint64_t a1, re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 56 * v9;
  return v12 + 48;
}

_anonymous_namespace_ *re::DynamicArray<re::DynamicArray<re::RigDataValue>>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 40 * v5;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 24) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v13;
  v14 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v14;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v11 + 24);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RigHierarchy::init(re::RigHierarchy *this, const re::RigEnvironment *a2, const re::Skeleton *a3, re::Allocator *a4, re::EvaluationTree *a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _QWORD v32[2];
  unint64_t v33;
  int v34;
  uint64_t v35;

  v8 = *((_QWORD *)a3 + 3);
  v35 = 0;
  v32[1] = 0;
  v33 = 0;
  v34 = 0;
  re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(v32, v8);
  ++v34;
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = 8;
    while (1)
    {
      v13 = *((_QWORD *)a3 + 3);
      if (v13 <= v11)
        break;
      v14 = strlen(*(const char **)(*((_QWORD *)a3 + 4) + v12));
      *(_QWORD *)&v25 = *(_QWORD *)(*((_QWORD *)a3 + 4) + v12);
      *((_QWORD *)&v25 + 1) = v14;
      v16 = *((_QWORD *)a3 + 6);
      if (v16 <= v11)
        goto LABEL_14;
      v17 = *(unsigned int *)(*((_QWORD *)a3 + 7) + 4 * v11);
      if ((_DWORD)v17 == -1)
        v17 = -1;
      v26 = v17;
      v18 = *((_QWORD *)a3 + 9);
      if (v18 <= v11)
        goto LABEL_15;
      v19 = (__int128 *)(*((_QWORD *)a3 + 10) + v10);
      v27 = 1;
      v21 = v19[1];
      v20 = v19[2];
      v28 = *v19;
      v29 = v21;
      v30 = v20;
      v31 = 0;
      re::DynamicArray<re::RigHierarchyJointDescription>::add(v32, &v25);
      ++v11;
      v12 += 16;
      v10 += 48;
      if (v8 == v11)
        goto LABEL_9;
    }
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v13, a4, a5);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v16);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v18);
    result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_9:
    re::RigHierarchy::init((uint64_t)this, (uint64_t)a2, (uint64_t)a4, a5, v35, v33);
    result = v32[0];
    if (v32[0])
    {
      if (v35)
        return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v32[0] + 40))(v32[0]);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigHierarchyJointDescription>::add(_QWORD *this, __int128 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigHierarchyJointDescription>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 176 * v4;
  v7 = *a2;
  *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v6 = v7;
  v8 = *((unsigned __int8 *)a2 + 32);
  *(_BYTE *)(v6 + 32) = v8;
  if (v8)
  {
    v9 = (_OWORD *)(v5 + 176 * v4);
    v10 = a2[3];
    v11 = a2[5];
    v9[4] = a2[4];
    v9[5] = v11;
    v9[3] = v10;
  }
  v12 = *((unsigned __int8 *)a2 + 96);
  *(_BYTE *)(v5 + 176 * v4 + 96) = v12;
  if (v12)
  {
    v13 = (_OWORD *)(v5 + 176 * v4);
    v14 = a2[7];
    v15 = a2[8];
    v16 = a2[10];
    v13[9] = a2[9];
    v13[10] = v16;
    v13[7] = v14;
    v13[8] = v15;
  }
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::RigHierarchy::deinit(re::RigHierarchy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    if (*((_QWORD *)this + 39))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 35) = 0;
    ++*((_DWORD *)this + 76);
  }
  v3 = *((_QWORD *)this + 30);
  if (v3)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 200);
  v4 = *((_QWORD *)this + 40);
  if (v4)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)this + 160);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)this + 120);
  v6 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 9, v5);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 3, v6);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t re::RigHierarchy::jointDescription@<X0>(re::RigHierarchy *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t i;
  unint64_t v14;
  size_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[48];
  __int128 v20;
  _BYTE v21[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  _BYTE v28[80];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 27);
  result = *((_QWORD *)this + 1);
  a3[1] = v5;
  a3[2] = 0;
  *a3 = result;
  if (v5)
  {
    if (v5 < 0x1745D1745D1745ELL)
    {
      v7 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 176 * v5, 16);
      a3[2] = v7;
      if (!v7)
        goto LABEL_24;
      v9 = v5 - 1;
      if (v5 == 1)
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = -1;
        *(_BYTE *)(v7 + 32) = 0;
        v10 = (_BYTE *)(v7 + 96);
      }
      else
      {
        v10 = (_BYTE *)(v7 + 96);
        do
        {
          *((_QWORD *)v10 - 12) = 0;
          *((_QWORD *)v10 - 11) = 0;
          *((_QWORD *)v10 - 10) = -1;
          *(v10 - 64) = 0;
          *v10 = 0;
          v10 += 176;
          --v9;
        }
        while (v9);
        *((_QWORD *)v10 - 12) = 0;
        *((_QWORD *)v10 - 11) = 0;
        *((_QWORD *)v10 - 10) = -1;
        *(v10 - 64) = 0;
      }
      v11 = 0;
      *v10 = 0;
      v12 = (_OWORD *)(v7 + 112);
      for (i = 8; ; i += 16)
      {
        v14 = *((_QWORD *)this + 27);
        if (v14 <= v11)
          break;
        if (v5 == v11)
          goto LABEL_20;
        v15 = strlen(*(const char **)(*((_QWORD *)this + 29) + i));
        *((_QWORD *)v12 - 14) = *(_QWORD *)(*((_QWORD *)this + 29) + i);
        *((_QWORD *)v12 - 13) = v15;
        v14 = *((_QWORD *)this + 32);
        if (v14 <= v11)
          goto LABEL_21;
        *((_QWORD *)v12 - 12) = *(_QWORD *)(*((_QWORD *)this + 34) + 8 * v11);
        *(_OWORD *)v19 = xmmword_2260E5F10;
        *(_OWORD *)&v19[16] = xmmword_2260E5F20;
        *(_OWORD *)&v19[32] = xmmword_2260E5F40;
        v20 = xmmword_2260E5D70;
        v14 = *((_QWORD *)this + 42);
        if (v14 <= v11)
          goto LABEL_22;
        result = re::EvaluationTree::getInputValue<re::Matrix4x4<float>>(*((_QWORD **)this + 2), *(_QWORD *)(*((_QWORD *)this + 44) + 8 * v11), v19);
        *(_OWORD *)&v28[15] = *(_OWORD *)v19;
        *(_OWORD *)&v28[31] = *(_OWORD *)&v19[16];
        *(_OWORD *)&v28[47] = *(_OWORD *)&v19[32];
        *(_OWORD *)&v28[63] = v20;
        if (*((_BYTE *)v12 - 16))
        {
          v16 = *(_OWORD *)v19;
          v17 = *(_OWORD *)&v19[16];
          v18 = v20;
          v12[2] = *(_OWORD *)&v19[32];
          v12[3] = v18;
          *v12 = v16;
          v12[1] = v17;
        }
        else
        {
          *((_BYTE *)v12 - 16) = 1;
          *v12 = *(_OWORD *)&v28[15];
          v12[1] = *(_OWORD *)&v28[31];
          v12[2] = *(_OWORD *)&v28[47];
          v12[3] = *(_OWORD *)&v28[63];
        }
        ++v11;
        v12 += 11;
        if (v5 == v11)
          return result;
      }
      *(_QWORD *)v21 = 0;
      memset(v28, 0, sizeof(v28));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v19 = 136315906;
      *(_QWORD *)&v19[4] = "operator[]";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 797;
      *(_WORD *)&v19[18] = 2048;
      *(_QWORD *)&v19[20] = v11;
      *(_WORD *)&v19[28] = 2048;
      *(_QWORD *)&v19[30] = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_20:
      *(_QWORD *)v21 = 0;
      memset(v28, 0, sizeof(v28));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v19 = 136315906;
      *(_QWORD *)&v19[4] = "operator[]";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 468;
      *(_WORD *)&v19[18] = 2048;
      *(_QWORD *)&v19[20] = v5;
      *(_WORD *)&v19[28] = 2048;
      *(_QWORD *)&v19[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_21:
      *(_QWORD *)v21 = 0;
      memset(v28, 0, sizeof(v28));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v19 = 136315906;
      *(_QWORD *)&v19[4] = "operator[]";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 797;
      *(_WORD *)&v19[18] = 2048;
      *(_QWORD *)&v19[20] = v11;
      *(_WORD *)&v19[28] = 2048;
      *(_QWORD *)&v19[30] = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      memset(v28, 0, sizeof(v28));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      v22 = 1024;
      v23 = 797;
      v24 = 2048;
      v25 = v11;
      v26 = 2048;
      v27 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 176, v5);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::EvaluationTree::getInputValue<re::Matrix4x4<float>>(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    while (a1[103] > v3)
    {
      a2 = *(_QWORD *)(a1[105] + 8 * v3);
      v3 = a2 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_4;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_4:
  v4 = a1[23];
  if (!v4)
    return 0;
  v5 = (_QWORD *)a1[25];
  v6 = &v5[v4];
  v7 = v5;
  do
  {
    v8 = v4 >> 1;
    v9 = &v7[v4 >> 1];
    v11 = *v9;
    v10 = v9 + 1;
    v4 += ~(v4 >> 1);
    if (v11 < a2)
      v7 = v10;
    else
      v4 = v8;
  }
  while (v4);
  if (v7 == v6 || *v7 != a2)
    return 0;
  v12 = v7 - v5;
  if (a1[63] <= v12)
    goto LABEL_16;
  v13 = (__int128 *)(a1[65] + (v12 << 6));
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[3];
  a3[2] = v13[2];
  a3[3] = v16;
  *a3 = v14;
  a3[1] = v15;
  return 1;
}

uint64_t re::RigHierarchy::setLocalSpaceJointTransform@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= *v11)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      re::RigHierarchyJointTransform::setLocalSpaceJointScale((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), *a3);
      v12 = *v11;
      v13 = *((_QWORD *)a1 + 37);
      if (v13 > *v11)
      {
        re::RigHierarchyJointTransform::setLocalSpaceJointRotation((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3[1]);
        v12 = *v11;
        v11 = (unint64_t *)*((_QWORD *)a1 + 37);
        if ((unint64_t)v11 > v12)
        {
          result = re::RigHierarchyJointTransform::setLocalSpaceJointTranslation((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3[2]);
          *(_BYTE *)a4 = 1;
          return result;
        }
LABEL_24:
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v21 = 136315906;
        *(_QWORD *)&v21[4] = "operator[]";
        *(_WORD *)&v21[12] = 1024;
        *(_DWORD *)&v21[14] = 789;
        *(_WORD *)&v21[18] = 2048;
        *(_QWORD *)&v21[20] = v12;
        *(_WORD *)&v21[28] = 2048;
        *(_QWORD *)&v21[30] = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v21 = 136315906;
    *(_QWORD *)&v21[4] = "operator[]";
    *(_WORD *)&v21[12] = 1024;
    *(_DWORD *)&v21[14] = 789;
    *(_WORD *)&v21[18] = 2048;
    *(_QWORD *)&v21[20] = v12;
    *(_WORD *)&v21[28] = 2048;
    *(_QWORD *)&v21[30] = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v21[16] = 0;
  *(_QWORD *)&v21[24] = 0;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
    v17 = v16 + 1;
  else
    v17 = 0;
  *(_QWORD *)v21 = v15;
  *(_QWORD *)&v21[8] = 0;
  re::DynamicString::setCapacity(v21, v17);
  re::DynamicString::operator=((re::DynamicString *)v21, a2);
  if ((v21[8] & 1) != 0)
    v18 = *(_BYTE **)&v21[16];
  else
    v18 = &v21[9];
  re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
  v19 = v22;
  v20 = v23;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 1000;
  *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a4 + 24) = v19;
  *(_OWORD *)(a4 + 40) = v20;
  result = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    if ((v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 56 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 56 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 56 * v5 + 48;
}

_QWORD *re::RigHierarchy::getEvaluationSkeletalPose@<X0>(re::RigHierarchy *this@<X0>, re::Allocator *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  re::Allocator *v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  const char *v14;
  _QWORD *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[24];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  __int16 v63;
  __int16 v64;
  int32x4_t v65[3];
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v9 = (re::Allocator *)*((_QWORD *)this + 27);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (v9)
  {
    v4 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *((_QWORD *)this + 27);
      if (v13 <= v11)
        break;
      v14 = *(const char **)(*((_QWORD *)this + 29) + v4 + 8);
      *(_QWORD *)&v47 = 0;
      *((_QWORD *)&v47 + 1) = &str_110;
      v13 = v44;
      if (v44 <= v11)
        goto LABEL_34;
      v15 = (_QWORD *)(v45 + v4);
      v16 = v47;
      *(_QWORD *)&v47 = 0;
      *((_QWORD *)&v47 + 1) = &str_110;
      v17 = *(char **)(v45 + v4 + 8);
      v18 = v16 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v45 + v4) & 1;
      v15[1] = *((_QWORD *)&v16 + 1);
      *(_QWORD *)&v51 = v18;
      *((_QWORD *)&v51 + 1) = v17;
      *v15 = v16;
      re::StringID::destroyString((re::StringID *)&v51);
      re::StringID::destroyString((re::StringID *)&v47);
      ++v11;
      v4 += 16;
      if (v9 == (re::Allocator *)v11)
        goto LABEL_6;
    }
    *(_QWORD *)&v47 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v65[0].i64 + 4) = (uint64_t)"operator[]";
    v65[0].i16[6] = 1024;
    *(__int32 *)((char *)&v65[0].i32[3] + 2) = 797;
    v65[1].i16[1] = 2048;
    *(uint64_t *)((char *)v65[1].i64 + 4) = v11;
    v65[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v65[1].i64[1] + 6) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    *(_QWORD *)&v62 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v65[0].i64 + 4) = (uint64_t)"operator[]";
    v65[0].i16[6] = 1024;
    *(__int32 *)((char *)&v65[0].i32[3] + 2) = 468;
    v65[1].i16[1] = 2048;
    *(uint64_t *)((char *)v65[1].i64 + 4) = v11;
    v65[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v65[1].i64[1] + 6) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
LABEL_6:
  v12 = (uint64_t *)&v47;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = &str_110;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0x7FFFFFFFLL;
  if ((a3 & 1) != 0)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    if (v9)
    {
      v20 = 0;
      a3 = 0;
      v21 = xmmword_2260E5D70;
      while (1)
      {
        v4 = *((_QWORD *)this + 32);
        if (v4 <= a3)
          break;
        v4 = v41;
        if (v41 <= a3)
          goto LABEL_38;
        v22 = *(_QWORD *)(*((_QWORD *)this + 34) + 8 * a3);
        if (v22 >= a3)
          LODWORD(v22) = -1;
        *(_DWORD *)(v42 + 4 * a3) = v22;
        v47 = xmmword_2260E5F10;
        v48 = xmmword_2260E5F20;
        v49 = xmmword_2260E5F40;
        v50 = v21;
        v4 = *((_QWORD *)this + 42);
        if (v4 <= a3)
          goto LABEL_39;
        re::EvaluationTree::getInputValue<re::Matrix4x4<float>>(*((_QWORD **)this + 2), *(_QWORD *)(*((_QWORD *)this + 44) + 8 * a3), &v47);
        v65[0] = 0u;
        v62 = xmmword_2260E5D70;
        v46 = 0u;
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v47, v65, &v62, &v46);
        v4 = v38;
        if (v38 <= a3)
          goto LABEL_40;
        v23 = v65[0].i64[1];
        v24 = v62;
        v25 = v46;
        v26 = v39 + v20;
        *(_QWORD *)v26 = v65[0].i64[0];
        *(_QWORD *)(v26 + 8) = v23;
        *(_OWORD *)(v26 + 16) = v24;
        ++a3;
        v20 += 48;
        *(_OWORD *)(v26 + 32) = v25;
        v21 = xmmword_2260E5D70;
        if (v9 == (re::Allocator *)a3)
          goto LABEL_16;
      }
LABEL_37:
      *(_QWORD *)&v62 = 0;
      v66 = 0u;
      v67 = 0u;
      memset(v65, 0, sizeof(v65));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v47) = 136315906;
      *(uint64_t *)((char *)v12 + 4) = (uint64_t)"operator[]";
      WORD6(v47) = 1024;
      *(_DWORD *)((char *)v12 + 14) = 797;
      WORD1(v48) = 2048;
      *(uint64_t *)((char *)v12 + 20) = a3;
      WORD6(v48) = 2048;
      *(uint64_t *)((char *)v12 + 30) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      *(_QWORD *)&v62 = 0;
      v66 = 0u;
      v67 = 0u;
      memset(v65, 0, sizeof(v65));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v47) = 136315906;
      *(uint64_t *)((char *)v12 + 4) = (uint64_t)"operator[]";
      WORD6(v47) = 1024;
      *(_DWORD *)((char *)v12 + 14) = 468;
      WORD1(v48) = 2048;
      *(uint64_t *)((char *)v12 + 20) = a3;
      WORD6(v48) = 2048;
      *(uint64_t *)((char *)v12 + 30) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      *(_QWORD *)&v46 = 0;
      v66 = 0u;
      v67 = 0u;
      memset(v65, 0, sizeof(v65));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v62) = 136315906;
      *(uint64_t *)((char *)v12 + 228) = (uint64_t)"operator[]";
      WORD6(v62) = 1024;
      *(_DWORD *)((char *)v12 + 238) = 797;
      v63 = 2048;
      *(uint64_t *)((char *)v12 + 244) = a3;
      v64 = 2048;
      *(uint64_t *)((char *)v12 + 254) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      *(_QWORD *)&v46 = 0;
      v66 = 0u;
      v67 = 0u;
      memset(v65, 0, sizeof(v65));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v62) = 136315906;
      *(uint64_t *)((char *)v12 + 228) = (uint64_t)"operator[]";
      WORD6(v62) = 1024;
      *(_DWORD *)((char *)v12 + 238) = 468;
      v63 = 2048;
      *(uint64_t *)((char *)v12 + 244) = a3;
      v64 = 2048;
      *(uint64_t *)((char *)v12 + 254) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_16:
    v65[0].i64[0] = 0x270108FE20E3CD24;
    v65[0].i64[1] = (uint64_t)"RigHierarchySkeleton";
    *(_QWORD *)&v47 = v45;
    *((_QWORD *)&v47 + 1) = v44;
    *(_QWORD *)&v62 = v42;
    *((_QWORD *)&v62 + 1) = v41;
    *(_QWORD *)&v46 = v39;
    *((_QWORD *)&v46 + 1) = v38;
    re::Skeleton::init((uint64_t *)&v51, (uint64_t)a2, v65[0].i64, &v47, (uint64_t *)&v62, (unint64_t)&v46, (uint64_t)v34);
    if (!v34[0] && (_QWORD)v35)
    {
      if ((BYTE8(v35) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v35 + 40))();
      v35 = 0u;
      v36 = 0u;
    }
    re::StringID::destroyString((re::StringID *)v65);
    if (v37 && v38)
      (*(void (**)(void))(*(_QWORD *)v37 + 40))();
    v10 = v40;
    if (v40 && v41)
      v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v40 + 40))();
  }
  v27 = re::globalAllocators(v10);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 256, 8);
  re::SkeletalPoseJointDefinition::SkeletalPoseJointDefinition(v28, &v43, (const StringID *)&v51);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a4 + 24), v28);
  re::FixedArray<re::EvaluationSRT>::init<>((_QWORD *)a4, (uint64_t)a2, *(_QWORD *)(v28 + 192));

  if (v9)
  {
    v29 = 0;
    a2 = 0;
    v30 = (_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    while (1)
    {
      a3 = *((_QWORD *)this + 37);
      if (a3 <= (unint64_t)a2)
        break;
      a3 = *(_QWORD *)(a4 + 8);
      if (a3 <= (unint64_t)a2)
        goto LABEL_36;
      v31 = *((_QWORD *)this + 39) + v29;
      v32 = *(_QWORD *)(v31 + 24);
      *((_OWORD *)v30 - 1) = *(_OWORD *)(v31 + 8);
      *v30 = v32;
      v30 += 3;
      a2 = (re::Allocator *)((char *)a2 + 1);
      v29 += 160;
      if (v9 == a2)
        goto LABEL_32;
    }
LABEL_35:
    *(_QWORD *)&v62 = 0;
    v66 = 0u;
    v67 = 0u;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v47) = 136315906;
    *(uint64_t *)((char *)v12 + 4) = (uint64_t)"operator[]";
    WORD6(v47) = 1024;
    *(_DWORD *)((char *)v12 + 14) = 797;
    WORD1(v48) = 2048;
    *(uint64_t *)((char *)v12 + 20) = (uint64_t)a2;
    WORD6(v48) = 2048;
    *(uint64_t *)((char *)v12 + 30) = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_36:
    *(_QWORD *)&v62 = 0;
    v66 = 0u;
    v67 = 0u;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v47) = 136315906;
    *(uint64_t *)((char *)v12 + 4) = (uint64_t)"operator[]";
    WORD6(v47) = 1024;
    *(_DWORD *)((char *)v12 + 14) = 468;
    WORD1(v48) = 2048;
    *(uint64_t *)((char *)v12 + 20) = (uint64_t)a2;
    WORD6(v48) = 2048;
    *(uint64_t *)((char *)v12 + 30) = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_37;
  }
LABEL_32:
  re::Skeleton::~Skeleton((re::Skeleton *)&v51);
  return re::FixedArray<re::StringID>::deinit(&v43);
}

__n128 re::RigHierarchy::bindRigHierarchyPose@<Q0>(re::RigHierarchy *this@<X0>, re::EvaluationTree *a2@<X1>, re::EvaluationContextManager *a3@<X2>, const re::BindPoint *a4@<X3>, unsigned __int8 *a5@<X8>)
{
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  const re::BindPoint **v11;
  BOOL v12;
  _QWORD *v13;
  const re::BindPoint **v14;
  const re::BindPoint *v15;
  const char **v16;
  _QWORD *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const re::BindPoint *v22;
  _QWORD v25[2];
  _QWORD *v26[2];
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32[2];

  v8 = re::BindPoint::valueUntyped(a4);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 80);
    v11 = (const re::BindPoint **)(v10 + 192);
    v12 = v10 == 0;
    if (v10)
      v13 = (_QWORD *)(v10 + 200);
    else
      v13 = (_QWORD *)((char *)this + 232);
    if (v12)
      v14 = (const re::BindPoint **)((char *)this + 216);
    else
      v14 = v11;
    v22 = *v14;
    if (*v14)
    {
      v15 = 0;
      v16 = (const char **)(*v13 + 8);
      while (1)
      {
        v27.n128_u64[0] = 0x3F8000003F800000;
        v27.n128_u64[1] = 1065353216;
        v28 = 0;
        v29 = 0x3F80000000000000;
        v30 = 0;
        v31 = 0;
        re::EvaluationTree::createInputRegister(a2, &v27, v32);
        v27.n128_u64[0] = 0x3F8000003F800000;
        v27.n128_u64[1] = 1065353216;
        v28 = 0;
        v29 = 0x3F80000000000000;
        v30 = 0;
        v31 = 0;
        re::DynamicArray<re::EvaluationSRT>::add((re::EvaluationContextManager *)((char *)a3 + 328), v32);
        re::DynamicArray<re::Matrix3x3<float>>::add((re::EvaluationContextManager *)((char *)a3 + 688), (uint64_t)&v27);
        v17 = (_QWORD *)(*((_QWORD *)a3 + 43) - 1);
        v26[0] = a3;
        v26[1] = v17;
        re::makeSkeletalPoseJointBindNode(a4, v15, (uint64_t)&v27);
        re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(v26[0], (uint64_t)v26, &v27, 0);
        v18 = strlen(*v16);
        v25[0] = *v16;
        v25[1] = v18;
        re::RigHierarchy::setLocalSpaceJointTransform(this, (uint64_t)v25, (uint64_t *)v32, (uint64_t)a5);
        v19 = *a5;
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v27.n128_i64[1]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v27.n128_i64[1]);
        if (!v19)
          break;
        v15 = (const re::BindPoint *)((char *)v15 + 1);
        v16 += 2;
        if (v22 == v15)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      *a5 = 1;
    }
  }
  else
  {
    result = v27;
    v20 = v28;
    v21 = v29;
    *a5 = 0;
    *((_QWORD *)a5 + 1) = 5000;
    *((_QWORD *)a5 + 2) = &re::AnimationErrorCategory(void)::instance;
    *(__n128 *)(a5 + 24) = result;
    *((_QWORD *)a5 + 5) = v20;
    *((_QWORD *)a5 + 6) = v21;
  }
  return result;
}

uint64_t re::RigHierarchy::addJoint@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  size_t v8;
  _BOOL4 v9;
  re::DynamicString *v10;
  const char *v11;
  size_t v12;
  _BYTE *v13;
  __n128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  size_t v29;
  _anonymous_namespace_ *v30;
  const char *v31;
  size_t v32;
  size_t v33;
  _anonymous_namespace_ *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50[3];
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[38];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 24;
  v58 = 0uLL;
  v7 = a2[1];
  if (v7)
    v8 = (size_t)(v7 + 1);
  else
    v8 = 0;
  *((_QWORD *)&v57 + 1) = 0;
  re::DynamicString::setCapacity(&v57, v8);
  re::DynamicString::operator=((re::DynamicString *)&v57, (uint64_t)a2);
  v9 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v6, (uint64_t)&v57);
  if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v57 + 40))(v57, v58);
  if (v9)
  {
    v10 = *(re::DynamicString **)(a1 + 8);
    *(_QWORD *)&v56[16] = 0;
    *(_QWORD *)&v56[24] = 0;
    v11 = a2[1];
    if (v11)
      v12 = (size_t)(v11 + 1);
    else
      v12 = 0;
    *(_QWORD *)v56 = v10;
    *(_QWORD *)&v56[8] = 0;
    re::DynamicString::setCapacity(v56, v12);
    re::DynamicString::operator=((re::DynamicString *)v56, (uint64_t)a2);
    if ((v56[8] & 1) != 0)
      v13 = *(_BYTE **)&v56[16];
    else
      v13 = &v56[9];
    re::DynamicString::format(v10, (re::Allocator *)"Cannot add duplicate joint: %s", (re::DynamicString *)&v57, v13);
    v14 = (__n128)v57;
    v15 = v58;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1030;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(__n128 *)(a3 + 24) = v14;
    *(_OWORD *)(a3 + 40) = v15;
    result = *(_QWORD *)v56;
    if (*(_QWORD *)v56 && (v56[8] & 1) != 0)
    {
      v17 = *(_QWORD *)&v56[16];
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v17);
    }
  }
  else
  {
    *(_QWORD *)&v59 = 0;
    *(_QWORD *)&v58 = 0;
    v57 = 0uLL;
    DWORD2(v58) = 0;
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::add((_anonymous_namespace_ *)(a1 + 160), (uint64_t)&v57);
    re::DynamicArray<re::RigDataValue>::deinit((uint64_t)&v57);
    v18 = *(_QWORD *)(a1 + 192) + 40 * *(_QWORD *)(a1 + 176);
    v19 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(v18 - 40) = *(_QWORD *)(a1 + 8);
    v18 -= 40;
    re::DynamicArray<re::RigDataValue>::setCapacity((_QWORD *)v18, v19);
    ++*(_DWORD *)(v18 + 24);
    v20 = *(_QWORD *)(a1 + 136);
    re::DynamicArray<re::RigDataValue>::resize(*(_QWORD *)(a1 + 192) + 40 * *(_QWORD *)(a1 + 176) - 40, v20);
    if (v20)
    {
      v22 = 0;
      v23 = 0;
      v24 = 32;
      do
      {
        v25 = *(_QWORD *)(a1 + 192);
        v26 = *(_QWORD *)(a1 + 176) - 1;
        v27 = *(_QWORD *)(v25 + 40 * v26 + 16);
        if (v27 <= v23)
        {
          v51 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v56 = 136315906;
          *(_QWORD *)&v56[4] = "operator[]";
          *(_WORD *)&v56[12] = 1024;
          *(_DWORD *)&v56[14] = 789;
          *(_WORD *)&v56[18] = 2048;
          *(_QWORD *)&v56[20] = v23;
          *(_WORD *)&v56[28] = 2048;
          *(_QWORD *)&v56[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_49:
          v51 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v56 = 136315906;
          *(_QWORD *)&v56[4] = "operator[]";
          *(_WORD *)&v56[12] = 1024;
          *(_DWORD *)&v56[14] = 789;
          *(_WORD *)&v56[18] = 2048;
          *(_QWORD *)&v56[20] = v23;
          *(_WORD *)&v56[28] = 2048;
          *(_QWORD *)&v56[30] = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v27 = *(_QWORD *)(a1 + 136);
        if (v27 <= v23)
          goto LABEL_49;
        v21 = (_anonymous_namespace_ *)re::RigDataValue::init((re::RigDataValue *)(*(_QWORD *)(v25 + 40 * v26 + 32) + v22), *(re::Allocator **)(a1 + 8), *(const re::RigEnvironment **)a1, (const re::RigDataTypeClass *)(*(_QWORD *)(a1 + 152) + v24), *(re::EvaluationTree **)(a1 + 16));
        ++v23;
        v22 += 288;
        v24 += 96;
      }
      while (v20 != v23);
    }
    v28 = *a2;
    v29 = (size_t)a2[1];
    *(_QWORD *)&v57 = 0;
    *((_QWORD *)&v57 + 1) = &str_110;
    re::DynamicArray<re::StringID>::add((_QWORD *)(a1 + 200), (uint64_t *)&v57);
    re::StringID::destroyString((re::StringID *)&v57);
    v55 = *(_QWORD *)(a1 + 216) - 1;
    v53 = 0;
    v54 = 0;
    v31 = a2[1];
    if (v31)
      v32 = (size_t)(v31 + 1);
    else
      v32 = 0;
    v52 = 0;
    re::DynamicString::setCapacity(&v51, v32);
    re::DynamicString::operator=((re::DynamicString *)&v51, (uint64_t)a2);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>(v6, (re::DynamicString *)&v51, &v55);
    re::DynamicString::rfind((uint64_t)&v51, 47, v56);
    if (v56[0])
    {
      v33 = (v52 & 1) != 0 ? v52 >> 1 : v52 >> 1;
      re::DynamicString::substr((re::DynamicString *)&v51, *(_QWORD *)&v56[8] + 1, v33, (re::DynamicString *)&v57);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>(v6, (re::DynamicString *)&v57, &v55);
      if ((_QWORD)v57)
      {
        if ((BYTE8(v57) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v57 + 40))();
      }
    }
    v34 = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::add((_QWORD *)(a1 + 240), &re::RigHierarchyJointDescription::kInvalidParentIndex);
    v35 = *(_QWORD *)(a1 + 288);
    v36 = *(_QWORD *)(a1 + 296);
    if (v36 >= v35)
    {
      v37 = v36 + 1;
      if (v35 < v36 + 1)
      {
        if (*(_QWORD *)(a1 + 280))
        {
          v38 = 2 * v35;
          v39 = v35 == 0;
          v40 = 8;
          if (!v39)
            v40 = v38;
          if (v40 <= v37)
            v41 = v37;
          else
            v41 = v40;
          re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity((_QWORD *)(a1 + 280), v41);
        }
        else
        {
          re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity((_QWORD *)(a1 + 280), v37);
          ++*(_DWORD *)(a1 + 304);
        }
      }
      v36 = *(_QWORD *)(a1 + 296);
    }
    v42 = *(_QWORD *)(a1 + 312) + 160 * v36;
    *(_QWORD *)v42 = 0;
    *(_QWORD *)&v43 = -1;
    *((_QWORD *)&v43 + 1) = -1;
    *(_OWORD *)(v42 + 8) = v43;
    *(_OWORD *)(v42 + 24) = v43;
    *(_OWORD *)(v42 + 40) = v43;
    *(_OWORD *)(v42 + 56) = v43;
    *(_OWORD *)(v42 + 72) = v43;
    *(_OWORD *)(v42 + 88) = v43;
    *(_OWORD *)(v42 + 104) = v43;
    *(_OWORD *)(v42 + 120) = v43;
    *(_OWORD *)(v42 + 136) = v43;
    *(_QWORD *)(v42 + 152) = -1;
    ++*(_QWORD *)(a1 + 296);
    ++*(_DWORD *)(a1 + 304);
    v44 = *(_QWORD **)(a1 + 16);
    v57 = xmmword_2260E5F10;
    v58 = xmmword_2260E5F20;
    v59 = xmmword_2260E5F40;
    *(_DWORD *)v56 = 3;
    memset(&v56[8], 0, 24);
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v44 + 223), (uint64_t)v56);
    *(_QWORD *)v56 = v44[225] - 1;
    re::DynamicArray<unsigned long>::add(v44 + 16, v56);
    re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v44 + 56), (uint64_t)&v57);
    v45 = *(_QWORD *)(v44[20] + 8 * v44[18] - 8);
    v46 = *(_QWORD **)(a1 + 16);
    v57 = xmmword_2260E5F10;
    v58 = xmmword_2260E5F20;
    v59 = xmmword_2260E5F40;
    v60 = xmmword_2260E5D70;
    *(_DWORD *)v56 = 4;
    memset(&v56[8], 0, 24);
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v46 + 228), (uint64_t)v56);
    *(_QWORD *)v56 = v46[230] - 1;
    re::DynamicArray<unsigned long>::add(v46 + 21, v56);
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v46 + 61), (uint64_t)&v57);
    v47 = *(_QWORD *)(v46[25] + 8 * v46[23] - 8);
    v48 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)&v57 = 0x3F8000003F800000;
    *((_QWORD *)&v57 + 1) = 1065353216;
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0x3F80000000000000;
    v59 = 0uLL;
    re::EvaluationTree::createInputRegister(v48, (__n128 *)&v57, v50);
    re::RigHierarchyJointTransform::init((_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * *(_QWORD *)(a1 + 296) - 160), *(_QWORD **)(a1 + 16), v50, v45, v47);
    v49 = *(_QWORD **)(a1 + 16);
    v57 = xmmword_2260E5F10;
    v58 = xmmword_2260E5F20;
    v59 = xmmword_2260E5F40;
    v60 = xmmword_2260E5D70;
    *(_DWORD *)v56 = 4;
    memset(&v56[8], 0, 24);
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v49 + 228), (uint64_t)v56);
    *(_QWORD *)v56 = v49[230] - 1;
    re::DynamicArray<unsigned long>::add(v49 + 21, v56);
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v49 + 61), (uint64_t)&v57);
    *(_QWORD *)v56 = *(_QWORD *)(v49[25] + 8 * v49[23] - 8);
    re::DynamicArray<unsigned long>::add((_QWORD *)(a1 + 320), v56);
    *(_BYTE *)a3 = 1;
    result = (uint64_t)v51;
    if (v51 && (v52 & 1) != 0)
    {
      v17 = v53;
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v17);
    }
  }
  return result;
}

BOOL re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  v5 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 56 * v6 + 16, a2))
      {
        v6 = *(_DWORD *)(v7 + 56 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v5 != 0x7FFFFFFF;
      }
      v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

void re::DynamicArray<re::RigDataValue>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 288 * a2;
    v9 = a2;
    do
    {
      re::RigDataValue::~RigDataValue((re::RigDataValue *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 288;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigDataValue>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 288 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_BYTE *)(v7 + 32) = 0;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = &str_110;
        *(_QWORD *)(v7 + 88) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_DWORD *)(v7 + 80) = 0;
        *(_BYTE *)(v7 + 96) = 0;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_QWORD *)(v7 + 176) = -1;
        *(_QWORD *)(v7 + 184) = 0;
        *(_QWORD *)(v7 + 216) = 0;
        *(_QWORD *)(v7 + 224) = 0;
        *(_QWORD *)(v7 + 272) = 0;
        *(_DWORD *)(v7 + 264) = 0;
        *(_QWORD *)(v7 + 232) = &str_110;
        *(_QWORD *)(v7 + 240) = 0;
        v6 += 288;
        *(_QWORD *)(v7 + 248) = 0;
        *(_QWORD *)(v7 + 256) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::RigHierarchy::removeJoint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  size_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  re::DynamicString *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  re::DynamicString *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a1 + 24;
  v34 = 0;
  v35 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v33 + 1) = 0;
  re::DynamicString::setCapacity(&v33, v8);
  re::DynamicString::operator=((re::DynamicString *)&v33, a2);
  v9 = (_QWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v33);
  v10 = (_anonymous_namespace_ *)v33;
  if ((_QWORD)v33 && (BYTE8(v33) & 1) != 0)
    v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 40))();
  if (v9)
  {
    v34 = 0;
    v35 = 0;
    v11 = *(_QWORD *)(a2 + 8);
    if (v11)
      v12 = v11 + 1;
    else
      v12 = 0;
    re::DynamicString::setCapacity(&v33, v12);
    re::DynamicString::operator=((re::DynamicString *)&v33, a2);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v6, (uint64_t)&v33);
    result = v33;
    if ((_QWORD)v33 && (BYTE8(v33) & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v33 + 40))();
    v14 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = (int *)(*(_QWORD *)(a1 + 40) + 8);
      while (1)
      {
        v17 = *v16;
        v16 += 14;
        if (v17 < 0)
          break;
        if (v14 == ++v15)
        {
          LODWORD(v15) = *(_DWORD *)(a1 + 56);
          break;
        }
      }
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if ((_DWORD)v14 != (_DWORD)v15)
    {
      v25 = v15;
      v26 = *(_QWORD *)(a1 + 40);
      while (*(_QWORD *)(v26 + 56 * v25 + 48) != *v9)
      {
        if (v14 <= (int)v15 + 1)
          v27 = v15 + 1;
        else
          v27 = *(_DWORD *)(a1 + 56);
        while (1)
        {
          v25 = (v15 + 1);
          if (v27 - 1 == (_DWORD)v15)
            break;
          LODWORD(v15) = v15 + 1;
          v28 = v25;
          if ((*(_DWORD *)(v26 + 56 * v25 + 8) & 0x80000000) != 0)
            goto LABEL_39;
        }
        v28 = v27;
LABEL_39:
        LODWORD(v15) = v28;
        if ((_DWORD)v14 == v28)
          goto LABEL_42;
      }
      result = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v6, v26 + 56 * v25 + 16);
    }
LABEL_42:
    *(_BYTE *)a3 = 1;
  }
  else
  {
    v18 = *(re::DynamicString **)(a1 + 8);
    v31 = 0;
    v32 = 0;
    v19 = *(_QWORD *)(a2 + 8);
    if (v19)
      v20 = v19 + 1;
    else
      v20 = 0;
    v29 = v18;
    v30 = 0;
    re::DynamicString::setCapacity(&v29, v20);
    re::DynamicString::operator=((re::DynamicString *)&v29, a2);
    if ((v30 & 1) != 0)
      v21 = v31;
    else
      v21 = (char *)&v30 + 1;
    re::DynamicString::format(v18, (re::Allocator *)"Cannot remove unknown joint: %s", (re::DynamicString *)&v33, v21);
    v22 = v33;
    v23 = v34;
    v24 = v35;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v22;
    *(_QWORD *)(a3 + 40) = v23;
    *(_QWORD *)(a3 + 48) = v24;
    result = (uint64_t)v29;
    if (v29 && (v30 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v29 + 40))();
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  int v21;
  char v22;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = v4 % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::DynamicString::operator==(v9 + 56 * v7 + 16, a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 56 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::DynamicString::operator==(v9 + 56 * v7 + 16, a2))
      {
        *(_DWORD *)(v9 + 56 * v10 + 8) = *(_DWORD *)(v9 + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 56 * v7;
  v16 = *(_DWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  if (v16 < 0)
  {
    *v15 = v14 & 0x7FFFFFFF;
    v17 = v12 + 56 * v7;
    v20 = *(_QWORD *)(v17 + 16);
    v19 = (_OWORD *)(v17 + 16);
    v18 = v20;
    if (v20)
    {
      if ((*(_BYTE *)(v12 + 56 * v7 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(v12 + 56 * v7 + 32));
      *v19 = 0u;
      v19[1] = 0u;
    }
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 56 * v7 + 8);
  }
  v21 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 56 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v21 + 1;
  return 1;
}

uint64_t re::RigHierarchy::jointParent@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  _anonymous_namespace_ *v15;
  size_t v16;
  BOOL v17;
  re::DynamicString *v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[38];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)a1 + 24;
  v32 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v31 + 1) = 0;
  re::DynamicString::setCapacity(&v31, v10);
  re::DynamicString::operator=((re::DynamicString *)&v31, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v31);
  result = v31;
  if ((_QWORD)v31 && (BYTE8(v31) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v31 + 40))();
  if (v11)
  {
    v13 = *v11;
    v14 = *((_QWORD *)a1 + 32);
    if (v14 <= v13)
    {
LABEL_36:
      v25 = 0;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v30 = 136315906;
      *(_QWORD *)&v30[4] = "operator[]";
      *(_WORD *)&v30[12] = 1024;
      *(_DWORD *)&v30[14] = 797;
      *(_WORD *)&v30[18] = 2048;
      *(_QWORD *)&v30[20] = v13;
      *(_WORD *)&v30[28] = 2048;
      *(_QWORD *)&v30[30] = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v25 = 0;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v30 = 136315906;
      *(_QWORD *)&v30[4] = "operator[]";
      *(_WORD *)&v30[12] = 1024;
      *(_DWORD *)&v30[14] = 797;
      *(_WORD *)&v30[18] = 2048;
      *(_QWORD *)&v30[20] = v14;
      *(_WORD *)&v30[28] = 2048;
      *(_QWORD *)&v30[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = *(_QWORD *)(*((_QWORD *)a1 + 34) + 8 * v13);
    if (v14 == -1)
    {
LABEL_21:
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      if (a3)
      {
        while (1)
        {
          v13 = *((_QWORD *)a1 + 27);
          if (v13 <= v14)
            break;
          v15 = (_anonymous_namespace_ *)strlen(*(const char **)(*((_QWORD *)a1 + 29) + 16 * v14 + 8));
          *(_QWORD *)&v31 = *(_QWORD *)(*((_QWORD *)a1 + 29) + 16 * v14 + 8);
          *((_QWORD *)&v31 + 1) = v15;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          if (v15)
            v16 = (size_t)v15 + 1;
          else
            v16 = 0;
          re::DynamicString::setCapacity(&v25, v16);
          re::DynamicString::operator=((re::DynamicString *)&v25, (uint64_t)&v31);
          v17 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v8, (uint64_t)&v25);
          result = (uint64_t)v25;
          if (v25)
          {
            if ((v26 & 1) != 0)
              result = (*(uint64_t (**)(void))(*v25 + 40))();
          }
          if (v17)
            goto LABEL_31;
          v13 = *((_QWORD *)a1 + 32);
          if (v13 <= v14)
            goto LABEL_35;
          v14 = *(_QWORD *)(*((_QWORD *)a1 + 34) + 8 * v14);
          if (v14 == -1)
            goto LABEL_21;
        }
        v29 = 0;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v31 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v30 = 136315906;
        *(_QWORD *)&v30[4] = "operator[]";
        *(_WORD *)&v30[12] = 1024;
        *(_DWORD *)&v30[14] = 797;
        *(_WORD *)&v30[18] = 2048;
        *(_QWORD *)&v30[20] = v14;
        *(_WORD *)&v30[28] = 2048;
        *(_QWORD *)&v30[30] = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        v25 = 0;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v31 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v30 = 136315906;
        *(_QWORD *)&v30[4] = "operator[]";
        *(_WORD *)&v30[12] = 1024;
        *(_DWORD *)&v30[14] = 797;
        *(_WORD *)&v30[18] = 2048;
        *(_QWORD *)&v30[20] = v14;
        *(_WORD *)&v30[28] = 2048;
        *(_QWORD *)&v30[30] = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_36;
      }
LABEL_31:
      v8 = *((_QWORD *)a1 + 27);
      if (v8 <= v14)
        goto LABEL_37;
      v24 = *((_QWORD *)a1 + 29) + 16 * v14;
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v24;
    }
  }
  else
  {
    v18 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v30[16] = 0;
    *(_QWORD *)&v30[24] = 0;
    v19 = *(_QWORD *)(a2 + 8);
    if (v19)
      v20 = v19 + 1;
    else
      v20 = 0;
    *(_QWORD *)v30 = v18;
    *(_QWORD *)&v30[8] = 0;
    re::DynamicString::setCapacity(v30, v20);
    re::DynamicString::operator=((re::DynamicString *)v30, a2);
    if ((v30[8] & 1) != 0)
      v21 = *(_BYTE **)&v30[16];
    else
      v21 = &v30[9];
    re::DynamicString::format(v18, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v31, v21);
    v22 = v31;
    v23 = v32;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v22;
    *(_OWORD *)(a4 + 40) = v23;
    result = *(_QWORD *)v30;
    if (*(_QWORD *)v30 && (v30[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v30 + 40))();
  }
  return result;
}

unint64_t re::RigHierarchy::getLocalSpaceJointTransform@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[8];
  __int128 v11;
  unint64_t v12;
  char v13;

  re::RigHierarchy::getLocalSpaceJointSRT(a1, a2, (uint64_t)v10);
  if (v10[0])
  {
    result = re::EvaluationTree::constructMatrix4x4(*((_QWORD **)a1 + 2), v11, *((uint64_t *)&v11 + 1), v12);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = result;
  }
  else
  {
    v6 = v11;
    re::DynamicString::DynamicString((re::DynamicString *)&v7, (const re::DynamicString *)&v12);
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 48) = v9;
    *(_OWORD *)(a3 + 32) = v8;
    result = v12;
    if (v12)
    {
      if ((v13 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
    }
  }
  return result;
}

uint64_t re::RigHierarchy::getLocalSpaceJointSRT@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v8);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v22);
  result = v22;
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 797;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v11;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *((_QWORD *)a1 + 39) + 160 * v11;
    v14 = *(_QWORD *)(v13 + 24);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v13 + 8);
    *(_QWORD *)(a3 + 24) = v14;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v19;
    *(_OWORD *)(a3 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setLocalSpaceJointTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t Scale;
  _QWORD *v16;
  unint64_t Rotation;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  re::DynamicString *v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[38];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 24;
  v31 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v30 + 1) = 0;
  re::DynamicString::setCapacity(&v30, v10);
  re::DynamicString::operator=((re::DynamicString *)&v30, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v30);
  if ((_QWORD)v30 && (BYTE8(v30) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *(_QWORD *)(a1 + 296);
    if (v13 <= *v11)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 789;
      *(_WORD *)&v29[18] = 2048;
      *(_QWORD *)&v29[20] = v12;
      *(_WORD *)&v29[28] = 2048;
      *(_QWORD *)&v29[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * v12);
      Scale = re::EvaluationTree::extractScale(*(_QWORD **)(a1 + 16), a3);
      re::RigHierarchyJointTransform::setLocalSpaceJointScale(v14, Scale);
      v12 = *v11;
      v13 = *(_QWORD *)(a1 + 296);
      if (v13 > *v11)
      {
        v16 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * v12);
        Rotation = re::EvaluationTree::extractRotation(*(_QWORD **)(a1 + 16), a3);
        re::RigHierarchyJointTransform::setLocalSpaceJointRotation(v16, Rotation);
        v12 = *v11;
        v11 = *(unint64_t **)(a1 + 296);
        if ((unint64_t)v11 > v12)
        {
          v18 = *(_QWORD *)(a1 + 16);
          v19 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * v12);
          v20 = v18 + 1664;
          LODWORD(v30) = 37;
          v31 = 0uLL;
          *((_QWORD *)&v30 + 1) = 0;
          re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v18 + 1944), (uint64_t)&v30);
          v21 = *(_QWORD *)(v18 + 1960) - 1;
          *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v20, v21) + 8) = a3;
          result = re::RigHierarchyJointTransform::setLocalSpaceJointTranslation(v19, v21);
          *(_BYTE *)a4 = 1;
          return result;
        }
LABEL_24:
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(_QWORD *)&v29[20] = v12;
        *(_WORD *)&v29[28] = 2048;
        *(_QWORD *)&v29[30] = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 789;
    *(_WORD *)&v29[18] = 2048;
    *(_QWORD *)&v29[20] = v12;
    *(_WORD *)&v29[28] = 2048;
    *(_QWORD *)&v29[30] = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v23 = *(re::DynamicString **)(a1 + 8);
  *(_QWORD *)&v29[16] = 0;
  *(_QWORD *)&v29[24] = 0;
  v24 = *(_QWORD *)(a2 + 8);
  if (v24)
    v25 = v24 + 1;
  else
    v25 = 0;
  *(_QWORD *)v29 = v23;
  *(_QWORD *)&v29[8] = 0;
  re::DynamicString::setCapacity(v29, v25);
  re::DynamicString::operator=((re::DynamicString *)v29, a2);
  if ((v29[8] & 1) != 0)
    v26 = *(_BYTE **)&v29[16];
  else
    v26 = &v29[9];
  re::DynamicString::format(v23, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v30, v26);
  v27 = v30;
  v28 = v31;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 1000;
  *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a4 + 24) = v27;
  *(_OWORD *)(a4 + 40) = v28;
  result = *(_QWORD *)v29;
  if (*(_QWORD *)v29)
  {
    if ((v29[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v29 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getModelSpaceJointTransform@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 80);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setModelSpaceJointTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t Scale;
  _QWORD *v16;
  unint64_t Rotation;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  re::DynamicString *v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[38];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 24;
  v31 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v30 + 1) = 0;
  re::DynamicString::setCapacity(&v30, v10);
  re::DynamicString::operator=((re::DynamicString *)&v30, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v30);
  if ((_QWORD)v30 && (BYTE8(v30) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *(_QWORD *)(a1 + 296);
    if (v13 <= *v11)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 789;
      *(_WORD *)&v29[18] = 2048;
      *(_QWORD *)&v29[20] = v12;
      *(_WORD *)&v29[28] = 2048;
      *(_QWORD *)&v29[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * v12);
      Scale = re::EvaluationTree::extractScale(*(_QWORD **)(a1 + 16), a3);
      re::RigHierarchyJointTransform::setModelSpaceJointScale(v14, Scale);
      v12 = *v11;
      v13 = *(_QWORD *)(a1 + 296);
      if (v13 > *v11)
      {
        v16 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * v12);
        Rotation = re::EvaluationTree::extractRotation(*(_QWORD **)(a1 + 16), a3);
        re::RigHierarchyJointTransform::setModelSpaceJointRotation(v16, Rotation);
        v12 = *v11;
        v11 = *(unint64_t **)(a1 + 296);
        if ((unint64_t)v11 > v12)
        {
          v18 = *(_QWORD *)(a1 + 16);
          v19 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 160 * v12);
          v20 = v18 + 1664;
          LODWORD(v30) = 37;
          v31 = 0uLL;
          *((_QWORD *)&v30 + 1) = 0;
          re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v18 + 1944), (uint64_t)&v30);
          v21 = *(_QWORD *)(v18 + 1960) - 1;
          *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v20, v21) + 8) = a3;
          result = re::RigHierarchyJointTransform::setModelSpaceJointTranslation(v19, v21);
          *(_BYTE *)a4 = 1;
          return result;
        }
LABEL_24:
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(_QWORD *)&v29[20] = v12;
        *(_WORD *)&v29[28] = 2048;
        *(_QWORD *)&v29[30] = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 789;
    *(_WORD *)&v29[18] = 2048;
    *(_QWORD *)&v29[20] = v12;
    *(_WORD *)&v29[28] = 2048;
    *(_QWORD *)&v29[30] = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v23 = *(re::DynamicString **)(a1 + 8);
  *(_QWORD *)&v29[16] = 0;
  *(_QWORD *)&v29[24] = 0;
  v24 = *(_QWORD *)(a2 + 8);
  if (v24)
    v25 = v24 + 1;
  else
    v25 = 0;
  *(_QWORD *)v29 = v23;
  *(_QWORD *)&v29[8] = 0;
  re::DynamicString::setCapacity(v29, v25);
  re::DynamicString::operator=((re::DynamicString *)v29, a2);
  if ((v29[8] & 1) != 0)
    v26 = *(_BYTE **)&v29[16];
  else
    v26 = &v29[9];
  re::DynamicString::format(v23, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v30, v26);
  v27 = v30;
  v28 = v31;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 1000;
  *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a4 + 24) = v27;
  *(_OWORD *)(a4 + 40) = v28;
  result = *(_QWORD *)v29;
  if (*(_QWORD *)v29)
  {
    if ((v29[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v29 + 40))();
  }
  return result;
}

void re::RigHierarchy::setJointParent(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  re::DynamicString *v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  re::DynamicString *v22;
  uint64_t v23;
  size_t v24;
  _BYTE *v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[38];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v30 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v29 + 1) = 0;
  re::DynamicString::setCapacity(&v29, v10);
  re::DynamicString::operator=((re::DynamicString *)&v29, a2);
  v11 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v29);
  v12 = (_anonymous_namespace_ *)v29;
  if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
    v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v29 + 40))();
  if (v11)
  {
    v30 = 0uLL;
    v13 = *(_QWORD *)(a3 + 8);
    if (v13)
      v14 = v13 + 1;
    else
      v14 = 0;
    re::DynamicString::setCapacity(&v29, v14);
    re::DynamicString::operator=((re::DynamicString *)&v29, a3);
    v15 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v29);
    if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v29 + 40))();
    if (v15)
    {
      v16 = *(_QWORD *)v11;
      v17 = *((_QWORD *)a1 + 32);
      if (v17 <= *(_QWORD *)v11)
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v28 = 136315906;
        *(_QWORD *)&v28[4] = "operator[]";
        *(_WORD *)&v28[12] = 1024;
        *(_DWORD *)&v28[14] = 789;
        *(_WORD *)&v28[18] = 2048;
        *(_QWORD *)&v28[20] = v16;
        *(_WORD *)&v28[28] = 2048;
        *(_QWORD *)&v28[30] = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)a1 + 34) + 8 * v16) = *(_QWORD *)v15;
        v11 = *(_QWORD *)v11;
        v16 = *((_QWORD *)a1 + 37);
        if (v16 > v11)
        {
          v15 = *(_QWORD *)v15;
          if (v16 > v15)
          {
            re::RigHierarchyJointTransform::setParentTransform((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11), (_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v15));
            *(_BYTE *)a4 = 1;
            return;
          }
LABEL_39:
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v29 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v28 = 136315906;
          *(_QWORD *)&v28[4] = "operator[]";
          *(_WORD *)&v28[12] = 1024;
          *(_DWORD *)&v28[14] = 789;
          *(_WORD *)&v28[18] = 2048;
          *(_QWORD *)&v28[20] = v15;
          *(_WORD *)&v28[28] = 2048;
          *(_QWORD *)&v28[30] = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v29 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v28 = 136315906;
      *(_QWORD *)&v28[4] = "operator[]";
      *(_WORD *)&v28[12] = 1024;
      *(_DWORD *)&v28[14] = 789;
      *(_WORD *)&v28[18] = 2048;
      *(_QWORD *)&v28[20] = v11;
      *(_WORD *)&v28[28] = 2048;
      *(_QWORD *)&v28[30] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_39;
    }
    v22 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v28[16] = 0;
    *(_QWORD *)&v28[24] = 0;
    v23 = *(_QWORD *)(a3 + 8);
    if (v23)
      v24 = v23 + 1;
    else
      v24 = 0;
    *(_QWORD *)v28 = v22;
    *(_QWORD *)&v28[8] = 0;
    re::DynamicString::setCapacity(v28, v24);
    re::DynamicString::operator=((re::DynamicString *)v28, a3);
    if ((v28[8] & 1) != 0)
      v25 = *(_BYTE **)&v28[16];
    else
      v25 = &v28[9];
    re::DynamicString::format(v22, (re::Allocator *)"Unknown joint parent name: %s", (re::DynamicString *)&v29, v25);
  }
  else
  {
    v18 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v28[16] = 0;
    *(_QWORD *)&v28[24] = 0;
    v19 = *(_QWORD *)(a2 + 8);
    if (v19)
      v20 = v19 + 1;
    else
      v20 = 0;
    *(_QWORD *)v28 = v18;
    *(_QWORD *)&v28[8] = 0;
    re::DynamicString::setCapacity(v28, v20);
    re::DynamicString::operator=((re::DynamicString *)v28, a2);
    if ((v28[8] & 1) != 0)
      v21 = *(_BYTE **)&v28[16];
    else
      v21 = &v28[9];
    re::DynamicString::format(v18, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v29, v21);
  }
  v26 = v29;
  v27 = v30;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 1000;
  *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a4 + 24) = v26;
  *(_OWORD *)(a4 + 40) = v27;
  if (*(_QWORD *)v28)
  {
    if ((v28[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v28 + 40))();
  }
}

void re::RigHierarchy::clearJointParent(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  re::DynamicString *v12;
  uint64_t v13;
  size_t v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[38];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v20 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v19 + 1) = 0;
  re::DynamicString::setCapacity(&v19, v8);
  re::DynamicString::operator=((re::DynamicString *)&v19, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v19);
  if ((_QWORD)v19 && (BYTE8(v19) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  if (v9)
  {
    v10 = *v9;
    v11 = *((_QWORD *)a1 + 32);
    if (v11 <= *v9)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v18 = 136315906;
      *(_QWORD *)&v18[4] = "operator[]";
      *(_WORD *)&v18[12] = 1024;
      *(_DWORD *)&v18[14] = 789;
      *(_WORD *)&v18[18] = 2048;
      *(_QWORD *)&v18[20] = v10;
      *(_WORD *)&v18[28] = 2048;
      *(_QWORD *)&v18[30] = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)a1 + 34) + 8 * v10) = -1;
      v10 = *v9;
      v9 = (unint64_t *)*((_QWORD *)a1 + 37);
      if ((unint64_t)v9 > v10)
      {
        re::RigHierarchyJointTransform::setParentTransform((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v10), 0);
        *(_BYTE *)a3 = 1;
        return;
      }
    }
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v18 = 136315906;
    *(_QWORD *)&v18[4] = "operator[]";
    *(_WORD *)&v18[12] = 1024;
    *(_DWORD *)&v18[14] = 789;
    *(_WORD *)&v18[18] = 2048;
    *(_QWORD *)&v18[20] = v10;
    *(_WORD *)&v18[28] = 2048;
    *(_QWORD *)&v18[30] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = (re::DynamicString *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v18[16] = 0;
  *(_QWORD *)&v18[24] = 0;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    v14 = v13 + 1;
  else
    v14 = 0;
  *(_QWORD *)v18 = v12;
  *(_QWORD *)&v18[8] = 0;
  re::DynamicString::setCapacity(v18, v14);
  re::DynamicString::operator=((re::DynamicString *)v18, a2);
  if ((v18[8] & 1) != 0)
    v15 = *(_BYTE **)&v18[16];
  else
    v15 = &v18[9];
  re::DynamicString::format(v12, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v19, v15);
  v16 = v19;
  v17 = v20;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 1000;
  *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v17;
  if (*(_QWORD *)v18)
  {
    if ((v18[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v18 + 40))();
  }
}

uint64_t re::RigHierarchy::getLocalSpaceJointScale@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getLocalSpaceJointRotation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 16);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getLocalSpaceJointTranslation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 24);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setLocalSpaceJointScale@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= v12)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = re::RigHierarchyJointTransform::setLocalSpaceJointScale((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3);
    *(_BYTE *)a4 = 1;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setLocalSpaceJointRotation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= v12)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = re::RigHierarchyJointTransform::setLocalSpaceJointRotation((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3);
    *(_BYTE *)a4 = 1;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setLocalSpaceJointTranslation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= v12)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = re::RigHierarchyJointTransform::setLocalSpaceJointTranslation((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3);
    *(_BYTE *)a4 = 1;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getModelSpaceJointScale@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 32);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getModelSpaceJointRotation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 40);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getModelSpaceJointTranslation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[38];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)a1 + 24;
  v22 = 0uLL;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v8 = v7 + 1;
  else
    v8 = 0;
  *((_QWORD *)&v21 + 1) = 0;
  re::DynamicString::setCapacity(&v21, v8);
  re::DynamicString::operator=((re::DynamicString *)&v21, a2);
  v9 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v6, (uint64_t)&v21);
  result = v21;
  if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
  if (v9)
  {
    v11 = *v9;
    v12 = *((_QWORD *)a1 + 37);
    if (v12 <= v11)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v20 = 136315906;
      *(_QWORD *)&v20[4] = "operator[]";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 797;
      *(_WORD *)&v20[18] = 2048;
      *(_QWORD *)&v20[20] = v11;
      *(_WORD *)&v20[28] = 2048;
      *(_QWORD *)&v20[30] = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v11 + 48);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v20[16] = 0;
    *(_QWORD *)&v20[24] = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      v16 = v15 + 1;
    else
      v16 = 0;
    *(_QWORD *)v20 = v14;
    *(_QWORD *)&v20[8] = 0;
    re::DynamicString::setCapacity(v20, v16);
    re::DynamicString::operator=((re::DynamicString *)v20, a2);
    if ((v20[8] & 1) != 0)
      v17 = *(_BYTE **)&v20[16];
    else
      v17 = &v20[9];
    re::DynamicString::format(v14, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v21, v17);
    v18 = v21;
    v19 = v22;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1000;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = v19;
    result = *(_QWORD *)v20;
    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setModelSpaceJointScale@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= v12)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = re::RigHierarchyJointTransform::setModelSpaceJointScale((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3);
    *(_BYTE *)a4 = 1;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setModelSpaceJointRotation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= v12)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = re::RigHierarchyJointTransform::setModelSpaceJointRotation((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3);
    *(_BYTE *)a4 = 1;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::setModelSpaceJointTranslation@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  re::DynamicString *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[38];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)a1 + 24;
  v23 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    v10 = v9 + 1;
  else
    v10 = 0;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, v10);
  re::DynamicString::operator=((re::DynamicString *)&v22, a2);
  v11 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8, (uint64_t)&v22);
  if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  if (v11)
  {
    v12 = *v11;
    v13 = *((_QWORD *)a1 + 37);
    if (v13 <= v12)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)&v21[4] = "operator[]";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 789;
      *(_WORD *)&v21[18] = 2048;
      *(_QWORD *)&v21[20] = v12;
      *(_WORD *)&v21[28] = 2048;
      *(_QWORD *)&v21[30] = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = re::RigHierarchyJointTransform::setModelSpaceJointTranslation((_QWORD *)(*((_QWORD *)a1 + 39) + 160 * v12), a3);
    *(_BYTE *)a4 = 1;
  }
  else
  {
    v15 = (re::DynamicString *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v21[16] = 0;
    *(_QWORD *)&v21[24] = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_QWORD *)v21 = v15;
    *(_QWORD *)&v21[8] = 0;
    re::DynamicString::setCapacity(v21, v17);
    re::DynamicString::operator=((re::DynamicString *)v21, a2);
    if ((v21[8] & 1) != 0)
      v18 = *(_BYTE **)&v21[16];
    else
      v18 = &v21[9];
    re::DynamicString::format(v15, (re::Allocator *)"Unknown joint name: %s", (re::DynamicString *)&v22, v18);
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1000;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    result = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (v21[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v21 + 40))();
  }
  return result;
}

uint64_t re::RigHierarchy::getBindPoseHierarchy@<X0>(re::RigHierarchy *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  *(_OWORD *)(a3 + 44) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_QWORD *)(a3 + 60) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 108) = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  v4 = a3 + 280;
  *(_QWORD *)(a3 + 352) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_DWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_DWORD *)(a3 + 344) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  re::RigHierarchy::jointDescription(this, a2, &v10);
  v8 = v11;
  re::RigHierarchy::init(a3, v5, v6, v7, v12, v11);
  result = v10;
  if (v10)
  {
    if (v8)
      return (*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
  }
  return result;
}

void re::Skeleton::~Skeleton(re::Skeleton *this)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14);
  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 13), v2.n128_f64[0]);
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    if (*((_QWORD *)this + 9))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 10), v2);
      *((_QWORD *)this + 9) = 0;
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7), v2);
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 2);
  re::StringID::destroyString(this);
}

__n128 re::DynamicArray<re::EvaluationSRT>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::EvaluationSRT>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (__n128 *)(*((_QWORD *)this + 4) + 24 * v4);
  result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *v5 = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationSRT>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::EvaluationSRT>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::EvaluationSRT>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

unint64_t re::Hash<re::DynamicString>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 1) != 0)
    v4 = v3 >> 1;
  else
    v4 = v3 >> 1;
  if (!v4)
    return 0;
  v5 = a2 + 9;
  v6 = *(_QWORD *)(a2 + 16);
  if ((v3 & 1) != 0)
    v7 = v6;
  else
    v7 = v5;
  MurmurHash3_x64_128(v7, v4, 0, v9);
  return (v9[1] + (v9[0] << 6) + (v9[0] >> 2) - 0x61C8864680B583E9) ^ v9[0];
}

_QWORD *re::DynamicArray<re::StringID>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::StringID>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::StringID>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::decomposeScaleRotationTranslation<float>(uint64_t result, int32x4_t *a2, _QWORD *a3, _OWORD *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  unsigned __int32 v42;
  float v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float32_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float v67;
  float v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;

  *a4 = *(_OWORD *)(result + 48);
  v4 = *(float32x4_t *)(result + 16);
  v5 = *(float32x4_t *)(result + 32);
  v6 = vmulq_f32(*(float32x4_t *)result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL)));
  v7 = -1.0;
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0] > 0.0)v7 = 1.0;
  v8 = vmulq_f32(*(float32x4_t *)result, *(float32x4_t *)result);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  v10 = vmulq_f32(v4, v4);
  v9.f32[0] = sqrtf(v9.f32[0]);
  v11 = vmulq_f32(v5, v5);
  v9.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v9.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v12 = (int32x4_t)vmulq_n_f32(v9, v7);
  *a2 = v12;
  v13 = v12.i64[1];
  v14 = (float32x4_t)vdupq_laneq_s32(v12, 2);
  v15 = v12.i64[0];
  v16 = vdivq_f32(*(float32x4_t *)result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 0));
  v17 = vdivq_f32(*(float32x4_t *)(result + 16), (float32x4_t)vdupq_lane_s32((int32x2_t)((__int128)__PAIR128__(v13, v15) >> 32), 0));
  v18 = (int32x4_t)vmulq_f32(v16, v16);
  v19 = vdivq_f32(*(float32x4_t *)(result + 32), v14);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20)));
  v22 = vmulq_n_f32(v16, vmul_f32(v21, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v21, v21))).f32[0]);
  v23 = vmulq_f32(v22, v17);
  v24 = vmulq_f32(v22, v22);
  v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)));
  v26 = vsubq_f32(v17, vmulq_n_f32(v22, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))), v25).f32[0]));
  v27 = (int32x4_t)vmulq_f32(v26, v26);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
  v28 = vmulq_n_f32(v26, vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
  v29 = vmulq_f32(v22, v19);
  v30 = vmulq_n_f32(v22, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))), v25).f32[0]);
  v31 = vmulq_f32(v19, v28);
  v32 = vsubq_f32(v19, v30);
  v33 = vmulq_f32(v28, v28);
  v34 = vsubq_f32(v32, vmulq_n_f32(v28, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)))).f32[0]));
  v35 = (int32x4_t)vmulq_f32(v34, v34);
  v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
  *(float32x2_t *)v33.f32 = vrsqrte_f32((float32x2_t)v35.u32[0]);
  *(float32x2_t *)v33.f32 = vmul_f32(*(float32x2_t *)v33.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)));
  v36 = vmulq_n_f32(v34, vmul_f32(*(float32x2_t *)v33.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32))).f32[0]);
  v37 = (float)(v22.f32[0] + v28.f32[1]) + v36.f32[2];
  if (v37 >= 0.0)
  {
    v47 = sqrtf(v37 + 1.0);
    v48 = v47 + v47;
    v49 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47));
    v50 = vmul_f32(v49, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47), v49));
    v51.i32[0] = vmul_f32(v50, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47), v50)).u32[0];
    v43 = vmuls_lane_f32(v51.f32[0], (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), v36), 1);
    v44 = vmuls_n_f32(vsubq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2)).f32[0], v51.f32[0]);
    v52.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), *(float32x2_t *)v28.f32).u32[0];
    v52.f32[1] = v48;
    v51.i32[1] = 0.25;
    v53 = vmul_f32(v52, v51);
  }
  else
  {
    if (v22.f32[0] >= v28.f32[1] && v22.f32[0] >= v36.f32[2])
    {
      v38 = sqrtf(v22.f32[0] + (float)((float)(1.0 - v28.f32[1]) - v36.f32[2]));
      *(float *)&v39 = v38 + v38;
      v40 = vrecpe_f32((float32x2_t)v39);
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
      v42 = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
      v43 = *(float *)&v39 * 0.25;
      v44 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), v28).f32[0], *(float *)&v42);
      v45 = (float32x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v28).u64[0];
      v28.i32[0] = vadd_f32(v45, *(float32x2_t *)v36.f32).u32[0];
      v46 = vsub_f32(v45, *(float32x2_t *)v36.f32);
LABEL_11:
      v28.i32[1] = v46.i32[1];
      v53 = vmul_n_f32(*(float32x2_t *)v28.f32, *(float *)&v42);
      goto LABEL_12;
    }
    v54 = 1.0 - v22.f32[0];
    if (v28.f32[1] >= v36.f32[2])
    {
      v67 = sqrtf(v28.f32[1] + (float)(v54 - v36.f32[2]));
      v68 = v67 + v67;
      v69 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67));
      v70 = vmul_f32(v69, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67), v69));
      v42 = vmul_f32(v70, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67), v70)).u32[0];
      v43 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), v28).f32[0], *(float *)&v42);
      v44 = v68 * 0.25;
      v71 = (float32x2_t)vrev64_s32(*(int32x2_t *)v36.f32);
      v72 = (float32x2_t)vzip2q_s32((int32x4_t)v28, (int32x4_t)v22).u64[0];
      v28.i32[0] = vadd_f32(v71, v72).u32[0];
      v46 = vsub_f32(v71, v72);
      goto LABEL_11;
    }
    v55 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2);
    v56 = (float32x2_t)__PAIR64__(v22.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v54 - v28.f32[1]) + v36.f32[2])));
    v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 0);
    LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v36).u32[0];
    v59 = vsub_f32(*(float32x2_t *)v22.f32, v57);
    v57.i32[0] = 2.0;
    v57.i32[0] = vmul_f32(v56, v57).u32[0];
    v57.i32[1] = v59.i32[1];
    v60 = vrecpe_f32((float32x2_t)v57.u32[0]);
    v61 = vmul_f32(v60, vrecps_f32((float32x2_t)v57.u32[0], v60));
    v59.i32[0] = vmul_f32(v61, vrecps_f32((float32x2_t)v57.u32[0], v61)).u32[0];
    v43 = vmuls_n_f32(v58, v59.f32[0]);
    v44 = vmuls_lane_f32(v59.f32[0], (float32x2_t)*(_OWORD *)&vaddq_f32(v55, v36), 1);
    __asm { FMOV            V3.2S, #0.25 }
    _D3.i32[1] = v59.i32[0];
    v53 = vmul_f32(v57, _D3);
  }
LABEL_12:
  *a3 = __PAIR64__(LODWORD(v44), LODWORD(v43));
  a3[1] = v53;
  return result;
}

_QWORD *re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB0uLL))
        {
          v2 = 176 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 176 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 176, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[11 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          v11[2] = *((_QWORD *)v8 + 2);
          *(_OWORD *)v11 = v12;
          v13 = *((unsigned __int8 *)v8 + 32);
          *((_BYTE *)v11 + 32) = v13;
          if (v13)
          {
            v14 = v8[3];
            v15 = v8[5];
            *((_OWORD *)v11 + 4) = v8[4];
            *((_OWORD *)v11 + 5) = v15;
            *((_OWORD *)v11 + 3) = v14;
          }
          v16 = *((unsigned __int8 *)v8 + 96);
          *((_BYTE *)v11 + 96) = v16;
          if (v16)
          {
            v17 = v8[7];
            v18 = v8[8];
            v19 = v8[10];
            *((_OWORD *)v11 + 9) = v8[9];
            *((_OWORD *)v11 + 10) = v19;
            *((_OWORD *)v11 + 7) = v17;
            *((_OWORD *)v11 + 8) = v18;
          }
          v8 += 11;
          v11 += 22;
        }
        while (v8 != v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigHierarchyJointDescription>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(_QWORD *a1, uint64_t a2, _QWORD *a3, char a4)
{
  __objc2_class_ro *v7;
  unsigned __int8 v8;
  __objc2_class_ro **p_info;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16[8];
  __objc2_class_ro *v17;
  _BYTE v18[40];
  char v19;
  _QWORD v20[2];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!a3[3])
    return 0;
  v7 = (__objc2_class_ro *)*a3;
  p_info = VideoSpillMapMetalSession.info;
  if ((v8 & 1) == 0)
  {
    *(_QWORD *)v16 = a2;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a2 = *(_QWORD *)v16;
    if (v15)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a2 = *(_QWORD *)v16;
    }
  }
  if (v7 != p_info[39])
    return 0;
  v11 = *(_QWORD *)(a2 + 8);
  v20[0] = v11;
  if (v11 >= a1[133])
  {
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(a1 + 131, v11 + 1);
  }
  else if (*(_QWORD *)(a1[135] + 56 * v11 + 24))
  {
    return 0;
  }
  re::DynamicArray<unsigned long>::add(a1 + 176, v20);
  v17 = (__objc2_class_ro *)*a3;
  re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)v18, a3 + 1);
  v19 = a4;
  v12 = v20[0];
  v13 = a1[133];
  if (v13 <= v20[0])
  {
    v20[1] = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v21 = 136315906;
    v22 = "operator[]";
    v23 = 1024;
    v24 = 789;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = a1[135] + 56 * v20[0];
  *(_QWORD *)v14 = v17;
  re::DynamicArray<re::RigDataValue>::operator=(v14 + 8, (uint64_t)v18);
  *(_BYTE *)(v14 + 48) = v19;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v18);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v18);
  return 1;
}

_QWORD *re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 56 * a2 + 8;
    v9 = a2;
    do
    {
      v10 = v3[4] + v8;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit(v10);
      result = (_QWORD *)re::DynamicArray<re::BindPoint::BindPointData>::deinit(v10);
      ++v9;
      v8 += 56;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::EvaluationContextManager::BindPointReference>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 40) = 0;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 0;
        *(_BYTE *)(v7 + 48) = 0;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::BindPoint::BindPointData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BindPoint::BindPointData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

BOOL re::TransitionConditionInt::evaluate(re::TransitionConditionInt *this, const re::StateParameterBlackboard *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  result = re::StateParameterBlackboard::getStateParameterIntValue(a2, (re::TransitionConditionInt *)((char *)this + 8), &v5);
  if (result)
  {
    v4 = *((_QWORD *)this + 4);
    switch(*((_BYTE *)this + 24))
    {
      case 0:
        result = v5 == v4;
        break;
      case 1:
        result = v5 != v4;
        break;
      case 2:
        result = v5 < v4;
        break;
      case 3:
        result = v5 <= v4;
        break;
      case 4:
        result = v5 > v4;
        break;
      case 5:
        result = v5 >= v4;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

BOOL re::StateParameterBlackboard::getStateParameterIntValue(re::StateParameterBlackboard *this, const re::StringID *a2, uint64_t *a3)
{
  re::StateParameterInt **v4;

  v4 = (re::StateParameterInt **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 8, a2);
  return v4 && (re::StateParameterInt::getValue(*v4, a3) & 1) != 0;
}

BOOL re::TransitionConditionFloat::evaluate(re::TransitionConditionFloat *this, const re::StateParameterBlackboard *a2)
{
  _BOOL4 StateParameterFloatValue;
  _BOOL8 result;
  float v5;
  float v6;

  v6 = 0.0;
  StateParameterFloatValue = re::StateParameterBlackboard::getStateParameterFloatValue(a2, (re::TransitionConditionFloat *)((char *)this + 8), &v6);
  result = 0;
  if (StateParameterFloatValue)
  {
    v5 = *((float *)this + 7);
    switch(*((_BYTE *)this + 24))
    {
      case 0:
        result = v6 == v5;
        break;
      case 1:
        result = v6 != v5;
        break;
      case 2:
        result = v6 < v5;
        break;
      case 3:
        result = v6 <= v5;
        break;
      case 4:
        result = v6 > v5;
        break;
      case 5:
        result = v6 >= v5;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

BOOL re::StateParameterBlackboard::getStateParameterFloatValue(re::StateParameterBlackboard *this, const re::StringID *a2, float *a3)
{
  re::StateParameterFloat **v4;

  v4 = (re::StateParameterFloat **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 56, a2);
  return v4 && (re::StateParameterFloat::getValue(*v4, a3) & 1) != 0;
}

uint64_t re::TransitionConditionBool::evaluate(re::TransitionConditionBool *this, const re::StateParameterBlackboard *a2)
{
  _BOOL4 StateParameterBoolValue;
  uint64_t result;
  BOOL v5;

  v5 = 0;
  StateParameterBoolValue = re::StateParameterBlackboard::getStateParameterBoolValue(a2, (re::TransitionConditionBool *)((char *)this + 8), &v5);
  result = 0;
  if (StateParameterBoolValue)
  return result;
}

BOOL re::StateParameterBlackboard::getStateParameterBoolValue(re::StateParameterBlackboard *this, const re::StringID *a2, BOOL *a3)
{
  re::StateParameterBool **v4;

  v4 = (re::StateParameterBool **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 104, a2);
  return v4 && (re::StateParameterBool::getValue(*v4, a3) & 1) != 0;
}

uint64_t `anonymous namespace'::evaluateTransitionCondition<BOOL>(unsigned int a1, unsigned int a2, int a3)
{
  uint64_t result;

  switch(a3)
  {
    case 0:
      result = a1 ^ a2 ^ 1;
      break;
    case 1:
      result = a1 ^ a2;
      break;
    case 2:
      result = a2 & ~a1;
      break;
    case 3:
      result = a1 ^ 1 | a2;
      break;
    case 4:
      result = a1 & ~a2;
      break;
    case 5:
      result = a2 ^ 1 | a1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t re::TransitionConditionTrigger::evaluate(re::TransitionConditionTrigger *this, const re::StateParameterBlackboard *a2)
{
  _BOOL4 StateParameterTriggerValue;
  uint64_t result;
  BOOL v5;

  v5 = 0;
  StateParameterTriggerValue = re::StateParameterBlackboard::getStateParameterTriggerValue(a2, (re::TransitionConditionTrigger *)((char *)this + 8), &v5);
  result = 0;
  if (StateParameterTriggerValue)
  return result;
}

BOOL re::StateParameterBlackboard::getStateParameterTriggerValue(re::StateParameterBlackboard *this, const re::StringID *a2, BOOL *a3)
{
  re::StateParameterBool **v4;

  v4 = (re::StateParameterBool **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 152, a2);
  return v4 && (re::StateParameterBool::getValue(*v4, a3) & 1) != 0;
}

uint64_t re::TransitionConditionTrigger::setStateParameterReset(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a2 + 152, (_QWORD *)(a1 + 8));
  *(_BYTE *)(*(_QWORD *)result + 56) = a3;
  return result;
}

_QWORD *re::DynamicArray<re::TransitionCondition *>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<float *>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::StateTransition::canTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v5 = *(_QWORD **)(a1 + 32);
  v6 = 8 * v2;
  do
  {
    if (((**(uint64_t (***)(_QWORD, uint64_t))*v5)(*v5, a2) & 1) == 0)
      return 0;
    ++v5;
    v6 -= 8;
  }
  while (v6);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return 1;
  v8 = *(uint64_t **)(a1 + 32);
  v9 = 8 * v7;
  v10 = 1;
  do
  {
    v11 = *v8++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 8))(v11, a2, 1);
    v9 -= 8;
  }
  while (v9);
  return v10;
}

re *re::internal::destroyPersistent<re::TransitionCondition>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    *a3 = &off_24ED1FB90;
    re::StringID::destroyString((re::StringID *)(a3 + 1));
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::StateMachineState::addIntTransitionCondition(uint64_t a1, _QWORD *a2, const StringID *a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL8 v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    return 0;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = 8 * v5;
  while (1)
  {
    v12 = *(_QWORD **)v10;
    v13 = re::StringID::operator==((_QWORD *)(*(_QWORD *)v10 + 40), a2);
    if (v13)
      break;
    v10 += 8;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  v15 = re::globalAllocators((re *)v13);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 40, 8);
  *(_QWORD *)v16 = &off_24ED1FB90;
  re::StringID::StringID((re::StringID *)(v16 + 8), a3);
  *(_BYTE *)(v16 + 24) = a4;
  *(_QWORD *)v16 = &off_24ED1FAA0;
  *(_QWORD *)(v16 + 32) = a5;
  v17 = v16;
  re::DynamicArray<re::TransitionCondition *>::add(v12, &v17);
  return 1;
}

uint64_t re::StateMachineState::addFloatTransitionCondition(uint64_t a1, _QWORD *a2, const StringID *a3, char a4, float a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL8 v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    return 0;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = 8 * v5;
  while (1)
  {
    v12 = *(_QWORD **)v10;
    v13 = re::StringID::operator==((_QWORD *)(*(_QWORD *)v10 + 40), a2);
    if (v13)
      break;
    v10 += 8;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  v15 = re::globalAllocators((re *)v13);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 32, 8);
  *(_QWORD *)v16 = &off_24ED1FB90;
  re::StringID::StringID((re::StringID *)(v16 + 8), a3);
  *(_BYTE *)(v16 + 24) = a4;
  *(_QWORD *)v16 = &off_24ED1FAE8;
  *(float *)(v16 + 28) = a5;
  v17 = v16;
  re::DynamicArray<re::TransitionCondition *>::add(v12, &v17);
  return 1;
}

uint64_t re::StateMachineState::addBoolTransitionCondition(uint64_t a1, _QWORD *a2, const StringID *a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL8 v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    return 0;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = 8 * v5;
  while (1)
  {
    v12 = *(_QWORD **)v10;
    v13 = re::StringID::operator==((_QWORD *)(*(_QWORD *)v10 + 40), a2);
    if (v13)
      break;
    v10 += 8;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  v15 = re::globalAllocators((re *)v13);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 32, 8);
  *(_QWORD *)v16 = &off_24ED1FB90;
  re::StringID::StringID((re::StringID *)(v16 + 8), a3);
  *(_BYTE *)(v16 + 24) = a4;
  *(_QWORD *)v16 = &off_24ED1FB20;
  *(_BYTE *)(v16 + 25) = a5;
  v17 = v16;
  re::DynamicArray<re::TransitionCondition *>::add(v12, &v17);
  return 1;
}

uint64_t re::StateMachineState::addTriggerTransitionCondition(re::StateMachineState *this, const re::StringID *a2, const StringID *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v6 = *((_QWORD *)this + 5);
  v7 = 8 * v3;
  while (1)
  {
    v8 = *(_QWORD **)v6;
    v9 = re::StringID::operator==((_QWORD *)(*(_QWORD *)v6 + 40), a2);
    if (v9)
      break;
    v6 += 8;
    v7 -= 8;
    if (!v7)
      return 0;
  }
  v11 = re::globalAllocators((re *)v9);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 32, 8);
  *(_QWORD *)v12 = &off_24ED1FB90;
  re::StringID::StringID((re::StringID *)(v12 + 8), a3);
  *(_WORD *)(v12 + 24) = 256;
  *(_QWORD *)v12 = &off_24ED1FB58;
  v13 = v12;
  re::DynamicArray<re::TransitionCondition *>::add(v8, &v13);
  return 1;
}

uint64_t re::StateMachineState::canTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(float *)(a1 + 108) > 0.0)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v6 = *(uint64_t **)(a1 + 40);
  v7 = 8 * v3;
  while (1)
  {
    v8 = *v6;
    if ((!a3 || v8 != a3) && (re::StateTransition::canTransition(*v6, a2) & 1) != 0)
      break;
    ++v6;
    v7 -= 8;
    if (!v7)
      return 0;
  }
  return v8;
}

float re::StateMachineState::internalEnterState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float result;

  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    v11 = *(uint64_t **)(a1 + 80);
    v12 = 8 * v9;
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 136))(v13, a2, a3, a4, a5);
      v12 -= 8;
    }
    while (v12);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4);
  result = *(float *)(a1 + 104);
  *(float *)(a1 + 108) = result;
  return result;
}

re *re::StateMachineState::deinit(re *this)
{
  re *v1;
  uint64_t v2;
  re::StateTransition **v3;
  uint64_t v4;
  re::StateTransition *v5;
  uint64_t v6;
  void (****v7)(_QWORD);
  uint64_t v8;
  void (***v9)(_QWORD);
  uint64_t v10;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (re::StateTransition **)*((_QWORD *)this + 5);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = re::internal::destroyPersistent<re::StateTransition>((re *)"deinit", 326, v5);
      v4 -= 8;
    }
    while (v4);
  }
  v6 = *((_QWORD *)v1 + 8);
  if (v6)
  {
    v7 = (void (****)(_QWORD))*((_QWORD *)v1 + 10);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      if (*v7)
      {
        v10 = re::globalAllocators(this)[2];
        (**v9)(v9);
        this = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v10 + 40))(v10, v9);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return this;
}

re *re::internal::destroyPersistent<re::StateTransition>(re *result, uint64_t a2, re::StateTransition *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::StateTransition::~StateTransition(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::StateTransition *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

_QWORD *re::StateGraph::addAnyState(_QWORD *this, re::StateMachineState *a2)
{
  _QWORD *v3;
  void (***v4)(_QWORD);
  uint64_t v5;

  if (a2)
  {
    v3 = this;
    v4 = (void (***)(_QWORD))this[8];
    if (v4)
    {
      v5 = re::globalAllocators((re *)this)[2];
      (**v4)(v4);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    v3[8] = a2;
  }
  return this;
}

BOOL re::StateGraph::createStateTransition(re::StateGraph *a1, uint64_t a2, re::StringID *a3, _QWORD *a4, const re::StringID *a5, StringID *a6, char a7, float a8)
{
  uint64_t StateByName;
  unint64_t StateGraphByName;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35[2];
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v34 = -1;
  StateByName = re::StateGraph::findStateByName(a1, a3, v35);
  StateGraphByName = re::StateGraph::findStateGraphByName(a2, a4);
  v16 = StateGraphByName;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17 <= StateGraphByName)
  {
    v35[1] = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 797;
    v40 = 2048;
    v41 = v16;
    v42 = 2048;
    v43 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v18 = re::StateGraph::findStateByName(*(re::StateGraph **)(*(_QWORD *)(a2 + 32) + 8 * StateGraphByName), a5, &v34);
  result = 0;
  if (StateByName && v18)
  {
    v20 = v34;
    v21 = *(_QWORD *)(StateByName + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(StateByName + 40);
      v23 = 8 * v21;
      while (1)
      {
        result = re::StringID::operator==((_QWORD *)(*(_QWORD *)v22 + 40), a6);
        if (result)
          return 0;
        v22 += 8;
        v23 -= 8;
        if (!v23)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v24 = re::globalAllocators((re *)result);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 80, 8);
      *(_QWORD *)(v25 + 32) = 0;
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)v25 = 0;
      *(_DWORD *)(v25 + 24) = 0;
      v26 = re::StringID::StringID((re::StringID *)(v25 + 40), a6);
      *(_QWORD *)(v25 + 56) = v16;
      *(_QWORD *)(v25 + 64) = v20;
      *(float *)(v25 + 72) = a8;
      *(_BYTE *)(v25 + 76) = a7;
      v27 = *(_QWORD *)(StateByName + 16);
      v28 = *(_QWORD *)(StateByName + 24);
      if (v28 >= v27)
      {
        v29 = v28 + 1;
        if (v27 < v28 + 1)
        {
          if (*(_QWORD *)(StateByName + 8))
          {
            v30 = 2 * v27;
            v31 = v27 == 0;
            v32 = 8;
            if (!v31)
              v32 = v30;
            if (v32 <= v29)
              v33 = v29;
            else
              v33 = v32;
            re::DynamicArray<float *>::setCapacity((_QWORD *)(StateByName + 8), v33);
          }
          else
          {
            re::DynamicArray<float *>::setCapacity((_QWORD *)(StateByName + 8), v29);
            ++*(_DWORD *)(StateByName + 32);
          }
        }
        v28 = *(_QWORD *)(StateByName + 24);
      }
      *(_QWORD *)(*(_QWORD *)(StateByName + 40) + 8 * v28) = v25;
      *(_QWORD *)(StateByName + 24) = v28 + 1;
      ++*(_DWORD *)(StateByName + 32);
      return 1;
    }
  }
  return result;
}

uint64_t re::StateGraph::findStateByName(re::StateGraph *this, const re::StringID *a2, unint64_t *a3)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a3 = -1;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 7);
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 8 * v7);
      if (v9)
      {
        if (re::StringID::operator==((_QWORD *)(v9 + 88), a2))
          break;
      }
      if (v5 == ++v7)
        goto LABEL_6;
    }
    *a3 = v7;
  }
  else
  {
LABEL_6:
    v10 = *((_QWORD *)this + 8);
    if (v10)
    {
      if (re::StringID::operator==((_QWORD *)(v10 + 88), a2))
        return v10;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t re::StateGraph::findStateGraphByName(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return -1;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    if (v6)
    {
      if (re::StringID::operator==((_QWORD *)(v6 + 8), a2))
        break;
    }
    if (v2 == ++v4)
      return -1;
  }
  return v4;
}

uint64_t re::StateGraph::addIntTransitionCondition(re::StateGraph *a1, const re::StringID *a2, _QWORD *a3, const StringID *a4, char a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v11;

  result = re::StateGraph::findStateByName(a1, a2, &v11);
  if (result)
    return re::StateMachineState::addIntTransitionCondition(result, a3, a4, a5, a6);
  return result;
}

uint64_t re::StateGraph::addFloatTransitionCondition(re::StateGraph *a1, const re::StringID *a2, _QWORD *a3, const StringID *a4, char a5, float a6)
{
  uint64_t result;
  unint64_t v11;

  result = re::StateGraph::findStateByName(a1, a2, &v11);
  if (result)
    return re::StateMachineState::addFloatTransitionCondition(result, a3, a4, a5, a6);
  return result;
}

uint64_t re::StateGraph::addBoolTransitionCondition(re::StateGraph *a1, const re::StringID *a2, _QWORD *a3, const StringID *a4, char a5, char a6)
{
  uint64_t result;
  unint64_t v11;

  result = re::StateGraph::findStateByName(a1, a2, &v11);
  if (result)
    return re::StateMachineState::addBoolTransitionCondition(result, a3, a4, a5, a6);
  return result;
}

re::StateMachineState *re::StateGraph::addTriggerTransitionCondition(re::StateGraph *this, const re::StringID *a2, const re::StringID *a3, const StringID *a4)
{
  re::StateMachineState *result;
  unint64_t v7;

  result = (re::StateMachineState *)re::StateGraph::findStateByName(this, a2, &v7);
  if (result)
    return (re::StateMachineState *)re::StateMachineState::addTriggerTransitionCondition(result, a3, a4);
  return result;
}

_QWORD *re::StateGraph::deinit(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  void (***v7)(_QWORD);
  uint64_t v8;

  v1 = this;
  v2 = this[5];
  if (v2)
  {
    v3 = (void (****)(_QWORD))this[7];
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators((re *)this)[2];
        (**v5)(v5);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v7 = (void (***)(_QWORD))v1[8];
  if (v7)
  {
    v8 = re::globalAllocators((re *)this)[2];
    (**v7)(v7);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v8 + 40))(v8, v7);
  }
  return this;
}

void *re::introspect_StateTransitionConditionOperator(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  re *v21;
  uint64_t *v22;
  uint64_t v23;
  re::IntrospectionBasic *v24;
  uint64_t v25[2];
  __int128 v26;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Equal";
      re::introspect_StateTransitionConditionOperator(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "NotEqual";
      qword_255826E38 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "LessThan";
      qword_255826E40 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "LessThanOrEqual";
      qword_255826E48 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *((_QWORD *)v21 + 1) = 4;
      *((_QWORD *)v21 + 2) = "GreaterThan";
      qword_255826E50 = (uint64_t)v21;
      v22 = re::introspectionAllocator(v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 24, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 5;
      *(_QWORD *)(v23 + 16) = "GreaterThanOrEqual";
      qword_255826E58 = v23;
    }
  }
  if ((v4 & 1) == 0
  {
    v24 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_StateTransitionConditionOperator(BOOL)::info, "StateTransitionConditionOperator", 1, 1, 1, 1);
    *(_QWORD *)v24 = &off_24ED7D9E8;
    *((_QWORD *)v24 + 8) = &re::introspect_StateTransitionConditionOperator(BOOL)::enumTable;
    *((_DWORD *)v24 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_StateTransitionConditionOperator(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_StateTransitionConditionOperator(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v26);
    v5 = re::introspect_StateTransitionConditionOperator(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v26);
    if ((v5 & 1) != 0)
      return &re::introspect_StateTransitionConditionOperator(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_StateTransitionConditionOperator(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_StateTransitionConditionOperator(BOOL)::info;
    }
  }
  re::introspect_StateTransitionConditionOperator(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_StateTransitionConditionOperator(BOOL)::info, a2);
  v25[0] = 0x510755AC47BE15B2;
  v25[1] = (uint64_t)"StateTransitionConditionOperator";
  xmmword_255826E88 = v26;
  re::StringID::destroyString((re::StringID *)v25);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_StateTransitionConditionOperator(BOOL)::info;
}

void re::internal::registerEnumType<re::StateTransitionConditionOperator>(re::TypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  StringID v31;
  _QWORD v32[2];
  _QWORD v33[61];

  v33[0] = 0x31CD534126;
  v33[1] = "uint8_t";
  v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v33);
  if (!v8)
  {
    re::StringID::destroyString((re::StringID *)v33);
    goto LABEL_29;
  }
  v9 = *v8;
  re::StringID::destroyString((re::StringID *)v33);
  if (!a1)
  {
LABEL_29:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, a3[1]);
    _os_crash();
    __break(1u);
    return;
  }
  v12 = *(unsigned int **)(a2 + 64);
  v32[0] = a1;
  v32[1] = v9;
  re::TypeBuilder::beginEnumType((uint64_t)v33, a3, 1, 1, (uint64_t)v32);
  v13 = *v12;
  if ((_DWORD)v13)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * i);
      if (*(_DWORD *)v15 == 1)
      {
        v16 = *(char **)(v15 + 16);
        if (v16)
        {
          v17 = *v16;
          if (*v16)
          {
            v18 = v16[1];
            if (v18)
            {
              v19 = (unsigned __int8 *)(v16 + 2);
              do
              {
                v17 = 31 * v17 + v18;
                v20 = *v19++;
                v18 = v20;
              }
              while (v20);
            }
          }
        }
        else
        {
          v17 = 0;
        }
        v21 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)&v31.var0 = 2 * v17;
        v31.var1 = v16;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v33, v21, &v31);
        re::StringID::destroyString((re::StringID *)&v31);
        v13 = *v12;
      }
    }
    if (v13)
    {
      for (j = 0; j < v13; ++j)
      {
        v23 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * j);
        if (*(_DWORD *)v23 == 2)
        {
          v24 = *(char **)(v23 + 16);
          if (v24)
          {
            v25 = *v24;
            if (*v24)
            {
              v26 = v24[1];
              if (v26)
              {
                v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  v25 = 31 * v25 + v26;
                  v28 = *v27++;
                  v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            v25 = 0;
          }
          v29 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)&v31.var0 = 2 * v25;
          v31.var1 = v24;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v33, v29, &v31);
          re::StringID::destroyString((re::StringID *)&v31);
          v13 = *v12;
        }
      }
    }
  }
  re::TypeBuilder::commitTo((re::TypeBuilder *)v33, a1, a4);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v30);
}

void *re::introspect_StateTransitionInterruptionType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "NoInterruption";
      re::introspect_StateTransitionInterruptionType(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "InterruptFrom";
      qword_255826EC8 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "InterruptTo";
      qword_255826ED0 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "InterruptFromTo";
      qword_255826ED8 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 4;
      *(_QWORD *)(v21 + 16) = "InterruptToFrom";
      qword_255826EE0 = v21;
    }
  }
  if ((v4 & 1) == 0
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_StateTransitionInterruptionType(BOOL)::info, "StateTransitionInterruptionType", 1, 1, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::introspect_StateTransitionInterruptionType(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_StateTransitionInterruptionType(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_StateTransitionInterruptionType(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::introspect_StateTransitionInterruptionType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::introspect_StateTransitionInterruptionType(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_StateTransitionInterruptionType(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_StateTransitionInterruptionType(BOOL)::info;
    }
  }
  re::introspect_StateTransitionInterruptionType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_StateTransitionInterruptionType(BOOL)::info, a2);
  v23[0] = 0x3BFE1784889200CALL;
  v23[1] = (uint64_t)"StateTransitionInterruptionType";
  xmmword_255826F10 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_StateTransitionInterruptionType(BOOL)::info;
}

void *re::introspect_TransitionConditionType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Unknown";
      re::introspect_TransitionConditionType(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Int";
      qword_255826F50 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "Float";
      qword_255826F58 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "Bool";
      qword_255826F60 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 4;
      *(_QWORD *)(v21 + 16) = "Trigger";
      qword_255826F68 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_TransitionConditionType(BOOL)::info, "TransitionConditionType", 1, 1, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::introspect_TransitionConditionType(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_TransitionConditionType(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_TransitionConditionType(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::introspect_TransitionConditionType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::introspect_TransitionConditionType(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_TransitionConditionType(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_TransitionConditionType(BOOL)::info;
    }
  }
  re::introspect_TransitionConditionType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_TransitionConditionType(BOOL)::info, a2);
  v23[0] = 0x5876EE64EBA2F00;
  v23[1] = (uint64_t)"TransitionConditionType";
  xmmword_255826F98 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_TransitionConditionType(BOOL)::info;
}

uint64_t re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v6 = v5 + 32 * v4;
    if (re::StringID::operator==((_QWORD *)(v6 + 8), a2))
      break;
    v4 = *(_DWORD *)(v5 + 32 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 24;
}

uint64_t re::StateParameterInt::getValue(re::StateParameterInt *this, uint64_t *a2)
{
  re::BindPoint *v3;
  uint64_t result;

  if (!*((_QWORD *)this + 4))
    return 0;
  v3 = (re::StateParameterInt *)((char *)this + 8);
  result = re::BindPoint::isAlive((re::StateParameterInt *)((char *)this + 8));
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(v3);
    if (result)
    {
      *a2 = *(_QWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t re::StateParameterFloat::getValue(re::StateParameterFloat *this, float *a2)
{
  re::BindPoint *v3;
  uint64_t result;

  if (!*((_QWORD *)this + 4))
    return 0;
  v3 = (re::StateParameterFloat *)((char *)this + 8);
  result = re::BindPoint::isAlive((re::StateParameterFloat *)((char *)this + 8));
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(v3);
    if (result)
    {
      *a2 = *(float *)result;
      return 1;
    }
  }
  return result;
}

uint64_t re::StateParameterBool::getValue(re::StateParameterBool *this, BOOL *a2)
{
  re::BindPoint *v3;
  uint64_t result;

  if (!*((_QWORD *)this + 4))
    return 0;
  v3 = (re::StateParameterBool *)((char *)this + 8);
  result = re::BindPoint::isAlive((re::StateParameterBool *)((char *)this + 8));
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(v3);
    if (result)
    {
      *a2 = *(_BYTE *)result;
      return 1;
    }
  }
  return result;
}

uint64_t re::TransitionCondition::evaluate()
{
  return 0;
}

void re::StateTransition::~StateTransition(re::StateTransition *this)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD **)*((_QWORD *)this + 4);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      re::internal::destroyPersistent<re::TransitionCondition>((re *)"deinit", 123, v5);
      v4 -= 8;
    }
    while (v4);
  }
  re::StringID::destroyString((re::StateTransition *)((char *)this + 40));
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

unint64_t re::RigDataValue::attributeValue(re::RigDataValue *this, unint64_t a2)
{
  if (*((_QWORD *)this + 32) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 34) + 288 * a2;
}

{
  if (*((_QWORD *)this + 32) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 34) + 288 * a2;
}

uint64_t re::internal::floorLevelSolverCallback(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, re::RigDataValue *a7, uint64_t a8, float32x4_t *a9)
{
  uint64_t v13;
  uint64_t v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  re::internal *v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  uint64_t v47;
  int v48;
  uint64_t result;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67[4];
  int32x4_t v68;
  char v69[32];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, a4);
    _os_crash();
    __break(1u);
    goto LABEL_23;
  }
  re::internal::getSRTFromRDV((re::internal *)(a3 + 72), &v64);
  if (a4 == 3)
  {
LABEL_23:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_24;
  }
  re::internal::getSRTFromRDV((re::internal *)(a3 + 108), &v61);
  _V4.S[3] = v62.i32[3];
  v60 = v64;
  _S0 = v65.i32[3];
  v58 = v61;
  v59 = v65;
  __asm { FMLA            S1, S0, V4.S[3] }
  v52 = v66;
  v53 = _S1;
  v56 = v63;
  v57 = v62;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v21 = a3[68];
  if (v21)
  {
    v22 = 0;
    v23 = vnegq_f32(v57);
    v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL);
    v25 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL), v23), v52, v24);
    v26 = (int32x4_t)vaddq_f32(v25, v25);
    v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
    v54 = v24;
    v55 = v23;
    v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL), v23), v27, v24);
    v29 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL), v23), v59, v24);
    v30 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL), v59, v57, 3), v57, v59, 3);
    v31 = vaddq_f32(v56, vmulq_f32(v58, vaddq_f32(vaddq_f32(v52, vmulq_laneq_f32(v27, v57, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL))));
    v32 = (int32x4_t)vnegq_f32(v30);
    v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL);
    v34 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), v30), v31, v33);
    v35 = (int32x4_t)vaddq_f32(v34, v34);
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
    v37 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v30), v36, v33);
    __asm { FMOV            V5.4S, #1.0 }
    v39 = vaddq_f32(v31, vmulq_n_f32(v36, v53));
    v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL);
    v41 = vdivq_f32(_Q5, vmulq_f32(v58, v60));
    v50 = vmulq_f32(v41, vaddq_f32(v39, v40));
    v51 = v41;
    do
    {
      v42 = (re::internal *)re::RigDataValue::attributeValue((re::RigDataValue *)(a3 + 36), v22);
      re::internal::getSRTFromRDV(v42, v67);
      v43 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v68, v68), (int8x16_t)v68, 0xCuLL), v55), (float32x4_t)v68, v54);
      v44 = (int32x4_t)vaddq_f32(v43, v43);
      v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL);
      v46 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL), v55), v45, v54);
      a9[1] = vsubq_f32(vaddq_f32(v56, vmulq_f32(v58, vaddq_f32(vaddq_f32((float32x4_t)v68, vmulq_laneq_f32(v45, v57, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL)))), vmulq_n_f32(a9[2], a9[3].f32[0] * 0.5));
      re::internal::RayCaster::cast((float32x4_t *)a9[4].i64, (uint64_t)&a9[1], (uint64_t)v69);
      if (v69[0])
      {
        MEMORY[0x2276912DC](a9->i64[0], v22);
        CoreIKACPPenetrationConstraintSetPlaneDefinition();
      }
      ++v22;
    }
    while (v21 != v22);
  }
  re::internal::transferPose((re::RigDataValue *)a3, (uint64_t)&a9[11].i64[1]);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (!a8)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0, *(_OWORD *)&v50, *(_OWORD *)&v51);
    _os_crash();
    __break(1u);
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v48 = MEMORY[0x2276912C4](a9->i64[0], a9[12].i64[1], a9[12].i64[0]);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::internal::updateOutputBasedOnSolveResult(v48, (uint64_t)a3, &a9[11].u32[2], a7);
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

uint64_t re::internal::floorLevelSolverCompile(re::Allocator **a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  const re::RigDataValue *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  const char *v13;
  uint64_t v14;
  re::Allocator *v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  const char *ConstraintTargetName;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  StringID v27;
  _OWORD v28[2];
  int v29;
  _OWORD v30[2];
  int v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;
  char v36;
  _BYTE v37[288];
  const char *v38[37];
  uint64_t v39;
  _QWORD v40[4];
  const char *v41[30];
  uint64_t v42;
  _QWORD v43[38];

  v43[36] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  if (a3 == 1)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  if (a3 <= 2)
  {
LABEL_18:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  if (!a5)
    goto LABEL_19;
  v6 = a2[1];
  v7 = (const re::RigDataValue *)a2[2];
  v8 = *a4;
  v9 = *(const char **)(*a2 + 232);
  v10 = strlen(v9);
  v11 = MEMORY[0x22769136C](v9, v10);
  v12 = *(_anonymous_namespace_ **)(v6 + 184);
  v13 = (const char *)MEMORY[0x2276916FC](v11, 0);
  v43[0] = v13;
  v43[1] = strlen(v13);
  re::RigHierarchy::jointParent(v12, (uint64_t)v43, 1, (uint64_t)v33);
  if (v33[0] && v34)
    v13 = *(const char **)(v34 + 8);
  v41[0] = (const char *)164778;
  v41[1] = "SRT";
  re::internal::makeRigDataValue(a1, v41, (uint64_t)v43);
  re::StringID::destroyString((re::StringID *)v41);
  re::internal::makeModelSpaceJointPoseRDV(a1, v12, v13, (re::RigDataValue *)v41);
  re::RigDataValue::operator=(v43, (uint64_t)v41);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v41);
  v14 = *((_QWORD *)a1[2] + 7);
  v15 = *a1;
  v16 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 208, 16);
  *(_QWORD *)v16 = CoreIKCreateACPPenetrationSolverFromRig();
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 64) = v14;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 84) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v16 + 124) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 140) = 0u;
  *(_OWORD *)(v16 + 108) = 0u;
  *(_OWORD *)(v16 + 92) = 0u;
  *(_DWORD *)(v16 + 128) = 1;
  *(_QWORD *)(v16 + 144) = 0;
  *(_QWORD *)(v16 + 152) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_DWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 176) = v15;
  *(_QWORD *)(v16 + 192) = 0;
  *(_QWORD *)(v16 + 200) = 0;
  *(_QWORD *)(v16 + 184) = 0;
  v17 = MEMORY[0x2276916F0](v11);
  re::FixedArray<CoreIKTransform>::init<>((uint64_t *)(v16 + 184), (uint64_t)v15, v17);
  CoreIKACPPenetrationSolverGetTargetRestPose();
  v19 = vmulq_f32(v18, v18);
  v19.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = xmmword_2260E5F50;
  *(float *)(v16 + 48) = v19.f32[0] + v19.f32[0];
  v39 = v16;
  v40[0] = &off_24ED1FBF0;
  v40[3] = v40;
  v40[1] = v15;
  v38[0] = (const char *)158357486;
  v38[1] = "SRT[]";
  re::internal::makeRigDataValue(a1, v38, (uint64_t)v41);
  re::StringID::destroyString((re::StringID *)v38);
  v20 = CoreIKACPPenetrationSolverConstraintCount();
  if (v20)
  {
    v21 = v20;
    for (i = 0; i != v21; ++i)
    {
      ConstraintTargetName = (const char *)CoreIKACPPenetrationSolverGetConstraintTargetName();
      re::internal::makeModelSpaceJointPoseRDV(a1, v12, ConstraintTargetName, (re::RigDataValue *)v38);
      re::DynamicArray<re::RigDataValue>::add((uint64_t)&v42, (const re::RigDataValue *)v38);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v38);
    }
  }
  v24 = *(_anonymous_namespace_ **)(v6 + 184);
  re::internal::makePoseFromRig(a1, v24, v11, (uint64_t)v38);
  v25 = MEMORY[0x2276916F0](v11);
  re::internal::makePose(a1, v25, (uint64_t)v37);
  v32 = 0;
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  memset(v30, 0, sizeof(v30));
  v31 = 0;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v28, *a1);
  *(_QWORD *)&v27.var0 = 0x10643527A253C4;
  v27.var1 = "TargetPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v28, &v27, (const re::RigDataValue *)v38);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x170CCA3259E8975ELL;
  v27.var1 = "ModelSpaceTaskJointTransforms";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v28, &v27, (const re::RigDataValue *)v41);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x675FFFDDE7071B76;
  v27.var1 = "SolverToModel";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v28, &v27, (const re::RigDataValue *)v43);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x1F85042B1B4E4034;
  v27.var1 = "WorldTransform";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v28, &v27, v7);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x10498EC9357CACLL;
  v27.var1 = "SolvedPose";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v28, &v27, (re::RigDataValue *)v37);
  re::StringID::destroyString((re::StringID *)&v27);
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v28, (uint64_t)a1, (uint64_t)re::internal::floorLevelSolverCallback, &v39);
  re::internal::bindCallbackOutputToNodeOutputPose(v24, (re::RigDataValue *)v37, v11, (uint64_t)a1, v8);
  MEMORY[0x2276913A8](v11);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v30 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v28 + 8);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v37);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v38);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v41);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v39);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v43);
  if (!v33[0] && v35 && (v36 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v35 + 40))();
  return 1;
}

void re::internal::registerFloorLevelSolverNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[0] = constinit_2;
  v7[1] = *(_OWORD *)&off_24ED1FBB0;
  v7[2] = xmmword_24ED1FBC0;
  v7[3] = *(_OWORD *)off_24ED1FBD0;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 1uLL, (unint64_t)re::internal::floorLevelSolverCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_36CoreIKACPPenetrationSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_36CoreIKACPPenetrationSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED1FBF0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_36CoreIKACPPenetrationSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED1FBF0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_36CoreIKACPPenetrationSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EEclEOSI_(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    CoreIKDestroyACPPenetrationSolver();
    v4 = v2[23];
    if (v4)
    {
      if (v2[24])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[25]);
        v2[24] = 0;
        v2[25] = 0;
      }
      v2[23] = 0;
    }
    re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)(v2 + 14));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v2 + 14));
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_36CoreIKACPPenetrationSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN2re8internal14makeNodeUniqueINS0_36CoreIKACPPenetrationSolverNodeHelperENS_9AllocatorEJP9CoreIKRigNSt3__117reference_wrapperIKNS_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_36CoreIKACPPenetrationSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EE11target_typeEv()
{
  return &_ZTIZN2re8internal14makeNodeUniqueINS0_36CoreIKACPPenetrationSolverNodeHelperENS_9AllocatorEJP9CoreIKRigNSt3__117reference_wrapperIKNS_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_;
}

void *re::introspect_REStateCommandID(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "InvalidCommand";
      re::introspect_REStateCommandID(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "AnimationPlayCommand";
      qword_255826FD8 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "AnimationStopCommand";
      qword_255826FE0 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "AnimationStopAllCommand";
      qword_255826FE8 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 4;
      *(_QWORD *)(v21 + 16) = "AnimationSetPlaybackTimeCommand";
      qword_255826FF0 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_REStateCommandID(BOOL)::info, "REStateCommandID", 1, 1, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::introspect_REStateCommandID(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_REStateCommandID(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_REStateCommandID(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::introspect_REStateCommandID(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::introspect_REStateCommandID(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_REStateCommandID(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_REStateCommandID(BOOL)::info;
    }
  }
  re::introspect_REStateCommandID(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_REStateCommandID(BOOL)::info, a2);
  v23[0] = 0x87BB690F50576250;
  v23[1] = (uint64_t)"REStateCommandID";
  xmmword_255827020 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_REStateCommandID(BOOL)::info;
}

uint64_t *`anonymous namespace'::countTimelinesRecursive@<X0>(uint64_t *this@<X0>, const re::Timeline *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  const re::Timeline *v7;
  int v8;
  _anonymous_namespace_ *v9;
  int v10;
  uint64_t v11;

  if ((int)a2 > 999)
  {
LABEL_2:
    *(_BYTE *)a3 = 0;
    return this;
  }
  v4 = (int)a2;
  v5 = this;
  this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 24))(this);
  if (this)
  {
    v6 = 0;
    v7 = (const re::Timeline *)(v4 + 1);
    v8 = 1;
    while (1)
    {
      v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *, unint64_t))(*v5 + 32))(v5, v6);
      if (!(_BYTE)v11)
        goto LABEL_2;
      v8 += HIDWORD(v11);
      ++v6;
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
      if (v6 >= (unint64_t)this)
        goto LABEL_9;
    }
  }
  v8 = 1;
LABEL_9:
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 4) = v8;
  return this;
}

_QWORD *re::RigGraphDefinitionBuilder::init(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  v4 = a3;
  a1[1] = a4;
  a1[2] = a3;
  *a1 = a2;
  *(_QWORD *)(a3 + 96) = a2;
  re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)(a3 + 96), 0);
  ++*(_DWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 136) = *a1;
  re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)(v4 + 136), 0);
  ++*(_DWORD *)(v4 + 160);
  *(_QWORD *)(v4 + 176) = *a1;
  re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)(v4 + 176), 0);
  ++*(_DWORD *)(v4 + 200);
  *(_QWORD *)(v4 + 16) = *a1;
  re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)(v4 + 16), 0);
  *(_QWORD *)(v4 + 56) = *a1;
  v4 += 56;
  ++*(_DWORD *)(v4 - 16);
  result = re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)v4, 0);
  ++*(_DWORD *)(v4 + 24);
  return result;
}

void re::RigGraphDefinitionBuilder::addNode(re::RigGraphDefinitionBuilder *this@<X0>, _anonymous_namespace_ *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  StringID v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[8];
  __int128 v18;
  uint64_t v19;
  char v20;

  re::RigGraphDefinitionBuilder::getParameterCount(this, a2, (uint64_t)v17);
  if (v17[0])
  {
    *(_QWORD *)&v13 = 0;
    *((_QWORD *)&v13 + 1) = &str_110;
    v14 = 0;
    *(_QWORD *)&v15 = &str_110;
    v10 = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphNodeDescription>::add((_QWORD *)(*((_QWORD *)this + 2) + 96), (uint64_t *)&v13);
    *(_QWORD *)&v12.var0 = 0;
    v12.var1 = (char *)&str_110;
    v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 112) - 1;
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)this + 24, &v12, &v11);
    re::StringID::destroyString((re::StringID *)&v12);
    *(_BYTE *)a4 = 1;
    re::StringID::destroyString((re::StringID *)&v14);
    re::StringID::destroyString((re::StringID *)&v13);
  }
  else
  {
    v13 = v18;
    re::DynamicString::DynamicString((re::DynamicString *)&v14, (const re::DynamicString *)&v19);
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v13;
    *(_QWORD *)(a4 + 24) = v14;
    *(_QWORD *)(a4 + 48) = v16;
    *(_OWORD *)(a4 + 32) = v15;
    if (v19)
    {
      if ((v20 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v19 + 40))();
    }
  }
}

__n128 re::RigGraphDefinitionBuilder::getParameterCount@<Q0>(re::RigGraphDefinitionBuilder *this@<X0>, _anonymous_namespace_ *a2@<X1>, uint64_t a3@<X8>)
{
  re::RigEnvironment *v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (re::RigEnvironment *)*((_QWORD *)this + 1);
  if (v4)
  {
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Undefined rig environment!", (re::DynamicString *)&v8);
    result = v8;
    v6 = v9;
    v7 = v10;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 5001;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(__n128 *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 40) = v6;
    *(_QWORD *)(a3 + 48) = v7;
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigGraphNodeDescription>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigGraphNodeDescription>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 32 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

__n128 re::RigGraphDefinitionBuilder::getNodeType(re::RigGraphDefinitionBuilder *this, const char *a2, const char *a3)
{
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Undefined rig definition!", (re::DynamicString *)&v7);
    result = v7;
    v5 = v8;
    v6 = v9;
    *(_BYTE *)this = 0;
    *((_QWORD *)this + 1) = 3000;
    *((_QWORD *)this + 2) = &re::AnimationErrorCategory(void)::instance;
    *(__n128 *)((char *)this + 24) = result;
    *((_QWORD *)this + 5) = v5;
    *((_QWORD *)this + 6) = v6;
  }
  return result;
}

void re::RigGraphDefinitionBuilder::getParameterType(re::RigGraphDefinitionBuilder *this, const char *a2, char *a3, const char *a4, int a5)
{
  re::RigEnvironment *v10;
  uint64_t v11;
  char v12;
  const char *v13;
  int v14;
  re::RigGraphNode *v15;
  _anonymous_namespace_ *v16;
  re::RigGraphNode *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  re::RigEnvironment *v23;
  uint64_t v24;
  char v25;
  const char *v26;
  int v27;
  uint64_t v28;
  _anonymous_namespace_ *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const StringID *v41;
  char *v42;
  char *v43;
  char *__s2[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v10 = (re::RigEnvironment *)*((_QWORD *)a2 + 1);
  if (a3)
  {
    v11 = *a3;
    if (*a3)
    {
      v12 = a3[1];
      if (v12)
      {
        v13 = a3 + 2;
        do
        {
          v11 = 31 * v11 + v12;
          v14 = *(unsigned __int8 *)v13++;
          v12 = v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  __s2[0] = (char *)(2 * v11);
  __s2[1] = a3;
  v15 = (re::RigGraphNode *)re::RigEnvironment::lookupRigGraphNode(v10, (const re::StringID *)__s2);
  re::StringID::destroyString((re::StringID *)__s2);
  if (!v15)
  {
    v23 = (re::RigEnvironment *)*((_QWORD *)a2 + 1);
    if (a3)
    {
      v24 = *a3;
      if (*a3)
      {
        v25 = a3[1];
        if (v25)
        {
          v26 = a3 + 2;
          do
          {
            v24 = 31 * v24 + v25;
            v27 = *(unsigned __int8 *)v26++;
            v25 = v27;
          }
          while (v27);
        }
      }
    }
    else
    {
      v24 = 0;
    }
    __s2[0] = (char *)(2 * v24);
    __s2[1] = a3;
    v28 = re::RigEnvironment::lookupRigGraphOperator(v23, (const re::StringID *)__s2);
    re::StringID::destroyString((re::StringID *)__s2);
    if (!v28)
    {
      re::DynamicString::format((re::DynamicString *)"Node type '%s' not found!", (re::DynamicString *)__s2, a3);
      v37 = *(_OWORD *)__s2;
      v39 = *((_QWORD *)&v45 + 1);
      v38 = v45;
      *(_BYTE *)this = 0;
      v40 = 5004;
      goto LABEL_40;
    }
    v30 = 40;
    if (a5)
      v30 = 16;
    v31 = v28 + v30;
    if (*(_QWORD *)(v28 + v30 + 8))
    {
      v32 = 0;
      v33 = 0;
      do
      {
        v34 = *(_QWORD *)(v31 + 16);
        __s2[0] = 0;
        __s2[1] = (char *)&str_110;
        if (((uint64_t)__s2[0] ^ *(_QWORD *)(v34 + v32)) >= 2uLL)
        {
          re::StringID::destroyString((re::StringID *)__s2);
        }
        else
        {
          v35 = *(char **)(v34 + v32 + 8);
          if (v35 == __s2[1])
          {
            re::StringID::destroyString((re::StringID *)__s2);
LABEL_45:
            if (*(_QWORD *)(v31 + 8) <= v33)
            {
              v47 = 0u;
              v48 = 0u;
              v45 = 0u;
              v46 = 0u;
              *(_OWORD *)__s2 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::StringID::StringID((re::StringID *)__s2, (const StringID *)(*(_QWORD *)(v31 + 16) + v32 + 16));
            *(_BYTE *)this = 1;
            v43 = __s2[1];
            *((char **)this + 1) = __s2[0];
            *((_QWORD *)this + 2) = v43;
            __s2[1] = (char *)&str_110;
            goto LABEL_47;
          }
          v36 = strcmp(v35, __s2[1]);
          re::StringID::destroyString((re::StringID *)__s2);
          if (!v36)
            goto LABEL_45;
        }
        ++v33;
        v32 += 32;
      }
      while (v33 < *(_QWORD *)(v31 + 8));
    }
LABEL_39:
    re::DynamicString::format((re::DynamicString *)"Parameter name '%s' not found!", (re::DynamicString *)__s2, a4);
    v37 = *(_OWORD *)__s2;
    v39 = *((_QWORD *)&v45 + 1);
    v38 = v45;
    *(_BYTE *)this = 0;
    v40 = 5006;
LABEL_40:
    *((_QWORD *)this + 1) = v40;
    *((_QWORD *)this + 2) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)((char *)this + 24) = v37;
    *((_QWORD *)this + 5) = v38;
    *((_QWORD *)this + 6) = v39;
    return;
  }
  if (a5)
    v17 = v15;
  else
    v17 = (re::RigGraphNode *)((char *)v15 + 40);
  if (!*((_QWORD *)v17 + 2))
    goto LABEL_39;
  v18 = 0;
  v19 = 0;
  while (1)
  {
    v20 = *((_QWORD *)v17 + 4);
    __s2[0] = 0;
    __s2[1] = (char *)&str_110;
    if (((uint64_t)__s2[0] ^ *(_QWORD *)(v20 + v18)) >= 2uLL)
    {
      re::StringID::destroyString((re::StringID *)__s2);
      goto LABEL_19;
    }
    v21 = *(char **)(v20 + v18 + 8);
    if (v21 == __s2[1])
      break;
    v22 = strcmp(v21, __s2[1]);
    re::StringID::destroyString((re::StringID *)__s2);
    if (!v22)
      goto LABEL_43;
LABEL_19:
    ++v19;
    v18 += 40;
    if (v19 >= *((_QWORD *)v17 + 2))
      goto LABEL_39;
  }
  re::StringID::destroyString((re::StringID *)__s2);
LABEL_43:
  v41 = (const StringID *)re::RigGraphNode::inputType(v15, v19);
  re::StringID::StringID((re::StringID *)__s2, v41);
  *(_BYTE *)this = 1;
  v42 = __s2[1];
  *((char **)this + 1) = __s2[0];
  *((_QWORD *)this + 2) = v42;
  __s2[1] = (char *)&str_110;
LABEL_47:
  __s2[0] = 0;
  re::StringID::destroyString((re::StringID *)__s2);
}

_QWORD *re::DynamicArray<re::RigGraphInputValue>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigGraphInputValue>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 96 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  v8 = a2[4];
  v5[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[5] = a2[5];
  a2[4] = 0;
  a2[5] = (uint64_t)&str_110;
  v9 = a2[6];
  v5[6] = v5[6] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v5[6] = a2[6] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v5[7] = a2[7];
  a2[6] = 0;
  a2[7] = (uint64_t)&str_110;
  v10 = a2[8];
  v5[8] = v5[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v5[8] = a2[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v5[9] = a2[9];
  a2[8] = 0;
  a2[9] = (uint64_t)&str_110;
  v11 = a2[10];
  v5[10] = v5[10] & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  v5[10] = a2[10] & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  v5[11] = a2[11];
  a2[10] = 0;
  a2[11] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::RigGraphDefinitionBuilder::addConnection@<X0>(re::RigGraphDefinitionBuilder *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, const char *a5@<X4>, const char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  re::RigEnvironment *v16;
  const char *v17;
  StringID v18;
  char var0;
  char *var1;
  uint64_t v21;
  re::RigEnvironment *v22;
  size_t v23;
  StringID v24;
  char v25;
  char *v26;
  const char *v27;
  const char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _anonymous_namespace_ *v50;
  _anonymous_namespace_ *v51;
  _anonymous_namespace_ *v52;
  _anonymous_namespace_ *v53;
  _anonymous_namespace_ *v54;
  _anonymous_namespace_ *v56;
  char *__s;
  __int128 v58;
  _QWORD v59[2];
  _QWORD v60[2];
  _BYTE v61[16];
  _QWORD v62[2];
  _QWORD v63[2];
  _BYTE v64[16];
  _QWORD v65[2];
  _BYTE v66[16];
  _QWORD v67[2];
  _QWORD v68[2];
  StringID v69;
  unint64_t v70;
  const char *v71;
  _BYTE v72[8];
  StringID v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  StringID v77;
  unint64_t v78;
  const char *v79;
  _BYTE v80[8];
  StringID v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[8];
  StringID v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[8];
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[8];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  re::RigGraphDefinitionBuilder::getNodeType((re::RigGraphDefinitionBuilder *)v95, *((const char **)this + 2), a2);
  if (v95[0])
  {
    re::RigGraphDefinitionBuilder::getNodeType((re::RigGraphDefinitionBuilder *)v90, *((const char **)this + 2), a4);
    if (!v90[0])
    {
      v35 = v92;
      *(_OWORD *)(a8 + 8) = v91;
      v36 = v93;
      v37 = v94;
      v93 = 0;
      v94 = 0;
      v92 = 0uLL;
      *(_BYTE *)a8 = 0;
      *(_OWORD *)(a8 + 24) = v35;
      *(_QWORD *)(a8 + 40) = v36;
      *(_QWORD *)(a8 + 48) = v37;
LABEL_32:
      re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v90);
      return re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v95);
    }
    re::RigGraphDefinitionBuilder::getParameterType((re::RigGraphDefinitionBuilder *)v85, (const char *)this, *((char **)&v96 + 1), a3, 0);
    if (!v85[0])
    {
      *(StringID *)(a8 + 8) = v86;
      v38 = v87;
      v39 = v88;
      v40 = v89;
      v88 = 0;
      v89 = 0;
      v87 = 0uLL;
      *(_BYTE *)a8 = 0;
      *(_OWORD *)(a8 + 24) = v38;
      *(_QWORD *)(a8 + 40) = v39;
      *(_QWORD *)(a8 + 48) = v40;
LABEL_31:
      re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v85);
      goto LABEL_32;
    }
    re::RigGraphDefinitionBuilder::getParameterType((re::RigGraphDefinitionBuilder *)v80, (const char *)this, *((char **)&v91 + 1), a5, 1);
    if (!v80[0])
    {
      v41 = v82;
      *(StringID *)(a8 + 8) = v81;
      v42 = v83;
      v43 = v84;
      v83 = 0;
      v84 = 0;
      v82 = 0uLL;
      *(_BYTE *)a8 = 0;
      *(_OWORD *)(a8 + 24) = v41;
      *(_QWORD *)(a8 + 40) = v42;
      *(_QWORD *)(a8 + 48) = v43;
LABEL_30:
      re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v80);
      goto LABEL_31;
    }
    re::StringID::StringID((re::StringID *)&v78, &v86);
    re::StringID::invalid((re::StringID *)&v77);
    __s = a7;
    if (a6)
    {
      re::RigEnvironment::lookupRigDataType(*((re::RigEnvironment **)this + 1), (const char **)&v86, &v58);
      v16 = (re::RigEnvironment *)*((_QWORD *)this + 1);
      v17 = (const char *)strlen(a6);
      v70 = (unint64_t)a6;
      v71 = v17;
      re::RigDataTypeClass::attributeType((uint64_t)&v58 + 8, v16, (uint64_t)&v70, (uint64_t)v72);
      re::Optional<re::RigDataTypeClass>::~Optional(&v58);
      if (!v72[0])
      {
        *(StringID *)(a8 + 8) = v73;
        v44 = v74;
        v45 = v75;
        v46 = v76;
        v75 = 0;
        v76 = 0;
        v74 = 0uLL;
        *(_BYTE *)a8 = 0;
        *(_OWORD *)(a8 + 24) = v44;
        *(_QWORD *)(a8 + 40) = v45;
        *(_QWORD *)(a8 + 48) = v46;
        re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v72);
LABEL_29:
        re::StringID::destroyString((re::StringID *)&v77);
        re::StringID::destroyString((re::StringID *)&v78);
        goto LABEL_30;
      }
      v18 = v73;
      *(_QWORD *)&v73.var0 = 0;
      v73.var1 = (char *)&str_110;
      var0 = (char)v77.var0;
      var1 = v77.var1;
      v77 = v18;
      *(_QWORD *)&v58 = *(_QWORD *)&v18.var0 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
      *((_QWORD *)&v58 + 1) = var1;
      re::StringID::destroyString((re::StringID *)&v58);
      re::StringID::operator=(&v78, (uint64_t *)&v77);
      re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v72);
    }
    re::StringID::StringID((re::StringID *)&v70, &v81);
    v21 = (uint64_t)re::StringID::invalid((re::StringID *)&v69);
    if (a7)
    {
      re::RigEnvironment::lookupRigDataType(*((re::RigEnvironment **)this + 1), (const char **)&v81, &v58);
      v22 = (re::RigEnvironment *)*((_QWORD *)this + 1);
      v23 = strlen(a7);
      v68[0] = a7;
      v68[1] = v23;
      re::RigDataTypeClass::attributeType((uint64_t)&v58 + 8, v22, (uint64_t)v68, (uint64_t)v72);
      re::Optional<re::RigDataTypeClass>::~Optional(&v58);
      if (!v72[0])
      {
        *(StringID *)(a8 + 8) = v73;
        v47 = v74;
        v48 = v75;
        v49 = v76;
        v75 = 0;
        v76 = 0;
        v74 = 0uLL;
        *(_BYTE *)a8 = 0;
        *(_OWORD *)(a8 + 24) = v47;
        *(_QWORD *)(a8 + 40) = v48;
        *(_QWORD *)(a8 + 48) = v49;
        re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v72);
LABEL_28:
        re::StringID::destroyString((re::StringID *)&v69);
        re::StringID::destroyString((re::StringID *)&v70);
        goto LABEL_29;
      }
      v24 = v73;
      *(_QWORD *)&v73.var0 = 0;
      v73.var1 = (char *)&str_110;
      v25 = (char)v69.var0;
      v26 = v69.var1;
      v69 = v24;
      *(_QWORD *)&v58 = *(_QWORD *)&v24.var0 & 0xFFFFFFFFFFFFFFFELL | v25 & 1;
      *((_QWORD *)&v58 + 1) = v26;
      re::StringID::destroyString((re::StringID *)&v58);
      re::StringID::operator=(&v70, (uint64_t *)&v69);
      v21 = re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v72);
    }
    v27 = v79;
    v28 = v71;
    if ((v70 ^ v78) <= 1 && (v79 == v71 || (v21 = strcmp(v79, v71), !(_DWORD)v21)))
    {
      v56 = (_anonymous_namespace_ *)(*((_QWORD *)this + 2) + 136);
      *(_QWORD *)&v58 = 0;
      *((_QWORD *)&v58 + 1) = &str_110;
      v50 = re::StringID::StringID((re::StringID *)v59, &v86);
      v60[0] = 0;
      v60[1] = &str_110;
      v51 = re::StringID::StringID((re::StringID *)v61, &v77);
      if (a6)
      {
        v62[0] = 0;
        v62[1] = &str_110;
      }
      else
      {
        v52 = re::StringID::invalid((re::StringID *)v62);
      }
      v63[0] = 0;
      v63[1] = &str_110;
      v53 = re::StringID::StringID((re::StringID *)v64, &v81);
      v65[0] = 0;
      v65[1] = &str_110;
      v54 = re::StringID::StringID((re::StringID *)v66, &v69);
      if (__s)
      {
        v67[0] = 0;
        v67[1] = &str_110;
      }
      else
      {
        re::StringID::invalid((re::StringID *)v67);
      }
      re::DynamicArray<re::RigGraphConnection>::add(v56, (uint64_t *)&v58);
      re::StringID::destroyString((re::StringID *)v67);
      re::StringID::destroyString((re::StringID *)v66);
      re::StringID::destroyString((re::StringID *)v65);
      re::StringID::destroyString((re::StringID *)v64);
      re::StringID::destroyString((re::StringID *)v63);
      re::StringID::destroyString((re::StringID *)v62);
      re::StringID::destroyString((re::StringID *)v61);
      re::StringID::destroyString((re::StringID *)v60);
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v58);
      *(_BYTE *)a8 = 1;
    }
    else
    {
      re::DynamicString::format((re::DynamicString *)"Cannot make connection between two different types: %s - %s", (re::DynamicString *)&v58, v27, v28);
      v29 = v58;
      v30 = v59[0];
      v31 = v59[1];
      *(_BYTE *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 5004;
      *(_QWORD *)(a8 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a8 + 24) = v29;
      *(_QWORD *)(a8 + 40) = v30;
      *(_QWORD *)(a8 + 48) = v31;
    }
    goto LABEL_28;
  }
  *(_OWORD *)(a8 + 8) = v96;
  v32 = v97;
  v33 = v98;
  v34 = v99;
  v98 = 0;
  v99 = 0;
  v97 = 0uLL;
  *(_BYTE *)a8 = 0;
  *(_OWORD *)(a8 + 24) = v32;
  *(_QWORD *)(a8 + 40) = v33;
  *(_QWORD *)(a8 + 48) = v34;
  return re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v95);
}

uint64_t re::RigGraphDefinitionBuilder::promoteParameter@<X0>(const char **this@<X0>, const char *a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, const char *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _QWORD *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v21;
  StringID v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[16];
  _BYTE v27[16];
  _QWORD v28[2];
  _QWORD v29[2];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];
  StringID v33;
  StringID v34;
  StringID v35;
  StringID v36;
  StringID v37;
  StringID v38;
  StringID v39;
  StringID v40;
  StringID v41;
  StringID v42;
  _BYTE v43[8];
  StringID v44;
  uint64_t v45;
  _BYTE v46[8];
  StringID v47;
  uint64_t v48;

  re::RigGraphDefinitionBuilder::getNodeType((re::RigGraphDefinitionBuilder *)v46, this[2], a2);
  if (v46[0])
  {
    re::RigGraphDefinitionBuilder::getParameterType((re::RigGraphDefinitionBuilder *)v43, (const char *)this, v47.var1, a3, a6);
    if (v43[0])
    {
      *(_QWORD *)&v38.var0 = 7118140;
      v38.var1 = "this";
      v14 = re::StringID::StringID((re::StringID *)&v39, &v44);
      *(_QWORD *)&v40.var0 = 0;
      v40.var1 = (char *)&str_110;
      re::StringID::invalid((re::StringID *)&v41);
      v15 = re::StringID::invalid((re::StringID *)&v42);
      *(_QWORD *)&v33.var0 = 0;
      v33.var1 = (char *)&str_110;
      v16 = re::StringID::StringID((re::StringID *)&v34, &v44);
      *(_QWORD *)&v35.var0 = 0;
      v35.var1 = (char *)&str_110;
      re::StringID::invalid((re::StringID *)&v36);
      re::StringID::invalid((re::StringID *)&v37);
      v21 = (_anonymous_namespace_ *)(this[2] + 136);
      if (a6)
      {
        re::StringID::StringID((re::StringID *)&v22, &v38);
        re::StringID::StringID((re::StringID *)&v23, &v39);
        re::StringID::StringID((re::StringID *)((char *)&v24 + 8), &v40);
        re::StringID::StringID((re::StringID *)v26, &v41);
        re::StringID::StringID((re::StringID *)v27, &v42);
        re::StringID::StringID((re::StringID *)v28, &v33);
        re::StringID::StringID((re::StringID *)v29, &v34);
        re::StringID::StringID((re::StringID *)v30, &v35);
        re::StringID::StringID((re::StringID *)v31, &v36);
        re::StringID::StringID((re::StringID *)v32, &v37);
        re::DynamicArray<re::RigGraphConnection>::add(v21, (uint64_t *)&v22);
        re::StringID::destroyString((re::StringID *)v32);
        re::StringID::destroyString((re::StringID *)v31);
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)v29);
        re::StringID::destroyString((re::StringID *)v28);
        re::StringID::destroyString((re::StringID *)v27);
        re::StringID::destroyString((re::StringID *)v26);
        re::StringID::destroyString((re::StringID *)((char *)&v24 + 8));
        re::StringID::destroyString((re::StringID *)&v23);
        re::StringID::destroyString((re::StringID *)&v22);
        v17 = this[2] + 16;
      }
      else
      {
        re::StringID::StringID((re::StringID *)&v22, &v33);
        re::StringID::StringID((re::StringID *)&v23, &v34);
        re::StringID::StringID((re::StringID *)((char *)&v24 + 8), &v35);
        re::StringID::StringID((re::StringID *)v26, &v36);
        re::StringID::StringID((re::StringID *)v27, &v37);
        re::StringID::StringID((re::StringID *)v28, &v38);
        re::StringID::StringID((re::StringID *)v29, &v39);
        re::StringID::StringID((re::StringID *)v30, &v40);
        re::StringID::StringID((re::StringID *)v31, &v41);
        re::StringID::StringID((re::StringID *)v32, &v42);
        re::DynamicArray<re::RigGraphConnection>::add(v21, (uint64_t *)&v22);
        re::StringID::destroyString((re::StringID *)v32);
        re::StringID::destroyString((re::StringID *)v31);
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)v29);
        re::StringID::destroyString((re::StringID *)v28);
        re::StringID::destroyString((re::StringID *)v27);
        re::StringID::destroyString((re::StringID *)v26);
        re::StringID::destroyString((re::StringID *)((char *)&v24 + 8));
        re::StringID::destroyString((re::StringID *)&v23);
        re::StringID::destroyString((re::StringID *)&v22);
        v17 = this[2] + 56;
      }
      re::StringID::StringID((re::StringID *)&v22, &v33);
      re::StringID::StringID((re::StringID *)&v23, &v34);
      re::StringID::StringID((re::StringID *)((char *)&v24 + 8), &v35);
      re::StringID::StringID((re::StringID *)v26, &v36);
      v18 = re::StringID::StringID((re::StringID *)v27, &v37);
      v28[0] = 0;
      v28[1] = &str_110;
      v29[0] = 0;
      v29[1] = &str_110;
      re::DynamicArray<re::RigGraphParameterProxy>::add(v17, (uint64_t *)&v22);
      re::StringID::destroyString((re::StringID *)v29);
      re::StringID::destroyString((re::StringID *)v28);
      re::StringID::destroyString((re::StringID *)v27);
      re::StringID::destroyString((re::StringID *)v26);
      re::StringID::destroyString((re::StringID *)((char *)&v24 + 8));
      re::StringID::destroyString((re::StringID *)&v23);
      re::StringID::destroyString((re::StringID *)&v22);
      *(_BYTE *)a7 = 1;
      re::StringID::destroyString((re::StringID *)&v37);
      re::StringID::destroyString((re::StringID *)&v36);
      re::StringID::destroyString((re::StringID *)&v35);
      re::StringID::destroyString((re::StringID *)&v34);
      re::StringID::destroyString((re::StringID *)&v33);
      re::StringID::destroyString((re::StringID *)&v42);
      re::StringID::destroyString((re::StringID *)&v41);
      re::StringID::destroyString((re::StringID *)&v40);
      re::StringID::destroyString((re::StringID *)&v39);
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      v22 = v44;
      re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v45);
      *(_BYTE *)a7 = 0;
      *(StringID *)(a7 + 8) = v22;
      *(_QWORD *)(a7 + 24) = v23;
      *(_QWORD *)(a7 + 48) = v25;
      *(_OWORD *)(a7 + 32) = v24;
    }
    re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v43);
  }
  else
  {
    v22 = v47;
    re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v48);
    *(_BYTE *)a7 = 0;
    *(StringID *)(a7 + 8) = v22;
    *(_QWORD *)(a7 + 24) = v23;
    *(_QWORD *)(a7 + 48) = v25;
    *(_OWORD *)(a7 + 32) = v24;
  }
  return re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v46);
}

_QWORD *re::DynamicArray<re::RigGraphParameterProxy>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RigGraphParameterProxy>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 112 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  v8 = a2[4];
  v5[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[5] = a2[5];
  a2[4] = 0;
  a2[5] = (uint64_t)&str_110;
  v9 = a2[6];
  v5[6] = v5[6] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v5[6] = a2[6] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v5[7] = a2[7];
  a2[6] = 0;
  a2[7] = (uint64_t)&str_110;
  v10 = a2[8];
  v5[8] = v5[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v5[8] = a2[8] & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v5[9] = a2[9];
  a2[8] = 0;
  a2[9] = (uint64_t)&str_110;
  v11 = a2[10];
  v5[10] = v5[10] & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  v5[10] = a2[10] & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  v5[11] = a2[11];
  a2[10] = 0;
  a2[11] = (uint64_t)&str_110;
  v12 = a2[12];
  v5[12] = v5[12] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v5[12] = a2[12] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v5[13] = a2[13];
  a2[12] = 0;
  a2[13] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void `anonymous namespace'::getNodeType(uint64_t a1, const char *a2, uint64_t a3, const StringID *a4)
{
  const StringID *v6;
  uint64_t v7;
  char *var1;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *__s2[2];
  uint64_t v15;
  uint64_t v16;

  if (!a3)
  {
LABEL_9:
    re::DynamicString::format((re::DynamicString *)"Node name '%s' not found!", (re::DynamicString *)__s2, a2);
    v10 = *(_OWORD *)__s2;
    v11 = v15;
    v12 = v16;
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 5005;
    *(_QWORD *)(a1 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    return;
  }
  v6 = a4 + 1;
  v7 = 32 * a3;
  while (1)
  {
    __s2[0] = 0;
    __s2[1] = (char *)&str_110;
    if (((uint64_t)__s2[0] ^ *(_QWORD *)&v6[-1].var0) >= 2uLL)
    {
      re::StringID::destroyString((re::StringID *)__s2);
      goto LABEL_8;
    }
    var1 = v6[-1].var1;
    if (var1 == __s2[1])
      break;
    v9 = strcmp(var1, __s2[1]);
    re::StringID::destroyString((re::StringID *)__s2);
    if (!v9)
      goto LABEL_11;
LABEL_8:
    v6 += 2;
    v7 -= 32;
    if (!v7)
      goto LABEL_9;
  }
  re::StringID::destroyString((re::StringID *)__s2);
LABEL_11:
  re::StringID::StringID((re::StringID *)__s2, v6);
  *(_BYTE *)a1 = 1;
  v13 = __s2[1];
  *(char **)(a1 + 8) = __s2[0];
  *(_QWORD *)(a1 + 16) = v13;
  __s2[0] = 0;
  __s2[1] = (char *)&str_110;
  re::StringID::destroyString((re::StringID *)__s2);
}

void `anonymous namespace'::getParameterCount(_anonymous_namespace_ *this@<X0>, re::RigEnvironment *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;

  if (this)
  {
    v7 = *(char *)this;
    if (*(_BYTE *)this)
    {
      v8 = *((_BYTE *)this + 1);
      if (v8)
      {
        v9 = (unsigned __int8 *)this + 2;
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *v9++;
          v8 = v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v20 = 2 * v7;
  v21 = this;
  v11 = re::RigEnvironment::lookupRigGraphNode(a2, (const re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v20);
  if (v11)
  {
    v12 = (uint64_t *)(v11 + 16);
LABEL_19:
    v19 = *v12;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v19;
    return;
  }
  if (this)
  {
    v13 = *(char *)this;
    if (*(_BYTE *)this)
    {
      v14 = *((_BYTE *)this + 1);
      if (v14)
      {
        v15 = (unsigned __int8 *)this + 2;
        do
        {
          v13 = 31 * v13 + v14;
          v16 = *v15++;
          v14 = v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v20 = 2 * v13;
  v21 = this;
  v17 = re::RigEnvironment::lookupRigGraphOperator(a2, (const re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v20);
  if (v17)
  {
    v12 = (uint64_t *)(v17 + 24);
    goto LABEL_19;
  }
  re::internal::assertLog((re::internal *)5, v18, "assertion failure: '%s' (%s:line %i) Node type %s not found!", "false", "getParameterCount", 25, this);
  _os_crash();
  __break(1u);
}

unint64_t re::RigGraphNode::inputType(re::RigGraphNode *this, unint64_t a2)
{
  unint64_t v2;

  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 40 * a2 + 16);
  if (*((_QWORD *)this + 17) <= v2)
    goto LABEL_5;
  return *((_QWORD *)this + 19) + 16 * v2;
}

void re::RigGraphDefinitionValidator::validate(re::RigGraphDefinitionValidator *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  re::RigGraphDefinitionValidator *v4;
  uint64_t v5;
  _anonymous_namespace_ **v6;
  uint64_t v7;
  const char *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t i;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t j;
  unint64_t v25;
  _BYTE *v27;
  unint64_t v28;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  StringID *v34;
  unint64_t v35;
  char *var1;
  unint64_t v38;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  int v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  StringID *v93;
  const StringID *v94;
  StringID *v95;
  StringID *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v102;
  uint64_t v103;
  _BYTE v104[24];
  __int128 v105;
  char *v106;
  _QWORD v107[2];
  _BYTE v108[16];
  unint64_t v109;
  char *__s1;
  _BYTE v111[16];
  _BYTE v112[24];
  __int128 v113;
  uint64_t v114;
  uint64_t v115;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v3)
  {
    re::DynamicString::format((re::DynamicString *)"Undefined rig definition!", (re::DynamicString *)v104);
    v71 = *(_OWORD *)v104;
    v72 = *(_QWORD *)&v104[16];
    v73 = v105;
    *(_BYTE *)a2 = 0;
    v74 = 3000;
    goto LABEL_180;
  }
  v4 = this;
  if (!*((_QWORD *)this + 2))
  {
    re::DynamicString::format((re::DynamicString *)"Undefined rig environment!", (re::DynamicString *)v104);
    v71 = *(_OWORD *)v104;
    v72 = *(_QWORD *)&v104[16];
    v73 = v105;
    *(_BYTE *)a2 = 0;
    v74 = 5001;
    goto LABEL_180;
  }
  v5 = v3[14];
  if (v5)
  {
    v6 = (_anonymous_namespace_ **)(v3[16] + 24);
    v7 = 32 * v5;
    do
    {
      v8 = (const char *)*(v6 - 2);
      if (v104[0])
      {
        *(_QWORD *)v112 = 0;
        *(_QWORD *)&v112[8] = &str_110;
        v102 = (const char *)(*(_QWORD *)(*((_QWORD *)this + 1) + 112) - 1);
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 24, (StringID *)v112, &v102);
        re::StringID::destroyString((re::StringID *)v112);
        *(_BYTE *)a2 = 1;
      }
      else
      {
        *(_OWORD *)v112 = *(_OWORD *)&v104[8];
        re::DynamicString::DynamicString((re::DynamicString *)&v112[16], (const re::DynamicString *)&v105);
        *(_BYTE *)a2 = 0;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)v112;
        v10 = v114;
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&v112[16];
        *(_QWORD *)(a2 + 48) = v10;
        *(_OWORD *)(a2 + 32) = v113;
        if (!(_QWORD)v105)
          return;
        if ((BYTE8(v105) & 1) == 0)
          return;
        (*(void (**)(void))(*(_QWORD *)v105 + 40))();
        if (!*(_BYTE *)a2)
          return;
      }
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
    v4 = this;
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v11 = v3[4];
  if (v11)
  {
    v12 = (_QWORD *)(v3[6] + 88);
    for (i = 112 * v11; i; i -= 112)
    {
      v14 = *(v12 - 7);
      v15 = v14 >= 0xFFFFFFFFFFFFFFFELL && (*(v12 - 7) & 1) == 0;
      if (v15)
      {
        v16 = (_BYTE *)*(v12 - 6);
      }
      else
      {
        if (v14 > 1)
          goto LABEL_23;
        v16 = (_BYTE *)*(v12 - 6);
        if (!v16)
          goto LABEL_23;
      }
      if (!*v16)
      {
        re::DynamicString::format((re::DynamicString *)"Input parameter name '%s' contains invalid parameter value '%s'.", (re::DynamicString *)v104, *v12, v16);
        goto LABEL_179;
      }
LABEL_23:
      v17 = *(v12 - 11);
      if (v17 >= 0xFFFFFFFFFFFFFFFELL && (*(v12 - 11) & 1) == 0)
      {
        v19 = (_BYTE *)*(v12 - 10);
      }
      else
      {
        if (v17 > 1)
          goto LABEL_32;
        v19 = (_BYTE *)*(v12 - 10);
        if (!v19)
          goto LABEL_32;
      }
      if (!*v19)
      {
        re::DynamicString::format((re::DynamicString *)"Input parameter name '%s' contains invalid node value '%s'.", (re::DynamicString *)v104, *v12, v19);
        goto LABEL_179;
      }
LABEL_32:
      v20 = *(v12 - 9);
      if (v20 >= 0xFFFFFFFFFFFFFFFELL && (v20 & 1) == 0)
      {
        v21 = (_BYTE *)*(v12 - 8);
LABEL_37:
        if (!*v21)
        {
          re::DynamicString::format((re::DynamicString *)"Input parameter name '%s' contains invalid type value '%s'.", (re::DynamicString *)v104, *v12, v21);
          goto LABEL_179;
        }
        goto LABEL_38;
      }
      if (v20 <= 1)
      {
        v21 = (_BYTE *)*(v12 - 8);
        if (v21)
          goto LABEL_37;
      }
LABEL_38:
      v12 += 14;
    }
  }
  v22 = v3[9];
  if (v22)
  {
    v23 = (_QWORD *)(v3[11] + 88);
    for (j = 112 * v22; j; j -= 112)
    {
      v25 = *(v23 - 7);
      if (v25 >= 0xFFFFFFFFFFFFFFFELL && (*(v23 - 7) & 1) == 0)
      {
        v27 = (_BYTE *)*(v23 - 6);
      }
      else
      {
        if (v25 > 1)
          goto LABEL_50;
        v27 = (_BYTE *)*(v23 - 6);
        if (!v27)
          goto LABEL_50;
      }
      if (!*v27)
      {
        re::DynamicString::format((re::DynamicString *)"Output parameter name '%s' contains invalid parameter value '%s'.", (re::DynamicString *)v104, *v23, v27);
        goto LABEL_179;
      }
LABEL_50:
      v28 = *(v23 - 11);
      if (v28 >= 0xFFFFFFFFFFFFFFFELL && (*(v23 - 11) & 1) == 0)
      {
        v30 = (_BYTE *)*(v23 - 10);
      }
      else
      {
        if (v28 > 1)
          goto LABEL_59;
        v30 = (_BYTE *)*(v23 - 10);
        if (!v30)
          goto LABEL_59;
      }
      if (!*v30)
      {
        re::DynamicString::format((re::DynamicString *)"Output parameter name '%s' contains invalid node value '%s'.", (re::DynamicString *)v104, *v23, v30);
        goto LABEL_179;
      }
LABEL_59:
      v31 = *(v23 - 9);
      if (v31 < 0xFFFFFFFFFFFFFFFELL || (v31 & 1) != 0)
      {
        if (v31 > 1)
          goto LABEL_65;
        v32 = (_BYTE *)*(v23 - 8);
        if (!v32)
          goto LABEL_65;
      }
      else
      {
        v32 = (_BYTE *)*(v23 - 8);
      }
      if (!*v32)
      {
        re::DynamicString::format((re::DynamicString *)"Output parameter name '%s' contains invalid type value '%s'.", (re::DynamicString *)v104, *v23, v32);
LABEL_179:
        v71 = *(_OWORD *)v104;
        v72 = *(_QWORD *)&v104[16];
        v73 = v105;
        *(_BYTE *)a2 = 0;
        v74 = 5006;
LABEL_180:
        *(_QWORD *)(a2 + 8) = v74;
        *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(a2 + 24) = v71;
        *(_QWORD *)(a2 + 40) = v72;
        *(_QWORD *)(a2 + 48) = v73;
        return;
      }
LABEL_65:
      v23 += 14;
    }
  }
  v33 = v3[19];
  if (!v33)
  {
LABEL_170:
    *(_BYTE *)a2 = 1;
    return;
  }
  v34 = (StringID *)v3[21];
  v92 = (uint64_t)v4 + 24;
  v93 = &v34[10 * v33];
  while (1)
  {
    v35 = *(_QWORD *)&v34[2].var0;
    if (v35 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)&v34[2].var0 & 1) == 0)
    {
      var1 = v34[2].var1;
    }
    else
    {
      if (v35 > 1)
        goto LABEL_77;
      var1 = v34[2].var1;
      if (!var1)
        goto LABEL_77;
    }
    if (!*var1)
    {
      re::DynamicString::format((re::DynamicString *)"Source parameter name '%s' is invalid for node '%s' connection!", (re::DynamicString *)v104, var1, v34->var1);
      goto LABEL_187;
    }
LABEL_77:
    v38 = *(_QWORD *)&v34[7].var0;
    if (v38 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)&v34[7].var0 & 1) == 0)
    {
      v40 = v34[7].var1;
LABEL_85:
      if (*v40)
        goto LABEL_86;
      re::DynamicString::format((re::DynamicString *)"Target parameter name '%s' is invalid for node '%s' connection!", (re::DynamicString *)v104, v40, v34[5].var1);
LABEL_187:
      v81 = *(_OWORD *)v104;
      v82 = *(_QWORD *)&v104[16];
      v83 = v105;
      v84 = a2;
      *(_BYTE *)a2 = 0;
      v85 = 5006;
      goto LABEL_189;
    }
    if (v38 <= 1)
    {
      v40 = v34[7].var1;
      if (v40)
        goto LABEL_85;
    }
LABEL_86:
    v96 = v34 + 7;
    if ((*(_QWORD *)&v34->var0 & 0xFFFFFFFFFFFFFFFELL) != 0x6C9D3C
      || (v41 = v34->var1, v41 != "this") && strcmp(v41, "this"))
    {
      if (re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v92, v34))
      {
        re::RigGraphDefinitionBuilder::getNodeType((re::RigGraphDefinitionBuilder *)v104, *((const char **)v4 + 1), v34->var1);
        if (!v104[0])
          goto LABEL_182;
        re::RigGraphDefinitionValidator::getParameterType((re::RigGraphDefinitionValidator *)v112, (const char *)v4, *(const char **)&v104[16], v34[2].var1, 0);
        if (!v112[0])
        {
LABEL_183:
          *(_OWORD *)(a2 + 8) = *(_OWORD *)&v112[8];
          v78 = v113;
          v79 = v114;
          v80 = v115;
          v114 = 0;
          v115 = 0;
          v113 = 0uLL;
          *(_BYTE *)a2 = 0;
          *(_OWORD *)(a2 + 24) = v78;
          *(_QWORD *)(a2 + 40) = v79;
          *(_QWORD *)(a2 + 48) = v80;
          re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v112);
          goto LABEL_184;
        }
        re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v112);
        re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v104);
        goto LABEL_128;
      }
      re::DynamicString::format((re::DynamicString *)"Node name '%s' not found for connection!", (re::DynamicString *)v104, v34->var1);
      v81 = *(_OWORD *)v104;
      v82 = *(_QWORD *)&v104[16];
      v83 = v105;
      v84 = a2;
      *(_BYTE *)a2 = 0;
      v85 = 5005;
LABEL_189:
      *(_QWORD *)(v84 + 8) = v85;
      *(_QWORD *)(v84 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(v84 + 24) = v81;
      *(_QWORD *)(v84 + 40) = v82;
      *(_QWORD *)(v84 + 48) = v83;
      return;
    }
    re::StringID::StringID((re::StringID *)v112, v34 + 2);
    v42 = (_QWORD *)*((_QWORD *)v4 + 1);
    v43 = v42[4];
    v94 = v34;
    if (!v43)
      goto LABEL_110;
    v44 = 0;
    v45 = 0;
    v97 = v42[6];
    v46 = 112 * v43 - 112;
    do
    {
      re::StringID::StringID((re::StringID *)v104, (const StringID *)(v97 + v44));
      re::StringID::StringID((re::StringID *)&v104[16], (const StringID *)(v97 + v44 + 16));
      re::StringID::StringID((re::StringID *)((char *)&v105 + 8), (const StringID *)(v97 + v44 + 32));
      re::StringID::StringID((re::StringID *)v107, (const StringID *)(v97 + v44 + 48));
      re::StringID::StringID((re::StringID *)v108, (const StringID *)(v97 + v44 + 64));
      re::StringID::StringID((re::StringID *)&v109, (const StringID *)(v97 + v44 + 80));
      re::StringID::StringID((re::StringID *)v111, (const StringID *)(v97 + v44 + 96));
      v47 = *(_QWORD *)v112;
      if ((*(_QWORD *)v112 ^ v109) <= 1 && (__s1 == *(char **)&v112[8] || !strcmp(__s1, *(const char **)&v112[8])))
      {
        v45 = 1;
        v48 = 1;
      }
      else
      {
        v48 = (*((_QWORD *)&v105 + 1) ^ v47) <= 1
           && (v106 == *(char **)&v112[8] || strcmp(v106, *(const char **)&v112[8]) == 0);
        v45 |= v48;
      }
      re::StringID::destroyString((re::StringID *)v111);
      re::StringID::destroyString((re::StringID *)&v109);
      re::StringID::destroyString((re::StringID *)v108);
      re::StringID::destroyString((re::StringID *)v107);
      re::StringID::destroyString((re::StringID *)((char *)&v105 + 8));
      re::StringID::destroyString((re::StringID *)&v104[16]);
      re::StringID::destroyString((re::StringID *)v104);
      if (v48)
        break;
      v15 = v46 == v44;
      v44 += 112;
    }
    while (!v15);
    if ((v45 & 1) == 0)
    {
      v42 = (_QWORD *)*((_QWORD *)this + 1);
LABEL_110:
      v49 = v42[9];
      if (!v49)
        goto LABEL_190;
      v50 = 0;
      v51 = 0;
      v52 = v42[11];
      v98 = 112 * v49 - 112;
      do
      {
        re::StringID::StringID((re::StringID *)v104, (const StringID *)(v52 + v50));
        re::StringID::StringID((re::StringID *)&v104[16], (const StringID *)(v52 + v50 + 16));
        re::StringID::StringID((re::StringID *)((char *)&v105 + 8), (const StringID *)(v52 + v50 + 32));
        re::StringID::StringID((re::StringID *)v107, (const StringID *)(v52 + v50 + 48));
        re::StringID::StringID((re::StringID *)v108, (const StringID *)(v52 + v50 + 64));
        re::StringID::StringID((re::StringID *)&v109, (const StringID *)(v52 + v50 + 80));
        re::StringID::StringID((re::StringID *)v111, (const StringID *)(v52 + v50 + 96));
        v53 = *(_QWORD *)v112;
        if ((*(_QWORD *)v112 ^ v109) <= 1 && (__s1 == *(char **)&v112[8] || !strcmp(__s1, *(const char **)&v112[8])))
        {
          v51 = 1;
          v54 = 1;
        }
        else
        {
          v54 = (*((_QWORD *)&v105 + 1) ^ v53) <= 1
             && (v106 == *(char **)&v112[8] || strcmp(v106, *(const char **)&v112[8]) == 0);
          v51 |= v54;
        }
        re::StringID::destroyString((re::StringID *)v111);
        re::StringID::destroyString((re::StringID *)&v109);
        re::StringID::destroyString((re::StringID *)v108);
        re::StringID::destroyString((re::StringID *)v107);
        re::StringID::destroyString((re::StringID *)((char *)&v105 + 8));
        re::StringID::destroyString((re::StringID *)&v104[16]);
        re::StringID::destroyString((re::StringID *)v104);
        if (v54)
          break;
        v15 = v98 == v50;
        v50 += 112;
      }
      while (!v15);
      if ((v51 & 1) == 0)
      {
LABEL_190:
        re::DynamicString::format((re::DynamicString *)"Source parameter name '%s' not found for node '%s' connection!", (re::DynamicString *)v104, *(_QWORD *)&v112[8], v94->var1);
        goto LABEL_192;
      }
    }
    v34 = (StringID *)v94;
    re::StringID::StringID((re::StringID *)&v102, v94 + 1);
    v4 = this;
    re::RigEnvironment::lookupRigDataType(*((re::RigEnvironment **)this + 2), &v102, v104);
    v55 = v104[0];
    re::Optional<re::RigDataTypeClass>::~Optional(v104);
    if (!v55)
    {
      re::DynamicString::format((re::DynamicString *)"Source parameter name '%s' type '%s' not found!", (re::DynamicString *)v104, *(_QWORD *)&v112[8], v103);
      goto LABEL_195;
    }
    re::StringID::destroyString((re::StringID *)&v102);
    re::StringID::destroyString((re::StringID *)v112);
LABEL_128:
    v56 = v34[5].var1;
    if ((*(_QWORD *)&v34[5].var0 & 0xFFFFFFFFFFFFFFFELL) == 0x6C9D3C && (v56 == "this" || !strcmp(v34[5].var1, "this")))
      break;
    re::RigGraphDefinitionBuilder::getNodeType((re::RigGraphDefinitionBuilder *)v104, *((const char **)v4 + 1), v56);
    if (!v104[0])
    {
LABEL_182:
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&v104[8];
      v75 = v105;
      v76 = v106;
      v77 = v107[0];
      v106 = 0;
      v107[0] = 0;
      v105 = 0uLL;
      *(_BYTE *)a2 = 0;
      *(_OWORD *)(a2 + 24) = v75;
      *(_QWORD *)(a2 + 40) = v76;
      *(_QWORD *)(a2 + 48) = v77;
LABEL_184:
      re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v104);
      return;
    }
    re::RigGraphDefinitionValidator::getParameterType((re::RigGraphDefinitionValidator *)v112, (const char *)v4, *(const char **)&v104[16], v34[7].var1, 1);
    if (!v112[0])
      goto LABEL_183;
    re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v112);
    re::Result<re::StringID,re::DetailedError>::~Result((uint64_t)v104);
LABEL_169:
    v34 += 10;
    if (v34 == v93)
      goto LABEL_170;
  }
  re::StringID::StringID((re::StringID *)v112, v96);
  v57 = (_QWORD *)*((_QWORD *)v4 + 1);
  v58 = v57[4];
  v95 = v34;
  if (v58)
  {
    v59 = 0;
    v60 = 0;
    v61 = v57[6];
    v99 = 112 * v58 - 112;
    do
    {
      re::StringID::StringID((re::StringID *)v104, (const StringID *)(v61 + v59));
      re::StringID::StringID((re::StringID *)&v104[16], (const StringID *)(v61 + v59 + 16));
      re::StringID::StringID((re::StringID *)((char *)&v105 + 8), (const StringID *)(v61 + v59 + 32));
      re::StringID::StringID((re::StringID *)v107, (const StringID *)(v61 + v59 + 48));
      re::StringID::StringID((re::StringID *)v108, (const StringID *)(v61 + v59 + 64));
      re::StringID::StringID((re::StringID *)&v109, (const StringID *)(v61 + v59 + 80));
      re::StringID::StringID((re::StringID *)v111, (const StringID *)(v61 + v59 + 96));
      v62 = *(_QWORD *)v112;
      if ((*(_QWORD *)v112 ^ v109) <= 1 && (__s1 == *(char **)&v112[8] || !strcmp(__s1, *(const char **)&v112[8])))
      {
        v60 = 1;
        v63 = 1;
      }
      else
      {
        v63 = (*((_QWORD *)&v105 + 1) ^ v62) <= 1
           && (v106 == *(char **)&v112[8] || strcmp(v106, *(const char **)&v112[8]) == 0);
        v60 |= v63;
      }
      re::StringID::destroyString((re::StringID *)v111);
      re::StringID::destroyString((re::StringID *)&v109);
      re::StringID::destroyString((re::StringID *)v108);
      re::StringID::destroyString((re::StringID *)v107);
      re::StringID::destroyString((re::StringID *)((char *)&v105 + 8));
      re::StringID::destroyString((re::StringID *)&v104[16]);
      re::StringID::destroyString((re::StringID *)v104);
      if (v63)
        break;
      v15 = v99 == v59;
      v59 += 112;
    }
    while (!v15);
    v34 = v95;
    if ((v60 & 1) == 0)
    {
      v57 = (_QWORD *)*((_QWORD *)this + 1);
      goto LABEL_151;
    }
LABEL_167:
    re::StringID::StringID((re::StringID *)&v102, v34 + 6);
    v4 = this;
    re::RigEnvironment::lookupRigDataType(*((re::RigEnvironment **)this + 2), &v102, v104);
    v70 = v104[0];
    re::Optional<re::RigDataTypeClass>::~Optional(v104);
    if (v70)
    {
      re::StringID::destroyString((re::StringID *)&v102);
      re::StringID::destroyString((re::StringID *)v112);
      goto LABEL_169;
    }
    re::DynamicString::format((re::DynamicString *)"Target parameter name '%s' type '%s' not found!", (re::DynamicString *)v104, *(_QWORD *)&v112[8], v103);
LABEL_195:
    v89 = *(_OWORD *)v104;
    v90 = *(_QWORD *)&v104[16];
    v91 = v105;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 5000;
    *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a2 + 24) = v89;
    *(_QWORD *)(a2 + 40) = v90;
    *(_QWORD *)(a2 + 48) = v91;
    re::StringID::destroyString((re::StringID *)&v102);
    goto LABEL_196;
  }
LABEL_151:
  v64 = v57[9];
  if (v64)
  {
    v65 = 0;
    v66 = 0;
    v67 = v57[11];
    v100 = 112 * v64 - 112;
    do
    {
      re::StringID::StringID((re::StringID *)v104, (const StringID *)(v67 + v65));
      re::StringID::StringID((re::StringID *)&v104[16], (const StringID *)(v67 + v65 + 16));
      re::StringID::StringID((re::StringID *)((char *)&v105 + 8), (const StringID *)(v67 + v65 + 32));
      re::StringID::StringID((re::StringID *)v107, (const StringID *)(v67 + v65 + 48));
      re::StringID::StringID((re::StringID *)v108, (const StringID *)(v67 + v65 + 64));
      re::StringID::StringID((re::StringID *)&v109, (const StringID *)(v67 + v65 + 80));
      re::StringID::StringID((re::StringID *)v111, (const StringID *)(v67 + v65 + 96));
      v68 = *(_QWORD *)v112;
      if ((*(_QWORD *)v112 ^ v109) <= 1 && (__s1 == *(char **)&v112[8] || !strcmp(__s1, *(const char **)&v112[8])))
      {
        v66 = 1;
        v69 = 1;
      }
      else
      {
        v69 = (*((_QWORD *)&v105 + 1) ^ v68) <= 1
           && (v106 == *(char **)&v112[8] || strcmp(v106, *(const char **)&v112[8]) == 0);
        v66 |= v69;
      }
      re::StringID::destroyString((re::StringID *)v111);
      re::StringID::destroyString((re::StringID *)&v109);
      re::StringID::destroyString((re::StringID *)v108);
      re::StringID::destroyString((re::StringID *)v107);
      re::StringID::destroyString((re::StringID *)((char *)&v105 + 8));
      re::StringID::destroyString((re::StringID *)&v104[16]);
      re::StringID::destroyString((re::StringID *)v104);
      if (v69)
        break;
      v15 = v100 == v65;
      v65 += 112;
    }
    while (!v15);
    v34 = v95;
    if ((v66 & 1) != 0)
      goto LABEL_167;
  }
  re::DynamicString::format((re::DynamicString *)"Target parameter name '%s' not found for node '%s' connection!", (re::DynamicString *)v104, *(_QWORD *)&v112[8], v34->var1);
LABEL_192:
  v86 = *(_OWORD *)v104;
  v87 = *(_QWORD *)&v104[16];
  v88 = v105;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 5006;
  *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a2 + 24) = v86;
  *(_QWORD *)(a2 + 40) = v87;
  *(_QWORD *)(a2 + 48) = v88;
LABEL_196:
  re::StringID::destroyString((re::StringID *)v112);
}

void re::RigGraphDefinitionValidator::getParameterType(re::RigGraphDefinitionValidator *this, const char *a2, const char *a3, const char *a4, int a5)
{
  re::RigEnvironment *v10;
  uint64_t v11;
  char v12;
  const char *v13;
  int v14;
  re::RigGraphNode *v15;
  re::RigGraphNode *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  const char **v21;
  re::RigEnvironment *v22;
  uint64_t v23;
  char v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const StringID *v31;
  size_t v32;
  unint64_t v33;
  const StringID *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const StringID *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v10 = (re::RigEnvironment *)*((_QWORD *)a2 + 2);
  if (a3)
  {
    v11 = *a3;
    if (*a3)
    {
      v12 = a3[1];
      if (v12)
      {
        v13 = a3 + 2;
        do
        {
          v11 = 31 * v11 + v12;
          v14 = *(unsigned __int8 *)v13++;
          v12 = v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)&v41 = 2 * v11;
  *((_QWORD *)&v41 + 1) = a3;
  v15 = (re::RigGraphNode *)re::RigEnvironment::lookupRigGraphNode(v10, (const re::StringID *)&v41);
  re::StringID::destroyString((re::StringID *)&v41);
  if (!v15)
  {
    v22 = (re::RigEnvironment *)*((_QWORD *)a2 + 2);
    if (a3)
    {
      v23 = *a3;
      if (*a3)
      {
        v24 = a3[1];
        if (v24)
        {
          v25 = a3 + 2;
          do
          {
            v23 = 31 * v23 + v24;
            v26 = *(unsigned __int8 *)v25++;
            v24 = v26;
          }
          while (v26);
        }
      }
    }
    else
    {
      v23 = 0;
    }
    *(_QWORD *)&v41 = 2 * v23;
    *((_QWORD *)&v41 + 1) = a3;
    v27 = re::RigEnvironment::lookupRigGraphOperator(v22, (const re::StringID *)&v41);
    re::StringID::destroyString((re::StringID *)&v41);
    if (!v27)
    {
      re::DynamicString::format((re::DynamicString *)"Node type '%s' not found!", (re::DynamicString *)&v41, a3);
      v35 = v41;
      v37 = *((_QWORD *)&v42 + 1);
      v36 = v42;
      *(_BYTE *)this = 0;
      v38 = 5004;
      goto LABEL_33;
    }
    v28 = 40;
    if (a5)
      v28 = 16;
    v29 = v27 + v28;
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v31 = *(const StringID **)(v29 + 16);
      v32 = strlen(a4);
      v33 = 0;
      v34 = v31 + 1;
      while (v32 > strlen(v34[-1].var1) || memcmp(v34[-1].var1, a4, v32))
      {
        ++v33;
        v34 += 2;
        if (v30 == v33)
          goto LABEL_32;
      }
      if (v30 <= v33)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v39 = v34;
      goto LABEL_38;
    }
LABEL_32:
    re::DynamicString::format((re::DynamicString *)"Parameter name '%s' not found!", (re::DynamicString *)&v41, a4);
    v35 = v41;
    v37 = *((_QWORD *)&v42 + 1);
    v36 = v42;
    *(_BYTE *)this = 0;
    v38 = 5006;
LABEL_33:
    *((_QWORD *)this + 1) = v38;
    *((_QWORD *)this + 2) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)((char *)this + 24) = v35;
    *((_QWORD *)this + 5) = v36;
    *((_QWORD *)this + 6) = v37;
    return;
  }
  v16 = (re::RigGraphNode *)((char *)v15 + 40);
  if (a5)
    v16 = v15;
  v17 = *((_QWORD *)v16 + 2);
  if (!v17)
    goto LABEL_32;
  v18 = *((_QWORD *)v16 + 4);
  v19 = strlen(a4);
  v20 = 0;
  v21 = (const char **)(v18 + 8);
  while (v19 > strlen(*v21) || memcmp(*v21, a4, v19))
  {
    ++v20;
    v21 += 5;
    if (v17 == v20)
      goto LABEL_32;
  }
  v39 = (const StringID *)re::RigGraphNode::inputType(v15, v20);
LABEL_38:
  re::StringID::StringID((re::StringID *)&v41, v39);
  *(_BYTE *)this = 1;
  v40 = *((_QWORD *)&v41 + 1);
  *((_QWORD *)this + 1) = v41;
  *((_QWORD *)this + 2) = v40;
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v41 + 1) = &str_110;
  re::StringID::destroyString((re::StringID *)&v41);
}

uint64_t *re::allocInfo_RigGraphNodeParameterHandle(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F7EC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7EC8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F80C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F80D0 = 0;
    qword_2540F80E0 = 0;
    qword_2540F80E8 = 0xFFFFFFFFLL;
    qword_2540F80C0 = (uint64_t)&off_24ED7DAA8;
    qword_2540F80F0 = (uint64_t)"RigGraphNodeParameterHandle";
    dword_2540F80F8 = 0;
    xmmword_2540F8100 = 0u;
    unk_2540F8110 = 0u;
    xmmword_2540F8120 = 0u;
    qword_2540F8130 = 0;
    __cxa_guard_release(&qword_2540F7EC8);
  }
  return &qword_2540F80C0;
}

void re::initInfo_RigGraphNodeParameterHandle(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0xCE511803B47B62;
  v27[1] = "RigGraphNodeParameterHandle";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F7ED0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F7ED0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "node";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540F7FA8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::StringID>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "type";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540F7FB0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "parameter";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540F7FB8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "attributeType";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x3000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540F7FC0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::IntrospectionInfo<re::StringID>::get(1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "attribute";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x4000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2540F7FC8 = v25;
      __cxa_guard_release(&qword_2540F7ED0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540F7FA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigGraphNodeParameterHandle>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigGraphNodeParameterHandle>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigGraphNodeParameterHandle>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigGraphNodeParameterHandle>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

re::StringID *re::internal::defaultConstruct<re::RigGraphNodeParameterHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::invalid((re::StringID *)a3);
  re::StringID::invalid((re::StringID *)(a3 + 16));
  re::StringID::invalid((re::StringID *)(a3 + 32));
  re::StringID::invalid((re::StringID *)(a3 + 48));
  return re::StringID::invalid((re::StringID *)(a3 + 64));
}

void re::internal::defaultDestruct<re::RigGraphNodeParameterHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 64));
  re::StringID::destroyString((re::StringID *)(a3 + 48));
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphNodeParameterHandle>(uint64_t a1)
{
  re::StringID::invalid((re::StringID *)a1);
  re::StringID::invalid((re::StringID *)(a1 + 16));
  re::StringID::invalid((re::StringID *)(a1 + 32));
  re::StringID::invalid((re::StringID *)(a1 + 48));
  return re::StringID::invalid((re::StringID *)(a1 + 64));
}

void re::internal::defaultDestructV2<re::RigGraphNodeParameterHandle>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 64));
  re::StringID::destroyString((re::StringID *)(a1 + 48));
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

re::StringID *re::internal::defaultConstruct<re::RigGraphParameterProxy>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a3);
  re::StringID::invalid((re::StringID *)(a3 + 2));
  re::StringID::invalid((re::StringID *)(a3 + 4));
  re::StringID::invalid((re::StringID *)(a3 + 6));
  result = re::StringID::invalid((re::StringID *)(a3 + 8));
  a3[10] = 0;
  a3[11] = &str_110;
  a3[12] = 0;
  a3[13] = &str_110;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphParameterProxy>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 96));
  re::StringID::destroyString((re::StringID *)(a3 + 80));
  re::StringID::destroyString((re::StringID *)(a3 + 64));
  re::StringID::destroyString((re::StringID *)(a3 + 48));
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphParameterProxy>(_QWORD *a1)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a1);
  re::StringID::invalid((re::StringID *)(a1 + 2));
  re::StringID::invalid((re::StringID *)(a1 + 4));
  re::StringID::invalid((re::StringID *)(a1 + 6));
  result = re::StringID::invalid((re::StringID *)(a1 + 8));
  a1[10] = 0;
  a1[11] = &str_110;
  a1[12] = 0;
  a1[13] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphParameterProxy>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 96));
  re::StringID::destroyString((re::StringID *)(a1 + 80));
  re::StringID::destroyString((re::StringID *)(a1 + 64));
  re::StringID::destroyString((re::StringID *)(a1 + 48));
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_RigGraphConnection(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F7EF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7EF8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F81B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F81C0 = 0;
    qword_2540F81D0 = 0;
    qword_2540F81D8 = 0xFFFFFFFFLL;
    qword_2540F81B0 = (uint64_t)&off_24ED7DAA8;
    qword_2540F81E0 = (uint64_t)"RigGraphConnection";
    dword_2540F81E8 = 0;
    xmmword_2540F81F0 = 0u;
    unk_2540F8200 = 0u;
    xmmword_2540F8210 = 0u;
    qword_2540F8220 = 0;
    __cxa_guard_release(&qword_2540F7EF8);
  }
  return &qword_2540F81B0;
}

void re::initInfo_RigGraphConnection(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  re::IntrospectionBase *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x7AFB480BA3239778;
  v17[1] = "RigGraphConnection";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F7F00);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F7F00);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F7ED8;
      if (!qword_2540F7ED8)
      {
        v8 = re::allocInfo_RigGraphNodeParameterHandle((re *)v6);
        qword_2540F7ED8 = (uint64_t)v8;
        re::initInfo_RigGraphNodeParameterHandle((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "source";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F7F60 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = v11;
      v13 = (uint64_t *)qword_2540F7ED8;
      if (!qword_2540F7ED8)
      {
        v13 = re::allocInfo_RigGraphNodeParameterHandle((re *)v11);
        qword_2540F7ED8 = (uint64_t)v13;
        re::initInfo_RigGraphNodeParameterHandle((re *)v13, v14);
      }
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "target";
      *(_QWORD *)(v15 + 16) = v13;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x5000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540F7F68 = v15;
      __cxa_guard_release(&qword_2540F7F00);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F7F60;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigGraphConnection>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigGraphConnection>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigGraphConnection>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigGraphConnection>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

re::StringID *re::internal::defaultConstruct<re::RigGraphConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::invalid((re::StringID *)a3);
  re::StringID::invalid((re::StringID *)(a3 + 16));
  re::StringID::invalid((re::StringID *)(a3 + 32));
  re::StringID::invalid((re::StringID *)(a3 + 48));
  re::StringID::invalid((re::StringID *)(a3 + 64));
  re::StringID::invalid((re::StringID *)(a3 + 80));
  re::StringID::invalid((re::StringID *)(a3 + 96));
  re::StringID::invalid((re::StringID *)(a3 + 112));
  re::StringID::invalid((re::StringID *)(a3 + 128));
  return re::StringID::invalid((re::StringID *)(a3 + 144));
}

void re::internal::defaultDestruct<re::RigGraphConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID *v4;

  v4 = (re::StringID *)(a3 + 80);
  re::StringID::destroyString((re::StringID *)(a3 + 144));
  re::StringID::destroyString((re::StringID *)(a3 + 128));
  re::StringID::destroyString((re::StringID *)(a3 + 112));
  re::StringID::destroyString((re::StringID *)(a3 + 96));
  re::StringID::destroyString(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 64));
  re::StringID::destroyString((re::StringID *)(a3 + 48));
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphConnection>(uint64_t a1)
{
  re::StringID::invalid((re::StringID *)a1);
  re::StringID::invalid((re::StringID *)(a1 + 16));
  re::StringID::invalid((re::StringID *)(a1 + 32));
  re::StringID::invalid((re::StringID *)(a1 + 48));
  re::StringID::invalid((re::StringID *)(a1 + 64));
  re::StringID::invalid((re::StringID *)(a1 + 80));
  re::StringID::invalid((re::StringID *)(a1 + 96));
  re::StringID::invalid((re::StringID *)(a1 + 112));
  re::StringID::invalid((re::StringID *)(a1 + 128));
  return re::StringID::invalid((re::StringID *)(a1 + 144));
}

void re::internal::defaultDestructV2<re::RigGraphConnection>(uint64_t a1)
{
  re::StringID *v2;

  v2 = (re::StringID *)(a1 + 80);
  re::StringID::destroyString((re::StringID *)(a1 + 144));
  re::StringID::destroyString((re::StringID *)(a1 + 128));
  re::StringID::destroyString((re::StringID *)(a1 + 112));
  re::StringID::destroyString((re::StringID *)(a1 + 96));
  re::StringID::destroyString(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 64));
  re::StringID::destroyString((re::StringID *)(a1 + 48));
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t re::introspect_RigGraphConnection(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigGraphConnection", (uint64_t (*)(re::internal *))re::allocInfo_RigGraphConnection, (re::IntrospectionBase *(*)(void))re::initInfo_RigGraphConnection, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigGraphConnection>, this);
}

re::StringID *re::internal::defaultConstruct<re::RigGraphInputValue>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a3);
  re::StringID::invalid((re::StringID *)(a3 + 2));
  re::StringID::invalid((re::StringID *)(a3 + 4));
  re::StringID::invalid((re::StringID *)(a3 + 6));
  result = re::StringID::invalid((re::StringID *)(a3 + 8));
  a3[10] = 0;
  a3[11] = &str_110;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphInputValue>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 80));
  re::StringID::destroyString((re::StringID *)(a3 + 64));
  re::StringID::destroyString((re::StringID *)(a3 + 48));
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphInputValue>(_QWORD *a1)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a1);
  re::StringID::invalid((re::StringID *)(a1 + 2));
  re::StringID::invalid((re::StringID *)(a1 + 4));
  re::StringID::invalid((re::StringID *)(a1 + 6));
  result = re::StringID::invalid((re::StringID *)(a1 + 8));
  a1[10] = 0;
  a1[11] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphInputValue>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 80));
  re::StringID::destroyString((re::StringID *)(a1 + 64));
  re::StringID::destroyString((re::StringID *)(a1 + 48));
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

re::StringID *re::internal::defaultConstruct<re::RigGraphNodeDescription>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::invalid((re::StringID *)a3);
  return re::StringID::invalid((re::StringID *)(a3 + 16));
}

void re::internal::defaultDestruct<re::RigGraphNodeDescription>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphNodeDescription>(uint64_t a1)
{
  re::StringID::invalid((re::StringID *)a1);
  return re::StringID::invalid((re::StringID *)(a1 + 16));
}

void re::internal::defaultDestructV2<re::RigGraphNodeDescription>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_RigGraphDefinition(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F7F38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7F38))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8318, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8328 = 0;
    qword_2540F8338 = 0;
    qword_2540F8340 = 0xFFFFFFFFLL;
    qword_2540F8318 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8348 = (uint64_t)"RigGraphDefinition";
    dword_2540F8350 = 0;
    xmmword_2540F8358 = 0u;
    xmmword_2540F8368 = 0u;
    xmmword_2540F8378 = 0u;
    qword_2540F8388 = 0;
    __cxa_guard_release(&qword_2540F7F38);
  }
  return &qword_2540F8318;
}

void re::initInfo_RigGraphDefinition(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x7AFB683786AD0462;
  v22[1] = "RigGraphDefinition";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F7F40);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F7F40);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "type";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540F7FD0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphParameterProxy>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "inputParameters";
      *(_QWORD *)(v11 + 16) = &qword_2540F8000;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2540F7FD8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphParameterProxy>>::get();
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "outputParameters";
      *(_QWORD *)(v13 + 16) = &qword_2540F8000;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3800000003;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540F7FE0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphNodeDescription>>::get();
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "nodes";
      *(_QWORD *)(v15 + 16) = &qword_2540F8040;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x6000000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540F7FE8 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v17 = re::IntrospectionInfo<re::DynamicArray<re::RigGraphConnection>>::get(1);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "connections";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x8800000005;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540F7FF0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphInputValue>>::get();
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "inputValues";
      *(_QWORD *)(v20 + 16) = &qword_2540F8080;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0xB000000006;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540F7FF8 = v20;
      __cxa_guard_release(&qword_2540F7F40);
    }
  }
  *((_QWORD *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2540F7FD0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigGraphDefinition>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigGraphDefinition>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigGraphDefinition>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigGraphDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphParameterProxy>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[2];
  __int128 v30;
  const char *v31;
  __int128 v32;

  v0 = atomic_load((unsigned __int8 *)&qword_2540F7F48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7F48))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540F8000);
    qword_2540F8000 = (uint64_t)&off_24ED1FC70;
    __cxa_guard_release(&qword_2540F7F48);
  }
  if ((_MergedGlobals_14 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540F7EF0;
    if (qword_2540F7EF0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540F7EE0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7EE0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8138, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2540F8148 = 0;
      *(_QWORD *)&xmmword_2540F8158 = 0;
      *((_QWORD *)&xmmword_2540F8158 + 1) = 0xFFFFFFFFLL;
      qword_2540F8138 = (uint64_t)&off_24ED7DAA8;
      qword_2540F8168 = (uint64_t)"RigGraphParameterProxy";
      dword_2540F8170 = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      qword_2540F81A8 = 0;
      __cxa_guard_release(&qword_2540F7EE0);
    }
    qword_2540F7EF0 = (uint64_t)&qword_2540F8138;
    *(_QWORD *)&v32 = 0xB79804C19E716C46;
    *((_QWORD *)&v32 + 1) = "RigGraphParameterProxy";
    re::StringID::destroyString((re::StringID *)&v32);
    xmmword_2540F8158 = v30;
    v4 = atomic_load((unsigned __int8 *)&qword_2540F7EE8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540F7EE8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = v14;
        v16 = (uint64_t *)qword_2540F7ED8;
        if (!qword_2540F7ED8)
        {
          v16 = re::allocInfo_RigGraphNodeParameterHandle((re *)v14);
          qword_2540F7ED8 = (uint64_t)v16;
          re::initInfo_RigGraphNodeParameterHandle((re *)v16, v17);
        }
        v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = "parameter";
        *(_QWORD *)(v18 + 16) = v16;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 1;
        *(_DWORD *)(v18 + 40) = 0;
        *(_QWORD *)(v18 + 48) = 0;
        *(_QWORD *)(v18 + 56) = 0;
        *(_DWORD *)(v18 + 64) = 0;
        qword_2540F7F90 = v18;
        v19 = re::introspectionAllocator((re *)v18);
        v21 = re::IntrospectionInfo<re::StringID>::get(1, v20);
        v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = "name";
        *(_QWORD *)(v22 + 16) = v21;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0x5000000002;
        *(_DWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 56) = 0;
        *(_DWORD *)(v22 + 64) = 0;
        qword_2540F7F98 = v22;
        v23 = re::introspectionAllocator((re *)v22);
        v25 = re::IntrospectionInfo<re::StringID>::get(1, v24);
        v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = "value";
        *(_QWORD *)(v26 + 16) = v25;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 32) = 0x6000000003;
        *(_DWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 56) = 0;
        *(_DWORD *)(v26 + 64) = 0;
        qword_2540F7FA0 = v26;
        __cxa_guard_release(&qword_2540F7EE8);
      }
    }
    qword_2540F8148 = 0x7000000008;
    v1 = &qword_2540F8138;
    dword_2540F8150 = 8;
    word_2540F8154 = 0;
    dword_2540F8170 = 3;
    qword_2540F8178 = (uint64_t)&qword_2540F7F90;
    qword_2540F8180 = (uint64_t)re::internal::defaultConstruct<re::RigGraphParameterProxy>;
    qword_2540F8188 = (uint64_t)re::internal::defaultDestruct<re::RigGraphParameterProxy>;
    qword_2540F8198 = 0;
    qword_2540F8190 = 0;
    qword_2540F81A0 = (uint64_t)re::internal::defaultConstructV2<re::RigGraphParameterProxy>;
    qword_2540F81A8 = (uint64_t)re::internal::defaultDestructV2<re::RigGraphParameterProxy>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540F8138, v3);
    v32 = v30;
    if ((_MergedGlobals_14 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_14 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8000, 0);
      qword_2540F8010 = 0x2800000003;
      dword_2540F8018 = v5;
      word_2540F801C = 0;
      *(_QWORD *)&xmmword_2540F8020 = 0;
      *((_QWORD *)&xmmword_2540F8020 + 1) = 0xFFFFFFFFLL;
      qword_2540F8030 = (uint64_t)v1;
      unk_2540F8038 = 0;
      qword_2540F8000 = (uint64_t)&off_24ED1FC70;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540F8000, (const re::IntrospectionBase *)&v30);
      if ((BYTE8(v30) & 1) != 0)
        v8 = v31;
      else
        v8 = (char *)&v30 + 9;
      if ((_QWORD)v30 && (BYTE8(v30) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
      v28 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v29);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v27 + 1) = v10;
      }
      else
      {
        v32 = v28;
        re::TypeBuilder::beginListType((uint64_t)&v30, v29, 1, 0x28uLL, 8uLL, &v32);
        re::TypeBuilder::setConstructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v30, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v30, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v30, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v30, v11);
      }
      xmmword_2540F8020 = v27;
      re::StringID::destroyString((re::StringID *)v29);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphNodeDescription>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  const char *v26;
  __int128 v27;

  v0 = atomic_load((unsigned __int8 *)&qword_2540F7F50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7F50))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540F8040);
    qword_2540F8040 = (uint64_t)&off_24ED1FD08;
    __cxa_guard_release(&qword_2540F7F50);
  }
  if ((byte_2540F7EC1 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540F7F30;
    if (qword_2540F7F30)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540F7F20);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7F20))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F82A0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2540F82B0 = 0;
      *(_QWORD *)&xmmword_2540F82C0 = 0;
      *((_QWORD *)&xmmword_2540F82C0 + 1) = 0xFFFFFFFFLL;
      qword_2540F82A0 = (uint64_t)&off_24ED7DAA8;
      qword_2540F82D0 = (uint64_t)"RigGraphNodeDescription";
      dword_2540F82D8 = 0;
      xmmword_2540F82E0 = 0u;
      *(_OWORD *)&qword_2540F82F0 = 0u;
      xmmword_2540F8300 = 0u;
      qword_2540F8310 = 0;
      __cxa_guard_release(&qword_2540F7F20);
    }
    qword_2540F7F30 = (uint64_t)&qword_2540F82A0;
    *(_QWORD *)&v27 = 0xF8858BA97F982CF8;
    *((_QWORD *)&v27 + 1) = "RigGraphNodeDescription";
    re::StringID::destroyString((re::StringID *)&v27);
    xmmword_2540F82C0 = v25;
    v4 = atomic_load((unsigned __int8 *)&qword_2540F7F28);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540F7F28);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540F7F80 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "type";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2540F7F88 = v21;
        __cxa_guard_release(&qword_2540F7F28);
      }
    }
    qword_2540F82B0 = 0x2000000008;
    v1 = &qword_2540F82A0;
    dword_2540F82B8 = 8;
    word_2540F82BC = 0;
    dword_2540F82D8 = 2;
    *(_QWORD *)&xmmword_2540F82E0 = &qword_2540F7F80;
    *((_QWORD *)&xmmword_2540F82E0 + 1) = re::internal::defaultConstruct<re::RigGraphNodeDescription>;
    qword_2540F82F0 = (uint64_t)re::internal::defaultDestruct<re::RigGraphNodeDescription>;
    *(_QWORD *)&xmmword_2540F8300 = 0;
    qword_2540F82F8 = 0;
    *((_QWORD *)&xmmword_2540F8300 + 1) = re::internal::defaultConstructV2<re::RigGraphNodeDescription>;
    qword_2540F8310 = (uint64_t)re::internal::defaultDestructV2<re::RigGraphNodeDescription>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540F82A0, v3);
    v27 = v25;
    if ((byte_2540F7EC1 & 1) == 0)
    {
LABEL_7:
      byte_2540F7EC1 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8040, 0);
      qword_2540F8050 = 0x2800000003;
      dword_2540F8058 = v5;
      word_2540F805C = 0;
      *(_QWORD *)&xmmword_2540F8060 = 0;
      *((_QWORD *)&xmmword_2540F8060 + 1) = 0xFFFFFFFFLL;
      qword_2540F8070 = (uint64_t)v1;
      unk_2540F8078 = 0;
      qword_2540F8040 = (uint64_t)&off_24ED1FD08;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540F8040, (const re::IntrospectionBase *)&v25);
      if ((BYTE8(v25) & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 9;
      if ((_QWORD)v25 && (BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v23 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v24);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v22 + 1) = v10;
      }
      else
      {
        v27 = v23;
        re::TypeBuilder::beginListType((uint64_t)&v25, v24, 1, 0x28uLL, 8uLL, &v27);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v11);
      }
      xmmword_2540F8060 = v22;
      re::StringID::destroyString((re::StringID *)v24);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphInputValue>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25[2];
  __int128 v26;
  const char *v27;
  __int128 v28;

  v0 = atomic_load((unsigned __int8 *)&qword_2540F7F58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7F58))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540F8080);
    qword_2540F8080 = (uint64_t)&off_24ED1FDA0;
    __cxa_guard_release(&qword_2540F7F58);
  }
  if ((byte_2540F7EC2 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540F7F18;
    if (qword_2540F7F18)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540F7F08);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540F7F08))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8228, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2540F8238 = 0;
      *(_QWORD *)&xmmword_2540F8248 = 0;
      *((_QWORD *)&xmmword_2540F8248 + 1) = 0xFFFFFFFFLL;
      qword_2540F8228 = (uint64_t)&off_24ED7DAA8;
      qword_2540F8258 = (uint64_t)"RigGraphInputValue";
      dword_2540F8260 = 0;
      xmmword_2540F8268 = 0u;
      *(_OWORD *)&qword_2540F8278 = 0u;
      xmmword_2540F8288 = 0u;
      qword_2540F8298 = 0;
      __cxa_guard_release(&qword_2540F7F08);
    }
    qword_2540F7F18 = (uint64_t)&qword_2540F8228;
    *(_QWORD *)&v28 = 0x7AFC672AA3D9C94ALL;
    *((_QWORD *)&v28 + 1) = "RigGraphInputValue";
    re::StringID::destroyString((re::StringID *)&v28);
    xmmword_2540F8248 = v26;
    v4 = atomic_load((unsigned __int8 *)&qword_2540F7F10);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540F7F10);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = v14;
        v16 = (uint64_t *)qword_2540F7ED8;
        if (!qword_2540F7ED8)
        {
          v16 = re::allocInfo_RigGraphNodeParameterHandle((re *)v14);
          qword_2540F7ED8 = (uint64_t)v16;
          re::initInfo_RigGraphNodeParameterHandle((re *)v16, v17);
        }
        v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = "inputNode";
        *(_QWORD *)(v18 + 16) = v16;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 1;
        *(_DWORD *)(v18 + 40) = 0;
        *(_QWORD *)(v18 + 48) = 0;
        *(_QWORD *)(v18 + 56) = 0;
        *(_DWORD *)(v18 + 64) = 0;
        qword_2540F7F70 = v18;
        v19 = re::introspectionAllocator((re *)v18);
        v21 = re::IntrospectionInfo<re::StringID>::get(1, v20);
        v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = "value";
        *(_QWORD *)(v22 + 16) = v21;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0x5000000002;
        *(_DWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 56) = 0;
        *(_DWORD *)(v22 + 64) = 0;
        qword_2540F7F78 = v22;
        __cxa_guard_release(&qword_2540F7F10);
      }
    }
    qword_2540F8238 = 0x6000000008;
    v1 = &qword_2540F8228;
    dword_2540F8240 = 8;
    word_2540F8244 = 0;
    dword_2540F8260 = 2;
    *(_QWORD *)&xmmword_2540F8268 = &qword_2540F7F70;
    *((_QWORD *)&xmmword_2540F8268 + 1) = re::internal::defaultConstruct<re::RigGraphInputValue>;
    qword_2540F8278 = (uint64_t)re::internal::defaultDestruct<re::RigGraphInputValue>;
    *(_QWORD *)&xmmword_2540F8288 = 0;
    qword_2540F8280 = 0;
    *((_QWORD *)&xmmword_2540F8288 + 1) = re::internal::defaultConstructV2<re::RigGraphInputValue>;
    qword_2540F8298 = (uint64_t)re::internal::defaultDestructV2<re::RigGraphInputValue>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540F8228, v3);
    v28 = v26;
    if ((byte_2540F7EC2 & 1) == 0)
    {
LABEL_7:
      byte_2540F7EC2 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8080, 0);
      qword_2540F8090 = 0x2800000003;
      dword_2540F8098 = v5;
      word_2540F809C = 0;
      *(_QWORD *)&xmmword_2540F80A0 = 0;
      *((_QWORD *)&xmmword_2540F80A0 + 1) = 0xFFFFFFFFLL;
      qword_2540F80B0 = (uint64_t)v1;
      unk_2540F80B8 = 0;
      qword_2540F8080 = (uint64_t)&off_24ED1FDA0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540F8080, (const re::IntrospectionBase *)&v26);
      if ((BYTE8(v26) & 1) != 0)
        v8 = v27;
      else
        v8 = (char *)&v26 + 9;
      if ((_QWORD)v26 && (BYTE8(v26) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v24 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v25);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v23 + 1) = v10;
      }
      else
      {
        v28 = v24;
        re::TypeBuilder::beginListType((uint64_t)&v26, v25, 1, 0x28uLL, 8uLL, &v28);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v26, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v26, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v11);
      }
      xmmword_2540F80A0 = v23;
      re::StringID::destroyString((re::StringID *)v25);
    }
  }
}

double re::internal::defaultConstruct<re::RigGraphDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  re::StringID::invalid((re::StringID *)a3);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_DWORD *)(a3 + 120) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_DWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_DWORD *)(a3 + 200) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphDefinition>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)a3 + 176);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)a3 + 17);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)a3 + 96);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)a3 + 56);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)a3 + 16);
  re::StringID::destroyString(a3);
}

double re::internal::defaultConstructV2<re::RigGraphDefinition>(uint64_t a1)
{
  double result;

  re::StringID::invalid((re::StringID *)a1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphDefinition>(re::StringID *a1)
{
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)a1 + 176);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)a1 + 17);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)a1 + 96);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)a1 + 56);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)a1 + 16);
  re::StringID::destroyString(a1);
}

uint64_t re::introspect_RigGraphDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigGraphDefinition", (uint64_t (*)(re::internal *))re::allocInfo_RigGraphDefinition, (re::IntrospectionBase *(*)(void))re::initInfo_RigGraphDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigGraphDefinition>, this);
}

_QWORD *re::DynamicArray<re::RigGraphNodeDescription>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphNodeDescription>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[4 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = &str_110;
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = &str_110;
          v8[2] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 4;
          v11 += 4;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigGraphInputValue>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::RigGraphInputValue>((_QWORD *)v5[4], (_QWORD *)(v5[4] + 96 * v5[2]), v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphInputValue>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::RigGraphInputValue>(_QWORD *a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *a3 = *a3 & 0xFFFFFFFFFFFFFFFELL | *v5 & 1;
      *a3 = *v5 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[1] = v5[1];
      *v5 = 0;
      v5[1] = &str_110;
      LOBYTE(v6) = v5[2];
      a3[2] = a3[2] & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
      a3[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[3] = v5[3];
      v5[3] = &str_110;
      v5[2] = 0;
      LOBYTE(v6) = v5[4];
      a3[4] = a3[4] & 0xFFFFFFFFFFFFFFFELL | v5[4] & 1;
      a3[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[5] = v5[5];
      v5[5] = &str_110;
      v5[4] = 0;
      LOBYTE(v6) = v5[6];
      a3[6] = a3[6] & 0xFFFFFFFFFFFFFFFELL | v5[6] & 1;
      a3[6] = v5[6] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[7] = v5[7];
      v5[7] = &str_110;
      LOBYTE(v6) = v5[8];
      v5[6] = 0;
      a3[8] = a3[8] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[8] = v5[8] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[9] = v5[9];
      v5[9] = &str_110;
      v5[8] = 0;
      LOBYTE(v6) = v5[10];
      a3[10] = a3[10] & 0xFFFFFFFFFFFFFFFELL | v5[10] & 1;
      a3[10] = v5[10] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[11] = v5[11];
      v5[11] = &str_110;
      v5[10] = 0;
      re::StringID::destroyString((re::StringID *)(v5 + 10));
      re::StringID::destroyString((re::StringID *)(v5 + 8));
      re::StringID::destroyString((re::StringID *)(v5 + 6));
      re::StringID::destroyString((re::StringID *)(v5 + 4));
      re::StringID::destroyString((re::StringID *)(v5 + 2));
      re::StringID::destroyString((re::StringID *)v5);
      v5 += 12;
      a3 += 12;
    }
    while (v5 != a2);
  }
}

_QWORD *re::DynamicArray<re::RigGraphParameterProxy>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::RigGraphParameterProxy>((_QWORD *)v5[4], (_QWORD *)(v5[4] + 112 * v5[2]), v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphParameterProxy>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::RigGraphParameterProxy>(_QWORD *a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *a3 = *a3 & 0xFFFFFFFFFFFFFFFELL | *v5 & 1;
      *a3 = *v5 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[1] = v5[1];
      *v5 = 0;
      v5[1] = &str_110;
      LOBYTE(v6) = v5[2];
      a3[2] = a3[2] & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
      a3[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[3] = v5[3];
      v5[3] = &str_110;
      v5[2] = 0;
      LOBYTE(v6) = v5[4];
      a3[4] = a3[4] & 0xFFFFFFFFFFFFFFFELL | v5[4] & 1;
      a3[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[5] = v5[5];
      v5[5] = &str_110;
      v5[4] = 0;
      LOBYTE(v6) = v5[6];
      a3[6] = a3[6] & 0xFFFFFFFFFFFFFFFELL | v5[6] & 1;
      a3[6] = v5[6] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[7] = v5[7];
      v5[7] = &str_110;
      v5[6] = 0;
      LOBYTE(v6) = v5[8];
      a3[8] = a3[8] & 0xFFFFFFFFFFFFFFFELL | v5[8] & 1;
      a3[8] = v5[8] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[9] = v5[9];
      v5[9] = &str_110;
      LOBYTE(v6) = v5[10];
      v5[8] = 0;
      a3[10] = a3[10] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[10] = v5[10] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[11] = v5[11];
      v5[11] = &str_110;
      v5[10] = 0;
      LOBYTE(v6) = v5[12];
      a3[12] = a3[12] & 0xFFFFFFFFFFFFFFFELL | v5[12] & 1;
      a3[12] = v5[12] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      a3[13] = v5[13];
      v5[13] = &str_110;
      v5[12] = 0;
      re::StringID::destroyString((re::StringID *)(v5 + 12));
      re::StringID::destroyString((re::StringID *)(v5 + 10));
      re::StringID::destroyString((re::StringID *)(v5 + 8));
      re::StringID::destroyString((re::StringID *)(v5 + 6));
      re::StringID::destroyString((re::StringID *)(v5 + 4));
      re::StringID::destroyString((re::StringID *)(v5 + 2));
      re::StringID::destroyString((re::StringID *)v5);
      v5 += 14;
      a3 += 14;
    }
    while (v5 != a2);
  }
}

_QWORD *re::DynamicArray<re::RigGraphNodeDescription>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigGraphNodeDescription>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigGraphNodeDescription>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

void re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_1, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::Result<re::StringID,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::StringID::destroyString((re::StringID *)(a1 + 8));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

_BYTE *re::Optional<re::RigDataTypeClass>::~Optional(_BYTE *a1)
{
  if (*a1)
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 32));
    re::StringID::destroyString((re::StringID *)(a1 + 16));
  }
  return a1;
}

_QWORD *re::DynamicArray<re::RigGraphInputValue>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigGraphInputValue>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigGraphInputValue>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RigGraphParameterProxy>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigGraphParameterProxy>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigGraphParameterProxy>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigGraphParameterProxy>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigGraphParameterProxy>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigGraphParameterProxy>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::addElement(uint64_t a1, re *a2, int a3, _QWORD *a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  re::StringID::invalid((re::StringID *)&v11);
  re::StringID::invalid((re::StringID *)&v12);
  re::StringID::invalid((re::StringID *)&v13);
  re::StringID::invalid((re::StringID *)&v14);
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = &str_110;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = &str_110;
  re::DynamicArray<re::RigGraphParameterProxy>::add(a4, (uint64_t *)&v10);
  re::StringID::destroyString((re::StringID *)&v16);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v13);
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  v8 = (re::IntrospectionBase *)(a4[4] + 112 * a4[2] - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphParameterProxy>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

uint64_t re::DynamicArray<re::RigGraphParameterProxy>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 112 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 96));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 80));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 64));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 48));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 32));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 16));
          re::StringID::destroyString((re::StringID *)(v3 + v5));
          v5 += 112;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::RigGraphParameterProxy>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 112 * a2 + 96;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 48));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 64));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 80));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 96));
      ++v9;
      v8 += 112;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 112 * v4 + 104;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)(v7 - 13));
        re::StringID::invalid((re::StringID *)(v7 - 11));
        re::StringID::invalid((re::StringID *)(v7 - 9));
        re::StringID::invalid((re::StringID *)(v7 - 7));
        re::StringID::invalid((re::StringID *)(v7 - 5));
        *(v7 - 3) = 0;
        *(v7 - 2) = &str_110;
        *(v7 - 1) = 0;
        *v7 = &str_110;
        v6 += 112;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 112 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 96));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 80));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 64));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 48));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 32));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 16));
        re::StringID::destroyString((re::StringID *)(v10 + v9));
        v9 += 112;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphParameterProxy>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphParameterProxy>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 112 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 112;
        v15 -= 112;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphParameterProxy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigGraphNodeDescription>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::addElement(uint64_t a1, re *a2, int a3, _QWORD *a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  re::StringID::invalid((re::StringID *)&v11);
  re::DynamicArray<re::RigGraphNodeDescription>::add(a4, (uint64_t *)&v10);
  re::StringID::destroyString((re::StringID *)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  v8 = (re::IntrospectionBase *)(a4[4] + 32 * a4[2] - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphNodeDescription>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

void re::DynamicArray<re::RigGraphNodeDescription>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 32 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 32;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        re::StringID::invalid((re::StringID *)v7);
        re::StringID::invalid((re::StringID *)(v7 + 16));
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 32 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 32;
        v10 -= 32;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigGraphNodeDescription>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphNodeDescription>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 32 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 32;
        v14 -= 32;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphNodeDescription>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphInputValue>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphInputValue>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigGraphInputValue>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphInputValue>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigGraphInputValue>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphInputValue>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigGraphInputValue>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphInputValue>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigGraphInputValue>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphInputValue>::addElement(uint64_t a1, re *a2, int a3, _QWORD *a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  re::StringID::invalid((re::StringID *)&v11);
  re::StringID::invalid((re::StringID *)&v12);
  re::StringID::invalid((re::StringID *)&v13);
  re::StringID::invalid((re::StringID *)&v14);
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = &str_110;
  re::DynamicArray<re::RigGraphInputValue>::add(a4, (uint64_t *)&v10);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v13);
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  v8 = (re::IntrospectionBase *)(a4[4] + 96 * a4[2] - 96);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphInputValue>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphInputValue>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

uint64_t re::DynamicArray<re::RigGraphInputValue>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 96 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 80));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 64));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 48));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 32));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 16));
          re::StringID::destroyString((re::StringID *)(v3 + v5));
          v5 += 96;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::RigGraphInputValue>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 96 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 80));
      re::StringID::destroyString((re::StringID *)(v10 + 64));
      re::StringID::destroyString((re::StringID *)(v10 + 48));
      re::StringID::destroyString((re::StringID *)(v10 + 32));
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 96;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 96 * v4 + 88;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)(v7 - 11));
        re::StringID::invalid((re::StringID *)(v7 - 9));
        re::StringID::invalid((re::StringID *)(v7 - 7));
        re::StringID::invalid((re::StringID *)(v7 - 5));
        re::StringID::invalid((re::StringID *)(v7 - 3));
        *(v7 - 1) = 0;
        *v7 = &str_110;
        v6 += 96;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 96 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 80));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 64));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 48));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 32));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 16));
        re::StringID::destroyString((re::StringID *)(v10 + v9));
        v9 += 96;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphInputValue>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigGraphInputValue>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphInputValue>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 96 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 96;
        v15 -= 96;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 96 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphInputValue>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

float re::bounceEase(re *this, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = a3;
  if (a3 <= 1.0 || fabsf(a3 + -1.0) < (float)((float)((float)(fabsf(a3) + 1.0) + 1.0) * 0.00001))
    v3 = 1.01;
  v4 = fmaxf((float)this, 0.0);
  if (a2 > 1.0)
    a2 = 1.0;
  if (a2 >= 0.0)
    v5 = a2;
  else
    v5 = 0.0;
  v6 = powf(v3, v4);
  v7 = v5 * (float)((float)((float)(1.0 - v6) / (float)(1.0 - v3)) + (float)(v6 * 0.5));
  v8 = logf(1.0 - (float)(v7 * (float)(1.0 - v3)));
  v9 = floorf(v8 / logf(v3));
  v10 = (float)(1.0 - powf(v3, v9)) / (float)(1.0 - v3);
  v11 = powf(v3, v9 + 1.0);
  v12 = (float)(v7 - (float)((float)(v10 + (float)((float)(1.0 - v11) / (float)(1.0 - v3))) * 0.5))
      / (float)((float)((float)(1.0 - v11) / (float)(1.0 - v3))
              - (float)((float)(v10 + (float)((float)(1.0 - v11) / (float)(1.0 - v3))) * 0.5));
  return powf(1.0 / v3, v4 - v9) * (float)(1.0 - (float)(v12 * v12));
}

float re::internal::evaluateCubicBezierEase<float>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  float v15;
  float v16;

  v4 = *(float *)&a1 * 3.0;
  v5 = -(float)((float)(*(float *)&a1 * 3.0) - (float)((float)(*(float *)&a2 - *(float *)&a1) * 3.0));
  v6 = (float)(1.0 - (float)(*(float *)&a1 * 3.0)) - v5;
  v7 = 8;
  v8 = a3;
  while (1)
  {
    v9 = v8
       * (float)(v4
               + (float)((float)((float)(v6 * v8)
                               - (float)((float)(*(float *)&a1 * 3.0)
                                       - (float)((float)(*(float *)&a2 - *(float *)&a1) * 3.0)))
                       * v8));
    if (vabds_f32(v9, a3) < a4)
      break;
    v10 = v4 + (float)((float)((float)(v5 + v5) + (float)((float)(v6 * 3.0) * v8)) * v8);
    if (fabsf(v10) >= 0.000001)
    {
      v8 = v8 - (float)((float)(v9 - a3) / v10);
      if (--v7)
        continue;
    }
    v8 = 0.0;
    if (a3 >= 0.0)
    {
      v8 = 1.0;
      if (a3 <= 1.0)
      {
        v11 = 0.0;
        v12 = 1.0;
        v13 = -1025;
        v8 = a3;
        do
        {
          if (__CFADD__(v13++, 1))
            break;
          v15 = v8
              * (float)(v4
                      + (float)((float)((float)(v6 * v8)
                                      - (float)((float)(*(float *)&a1 * 3.0)
                                              - (float)((float)(*(float *)&a2 - *(float *)&a1) * 3.0)))
                              * v8));
          if (vabds_f32(v15, a3) < a4)
            break;
          if ((float)(v15 - a3) >= 0.0)
            v12 = v8;
          else
            v11 = v8;
          v8 = v11 + (float)(v12 - v11) * 0.5;
        }
        while (v11 < v12);
      }
    }
    break;
  }
  v16 = -(float)((float)(*((float *)&a1 + 1) * 3.0) - (float)((float)(*((float *)&a2 + 1) - *((float *)&a1 + 1)) * 3.0));
  return v8
       * (float)((float)(*((float *)&a1 + 1) * 3.0)
               + (float)((float)(v16 + (float)((float)((float)(1.0 - (float)(*((float *)&a1 + 1) * 3.0)) - v16) * v8))
                       * v8));
}

double re::internal::evaluateCubicBezierEase<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v17;
  double v18;

  v6 = *(double *)&a1 * 3.0;
  v7 = -(*(double *)&a1 * 3.0 - (*(double *)&a3 - *(double *)&a1) * 3.0);
  v8 = 1.0 - *(double *)&a1 * 3.0 - v7;
  v9 = 8;
  v10 = a5;
  while (1)
  {
    v11 = v10 * (v6 + (v8 * v10 - (*(double *)&a1 * 3.0 - (*(double *)&a3 - *(double *)&a1) * 3.0)) * v10);
    if (vabdd_f64(v11, a5) < a6)
      break;
    v12 = v6 + (v7 + v7 + v8 * 3.0 * v10) * v10;
    if (fabs(v12) >= 0.000001)
    {
      v10 = v10 - (v11 - a5) / v12;
      if (--v9)
        continue;
    }
    v10 = 0.0;
    if (a5 >= 0.0)
    {
      v10 = 1.0;
      if (a5 <= 1.0)
      {
        v13 = 0.0;
        v14 = 1.0;
        v15 = -1025;
        v10 = a5;
        do
        {
          if (__CFADD__(v15++, 1))
            break;
          v17 = v10 * (v6 + (v8 * v10 - (*(double *)&a1 * 3.0 - (*(double *)&a3 - *(double *)&a1) * 3.0)) * v10);
          if (vabdd_f64(v17, a5) < a6)
            break;
          if (v17 - a5 >= 0.0)
            v14 = v10;
          else
            v13 = v10;
          v10 = v13 + (v14 - v13) * 0.5;
        }
        while (v13 < v14);
      }
    }
    break;
  }
  v18 = -(*(double *)&a2 * 3.0 - (*(double *)&a4 - *(double *)&a2) * 3.0);
  return v10 * (*(double *)&a2 * 3.0 + (v18 + (1.0 - *(double *)&a2 * 3.0 - v18) * v10) * v10);
}

void re::EasingFunctionBase::evaluate(re::EasingFunctionBase *this, float a2, uint64_t a3)
{
  int v3;

  v3 = *((_DWORD *)this + 3);
  if (v3 == 2)
  {
    if (a2 <= 0.5)
      (*(float (**)(re::EasingFunctionBase *, float))(*(_QWORD *)this + 40))(this, a2 + a2);
    else
      (*(float (**)(re::EasingFunctionBase *, float))(*(_QWORD *)this + 40))(this, (float)(1.0 - a2) + (float)(1.0 - a2));
  }
  else if (v3 == 1)
  {
    (*(float (**)(re::EasingFunctionBase *, float))(*(_QWORD *)this + 40))(this, 1.0 - a2);
  }
  else if (v3)
  {
    re::internal::assertLog((re::internal *)4, a3, "assertion failure: '%s' (%s:line %i) Invalid easing mode.", "!\"Unreachable code\"", "evaluate", 224);
    _os_crash();
    __break(1u);
  }
  else
  {
    (*(void (**)(re::EasingFunctionBase *, float))(*(_QWORD *)this + 40))(this, a2);
  }
}

_BYTE *re::RigGraphNode::inputType@<X0>(re::RigGraphNode *this@<X0>, const re::RigEnvironment *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  const char **v6;
  _BYTE v8[16];
  StringID v9;
  uint64_t v10[5];

  v6 = (const char **)re::RigGraphNode::inputType(this, a3);
  re::RigEnvironment::lookupRigDataType(a2, v6, v8);
  *a4 = v8[8];
  re::StringID::StringID((re::StringID *)(a4 + 8), &v9);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)(a4 + 24), v10);
  return re::Optional<re::RigDataTypeClass>::~Optional(v8);
}

void re::RigGraphNode::inputValue(re::RigGraphNode *this@<X0>, const re::RigEnvironment *a2@<X1>, re::EvaluationTree *a3@<X2>, re::Allocator *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  re::RigGraphNode::inputType(this, a2, a5, v10);
  *(_BYTE *)(a6 + 32) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = &str_110;
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  *(_QWORD *)(a6 + 72) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  *(_DWORD *)(a6 + 80) = 0;
  *(_BYTE *)(a6 + 96) = 0;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_QWORD *)(a6 + 176) = -1;
  *(_QWORD *)(a6 + 184) = 0;
  *(_QWORD *)(a6 + 216) = 0;
  *(_QWORD *)(a6 + 224) = 0;
  *(_QWORD *)(a6 + 272) = 0;
  *(_DWORD *)(a6 + 264) = 0;
  *(_QWORD *)(a6 + 232) = &str_110;
  *(_QWORD *)(a6 + 240) = 0;
  *(_QWORD *)(a6 + 248) = 0;
  *(_QWORD *)(a6 + 256) = 0;
  re::RigDataValue::init((re::RigDataValue *)a6, a4, a2, (const re::RigDataTypeClass *)v10, a3);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v12);
  re::StringID::destroyString((re::StringID *)&v11);
}

uint64_t re::RigGraphSystem::buildFromDefinition@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  BOOL v52;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  const char *v73;
  char *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _anonymous_namespace_ *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _anonymous_namespace_ *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  StringID *v110;
  _BYTE *v112;
  uint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  StringID *v119;
  _BYTE *v120;
  unint64_t v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD **v133;
  _QWORD **v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  size_t v138;
  size_t v139;
  _QWORD *v140;
  unint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  size_t v144;
  const char *v145;
  size_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  size_t v152;
  uint64_t v153;
  _QWORD *v154;
  size_t v155;
  size_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  size_t v164;
  size_t v165;
  unint64_t v166;
  _BYTE *v168;
  size_t v169;
  size_t v170;
  unint64_t *v171;
  size_t v172;
  size_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  _anonymous_namespace_ *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  char v196;
  char v197;
  char v198;
  uint64_t v199;
  StringID **v200;
  uint64_t v201;
  StringID *v202;
  uint64_t v203;
  _anonymous_namespace_ *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  char v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  __n128 v225;
  uint64_t result;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _anonymous_namespace_ *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  __int128 v244;
  __int128 v245;
  unsigned int v246;
  uint64_t v247;
  _BYTE v248[40];
  _BYTE v249[28];
  __int16 v250;
  uint64_t v251;
  __int128 buf;
  _OWORD v253[3];
  _BYTE v254[24];
  _QWORD *v255;
  __int128 v256;
  __int128 v257;
  unsigned int v258;
  uint64_t v259;
  _OWORD v260[3];
  __int128 v261;
  __int128 v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t)v249;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  v8 = a2[14];
  v238 = a2;
  v242 = (unint64_t *)v8;
  if (v8)
  {
    if (v8 >= 0x1C71C71C71C71C8)
    {
LABEL_309:
      re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 144, v8);
      _os_crash();
      __break(1u);
LABEL_310:
      re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 144 * v8, 8);
    if (!v9)
      goto LABEL_310;
    v11 = v9;
    v12 = v9;
    v13 = v8 - 1;
    if (v8 != 1)
    {
      v12 = v9;
      do
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        *(_OWORD *)(v12 + 32) = 0uLL;
        *(_OWORD *)(v12 + 48) = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_DWORD *)(v12 + 52) = 0x7FFFFFFF;
        *(_QWORD *)(v12 + 72) = 0;
        *(_QWORD *)(v12 + 80) = 0;
        *(_QWORD *)(v12 + 64) = 0;
        *(_DWORD *)(v12 + 88) = 0;
        *(_QWORD *)(v12 + 136) = 0;
        *(_OWORD *)(v12 + 96) = 0uLL;
        *(_OWORD *)(v12 + 112) = 0uLL;
        *(_DWORD *)(v12 + 128) = 0;
        v12 += 144;
        --v13;
      }
      while (v13);
    }
    *(_QWORD *)v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_DWORD *)(v12 + 52) = 0x7FFFFFFF;
    *(_QWORD *)(v12 + 72) = 0;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_DWORD *)(v12 + 88) = 0;
    *(_QWORD *)(v12 + 136) = 0;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_DWORD *)(v12 + 128) = 0;
    a2 = v238;
    v14 = v238[14];
    v246 = 0;
    v244 = 0u;
    v245 = 0u;
    v247 = 0x7FFFFFFFLL;
    v243 = 0;
    if (v14)
    {
      v15 = 0;
      while (1)
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v244, (StringID *)(a2[16] + 32 * v15), &v243);
        *(_QWORD *)&buf = v243;
        memset(v253, 0, sizeof(v253));
        DWORD2(buf) = 0;
        DWORD1(v253[2]) = 0x7FFFFFFF;
        *(_QWORD *)&v254[8] = 0;
        *(_QWORD *)&v254[16] = 0;
        LODWORD(v255) = 0;
        v256 = 0u;
        v257 = 0u;
        v258 = 0;
        v259 = 0;
        *(_QWORD *)v254 = a1;
        re::DynamicArray<float *>::setCapacity(v254, 0);
        LODWORD(v255) = (_DWORD)v255 + 1;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v253, a1, 3);
        v3 = v243;
        if (v8 <= v243)
          goto LABEL_302;
        v17 = v11 + 144 * v243;
        *(_QWORD *)v17 = buf;
        *(_DWORD *)(v17 + 8) = DWORD2(buf);
        v20 = *(_QWORD *)(v17 + 16);
        v19 = v17 + 16;
        v18 = v20;
        v21 = *(_QWORD *)&v253[0];
        v22 = !v20 || v18 == *(_QWORD *)&v253[0];
        if (v22)
        {
          *(_QWORD *)v19 = *(_QWORD *)&v253[0];
          *(_QWORD *)&v253[0] = v18;
          v23 = *(_QWORD *)&v253[1];
          v24 = *(_OWORD *)(v19 + 8);
          *(_QWORD *)(v19 + 8) = *((_QWORD *)&v253[0] + 1);
          *(_QWORD *)(v19 + 16) = v23;
          *(_OWORD *)((char *)v253 + 8) = v24;
          v25 = *(_OWORD *)(v19 + 24);
          *(_OWORD *)(v19 + 24) = *(_OWORD *)((char *)&v253[1] + 8);
          *(_OWORD *)((char *)&v253[1] + 8) = v25;
        }
        else
        {
          if (*(_DWORD *)(v19 + 28))
          {
            v26 = *(unsigned int *)(v19 + 24);
            if ((_DWORD)v26)
              memset_pattern16(*(void **)(v19 + 8), &unk_2260EB7B0, 4 * v26);
            v27 = *(unsigned int *)(v19 + 32);
            if ((_DWORD)v27)
            {
              v28 = 0;
              v29 = 24 * v27;
              do
              {
                v30 = *(_QWORD *)(v19 + 16) + v28;
                v31 = *(_DWORD *)(v30 + 8);
                if (v31 < 0)
                  *(_DWORD *)(v30 + 8) = v31 & 0x7FFFFFFF;
                v28 += 24;
              }
              while (v29 != v28);
            }
            *(_DWORD *)(v19 + 28) = 0;
            *(_DWORD *)(v19 + 32) = 0;
            v32 = *(_DWORD *)(v19 + 40) + 1;
            *(_DWORD *)(v19 + 36) = 0x7FFFFFFF;
            *(_DWORD *)(v19 + 40) = v32;
          }
          if (v21)
          {
            v16 = HIDWORD(v253[1]);
            if (*(_DWORD *)(v19 + 24) < HIDWORD(v253[1]))
              re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::setCapacity(v19, HIDWORD(v253[1]));
            v33 = LODWORD(v253[2]);
            if (LODWORD(v253[2]))
            {
              v34 = (_QWORD *)(*(_QWORD *)&v253[1] + 16);
              do
              {
                if ((*(_DWORD *)(v34 - 1) & 0x80000000) != 0)
                {
                  v35 = *(v34 - 2);
                  v36 = *(unsigned int *)(v19 + 24);
                  v37 = v35 % v36;
                  v5 = *(unsigned int *)(v19 + 36);
                  if ((_DWORD)v5 == 0x7FFFFFFF)
                  {
                    v5 = *(unsigned int *)(v19 + 32);
                    v38 = v5;
                    if ((_DWORD)v5 == (_DWORD)v36)
                    {
                      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::setCapacity(v19, 2 * *(_DWORD *)(v19 + 28));
                      v37 = v35 % *(unsigned int *)(v19 + 24);
                      v38 = *(_DWORD *)(v19 + 32);
                    }
                    *(_DWORD *)(v19 + 32) = v38 + 1;
                    v39 = *(_QWORD *)(v19 + 16);
                    v40 = *(_DWORD *)(v39 + 24 * v5 + 8);
                  }
                  else
                  {
                    v39 = *(_QWORD *)(v19 + 16);
                    v40 = *(_DWORD *)(v39 + 24 * v5 + 8);
                    *(_DWORD *)(v19 + 36) = v40 & 0x7FFFFFFF;
                  }
                  *(_DWORD *)(v39 + 24 * v5 + 8) = v40 | 0x80000000;
                  *(_DWORD *)(*(_QWORD *)(v19 + 16) + 24 * v5 + 8) = *(_DWORD *)(*(_QWORD *)(v19 + 16) + 24 * v5 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v37);
                  *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24 * v5) = v35;
                  *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24 * v5 + 16) = *v34;
                  *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v37) = v5;
                  ++*(_DWORD *)(v19 + 28);
                }
                v34 += 3;
                --v33;
              }
              while (v33);
            }
            ++*(_DWORD *)(v19 + 40);
            v7 = (uint64_t)v249;
          }
        }
        v41 = v11 + 144 * v3;
        v43 = *(_QWORD *)(v41 + 64);
        v42 = (_QWORD *)(v41 + 64);
        v8 = v43;
        v44 = !v43 || *(_QWORD *)v254 == 0;
        if (!v44 && v8 != *(_QWORD *)v254)
          break;
        *v42 = *(_QWORD *)v254;
        *(_QWORD *)v254 = v8;
        v46 = v11 + 144 * v3;
        v49 = *(_QWORD *)(v46 + 104);
        v48 = (_QWORD *)(v46 + 104);
        v47 = v49;
        v50 = *((_OWORD *)v48 - 2);
        *((_OWORD *)v48 - 2) = *(_OWORD *)&v254[8];
        *(_OWORD *)&v254[8] = v50;
        v4 = *(v48 - 1);
        *(v48 - 1) = v256;
        *(_QWORD *)&v256 = v4;
        v51 = (int)v255;
        LODWORD(v255) = (_DWORD)v255 + 1;
        ++*((_DWORD *)v48 - 4);
        if (v49)
          v52 = *((_QWORD *)&v256 + 1) == 0;
        else
          v52 = 1;
        if (!v52 && v47 != *((_QWORD *)&v256 + 1))
          goto LABEL_308;
        *v48 = *((_QWORD *)&v256 + 1);
        *((_QWORD *)&v256 + 1) = v47;
        v54 = v11 + 144 * v3;
        v55 = *(_OWORD *)(v54 + 112);
        *(_OWORD *)(v54 + 112) = v257;
        v257 = v55;
        v56 = *(_QWORD *)(v54 + 136);
        *(_QWORD *)(v54 + 136) = v259;
        v259 = v56;
        v3 = v258++;
        ++*(_DWORD *)(v54 + 128);
        if (v47)
        {
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
          v259 = 0;
          v257 = 0uLL;
          *((_QWORD *)&v256 + 1) = 0;
          v258 = v3 + 2;
        }
        if (v8)
        {
          if (v4)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v4);
          *(_QWORD *)&v256 = 0;
          memset(v254, 0, sizeof(v254));
          LODWORD(v255) = v51 + 2;
        }
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v253);
        v8 = (unint64_t)v242;
        v15 = v243 + 1;
        v243 = v15;
        a2 = v238;
        if (v15 >= v238[14])
          goto LABEL_66;
      }
LABEL_307:
      re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
LABEL_308:
      re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
      goto LABEL_309;
    }
  }
  else
  {
    v11 = 0;
    v246 = 0;
    v244 = 0uLL;
    v245 = 0uLL;
    v247 = 0x7FFFFFFFLL;
  }
LABEL_66:
  v57 = a2[19];
  if (v57)
  {
    v58 = (_QWORD *)v238[21];
    v59 = &v58[20 * v57];
    v3 = 144;
    v8 = 0x7FFFFFFFLL;
    do
    {
      v7 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v244, v58);
      v60 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v244, v58 + 10);
      v5 = v60;
      if (v7
        || (*v58 & 0xFFFFFFFFFFFFFFFELL) == 0x6C9D3C
        && ((v60 = v58[1], (char *)v60 == "this") || (v60 = strcmp((const char *)v60, "this"), !(_DWORD)v60)))
      {
        if (v5
          || (v58[10] & 0xFFFFFFFFFFFFFFFELL) == 0x6C9D3C
          && ((v74 = (char *)v58[11], v74 == "this") || (v60 = strcmp(v74, "this"), !(_DWORD)v60)))
        {
          if (v7)
          {
            v4 = *(_QWORD *)v7;
            if ((unint64_t)v242 <= *(_QWORD *)v7)
              goto LABEL_303;
            *(_QWORD *)&buf = v58;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v11 + 144 * v4 + 64), &buf);
          }
          if (v5)
          {
            v4 = *(_QWORD *)v5;
            if ((unint64_t)v242 <= *(_QWORD *)v5)
              goto LABEL_304;
            *(_QWORD *)&buf = v58;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v11 + 144 * v4 + 64), &buf);
            if (v7)
            {
              v4 = *(_QWORD *)v7;
              v7 = (uint64_t)v242;
              if ((unint64_t)v242 <= v4)
                goto LABEL_305;
              v5 = *(_QWORD *)v5;
              if ((unint64_t)v242 <= v5)
              {
LABEL_306:
                *(_QWORD *)v249 = 0;
                *(_OWORD *)v254 = 0u;
                memset(v253, 0, sizeof(v253));
                buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(v260[0]) = 136315906;
                *(_QWORD *)((char *)v260 + 4) = "operator[]";
                WORD6(v260[0]) = 1024;
                *(_DWORD *)((char *)v260 + 14) = 468;
                WORD1(v260[1]) = 2048;
                *(_QWORD *)((char *)&v260[1] + 4) = v5;
                WORD6(v260[1]) = 2048;
                *(_QWORD *)((char *)&v260[1] + 14) = v242;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_307;
              }
              v61 = v11 + 144 * v4;
              v62 = v61 + 16;
              v63 = v11 + 144 * v5;
              *(_QWORD *)&buf = v63;
              v64 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v63 ^ (v63 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v63 ^ (v63 >> 30))) >> 27));
              v65 = v64 ^ (v64 >> 31);
              v66 = *(unsigned int *)(v61 + 40);
              if ((_DWORD)v66)
              {
                v67 = v65 % v66;
                v68 = *(unsigned int *)(*(_QWORD *)(v62 + 8) + 4 * (v65 % v66));
                if ((_DWORD)v68 != 0x7FFFFFFF)
                {
                  v69 = *(_QWORD *)(v62 + 16);
                  while (*(_QWORD *)(v69 + 24 * v68 + 16) != v63)
                  {
                    LODWORD(v68) = *(_DWORD *)(v69 + 24 * v68 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v68 == 0x7FFFFFFF)
                      goto LABEL_96;
                  }
                  goto LABEL_97;
                }
              }
              else
              {
                LODWORD(v67) = 0;
              }
LABEL_96:
              re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::addAsMove(v62, v67, v65, &buf);
              ++*(_DWORD *)(v62 + 40);
            }
          }
        }
        else
        {
          v75 = *re::animationLogObjects((re *)v60);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            v76 = v58[11];
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v76;
            v72 = v75;
            v73 = "Connection with invalid target node '%s' in RigGraphDefinition ignored.";
            goto LABEL_94;
          }
        }
      }
      else
      {
        v70 = *re::animationLogObjects((re *)v60);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          v71 = v58[1];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v71;
          v72 = v70;
          v73 = "Connection with invalid source node '%s' in RigGraphDefinition ignored.";
LABEL_94:
          _os_log_impl(&dword_224FE9000, v72, OS_LOG_TYPE_DEFAULT, v73, (uint8_t *)&buf, 0xCu);
        }
      }
LABEL_97:
      v58 += 20;
    }
    while (v58 != v59);
  }
  v77 = v238[24];
  v8 = (unint64_t)v242;
  if (v77)
  {
    v78 = (_QWORD *)v238[26];
    v79 = 96 * v77;
    v4 = 144;
    v7 = 8;
    do
    {
      v80 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v244, v78);
      v81 = *(_QWORD *)v80;
      if (v8 <= *(_QWORD *)v80)
        goto LABEL_300;
      v82 = v11 + 144 * v81;
      v84 = *(_QWORD *)(v82 + 120);
      v5 = v82 + 120;
      v83 = v84;
      v85 = *(_QWORD *)(v5 - 8);
      if (v84 >= v85)
      {
        v3 = v83 + 1;
        if (v85 < v83 + 1)
        {
          if (*(_QWORD *)(v5 - 16))
          {
            if (v85)
              v86 = 2 * v85;
            else
              v86 = 8;
            if (v86 <= v3)
              v87 = v83 + 1;
            else
              v87 = v86;
            re::DynamicArray<float *>::setCapacity((_QWORD *)(v5 - 16), v87);
          }
          else
          {
            re::DynamicArray<float *>::setCapacity((_QWORD *)(v5 - 16), v3);
            ++*(_DWORD *)(v11 + 144 * v81 + 128);
          }
          v8 = (unint64_t)v242;
        }
        v83 = *(_QWORD *)v5;
      }
      v88 = v11 + 144 * v81;
      *(_QWORD *)(*(_QWORD *)(v88 + 136) + 8 * v83) = v78;
      *(_QWORD *)v5 = v83 + 1;
      ++*(_DWORD *)(v88 + 128);
      v78 += 12;
      v79 -= 96;
    }
    while (v79);
  }
  *(_QWORD *)&v253[1] = 0;
  *(_QWORD *)&v253[0] = 0;
  DWORD2(v253[0]) = 0;
  buf = (unint64_t)a1;
  v89 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&buf, v8);
  v90 = ++DWORD2(v253[0]);
  v91 = *(_QWORD *)&v253[0];
  if (v8)
  {
    v92 = 144 * v8;
    v93 = v11;
    v7 = (uint64_t)v249;
    do
    {
      if (v91 >= *((_QWORD *)&buf + 1))
      {
        v94 = v91 + 1;
        if (*((_QWORD *)&buf + 1) < v94)
        {
          if ((_QWORD)buf)
          {
            v95 = 2 * *((_QWORD *)&buf + 1);
            if (!*((_QWORD *)&buf + 1))
              v95 = 8;
            if (v95 <= v94)
              v96 = v94;
            else
              v96 = v95;
            v89 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&buf, v96);
            v90 = DWORD2(v253[0]);
          }
          else
          {
            v89 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&buf, v94);
            v90 = DWORD2(v253[0]) + 1;
          }
        }
        v91 = *(_QWORD *)&v253[0];
      }
      *(_QWORD *)(*(_QWORD *)&v253[1] + 8 * v91++) = v93;
      *(_QWORD *)&v253[0] = v91;
      DWORD2(v253[0]) = ++v90;
      v93 += 144;
      v92 -= 144;
    }
    while (v92);
  }
  else
  {
    v7 = (uint64_t)v249;
  }
  v251 = 0;
  memset(&v249[8], 0, 20);
  *(_QWORD *)v249 = a1;
  re::DynamicArray<re::RigGraphSystem::BuildTask>::setCapacity(v249, v8);
  ++*(_DWORD *)&v249[24];
  if (v91)
  {
    do
      re::RigGraphSystem::visitTask(**(uint64_t ***)&v253[1], (uint64_t)&buf, (uint64_t)v249);
    while (*(_QWORD *)&v253[0]);
  }
  if ((_QWORD)buf && *(_QWORD *)&v253[1])
    (*(void (**)(void))(*(_QWORD *)buf + 40))();
  v97.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v244);
  if (a1 && v8)
  {
    v98 = 0;
    do
    {
      v99 = v11 + v98;
      v100 = *(_QWORD *)(v11 + v98 + 104);
      if (v100)
      {
        if (*(_QWORD *)(v99 + 136))
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v100 + 40))(v100, v97);
        *(_QWORD *)(v99 + 136) = 0;
        *(_QWORD *)(v11 + v98 + 112) = 0;
        *(_QWORD *)(v11 + v98 + 120) = 0;
        *(_QWORD *)(v11 + v98 + 104) = 0;
        ++*(_DWORD *)(v11 + v98 + 128);
      }
      v103 = *(_QWORD *)(v99 + 64);
      v102 = (_QWORD *)(v99 + 64);
      v101 = v103;
      if (v103)
      {
        v104 = v11 + v98;
        if (*(_QWORD *)(v11 + v98 + 96))
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v101 + 40))(v101, v97);
        *(_QWORD *)(v104 + 96) = 0;
        v102[1] = 0;
        v102[2] = 0;
        *v102 = 0;
        ++*(_DWORD *)(v104 + 88);
      }
      v97.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v11 + v98 + 16));
      v98 += 144;
    }
    while (144 * v8 != v98);
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 40))(a1, v11, v97.n128_f64[0]);
  }
  v246 = 0;
  v244 = 0u;
  v245 = 0u;
  v247 = 0x7FFFFFFFLL;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)&v244, a1, 3);
  *(_QWORD *)(a3 + 120) = a1;
  v4 = a3 + 120;
  re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(a3 + 120), 0);
  ++*(_DWORD *)(a3 + 144);
  v105 = v238[4];
  *(_QWORD *)a3 = a1;
  re::DynamicArray<re::RigGraphNodeParameter>::setCapacity((_QWORD *)a3, v105);
  ++*(_DWORD *)(a3 + 24);
  v106 = v238[4];
  if (v106)
  {
    v107 = 0;
    v108 = v238[6];
    v109 = 112 * v106;
    v8 = 4;
    while (1)
    {
      v110 = (StringID *)(v108 + v107 + 64);
      if (*(_QWORD *)&v110->var0 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)&v110->var0 & 1) == 0)
        break;
      if (*(_QWORD *)&v110->var0 <= 1uLL)
      {
        v112 = *(_BYTE **)(v108 + v107 + 72);
        if (v112)
          goto LABEL_159;
      }
LABEL_161:
      re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v4, v110);
      *(_QWORD *)&v260[0] = *(_QWORD *)(a3 + 136) - 1;
      v113 = *(_QWORD *)&v260[0];
      re::StringID::StringID((re::StringID *)&buf, (const StringID *)(v108 + v107 + 80));
      *(_QWORD *)&v253[0] = v113;
      re::StringID::StringID((re::StringID *)((char *)v253 + 8), (const StringID *)(v108 + v107 + 96));
      re::DynamicArray<re::RigGraphNodeParameter>::add((_anonymous_namespace_ *)a3, (uint64_t *)&buf);
      re::StringID::destroyString((re::StringID *)((char *)v253 + 8));
      re::StringID::destroyString((re::StringID *)&buf);
      *(_QWORD *)&buf = "this";
      *((_QWORD *)&buf + 1) = 4;
      v4 = a3 + 120;
      v114 = strlen(*(const char **)(v108 + v107 + 88));
      *(_QWORD *)&v253[0] = *(_QWORD *)(v108 + v107 + 88);
      *((_QWORD *)&v253[0] + 1) = v114;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::add((uint64_t)&v244, (uint64_t *)&buf, v260);
      v107 += 112;
      if (v109 == v107)
        goto LABEL_162;
    }
    v112 = *(_BYTE **)(v108 + v107 + 72);
LABEL_159:
    if (!*v112)
      v110 = (StringID *)(v108 + v107 + 16);
    goto LABEL_161;
  }
LABEL_162:
  *(_QWORD *)(a3 + 40) = a1;
  re::DynamicArray<re::RigGraphNodeParameter>::setCapacity((_QWORD *)(a3 + 40), v238[9]);
  ++*(_DWORD *)(a3 + 64);
  v115 = v238[9];
  if (v115)
  {
    v116 = v238[11] + 64;
    v117 = 112 * v115;
    v8 = 4;
    do
    {
      if (*(_QWORD *)v116 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)v116 & 1) == 0)
      {
        v120 = *(_BYTE **)(v116 + 8);
      }
      else
      {
        v119 = (StringID *)v116;
        if (*(_QWORD *)v116 > 1uLL)
          goto LABEL_175;
        v120 = *(_BYTE **)(v116 + 8);
        v119 = (StringID *)v116;
        if (!v120)
          goto LABEL_175;
      }
      if (*v120)
        v119 = (StringID *)v116;
      else
        v119 = (StringID *)(v116 - 48);
LABEL_175:
      re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v4, v119);
      *(_QWORD *)&v260[0] = *(_QWORD *)(a3 + 136) - 1;
      v121 = *(_QWORD *)&v260[0];
      re::StringID::StringID((re::StringID *)&buf, (const StringID *)(v116 + 16));
      v253[0] = v121;
      *(_QWORD *)&v253[1] = &str_110;
      re::DynamicArray<re::RigGraphNodeParameter>::add((_anonymous_namespace_ *)(a3 + 40), (uint64_t *)&buf);
      re::StringID::destroyString((re::StringID *)((char *)v253 + 8));
      re::StringID::destroyString((re::StringID *)&buf);
      *(_QWORD *)&buf = "this";
      *((_QWORD *)&buf + 1) = 4;
      v122 = strlen(*(const char **)(v116 + 24));
      *(_QWORD *)&v253[0] = *(_QWORD *)(v116 + 24);
      *((_QWORD *)&v253[0] + 1) = v122;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::add((uint64_t)&v244, (uint64_t *)&buf, v260);
      v116 += 112;
      v117 -= 112;
    }
    while (v117);
  }
  *(_QWORD *)(a3 + 80) = a1;
  v123 = *(_QWORD *)&v249[16];
  v232 = (_anonymous_namespace_ *)(a3 + 80);
  re::DynamicArray<re::RigGraphNodeChild>::setCapacity((_QWORD *)(a3 + 80), *(unint64_t *)&v249[16]);
  *(_QWORD *)(a3 + 160) = a1;
  ++*(_DWORD *)(a3 + 104);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity((_QWORD *)(a3 + 160), 0);
  v236 = (_QWORD *)(a3 + 160);
  ++*(_DWORD *)(a3 + 184);
  v231 = v123;
  if (v123)
  {
    v124 = v251 + 144 * v123;
    v235 = v251;
    v5 = (unint64_t)&v260[1] + 8;
    v3 = 56;
    v125 = v124;
LABEL_178:
    v128 = *(_BYTE **)(v125 - 144);
    v126 = v125 - 144;
    v127 = v128;
    v81 = v238[14];
    if (v81 <= (unint64_t)v128)
      goto LABEL_301;
    v237 = v126;
    v129 = v238[16] + 32 * (_QWORD)v127;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &str_110;
    memset(v253, 0, 28);
    v255 = 0;
    v253[2] = 0u;
    memset(v254, 0, 20);
    v242 = (unint64_t *)v129;
    re::StringID::operator=((unint64_t *)&buf, (uint64_t *)(v129 + 16));
    v130 = *(_QWORD *)(v124 - 64);
    *(_QWORD *)&v253[0] = a1;
    re::DynamicArray<re::RigGraphNodeParameter>::setCapacity(v253, v130);
    ++DWORD2(v253[1]);
    v131 = *(_QWORD *)(v124 - 64);
    *((_QWORD *)&v253[2] + 1) = a1;
    re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity((_QWORD *)&v253[2] + 1, v131);
    ++*(_DWORD *)&v254[16];
    v240 = v124;
    v132 = *(_QWORD *)(v124 - 64);
    if (!v132)
      goto LABEL_257;
    v133 = *(_QWORD ***)(v124 - 48);
    v134 = &v133[v132];
    while (1)
    {
      v135 = (uint64_t)*v133;
      if (re::StringID::operator==(*v133, v242))
      {
        v136 = *(_QWORD *)&v254[8];
        if (*(_QWORD *)&v254[8])
        {
          v137 = v255;
          while (!re::StringID::operator==(v137, (_QWORD *)(v135 + 32)))
          {
            v137 += 8;
            if (!--v136)
              goto LABEL_186;
          }
          goto LABEL_194;
        }
LABEL_186:
        v138 = strlen(*(const char **)(v135 + 88));
        *(_QWORD *)&v260[0] = *(_QWORD *)(v135 + 88);
        *((_QWORD *)&v260[0] + 1) = v138;
        v139 = strlen(*(const char **)(v135 + 120));
        *(_QWORD *)&v260[1] = *(_QWORD *)(v135 + 120);
        *((_QWORD *)&v260[1] + 1) = v139;
        v140 = (_QWORD *)re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::tryGet((uint64_t)&v244, (uint64_t *)v260);
        if (v140)
        {
          v141 = *(_QWORD *)(v135 + 144);
          if (v141 >= 0xFFFFFFFFFFFFFFFELL && (v141 & 1) == 0)
          {
            v142 = *(_BYTE **)(v135 + 152);
LABEL_192:
            if (!*v142)
            {
              *(_QWORD *)v248 = *v140;
              v143 = *(_QWORD *)v248;
              re::StringID::StringID((re::StringID *)v260, (const StringID *)(v135 + 32));
              *(_QWORD *)&v260[1] = v143;
              *((_QWORD *)&v261 + 1) = 0;
              memset((char *)&v260[1] + 8, 0, 24);
              LODWORD(v261) = 0;
              re::DynamicArray<re::RigGraphNodeOutputParameter>::add((_anonymous_namespace_ *)((char *)&v253[2] + 8), (uint64_t *)v260);
              re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit((uint64_t)&v260[1] + 8);
              re::StringID::destroyString((re::StringID *)v260);
              v144 = strlen(*(const char **)(v135 + 8));
              *(_QWORD *)&v260[0] = *(_QWORD *)(v135 + 8);
              *((_QWORD *)&v260[0] + 1) = v144;
              v145 = *(const char **)(v135 + 40);
              v146 = strlen(v145);
              *(_QWORD *)&v260[1] = v145;
              *((_QWORD *)&v260[1] + 1) = v146;
              re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::add((uint64_t)&v244, (uint64_t *)v260, v248);
            }
            goto LABEL_194;
          }
          if (v141 <= 1)
          {
            v142 = *(_BYTE **)(v135 + 152);
            if (v142)
              goto LABEL_192;
          }
        }
      }
LABEL_194:
      if (++v133 == v134)
      {
        v147 = *(_QWORD *)(v124 - 64);
        if (v147)
        {
          v8 = *(_QWORD *)(v124 - 48);
          v241 = v8 + 8 * v147;
          while (1)
          {
            v148 = *(_QWORD *)v8;
            if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)v8 + 80), v242))
              goto LABEL_213;
            if (!*(_QWORD *)&v253[1])
              break;
            v149 = *(_QWORD **)&v253[2];
            v150 = 40 * *(_QWORD *)&v253[1];
            while (!re::StringID::operator==(v149, (_QWORD *)(v148 + 112)))
            {
              v149 += 5;
              v150 -= 40;
              if (!v150)
                goto LABEL_202;
            }
LABEL_213:
            if (!re::StringID::operator==((_QWORD *)v148, v242))
              goto LABEL_256;
            v161 = *(_QWORD *)&v254[8];
            if (*(_QWORD *)&v254[8])
            {
              v81 = 0;
              v162 = v255;
              while (!re::StringID::operator==(v162, (_QWORD *)(v148 + 32)))
              {
                ++v81;
                v162 += 8;
                if (v161 == v81)
                  goto LABEL_218;
              }
            }
            else
            {
LABEL_218:
              re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v4, (StringID *)(v148 + 16));
              *(_QWORD *)v248 = *(_QWORD *)(a3 + 136) - 1;
              v163 = *(_QWORD *)v248;
              re::StringID::StringID((re::StringID *)v260, (const StringID *)(v148 + 32));
              *(_QWORD *)&v260[1] = v163;
              *((_QWORD *)&v261 + 1) = 0;
              memset((char *)&v260[1] + 8, 0, 24);
              LODWORD(v261) = 0;
              re::DynamicArray<re::RigGraphNodeOutputParameter>::add((_anonymous_namespace_ *)((char *)&v253[2] + 8), (uint64_t *)v260);
              re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit((uint64_t)&v260[1] + 8);
              re::StringID::destroyString((re::StringID *)v260);
              v81 = *(_QWORD *)&v254[8] - 1;
              v164 = strlen(*(const char **)(v148 + 8));
              *(_QWORD *)&v260[0] = *(_QWORD *)(v148 + 8);
              *((_QWORD *)&v260[0] + 1) = v164;
              v165 = strlen(*(const char **)(v148 + 40));
              *(_QWORD *)&v260[1] = *(_QWORD *)(v148 + 40);
              *((_QWORD *)&v260[1] + 1) = v165;
              re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::add((uint64_t)&v244, (uint64_t *)v260, v248);
            }
            v7 = v148 + 144;
            v166 = *(_QWORD *)(v148 + 144);
            if (v166 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)(v148 + 144) & 1) == 0)
            {
              v168 = *(_BYTE **)(v148 + 152);
            }
            else
            {
              if (v166 > 1)
                goto LABEL_228;
              v168 = *(_BYTE **)(v148 + 152);
              if (!v168)
                goto LABEL_228;
            }
            if (!*v168)
              goto LABEL_256;
LABEL_228:
            v169 = strlen(*(const char **)(v148 + 88));
            *(_QWORD *)&v260[0] = *(_QWORD *)(v148 + 88);
            *((_QWORD *)&v260[0] + 1) = v169;
            v170 = strlen(*(const char **)(v148 + 120));
            *(_QWORD *)&v260[1] = *(_QWORD *)(v148 + 120);
            *((_QWORD *)&v260[1] + 1) = v170;
            v171 = (unint64_t *)re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::tryGet((uint64_t)&v244, (uint64_t *)v260);
            if (v171)
            {
              v4 = *v171;
            }
            else
            {
              re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v4, (StringID *)(v148 + 96));
              v4 = *(_QWORD *)(a3 + 136) - 1;
              v172 = strlen(*(const char **)(v148 + 88));
              *(_QWORD *)&v260[0] = *(_QWORD *)(v148 + 88);
              *((_QWORD *)&v260[0] + 1) = v172;
              v173 = strlen(*(const char **)(v148 + 120));
              *(_QWORD *)&v260[1] = *(_QWORD *)(v148 + 120);
              *((_QWORD *)&v260[1] + 1) = v173;
              v174 = re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>::operator()((uint64_t *)v260);
              v175 = v174;
              if ((_QWORD)v244)
              {
                v176 = v174 % DWORD2(v245);
                v177 = *(unsigned int *)(*((_QWORD *)&v244 + 1) + 4 * v176);
                if ((_DWORD)v177 != 0x7FFFFFFF)
                {
                  v233 = v174 % DWORD2(v245);
                  v234 = v174;
                  v3 = v245;
                  while (!re::Pair<re::StringSlice,re::StringSlice,true>::operator==<re::StringSlice,re::StringSlice>(v3 + 56 * v177 + 16, (uint64_t)v260))
                  {
                    v177 = *(_DWORD *)(v3 + 56 * v177 + 8) & 0x7FFFFFFF;
                    if (v177 == 0x7FFFFFFF)
                    {
                      v3 = 56;
                      v176 = v233;
                      v175 = v234;
                      goto LABEL_237;
                    }
                  }
                  goto LABEL_243;
                }
              }
              else
              {
                v176 = 0;
              }
LABEL_237:
              v178 = v247;
              if ((_DWORD)v247 == 0x7FFFFFFF)
              {
                v178 = v246;
                v179 = v246;
                if (v246 == DWORD2(v245))
                {
                  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::setCapacity((uint64_t)&v244, 2 * HIDWORD(v245));
                  v179 = v246;
                  v176 = v175 % DWORD2(v245);
                }
                v246 = v179 + 1;
                v180 = v245;
                v181 = *(_DWORD *)(v245 + 56 * v178 + 8);
              }
              else
              {
                v180 = v245;
                v181 = *(_DWORD *)(v245 + 56 * v247 + 8);
                LODWORD(v247) = v181 & 0x7FFFFFFF;
              }
              v182 = v180 + 56 * v178;
              *(_DWORD *)(v182 + 8) = v181 | 0x80000000;
              v183 = *((_QWORD *)&v244 + 1);
              *(_DWORD *)(v182 + 8) = *(_DWORD *)(*((_QWORD *)&v244 + 1) + 4 * v176) | 0x80000000;
              *(_QWORD *)v182 = v175;
              *(_OWORD *)(v182 + 16) = v260[0];
              *(_OWORD *)(v182 + 32) = v260[1];
              *(_QWORD *)(v182 + 48) = v4;
              *(_DWORD *)(v183 + 4 * v176) = v178;
              ++HIDWORD(v245);
              ++HIDWORD(v247);
            }
LABEL_243:
            v184 = *(_QWORD *)&v254[8];
            if (*(_QWORD *)&v254[8] <= v81)
            {
              v243 = 0;
              v261 = 0u;
              v262 = 0u;
              memset(v260, 0, sizeof(v260));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v248 = 136315906;
              *(_QWORD *)&v248[4] = "operator[]";
              *(_WORD *)&v248[12] = 1024;
              *(_DWORD *)&v248[14] = 789;
              *(_WORD *)&v248[18] = 2048;
              *(_QWORD *)&v248[20] = v81;
              *(_WORD *)&v248[28] = 2048;
              *(_QWORD *)&v248[30] = v184;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_300:
              *(_QWORD *)v249 = 0;
              v127 = v249;
              *(_OWORD *)v254 = 0u;
              memset(v253, 0, sizeof(v253));
              buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v260[0]) = 136315906;
              *(_QWORD *)((char *)v260 + 4) = "operator[]";
              WORD6(v260[0]) = 1024;
              *(_DWORD *)((char *)v260 + 14) = 468;
              WORD1(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 4) = v81;
              WORD6(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 14) = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_301:
              *(_QWORD *)v248 = 0;
              *(_OWORD *)(v7 + 96) = 0u;
              *(_OWORD *)(v7 + 112) = 0u;
              *(_OWORD *)(v7 + 64) = 0u;
              *(_OWORD *)(v7 + 80) = 0u;
              *(_OWORD *)(v7 + 48) = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v260[0]) = 136315906;
              *(_QWORD *)(v7 + 196) = "operator[]";
              WORD6(v260[0]) = 1024;
              *(_DWORD *)(v7 + 206) = 797;
              WORD1(v260[1]) = 2048;
              *(_QWORD *)(v7 + 212) = v127;
              WORD6(v260[1]) = 2048;
              *(_QWORD *)(v7 + 222) = v81;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_302:
              *(_QWORD *)v248 = 0;
              *(_OWORD *)(v7 + 240) = 0u;
              *(_OWORD *)(v7 + 256) = 0u;
              *(_OWORD *)(v7 + 208) = 0u;
              *(_OWORD *)(v7 + 224) = 0u;
              *(_OWORD *)(v7 + 192) = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v249 = 136315906;
              *(_QWORD *)&v249[4] = "operator[]";
              *(_WORD *)&v249[12] = 1024;
              *(_DWORD *)&v249[14] = 468;
              *(_WORD *)&v249[18] = 2048;
              *(_QWORD *)&v249[20] = v3;
              v250 = 2048;
              *(_QWORD *)(v7 + 30) = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_303:
              *(_QWORD *)v249 = 0;
              *(_OWORD *)v254 = 0u;
              memset(v253, 0, sizeof(v253));
              buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v260[0]) = 136315906;
              *(_QWORD *)((char *)v260 + 4) = "operator[]";
              WORD6(v260[0]) = 1024;
              *(_DWORD *)((char *)v260 + 14) = 468;
              WORD1(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 4) = v4;
              WORD6(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 14) = v242;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_304:
              *(_QWORD *)v249 = 0;
              *(_OWORD *)v254 = 0u;
              memset(v253, 0, sizeof(v253));
              buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v260[0]) = 136315906;
              *(_QWORD *)((char *)v260 + 4) = "operator[]";
              WORD6(v260[0]) = 1024;
              *(_DWORD *)((char *)v260 + 14) = 468;
              WORD1(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 4) = v4;
              WORD6(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 14) = v242;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_305:
              *(_QWORD *)v249 = 0;
              *(_OWORD *)v254 = 0u;
              memset(v253, 0, sizeof(v253));
              buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v260[0]) = 136315906;
              *(_QWORD *)((char *)v260 + 4) = "operator[]";
              WORD6(v260[0]) = 1024;
              *(_DWORD *)((char *)v260 + 14) = 468;
              WORD1(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 4) = v4;
              WORD6(v260[1]) = 2048;
              *(_QWORD *)((char *)&v260[1] + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_306;
            }
            v185 = v255;
            v186 = &v255[8 * v81];
            re::StringID::StringID((re::StringID *)v248, (const StringID *)(v148 + 112));
            *(_QWORD *)&v248[16] = v4;
            re::StringID::StringID((re::StringID *)&v248[24], (const StringID *)(v148 + 144));
            v187 = re::StringID::StringID((re::StringID *)v260, (const StringID *)(v148 + 64));
            v260[1] = *(_OWORD *)v248;
            v260[2] = *(_OWORD *)&v248[16];
            *(_QWORD *)v248 = 0;
            *(_QWORD *)&v248[24] = 0;
            v189 = v186 + 5;
            v188 = v186[5];
            *(_QWORD *)&v261 = *(_QWORD *)&v248[32];
            *(_QWORD *)&v248[8] = &str_110;
            *(_QWORD *)&v248[32] = &str_110;
            v190 = v186[4];
            if (v188 >= v190)
            {
              v191 = v188 + 1;
              if (v190 < v188 + 1)
              {
                if (v186[3])
                {
                  v192 = 2 * v190;
                  v22 = v190 == 0;
                  v193 = 8;
                  if (!v22)
                    v193 = v192;
                  if (v193 <= v191)
                    v194 = v191;
                  else
                    v194 = v193;
                  re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity(v186 + 3, v194);
                }
                else
                {
                  re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity(v186 + 3, v191);
                  ++LODWORD(v185[8 * v81 + 6]);
                }
              }
              v188 = *v189;
            }
            v3 = 56;
            v195 = (unint64_t *)(v186[7] + 56 * v188);
            v196 = v260[0];
            *v195 = *v195 & 0xFFFFFFFFFFFFFFFELL | v260[0] & 1;
            *v195 = *(_QWORD *)&v260[0] & 0xFFFFFFFFFFFFFFFELL | v196 & 1;
            v195[1] = *((_QWORD *)&v260[0] + 1);
            *(_QWORD *)&v260[0] = 0;
            *((_QWORD *)&v260[0] + 1) = &str_110;
            v197 = v260[1];
            v195[2] = v195[2] & 0xFFFFFFFFFFFFFFFELL | v260[1] & 1;
            v195[2] = *(_QWORD *)&v260[1] & 0xFFFFFFFFFFFFFFFELL | v197 & 1;
            v195[3] = *((_QWORD *)&v260[1] + 1);
            *(_QWORD *)&v260[1] = 0;
            *((_QWORD *)&v260[1] + 1) = &str_110;
            v195[4] = *(_QWORD *)&v260[2];
            v198 = BYTE8(v260[2]);
            v195[5] = v195[5] & 0xFFFFFFFFFFFFFFFELL | BYTE8(v260[2]) & 1;
            v195[5] = *((_QWORD *)&v260[2] + 1) & 0xFFFFFFFFFFFFFFFELL | v198 & 1;
            v195[6] = v261;
            *((_QWORD *)&v260[2] + 1) = 0;
            *(_QWORD *)&v261 = &str_110;
            ++*v189;
            ++*((_DWORD *)v186 + 12);
            re::StringID::destroyString((re::StringID *)((char *)&v260[2] + 8));
            re::StringID::destroyString((re::StringID *)&v260[1]);
            re::StringID::destroyString((re::StringID *)v260);
            re::StringID::destroyString((re::StringID *)&v248[24]);
            re::StringID::destroyString((re::StringID *)v248);
            v4 = a3 + 120;
LABEL_256:
            v8 += 8;
            if (v8 == v241)
              goto LABEL_257;
          }
LABEL_202:
          v151 = strlen(*(const char **)(v148 + 88));
          *(_QWORD *)&v260[0] = *(_QWORD *)(v148 + 88);
          *((_QWORD *)&v260[0] + 1) = v151;
          v152 = strlen(*(const char **)(v148 + 120));
          *(_QWORD *)&v260[1] = *(_QWORD *)(v148 + 120);
          *((_QWORD *)&v260[1] + 1) = v152;
          v153 = re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::tryGet((uint64_t)&v244, (uint64_t *)v260);
          if (v153)
          {
            v154 = (_QWORD *)v153;
            re::StringID::StringID((re::StringID *)v260, (const StringID *)(v148 + 112));
            *(_QWORD *)&v260[1] = *v154;
            re::StringID::invalid((re::StringID *)((char *)&v260[1] + 8));
LABEL_212:
            re::DynamicArray<re::RigGraphNodeParameter>::add((_anonymous_namespace_ *)v253, (uint64_t *)v260);
            re::StringID::destroyString((re::StringID *)((char *)&v260[1] + 8));
            re::StringID::destroyString((re::StringID *)v260);
            goto LABEL_213;
          }
          v155 = strlen(*(const char **)(v148 + 8));
          *(_QWORD *)&v260[0] = *(_QWORD *)(v148 + 8);
          *((_QWORD *)&v260[0] + 1) = v155;
          v156 = strlen(*(const char **)(v148 + 40));
          *(_QWORD *)&v260[1] = *(_QWORD *)(v148 + 40);
          *((_QWORD *)&v260[1] + 1) = v156;
          v157 = re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>::operator()((uint64_t *)v260);
          if ((_QWORD)v244)
          {
            v158 = v245;
            v159 = *(unsigned int *)(*((_QWORD *)&v244 + 1) + 4 * (v157 % DWORD2(v245)));
            if ((_DWORD)v159 != 0x7FFFFFFF)
            {
              while (!re::Pair<re::StringSlice,re::StringSlice,true>::operator==<re::StringSlice,re::StringSlice>(v158 + 56 * v159 + 16, (uint64_t)v260))
              {
                v159 = *(_DWORD *)(v158 + 56 * v159 + 8) & 0x7FFFFFFF;
                if (v159 == 0x7FFFFFFF)
                  goto LABEL_210;
              }
              goto LABEL_211;
            }
          }
          else
          {
            v158 = v245;
          }
LABEL_210:
          v159 = 0x7FFFFFFFLL;
LABEL_211:
          v160 = *(_QWORD *)(v158 + 56 * v159 + 48);
          re::StringID::StringID((re::StringID *)v260, (const StringID *)(v148 + 112));
          *(_QWORD *)&v260[1] = v160;
          re::StringID::StringID((re::StringID *)((char *)&v260[1] + 8), (const StringID *)(v148 + 64));
          goto LABEL_212;
        }
LABEL_257:
        v199 = *(_QWORD *)(v240 - 24);
        v8 = (unint64_t)&str_110;
        if (v199)
        {
          v200 = *(StringID ***)(v240 - 8);
          v201 = 8 * v199;
          do
          {
            v202 = *v200;
            re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v4, *v200 + 1);
            v203 = *(_QWORD *)(a3 + 136) - 1;
            *(_QWORD *)&v260[0] = v203;
            v204 = re::StringID::StringID((re::StringID *)((char *)v260 + 8), v202 + 5);
            v205 = *(_QWORD *)(a3 + 168);
            v206 = *(_QWORD *)(a3 + 176);
            if (v206 >= v205)
            {
              v207 = v206 + 1;
              if (v205 < v206 + 1)
              {
                if (*v236)
                {
                  v208 = 2 * v205;
                  v22 = v205 == 0;
                  v209 = 8;
                  if (!v22)
                    v209 = v208;
                  if (v209 <= v207)
                    v210 = v207;
                  else
                    v210 = v209;
                  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity(v236, v210);
                }
                else
                {
                  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity(v236, v207);
                  ++*(_DWORD *)(a3 + 184);
                }
              }
              v206 = *(_QWORD *)(a3 + 176);
            }
            v211 = (_QWORD *)(*(_QWORD *)(a3 + 192) + 24 * v206);
            *v211 = *(_QWORD *)&v260[0];
            v212 = BYTE8(v260[0]);
            v211[1] = v211[1] & 0xFFFFFFFFFFFFFFFELL | BYTE8(v260[0]) & 1;
            v211[1] = *((_QWORD *)&v260[0] + 1) & 0xFFFFFFFFFFFFFFFELL | v212 & 1;
            v211[2] = *(_QWORD *)&v260[1];
            *((_QWORD *)&v260[0] + 1) = 0;
            *(_QWORD *)&v260[1] = &str_110;
            ++*(_QWORD *)(a3 + 176);
            ++*(_DWORD *)(a3 + 184);
            re::StringID::destroyString((re::StringID *)((char *)v260 + 8));
            re::StringID::StringID((re::StringID *)v260, v202 + 2);
            *(_QWORD *)&v260[1] = v203;
            re::StringID::StringID((re::StringID *)((char *)&v260[1] + 8), v202 + 4);
            re::DynamicArray<re::RigGraphNodeParameter>::add((_anonymous_namespace_ *)v253, (uint64_t *)v260);
            re::StringID::destroyString((re::StringID *)((char *)&v260[1] + 8));
            re::StringID::destroyString((re::StringID *)v260);
            ++v200;
            v201 -= 8;
          }
          while (v201);
        }
        v213 = *(_QWORD *)(a3 + 88);
        v214 = *(_QWORD *)(a3 + 96);
        v7 = (uint64_t)v249;
        v3 = 56;
        if (v214 >= v213)
        {
          v215 = v214 + 1;
          if (v213 < v214 + 1)
          {
            if (*(_QWORD *)v232)
            {
              v216 = 2 * v213;
              v22 = v213 == 0;
              v217 = 8;
              if (!v22)
                v217 = v216;
              if (v217 <= v215)
                v218 = v215;
              else
                v218 = v217;
              re::DynamicArray<re::RigGraphNodeChild>::setCapacity(v232, v218);
            }
            else
            {
              re::DynamicArray<re::RigGraphNodeChild>::setCapacity(v232, v215);
              ++*(_DWORD *)(a3 + 104);
            }
          }
          v214 = *(_QWORD *)(a3 + 96);
        }
        v219 = *(_QWORD *)(a3 + 112) + 96 * v214;
        v220 = buf;
        *(_QWORD *)v219 = *(_QWORD *)v219 & 0xFFFFFFFFFFFFFFFELL | buf & 1;
        *(_QWORD *)v219 = buf & 0xFFFFFFFFFFFFFFFELL | v220 & 1;
        *(_QWORD *)(v219 + 8) = *((_QWORD *)&buf + 1);
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &str_110;
        *(_QWORD *)(v219 + 48) = 0;
        *(_DWORD *)(v219 + 40) = 0;
        *(_QWORD *)(v219 + 24) = 0;
        *(_QWORD *)(v219 + 32) = 0;
        *(_QWORD *)(v219 + 16) = 0;
        *(_QWORD *)(v219 + 16) = *(_QWORD *)&v253[0];
        *(_QWORD *)&v253[0] = 0;
        *(_QWORD *)(v219 + 24) = *((_QWORD *)&v253[0] + 1);
        *((_QWORD *)&v253[0] + 1) = 0;
        v221 = *(_QWORD *)(v219 + 32);
        *(_QWORD *)(v219 + 32) = *(_QWORD *)&v253[1];
        *(_QWORD *)&v253[1] = v221;
        v222 = *(_QWORD *)(v219 + 48);
        *(_QWORD *)(v219 + 48) = *(_QWORD *)&v253[2];
        *(_QWORD *)&v253[2] = v222;
        ++DWORD2(v253[1]);
        ++*(_DWORD *)(v219 + 40);
        *(_QWORD *)(v219 + 88) = 0;
        *(_QWORD *)(v219 + 64) = 0;
        *(_QWORD *)(v219 + 72) = 0;
        *(_QWORD *)(v219 + 56) = 0;
        *(_DWORD *)(v219 + 80) = 0;
        *(_QWORD *)(v219 + 56) = *((_QWORD *)&v253[2] + 1);
        *((_QWORD *)&v253[2] + 1) = 0;
        *(_QWORD *)(v219 + 64) = *(_QWORD *)v254;
        *(_QWORD *)v254 = 0;
        v223 = *(_QWORD *)(v219 + 72);
        *(_QWORD *)(v219 + 72) = *(_QWORD *)&v254[8];
        *(_QWORD *)&v254[8] = v223;
        v224 = *(_QWORD **)(v219 + 88);
        *(_QWORD *)(v219 + 88) = v255;
        v255 = v224;
        ++*(_DWORD *)&v254[16];
        ++*(_DWORD *)(v219 + 80);
        ++*(_QWORD *)(a3 + 96);
        ++*(_DWORD *)(a3 + 104);
        re::DynamicArray<re::RigGraphNodeOutputParameter>::deinit((uint64_t)&v253[2] + 8);
        re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v253);
        re::StringID::destroyString((re::StringID *)&buf);
        v125 = v237;
        v124 = v237;
        if (v237 == v235)
          break;
        goto LABEL_178;
      }
    }
  }
  v225.n128_f64[0] = re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)&v244);
  result = *(_QWORD *)v249;
  if (*(_QWORD *)v249 && v251)
  {
    if (v231)
    {
      v227 = 144 * v231;
      v228 = v251 + 88;
      do
      {
        v229 = *(_QWORD *)(v228 + 16);
        if (v229)
        {
          if (*(_QWORD *)(v228 + 48))
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v229 + 40))(v229, v225);
          *(_QWORD *)(v228 + 48) = 0;
          *(_QWORD *)(v228 + 24) = 0;
          *(_QWORD *)(v228 + 32) = 0;
          *(_QWORD *)(v228 + 16) = 0;
          ++*(_DWORD *)(v228 + 40);
        }
        v230 = *(_QWORD *)(v228 - 24);
        if (v230)
        {
          if (*(_QWORD *)(v228 + 8))
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v230 + 40))(v230, v225);
          *(_QWORD *)(v228 + 8) = 0;
          *(_QWORD *)(v228 - 16) = 0;
          *(_QWORD *)(v228 - 8) = 0;
          *(_QWORD *)(v228 - 24) = 0;
          ++*(_DWORD *)v228;
        }
        v225.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v228 - 72));
        v228 += 144;
        v227 -= 144;
      }
      while (v227);
      result = *(_QWORD *)v249;
    }
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 40))(result, v225);
  }
  return result;
}

re::StringID *re::DynamicArray<re::StringID>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  re::StringID *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::StringID>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::StringID::StringID((re::StringID *)(*((_QWORD *)this + 4) + 16 * v4), a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::RigGraphNodeParameter>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphNodeParameter>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphNodeParameter>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = (unint64_t *)(*((_QWORD *)v3 + 4) + 40 * v5);
  v12 = *a2;
  *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v13 = a2[2];
  v11[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v11[2] = v13;
  v14 = a2[3];
  v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  v11[3] = a2[3] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  v11[4] = a2[4];
  a2[3] = 0;
  a2[4] = (uint64_t)&str_110;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::add(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>::operator()(a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = re::Pair<re::StringSlice,re::StringSlice,true>::operator==<re::StringSlice,re::StringSlice>(v10 + 56 * v9 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>::operator()(a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::Pair<re::StringSlice,re::StringSlice,true>::operator==<re::StringSlice,re::StringSlice>(v6 + 56 * v5 + 16, (uint64_t)a2))
  {
    v5 = *(_DWORD *)(v6 + 56 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 56 * v5 + 48;
}

_anonymous_namespace_ *re::DynamicArray<re::RigGraphNodeOutputParameter>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + (v5 << 6);
  v12 = *a2;
  *(_QWORD *)v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v13 = a2[2];
  *(_QWORD *)(v11 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  v14 = a2[4];
  *(_QWORD *)(v11 + 24) = a2[3];
  *(_QWORD *)(v11 + 32) = v14;
  a2[3] = 0;
  a2[4] = 0;
  v15 = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v11 + 40) = a2[5];
  a2[5] = v15;
  v16 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v11 + 56) = a2[7];
  a2[7] = v16;
  ++*((_DWORD *)a2 + 12);
  ++*(_DWORD *)(v11 + 48);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

re::DynamicString *re::RigGraphSystem::compile@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, re::EvaluationContextManager *a4@<X3>, _QWORD *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  re::DynamicString *result;
  __int128 v9;
  __int128 v10;
  unint64_t v12;
  re::DynamicString *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  re::RigEnvironment *v25;
  re::Allocator *v26;
  re::Allocator *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v38;
  re::EvaluationTree *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  re::DynamicString *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48[2];
  uint64_t v49;
  _BYTE v50[16];
  _BYTE v51[40];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _BYTE v78[28];
  __int16 v79;
  _BYTE v80[10];
  int v81;
  const char *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  unint64_t v88;
  _QWORD v89[6];
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v48[0] = a5;
  v48[1] = (_QWORD *)a6;
  if (*(_BYTE *)(a1 + 24))
  {
    v9 = v53;
    v10 = v54;
    *(_BYTE *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 3004;
    *(_QWORD *)(a7 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a7 + 24) = v9;
    *(_OWORD *)(a7 + 40) = v10;
  }
  else
  {
    v12 = (unint64_t)a5;
    *(_QWORD *)(a1 + 8) = a3;
    v14 = *(re::DynamicString **)a1;
    v47 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v43 = v14;
    re::DynamicArray<float *>::setCapacity(&v43, a6);
    v15 = ++v46;
    if (a6)
    {
      v16 = v45;
      v17 = 288 * a6;
      do
      {
        if (v16 >= v44)
        {
          re::DynamicArray<float *>::growCapacity(&v43, v16 + 1);
          v16 = v45;
          v15 = v46;
        }
        *(_QWORD *)(v47 + 8 * v16++) = v12;
        v45 = v16;
        v46 = ++v15;
        v12 += 288;
        v17 -= 288;
      }
      while (v17);
    }
    v38 = a1;
    v18 = *(_QWORD *)a1;
    v19 = a2[7];
    v41 = 0;
    v42 = 0;
    v40 = 0;
    re::FixedArray<re::RigDataValue>::init<>((uint64_t)&v40, v18, v19);
    v20 = a2[7];
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = 16;
      while (v20 > v22)
      {
        v12 = *(_QWORD *)(a2[9] + v23);
        v24 = a2[17];
        if (v24 <= v12)
          goto LABEL_28;
        v25 = *(re::RigEnvironment **)(v38 + 16);
        v39 = *(re::EvaluationTree **)(v38 + 8);
        v26 = *(re::Allocator **)v38;
        re::RigEnvironment::lookupRigDataType(v25, (const char **)(a2[19] + 16 * v12), v78);
        LOBYTE(v49) = v78[8];
        re::StringID::StringID((re::StringID *)v50, (const StringID *)&v78[16]);
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)v51, (uint64_t *)&v80[2]);
        re::Optional<re::RigDataTypeClass>::~Optional(v78);
        v53 = 0u;
        v54 = 0u;
        v55 = 0;
        v56 = 0;
        v57 = &str_110;
        v62 = 0;
        v59 = 0;
        v60 = 0;
        v58 = 0;
        v61 = 0;
        v63 = 0;
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = -1;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = &str_110;
        v77 = 0;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v73 = 0;
        re::RigDataValue::init((re::RigDataValue *)&v53, v26, v25, (const re::RigDataTypeClass *)&v49, v39);
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v51);
        re::StringID::destroyString((re::StringID *)v50);
        v12 = v41;
        if (v41 <= v22)
          goto LABEL_29;
        re::RigDataValue::operator=((_QWORD *)(v42 + v21), (uint64_t)&v53);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)&v53);
        ++v22;
        v20 = a2[7];
        v23 += 40;
        v21 += 288;
        if (v22 >= v20)
          goto LABEL_14;
      }
      v52 = 0;
      v90 = 0u;
      v91 = 0u;
      memset(v89, 0, sizeof(v89));
      v24 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v81 = 136315906;
      v82 = "operator[]";
      v83 = 1024;
      v84 = 797;
      v85 = 2048;
      v86 = v22;
      v87 = 2048;
      v88 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_28:
      v52 = 0;
      v90 = 0u;
      v91 = 0u;
      memset(v89, 0, sizeof(v89));
      v22 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v81 = 136315906;
      v82 = "operator[]";
      v83 = 1024;
      v84 = 797;
      v85 = 2048;
      v86 = v12;
      v87 = 2048;
      v88 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v49 = 0;
      v90 = 0u;
      v91 = 0u;
      memset(v89, 0, sizeof(v89));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v78 = 136315906;
      *(_QWORD *)&v78[4] = "operator[]";
      *(_WORD *)&v78[12] = 1024;
      *(_DWORD *)&v78[14] = 468;
      *(_WORD *)&v78[18] = 2048;
      *(_QWORD *)&v78[20] = v22;
      v79 = 2048;
      *(_QWORD *)v80 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_14:
    v27 = *(re::Allocator **)v38;
    *(_QWORD *)&v80[2] = 0;
    memset(&v78[8], 0, 20);
    *(_QWORD *)v78 = v27;
    re::DynamicArray<float *>::setCapacity(v78, v41);
    ++*(_DWORD *)&v78[24];
    if (v41)
    {
      v28 = v42;
      v29 = 288 * v41;
      do
      {
        *(_QWORD *)&v53 = v28;
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v78, &v53);
        v28 += 288;
        v29 -= 288;
      }
      while (v29);
    }
    v30 = v47;
    v31 = *(_QWORD *)&v80[2];
    re::RigGraphSystem::compileRigGraph((uint64_t)v89, (re::Allocator **)v38, a2, v47, v45, *(uint64_t *)&v80[2], *(unint64_t *)&v78[16]);
    *(_BYTE *)(v38 + 24) = 1;
    if (LOBYTE(v89[0]))
    {
      *(_QWORD *)&v53 = v42;
      *((_QWORD *)&v53 + 1) = v41;
      re::RigGraphCompilation::setInputOutputValues((_QWORD *)(v38 + 32), a4, v48, (_QWORD **)&v53);
      re::RigGraphCompilation::RigGraphCompilation((uint64_t)&v53, v38 + 32);
      *(_BYTE *)a7 = 1;
      re::RigGraphCompilation::RigGraphCompilation(a7 + 8, (uint64_t)&v53);
      re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v53);
    }
    else
    {
      *(_OWORD *)(a7 + 8) = *(_OWORD *)&v89[1];
      v32 = *(_OWORD *)&v89[3];
      v33 = v89[5];
      v34 = v90;
      *(_BYTE *)a7 = 0;
      *(_OWORD *)(a7 + 24) = v32;
      *(_QWORD *)(a7 + 40) = v33;
      *(_QWORD *)(a7 + 48) = v34;
    }
    if (*(_QWORD *)v78 && v31)
      (*(void (**)(void))(**(_QWORD **)v78 + 40))();
    re::FixedArray<re::RigDataValue>::deinit(&v40);
    result = v43;
    if (v43)
    {
      if (v30)
        return (re::DynamicString *)(*(uint64_t (**)(void))(*(_QWORD *)v43 + 40))();
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::RigDataValue *>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * v5) = *a2;
  *((_QWORD *)v3 + 2) = v5 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::RigGraphSystem::compileRigGraph(uint64_t a1, re::Allocator **a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  re::Allocator *v15;
  uint64_t v16;
  unint64_t v17;
  const char **v18;
  re::RigDataValue *v19;
  re::Allocator *v20;
  re::RigEnvironment *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  __n128 v25;
  uint64_t v26;
  re::Allocator *v27;
  re::Allocator *v28;
  uint64_t v29;
  const re::StringID *v30;
  unint64_t i;
  re::RigDataValue *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  re::RigDataValue *v40;
  uint64_t v41;
  re::RigDataValue *v42;
  _QWORD *v43;
  size_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  re::RigDataValue *v60;
  uint64_t v61;
  re::RigDataValue *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const char *v76;
  size_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  re::RigDataValue *v87;
  uint64_t v88;
  re::RigDataValue *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const char *v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  size_t v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  re::RigDataValue *v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  _QWORD *result;
  const re::StringID *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  const re::StringID *v127;
  char v132[24];
  __int128 v133;
  __int128 v134;
  char v135[24];
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  re::Allocator *v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  re::Allocator *v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  int v155;
  char v156[24];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[6];
  __int128 v164;
  __int128 v165;
  int v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  _BYTE v183[18];
  __int16 v184;
  unint64_t v185;
  __int16 v186;
  unint64_t v187;
  _BYTE v188[12];
  __int16 v189;
  int v190;
  __int16 v191;
  unint64_t v192;
  __int16 v193;
  unint64_t v194;
  uint64_t v195;

  v8 = v163;
  v195 = *MEMORY[0x24BDAC8D0];
  v9 = a7 + a5;
  v10 = a3[17];
  v11 = v10 + 1;
  if (v10 + 1 <= a7 + a5)
  {
LABEL_181:
    v149 = 0;
    v8[3] = 0u;
    v8[4] = 0u;
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    v10 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v183 = 136315906;
    *(_QWORD *)&v183[4] = "slice";
    *(_WORD *)&v183[12] = 1024;
    *(_DWORD *)&v183[14] = 1119;
    v184 = 2048;
    v185 = v9;
    v186 = 2048;
    v187 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_182;
  }
  v12 = a3[7] + a3[2];
  v7 = (_OWORD *)(v10 - v12);
  if (__CFADD__(v9, v10 - v12))
  {
LABEL_182:
    re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array size = %zu", "!overflow", "slice", 1125, v9, v7, v10);
    _os_crash();
    __break(1u);
LABEL_183:
    re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, v9, v7, v10);
    _os_crash();
    __break(1u);
  }
  if (v9 + v10 - v12 > v10)
    goto LABEL_183;
  v14 = a3[19];
  v15 = *a2;
  v161 = 0;
  v159 = 0;
  v160 = 0;
  re::FixedArray<re::RigDataValue>::init<>((uint64_t)&v159, (uint64_t)v15, v10 - v12);
  if (v10 != v12)
  {
    v16 = 0;
    v17 = 0;
    v18 = (const char **)(v14 + 16 * v9);
    do
    {
      v11 = v160;
      if (v160 <= v17)
        goto LABEL_174;
      v19 = (re::RigDataValue *)(v161 + v16);
      v20 = *a2;
      v21 = a2[2];
      re::RigEnvironment::lookupRigDataType(v21, v18, v163);
      re::RigDataValue::init(v19, v20, v21, (const re::RigDataTypeClass *)&v163[1], a2[1]);
      re::Optional<re::RigDataTypeClass>::~Optional(v163);
      ++v17;
      v16 += 288;
      v18 += 2;
    }
    while (v7 != (_OWORD *)v17);
  }
  v22 = a3[22];
  if (v22)
  {
    v17 = a3[24];
    v7 = (_OWORD *)(v17 + 24 * v22);
    while (1)
    {
      v11 = *(_QWORD *)v17 - v9;
      v23 = v160;
      if (v160 <= v11)
        break;
      v24 = strlen(*(const char **)(v17 + 16));
      v163[0] = *(_QWORD *)(v17 + 16);
      v163[1] = v24;
      v25 = re::RigDataValue::setBuildTimeValueWithString((_QWORD *)(v161 + 288 * v11), (uint64_t)v163, (uint64_t)v156);
      if (!v156[0] && (_QWORD)v157)
      {
        if ((BYTE8(v157) & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v157 + 40))(v25);
        v157 = 0u;
        v158 = 0u;
      }
      v17 += 24;
      if ((_OWORD *)v17 == v7)
        goto LABEL_17;
    }
    v149 = 0;
    v164 = 0u;
    v165 = 0u;
    memset(v163, 0, sizeof(v163));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v183 = 136315906;
    *(_QWORD *)&v183[4] = "operator[]";
    *(_WORD *)&v183[12] = 1024;
    *(_DWORD *)&v183[14] = 468;
    v184 = 2048;
    v185 = v11;
    v186 = 2048;
    v187 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    v149 = 0;
    v164 = 0u;
    v165 = 0u;
    memset(v163, 0, sizeof(v163));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v183 = 136315906;
    *(_QWORD *)&v183[4] = "operator[]";
    *(_WORD *)&v183[12] = 1024;
    *(_DWORD *)&v183[14] = 468;
    v184 = 2048;
    v185 = v17;
    v186 = 2048;
    v187 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_175:
    v162 = 0;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    v189 = 1024;
    v190 = 797;
    v191 = 2048;
    v192 = v11;
    v193 = 2048;
    v194 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_177:
    v162 = 0;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    v189 = 1024;
    v190 = 797;
    v191 = 2048;
    v192 = v9;
    v193 = 2048;
    v194 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    re::internal::assertLog((re::internal *)4, v61, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_179:
    re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_180:
    *(_QWORD *)v188 = 0;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v183 = 136315906;
    *(_QWORD *)&v183[4] = "operator[]";
    *(_WORD *)&v183[12] = 1024;
    *(_DWORD *)&v183[14] = 789;
    v184 = 2048;
    v185 = v11;
    v186 = 2048;
    v187 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_181;
  }
LABEL_17:
  v26 = (uint64_t)*a2;
  v149 = 0;
  v150 = 0;
  v151 = 1;
  v153 = 0;
  v154 = 0;
  v152 = 0;
  v155 = 0;
  re::BucketArray<re::RigDataValue,8ul>::init((uint64_t)&v149, v26, 1uLL);
  v27 = *a2;
  v148 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v144 = v27;
  re::DynamicArray<float *>::setCapacity(&v144, 0);
  ++v147;
  v28 = *a2;
  v143 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v139 = v28;
  re::DynamicArray<float *>::setCapacity(&v139, 0);
  ++v142;
  v29 = a3[12];
  v7 = v163;
  if (!v29)
    goto LABEL_152;
  v30 = (const re::StringID *)a3[14];
  v125 = (_OWORD *)(a1 + 8);
  v119 = (const re::StringID *)((char *)v30 + 96 * v29);
  v9 = v154;
LABEL_19:
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v32 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, i);
      re::RigDataValue::~RigDataValue(v32);
    }
  }
  v154 = 0;
  ++v155;
  v146 = 0;
  ++v147;
  v141 = 0;
  ++v142;
  v33 = re::RigEnvironment::lookupRigGraphNode(a2[2], v30);
  v127 = v30;
  if (v33)
  {
    v34 = (_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 16);
    if (v145 < v35)
    {
      re::DynamicArray<float *>::setCapacity(&v144, v35);
      v35 = v34[2];
    }
    v9 = 0;
    if (v35)
    {
      v36 = v34[4];
      v123 = v36 + 40 * v35;
      while (1)
      {
        v37 = *((_QWORD *)v30 + 4);
        if (!v37)
          break;
        v38 = (_QWORD *)*((_QWORD *)v30 + 6);
        v39 = 40 * v37;
        while (!re::StringID::operator==(v38, (_QWORD *)v36))
        {
          v38 += 5;
          v39 -= 40;
          if (!v39)
            goto LABEL_31;
        }
        if (!v38)
          goto LABEL_32;
        v138 = v47;
        if (v47)
        {
          v46 = v47;
          goto LABEL_45;
        }
        v17 = 0;
LABEL_33:
        v11 = *(_QWORD *)(v36 + 16);
        v9 = v34[17];
        if (v9 <= v11)
          goto LABEL_175;
        re::RigEnvironment::lookupRigDataType(a2[2], (const char **)(v34[19] + 16 * v11), v183);
        memset(v163, 0, 33);
        v163[5] = 0;
        *(_QWORD *)&v164 = &str_110;
        v167 = 0;
        v165 = 0uLL;
        *((_QWORD *)&v164 + 1) = 0;
        v166 = 0;
        v168 = 0;
        v169 = 0u;
        v170 = 0u;
        v171 = 0u;
        v172 = 0u;
        v173 = -1;
        v174 = 0;
        v175 = 0;
        v176 = 0;
        v177 = &str_110;
        v182 = 0;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        v178 = 0;
        v40 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::addUninitialized((uint64_t)&v149);
        re::RigDataValue::RigDataValue(v40, (const re::RigDataValue *)v163);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)v163);
        v9 = v154;
        if (!v154)
          goto LABEL_176;
        v42 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v154 - 1);
        re::RigDataValue::init(v42, *a2, a2[2], (const re::RigDataTypeClass *)&v183[8], a2[1]);
        v43 = (_QWORD *)re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v9 - 1);
        v44 = strlen(*(const char **)(v36 + 32));
        v163[0] = *(_QWORD *)(v36 + 32);
        v163[1] = v44;
        v45 = re::RigDataValue::setBuildTimeValueWithString(v43, (uint64_t)v163, (uint64_t)v135);
        if (!v135[0] && (_QWORD)v136)
        {
          if ((BYTE8(v136) & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v136 + 40))(v45);
          v136 = 0u;
          v137 = 0u;
        }
        v46 = re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v9 - 1);
        v138 = v46;
        re::Optional<re::RigDataTypeClass>::~Optional(v183);
        if ((v17 & 1) != 0)
        {
LABEL_53:
          re::DynamicArray<re::TransitionCondition *>::add(&v144, &v138);
          v30 = v127;
          goto LABEL_59;
        }
LABEL_45:
        v48 = v38[3];
        if (v48 < 0xFFFFFFFFFFFFFFFELL || (v48 & 1) != 0)
        {
          v49 = (const char *)v38[4];
          if (v48 > 1)
            goto LABEL_50;
        }
        else
        {
          v49 = (const char *)v38[4];
        }
        if (!*v49)
          goto LABEL_53;
LABEL_50:
        v50 = strlen(v49);
        *(_QWORD *)v183 = v49;
        *(_QWORD *)&v183[8] = v50;
        re::RigDataValue::attributeValue(v46, (uint64_t)v183, (uint64_t)v163);
        v51 = LOBYTE(v163[0]);
        if (LOBYTE(v163[0]))
        {
          re::DynamicArray<re::TransitionCondition *>::add(&v144, &v163[1]);
          v30 = v127;
          if (LOBYTE(v163[0]))
            goto LABEL_59;
        }
        else
        {
          v52 = *(_OWORD *)&v163[3];
          memset(&v163[3], 0, 24);
          v53 = v163[5];
          v54 = v164;
          *(_QWORD *)&v164 = 0;
          *(_BYTE *)a1 = 0;
          *v125 = *(_OWORD *)&v163[1];
          *(_OWORD *)(a1 + 24) = v52;
          *(_QWORD *)(a1 + 40) = v53;
          *(_QWORD *)(a1 + 48) = v54;
          v30 = v127;
        }
        if (v163[3] && (v163[4] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v163[3] + 40))();
        if (!v51)
          goto LABEL_153;
LABEL_59:
        v36 += 40;
        if (v36 == v123)
          goto LABEL_62;
      }
LABEL_31:
      v38 = 0;
      v138 = 0;
LABEL_32:
      v17 = 1;
      goto LABEL_33;
    }
LABEL_62:
    v55 = v34[7];
    if (v140 < v55)
    {
      re::DynamicArray<float *>::setCapacity(&v139, v55);
      v55 = v34[7];
    }
    if (v55)
    {
      v56 = (_QWORD *)v34[9];
      v11 = (unint64_t)&v56[5 * v55];
      do
      {
        v57 = *((_QWORD *)v30 + 9);
        if (!v57)
          goto LABEL_73;
        v58 = (_QWORD *)*((_QWORD *)v30 + 11);
        v59 = v57 << 6;
        while (!re::StringID::operator==(v58, v56))
        {
          v58 += 8;
          v59 -= 64;
          if (!v59)
            goto LABEL_73;
        }
        if (v58)
        {
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)&v139, v163);
        }
        else
        {
LABEL_73:
          v9 = v56[2];
          v17 = v34[17];
          if (v17 <= v9)
            goto LABEL_177;
          re::RigEnvironment::lookupRigDataType(a2[2], (const char **)(v34[19] + 16 * v9), v183);
          memset(v163, 0, 33);
          v163[5] = 0;
          *(_QWORD *)&v164 = &str_110;
          v167 = 0;
          v165 = 0uLL;
          *((_QWORD *)&v164 + 1) = 0;
          v166 = 0;
          v168 = 0;
          v169 = 0u;
          v170 = 0u;
          v171 = 0u;
          v172 = 0u;
          v173 = -1;
          v174 = 0;
          v175 = 0;
          v176 = 0;
          v177 = &str_110;
          v182 = 0;
          v179 = 0;
          v180 = 0;
          v181 = 0;
          v178 = 0;
          v60 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::addUninitialized((uint64_t)&v149);
          re::RigDataValue::RigDataValue(v60, (const re::RigDataValue *)v163);
          re::RigDataValue::~RigDataValue((re::RigDataValue *)v163);
          v9 = v154;
          if (!v154)
            goto LABEL_178;
          v62 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v154 - 1);
          re::RigDataValue::init(v62, *a2, a2[2], (const re::RigDataTypeClass *)&v183[8], a2[1]);
          v163[0] = re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v9 - 1);
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)&v139, v163);
          re::Optional<re::RigDataTypeClass>::~Optional(v183);
          v30 = v127;
        }
        v56 += 5;
      }
      while (v56 != (_QWORD *)v11);
    }
    v63 = v143;
    v11 = v141;
    re::RigGraphSystem::compileRigGraph(v132, a2, v34, v148, v146, v143, v141);
    if (!v132[0] && (_QWORD)v133)
    {
      if ((BYTE8(v133) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v133 + 40))();
      v133 = 0u;
      v134 = 0u;
    }
    goto LABEL_123;
  }
  v64 = re::RigEnvironment::lookupRigGraphOperator(a2[2], v30);
  if (!v64)
  {
    re::internal::assertLog((re::internal *)4, v65, "assertion failure: '%s' (%s:line %i) Node definition not found!", "!\"Unreachable code\"", "compileRigGraph", 527);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v66 = v64;
  v67 = *(_QWORD *)(v64 + 24);
  if (v145 < v67)
  {
    re::DynamicArray<float *>::setCapacity(&v144, v67);
    v67 = *(_QWORD *)(v66 + 24);
  }
  if (!v67)
  {
LABEL_108:
    v82 = *(_QWORD *)(v66 + 48);
    if (v140 < v82)
    {
      re::DynamicArray<float *>::setCapacity(&v139, v82);
      v82 = *(_QWORD *)(v66 + 48);
    }
    v9 = 0;
    if (v82)
    {
      v83 = *(_QWORD *)(v66 + 56);
      v11 = v83 + 32 * v82;
      do
      {
        v84 = *((_QWORD *)v30 + 9);
        if (!v84)
          goto LABEL_119;
        v85 = (_QWORD *)*((_QWORD *)v30 + 11);
        v86 = v84 << 6;
        while (!re::StringID::operator==(v85, (_QWORD *)v83))
        {
          v85 += 8;
          v86 -= 64;
          if (!v86)
            goto LABEL_119;
        }
        if (v85)
        {
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)&v139, v163);
        }
        else
        {
LABEL_119:
          re::RigEnvironment::lookupRigDataType(a2[2], (const char **)(v83 + 16), v183);
          memset(v163, 0, 33);
          v163[5] = 0;
          *(_QWORD *)&v164 = &str_110;
          v167 = 0;
          v165 = 0uLL;
          *((_QWORD *)&v164 + 1) = 0;
          v166 = 0;
          v168 = 0;
          v169 = 0u;
          v170 = 0u;
          v171 = 0u;
          v172 = 0u;
          v173 = -1;
          v174 = 0;
          v175 = 0;
          v176 = 0;
          v177 = &str_110;
          v182 = 0;
          v179 = 0;
          v180 = 0;
          v181 = 0;
          v178 = 0;
          v87 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::addUninitialized((uint64_t)&v149);
          re::RigDataValue::RigDataValue(v87, (const re::RigDataValue *)v163);
          re::RigDataValue::~RigDataValue((re::RigDataValue *)v163);
          v9 = v154;
          if (!v154)
            goto LABEL_179;
          v89 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v154 - 1);
          re::RigDataValue::init(v89, *a2, a2[2], (const re::RigDataTypeClass *)&v183[8], a2[1]);
          v163[0] = re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v9 - 1);
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)&v139, v163);
          re::Optional<re::RigDataTypeClass>::~Optional(v183);
        }
        v83 += 32;
      }
      while (v83 != v11);
    }
    v63 = v143;
    v11 = v141;
    (*(void (**)(re::Allocator **, uint64_t, uint64_t, uint64_t, unint64_t))(v66 + 64))(a2, v148, v146, v143, v141);
LABEL_123:
    v90 = *((_QWORD *)v30 + 9);
    if (!v90)
      goto LABEL_151;
    v91 = 0;
    v120 = v63;
    v121 = v11;
    while (1)
    {
      if (v91 == v11)
        goto LABEL_180;
      v92 = *((_QWORD *)v30 + 11) + (v91 << 6);
      v93 = *(_QWORD *)(v92 + 40);
      if (!v93)
        goto LABEL_150;
      v124 = v91;
      v94 = *(_QWORD *)(v63 + 8 * v91);
      v95 = *(_QWORD *)(v92 + 56);
      v96 = v95 + 56 * v93;
      v97 = v95 + 8;
      do
      {
        v99 = v97 - 8;
        v98 = *(_QWORD *)(v97 - 8);
        if (v98 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)(v97 - 8) & 1) == 0)
        {
          v101 = *(const char **)v97;
LABEL_135:
          v102 = v94;
          if (!*v101)
            goto LABEL_137;
          goto LABEL_136;
        }
        v101 = *(const char **)v97;
        if (v98 <= 1)
          goto LABEL_135;
LABEL_136:
        v103 = strlen(v101);
        *(_QWORD *)v183 = v101;
        *(_QWORD *)&v183[8] = v103;
        re::RigDataValue::attributeValue(v94, (uint64_t)v183, (uint64_t)v163);
        v102 = v163[1];
        if (!LOBYTE(v163[0]) && v163[3] && (v163[4] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v163[3] + 40))();
LABEL_137:
        v105 = strlen(*(const char **)(v97 + 40));
        *(_QWORD *)v183 = *(_QWORD *)(v97 + 40);
        *(_QWORD *)&v183[8] = v105;
        re::RigDataValue::attributeValue(v104, (uint64_t)v183, (uint64_t)v163);
        v106 = LOBYTE(v163[0]);
        if (LOBYTE(v163[0]))
        {
          re::RigDataValue::operator=((_QWORD *)v163[1], v102);
          if (LOBYTE(v163[0]))
            goto LABEL_145;
        }
        else
        {
          v107 = *(_OWORD *)&v163[3];
          memset(&v163[3], 0, 24);
          v108 = v163[5];
          v109 = v164;
          *(_QWORD *)&v164 = 0;
          *(_BYTE *)a1 = 0;
          *v125 = *(_OWORD *)&v163[1];
          *(_OWORD *)(a1 + 24) = v107;
          *(_QWORD *)(a1 + 40) = v108;
          *(_QWORD *)(a1 + 48) = v109;
        }
        if (v163[3] && (v163[4] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v163[3] + 40))();
        if (!v106)
          goto LABEL_153;
LABEL_145:
        v97 += 56;
      }
      while (v99 + 56 != v96);
      v30 = v127;
      v90 = *((_QWORD *)v127 + 9);
      v7 = v163;
      v63 = v120;
      v11 = v121;
      v91 = v124;
LABEL_150:
      if (++v91 >= v90)
      {
LABEL_151:
        v30 = (const re::StringID *)((char *)v30 + 96);
        if (v30 == v119)
        {
LABEL_152:
          *(_BYTE *)a1 = 1;
          goto LABEL_153;
        }
        goto LABEL_19;
      }
    }
  }
  v68 = *(_QWORD **)(v66 + 32);
  v69 = &v68[4 * v67];
  while (1)
  {
    v70 = (_QWORD *)*((_QWORD *)v30 + 6);
    v71 = *((_QWORD *)v30 + 4);
    if (!re::StringID::operator==(v70, v68))
    {
      v72 = 40 * v71 - 40;
      do
      {
        v70 += 5;
        v72 -= 40;
      }
      while (!re::StringID::operator==(v70, v68));
    }
    *(_QWORD *)v188 = v73;
    v74 = v70[3];
    if (v74 >= 0xFFFFFFFFFFFFFFFELL && (v70[3] & 1) == 0)
    {
      v76 = (const char *)v70[4];
    }
    else
    {
      v76 = (const char *)v70[4];
      if (v74 > 1)
        goto LABEL_98;
    }
    if (!*v76)
    {
      re::DynamicArray<re::TransitionCondition *>::add(&v144, v188);
      goto LABEL_107;
    }
LABEL_98:
    v77 = strlen(v76);
    *(_QWORD *)v183 = v76;
    *(_QWORD *)&v183[8] = v77;
    re::RigDataValue::attributeValue(v73, (uint64_t)v183, (uint64_t)v163);
    v78 = LOBYTE(v163[0]);
    if (!LOBYTE(v163[0]))
      break;
    re::DynamicArray<re::TransitionCondition *>::add(&v144, &v163[1]);
    if (!LOBYTE(v163[0]))
      goto LABEL_103;
LABEL_107:
    v68 += 4;
    if (v68 == v69)
      goto LABEL_108;
  }
  v79 = *(_OWORD *)&v163[3];
  memset(&v163[3], 0, 24);
  v80 = v163[5];
  v81 = v164;
  *(_QWORD *)&v164 = 0;
  *(_BYTE *)a1 = 0;
  *v125 = *(_OWORD *)&v163[1];
  *(_OWORD *)(a1 + 24) = v79;
  *(_QWORD *)(a1 + 40) = v80;
  *(_QWORD *)(a1 + 48) = v81;
LABEL_103:
  if (v163[3] && (v163[4] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v163[3] + 40))();
  if (v78)
    goto LABEL_107;
LABEL_153:
  if (v139 && v143)
    (*(void (**)(void))(*(_QWORD *)v139 + 40))();
  if (v144 && v148)
    (*(void (**)(void))(*(_QWORD *)v144 + 40))();
  v110 = v154;
  if (v154)
  {
    v111 = 0;
    do
    {
      v112 = (re::RigDataValue *)re::BucketArray<re::RigDataValue,8ul>::operator[]((uint64_t)&v149, v111);
      re::RigDataValue::~RigDataValue(v112);
      ++v111;
    }
    while (v110 != v111);
  }
  v113 = v149;
  if (v150)
  {
    v114 = v153;
    v115 = v151;
    v116 = v150 - 1;
    do
    {
      if ((v115 & 1) != 0)
        v117 = &v152;
      else
        v117 = v114;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 40))(v113, v117[v116]);
      v115 += 2;
      v151 = v115;
      --v116;
    }
    while (v116 != -1);
LABEL_170:
    if ((v151 & 1) == 0)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 40))(v113, v153);
  }
  else if (v149)
  {
    goto LABEL_170;
  }
  return re::FixedArray<re::RigDataValue>::deinit(&v159);
}

uint64_t re::`anonymous namespace'::resolveRigDataIndexInputValue(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v9;

  v7 = a1 - a3;
  if (a1 < a3)
    return *(_QWORD *)(a2 + 8 * a1);
  v9 = a1 - (a5 + a3);
  if (a1 < a5 + a3)
  {
    if (v7 < a5)
      return *(_QWORD *)(a4 + 8 * v7);
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a1 - a3, a5);
    _os_crash();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a5 + a3 + a6 <= a1)
    return 0;
  if (v9 >= a6)
    goto LABEL_12;
  return a7 + 288 * v9;
}

uint64_t re::`anonymous namespace'::resolveRigDataIndexOutputValue(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;

  v6 = a1 - (a4 + a2);
  if (a1 < a4 + a2)
  {
    if (a1 - a2 < a4)
      return *(_QWORD *)(a3 + 8 * (a1 - a2));
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a1 - a2, a4);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v6 >= a5)
    goto LABEL_8;
  return a6 + 288 * v6;
}

uint64_t *re::RigGraphSystem::visitTask(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  unint64_t v30;

  if (*((_DWORD *)result + 2) != 2)
  {
    v5 = result;
    v6 = *((unsigned int *)result + 12);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = (int *)(result[4] + 8);
      while (1)
      {
        v9 = *v8;
        v8 += 6;
        if (v9 < 0)
          break;
        if (v6 == ++v7)
        {
          LODWORD(v7) = *((_DWORD *)result + 12);
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if ((_DWORD)v6 != (_DWORD)v7)
    {
      v10 = v7;
      do
      {
        result = (uint64_t *)re::RigGraphSystem::visitTask(*(_QWORD *)(v5[4] + 24 * v10 + 16), a2, a3);
        if (*((_DWORD *)v5 + 12) <= (v7 + 1))
          v11 = v7 + 1;
        else
          v11 = *((_DWORD *)v5 + 12);
        v12 = v7;
        while (1)
        {
          v10 = (v12 + 1);
          if (v11 - 1 == v12)
            break;
          ++v12;
          LODWORD(v7) = v10;
          if ((*(_DWORD *)(v5[4] + 24 * v10 + 8) & 0x80000000) != 0)
            goto LABEL_18;
        }
        LODWORD(v7) = v11;
LABEL_18:
        ;
      }
      while ((_DWORD)v6 != (_DWORD)v7);
    }
    *((_DWORD *)v5 + 2) = 2;
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(a3 + 16);
    if (v14 >= v13)
    {
      v15 = v14 + 1;
      if (v13 < v14 + 1)
      {
        if (*(_QWORD *)a3)
        {
          v16 = 2 * v13;
          v17 = v13 == 0;
          v18 = 8;
          if (!v17)
            v18 = v16;
          if (v18 <= v15)
            v19 = v15;
          else
            v19 = v18;
          re::DynamicArray<re::RigGraphSystem::BuildTask>::setCapacity((_QWORD *)a3, v19);
        }
        else
        {
          re::DynamicArray<re::RigGraphSystem::BuildTask>::setCapacity((_QWORD *)a3, v15);
          ++*(_DWORD *)(a3 + 24);
        }
      }
      v14 = *(_QWORD *)(a3 + 16);
    }
    v20 = *(_QWORD *)(a3 + 32) + 144 * v14;
    v21 = *v5;
    *(_DWORD *)(v20 + 8) = *((_DWORD *)v5 + 2);
    *(_QWORD *)v20 = v21;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_DWORD *)(v20 + 48) = 0;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_QWORD *)(v20 + 52) = 0x7FFFFFFFLL;
    result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v20 + 16), v5 + 2);
    *(_QWORD *)(v20 + 96) = 0;
    *(_DWORD *)(v20 + 88) = 0;
    *(_QWORD *)(v20 + 72) = 0;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 64) = 0;
    *(_QWORD *)(v20 + 64) = v5[8];
    v5[8] = 0;
    *(_QWORD *)(v20 + 72) = v5[9];
    v5[9] = 0;
    v22 = *(_QWORD *)(v20 + 80);
    *(_QWORD *)(v20 + 80) = v5[10];
    v5[10] = v22;
    v23 = *(_QWORD *)(v20 + 96);
    *(_QWORD *)(v20 + 96) = v5[12];
    v5[12] = v23;
    ++*((_DWORD *)v5 + 22);
    ++*(_DWORD *)(v20 + 88);
    *(_QWORD *)(v20 + 136) = 0;
    *(_QWORD *)(v20 + 112) = 0;
    *(_QWORD *)(v20 + 120) = 0;
    *(_QWORD *)(v20 + 104) = 0;
    *(_DWORD *)(v20 + 128) = 0;
    *(_QWORD *)(v20 + 104) = v5[13];
    v5[13] = 0;
    *(_QWORD *)(v20 + 112) = v5[14];
    v5[14] = 0;
    v24 = *(_QWORD *)(v20 + 120);
    *(_QWORD *)(v20 + 120) = v5[15];
    v5[15] = v24;
    v25 = *(_QWORD *)(v20 + 136);
    *(_QWORD *)(v20 + 136) = v5[17];
    v5[17] = v25;
    ++*((_DWORD *)v5 + 32);
    ++*(_DWORD *)(v20 + 128);
    ++*(_QWORD *)(a3 + 16);
    ++*(_DWORD *)(a3 + 24);
    v26 = *(uint64_t ***)(a2 + 32);
    v27 = *(_QWORD *)(a2 + 16);
    v28 = v26;
    if (v27)
    {
      v29 = 8 * v27;
      v28 = *(uint64_t ***)(a2 + 32);
      while (*v28 != v5)
      {
        ++v28;
        v29 -= 8;
        if (!v29)
        {
          v28 = &v26[v27];
          break;
        }
      }
    }
    v30 = v28 - v26;
    if (v30 != v27)
    {
      if (v27 <= v30)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v27 - 1 > v30)
        v26[v30] = v26[v27 - 1];
      *(_QWORD *)(a2 + 16) = v27 - 1;
      ++*(_DWORD *)(a2 + 24);
    }
  }
  return result;
}

void re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  LODWORD(v4) = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)result + 7);
  *((_DWORD *)result + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)result + 8);
  *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)result + 9);
  *((_DWORD *)result + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  return result;
}

void re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = (_QWORD *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0)
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::addAsMove(a1, *(v11 - 2) % (unint64_t)*(unsigned int *)(a1 + 24), *(v11 - 2), v11);
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v6 = result;
  v7 = *(unsigned int *)(result + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(result + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(result + 24))
    {
      result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v6 + 24);
      v8 = *(_DWORD *)(v6 + 32);
    }
    *(_DWORD *)(v6 + 32) = v8 + 1;
    v9 = *(_QWORD *)(v6 + 16);
    v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
  }
  else
  {
    v9 = *(_QWORD *)(result + 16);
    v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
    *(_DWORD *)(result + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 24 * v7 + 8) = v10 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v6 + 16) + 24 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v6 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(v6 + 16) + 24 * v7) = a3;
  *(_QWORD *)(*(_QWORD *)(v6 + 16) + 24 * v7 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(v6 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(v6 + 28);
  return result;
}

double re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigGraphNodeParameter>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphNodeParameter>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[5 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v13 = v8[2];
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = &str_110;
          v11[2] = v13;
          LOBYTE(v12) = v8[3];
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v8[3] & 1;
          v11[3] = v8[3] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[4] = v8[4];
          v8[4] = &str_110;
          v8[3] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 3));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 5;
          v11 += 5;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RigGraphNodeChild>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::RigGraphNodeChild>((uint64_t *)v5[4], (uint64_t *)(v5[4] + 96 * v5[2]), v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphNodeChild>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::RigGraphNodeChild>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFFELL | *v5 & 1;
      *(_QWORD *)a3 = *v5 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 8) = v5[1];
      *v5 = 0;
      v5[1] = (uint64_t)&str_110;
      *(_QWORD *)(a3 + 48) = 0;
      *(_DWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v7 = v5[3];
      *(_QWORD *)(a3 + 16) = v5[2];
      v5[2] = 0;
      *(_QWORD *)(a3 + 24) = v7;
      v5[3] = 0;
      v8 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = v5[4];
      v5[4] = v8;
      v9 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 48) = v5[6];
      v5[6] = v9;
      ++*((_DWORD *)v5 + 10);
      ++*(_DWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 88) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_DWORD *)(a3 + 80) = 0;
      v10 = v5[8];
      *(_QWORD *)(a3 + 56) = v5[7];
      v5[7] = 0;
      *(_QWORD *)(a3 + 64) = v10;
      v5[8] = 0;
      v11 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 72) = v5[9];
      v5[9] = v11;
      v12 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = v5[11];
      v5[11] = v12;
      ++*((_DWORD *)v5 + 20);
      ++*(_DWORD *)(a3 + 80);
      re::DynamicArray<re::RigGraphNodeOutputParameter>::deinit((uint64_t)(v5 + 7));
      re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(v5 + 2));
      re::StringID::destroyString((re::StringID *)v5);
      v5 += 12;
      a3 += 96;
    }
    while (v5 != a2);
  }
}

_QWORD *re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[3 * v9];
        v11 = v7;
        do
        {
          *v11 = *v8;
          v13 = v8[1];
          v12 = v8 + 1;
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v11[1] = *v12 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v11[2] = v12[1];
          *v12 = 0;
          v12[1] = &str_110;
          re::StringID::destroyString((re::StringID *)v12);
          v8 = v12 + 2;
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 56 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 56;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 56 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 56 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  v13 = *(_QWORD *)(a1 + 16) + 56 * v9;
  v14 = a4[1];
  *(_OWORD *)(v13 + 16) = *a4;
  *(_OWORD *)(v13 + 32) = v14;
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 48) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

BOOL re::Pair<re::StringSlice,re::StringSlice,true>::operator==<re::StringSlice,re::StringSlice>(uint64_t a1, uint64_t a2)
{
  size_t v2;
  size_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8)
    && !memcmp(*(const void **)a1, *(const void **)a2, v2)
    && (v5 = *(_QWORD *)(a1 + 24), v5 == *(_QWORD *)(a2 + 24)))
  {
    return memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v5) == 0;
  }
  else
  {
    return 0;
  }
}

unint64_t re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>::operator()(uint64_t *a1)
{
  unint64_t v2;

  v2 = re::Hash<re::StringSlice>::operator()(*a1, a1[1]);
  return ((v2 << 6) + (v2 >> 2) + re::Hash<re::StringSlice>::operator()(a1[2], a1[3]) - 0x61C8864680B583E9) ^ v2;
}

unint64_t re::Hash<re::StringSlice>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  MurmurHash3_x64_128(a1, a2, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

void re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(uint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v13 = *v6;
            v14 = *(unsigned int *)(a1 + 24);
            v15 = *v6 % v14;
            v16 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v16 == 0x7FFFFFFF)
            {
              v16 = *(unsigned int *)(a1 + 32);
              v17 = v16;
              if ((_DWORD)v16 == (_DWORD)v14)
              {
                re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::setCapacity(a1, (2 * v11));
                v15 = v13 % *(unsigned int *)(a1 + 24);
                v17 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v17 + 1;
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 56 * v16 + 8);
            }
            else
            {
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 56 * v16 + 8);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v18 + 56 * v16 + 8) = v19 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16) = v13;
            v20 = *(_QWORD *)(a1 + 16) + 56 * v16;
            v21 = *((_OWORD *)v6 + 2);
            *(_OWORD *)(v20 + 16) = *((_OWORD *)v6 + 1);
            *(_OWORD *)(v20 + 32) = v21;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 48) = v6[6];
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 7;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

_QWORD *re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[8 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v13 = v8[2];
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v11[7] = 0;
          v11[2] = v13;
          v11[3] = 0;
          *((_DWORD *)v11 + 12) = 0;
          v11[4] = 0;
          v11[5] = 0;
          v14 = v8[4];
          v11[3] = v8[3];
          v8[3] = 0;
          v11[4] = v14;
          v8[4] = 0;
          v15 = v11[5];
          v11[5] = v8[5];
          v8[5] = v15;
          v16 = v11[7];
          v11[7] = v8[7];
          v8[7] = v16;
          ++*((_DWORD *)v8 + 12);
          ++*((_DWORD *)v11 + 12);
          re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit((uint64_t)(v8 + 3));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 8;
          v11 += 8;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[7 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = &str_110;
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v13 = v8[4];
          v11[3] = v8[3];
          v8[3] = &str_110;
          v8[2] = 0;
          v11[4] = v13;
          LOBYTE(v12) = v8[5];
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v8[5] & 1;
          v11[5] = v8[5] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[6] = v8[6];
          v8[6] = &str_110;
          v8[5] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 5));
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RigGraphCompilation::RigGraphCompilation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  re::BucketArray<std::unique_ptr<void,std::function<void ()(void *)>>,64ul>::swap(a1, a2);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v5;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v6;
  ++*(_DWORD *)(a2 + 80);
  ++*(_DWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v8;
  v9 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v9;
  ++*(_DWORD *)(a2 + 120);
  ++*(_DWORD *)(a1 + 120);
  return a1;
}

_QWORD *re::BucketArray<re::RigDataValue,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::RigDataValue,8ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::RigDataValue,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 2304, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::RigDataValue,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 288 * (a2 & 7);
}

uint64_t re::BucketArray<re::RigDataValue,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::RigDataValue,8ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 288 * (v2 & 7);
}

_QWORD *re::DynamicArray<re::RigGraphSystem::BuildTask>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphSystem::BuildTask>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          v22 = result;
          if (result)
          {
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v22 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v22;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v7 = v5[4];
      v8 = v5[2];
      if (v8)
      {
        v9 = 0;
        v10 = 144 * v8;
        do
        {
          v11 = &v22[v9 / 8];
          v12 = v7 + v9;
          v13 = *(_QWORD *)(v7 + v9);
          *((_DWORD *)v11 + 2) = *(_DWORD *)(v7 + v9 + 8);
          *v11 = v13;
          *((_OWORD *)v11 + 2) = 0u;
          *((_DWORD *)v11 + 12) = 0;
          *((_OWORD *)v11 + 1) = 0u;
          *(_QWORD *)((char *)v11 + 52) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(&v22[v9 / 8 + 2], (uint64_t *)(v7 + v9 + 16));
          v11[12] = 0;
          *((_DWORD *)v11 + 22) = 0;
          v11[9] = 0;
          v11[10] = 0;
          v11[8] = 0;
          v14 = (_QWORD *)(v7 + v9 + 64);
          v15 = *(_QWORD *)(v7 + v9 + 72);
          v11[8] = *v14;
          *(_QWORD *)(v12 + 64) = 0;
          v11[9] = v15;
          *(_QWORD *)(v12 + 72) = 0;
          v16 = v22[v9 / 8 + 10];
          v11[10] = *(_QWORD *)(v7 + v9 + 80);
          *(_QWORD *)(v12 + 80) = v16;
          v17 = v22[v9 / 8 + 12];
          v11[12] = *(_QWORD *)(v7 + v9 + 96);
          *(_QWORD *)(v12 + 96) = v17;
          ++*(_DWORD *)(v12 + 88);
          ++*((_DWORD *)v11 + 22);
          v11[17] = 0;
          v11[14] = 0;
          v11[15] = 0;
          v11[13] = 0;
          *((_DWORD *)v11 + 32) = 0;
          v18 = *(_QWORD *)(v7 + v9 + 112);
          v11[13] = *(_QWORD *)(v7 + v9 + 104);
          *(_QWORD *)(v12 + 104) = 0;
          v11[14] = v18;
          *(_QWORD *)(v12 + 112) = 0;
          v19 = v22[v9 / 8 + 15];
          v11[15] = *(_QWORD *)(v7 + v9 + 120);
          *(_QWORD *)(v12 + 120) = v19;
          v20 = v22[v9 / 8 + 17];
          v11[17] = *(_QWORD *)(v7 + v9 + 136);
          *(_QWORD *)(v12 + 136) = v20;
          ++*(_DWORD *)(v12 + 128);
          ++*((_DWORD *)v11 + 32);
          v21 = *(_QWORD *)(v7 + v9 + 104);
          if (v21)
          {
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
            *(_QWORD *)(v12 + 136) = 0;
            *(_QWORD *)(v12 + 112) = 0;
            *(_QWORD *)(v12 + 120) = 0;
            *(_QWORD *)(v12 + 104) = 0;
            ++*(_DWORD *)(v12 + 128);
          }
          if (*v14)
          {
            if (*(_QWORD *)(v12 + 96))
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 40))(*v14);
            *(_QWORD *)(v12 + 96) = 0;
            *(_QWORD *)(v12 + 72) = 0;
            *(_QWORD *)(v12 + 80) = 0;
            *v14 = 0;
            ++*(_DWORD *)(v12 + 88);
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v7 + v9 + 16));
          v9 += 144;
        }
        while (v10 != v9);
        v7 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v7);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t re::internal::AnimationHandoffBehavior::AnimationHandoffBehavior(uint64_t a1, re::AnimationManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  re::DynamicString *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::AnimationManager *started;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[6];
  _BYTE v21[12];
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a4;
  *(_QWORD *)(a1 + 16) = &off_24ED1FF00;
  v8 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 5;
  *(_QWORD *)(a1 + 32) = off_24ED1F350;
  v9 = (_anonymous_namespace_ *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 11;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = &str_110;
  v10 = (re::DynamicString *)(a1 + 72);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)v9 = off_24ED1FE60;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 28) = 2;
  if (*(_BYTE *)(a4 + 4))
  {
    *(_BYTE *)(a1 + 120) = 1;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a4 + 8);
  }
  if (*(_BYTE *)(a4 + 12))
  {
    *(_BYTE *)(a1 + 128) = 1;
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a4 + 16);
  }
  *(double *)(a1 + 112) = *(float *)(a4 + 20);
  *(_QWORD *)(a1 + 144) = v8;
  *(_BYTE *)(a1 + 48) = 0;
  v11 = *(char *)(a3 + 184);
  v12 = re::DataArray<re::internal::TimelineTree>::handle((uint64_t)a2 + 64 * v11 + 72, a3);
  re::AnimationManager::blendFactorAsBindPoint(a2, v12 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v11 << 56), 0, (uint64_t)&v19);
  if (!*(_QWORD *)(a3 + 80))
  {
    v20[5] = 0;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    v28 = 0u;
    v29 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v21 = 136315906;
    *(_QWORD *)&v21[4] = "operator[]";
    v22 = 1024;
    v23 = 468;
    v24 = 2048;
    v25 = 0;
    v26 = 2048;
    v27 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *(_QWORD *)(a3 + 88);
  *(_BYTE *)v13 = 1;
  *(_DWORD *)(v13 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *(_QWORD *)&v28 = 1;
  BYTE8(v28) = 0;
  HIDWORD(v28) = 0x80000000;
  *(_QWORD *)&v29 = "";
  started = re::AnimationManager::startAnimation((uint64_t)a2, v9, 0, &v19, (unint64_t)&v28, 1, (re::internal::TimelineTree *)a3, v21);
  *(_QWORD *)(a1 + 152) = started;
  *(_QWORD *)(a1 + 160) = v15;
  if (*(_QWORD *)v21)
  {

    started = *(re::AnimationManager **)(a1 + 152);
  }
  if (started)
  {
    v16 = *(_QWORD *)(a3 + 168);
    v17 = re::DataArray<re::internal::TimelineTree>::tryGet((uint64_t)started + 64 * (*(uint64_t *)(a1 + 160) >> 56) + 72, *(_QWORD *)(a1 + 160));
    if (v17)
      *(_QWORD *)(v17 + 168) = v16;
  }
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v20);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v20);
  return a1;
}

void re::internal::AnimationHandoffBehavior::~AnimationHandoffBehavior(re::internal::AnimationHandoffBehavior *this, double a2)
{
  uint64_t v3;

  LODWORD(a2) = 0;
  re::AnimationController::stop((re::internal::AnimationHandoffBehavior *)((char *)this + 152), a2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 168);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 4) = off_24ED1F350;
  if (v3)
  {
    if ((*((_BYTE *)this + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 11));
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
  }
  re::StringID::destroyString((re::internal::AnimationHandoffBehavior *)((char *)this + 56));
}

void re::FloatAnimation::~FloatAnimation(re::FloatAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::FloatAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::FloatAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

BOOL re::internal::AnimationHandoffBehavior::update(re::internal::TimelineTree **this, re::AnimationManager *a2)
{
  re::internal::TimelineTree *v4;
  float v5;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  switch(*((_DWORD *)this + 2))
  {
    case 0:
    case 2:
      re::AnimationController::clock((re::AnimationController *)(this + 19), 0, (uint64_t)v7);
      return LOBYTE(v7[0]) == 1;
    case 1:
      v4 = *this;
      if (!*((_QWORD *)*this + 10))
      {
        memset(v7, 0, sizeof(v7));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = *(float *)(*((_QWORD *)v4 + 11) + 8);
      if (v5 != 1.0 && fabsf(v5 + -1.0) >= (float)((float)((float)(fabsf(v5) + 1.0) + 1.0) * 0.00001))
        return 0;
      re::AnimationManager::removePending(a2, v4, (const re::internal::AnimationHandoffBehavior *)this);
      return 1;
    case 3:
      re::AnimationController::clock((re::AnimationController *)(this + 19), 0, (uint64_t)v7);
      if (LOBYTE(v7[0]) != 1)
        return 0;
      re::AnimationManager::removePending(a2, *this, (const re::internal::AnimationHandoffBehavior *)this);
      re::AnimationManager::remove(a2, *this, 0);
      return 1;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected animation handoff type.", "!\"Unreachable code\"", "update", 83);
      _os_crash();
      __break(1u);
      JUMPOUT(0x22506CFA8);
  }
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void re::HermiteEase::~HermiteEase(re::HermiteEase *this)
{
  JUMPOUT(0x2276933B8);
}

double re::HermiteEase::clone(re::HermiteEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  double result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 16, 8);
  result = *((double *)this + 1);
  *(double *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24ED1FF00;
  return result;
}

uint64_t re::HermiteEase::typeInfo(re::HermiteEase *this)
{
  return re::introspect_HermiteEase(0);
}

float re::HermiteEase::easeIn(re::HermiteEase *this, float a2)
{
  float v2;

  v2 = 0.0;
  if (a2 > 0.0)
  {
    v2 = 1.0;
    if (a2 < 1.0)
      return (float)((float)(a2 * a2) * (float)(3.0 - a2)) * 0.5;
  }
  return v2;
}

uint64_t re::AnimationImpl<float>::evaluateCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4, *a5);
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 1) != 0)
      v3 = 4;
    else
      v3 = *((_QWORD *)result + 3);
    if (v2 >= v3)
      return re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::growCapacity(result, v2 + 1);
  }
  else
  {
    v4 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    if (a2 <= 4)
      return result;
    v5 = 8;
  }
  else
  {
    v4 = *((_QWORD *)result + 3);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::setCapacity(result, a2);
}

_QWORD *re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::internal::TimelineTree const*,4ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 4;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::Skeleton::init(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  size_t v8;
  StringID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  StringID *v27;
  _DWORD *v28;
  char *var1;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  __int128 v41;
  uint64_t v42;
  float32x4_t *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float32x4_t *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float32x4_t v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  float32x4_t v86;
  float32_t v87;
  unsigned int v88;
  float32x4_t v89;
  _BYTE v90[48];
  __int128 v91;
  unsigned __int128 v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v8 = a4[1];
  if (!v8)
  {
    v9 = (StringID)v92;
    v11 = v93.i64[1];
    v10 = v93.i64[0];
    *(_BYTE *)a7 = 0;
    v12 = 1003;
LABEL_36:
    *(_QWORD *)(a7 + 8) = v12;
    *(_QWORD *)(a7 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(StringID *)(a7 + 24) = v9;
    *(_QWORD *)(a7 + 40) = v10;
    *(_QWORD *)(a7 + 48) = v11;
    return;
  }
  if (v8 >= 0xFFFFFFFF)
  {
LABEL_35:
    v9 = (StringID)v92;
    v11 = v93.i64[1];
    v10 = v93.i64[0];
    *(_BYTE *)a7 = 0;
    v12 = 1032;
    goto LABEL_36;
  }
  v14 = a5[1];
  if (v8 != v14)
  {
    re::DynamicString::format((re::DynamicString *)"Mismatching parent indices count (%u != %zu).", (re::DynamicString *)&v92, a4[1], v14);
    goto LABEL_35;
  }
  v15 = a6;
  if (v8 != *(_QWORD *)(a6 + 8))
  {
    re::DynamicString::format((re::DynamicString *)"Mismatching local rest pose joint count (%u != %zu).", (re::DynamicString *)&v92, a4[1], v8);
    v9 = (StringID)v92;
    v11 = v93.i64[1];
    v10 = v93.i64[0];
    *(_BYTE *)a7 = 0;
    v12 = 1004;
    goto LABEL_36;
  }
  v16 = a4;
  v18 = a2;
  v20 = 0;
  v21 = *a5;
  do
  {
    v22 = *(unsigned int *)(v21 + 4 * v20);
    if ((_DWORD)v22 != -1 && v20 <= v22)
    {
      re::DynamicString::format((re::DynamicString *)"Joint parent (%u) must proceed child (%u) in joint order.", (re::DynamicString *)&v92, *(unsigned int *)(v21 + 4 * v20), v20);
      v9 = (StringID)v92;
      v11 = v93.i64[1];
      v10 = v93.i64[0];
      *(_BYTE *)a7 = 0;
      v12 = 1031;
      goto LABEL_36;
    }
    ++v20;
  }
  while (v8 != v20);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(a1 + 14), a2, 2 * v8);
  v25 = 0;
  *(_DWORD *)v90 = 0;
  do
  {
    v26 = v16[1];
    if (v26 <= v25)
    {
      re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v25, v26);
      _os_crash();
      __break(1u);
LABEL_41:
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v33);
      _os_crash();
      __break(1u);
LABEL_42:
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = v15;
      *(_WORD *)&v90[28] = 2048;
      *(_QWORD *)&v90[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = v18;
      *(_WORD *)&v90[28] = 2048;
      *(_QWORD *)&v90[30] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = v18;
      *(_WORD *)&v90[28] = 2048;
      *(_QWORD *)&v90[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = v18;
      *(_WORD *)&v90[28] = 2048;
      *(_QWORD *)&v90[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 468;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = v18;
      *(_WORD *)&v90[28] = 2048;
      *(_QWORD *)&v90[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v27 = (StringID *)(*v16 + 16 * v25);
    v28 = (_DWORD *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(a1 + 14), v27, v90);
    if (*v28 != *(_DWORD *)v90)
    {
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 14);
      re::DynamicString::format((re::DynamicString *)"Duplicate joint name found: %s", (re::DynamicString *)&v92, v27->var1);
      v9 = (StringID)v92;
      v11 = v93.i64[1];
      v10 = v93.i64[0];
      *(_BYTE *)a7 = 0;
      v12 = 1030;
      goto LABEL_36;
    }
    var1 = v27->var1;
    v30 = strrchr(var1, 47);
    if (v30)
      var1 = v30 + 1;
    *(_QWORD *)&v92 = 0;
    *((_QWORD *)&v92 + 1) = &str_110;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(a1 + 14), (StringID *)&v92, v90);
    re::StringID::destroyString((re::StringID *)&v92);
    v25 = *(_DWORD *)v90 + 1;
    *(_DWORD *)v90 = v25;
  }
  while (v25 < v8);
  re::StringID::operator=((unint64_t *)a1, a3);
  re::FixedArray<re::StringID>::init<>(a1 + 2, v18, v8);
  re::FixedArray<re::StringID>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v16);
  re::FixedArray<int>::init<>(a1 + 5, v18, v8);
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a1 + 5), (uint64_t)a5);
  v16 = a1 + 8;
  re::FixedArray<re::GenericSRT<float>>::init<>(a1 + 8, v18, v8);
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(a1 + 8), v15);
  re::FixedArray<re::Matrix4x4<float>>::init<>(a1 + 11, v18, v8);
  v18 = 0;
  v32 = v8;
  do
  {
    v33 = a5[1];
    if (v33 <= v18)
      goto LABEL_41;
    v15 = *(unsigned int *)(*a5 + 4 * v18);
    if ((_DWORD)v15 == -1)
    {
      v8 = a1[9];
      if (v8 <= v18)
        goto LABEL_45;
      v8 = a1[12];
      if (v8 <= v18)
        goto LABEL_46;
      v69 = (float32x4_t *)(a1[10] + 48 * v18);
      v66 = v69[2];
      v66.i32[3] = 1.0;
      v70 = v69[1].f32[0];
      v71 = v69[1].f32[1];
      v72 = v70 + v70;
      v73 = v69[1].f32[2];
      v74 = v69[1].f32[3];
      v75 = (float)(v70 + v70) * v73;
      v76 = (float)(v71 + v71) * v74;
      v77 = v73 * (float)(v71 + v71);
      v78 = (float)(v70 + v70) * v74;
      v79 = v70 * (float)(v70 + v70);
      v80 = v71 * (float)(v71 + v71);
      v81.i32[3] = 0;
      v81.f32[0] = v75 + v76;
      v81.f32[1] = v77 - v78;
      v81.f32[2] = 1.0 - (float)(v79 + v80);
      v82 = v72 * v71;
      v83 = (float)(v73 + v73) * v74;
      v84 = v73 * (float)(v73 + v73);
      *(float *)&v85 = v77 + v78;
      v86.f32[0] = v82 - v83;
      v86.f32[1] = 1.0 - (float)(v79 + v84);
      v86.i64[1] = v85;
      v67 = vmulq_laneq_f32(v81, *v69, 2);
      v64 = vmulq_n_f32(v86, *(float *)vshrq_n_u64(*(uint64x2_t *)v69, 0x20uLL).i32);
      v87 = v82 + v83;
      *(float *)&v88 = v75 - v76;
      v89.f32[0] = 1.0 - (float)(v84 + v80);
      v89.f32[1] = v87;
      v89.i64[1] = v88;
      v65 = vmulq_n_f32(v89, COERCE_FLOAT(*v69));
      v68 = (float32x4_t *)(a1[13] + (v18 << 6));
    }
    else
    {
      v8 = a1[12];
      if (v8 <= v15)
        goto LABEL_42;
      v16 = (_QWORD *)a1[9];
      if ((unint64_t)v16 <= v18)
        goto LABEL_43;
      v34 = 0;
      v35 = a1[10] + 48 * v18;
      v36 = *(float *)(v35 + 16);
      v37 = *(float *)(v35 + 20);
      v38 = *(float *)(v35 + 24);
      v39 = *(float *)(v35 + 28);
      v40 = *(float32x4_t *)v35;
      v41 = *(_OWORD *)(v35 + 32);
      v42 = a1[13];
      v43 = (float32x4_t *)(v42 + (v15 << 6));
      v44 = v36 + v36;
      v45 = v37 + v37;
      v46 = v38 + v38;
      v47 = v36 * (float)(v36 + v36);
      v48 = v37 * (float)(v37 + v37);
      v49 = v38 * (float)(v38 + v38);
      v50 = v44 * v37;
      v51 = v44 * v38;
      v52 = v45 * v38;
      v53 = v44 * v39;
      v54 = v45 * v39;
      v55 = v46 * v39;
      v56.i32[3] = 0;
      v56.f32[0] = 1.0 - (float)(v48 + v49);
      v56.f32[1] = v50 + v55;
      v56.f32[2] = v51 - v54;
      v57.i32[3] = 0;
      v57.f32[0] = v50 - v55;
      v57.f32[1] = 1.0 - (float)(v47 + v49);
      v57.f32[2] = v52 + v53;
      v58 = v52 - v53;
      v59.i32[3] = 0;
      v59.f32[0] = v51 + v54;
      v59.f32[1] = v58;
      v59.f32[2] = 1.0 - (float)(v47 + v48);
      HIDWORD(v41) = 1.0;
      v60 = *v43;
      v61 = v43[1];
      v62 = v43[2];
      v63 = v43[3];
      *(float32x4_t *)v90 = vmulq_n_f32(v56, v40.f32[0]);
      *(float32x4_t *)&v90[16] = vmulq_n_f32(v57, *(float *)vshrq_n_u64((uint64x2_t)v40, 0x20uLL).i32);
      *(float32x4_t *)&v90[32] = vmulq_laneq_f32(v59, v40, 2);
      v91 = v41;
      do
      {
        *(unsigned __int128 *)((char *)&v92 + v34) = (unsigned __int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, COERCE_FLOAT(*(_OWORD *)&v90[v34])), v61, *(float32x2_t *)&v90[v34], 1), v62, *(float32x4_t *)&v90[v34], 2), v63, *(float32x4_t *)&v90[v34], 3);
        v34 += 16;
      }
      while (v34 != 64);
      if (v8 <= v18)
        goto LABEL_44;
      v65 = (float32x4_t)v92;
      v64 = v93;
      v67 = v94;
      v66 = v95;
      v68 = (float32x4_t *)(v42 + (v18 << 6));
    }
    *v68 = v65;
    v68[1] = v64;
    v68[2] = v67;
    v68[3] = v66;
    ++v18;
  }
  while (v18 != v32);
  *(_BYTE *)a7 = 1;
}

void re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_2, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

_anonymous_namespace_ *re::FixedArray<re::StringID>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::StringID>::copy((unint64_t *)a1, (uint64_t **)a2);
  }
  return a1;
}

double re::Skeleton::deinit(re::Skeleton *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  re::StringID::invalid((re::StringID *)&v10);
  v2 = v10;
  v3 = v11;
  v10 = 0;
  v11 = &str_110;
  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v3;
  v12[0] = v2 & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  v12[1] = v5;
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)&v10);
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 7));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  v7 = *((_QWORD *)this + 8);
  if (v7)
  {
    if (*((_QWORD *)this + 9))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 10));
      *((_QWORD *)this + 9) = 0;
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v8 = *((_QWORD *)this + 11);
  if (v8)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14);
}

uint64_t re::Skeleton::estimatedFootprint(const char **this)
{
  size_t v2;
  const char *v3;
  size_t v4;
  const char **v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  size_t v15;
  int v16;
  int v17;

  if ((*(_BYTE *)this & 1) != 0)
    v2 = strlen(this[1]) + 161;
  else
    v2 = 160;
  v3 = this[3];
  v4 = v2 + 16 * (_QWORD)v3;
  if (v3)
  {
    v5 = (const char **)(this[4] + 8);
    do
    {
      if ((*(_BYTE *)(v5 - 1) & 1) != 0)
        v6 = strlen(*v5) + 1;
      else
        v6 = 0;
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  v7 = v4 + 4 * (_QWORD)this[6] + 48 * (_QWORD)this[9] + ((_QWORD)&this[12][*((unsigned int *)this + 34)] << 6);
  v8 = *((unsigned int *)this + 36);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = this[16];
    while (1)
    {
      v11 = *(_DWORD *)v10;
      v10 += 32;
      if (v11 < 0)
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *((_DWORD *)this + 36);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v12 = v9;
    v13 = this[16];
    do
    {
      v14 = &v13[32 * v12];
      if ((v14[8] & 1) != 0)
        v15 = strlen(*((const char **)v14 + 2)) + 1;
      else
        v15 = 0;
      v7 += v15;
      if (v8 <= (int)v9 + 1)
        v16 = v9 + 1;
      else
        v16 = v8;
      while (1)
      {
        v12 = (v9 + 1);
        if (v16 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v17 = v12;
        if ((*(_DWORD *)&v13[32 * v12] & 0x80000000) != 0)
          goto LABEL_28;
      }
      v17 = v16;
LABEL_28:
      LODWORD(v9) = v17;
    }
    while ((_DWORD)v8 != v17);
  }
  return v7;
}

uint64_t *re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info = (uint64_t)&off_24ED1FF58;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info, 0);
    qword_2557FF1A8 = 0x1800000004;
    dword_2557FF1B0 = v10;
    word_2557FF1B4 = 0;
    *(_QWORD *)&xmmword_2557FF1B8 = 0;
    *((_QWORD *)&xmmword_2557FF1B8 + 1) = 0xFFFFFFFFLL;
    qword_2557FF1C8 = v9;
    unk_2557FF1D0 = 0;
    re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info = (uint64_t)&off_24ED1FF58;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_2557FF1B8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(BOOL)::info;
}

uint64_t *re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info = (uint64_t)&off_24ED1FFF0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::introspect_SRT((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info, 0);
    qword_2557FF1F8 = 0x1800000004;
    dword_2557FF200 = v10;
    word_2557FF204 = 0;
    *(_QWORD *)&xmmword_2557FF208 = 0;
    *((_QWORD *)&xmmword_2557FF208 + 1) = 0xFFFFFFFFLL;
    qword_2557FF218 = v9;
    unk_2557FF220 = 0;
    re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info = (uint64_t)&off_24ED1FFF0;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_2557FF208 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(BOOL)::info;
}

uint64_t *re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info = (uint64_t)&off_24ED20088;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::IntrospectionInfo<re::StringID>::get(1, a2);
  if (re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info, 0);
    qword_2557FF248 = 0x1800000004;
    dword_2557FF250 = v11;
    word_2557FF254 = 0;
    *(_QWORD *)&xmmword_2557FF258 = 0;
    *((_QWORD *)&xmmword_2557FF258 + 1) = 0xFFFFFFFFLL;
    qword_2557FF268 = v10;
    unk_2557FF270 = 0;
    re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info = (uint64_t)&off_24ED20088;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_2557FF258 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(BOOL)::info;
}

uint64_t *re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info = (uint64_t)&off_24ED20120;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_uint32_t((re *)1, a2);
  if (re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info, 0);
    qword_2557FF298 = 0x1800000004;
    dword_2557FF2A0 = v11;
    word_2557FF2A4 = 0;
    *(_QWORD *)&xmmword_2557FF2A8 = 0;
    *((_QWORD *)&xmmword_2557FF2A8 + 1) = 0xFFFFFFFFLL;
    qword_2557FF2B8 = v10;
    unk_2557FF2C0 = 0;
    re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info = (uint64_t)&off_24ED20120;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_2557FF2A8 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(BOOL)::info;
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  _OWORD *v7;
  const re::IntrospectionBase *v8;
  re *v9;
  std::__shared_mutex_base *v10;
  uint64_t v12;
  int v13;
  re::IntrospectionRegistry *v14;
  const re::IntrospectionBase *v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const char *v21;
  uint64_t v22[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info = (uint64_t)&off_24ED201B8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v4 = re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if (v4)
      return &re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = re::IntrospectionInfo<re::StringID>::get(1, a2);
  v9 = (re *)re::introspect_uint32_t((re *)1, v8);
  if (re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v10 = re::introspectionSharedMutex(v9);
      std::__shared_mutex_base::unlock(v10);
    }
  }
  else
  {
    v12 = (uint64_t)v9;
    re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized = 1;
    v13 = *((_DWORD *)v9 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info, 0);
    qword_2557FF2E8 = 0x3000000007;
    dword_2557FF2F0 = v13;
    word_2557FF2F4 = 0;
    *(_QWORD *)&xmmword_2557FF2F8 = 0;
    *((_QWORD *)&xmmword_2557FF2F8 + 1) = 0xFFFFFFFFLL;
    qword_2557FF308 = (uint64_t)v7;
    unk_2557FF310 = 0;
    qword_2557FF318 = v12;
    unk_2557FF320 = 0;
    re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info = (uint64_t)&off_24ED201B8;
    re::IntrospectionRegistry::add(v14, v15);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v20);
    if ((BYTE8(v20) & 1) != 0)
      v16 = v21;
    else
      v16 = (char *)&v20 + 9;
    if ((_QWORD)v20 && (BYTE8(v20) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v20 + 40))();
    v17 = v7[2];
    v19 = *(_OWORD *)(v12 + 32);
    v20 = v17;
    xmmword_2557FF2F8 = v18;
    re::StringID::destroyString((re::StringID *)v22);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info;
}

uint64_t re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

unint64_t *re::FixedArray<re::StringID>::copy(unint64_t *result, uint64_t **a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;

  v2 = result[1];
  if ((uint64_t *)v2 == a2[1])
  {
    if (v2)
    {
      v3 = *a2;
      result = (unint64_t *)result[2];
      v4 = 16 * v2;
      do
      {
        v5 = re::StringID::operator=(result, v3);
        v3 += 2;
        result = v5 + 2;
        v4 -= 16;
      }
      while (v4);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (unint64_t *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

re::IntrospectionFixedArrayBase *re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase(re::IntrospectionFixedArrayBase *this)
{
  _QWORD *v2;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED20258;
  *((_QWORD *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2 + 6);
  return this;
}

_QWORD *re::IntrospectionFixedArray<re::Matrix4x4<float>>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::Matrix4x4<float>>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::IntrospectionFixedArrayBase::childInfoCount(re::IntrospectionFixedArrayBase *this)
{
  return 1;
}

uint64_t re::IntrospectionFixedArrayBase::childInfo(re::IntrospectionFixedArrayBase *this, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return *((_QWORD *)this + 6);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Index out of range.", "index == 0", "childInfo", 609);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::IntrospectionFixedArray<re::Matrix4x4<float>>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<re::Matrix4x4<float>>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void re::IntrospectionFixedArray<re::Matrix4x4<float>>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  re::FixedArray<re::Matrix4x4<float>>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 64;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<re::Matrix4x4<float>>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::Matrix4x4<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::Matrix4x4<float>>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::Matrix4x4<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + (a3 << 6);
}

void re::IntrospectionFixedArrayBase::~IntrospectionFixedArrayBase(re::IntrospectionFixedArrayBase *this)
{
  *(_QWORD *)this = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArrayBase::init(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "init", 599);
  _os_crash();
  __break(1u);
}

void re::IntrospectionFixedArrayBase::deinit(re::IntrospectionFixedArrayBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "deinit", 600);
  _os_crash();
  __break(1u);
}

void re::IntrospectionFixedArrayBase::size(re::IntrospectionFixedArrayBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "size", 601);
  _os_crash();
  __break(1u);
}

void re::IntrospectionFixedArrayBase::isInitialized(re::IntrospectionFixedArrayBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "isInitialized", 602);
  _os_crash();
  __break(1u);
}

void re::IntrospectionFixedArrayBase::elementAt(re::IntrospectionFixedArrayBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "elementAt", 603);
  _os_crash();
  __break(1u);
}

{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "elementAt", 604);
  _os_crash();
  __break(1u);
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  char v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  re::FixedArray<re::Matrix4x4<float>>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = v10 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 64;
        v12 -= 64;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + ((uint64_t)v1 << 6);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionFixedArray<re::GenericSRT<float>>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::GenericSRT<float>>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::GenericSRT<float>>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<re::GenericSRT<float>>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void *re::IntrospectionFixedArray<re::GenericSRT<float>>::init(uint64_t a1, _QWORD *a2, re *a3, int a4, unint64_t a5)
{
  void *result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::GenericSRT<float>>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 48;
    }
    while (a5 != v12);
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::GenericSRT<float>>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::GenericSRT<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::GenericSRT<float>>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::GenericSRT<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 48 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  v9 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = 48 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 48;
        v12 -= 48;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 48 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionFixedArray<re::StringID>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::StringID>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::StringID>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

_QWORD *re::IntrospectionFixedArray<re::StringID>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::StringID>::deinit(a2);
}

void *re::IntrospectionFixedArray<re::StringID>::init(uint64_t a1, _QWORD *a2, re *a3, int a4, unint64_t a5)
{
  void *result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::StringID>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 16;
    }
    while (a5 != v12);
  }
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::StringID>::deinit(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::StringID>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::StringID>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::StringID>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::StringID>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 16 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(_QWORD *a1)
{
  re::FixedArray<re::StringID>::deinit(a1);
  return re::FixedArray<re::StringID>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(_QWORD *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  re::FixedArray<re::StringID>::deinit(a1);
  v8 = (_anonymous_namespace_ *)re::FixedArray<re::StringID>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = a1[1];
    if (v9)
    {
      v10 = (char *)a1[2];
      v11 = 16 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 16;
        v11 -= 16;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 16 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionFixedArray<unsigned int>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned int>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<unsigned int>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned int>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void re::IntrospectionFixedArray<unsigned int>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  re::FixedArray<int>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 4;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned int>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<unsigned int>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned int>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<unsigned int>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 4 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 4 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  re::FixedArray<int>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = 4 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 4;
        v12 -= 4;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 4 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 4 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned int>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, __int128 *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10;
  re **v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  int v24;
  _QWORD v25[2];
  __int128 v26;
  StringID v27;
  const char **v28;

  v10 = (uint64_t)a1 + 200;
  v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  v22 = 0x449AD97C4B77BED4;
  v23 = "_CompareFunc";
  v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(_QWORD *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  v15 = v22;
  v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (v16 = *v28,
        v22 = v14,
        v23 = v16,
        v24 = -1,
        (v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v27.var0 + 768, &v22)) == 0)|| !*(_QWORD *)v17)
  {
    v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::StringID>, 0);
  }
  v18 = *(_OWORD *)a3;
  v20 = *a4;
  v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

re::IntrospectionHashTableBase *re::IntrospectionHashTableBase::IntrospectionHashTableBase(re::IntrospectionHashTableBase *this)
{
  _QWORD *v2;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED202D8;
  *((_QWORD *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2 + 6);
  *((_QWORD *)this + 9) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 8);
  return this;
}

_QWORD *re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::IntrospectionHashTableBase::childInfoCount(re::IntrospectionHashTableBase *this)
{
  return 2;
}

uint64_t re::IntrospectionHashTableBase::childInfo(re::IntrospectionHashTableBase *this, uint64_t a2)
{
  char *v2;
  uint64_t result;

  if (a2 == 1)
  {
    v2 = (char *)this + 64;
    return *(_QWORD *)v2;
  }
  if (!a2)
  {
    v2 = (char *)this + 48;
    return *(_QWORD *)v2;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Index out of range.", "!\"Unreachable code\"", "childInfo", 872);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  int v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::IntrospectionHashTableBase::~IntrospectionHashTableBase(re::IntrospectionHashTableBase *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24ED202D8;
  v2 = (_QWORD *)((char *)this + 48);
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_24ED202D8;
  v2 = (_QWORD *)((char *)this + 48);
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionHashTableBase::setCapacity(re::IntrospectionHashTableBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "setCapacity", 859);
  _os_crash();
  __break(1u);
}

void re::IntrospectionHashTableBase::size(re::IntrospectionHashTableBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "size", 860);
  _os_crash();
  __break(1u);
}

void re::IntrospectionHashTableBase::clear(re::IntrospectionHashTableBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "clear", 861);
  _os_crash();
  __break(1u);
}

void re::IntrospectionHashTableBase::addElement(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "addElement", 862);
  _os_crash();
  __break(1u);
}

void re::IntrospectionHashTableBase::iterate(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "iterate", 863);
  _os_crash();
  __break(1u);
}

void re::IntrospectionHashTableBase::destroyKey(re::IntrospectionHashTableBase *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "destroyKey", 864);
  _os_crash();
  __break(1u);
}

void re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_2, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t std::function<BOOL ()(void const*,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a3;
  v7 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::less<re::StringID>(v5);
}

uint64_t re::internal::less<re::StringID>(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)) >> 31;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

char *re::AnimationClock::update(char *result, uint64_t a2, uint64_t a3, float a4)
{
  double v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  double v11;
  BOOL v12;
  double v13;
  char v14;
  float v15;
  float v16;
  float v17;
  int v18;
  char v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  double v33;
  float v34;
  float v35;
  uint64_t v36;
  BOOL v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _BYTE *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  float v56;
  double v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  double v67;
  int v68;

  if (*((_DWORD *)result + 16) == 1)
  {
    if (*(_BYTE *)a2)
    {
      v4 = *(double *)(a2 + 8);
      *((_DWORD *)result + 16) = 1;
      *((double *)result + 1) = v4;
      v5 = *(float *)(a3 + 8);
      v6 = fabsf(v5);
      v7 = v4 * v6 - (float)(v6 * *(float *)a3);
      if (v7 >= 0.0)
      {
        v15 = v7;
        v8 = *(float *)(a3 + 4);
        if (v8 >= v15 || vabds_f32(v15, v8) < (float)((float)((float)(fabsf(v15) + fabsf(v8)) + 1.0) * 0.00001))
        {
          *result = 3;
          ++*((_QWORD *)result + 5);
        }
        else if ((*(_BYTE *)(a3 + 25) & 1) != 0)
        {
          *result = 5;
        }
        else
        {
          *result = 1;
          if (v8 <= 0.0)
            goto LABEL_11;
          v7 = v8;
        }
LABEL_33:
        v20 = v5 * a4;
        v22 = *(float *)(a3 + 12);
        v21 = *(float *)(a3 + 16);
        if (v8 <= (float)(v21 - v22))
          v23 = v8;
        else
          v23 = v21 - v22;
        v24 = *(float *)(a3 + 20);
        v25 = v7 + v24;
        v26 = 0.0;
        if (fabsf(v23) < 0.00001 || (v26 = v7 + v24, (LODWORD(v23) & 0x7FFFFFFFu) >= 0x7F800000))
        {
          if (*(_BYTE *)(a3 + 24))
            v31 = v26;
          else
            v31 = v7 + v24;
          if (v5 >= 0.0)
            v32 = v22 + v31;
          else
            v32 = v21 - v31;
          v33 = v32;
          if (!result[16])
            result[16] = 1;
          *((double *)result + 3) = v33;
          v34 = *(float *)(a3 + 4);
          v35 = 0.0;
          if (fabsf(v34) >= 0.00001)
            v35 = v7 / v34;
          *((float *)result + 15) = v35;
          goto LABEL_132;
        }
        v27 = v7 / v23;
        if (!*(_BYTE *)(a3 + 24))
        {
          if (v27 > 1.0)
            v27 = 1.0;
          if (v27 < 0.0)
            v27 = 0.0;
          v38 = -v24;
          v39 = (float)(v21 - v22) - v24;
          v40 = fmaxf(-v24, 0.0);
          if (v23 > v39)
            v23 = v39;
          v41 = v7;
          if (v23 < v41)
            v41 = v23;
          if (v41 < v40)
            v41 = v40;
          v42 = v41 - v40;
          v43 = result + 16;
          if (v5 >= 0.0)
            v44 = (float)(v22 - (float)(v38 - v40)) + v42;
          else
            v44 = (float)(v21 - (float)(v39 - v23)) - v42;
          v66 = v44;
          if (result[16])
            goto LABEL_130;
          goto LABEL_126;
        }
        v28 = floorf(v25 / v23);
        v29 = (float)(v25 / v23) - v28;
        if (v29 > 1.0)
          v29 = 1.0;
        if (v29 < 0.0)
          v29 = 0.0;
        if (*(_BYTE *)(a3 + 24) == 3)
        {
          if ((((v5 < 0.0) ^ (int)v28) & 1) == 0)
          {
LABEL_45:
            v30 = v22 + (float)(v29 * v23);
            goto LABEL_116;
          }
        }
        else if (v5 >= 0.0)
        {
          goto LABEL_45;
        }
        v30 = v21 - (float)(v29 * v23);
LABEL_116:
        v66 = v30;
        v43 = result + 16;
        if (result[16])
        {
LABEL_130:
          *((double *)result + 3) = v66;
LABEL_131:
          *((float *)result + 15) = v27;
LABEL_132:
          *((float *)result + 9) = v20;
          return result;
        }
LABEL_126:
        *v43 = 1;
        goto LABEL_130;
      }
      if ((*(_BYTE *)(a3 + 25) & 2) != 0)
      {
        *result = 4;
        v8 = *(float *)(a3 + 4);
        goto LABEL_33;
      }
      goto LABEL_9;
    }
    *((_DWORD *)result + 16) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)a2)
  {
LABEL_15:
    *result = 1;
    if (result[16])
      result[16] = 0;
    *((_DWORD *)result + 15) = 2143289344;
    *((_DWORD *)result + 9) = 0;
    *((_QWORD *)result + 1) = 0;
    return result;
  }
  *((_QWORD *)result + 1) = *(_QWORD *)(a2 + 8);
  v9 = *(float *)(a3 + 8);
  v10 = fabsf(v9);
  v11 = *(double *)(a2 + 8) * v10;
  v12 = v9 < 0.0;
  result[56] = v9 < 0.0;
  v13 = v11 - (float)(v10 * *(float *)a3);
  if (v13 >= 0.0)
  {
    v16 = v13;
    v17 = *(float *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 25) & 1) != 0)
    {
      v19 = 3;
      if (v17 < v16)
      {
        v37 = vabds_f32(v16, v17) >= (float)((float)((float)(fabsf(v16) + fabsf(v17)) + 1.0) * 0.00001);
        if (v37)
          v19 = 5;
        else
          v19 = 3;
        v36 = !v37;
        goto LABEL_78;
      }
    }
    else if (v17 > v16 && vabds_f32(v16, v17) >= (float)((float)((float)(fabsf(v16) + fabsf(v17)) + 1.0) * 0.00001))
    {
      v19 = 3;
    }
    else
    {
      if (v17 < v16 && vabds_f32(v16, v17) >= (float)((float)((float)(fabsf(v16) + fabsf(v17)) + 1.0) * 0.00001))
      {
        v18 = *result;
        if (v18 == 1 || v18 == 6 || v17 <= 0.0)
        {
          v14 = 1;
          goto LABEL_10;
        }
      }
      v13 = v17;
      v19 = 6;
    }
    v36 = 1;
    goto LABEL_78;
  }
  if ((*(_BYTE *)(a3 + 25) & 2) == 0)
  {
LABEL_9:
    v14 = 2;
LABEL_10:
    *result = v14;
LABEL_11:
    if (result[16])
      result[16] = 0;
    *((_DWORD *)result + 15) = 2143289344;
    *((_DWORD *)result + 9) = 0;
    return result;
  }
  v36 = 0;
  v17 = *(float *)(a3 + 4);
  v19 = 4;
LABEL_78:
  v20 = v9 * a4;
  *result = v19;
  *((_QWORD *)result + 5) += v36;
  v46 = *(float *)(a3 + 12);
  v45 = *(float *)(a3 + 16);
  if (v17 <= (float)(v45 - v46))
    v47 = v17;
  else
    v47 = v45 - v46;
  v48 = *(float *)(a3 + 20);
  v49 = v13 + v48;
  v50 = 0.0;
  if (fabsf(v47) >= 0.00001)
  {
    v50 = v13 + v48;
    if ((LODWORD(v47) & 0x7FFFFFFFu) < 0x7F800000)
    {
      v27 = v13 / v47;
      if (!*(_BYTE *)(a3 + 24))
      {
        if (v27 > 1.0)
          v27 = 1.0;
        if (v27 < 0.0)
          v27 = 0.0;
        v60 = -v48;
        v61 = (float)(v45 - v46) - v48;
        v62 = fmaxf(-v48, 0.0);
        if (v47 > v61)
          v47 = v61;
        v63 = v13;
        if (v47 < v63)
          v63 = v47;
        if (v63 < v62)
          v63 = v62;
        v64 = v63 - v62;
        if (v9 >= 0.0)
          v65 = (float)(v46 - (float)(v60 - v62)) + v64;
        else
          v65 = (float)(v45 - (float)(v61 - v47)) - v64;
        v66 = v65;
        if (!result[16])
          result[16] = 1;
        goto LABEL_130;
      }
      v51 = floorf(v49 / v47);
      v52 = (float)(v49 / v47) - v51;
      if (v52 > 1.0)
        v52 = 1.0;
      if (v52 < 0.0)
        v52 = 0.0;
      v53 = (int)v51;
      if (*(_BYTE *)(a3 + 24) == 3)
      {
        result[56] = ((v9 < 0.0) ^ v53) & 1;
        if ((((v9 < 0.0) ^ v53) & 1) == 0)
        {
LABEL_90:
          v54 = v46 + (float)(v52 * v47);
LABEL_120:
          v67 = v54;
          if (!result[16])
            result[16] = 1;
          *((double *)result + 3) = v67;
          v68 = *((_DWORD *)result + 12);
          *((_DWORD *)result + 12) = v53;
          *((_DWORD *)result + 13) = v68;
          goto LABEL_131;
        }
      }
      else if (v9 >= 0.0)
      {
        goto LABEL_90;
      }
      v54 = v45 - (float)(v52 * v47);
      goto LABEL_120;
    }
  }
  if (*(_BYTE *)(a3 + 24))
    v55 = v50;
  else
    v55 = v13 + v48;
  if (v9 >= 0.0)
    v56 = v46 + v55;
  else
    v56 = v45 - v55;
  v57 = v56;
  if (!result[16])
    result[16] = 1;
  *((double *)result + 3) = v57;
  v58 = *(float *)(a3 + 4);
  v59 = 0.0;
  if (fabsf(v58) >= 0.00001)
    v59 = v13 / v58;
  *((float *)result + 15) = v59;
  *((float *)result + 9) = v20;
  result[56] = v12;
  return result;
}

void re::RigEnvironment::init(re::RigEnvironment *this, re::Allocator *a2)
{
  unint64_t v2;
  int *v5;
  re::RigEnvironment *v6;
  re::RigEnvironment *v7;
  re::RigEnvironment *v8;
  re::RigEnvironment *v9;
  re::RigEnvironment *v10;
  re::RigEnvironment *v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  const char *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  _BYTE v42[24];
  _QWORD v43[4];
  _BYTE v44[24];
  __int128 v45;
  __int128 v46;
  _BYTE v47[24];
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  __int128 v51;
  __int128 v52;
  _BYTE v53[24];
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  __int128 v60;
  __int128 v61;
  _BYTE v62[60];
  uint64_t v63;
  StringID v64;
  StringID v65;
  uint64_t v66;
  int v67;
  _BYTE v68[32];
  int v69;
  _BYTE v70[32];
  int v71;
  _QWORD v72[4];
  int v73;
  _BYTE v74[32];
  int v75;
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::init((uint64_t)this, (uint64_t)a2, 1uLL);
  re::RigEnvironment::pushEnvironmentScope(this);
  v26 = "struct SRT{Vector3 scale;Quaternion rotation;Vector3 translation;}";
  *(_QWORD *)&v27 = 66;
  v5 = (int *)&v64;
  re::RigDataTypeClass::rigDataTypeParser((unint64_t)a2, (uint64_t)&v26, (uint64_t)&v64);
  re::StringID::StringID((re::StringID *)&v85, &v65);
  re::RigEnvironment::insertRigDataType(this, (const char **)&v85, (const re::RigDataTypeClass *)&v64.var1, (uint64_t)&v26);
  re::StringID::destroyString((re::StringID *)&v85);
  if (!(_BYTE)v26 && v28 && (v29 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v28 + 40))();
  re::Result<re::RigDataTypeClass,re::DetailedError>::~Result((uint64_t)&v64);
  re::RigGraphOperatorDefinition::registerBuiltIns(this, v6);
  re::registerIKinemaAnimNodes(this, v7);
  re::internal::registerPerformRayCastNode(this, v8);
  re::internal::registerGeneratePenetrationCorrectionIKTarget(this, v9);
  re::internal::registerTranslationFilter(this, v10);
  re::internal::registerTranslationAndRotationFilter(this, v11);
  re::StringID::invalid((re::StringID *)&v64);
  v65.var1 = 0;
  *(_QWORD *)&v65.var0 = 0;
  v66 = 0;
  v76 = 0;
  memset(v68, 0, sizeof(v68));
  v67 = 0;
  v69 = 0;
  memset(v70, 0, sizeof(v70));
  memset(v72, 0, sizeof(v72));
  v71 = 0;
  v73 = 0;
  memset(v74, 0, sizeof(v74));
  v75 = 0;
  re::StringID::destroyString((re::StringID *)&v64);
  v64.var1 = "axpy";
  *(_QWORD *)&v64.var0 = 6017280;
  memset(v62, 0, sizeof(v62));
  v63 = 0x7FFFFFFFLL;
  re::RigGraphDefinitionBuilder::init(v62, (uint64_t)a2, (uint64_t)&v64, (uint64_t)this);
  re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)v62, (_anonymous_namespace_ *)"ScaleVector3", "scale", (uint64_t)v59);
  if (!v59[0] && (_QWORD)v60)
  {
    if ((BYTE8(v60) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v60 + 40))();
    v60 = 0u;
    v61 = 0u;
  }
  re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)v62, (_anonymous_namespace_ *)"AddVector3", "add", (uint64_t)v56);
  if (!v56[0] && (_QWORD)v57)
  {
    if ((BYTE8(v57) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v57 + 40))();
    v57 = 0u;
    v58 = 0u;
  }
  re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v62, "scale", "output", "add", "input1", 0, 0, (uint64_t)v53);
  if (!v53[0] && (_QWORD)v54)
  {
    if ((BYTE8(v54) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v54 + 40))();
    v54 = 0u;
    v55 = 0u;
  }
  re::RigGraphDefinitionBuilder::promoteParameter((const char **)v62, "scale", "input1", "x", "[0, 0, 0]", 1, (uint64_t)v50);
  if (!v50[0] && (_QWORD)v51)
  {
    if ((BYTE8(v51) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v51 + 40))();
    v51 = 0u;
    v52 = 0u;
  }
  re::RigGraphDefinitionBuilder::promoteParameter((const char **)v62, "scale", "input2", "a", "1", 1, (uint64_t)v47);
  if (!v47[0] && (_QWORD)v48)
  {
    if ((BYTE8(v48) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v48 + 40))();
    v48 = 0u;
    v49 = 0u;
  }
  re::RigGraphDefinitionBuilder::promoteParameter((const char **)v62, "add", "input2", "y", "[0, 0, 0]", 1, (uint64_t)v44);
  if (!v44[0] && (_QWORD)v45)
  {
    if ((BYTE8(v45) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    v45 = 0u;
    v46 = 0u;
  }
  v12 = (unint64_t)v42;
  re::RigGraphDefinitionBuilder::promoteParameter((const char **)v62, "add", "output", "output", "", 0, (uint64_t)v42);
  if (!v42[0] && v43[0])
  {
    v12 = (unint64_t)v43;
    if ((v43[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v43[0] + 40))();
    memset(v43, 0, sizeof(v43));
  }
  re::RigGraphSystem::buildFromDefinition((uint64_t)a2, &v64, (uint64_t)&v26);
  v14 = re::RigEnvironment::validateNewRigNode(this, (const re::StringID *)&v64, (uint64_t)v77);
  if (v77[0])
  {
    v15 = *((_QWORD *)this + 5);
    if (v15)
    {
      v5 = &v81;
      v16 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v15 - 1);
      v18 = v16;
      v19 = *(_DWORD *)(v16 + 56);
      if ((v19 + 1) >> 24)
        v20 = 1;
      else
        v20 = v19 + 1;
      *(_DWORD *)(v16 + 56) = v20;
      v21 = *(unsigned __int16 *)(v16 + 52);
      v12 = *(unsigned __int16 *)(v16 + 54);
      if (v21 != 0xFFFF || (_DWORD)v12 != 0xFFFF)
      {
        v2 = *(_QWORD *)(v16 + 16);
        if (v2 > v12)
        {
          v25 = (_QWORD *)(*(_QWORD *)(v16 + 32) + 16 * v12);
          *(_DWORD *)(v25[1] + 4 * v21) = v20;
          v24 = *v25 + 200 * v21;
          *(_DWORD *)(v16 + 52) = *(_DWORD *)v24;
          goto LABEL_57;
        }
        goto LABEL_61;
      }
      if (*(_DWORD *)(v16 + 48) >= *(_DWORD *)(v16 + 44))
        re::DataArray<re::RigGraphNode>::allocBlock((_QWORD *)v16);
      v22 = *(_QWORD *)(v18 + 16);
      v12 = (unsigned __int16)(v22 - 1);
      if (v22)
      {
        v21 = *(unsigned int *)(v18 + 48);
        if (v21 < 0x10000)
        {
          v23 = (_QWORD *)(*(_QWORD *)(v18 + 32) + 16 * v12);
          *(_DWORD *)(v18 + 48) = v21 + 1;
          *(_DWORD *)(v23[1] + 4 * v21) = *(_DWORD *)(v18 + 56);
          v24 = *v23 + 200 * v21;
LABEL_57:
          ++*(_DWORD *)(v18 + 40);
          *(_QWORD *)(v24 + 32) = 0;
          *(_QWORD *)v24 = 0;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_DWORD *)(v24 + 24) = 0;
          *(_QWORD *)v24 = v26;
          v26 = 0;
          *(_OWORD *)(v24 + 8) = v27;
          v27 = 0u;
          *(_QWORD *)(v24 + 32) = v29;
          LODWORD(v28) = v28 + 1;
          ++*(_DWORD *)(v24 + 24);
          *(_QWORD *)(v24 + 72) = 0;
          *(_DWORD *)(v24 + 64) = 0;
          *(_QWORD *)(v24 + 56) = 0;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_QWORD *)(v24 + 40) = *((_QWORD *)&v29 + 1);
          *(_OWORD *)(v24 + 48) = v30;
          v29 = 0u;
          v30 = 0u;
          *(_QWORD *)(v24 + 72) = v32;
          ++v31;
          ++*(_DWORD *)(v24 + 64);
          *(_QWORD *)(v24 + 112) = 0;
          *(_DWORD *)(v24 + 104) = 0;
          *(_QWORD *)(v24 + 96) = 0;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_QWORD *)(v24 + 80) = *((_QWORD *)&v32 + 1);
          v32 = 0u;
          *(_OWORD *)(v24 + 88) = v33;
          v33 = 0u;
          *(_QWORD *)(v24 + 112) = v35;
          ++v34;
          ++*(_DWORD *)(v24 + 104);
          *(_QWORD *)(v24 + 152) = 0;
          *(_DWORD *)(v24 + 144) = 0;
          *(_QWORD *)(v24 + 136) = 0;
          *(_OWORD *)(v24 + 120) = 0u;
          *(_QWORD *)(v24 + 120) = *((_QWORD *)&v35 + 1);
          *(_OWORD *)(v24 + 128) = v36;
          v35 = 0u;
          v36 = 0u;
          *(_QWORD *)(v24 + 152) = v38;
          ++v37;
          ++*(_DWORD *)(v24 + 144);
          *(_QWORD *)(v24 + 192) = 0;
          *(_DWORD *)(v24 + 184) = 0;
          *(_QWORD *)(v24 + 176) = 0;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_QWORD *)(v24 + 160) = *((_QWORD *)&v38 + 1);
          v38 = 0u;
          *(_OWORD *)(v24 + 168) = v39;
          v39 = 0u;
          *(_QWORD *)(v24 + 192) = v41;
          v41 = 0;
          ++v40;
          ++*(_DWORD *)(v24 + 184);
          *(_QWORD *)&v85 = (v12 << 16) | ((unint64_t)(*(_DWORD *)(v18 + 56) & 0xFFFFFF) << 32) | v21;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v18 + 176, &v64, &v85);
          goto LABEL_58;
        }
LABEL_62:
        re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v21);
        _os_crash();
        __break(1u);
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v13, v14.n128_f64[0], "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
    }
    v80 = 0;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v85 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v81 = 136315906;
    *(_QWORD *)(v5 + 1) = "operator[]";
    v82 = 1024;
    *(int *)((char *)v5 + 14) = 789;
    v83 = 2048;
    *(_QWORD *)(v5 + 5) = v12;
    v84 = 2048;
    *(_QWORD *)((char *)v5 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v80 = 0;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v85 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v81 = 136315906;
    *(_QWORD *)(v5 + 1) = "operator[]";
    v82 = 1024;
    *(int *)((char *)v5 + 14) = 789;
    v83 = 2048;
    *(_QWORD *)(v5 + 5) = v12;
    v84 = 2048;
    *(_QWORD *)((char *)v5 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
  if (v78 && (v79 & 1) != 0)
    (*(void (**)(__n128))(*(_QWORD *)v78 + 40))(v14);
LABEL_58:
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)&v38 + 8);
  re::DynamicArray<re::StringID>::deinit((uint64_t)&v35 + 8);
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)&v32 + 8);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v29 + 8);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v26);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v62[24]);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v74[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v72[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v70[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v68[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v65);
  re::StringID::destroyString((re::StringID *)&v64);
  re::RigEnvironment::pushEnvironmentScope(this);
}

_QWORD *re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void re::RigEnvironment::pushEnvironmentScope(re::RigEnvironment *this)
{
  unint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v60 = 0u;
  v59 = 0u;
  v52 = 0;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_QWORD *)((char *)&v47 + 4) = 0x1FFFFFFFFLL;
  memset(v48, 0, sizeof(v48));
  v49 = 0uLL;
  v50 = 0;
  v51 = 0x1FFFFFFFFLL;
  v53 = 0u;
  v54 = 0u;
  v55 = 0x7FFFFFFF00000000uLL;
  v56 = 0u;
  v57 = 0u;
  v58 = 0x7FFFFFFF00000000uLL;
  v61 = 0x7FFFFFFF00000000uLL;
  v2 = *((_QWORD *)this + 5);
  v59 = 0u;
  v3 = *((_QWORD *)this + 1);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::setBucketsCapacity(this, (v2 + 8) >> 3);
    v3 = *((_QWORD *)this + 1);
  }
  if (v3 <= v2 >> 3)
  {
    v62 = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v63 = 136315906;
    v64 = "operator[]";
    v65 = 1024;
    v66 = 858;
    v67 = 2048;
    v68 = v2 >> 3;
    v69 = 2048;
    v70 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v44, v45, (_QWORD)v46);
    _os_crash();
    __break(1u);
    goto LABEL_21;
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v4 = (char *)this + 24;
  else
    v4 = (char *)*((_QWORD *)this + 4);
  v5 = *(_QWORD *)&v4[8 * (v2 >> 3)];
  ++*((_QWORD *)this + 5);
  v6 = v2 & 7;
  ++*((_DWORD *)this + 12);
  v7 = v5 + 272 * (v2 & 7);
  *(_DWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 52) = 0x1FFFFFFFFLL;
  v71 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_QWORD *)&v72 = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)&v73 = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 24) = 1;
  DWORD2(v72) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7, (uint64_t)&v44);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v44, (uint64_t)&v71);
  if ((_QWORD)v71 && (_QWORD)v73)
    (*(void (**)(_QWORD))(*(_QWORD *)v71 + 40))(v71);
  v8 = *(_DWORD *)(v7 + 40);
  *(_DWORD *)(v7 + 40) = DWORD2(v46);
  DWORD2(v46) = v8;
  v9 = *(_DWORD *)(v7 + 44);
  *(_DWORD *)(v7 + 44) = HIDWORD(v46);
  HIDWORD(v46) = v9;
  v10 = *(_DWORD *)(v7 + 48);
  *(_DWORD *)(v7 + 48) = v47;
  LODWORD(v47) = v10;
  v11 = *(_DWORD *)(v7 + 52);
  *(_DWORD *)(v7 + 52) = DWORD1(v47);
  DWORD1(v47) = v11;
  v12 = *(_DWORD *)(v7 + 56);
  *(_DWORD *)(v7 + 56) = DWORD2(v47);
  DWORD2(v47) = v12;
  v13 = v5 + 272 * v6;
  *(_QWORD *)(v13 + 116) = 0x1FFFFFFFFLL;
  v14 = (int *)(v13 + 116);
  *(_DWORD *)(v13 + 112) = 0;
  *(_OWORD *)(v13 + 96) = 0u;
  v71 = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  v15 = (int *)(v13 + 120);
  *(_QWORD *)&v72 = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)&v73 = *(_QWORD *)(v13 + 96);
  *(_QWORD *)(v13 + 96) = 0;
  *(_DWORD *)(v13 + 88) = 1;
  DWORD2(v72) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v13 + 64, (uint64_t)v48);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v48, (uint64_t)&v71);
  if ((_QWORD)v71 && (_QWORD)v73)
    (*(void (**)(_QWORD))(*(_QWORD *)v71 + 40))(v71);
  v16 = v5 + 272 * v6;
  v17 = *(_DWORD *)(v16 + 104);
  *(_DWORD *)(v16 + 104) = DWORD2(v49);
  DWORD2(v49) = v17;
  v18 = *(_DWORD *)(v16 + 108);
  *(_DWORD *)(v16 + 108) = HIDWORD(v49);
  HIDWORD(v49) = v18;
  v19 = *(_DWORD *)(v16 + 112);
  *(_DWORD *)(v16 + 112) = v50;
  v50 = v19;
  v20 = *v14;
  *v14 = v51;
  LODWORD(v51) = v20;
  v21 = *v15;
  *v15 = HIDWORD(v51);
  HIDWORD(v51) = v21;
  *(_DWORD *)(v16 + 160) = 0;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_QWORD *)(v16 + 164) = 0x7FFFFFFFLL;
  *(_QWORD *)(v16 + 128) = v53;
  *(_QWORD *)&v53 = 0;
  v22 = *(_QWORD *)(v16 + 136);
  *(_QWORD *)(v16 + 136) = *((_QWORD *)&v53 + 1);
  *((_QWORD *)&v53 + 1) = v22;
  v23 = *(_QWORD *)(v16 + 144);
  *(_QWORD *)(v16 + 144) = v54;
  *(_QWORD *)&v54 = v23;
  LODWORD(v23) = *(_DWORD *)(v16 + 152);
  *(_DWORD *)(v16 + 152) = DWORD2(v54);
  DWORD2(v54) = v23;
  LODWORD(v23) = *(_DWORD *)(v16 + 156);
  *(_DWORD *)(v16 + 156) = HIDWORD(v54);
  HIDWORD(v54) = v23;
  LODWORD(v23) = *(_DWORD *)(v16 + 160);
  *(_DWORD *)(v16 + 160) = v55;
  LODWORD(v55) = v23;
  LODWORD(v23) = *(_DWORD *)(v16 + 164);
  *(_DWORD *)(v16 + 164) = DWORD1(v55);
  DWORD1(v55) = v23;
  *(_DWORD *)(v16 + 208) = 0;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_QWORD *)(v16 + 212) = 0x7FFFFFFFLL;
  *(_QWORD *)(v16 + 176) = v56;
  *(_QWORD *)&v56 = 0;
  v24 = *(_QWORD *)(v16 + 184);
  *(_QWORD *)(v16 + 184) = *((_QWORD *)&v56 + 1);
  *((_QWORD *)&v56 + 1) = v24;
  v25 = *(_QWORD *)(v16 + 192);
  *(_QWORD *)(v16 + 192) = v57;
  *(_QWORD *)&v57 = v25;
  LODWORD(v25) = *(_DWORD *)(v16 + 200);
  *(_DWORD *)(v16 + 200) = DWORD2(v57);
  DWORD2(v57) = v25;
  LODWORD(v25) = *(_DWORD *)(v16 + 204);
  *(_DWORD *)(v16 + 204) = HIDWORD(v57);
  HIDWORD(v57) = v25;
  LODWORD(v25) = *(_DWORD *)(v16 + 208);
  *(_DWORD *)(v16 + 208) = v58;
  LODWORD(v58) = v25;
  LODWORD(v25) = *(_DWORD *)(v16 + 212);
  *(_DWORD *)(v16 + 212) = DWORD1(v58);
  DWORD1(v58) = v25;
  *(_OWORD *)(v16 + 224) = 0u;
  v16 += 224;
  *(_DWORD *)(v16 + 32) = 0;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(v16 + 36) = 0x7FFFFFFFLL;
  *(_QWORD *)v16 = v59;
  *(_QWORD *)&v59 = 0;
  v26 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *((_QWORD *)&v59 + 1);
  *((_QWORD *)&v59 + 1) = v26;
  v27 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v16 + 16) = v60;
  *(_QWORD *)&v60 = v27;
  LODWORD(v27) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = DWORD2(v60);
  DWORD2(v60) = v27;
  LODWORD(v27) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v16 + 28) = HIDWORD(v60);
  HIDWORD(v60) = v27;
  LODWORD(v27) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v16 + 32) = v61;
  LODWORD(v61) = v27;
  LODWORD(v27) = *(_DWORD *)(v16 + 36);
  *(_DWORD *)(v16 + 36) = DWORD1(v61);
  DWORD1(v61) = v27;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v59);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v56);
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53);
  re::DataArray<re::RigGraphOperatorDefinition>::~DataArray(v48);
  re::DataArray<re::RigGraphNode>::~DataArray(&v44);
  v29 = *((_QWORD *)this + 5);
  if (!v29)
    goto LABEL_20;
  v30 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v29 - 1);
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v30 + 128, *(_QWORD *)this, 128);
  v32 = *((_QWORD *)this + 5);
  if (!v32)
  {
LABEL_21:
    re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    goto LABEL_22;
  }
  v33 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v32 - 1);
  *(_QWORD *)v33 = *(_QWORD *)this;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v33, 0);
  ++*(_DWORD *)(v33 + 24);
  *(_DWORD *)(v33 + 44) = 32;
  re::DataArray<re::RigGraphNode>::allocBlock((_QWORD *)v33);
  v35 = *((_QWORD *)this + 5);
  if (!v35)
  {
LABEL_22:
    re::internal::assertLog((re::internal *)4, v34, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    goto LABEL_23;
  }
  v36 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v35 - 1);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v36 + 176, *(_QWORD *)this, 32);
  v38 = *((_QWORD *)this + 5);
  if (!v38)
  {
LABEL_23:
    re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v39 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v38 - 1);
  *(_QWORD *)(v39 + 64) = *(_QWORD *)this;
  v40 = v39 + 64;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v39 + 64), 0);
  ++*(_DWORD *)(v40 + 24);
  *(_DWORD *)(v40 + 44) = 32;
  re::DataArray<re::RigGraphOperatorDefinition>::allocBlock((_QWORD *)v40);
  v42 = *((_QWORD *)this + 5);
  if (!v42)
    goto LABEL_24;
  v43 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v42 - 1);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v43 + 224, *(_QWORD *)this, 32);
}

uint64_t re::RigEnvironment::insertRigDataType@<X0>(re::RigEnvironment *a1@<X0>, const char **a2@<X1>, const re::RigDataTypeClass *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[8];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  result = (uint64_t)re::RigEnvironment::validateNewRigType(a1, a2, a3, (uint64_t)v12);
  if (v12[0])
  {
    v10 = *((_QWORD *)a1 + 5);
    if (v10)
    {
      v11 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)a1, v10 - 1);
      result = re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v11 + 128, (StringID *)a2, (uint64_t)a3);
      *(_BYTE *)a4 = 1;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      result = _os_crash();
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v13;
    *(_QWORD *)(a4 + 24) = v14;
    *(_QWORD *)(a4 + 48) = v16;
    *(_OWORD *)(a4 + 32) = v15;
  }
  return result;
}

void re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::removeLast(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *result;

  v2 = (uint64_t *)re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[](a1, *(_QWORD *)(a1 + 40) - 1);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v2 + 28);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v2 + 22);
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v2 + 16);
  re::DataArray<re::RigGraphOperatorDefinition>::~DataArray(v2 + 8);
  result = re::DataArray<re::RigGraphNode>::~DataArray(v2);
  --*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_BYTE *re::RigEnvironment::validateNewRigType@<X0>(re::RigEnvironment *this@<X0>, const char **a2@<X1>, const re::RigDataTypeClass *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  const char **v11;
  int v12;
  const char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  unsigned __int8 v23[64];

  re::RigEnvironment::lookupRigDataType(this, a2, v22);
  if (v22[0])
  {
    if (!re::RigDataTypeClass::operator==((unsigned __int8 *)a3, v23))
    {
      re::DynamicString::format((re::DynamicString *)"Type (%s) already exists and does not match new definition.", (re::DynamicString *)&v19, a2[1]);
LABEL_13:
      v14 = v19;
      v15 = v20;
      v16 = v21;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 5001;
      *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v14;
      *(_QWORD *)(a4 + 40) = v15;
      *(_QWORD *)(a4 + 48) = v16;
      return re::Optional<re::RigDataTypeClass>::~Optional(v22);
    }
  }
  else
  {
    if (*(_BYTE *)a3 != 13)
    {
      re::RigEnvironment::lookupRigDataType(this, (const char **)a3 + 1, &v19);
      v8 = v19;
      re::Optional<re::RigDataTypeClass>::~Optional(&v19);
      if (!v8)
      {
        re::DynamicString::format((re::DynamicString *)"Type (%s) has an unknown base type: %s", (re::DynamicString *)&v19, a2[1], *((_QWORD *)a3 + 2));
        goto LABEL_13;
      }
    }
    v9 = *((_QWORD *)a3 + 5);
    if (v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = (const char **)re::RigDataTypeClass::attributeType(a3, v10);
        re::RigEnvironment::lookupRigDataType(this, v11, &v19);
        v12 = v19;
        re::Optional<re::RigDataTypeClass>::~Optional(&v19);
        if (!v12)
          break;
        if (v9 == ++v10)
          goto LABEL_10;
      }
      v13 = a2[1];
      v18 = *(_QWORD *)(re::RigDataTypeClass::attributeType(a3, v10) + 8);
      re::DynamicString::format((re::DynamicString *)"Type (%s) has an unknown attribute type: %s", (re::DynamicString *)&v19, v13, v18);
      goto LABEL_13;
    }
  }
LABEL_10:
  *(_BYTE *)a4 = 1;
  return re::Optional<re::RigDataTypeClass>::~Optional(v22);
}

uint64_t re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 88 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 88 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 88 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 88 * v9;
  return v12 + 24;
}

uint64_t re::RigEnvironment::lookupRigDataType@<X0>(re::RigEnvironment *this@<X0>, const char **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  const char *v14[2];
  _BYTE v15[16];
  StringID v16;
  uint64_t v17[5];

  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = 0;
    v8 = -1;
    while (1)
    {
      v9 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v6 + v8);
      v10 = re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 128, a2);
      if (v10)
        break;
      ++v7;
      v6 = *((_QWORD *)this + 5);
      --v8;
      if (v7 == v6)
        goto LABEL_5;
    }
    *a3 = 1;
    v12 = (uint64_t *)(v10 + 24);
    a3[8] = *(_BYTE *)v10;
    re::StringID::StringID((re::StringID *)(a3 + 16), (const StringID *)(v10 + 8));
    return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)(a3 + 32), v12);
  }
  else
  {
LABEL_5:
    v11 = *(_QWORD *)this;
    v14[0] = a2[1];
    v14[1] = (const char *)strlen(v14[0]);
    re::RigDataTypeClass::rigDataTypeParser(v11, (uint64_t)v14, (uint64_t)v15);
    if (v15[0])
    {
      *a3 = 1;
      a3[8] = v15[8];
      re::StringID::StringID((re::StringID *)(a3 + 16), &v16);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)(a3 + 32), v17);
    }
    else
    {
      *a3 = 0;
    }
    return re::Result<re::RigDataTypeClass,re::DetailedError>::~Result((uint64_t)v15);
  }
}

uint64_t re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 88 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 88 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 88 * v4 + 24;
}

__n128 re::RigEnvironment::validateNewRigNode@<Q0>(re::RigEnvironment *this@<X0>, const re::StringID *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  const char *v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[23];
  __n128 v17;
  uint64_t v18;
  uint64_t v19;

  if (re::RigEnvironment::lookupRigGraphNode(this, a2))
  {
    v6 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"Node (%s) already exists.", (re::DynamicString *)&v14, *((_QWORD *)a2 + 1));
    v7 = v15 & 1;
    if ((v15 & 1) != 0)
      v8 = *(const char **)&v16[7];
    else
      v8 = v16;
    result = v17;
    v17 = 0uLL;
    v10 = v18;
    v11 = v19;
    v18 = 0;
    v19 = 0;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 5001;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(__n128 *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 40) = v10;
    *(_QWORD *)(a3 + 48) = v11;
    if (v14)
    {
      if (v7)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  else if (!strcmp(*((const char **)a2 + 1), "this"))
  {
    re::DynamicString::format((re::DynamicString *)"Node name cannot be reserved keyword 'this'.", (re::DynamicString *)&v17);
    result = v17;
    v12 = v18;
    v13 = v19;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 5001;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(__n128 *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 40) = v12;
    *(_QWORD *)(a3 + 48) = v13;
  }
  else
  {
    *(_BYTE *)a3 = 1;
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

void re::RigEnvironment::insertRigGraphNode(re::RigEnvironment *this@<X0>, const re::StringID *a2@<X1>, const re::RigGraphNode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[8];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)&v9 = re::RigEnvironment::validateNewRigNode(this, a2, (uint64_t)v14).n128_u64[0];
  if (v14[0])
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
    {
      v11 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v10 - 1);
      v12 = v11 + 176;
      v13 = re::DataArray<re::RigGraphNode>::create<re::RigGraphNode const&>(v11, (uint64_t)a3);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v12, (StringID *)a2, &v13);
      *(_BYTE *)a4 = 1;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v8, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 24) = v16;
    *(_QWORD *)(a4 + 48) = v18;
    *(_OWORD *)(a4 + 32) = v17;
  }
}

unint64_t re::DataArray<re::RigGraphNode>::create<re::RigGraphNode const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  re::StringID *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  re::StringID *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const StringID *v42;
  re::StringID *v43;
  re::StringID *v44;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24)
    v5 = 1;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(unsigned __int16 *)(a1 + 52);
  v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 != 0xFFFF || (_DWORD)v7 != 0xFFFF)
  {
    if (*(_QWORD *)(a1 + 16) > v7)
    {
      v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
      *(_DWORD *)(v9[1] + 4 * v6) = v5;
      v10 = *v9 + 200 * v6;
      *(_DWORD *)(a1 + 52) = *(_DWORD *)v10;
      goto LABEL_15;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
    re::DataArray<re::RigGraphNode>::allocBlock((_QWORD *)a1);
  v11 = *(_QWORD *)(a1 + 16);
  v7 = (unsigned __int16)(v11 - 1);
  if (!v11)
  {
LABEL_41:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6);
    _os_crash();
    __break(1u);
  }
  v6 = *(unsigned int *)(a1 + 48);
  if (v6 >= 0x10000)
    goto LABEL_42;
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(a1 + 48) = v6 + 1;
  *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
  v10 = *v12 + 200 * v6;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  re::DynamicArray<re::RigGraphNodeParameter>::DynamicArray(v10, (uint64_t *)v2);
  re::DynamicArray<re::RigGraphNodeParameter>::DynamicArray(v10 + 40, (uint64_t *)(v2 + 40));
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_DWORD *)(v10 + 104) = 0;
  v13 = *(_QWORD *)(v2 + 80);
  if (v13)
  {
    v46 = v7;
    v14 = *(_QWORD *)(v2 + 96);
    *(_QWORD *)(v10 + 80) = v13;
    re::DynamicArray<re::RigGraphNodeChild>::setCapacity((_QWORD *)(v10 + 80), v14);
    ++*(_DWORD *)(v10 + 104);
    v15 = *(_QWORD *)(v2 + 96);
    v47 = v2;
    v48 = v15;
    if (v15 >= *(_QWORD *)(v10 + 96))
    {
      re::DynamicArray<re::RigGraphNodeChild>::setCapacity((_QWORD *)(v10 + 80), v15);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeChild *,re::RigGraphNodeChild *,re::RigGraphNodeChild *>(*(uint64_t **)(v2 + 112), (uint64_t *)(*(_QWORD *)(v2 + 112) + 96 * *(_QWORD *)(v10 + 96)), *(_QWORD *)(v10 + 112));
      v19 = *(_QWORD *)(v10 + 96);
      if (v19 != v15)
      {
        v20 = *(_QWORD *)(v2 + 112);
        v21 = *(_QWORD *)(v10 + 112);
        v22 = 96 * v19;
        v23 = 96 * v48;
        do
        {
          v24 = v21 + v22;
          v25 = v20 + v22;
          re::StringID::StringID((re::StringID *)(v21 + v22), (const StringID *)(v20 + v22));
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)(v24 + 24) = 0;
          *(_QWORD *)(v24 + 32) = 0;
          *(_DWORD *)(v24 + 40) = 0;
          v26 = *(_QWORD *)(v20 + v22 + 16);
          *(_QWORD *)(v24 + 48) = 0;
          if (v26)
          {
            v27 = *(_QWORD *)(v25 + 32);
            *(_QWORD *)(v21 + v22 + 16) = v26;
            re::DynamicArray<re::RigGraphNodeParameter>::setCapacity((_QWORD *)(v24 + 16), v27);
            ++*(_DWORD *)(v24 + 40);
            re::DynamicArray<re::RigGraphNodeInputParameter>::copy((_QWORD *)(v24 + 16), v25 + 16);
          }
          *(_QWORD *)(v24 + 56) = 0;
          v28 = v24 + 56;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = 0;
          *(_DWORD *)(v28 + 24) = 0;
          v31 = *(_QWORD *)(v25 + 56);
          v30 = v25 + 56;
          v29 = v31;
          *(_QWORD *)(v28 + 32) = 0;
          if (v31)
          {
            v32 = *(_QWORD *)(v20 + v22 + 72);
            *(_QWORD *)v28 = v29;
            re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity((_QWORD *)v28, v32);
            ++*(_DWORD *)(v21 + v22 + 80);
            re::DynamicArray<re::RigGraphNodeOutputParameter>::copy((_QWORD *)v28, v30);
          }
          v23 -= 96;
          v20 += 96;
          v21 += 96;
        }
        while (v22 != v23);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeChild *,re::RigGraphNodeChild *,re::RigGraphNodeChild *>(*(uint64_t **)(v2 + 112), (uint64_t *)(*(_QWORD *)(v2 + 112) + 96 * v15), *(_QWORD *)(v10 + 112));
      v16 = *(_QWORD *)(v10 + 96);
      if (v15 != v16)
      {
        v17 = (re::StringID *)(*(_QWORD *)(v10 + 112) + 96 * v15);
        v18 = 96 * v16 - 96 * v15;
        do
        {
          re::DynamicArray<re::RigGraphNodeOutputParameter>::deinit((uint64_t)v17 + 56);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v17 + 16);
          re::StringID::destroyString(v17);
          v17 = (re::StringID *)((char *)v17 + 96);
          v18 -= 96;
        }
        while (v18);
      }
    }
    v2 = v47;
    *(_QWORD *)(v10 + 96) = v48;
    v7 = v46;
  }
  re::DynamicArray<re::StringID>::DynamicArray(v10 + 120, (uint64_t *)(v2 + 120));
  *(_QWORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 192) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  *(_QWORD *)(v10 + 176) = 0;
  *(_DWORD *)(v10 + 184) = 0;
  v33 = *(_QWORD *)(v2 + 160);
  if (v33)
  {
    v34 = *(_QWORD *)(v2 + 176);
    *(_QWORD *)(v10 + 160) = v33;
    re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity((_QWORD *)(v10 + 160), v34);
    ++*(_DWORD *)(v10 + 184);
    v35 = *(_QWORD *)(v2 + 176);
    if (v35 >= *(_QWORD *)(v10 + 176))
    {
      re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::setCapacity((_QWORD *)(v10 + 160), *(_QWORD *)(v2 + 176));
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Pair<unsigned long,re::StringID,true> *,re::Pair<unsigned long,re::StringID,true> *,re::Pair<unsigned long,re::StringID,true> *,0>(*(unint64_t **)(v2 + 192), (unint64_t *)(*(_QWORD *)(v2 + 192) + 24 * *(_QWORD *)(v10 + 176)), *(_QWORD *)(v10 + 192));
      v39 = *(_QWORD *)(v10 + 176);
      if (v39 != v35)
      {
        v40 = 24 * v35 - 24 * v39;
        v41 = 24 * v39 + 8;
        v42 = (const StringID *)(*(_QWORD *)(v2 + 192) + v41);
        v43 = (re::StringID *)(*(_QWORD *)(v10 + 192) + v41);
        do
        {
          *((_QWORD *)v43 - 1) = v42[-1].var1;
          v44 = re::StringID::StringID(v43, v42);
          v42 = (const StringID *)((char *)v42 + 24);
          v43 = (re::StringID *)((char *)v44 + 24);
          v40 -= 24;
        }
        while (v40);
      }
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Pair<unsigned long,re::StringID,true> *,re::Pair<unsigned long,re::StringID,true> *,re::Pair<unsigned long,re::StringID,true> *,0>(*(unint64_t **)(v2 + 192), (unint64_t *)(*(_QWORD *)(v2 + 192) + 24 * v35), *(_QWORD *)(v10 + 192));
      v36 = *(_QWORD *)(v10 + 176);
      if (v35 != v36)
      {
        v37 = 24 * v36 - 24 * v35;
        v38 = (re::StringID *)(*(_QWORD *)(v10 + 192) + 24 * v35 + 8);
        do
        {
          re::StringID::destroyString(v38);
          v38 = (re::StringID *)((char *)v38 + 24);
          v37 -= 24;
        }
        while (v37);
      }
    }
    *(_QWORD *)(v10 + 176) = v35;
  }
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::RigEnvironment::lookupRigGraphNode(re::RigEnvironment *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v5 = 0;
  for (i = -1; ; --i)
  {
    v7 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v2 + i);
    v8 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v7 + 176, a2);
    if (v8)
      break;
    ++v5;
    v2 = *((_QWORD *)this + 5);
    if (v5 == v2)
      return 0;
  }
  v10 = (_QWORD *)v8;
  v11 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, *((_QWORD *)this + 5) + i);
  return re::DataArray<re::RigGraphNode>::get(v11, *v10);
}

uint64_t re::DataArray<re::RigGraphNode>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 200 * (unsigned __int16)a2;
}

uint64_t re::RigEnvironment::validateNewRigOperator@<X0>(re::RigEnvironment *a1@<X0>, const re::StringID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[23];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  result = re::RigEnvironment::lookupRigGraphOperator(a1, a2);
  if (result)
  {
    v6 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"Node (%s) already exists.", (re::DynamicString *)&v12, *((_QWORD *)a2 + 1));
    v7 = v13 & 1;
    if ((v13 & 1) != 0)
      v8 = *(const char **)&v14[7];
    else
      v8 = v14;
    v9 = v15;
    v15 = 0uLL;
    v10 = v16;
    v11 = v17;
    v16 = 0;
    v17 = 0;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 5001;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v9;
    *(_QWORD *)(a3 + 40) = v10;
    *(_QWORD *)(a3 + 48) = v11;
    result = v12;
    if (v12)
    {
      if (v7)
        return (*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
    }
  }
  else
  {
    *(_BYTE *)a3 = 1;
  }
  return result;
}

uint64_t re::RigEnvironment::insertRigGraphOperator@<X0>(re::RigEnvironment *a1@<X0>, const re::StringID *a2@<X1>, StringID *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[8];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  result = re::RigEnvironment::validateNewRigOperator(a1, a2, (uint64_t)v14);
  if (v14[0])
  {
    v10 = *((_QWORD *)a1 + 5);
    if (v10)
    {
      v11 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)a1, v10 - 1);
      v12 = v11 + 224;
      v13 = re::DataArray<re::RigGraphOperatorDefinition>::create<re::RigGraphOperatorDefinition const&>(v11 + 64, a3);
      result = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v12, (StringID *)a2, &v13);
      *(_BYTE *)a4 = 1;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      result = _os_crash();
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 24) = v16;
    *(_QWORD *)(a4 + 48) = v18;
    *(_OWORD *)(a4 + 32) = v17;
  }
  return result;
}

unint64_t re::DataArray<re::RigGraphOperatorDefinition>::create<re::RigGraphOperatorDefinition const&>(uint64_t a1, StringID *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  re::StringID *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  __int128 v15;

  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24)
    v5 = 1;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(unsigned __int16 *)(a1 + 52);
  v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && (_DWORD)v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::RigGraphOperatorDefinition>::allocBlock((_QWORD *)a1);
    v11 = *(_QWORD *)(a1 + 16);
    v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        v10 = (re::StringID *)(*v12 + 72 * v6);
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v14, v15);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v14 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v15) = 136315906;
    *(_QWORD *)((char *)&v15 + 4) = "operator[]";
    WORD6(v15) = 1024;
    HIWORD(v15) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  v10 = (re::StringID *)(*v9 + 72 * v6);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  re::StringID::StringID(v10, a2);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::FixedArray((_QWORD *)v10 + 2, (uint64_t *)&a2[1]);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::FixedArray((_QWORD *)v10 + 5, (uint64_t *)&a2[2].var1);
  *((_QWORD *)v10 + 8) = *(_QWORD *)&a2[4].var0;
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::RigEnvironment::lookupRigGraphOperator(re::RigEnvironment *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v5 = 0;
  for (i = -1; ; --i)
  {
    v7 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, v2 + i);
    v8 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v7 + 224, a2);
    if (v8)
      break;
    ++v5;
    v2 = *((_QWORD *)this + 5);
    if (v5 == v2)
      return 0;
  }
  v10 = (_QWORD *)v8;
  v11 = re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::operator[]((uint64_t)this, *((_QWORD *)this + 5) + i)+ 64;
  return re::DataArray<re::RigGraphOperatorDefinition>::get(v11, *v10);
}

uint64_t re::DataArray<re::RigGraphOperatorDefinition>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 72 * (unsigned __int16)a2;
}

unint64_t re::RigDataTypeClass::attributeType(re::RigDataTypeClass *this, unint64_t a2)
{
  if (*((_QWORD *)this + 5) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 7) + 32 * a2 + 16;
}

_QWORD *re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 2176, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::Result<re::RigDataTypeClass,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a1 + 32);
    re::StringID::destroyString((re::StringID *)(a1 + 16));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DataArray<re::RigGraphNode>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 200 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

_anonymous_namespace_ *re::DataArray<re::RigGraphOperatorDefinition>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 72 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  signed int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v32, v14, v13);
          v16 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v32[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v23 - 24) & 0x80000000) != 0)
              {
                v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v23 - 16) >> 31) ^ (*(_QWORD *)(v23 - 16) >> 1));
                v25 = (0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31);
                re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v25 % *(unsigned int *)(a1 + 24), v25, v23 - 16, v23);
              }
              ++v22;
              v23 += 88;
            }
            while (v22 < v21);
          }
          re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13)
          v28 = 2 * v12;
        else
          v28 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 88 * v9);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 88 * v9);
    *(_DWORD *)(a1 + 36) = v27 & 0x7FFFFFFF;
  }
  v29 = 88 * v9;
  *(_DWORD *)(v26 + v29) = v27 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v29) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v29) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + v29 + 8), a4);
  v30 = *(_QWORD *)(a1 + 16) + 88 * v9;
  *(_BYTE *)(v30 + 24) = *(_BYTE *)a5;
  re::StringID::StringID((re::StringID *)(v30 + 32), (const StringID *)(a5 + 8));
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray(v30 + 48, (uint64_t *)(a5 + 24));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::RigGraphNode::RigGraphNode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  v4 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v8;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_QWORD *)(result + 96);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  v10 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 144) = 0;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 128) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_QWORD *)(result + 136);
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v12;
  v13 = *(_QWORD *)(result + 152);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 144);
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(result + 168) = v14;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v15 = *(_QWORD *)(result + 176);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v15;
  v16 = *(_QWORD *)(result + 192);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v16;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(result + 184);
  return result;
}

uint64_t re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  signed int v28;
  uint64_t v29;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v23 - 24) & 0x80000000) != 0)
              {
                v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v23 - 16) >> 31) ^ (*(_QWORD *)(v23 - 16) >> 1));
                v25 = (0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31);
                re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v25 % *(unsigned int *)(a1 + 24), v25, v23 - 16, v23);
              }
              ++v22;
              v23 += 32;
            }
            while (v22 < v21);
          }
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v28 = 2 * v12;
        else
          v28 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 32 * v9);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v27 & 0x7FFFFFFF;
  }
  v29 = 32 * v9;
  *(_DWORD *)(v26 + v29) = v27 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v29) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DynamicArray<re::RigGraphNodeParameter>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::StringID *v15;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigGraphNodeParameter>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    v6 = a2[2];
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<re::RigGraphNodeParameter>::setCapacity((_QWORD *)a1, a2[2]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeParameter *,re::RigGraphNodeParameter *,re::RigGraphNodeParameter *>((unint64_t *)a2[4], (unint64_t *)(a2[4] + 40 * *(_QWORD *)(a1 + 16)), *(_QWORD *)(a1 + 32));
      v10 = *(_QWORD *)(a1 + 16);
      if (v10 != v6)
      {
        v11 = a2[4];
        v12 = *(_QWORD *)(a1 + 32);
        v13 = 40 * v10;
        v14 = 40 * v6;
        do
        {
          v15 = re::StringID::StringID((re::StringID *)(v12 + v13), (const StringID *)(v11 + v13));
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v11 + v13 + 16);
          re::StringID::StringID((re::StringID *)((char *)v15 + 24), (const StringID *)(v11 + v13 + 24));
          v14 -= 40;
          v11 += 40;
          v12 += 40;
        }
        while (v13 != v14);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeParameter *,re::RigGraphNodeParameter *,re::RigGraphNodeParameter *>((unint64_t *)a2[4], (unint64_t *)(a2[4] + 40 * v6), *(_QWORD *)(a1 + 32));
      v7 = *(_QWORD *)(a1 + 16);
      if (v6 != v7)
      {
        v8 = *(_QWORD *)(a1 + 32) + 40 * v6;
        v9 = 40 * v7 - 40 * v6;
        do
        {
          re::StringID::destroyString((re::StringID *)(v8 + 24));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 40;
          v9 -= 40;
        }
        while (v9);
      }
    }
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1;
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeParameter *,re::RigGraphNodeParameter *,re::RigGraphNodeParameter *>(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  if (result != a2)
  {
    v4 = (unint64_t *)(a3 + 24);
    v5 = (uint64_t *)(result + 3);
    do
    {
      re::StringID::operator=(v4 - 3, v5 - 3);
      *(v4 - 1) = *(v5 - 1);
      result = re::StringID::operator=(v4, v5);
      v4 += 5;
      v6 = v5 + 2;
      v5 += 5;
    }
    while (v6 != (uint64_t *)a2);
  }
  return result;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeChild *,re::RigGraphNodeChild *,re::RigGraphNodeChild *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::StringID *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      re::StringID::operator=((unint64_t *)a3, v5);
      if ((uint64_t *)a3 != v5)
      {
        v6 = v5[2];
        if (*(_QWORD *)(a3 + 16))
        {
          if (v6)
          {
            re::DynamicArray<re::RigGraphNodeInputParameter>::copy((_QWORD *)(a3 + 16), (uint64_t)(v5 + 2));
          }
          else
          {
            v8 = *(_QWORD *)(a3 + 32);
            *(_QWORD *)(a3 + 32) = 0;
            if (v8)
            {
              v9 = *(_QWORD *)(a3 + 48);
              v10 = 40 * v8;
              do
              {
                re::StringID::destroyString((re::StringID *)(v9 + 24));
                re::StringID::destroyString((re::StringID *)v9);
                v9 += 40;
                v10 -= 40;
              }
              while (v10);
            }
          }
          ++*(_DWORD *)(a3 + 40);
        }
        else if (v6)
        {
          v7 = v5[4];
          *(_QWORD *)(a3 + 16) = v6;
          re::DynamicArray<re::RigGraphNodeParameter>::setCapacity((_QWORD *)(a3 + 16), v7);
          ++*(_DWORD *)(a3 + 40);
          re::DynamicArray<re::RigGraphNodeInputParameter>::copy((_QWORD *)(a3 + 16), (uint64_t)(v5 + 2));
        }
        v11 = v5[7];
        if (*(_QWORD *)(a3 + 56))
        {
          if (v11)
          {
            re::DynamicArray<re::RigGraphNodeOutputParameter>::copy((_QWORD *)(a3 + 56), (uint64_t)(v5 + 7));
          }
          else
          {
            v13 = *(_QWORD *)(a3 + 72);
            *(_QWORD *)(a3 + 72) = 0;
            if (v13)
            {
              v14 = *(re::StringID **)(a3 + 88);
              v15 = v13 << 6;
              do
              {
                re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit((uint64_t)v14 + 24);
                re::StringID::destroyString(v14);
                v14 = (re::StringID *)((char *)v14 + 64);
                v15 -= 64;
              }
              while (v15);
            }
          }
          ++*(_DWORD *)(a3 + 80);
        }
        else if (v11)
        {
          v12 = v5[9];
          *(_QWORD *)(a3 + 56) = v11;
          re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity((_QWORD *)(a3 + 56), v12);
          ++*(_DWORD *)(a3 + 80);
          re::DynamicArray<re::RigGraphNodeOutputParameter>::copy((_QWORD *)(a3 + 56), (uint64_t)(v5 + 7));
        }
      }
      v5 += 12;
      a3 += 96;
    }
    while (v5 != a2);
  }
}

void re::DynamicArray<re::RigGraphNodeInputParameter>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::StringID *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::RigGraphNodeParameter>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeParameter *,re::RigGraphNodeParameter *,re::RigGraphNodeParameter *>(*(unint64_t **)(a2 + 32), (unint64_t *)(*(_QWORD *)(a2 + 32) + 40 * a1[2]), a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 40 * v8;
      v12 = 40 * v4;
      do
      {
        v13 = re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        *((_QWORD *)v13 + 2) = *(_QWORD *)(v9 + v11 + 16);
        re::StringID::StringID((re::StringID *)((char *)v13 + 24), (const StringID *)(v9 + v11 + 24));
        v9 += 40;
        v12 -= 40;
        v10 += 40;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeParameter *,re::RigGraphNodeParameter *,re::RigGraphNodeParameter *>(*(unint64_t **)(a2 + 32), (unint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v4), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4] + 40 * v4;
      v7 = 40 * v5 - 40 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 24));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 40;
        v7 -= 40;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::RigGraphNodeOutputParameter>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::RigGraphNodeOutputParameter>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeOutputParameter *,re::RigGraphNodeOutputParameter *,re::RigGraphNodeOutputParameter *>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + (a1[2] << 6)), a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = v8 << 6;
      v12 = v4 << 6;
      do
      {
        v13 = v9 + v11;
        v14 = v10 + v11;
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        v15 = *(_QWORD *)(v9 + v11 + 16);
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 16) = v15;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 40) = 0;
        *(_DWORD *)(v14 + 48) = 0;
        v16 = *(_QWORD *)(v9 + v11 + 24);
        *(_QWORD *)(v14 + 56) = 0;
        if (v16)
        {
          v17 = *(_QWORD *)(v13 + 40);
          *(_QWORD *)(v10 + v11 + 24) = v16;
          re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity((_QWORD *)(v14 + 24), v17);
          ++*(_DWORD *)(v14 + 48);
          re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::copy((_QWORD *)(v14 + 24), v13 + 24);
        }
        v9 += 64;
        v12 -= 64;
        v10 += 64;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeOutputParameter *,re::RigGraphNodeOutputParameter *,re::RigGraphNodeOutputParameter *>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + (v4 << 6)), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + (v4 << 6));
      v7 = (v5 << 6) - (v4 << 6);
      do
      {
        re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::deinit((uint64_t)v6 + 24);
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 64);
        v7 -= 64;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphNodeOutputParameter *,re::RigGraphNodeOutputParameter *,re::RigGraphNodeOutputParameter *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      re::StringID::operator=((unint64_t *)a3, v5);
      *(_QWORD *)(a3 + 16) = v5[2];
      if ((uint64_t *)a3 != v5)
      {
        v6 = v5[3];
        if (*(_QWORD *)(a3 + 24))
        {
          if (v6)
          {
            re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::copy((_QWORD *)(a3 + 24), (uint64_t)(v5 + 3));
          }
          else
          {
            v8 = *(_QWORD *)(a3 + 40);
            *(_QWORD *)(a3 + 40) = 0;
            if (v8)
            {
              v9 = *(_QWORD *)(a3 + 56);
              v10 = 56 * v8;
              do
              {
                re::StringID::destroyString((re::StringID *)(v9 + 40));
                re::StringID::destroyString((re::StringID *)(v9 + 16));
                re::StringID::destroyString((re::StringID *)v9);
                v9 += 56;
                v10 -= 56;
              }
              while (v10);
            }
          }
          ++*(_DWORD *)(a3 + 48);
        }
        else if (v6)
        {
          v7 = v5[5];
          *(_QWORD *)(a3 + 24) = v6;
          re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity((_QWORD *)(a3 + 24), v7);
          ++*(_DWORD *)(a3 + 48);
          re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::copy((_QWORD *)(a3 + 24), (uint64_t)(v5 + 3));
        }
      }
      v5 += 8;
      a3 += 64;
    }
    while (v5 != a2);
  }
}

void re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true>>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *,re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *,re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *>(*(unint64_t **)(a2 + 32), (unint64_t *)(*(_QWORD *)(a2 + 32) + 56 * a1[2]), a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 56 * v8;
      v12 = 56 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 16), (const StringID *)(v9 + v11 + 16));
        *(_QWORD *)(v10 + v11 + 32) = *(_QWORD *)(v9 + v11 + 32);
        re::StringID::StringID((re::StringID *)(v10 + v11 + 40), (const StringID *)(v9 + v11 + 40));
        v9 += 56;
        v12 -= 56;
        v10 += 56;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *,re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *,re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *>(*(unint64_t **)(a2 + 32), (unint64_t *)(*(_QWORD *)(a2 + 32) + 56 * v4), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4] + 56 * v4;
      v7 = -56 * v4 + 56 * v5;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 40));
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 56;
        v7 -= 56;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *,re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *,re::Pair<re::StringID,re::RigGraphNodeInputParameter,true> *>(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8), (uint64_t *)&v5[v6]);
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 16), (uint64_t *)&v5[v6 + 2]);
      *(_QWORD *)(a3 + v6 * 8 + 32) = v5[v6 + 4];
      result = re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 40), (uint64_t *)&v5[v6 + 5]);
      v6 += 7;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

unint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Pair<unsigned long,re::StringID,true> *,re::Pair<unsigned long,re::StringID,true> *,re::Pair<unsigned long,re::StringID,true> *,0>(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t *v5;
  unint64_t v6;

  if (result != a2)
  {
    v4 = result;
    result = (unint64_t *)(a3 + 8);
    do
    {
      v5 = (uint64_t *)(v4 + 1);
      v6 = *v4;
      v4 += 3;
      *(result - 1) = v6;
      result = re::StringID::operator=(result, v5) + 3;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t re::FixedArray<re::RigGraphOperatorParameterDefinition>::FixedArray(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  if (!v4)
    return (uint64_t)a1;
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::init<>(a1, v4, a2[1]);
  v6 = a2[1];
  if (a1[1] == v6)
  {
    if (v6)
    {
      v7 = (uint64_t *)a2[2];
      v8 = (unint64_t *)a1[2];
      v9 = 32 * v6;
      do
      {
        re::StringID::operator=(v8, v7);
        re::StringID::operator=(v8 + 2, v7 + 2);
        v7 += 4;
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
    }
    return (uint64_t)a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::FixedArray<re::RigGraphOperatorParameterDefinition>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  re::StringID *v7;
  unint64_t i;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = (re::StringID *)v5;
  for (i = a3 - 1; i; --i)
  {
    re::StringID::invalid(v7);
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = &str_110;
    v7 = (re::StringID *)((char *)v7 + 32);
  }
  result = re::StringID::invalid(v7);
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = &str_110;
  return result;
}

void re::internal::TimelineTree::~TimelineTree(re::internal::TimelineTree *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (const void *)*((_QWORD *)this + 24);
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)this + 22);
  *((_QWORD *)this + 22) = 0;
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 14));
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    if (*((_QWORD *)this + 10))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 11));
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
}

id re::internal::TimelineTree::init(uint64_t a1, int a2, char a3, CMTimebaseRef sourceTimebase, re::internal::TimelineTree *this, _QWORD *a6, int a7)
{
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  _anonymous_namespace_ *v22;
  void *v23;
  id result;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;

  if (this)
  {
    *(_QWORD *)(a1 + 200) = this;
    *(Float64 *)(a1 + 208) = re::internal::TimelineTree::currentTime(this);
  }
  else
  {
    v12 = (_anonymous_namespace_ *)CMTimebaseCreateWithSourceTimebase((CFAllocatorRef)*MEMORY[0x24BDBD240], sourceTimebase, (CMTimebaseRef *)(a1 + 192));
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (v17)
  {
    v18 = 12 * v17;
    v19 = (_DWORD *)(*(_QWORD *)(a1 + 88) + 4);
    do
    {
      *v19 = 1065353216;
      v19 += 3;
      v18 -= 12;
    }
    while (v18);
  }
  v21 = *(_QWORD *)(a1 + 104);
  if (v21)
    memset_pattern16(*(void **)(a1 + 112), &memset_pattern_3, 4 * v21);
  *(_BYTE *)(a1 + 184) = a3;
  if (*a6)
    v23 = (void *)(*a6 + 8);
  else
    v23 = 0;
  result = objc_storeWeak((id *)(a1 + 176), v23);
  if (a7)
  {
    v25 = *(_QWORD *)(a1 + 56);
    if (v25)
    {
      v26 = 72 * v25;
      v27 = (_DWORD *)(*(_QWORD *)(a1 + 64) + 64);
      do
      {
        *v27 = 1;
        v27 += 18;
        v26 -= 72;
      }
      while (v26);
    }
  }
  return result;
}

Float64 re::internal::TimelineTree::currentTime(re::internal::TimelineTree *this)
{
  re::internal::TimelineTree *v2;
  double v3;
  CMTime time;

  v2 = (re::internal::TimelineTree *)*((_QWORD *)this + 25);
  if (v2)
  {
    re::internal::TimelineTree::currentTime(v2);
    return v3 - *((double *)this + 26);
  }
  else
  {
    CMTimebaseGetTime(&time, *((CMTimebaseRef *)this + 24));
    return CMTimeGetSeconds(&time);
  }
}

void re::internal::TimelineTree::setPaused(re::internal::TimelineTree *this, int a2)
{
  int v4;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  char *WeakRetained;
  __n128 v10;
  void *v11;
  char *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 25))
  {
    v4 = *((unsigned __int8 *)this + 185);
    if ((a2 & 1) != 0)
    {
      CMTimebaseSetRate(*((CMTimebaseRef *)this + 24), 0.0);
      *((_BYTE *)this + 185) = 1;
      if (v4 == 1)
        return;
    }
    else
    {
      if (v4 != 1)
        return;
      *((_BYTE *)this + 185) = 2;
    }
    v5 = &v14;
    if (!*((_QWORD *)this + 7))
      goto LABEL_26;
    if (*(_BYTE *)(*((_QWORD *)this + 8) + 16))
    {
      v6 = *((_QWORD *)this + 16);
      if (v6)
      {
        v7 = 0;
        for (i = 0; i < v6; ++i)
        {
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 8 * i) + 8) == 49)
          {
            if (*((_QWORD *)this + 19) <= i)
            {
              v17 = 0uLL;
              v18 = 0uLL;
              v15 = 0uLL;
              v16 = 0uLL;
              v14 = 0uLL;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_24:
              v17 = 0u;
              v18 = 0u;
              v15 = 0u;
              v16 = 0u;
              v14 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_25:
              v17 = 0u;
              v18 = 0u;
              v15 = 0u;
              v16 = 0u;
              v14 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_26:
              v5[3] = 0u;
              v5[4] = 0u;
              v5[1] = 0u;
              v5[2] = 0u;
              v14 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            WeakRetained = (char *)objc_loadWeakRetained((id *)this + 22);
            if (WeakRetained)
            {
              v11 = WeakRetained;
              v12 = WeakRetained - 8;
              v13 = *((_QWORD *)this + 7);
              if (a2)
              {
                if (v13 <= i)
                  goto LABEL_24;
              }
              else if (v13 <= i)
              {
                goto LABEL_25;
              }
              v10.n128_u64[0] = *(_QWORD *)(*((_QWORD *)this + 8) + 24);
              (*(void (**)(__n128))(*(_QWORD *)v12 + 40))(v10);

            }
            v6 = *((_QWORD *)this + 16);
          }
          v7 += 72;
        }
      }
    }
  }
}

_QWORD *re::FixedArray<re::internal::TimelineDesc>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x924924924924925)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 28, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 28 * a3, 4);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      *((_DWORD *)result + 2) = 1065353216;
      *(_QWORD *)((char *)result + 12) = 0;
      *(_QWORD *)((char *)result + 18) = 0;
      result = (_QWORD *)((char *)result + 28);
      --v6;
    }
    while (v6);
  }
  *result = 0;
  *((_DWORD *)result + 2) = 1065353216;
  *(_QWORD *)((char *)result + 12) = 0;
  *(_QWORD *)((char *)result + 18) = 0;
  return result;
}

uint64_t re::FixedArray<re::AnimationClock>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x38E38E38E38E38FLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 72 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_QWORD *)(result + 64) = 0;
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_BYTE *)result = 1;
      *(_QWORD *)(result + 36) = 0;
      *(_QWORD *)(result + 44) = 0;
      *(_QWORD *)(result + 49) = 0;
      *(_DWORD *)(result + 64) = 2;
      result += 72;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 49) = 0;
  *(_DWORD *)(result + 64) = 2;
  return result;
}

uint64_t re::FixedArray<re::OverridableValue<float>>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x1555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 12, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 12 * a3, 4);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 4) = 0;
      *(_DWORD *)(result + 8) = 0;
      result += 12;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void re::FixedArray<re::Timeline const*>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

void re::AnimationErrorCategoryImpl::~AnimationErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2276933B8);
}

const char *re::AnimationErrorCategoryImpl::name(re::AnimationErrorCategoryImpl *this)
{
  return "REAnimation error";
}

_QWORD *re::AnimationErrorCategoryImpl::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  int v4;
  char *v5;

  if (a1 > 1999)
  {
    if (a1 > 3999)
    {
      switch(a1)
      {
        case 5000:
          v5 = "Invalid rig data type";
          break;
        case 5001:
          v5 = "Error with the rig environment";
          break;
        case 5002:
          v5 = "Invalid rig data value";
          break;
        case 5003:
          v5 = "Invalid rig data attribute";
          break;
        case 5004:
          v5 = "Invalid rig graph node type";
          break;
        case 5005:
          v5 = "Rig graph node not found";
          break;
        case 5006:
          v5 = "Rig graph node parameter not found";
          break;
        case 5007:
          v5 = "Rig value parsing error";
          break;
        default:
          switch(a1)
          {
            case 6000:
              v5 = "Invalid joint attribute";
              break;
            case 6001:
              v5 = "Invalid joint attribute index";
              break;
            case 6002:
              v5 = "Invalid rig hierarchy component";
              break;
            case 6003:
              v5 = "Invalid joint state";
              break;
            default:
              if (a1 == 4000)
                v5 = "Circular dependency detected in evaluation tree.";
              else
LABEL_69:
                v5 = "Unknown REAnimation error";
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 2000:
          v5 = "Check hasTransformAnimation() before calling importSRTSampledAnimation()";
          break;
        case 2001:
          v5 = "Invalid sample rate";
          break;
        case 2002:
          v5 = "Missing transform component on node";
          break;
        case 2003:
          v5 = "Transform not animated";
          break;
        case 2004:
          v5 = "Invalid minimum time";
          break;
        case 2005:
          v5 = "Invalid start time";
          break;
        case 2006:
          v5 = "Invalid end time";
          break;
        case 2007:
          v5 = "Mismatched animation transform count";
          break;
        case 2008:
          v5 = "Mismatched animation sample count";
          break;
        default:
          switch(a1)
          {
            case 3000:
              v5 = "Invalid rig definition data.";
              break;
            case 3001:
              v5 = "Invalid rig node has been specified.";
              break;
            case 3002:
              v5 = "Invalid rig path has been specified.";
              break;
            case 3004:
              v5 = "Invalid rig compilation state.";
              break;
            default:
              goto LABEL_69;
          }
          break;
      }
    }
  }
  else
  {
    v4 = a1 - 1000;
    v5 = "Joint not in skeleton";
    switch(v4)
    {
      case 0:
        return std::string::basic_string[abi:nn180100]<0>(a2, v5);
      case 1:
        v5 = "Missing animation bind component";
        break;
      case 2:
        v5 = "Missing skeleton";
        break;
      case 3:
        v5 = "Missing joint paths";
        break;
      case 4:
        v5 = "Missing bind transforms";
        break;
      case 5:
        v5 = "Mismatched bind transforms";
        break;
      case 6:
        v5 = "Missing influence weights vertex attribute";
        break;
      case 7:
        v5 = "Bad format for influence weights";
        break;
      case 8:
        v5 = "Missing influence indexes";
        break;
      case 9:
        v5 = "Missing influence joint indexes data for vertex attribute";
        break;
      case 10:
        v5 = "No influences found for vertex";
        break;
      case 11:
        v5 = "Bad format for influence indexes";
        break;
      case 12:
        v5 = "Invalid object being processed for animation data";
        break;
      case 13:
        v5 = "No animation data found";
        break;
      case 14:
        v5 = "Invalid number of animation frames";
        break;
      case 15:
        v5 = "Destination weights array should be empty";
        break;
      case 16:
        v5 = "Destination joint indices array should be empty";
        break;
      case 17:
        v5 = "Destination influence end indices array should be empty";
        break;
      case 18:
        v5 = "Malformed animation file";
        break;
      case 19:
        v5 = "Vertex has no influences";
        break;
      case 20:
        v5 = "Expected influenceEndIndices to match vertexCount";
        break;
      case 21:
        v5 = "Missing influence weights data for vertex attribute";
        break;
      case 22:
        v5 = "Skeleton cannot be NULL when processing mesh data";
        break;
      case 23:
        v5 = "SkinningData cannot be NULL when processing mesh data";
        break;
      case 24:
        v5 = "Node must not be null when processing animation data";
        break;
      case 25:
        v5 = "Mismatched animation data sizes";
        break;
      case 26:
        v5 = "Could not find source skeleton for animation";
        break;
      case 27:
        v5 = "Invalid animation transform data";
        break;
      case 28:
        v5 = "Missing rest transforms";
        break;
      case 29:
        v5 = "MismatchedRestTransforms";
        break;
      case 30:
        v5 = "DuplicateJointName";
        break;
      case 31:
        v5 = "Invalid joint order.";
        break;
      case 32:
        v5 = "Invalid skeleton.";
        break;
      case 33:
        v5 = "Invalid topological change.";
        break;
      default:
        goto LABEL_69;
    }
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v5);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void re::introspect_EasingFunctionType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  re *v40;
  uint64_t *v41;
  re *v42;
  uint64_t *v43;
  re *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  StringID v50;
  _QWORD v51[2];
  _QWORD v52[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2540F8398);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2540F8398);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Back";
      qword_2540F8600 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Bounce";
      qword_2540F8608 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Circle";
      qword_2540F8610 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "Elastic";
      qword_2540F8618 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "Exponential";
      qword_2540F8620 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 5;
      *((_QWORD *)v38 + 2) = "Hermite";
      qword_2540F8628 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = 6;
      *((_QWORD *)v40 + 2) = "Logarithmic";
      qword_2540F8630 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *((_QWORD *)v42 + 1) = 7;
      *((_QWORD *)v42 + 2) = "Power";
      qword_2540F8638 = (uint64_t)v42;
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((_QWORD *)v44 + 1) = 8;
      *((_QWORD *)v44 + 2) = "Sine";
      qword_2540F8640 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 24, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = 9;
      *(_QWORD *)(v46 + 16) = "CubicBezier";
      qword_2540F8648 = v46;
      __cxa_guard_release(&qword_2540F8398);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540F83A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540F83A0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540F8570, "EasingFunctionType", 4, 4, 1, 1);
    qword_2540F8570 = (uint64_t)&off_24ED7D9E8;
    qword_2540F85B0 = (uint64_t)&re::introspect_EasingFunctionType(BOOL)::enumTable;
    dword_2540F8580 = 9;
    __cxa_guard_release(&qword_2540F83A0);
  }
  if ((_MergedGlobals_15 & 1) == 0)
  {
    _MergedGlobals_15 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540F8570, a2);
    v48 = 0xA62999CF78DB603ALL;
    v49 = "EasingFunctionType";
    v52[0] = 208862;
    v52[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v52);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v52);
      v6 = (unsigned int *)qword_2540F85B0;
      v51[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v52, &v48, 1, 1, (uint64_t)v51);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v50.var0 = 2 * v12;
            v50.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v52, v16, &v50);
            re::StringID::destroyString((re::StringID *)&v50);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v50.var0 = 2 * v20;
              v50.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v52, v24, &v50);
              re::StringID::destroyString((re::StringID *)&v50);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v52, v25);
      xmmword_2540F8590 = (__int128)v50;
      re::StringID::destroyString((re::StringID *)&v48);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v52);
      re::internal::assertLog((re::internal *)5, v47, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "EasingFunctionType", v48, v49);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_EasingMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2540F83A8);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2540F83A8);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "In";
      qword_2540F8510 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Out";
      qword_2540F8518 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "InOut";
      qword_2540F8520 = v32;
      __cxa_guard_release(&qword_2540F83A8);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540F83B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540F83B0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540F85B8, "EasingMode", 4, 4, 1, 1);
    qword_2540F85B8 = (uint64_t)&off_24ED7D9E8;
    qword_2540F85F8 = (uint64_t)&re::introspect_EasingMode(BOOL)::enumTable;
    dword_2540F85C8 = 9;
    __cxa_guard_release(&qword_2540F83B0);
  }
  if ((byte_2540F8391 & 1) == 0)
  {
    byte_2540F8391 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540F85B8, a2);
    v34 = 0xD92DC47A8731CLL;
    v35 = "EasingMode";
    v38[0] = 208862;
    v38[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_2540F85F8;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_2540F85D8 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "EasingMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspectionTable_EasingFunction(re *this)
{
  unsigned __int8 v1;
  re *inited;
  uint64_t *v3;
  re::IntrospectionBase *v4;
  uint64_t *v5;
  re::IntrospectionBase *v6;
  uint64_t *v7;
  re::IntrospectionBase *v8;
  uint64_t *v9;
  re::IntrospectionBase *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t *v13;
  re::IntrospectionBase *v14;
  uint64_t *v15;
  re::IntrospectionBase *v16;
  uint64_t *v17;
  re::IntrospectionBase *v18;
  uint64_t *v19;
  re::IntrospectionBase *v20;
  uint64_t *v21;
  re::IntrospectionBase *v22;

  if ((byte_2540F8392 & 1) == 0)
  {
    byte_2540F8392 = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_2540F83B8);
    if ((v1 & 1) == 0)
    {
      inited = (re *)__cxa_guard_acquire(&qword_2540F83B8);
      if ((_DWORD)inited)
      {
        qword_2540F8BF0 = (uint64_t)"BackEase";
        v3 = (uint64_t *)re::internal::introspectionInfoStorage<re::BackEase>;
        if (!re::internal::introspectionInfoStorage<re::BackEase>)
        {
          v3 = re::allocInfo_BackEase(inited);
          re::internal::introspectionInfoStorage<re::BackEase> = (uint64_t)v3;
          re::initInfo_BackEase((re *)v3, v4);
        }
        qword_2540F8C00 = 0;
        unk_2540F8C08 = 0;
        qword_2540F8BF8 = (uint64_t)v3;
        dword_2540F8C10 = 0;
        qword_2540F8C18 = (uint64_t)"BounceEase";
        v5 = (uint64_t *)re::internal::introspectionInfoStorage<re::BounceEase>;
        if (!re::internal::introspectionInfoStorage<re::BounceEase>)
        {
          v5 = re::allocInfo_BounceEase(inited);
          re::internal::introspectionInfoStorage<re::BounceEase> = (uint64_t)v5;
          re::initInfo_BounceEase((re *)v5, v6);
        }
        qword_2540F8C20 = (uint64_t)v5;
        *(_QWORD *)algn_2540F8C28 = 0;
        qword_2540F8C30 = 1;
        dword_2540F8C38 = 0;
        qword_2540F8C40 = (uint64_t)"CircleEase";
        v7 = (uint64_t *)re::internal::introspectionInfoStorage<re::CircleEase>;
        if (!re::internal::introspectionInfoStorage<re::CircleEase>)
        {
          v7 = re::allocInfo_CircleEase(inited);
          re::internal::introspectionInfoStorage<re::CircleEase> = (uint64_t)v7;
          re::initInfo_CircleEase((re *)v7, v8);
        }
        qword_2540F8C48 = (uint64_t)v7;
        unk_2540F8C50 = 0;
        qword_2540F8C58 = 2;
        dword_2540F8C60 = 0;
        qword_2540F8C68 = (uint64_t)"ElasticEase";
        v9 = (uint64_t *)re::internal::introspectionInfoStorage<re::ElasticEase>;
        if (!re::internal::introspectionInfoStorage<re::ElasticEase>)
        {
          v9 = re::allocInfo_ElasticEase(inited);
          re::internal::introspectionInfoStorage<re::ElasticEase> = (uint64_t)v9;
          re::initInfo_ElasticEase((re *)v9, v10);
        }
        qword_2540F8C70 = (uint64_t)v9;
        *(_QWORD *)algn_2540F8C78 = 0;
        qword_2540F8C80 = 3;
        dword_2540F8C88 = 0;
        qword_2540F8C90 = (uint64_t)"ExponentialEase";
        v11 = (uint64_t *)re::internal::introspectionInfoStorage<re::ExponentialEase>;
        if (!re::internal::introspectionInfoStorage<re::ExponentialEase>)
        {
          v11 = re::allocInfo_ExponentialEase(inited);
          re::internal::introspectionInfoStorage<re::ExponentialEase> = (uint64_t)v11;
          re::initInfo_ExponentialEase((re *)v11, v12);
        }
        qword_2540F8C98 = (uint64_t)v11;
        unk_2540F8CA0 = 0;
        qword_2540F8CA8 = 4;
        dword_2540F8CB0 = 0;
        qword_2540F8CB8 = (uint64_t)"HermiteEase";
        v13 = (uint64_t *)re::internal::introspectionInfoStorage<re::HermiteEase>;
        if (!re::internal::introspectionInfoStorage<re::HermiteEase>)
        {
          v13 = re::allocInfo_HermiteEase(inited);
          re::internal::introspectionInfoStorage<re::HermiteEase> = (uint64_t)v13;
          inited = (re *)re::initInfo_HermiteEase((re *)v13, v14);
        }
        qword_2540F8CC0 = (uint64_t)v13;
        *(_QWORD *)algn_2540F8CC8 = 0;
        qword_2540F8CD0 = 5;
        dword_2540F8CD8 = 0;
        qword_2540F8CE0 = (uint64_t)"LogarithmicEase";
        v15 = (uint64_t *)re::internal::introspectionInfoStorage<re::LogarithmicEase>;
        if (!re::internal::introspectionInfoStorage<re::LogarithmicEase>)
        {
          v15 = re::allocInfo_LogarithmicEase(inited);
          re::internal::introspectionInfoStorage<re::LogarithmicEase> = (uint64_t)v15;
          re::initInfo_LogarithmicEase((re *)v15, v16);
        }
        qword_2540F8CE8 = (uint64_t)v15;
        unk_2540F8CF0 = 0;
        qword_2540F8CF8 = 6;
        dword_2540F8D00 = 0;
        qword_2540F8D08 = (uint64_t)"PowerEase";
        v17 = (uint64_t *)re::internal::introspectionInfoStorage<re::PowerEase>;
        if (!re::internal::introspectionInfoStorage<re::PowerEase>)
        {
          v17 = re::allocInfo_PowerEase(inited);
          re::internal::introspectionInfoStorage<re::PowerEase> = (uint64_t)v17;
          re::initInfo_PowerEase((re *)v17, v18);
        }
        qword_2540F8D10 = (uint64_t)v17;
        *(_QWORD *)algn_2540F8D18 = 0;
        qword_2540F8D20 = 7;
        dword_2540F8D28 = 0;
        qword_2540F8D30 = (uint64_t)"SineEase";
        v19 = (uint64_t *)re::internal::introspectionInfoStorage<re::SineEase>;
        if (!re::internal::introspectionInfoStorage<re::SineEase>)
        {
          v19 = re::allocInfo_SineEase(inited);
          re::internal::introspectionInfoStorage<re::SineEase> = (uint64_t)v19;
          re::initInfo_SineEase((re *)v19, v20);
        }
        qword_2540F8D38 = (uint64_t)v19;
        unk_2540F8D40 = 0;
        qword_2540F8D48 = 8;
        dword_2540F8D50 = 0;
        qword_2540F8D58 = (uint64_t)"CubicBezierEase";
        v21 = (uint64_t *)re::internal::introspectionInfoStorage<re::CubicBezierEase>;
        if (!re::internal::introspectionInfoStorage<re::CubicBezierEase>)
        {
          v21 = re::allocInfo_CubicBezierEase(inited);
          re::internal::introspectionInfoStorage<re::CubicBezierEase> = (uint64_t)v21;
          re::initInfo_CubicBezierEase((re *)v21, v22);
        }
        qword_2540F8D60 = (uint64_t)v21;
        qword_2540F8D68 = 0;
        qword_2540F8D70 = 9;
        dword_2540F8D78 = 0;
        __cxa_guard_release(&qword_2540F83B8);
      }
    }
    dword_2540F84A0 = 10;
    qword_2540F84A8 = (uint64_t)&qword_2540F8BF0;
  }
}

uint64_t *re::allocInfo_EasingFunction(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F83C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F83C8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8650, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8660 = 0;
    qword_2540F8670 = 0;
    qword_2540F8678 = 0xFFFFFFFFLL;
    qword_2540F8650 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8680 = (uint64_t)"EasingFunction";
    dword_2540F8688 = 0;
    xmmword_2540F8690 = 0u;
    unk_2540F86A0 = 0u;
    xmmword_2540F86B0 = 0u;
    qword_2540F86C0 = 0;
    __cxa_guard_release(&qword_2540F83C8);
  }
  return &qword_2540F8650;
}

void re::initInfo_EasingFunction(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x4714B64F78910C86;
  v12[1] = "EasingFunction";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F83C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F83C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_EasingFunctionType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v8 = 3;
      *(_QWORD *)(v8 + 8) = &qword_2540F8570;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 8;
      qword_2540F84B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspectionTable_EasingFunction((re *)v9);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 16, 8);
      *(_DWORD *)v10 = 2;
      *(_QWORD *)(v10 + 8) = &dword_2540F84A0;
      qword_2540F84B8 = v10;
      __cxa_guard_release(&qword_2540F83C0);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F84B0;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

uint64_t re::introspect_EasingFunction(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EasingFunction", (uint64_t (*)(re::internal *))re::allocInfo_EasingFunction, (re::IntrospectionBase *(*)(void))re::initInfo_EasingFunction, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::EasingFunction>, this);
}

uint64_t *re::allocInfo_EasingFunctionBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F83D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F83D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F86C8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F86D8 = 0;
    qword_2540F86E8 = 0;
    qword_2540F86F0 = 0xFFFFFFFFLL;
    qword_2540F86C8 = (uint64_t)&off_24ED7DAA8;
    qword_2540F86F8 = (uint64_t)"EasingFunctionBase";
    dword_2540F8700 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540F8738 = 0;
    __cxa_guard_release(&qword_2540F83D0);
  }
  return &qword_2540F86C8;
}

void re::initInfo_EasingFunctionBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xA62999CF78CA4F68;
  v15[1] = "EasingFunctionBase";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F83D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F83D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::EasingFunction>;
      if (!re::internal::introspectionInfoStorage<re::EasingFunction>)
      {
        v8 = re::allocInfo_EasingFunction((re *)v6);
        re::internal::introspectionInfoStorage<re::EasingFunction> = (uint64_t)v8;
        re::initInfo_EasingFunction((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunction";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F84C0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_EasingMode((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "mode";
      *(_QWORD *)(v13 + 16) = &qword_2540F85B8;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0xC00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540F84C8 = v13;
      __cxa_guard_release(&qword_2540F83D8);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F84C0;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

uint64_t *re::allocInfo_BackEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F83E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F83E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8740, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8750 = 0;
    qword_2540F8760 = 0;
    qword_2540F8768 = 0xFFFFFFFFLL;
    qword_2540F8740 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8770 = (uint64_t)"BackEase";
    dword_2540F8778 = 0;
    xmmword_2540F8780 = 0u;
    unk_2540F8790 = 0u;
    xmmword_2540F87A0 = 0u;
    qword_2540F87B0 = 0;
    __cxa_guard_release(&qword_2540F83E8);
  }
  return &qword_2540F8740;
}

void re::initInfo_BackEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x377047CEB2ALL;
  v16[1] = "BackEase";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F83F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F83F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F84D0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "amplitude";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540F84D8 = v14;
      __cxa_guard_release(&qword_2540F83F0);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F84D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BackEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BackEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BackEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BackEase>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

void re::internal::defaultConstruct<re::BackEase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = &off_24ED203F0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1065353216;
}

uint64_t re::internal::defaultConstructV2<re::BackEase>(uint64_t result)
{
  *(_QWORD *)result = &off_24ED203F0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1065353216;
  return result;
}

uint64_t *re::allocInfo_BounceEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F83F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F83F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F87B8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F87C8 = 0;
    qword_2540F87D8 = 0;
    qword_2540F87E0 = 0xFFFFFFFFLL;
    qword_2540F87B8 = (uint64_t)&off_24ED7DAA8;
    qword_2540F87E8 = (uint64_t)"BounceEase";
    dword_2540F87F0 = 0;
    xmmword_2540F87F8 = 0u;
    xmmword_2540F8808 = 0u;
    xmmword_2540F8818 = 0u;
    qword_2540F8828 = 0;
    __cxa_guard_release(&qword_2540F83F8);
  }
  return &qword_2540F87B8;
}

void re::initInfo_BounceEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0xD186850244D6CLL;
  v20[1] = "BounceEase";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8400);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8400);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8528 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_uint32_t((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "bounces";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540F8530 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "bounciness";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1400000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540F8538 = v18;
      __cxa_guard_release(&qword_2540F8400);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540F8528;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BounceEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BounceEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BounceEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BounceEase>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

double re::internal::defaultConstruct<re::BounceEase>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *(_QWORD *)&result = 1;
  a3[1] = 1;
  *a3 = &off_24ED20448;
  a3[2] = 0x4000000000000003;
  return result;
}

double re::internal::defaultConstructV2<re::BounceEase>(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 1;
  a1[1] = 1;
  *a1 = &off_24ED20448;
  a1[2] = 0x4000000000000003;
  return result;
}

uint64_t *re::allocInfo_CircleEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8408);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8408))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8830, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8840 = 0;
    qword_2540F8850 = 0;
    qword_2540F8858 = 0xFFFFFFFFLL;
    qword_2540F8830 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8860 = (uint64_t)"CircleEase";
    dword_2540F8868 = 0;
    xmmword_2540F8870 = 0u;
    xmmword_2540F8880 = 0u;
    xmmword_2540F8890 = 0u;
    qword_2540F88A0 = 0;
    __cxa_guard_release(&qword_2540F8408);
  }
  return &qword_2540F8830;
}

void re::initInfo_CircleEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xD3F06692911FCLL;
  v12[1] = "CircleEase";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8418);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8418);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8410 = v10;
      __cxa_guard_release(&qword_2540F8418);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540F8410;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CircleEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CircleEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CircleEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CircleEase>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::CircleEase>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *(_QWORD *)&result = 2;
  a3[1] = 2;
  *a3 = &off_24ED204A0;
  return result;
}

double re::internal::defaultConstructV2<re::CircleEase>(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 2;
  a1[1] = 2;
  *a1 = &off_24ED204A0;
  return result;
}

uint64_t *re::allocInfo_ElasticEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8420);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8420))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F88A8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F88B8 = 0;
    qword_2540F88C8 = 0;
    qword_2540F88D0 = 0xFFFFFFFFLL;
    qword_2540F88A8 = (uint64_t)&off_24ED7DAA8;
    qword_2540F88D8 = (uint64_t)"ElasticEase";
    dword_2540F88E0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540F8918 = 0;
    __cxa_guard_release(&qword_2540F8420);
  }
  return &qword_2540F88A8;
}

void re::initInfo_ElasticEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x1A6BE4973918086;
  v20[1] = "ElasticEase";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8428);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8428);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8540 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_uint32_t((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "oscillations";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540F8548 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "springiness";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1400000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540F8550 = v18;
      __cxa_guard_release(&qword_2540F8428);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540F8540;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ElasticEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ElasticEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ElasticEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ElasticEase>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

double re::internal::defaultConstruct<re::ElasticEase>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *(_QWORD *)&result = 3;
  a3[1] = 3;
  *a3 = &off_24ED204F8;
  a3[2] = 0x4040000000000003;
  return result;
}

double re::internal::defaultConstructV2<re::ElasticEase>(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 3;
  a1[1] = 3;
  *a1 = &off_24ED204F8;
  a1[2] = 0x4040000000000003;
  return result;
}

uint64_t *re::allocInfo_ExponentialEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8430);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8430))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8920, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8930 = 0;
    qword_2540F8940 = 0;
    qword_2540F8948 = 0xFFFFFFFFLL;
    qword_2540F8920 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8950 = (uint64_t)"ExponentialEase";
    dword_2540F8958 = 0;
    xmmword_2540F8960 = 0u;
    xmmword_2540F8970 = 0u;
    xmmword_2540F8980 = 0u;
    qword_2540F8990 = 0;
    __cxa_guard_release(&qword_2540F8430);
  }
  return &qword_2540F8920;
}

void re::initInfo_ExponentialEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x41C8769A90529D66;
  v16[1] = "ExponentialEase";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8438);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8438);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F84E0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "exponent";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540F84E8 = v14;
      __cxa_guard_release(&qword_2540F8438);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F84E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ExponentialEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ExponentialEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ExponentialEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ExponentialEase>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::ExponentialEase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 4;
  *(_QWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = &off_24ED20550;
  *(_DWORD *)(a3 + 16) = 0x40000000;
  return result;
}

double re::internal::defaultConstructV2<re::ExponentialEase>(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 4;
  *(_QWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = &off_24ED20550;
  *(_DWORD *)(a1 + 16) = 0x40000000;
  return result;
}

uint64_t *re::allocInfo_HermiteEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8440);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8440))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8998, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F89A8 = 0;
    qword_2540F89B8 = 0;
    qword_2540F89C0 = 0xFFFFFFFFLL;
    qword_2540F8998 = (uint64_t)&off_24ED7DAA8;
    qword_2540F89C8 = (uint64_t)"HermiteEase";
    dword_2540F89D0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540F8A08 = 0;
    __cxa_guard_release(&qword_2540F8440);
  }
  return &qword_2540F8998;
}

void re::initInfo_HermiteEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x1B70060016C0920;
  v12[1] = "HermiteEase";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8450);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8450);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8448 = v10;
      __cxa_guard_release(&qword_2540F8450);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540F8448;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::HermiteEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::HermiteEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::HermiteEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::HermiteEase>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::HermiteEase>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *(_QWORD *)&result = 5;
  a3[1] = 5;
  *a3 = &off_24ED1FF00;
  return result;
}

double re::internal::defaultConstructV2<re::HermiteEase>(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 5;
  a1[1] = 5;
  *a1 = &off_24ED1FF00;
  return result;
}

uint64_t re::introspect_HermiteEase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HermiteEase", (uint64_t (*)(re::internal *))re::allocInfo_HermiteEase, (re::IntrospectionBase *(*)(void))re::initInfo_HermiteEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::HermiteEase>, this);
}

uint64_t *re::allocInfo_LogarithmicEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8458);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8458))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8A10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8A20 = 0;
    qword_2540F8A30 = 0;
    qword_2540F8A38 = 0xFFFFFFFFLL;
    qword_2540F8A10 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8A40 = (uint64_t)"LogarithmicEase";
    dword_2540F8A48 = 0;
    xmmword_2540F8A50 = 0u;
    xmmword_2540F8A60 = 0u;
    xmmword_2540F8A70 = 0u;
    qword_2540F8A80 = 0;
    __cxa_guard_release(&qword_2540F8458);
  }
  return &qword_2540F8A10;
}

void re::initInfo_LogarithmicEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x19A3FD633D218F5ALL;
  v16[1] = "LogarithmicEase";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8460);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8460);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F84F0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "base";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540F84F8 = v14;
      __cxa_guard_release(&qword_2540F8460);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F84F0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::LogarithmicEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::LogarithmicEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::LogarithmicEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::LogarithmicEase>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::LogarithmicEase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 6;
  *(_QWORD *)(a3 + 8) = 6;
  *(_QWORD *)a3 = &off_24ED205A8;
  *(_DWORD *)(a3 + 16) = 0x40000000;
  return result;
}

double re::internal::defaultConstructV2<re::LogarithmicEase>(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 6;
  *(_QWORD *)(a1 + 8) = 6;
  *(_QWORD *)a1 = &off_24ED205A8;
  *(_DWORD *)(a1 + 16) = 0x40000000;
  return result;
}

uint64_t *re::allocInfo_PowerEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8468);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8468))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8A88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8A98 = 0;
    qword_2540F8AA8 = 0;
    qword_2540F8AB0 = 0xFFFFFFFFLL;
    qword_2540F8A88 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8AB8 = (uint64_t)"PowerEase";
    dword_2540F8AC0 = 0;
    xmmword_2540F8AC8 = 0u;
    xmmword_2540F8AD8 = 0u;
    xmmword_2540F8AE8 = 0u;
    qword_2540F8AF8 = 0;
    __cxa_guard_release(&qword_2540F8468);
  }
  return &qword_2540F8A88;
}

void re::initInfo_PowerEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x81DD5396ECE6;
  v16[1] = "PowerEase";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8470);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8470);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8500 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "power";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540F8508 = v14;
      __cxa_guard_release(&qword_2540F8470);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540F8500;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PowerEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PowerEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PowerEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PowerEase>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::PowerEase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 7;
  *(_QWORD *)(a3 + 8) = 7;
  *(_QWORD *)a3 = &off_24ED20600;
  *(_DWORD *)(a3 + 16) = 0x40000000;
  return result;
}

double re::internal::defaultConstructV2<re::PowerEase>(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 7;
  *(_QWORD *)(a1 + 8) = 7;
  *(_QWORD *)a1 = &off_24ED20600;
  *(_DWORD *)(a1 + 16) = 0x40000000;
  return result;
}

uint64_t *re::allocInfo_SineEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8478);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8478))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8B00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8B10 = 0;
    qword_2540F8B20 = 0;
    qword_2540F8B28 = 0xFFFFFFFFLL;
    qword_2540F8B00 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8B30 = (uint64_t)"SineEase";
    dword_2540F8B38 = 0;
    xmmword_2540F8B40 = 0u;
    xmmword_2540F8B50 = 0u;
    xmmword_2540F8B60 = 0u;
    qword_2540F8B70 = 0;
    __cxa_guard_release(&qword_2540F8478);
  }
  return &qword_2540F8B00;
}

void re::initInfo_SineEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x45443AA1876;
  v12[1] = "SineEase";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8488);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8488);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540F83E0;
      if (!qword_2540F83E0)
      {
        v8 = re::allocInfo_EasingFunctionBase((re *)v6);
        qword_2540F83E0 = (uint64_t)v8;
        re::initInfo_EasingFunctionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunctionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8480 = v10;
      __cxa_guard_release(&qword_2540F8488);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540F8480;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SineEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SineEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SineEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SineEase>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::SineEase>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *(_QWORD *)&result = 8;
  a3[1] = 8;
  *a3 = &off_24ED20658;
  return result;
}

double re::internal::defaultConstructV2<re::SineEase>(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 8;
  a1[1] = 8;
  *a1 = &off_24ED20658;
  return result;
}

uint64_t *re::allocInfo_CubicBezierEase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540F8490);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540F8490))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540F8B78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540F8B88 = 0;
    qword_2540F8B98 = 0;
    qword_2540F8BA0 = 0xFFFFFFFFLL;
    qword_2540F8B78 = (uint64_t)&off_24ED7DAA8;
    qword_2540F8BA8 = (uint64_t)"CubicBezierEase";
    dword_2540F8BB0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540F8BE8 = 0;
    __cxa_guard_release(&qword_2540F8490);
  }
  return &qword_2540F8B78;
}

void re::initInfo_CubicBezierEase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xF7356B4E535BA46ELL;
  v18[1] = "CubicBezierEase";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_2540F8498);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540F8498);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::EasingFunction>;
      if (!re::internal::introspectionInfoStorage<re::EasingFunction>)
      {
        v8 = re::allocInfo_EasingFunction((re *)v6);
        re::internal::introspectionInfoStorage<re::EasingFunction> = (uint64_t)v8;
        re::initInfo_EasingFunction((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "EasingFunction";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540F8558 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "controlPoint1";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540F8560 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v15 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "controlPoint2";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2540F8568 = v16;
      __cxa_guard_release(&qword_2540F8498);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540F8558;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CubicBezierEase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CubicBezierEase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CubicBezierEase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CubicBezierEase>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

double re::internal::defaultConstruct<re::CubicBezierEase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 8) = 9;
  *(_QWORD *)a3 = &off_24ED206B0;
  result = 5.23869071e-11;
  *(_QWORD *)(a3 + 16) = 0x3DCCCCCD3E800000;
  *(_QWORD *)(a3 + 24) = 0x3F8000003E800000;
  return result;
}

double re::internal::defaultConstructV2<re::CubicBezierEase>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 9;
  *(_QWORD *)a1 = &off_24ED206B0;
  result = 5.23869071e-11;
  *(_QWORD *)(a1 + 16) = 0x3DCCCCCD3E800000;
  *(_QWORD *)(a1 + 24) = 0x3F8000003E800000;
  return result;
}

void re::BackEase::~BackEase(re::BackEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::BackEase::clone(re::BackEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  float result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)v4 = &off_24ED203F0;
  result = *((float *)this + 4);
  *(float *)(v4 + 16) = result;
  return result;
}

uint64_t re::BackEase::typeInfo(re::BackEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BackEase", (uint64_t (*)(re::internal *))re::allocInfo_BackEase, (re::IntrospectionBase *(*)(void))re::initInfo_BackEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BackEase>, 0);
}

float re::BackEase::easeIn(re::BackEase *this, float a2)
{
  float v2;

  v2 = fmaxf(*((float *)this + 4), 0.0);
  return (float)(sinf(a2 * -3.1416) * (float)(v2 * a2)) + (float)((float)(a2 * a2) * a2);
}

void re::BounceEase::~BounceEase(re::BounceEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::BounceEase::clone(re::BounceEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  float result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)v4 = &off_24ED20448;
  *(_DWORD *)(v4 + 16) = *((_DWORD *)this + 4);
  result = *((float *)this + 5);
  *(float *)(v4 + 20) = result;
  return result;
}

uint64_t re::BounceEase::typeInfo(re::BounceEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BounceEase", (uint64_t (*)(re::internal *))re::allocInfo_BounceEase, (re::IntrospectionBase *(*)(void))re::initInfo_BounceEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BounceEase>, 0);
}

float re::BounceEase::easeIn(re::BounceEase *this, float a2)
{
  return re::bounceEase((re *)*((unsigned int *)this + 4), a2, *((float *)this + 5));
}

void re::CircleEase::~CircleEase(re::CircleEase *this)
{
  JUMPOUT(0x2276933B8);
}

double re::CircleEase::clone(re::CircleEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  double result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 16, 8);
  result = *((double *)this + 1);
  *(double *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24ED204A0;
  return result;
}

uint64_t re::CircleEase::typeInfo(re::CircleEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CircleEase", (uint64_t (*)(re::internal *))re::allocInfo_CircleEase, (re::IntrospectionBase *(*)(void))re::initInfo_CircleEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CircleEase>, 0);
}

float re::CircleEase::easeIn(re::CircleEase *this, float a2)
{
  if (a2 > 1.0)
    a2 = 1.0;
  if (a2 < -1.0)
    a2 = -1.0;
  return 1.0 - sqrtf(1.0 - (float)(a2 * a2));
}

void re::ElasticEase::~ElasticEase(re::ElasticEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::ElasticEase::clone(re::ElasticEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  float result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)v4 = &off_24ED204F8;
  *(_DWORD *)(v4 + 16) = *((_DWORD *)this + 4);
  result = *((float *)this + 5);
  *(float *)(v4 + 20) = result;
  return result;
}

uint64_t re::ElasticEase::typeInfo(re::ElasticEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ElasticEase", (uint64_t (*)(re::internal *))re::allocInfo_ElasticEase, (re::IntrospectionBase *(*)(void))re::initInfo_ElasticEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ElasticEase>, 0);
}

float re::ElasticEase::easeIn(re::ElasticEase *this, float a2)
{
  unsigned int v3;
  float v4;
  float v5;
  float v6;

  v3 = *((_DWORD *)this + 4);
  v4 = fmaxf(*((float *)this + 5), 0.0);
  v5 = a2;
  if (fabsf(v4) >= 0.00001)
  {
    v6 = 1.0 - expf(v4 * a2);
    v5 = v6 / (float)(1.0 - expf(v4));
  }
  return sinf((float)((float)((float)v3 + 0.25) * 6.2832) * a2) * v5;
}

void re::ExponentialEase::~ExponentialEase(re::ExponentialEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::ExponentialEase::clone(re::ExponentialEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  float result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)v4 = &off_24ED20550;
  result = *((float *)this + 4);
  *(float *)(v4 + 16) = result;
  return result;
}

uint64_t re::ExponentialEase::typeInfo(re::ExponentialEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ExponentialEase", (uint64_t (*)(re::internal *))re::allocInfo_ExponentialEase, (re::IntrospectionBase *(*)(void))re::initInfo_ExponentialEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ExponentialEase>, 0);
}

void re::ExponentialEase::easeIn(re::ExponentialEase *this, float a2)
{
  float v2;

  v2 = *((float *)this + 4);
  if (fabsf(v2) >= 0.00001)
  {
    expf(v2 * a2);
    expf(v2);
  }
}

void re::LogarithmicEase::~LogarithmicEase(re::LogarithmicEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::LogarithmicEase::clone(re::LogarithmicEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  float result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)v4 = &off_24ED205A8;
  result = *((float *)this + 4);
  *(float *)(v4 + 16) = result;
  return result;
}

uint64_t re::LogarithmicEase::typeInfo(re::LogarithmicEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LogarithmicEase", (uint64_t (*)(re::internal *))re::allocInfo_LogarithmicEase, (re::IntrospectionBase *(*)(void))re::initInfo_LogarithmicEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::LogarithmicEase>, 0);
}

float re::LogarithmicEase::easeIn(re::LogarithmicEase *this, float a2)
{
  float v2;
  float v3;
  float v4;

  v2 = 0.0;
  if (a2 >= 0.0)
  {
    v3 = *((float *)this + 4);
    v4 = logf((float)((float)(v3 + -1.0) * a2) + 1.0);
    return v4 / logf(v3);
  }
  return v2;
}

void re::PowerEase::~PowerEase(re::PowerEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::PowerEase::clone(re::PowerEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  float result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)v4 = &off_24ED20600;
  result = *((float *)this + 4);
  *(float *)(v4 + 16) = result;
  return result;
}

uint64_t re::PowerEase::typeInfo(re::PowerEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PowerEase", (uint64_t (*)(re::internal *))re::allocInfo_PowerEase, (re::IntrospectionBase *(*)(void))re::initInfo_PowerEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PowerEase>, 0);
}

float re::PowerEase::easeIn(re::PowerEase *this, float a2)
{
  return powf(a2, fmaxf(*((float *)this + 4), 0.0));
}

void re::SineEase::~SineEase(re::SineEase *this)
{
  JUMPOUT(0x2276933B8);
}

double re::SineEase::clone(re::SineEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  double result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 16, 8);
  result = *((double *)this + 1);
  *(double *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24ED20658;
  return result;
}

uint64_t re::SineEase::typeInfo(re::SineEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SineEase", (uint64_t (*)(re::internal *))re::allocInfo_SineEase, (re::IntrospectionBase *(*)(void))re::initInfo_SineEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SineEase>, 0);
}

float re::SineEase::easeIn(re::SineEase *this, float a2)
{
  return sinf((float)(1.0 - a2) * -1.5708) + 1.0;
}

void re::CubicBezierEase::~CubicBezierEase(re::CubicBezierEase *this)
{
  JUMPOUT(0x2276933B8);
}

float re::CubicBezierEase::evaluate(re::CubicBezierEase *this, float a2)
{
  return re::internal::evaluateCubicBezierEase<float>(*((_QWORD *)this + 2), *((_QWORD *)this + 3), a2, 0.00001);
}

uint64_t re::CubicBezierEase::clone(re::CubicBezierEase *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t result;

  v3 = re::globalAllocators(this);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 32, 8);
  *(_DWORD *)(result + 8) = 9;
  *(_QWORD *)result = &off_24ED206B0;
  *(_QWORD *)(result + 16) = *((_QWORD *)this + 2);
  *(_QWORD *)(result + 24) = *((_QWORD *)this + 3);
  return result;
}

uint64_t re::CubicBezierEase::typeInfo(re::CubicBezierEase *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CubicBezierEase", (uint64_t (*)(re::internal *))re::allocInfo_CubicBezierEase, (re::IntrospectionBase *(*)(void))re::initInfo_CubicBezierEase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CubicBezierEase>, 0);
}

re::RigDataValue *re::RigDataValue::RigDataValue(re::RigDataValue *this, const re::RigDataValue *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  re::StringID::StringID((re::RigDataValue *)((char *)this + 40), (const StringID *)((char *)a2 + 40));
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)this + 56, (uint64_t *)a2 + 7);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  v4 = *((_OWORD *)a2 + 7);
  v5 = *((_OWORD *)a2 + 8);
  v6 = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = v6;
  *((_OWORD *)this + 7) = v4;
  *((_OWORD *)this + 8) = v5;
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 29) = &str_110;
  re::DynamicArray<re::RigDataValue>::DynamicArray((uint64_t)this + 240, (uint64_t *)a2 + 30);
  re::StringID::copy((re::RigDataValue *)((char *)this + 224), (const char **)a2 + 28, *(re::Allocator **)this);
  v7 = *((_QWORD *)a2 + 23);
  if (v7)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 32))(*(_QWORD *)this, 360, 8);
    v9 = *(_QWORD *)(v7 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = v9;
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v8 + 24, v7 + 24);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v8 + 72, v7 + 72);
    re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::DynamicArray(v8 + 120, (uint64_t *)(v7 + 120));
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::DynamicArray(v8 + 160, (uint64_t *)(v7 + 160));
    re::DynamicArray<re::StringID>::DynamicArray(v8 + 200, (uint64_t *)(v7 + 200));
    re::DynamicArray<unsigned long>::DynamicArray(v8 + 240, (uint64_t *)(v7 + 240));
    re::DynamicArray<re::RigHierarchyJointTransform>::DynamicArray(v8 + 280, (uint64_t *)(v7 + 280));
    re::DynamicArray<unsigned long>::DynamicArray(v8 + 320, (uint64_t *)(v7 + 320));
    v13[0] = &off_24ED207E0;
    v13[1] = this;
    v14 = v13;
    v15 = 0;
    v16[3] = v16;
    v16[0] = &off_24ED207E0;
    v16[1] = this;
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 23, v8);
    std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)this + 24, (uint64_t)v16);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v15);
    v10 = v14;
    if (v14 == v13)
    {
      v11 = 4;
      v10 = v13;
      goto LABEL_6;
    }
    if (v14)
    {
      v11 = 5;
LABEL_6:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  return this;
}

uint64_t re::RigDataValue::init(re::RigDataValue *this, re::Allocator *a2, const re::RigEnvironment *a3, const re::RigDataTypeClass *a4, re::EvaluationTree *a5)
{
  re::EvaluationTree *v5;
  re::Allocator *v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  char *v16;
  uint64_t result;
  const re::RigDataTypeClass *v18;
  unint64_t v19;
  uint64_t v20;
  re::Allocator *v21;
  re::EvaluationTree *v22;
  re::RigEnvironment *v23;
  const char **v24;
  re::RigEnvironment *v25;
  const re::RigEnvironment *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t (**v52)();
  re::RigDataValue *v53;
  uint64_t (***v54)();
  uint64_t v55;

  v5 = a5;
  v8 = a2;
  v55 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = 0;
  v10 = (uint64_t *)((char *)a4 + 24);
  *((_BYTE *)this + 32) = *(_BYTE *)a4;
  re::StringID::operator=((unint64_t *)this + 5, (uint64_t *)a4 + 1);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::operator=((uint64_t)this + 56, v10);
  *((_BYTE *)this + 96) = 1;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = -1;
  v12 = *((unsigned __int8 *)this + 32);
  if ((v12 - 1) >= 9 && (v12 - 11) >= 3)
  {
    if (v12 != 10)
    {
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Cannot initialize a rig data value with an invalid rig data type.", "!\"Unreachable code\"", "init", 262);
      result = _os_crash();
      __break(1u);
      return result;
    }
    v13 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 360, 8);
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 208) = 0u;
    *(_OWORD *)(v13 + 224) = 0u;
    *(_OWORD *)(v13 + 240) = 0u;
    *(_OWORD *)(v13 + 256) = 0u;
    *(_OWORD *)(v13 + 272) = 0u;
    *(_OWORD *)(v13 + 288) = 0u;
    *(_OWORD *)(v13 + 320) = 0u;
    *(_OWORD *)(v13 + 336) = 0u;
    *(_DWORD *)(v13 + 60) = 0x7FFFFFFF;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_QWORD *)(v13 + 104) = 0x7FFFFFFF00000000;
    *(_QWORD *)(v13 + 120) = 0;
    *(_QWORD *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 136) = 0;
    *(_DWORD *)(v13 + 144) = 0;
    *(_QWORD *)(v13 + 352) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_DWORD *)(v13 + 184) = 0;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 208) = 0u;
    *(_DWORD *)(v13 + 224) = 0;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    *(_DWORD *)(v13 + 264) = 0;
    *(_OWORD *)(v13 + 288) = 0u;
    *(_OWORD *)(v13 + 304) = 0u;
    *(_DWORD *)(v13 + 304) = 0;
    *(_OWORD *)(v13 + 272) = 0u;
    *(_DWORD *)(v13 + 344) = 0;
    *(_OWORD *)(v13 + 312) = 0u;
    *(_OWORD *)(v13 + 328) = 0u;
    v52 = &off_24ED208F0;
    v53 = this;
    v54 = &v52;
    v29 = (char *)&v27 + 8;
    *((_QWORD *)&v27 + 1) = &off_24ED208F0;
    *(_QWORD *)&v28 = this;
    *(_QWORD *)&v27 = 0;
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 23, v13);
    std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)this + 24, (uint64_t)&v27 + 8);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v27);
    v14 = v54;
    if (v54 == &v52)
    {
      v15 = 4;
      v14 = &v52;
    }
    else
    {
      if (!v54)
      {
LABEL_9:
        re::RigHierarchy::init(*((_QWORD *)this + 23), (uint64_t)a3, (uint64_t)v8, v5, 0, 0);
        goto LABEL_10;
      }
      v15 = 5;
    }
    (*v14)[v15]();
    goto LABEL_9;
  }
LABEL_10:
  *((_QWORD *)this + 30) = v8;
  v16 = (char *)this + 240;
  result = (uint64_t)re::DynamicArray<re::RigDataValue>::setCapacity((_QWORD *)this + 30, *((_QWORD *)a4 + 5));
  ++*((_DWORD *)this + 66);
  if (*((_QWORD *)a4 + 5))
  {
    v18 = a4;
    v19 = 0;
    do
    {
      v20 = (uint64_t)v16;
      v21 = v8;
      v22 = v5;
      v23 = (re::RigEnvironment *)*((_QWORD *)this + 1);
      v24 = (const char **)re::RigDataTypeClass::attributeType(v18, v19);
      v25 = v23;
      v5 = v22;
      v8 = v21;
      v16 = (char *)v20;
      re::RigEnvironment::lookupRigDataType(v25, v24, &v52);
      v26 = (const re::RigEnvironment *)*((_QWORD *)this + 1);
      v27 = 0u;
      v28 = 0u;
      LOBYTE(v29) = 0;
      v30 = 0;
      v31 = &str_110;
      v36 = 0;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v35 = 0;
      v37 = 0;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = -1;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = &str_110;
      v51 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v47 = 0;
      re::RigDataValue::init((re::RigDataValue *)&v27, v8, v26, (const re::RigDataTypeClass *)&v53, v5);
      re::DynamicArray<re::RigDataValue>::add(v20, (const re::RigDataValue *)&v27);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)&v27);
      result = (uint64_t)re::Optional<re::RigDataTypeClass>::~Optional(&v52);
      ++v19;
    }
    while (v19 < *((_QWORD *)v18 + 5));
  }
  return result;
}

_QWORD *re::RigDataValue::operator=(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  re::RigDataValue::deinit((re::RigDataValue *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  *((_BYTE *)a1 + 32) = *(_BYTE *)(a2 + 32);
  re::StringID::operator=(a1 + 5, (uint64_t *)(a2 + 40));
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::operator=((uint64_t)(a1 + 7), (uint64_t *)(a2 + 56));
  *((_BYTE *)a1 + 96) = *(_BYTE *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)a1 + 10) = v6;
  *((_OWORD *)a1 + 7) = v4;
  *((_OWORD *)a1 + 8) = v5;
  a1[22] = *(_QWORD *)(a2 + 176);
  re::DynamicArray<re::RigDataValue>::operator=(a1 + 30, a2 + 240);
  re::StringID::copy((re::StringID *)(a1 + 28), (const char **)(a2 + 224), (re::Allocator *)*a1);
  v7 = *(_QWORD *)(a2 + 184);
  if (v7)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 360, 8);
    v9 = *(_QWORD *)(v7 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = v9;
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v8 + 24, v7 + 24);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v8 + 72, v7 + 72);
    re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::DynamicArray(v8 + 120, (uint64_t *)(v7 + 120));
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::DynamicArray(v8 + 160, v7 + 160);
    re::DynamicArray<re::StringID>::DynamicArray(v8 + 200, (uint64_t *)(v7 + 200));
    re::DynamicArray<unsigned long>::DynamicArray(v8 + 240, (uint64_t *)(v7 + 240));
    re::DynamicArray<re::RigHierarchyJointTransform>::DynamicArray(v8 + 280, (uint64_t *)(v7 + 280));
    re::DynamicArray<unsigned long>::DynamicArray(v8 + 320, (uint64_t *)(v7 + 320));
    v13[0] = &off_24ED20870;
    v13[1] = a1;
    v14 = v13;
    v15 = 0;
    v16[3] = v16;
    v16[0] = &off_24ED20870;
    v16[1] = a1;
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](a1 + 23, v8);
    std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](a1 + 24, (uint64_t)v16);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v15);
    v10 = v14;
    if (v14 == v13)
    {
      v11 = 4;
      v10 = v13;
      goto LABEL_6;
    }
    if (v14)
    {
      v11 = 5;
LABEL_6:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  return a1;
}

double re::RigDataValue::deinit(re::RigDataValue *this)
{
  double result;

  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 23, 0);
  if ((*((_BYTE *)this + 224) & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 29));
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = &str_110;
  re::DynamicArray<re::RigDataValue>::deinit((uint64_t)this + 240);
  result = 0.0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 22) = -1;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 96) = 0;
  *(_QWORD *)this = 0;
  return result;
}

void re::RigDataValue::resolveRuntimeInputValues(re::RigDataValue *this, re::EvaluationContextManager *a2)
{
  uint64_t v4;
  re::RigDataValue *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    v5 = (re::RigDataValue *)*((_QWORD *)this + 34);
    v6 = 288 * v4;
    do
    {
      re::RigDataValue::resolveRuntimeInputValues(v5, a2);
      v5 = (re::RigDataValue *)((char *)v5 + 288);
      v6 -= 288;
    }
    while (v6);
  }
  else if (*((_BYTE *)this + 96) == 2)
  {
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        v7 = *((_QWORD *)this + 22);
        LODWORD(v20) = 0;
        *(_QWORD *)&v16 = v7;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 1, &v16);
        re::DynamicArray<int>::add((_QWORD *)a2 + 46, &v20);
        v8 = *((_QWORD *)a2 + 3);
        break;
      case 2:
        v12 = *((_QWORD *)this + 22);
        LODWORD(v20) = 0;
        *(_QWORD *)&v16 = v12;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 6, &v16);
        re::DynamicArray<int>::add((_QWORD *)a2 + 51, &v20);
        v8 = *((_QWORD *)a2 + 8);
        break;
      case 3:
        v9 = *((_QWORD *)this + 22);
        LODWORD(v20) = 0;
        *(_QWORD *)&v16 = v9;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 11, &v16);
        re::DynamicArray<float>::add((re::EvaluationContextManager *)((char *)a2 + 448), (float *)&v20);
        v8 = *((_QWORD *)a2 + 13);
        break;
      case 4:
        v10 = *((_QWORD *)this + 22);
        v17 = 0u;
        v18 = 0u;
        v16 = 0u;
        v20 = v10;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 16, &v20);
        re::DynamicArray<re::Matrix3x3<float>>::add((re::EvaluationContextManager *)((char *)a2 + 488), (uint64_t)&v16);
        v8 = *((_QWORD *)a2 + 18);
        break;
      case 5:
        v11 = *((_QWORD *)this + 22);
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v20 = v11;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 21, &v20);
        re::DynamicArray<re::Matrix4x4<float>>::add((re::EvaluationContextManager *)((char *)a2 + 528), (uint64_t)&v16);
        v8 = *((_QWORD *)a2 + 23);
        break;
      case 6:
        v13 = *((_QWORD *)this + 22);
        v16 = xmmword_2260E5D70;
        v20 = v13;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 26, &v20);
        re::DynamicArray<re::Vector3<float>>::add((re::EvaluationContextManager *)((char *)a2 + 568), (__n128 *)&v16);
        v8 = *((_QWORD *)a2 + 28);
        break;
      case 7:
        v14 = *((_QWORD *)this + 22);
        v20 = 0;
        *(_QWORD *)&v16 = v14;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 31, &v16);
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 76, &v20);
        v8 = *((_QWORD *)a2 + 33);
        break;
      case 8:
        v15 = *((_QWORD *)this + 22);
        v16 = 0u;
        v20 = v15;
        re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 36, &v20);
        re::DynamicArray<re::Vector3<float>>::add((re::EvaluationContextManager *)((char *)a2 + 648), (__n128 *)&v16);
        v8 = *((_QWORD *)a2 + 38);
        break;
      default:
        re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot resolve invalid compile time type: %u", "!\"Unreachable code\"", "resolveRuntimeInputValues", 377, *((unsigned __int8 *)this + 32));
        _os_crash();
        __break(1u);
        JUMPOUT(0x22507C150);
    }
    *((_QWORD *)this + 22) = v8 - 1;
    *((_BYTE *)this + 96) = 3;
  }
}

_QWORD *re::RigDataValue::resolveRuntimeOutputValues(_QWORD *this, re::EvaluationContextManager *a2)
{
  _QWORD *v3;
  uint64_t v4;
  re::RigDataValue *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = this;
  v4 = this[32];
  if (v4)
  {
    v5 = (re::RigDataValue *)this[34];
    v6 = 288 * v4;
    do
    {
      this = (_QWORD *)re::RigDataValue::resolveRuntimeOutputValues(v5, a2);
      v5 = (re::RigDataValue *)((char *)v5 + 288);
      v6 -= 288;
    }
    while (v6);
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 96);
    if (v7 == 2)
      v8 = this[22];
    else
      v8 = -1;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 181, &v10);
        v9 = *((_QWORD *)a2 + 183);
        goto LABEL_17;
      case 2:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 186, &v10);
        v9 = *((_QWORD *)a2 + 188);
        goto LABEL_17;
      case 3:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 191, &v10);
        v9 = *((_QWORD *)a2 + 193);
        goto LABEL_17;
      case 4:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 196, &v10);
        v9 = *((_QWORD *)a2 + 198);
        goto LABEL_17;
      case 5:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 201, &v10);
        v9 = *((_QWORD *)a2 + 203);
        goto LABEL_17;
      case 6:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 206, &v10);
        v9 = *((_QWORD *)a2 + 208);
        goto LABEL_17;
      case 7:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 211, &v10);
        v9 = *((_QWORD *)a2 + 213);
        goto LABEL_17;
      case 8:
        v10 = v8;
        this = re::DynamicArray<unsigned long>::add((_QWORD *)a2 + 216, &v10);
        v9 = *((_QWORD *)a2 + 218);
LABEL_17:
        v3[22] = v9 - 1;
        *((_BYTE *)v3 + 96) = 4;
        break;
      default:
        if (v7 != 1)
        {
          re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot resolve invalid compile time type: %u", "!\"Unreachable code\"", "resolveRuntimeOutputValues", 443, *((unsigned __int8 *)this + 32));
          _os_crash();
          __break(1u);
          JUMPOUT(0x22507C324);
        }
        return this;
    }
  }
  return this;
}

uint64_t re::RigDataValue::setRuntimeContext(uint64_t result, re::EvaluationContext *a2)
{
  uint64_t v3;
  re::RigDataValue *v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 96) != 1)
    *(_QWORD *)(result + 24) = a2;
  v3 = *(_QWORD *)(result + 256);
  if (v3)
  {
    v4 = *(re::RigDataValue **)(result + 272);
    v5 = 288 * v3;
    do
    {
      result = re::RigDataValue::setRuntimeContext(v4, a2);
      v4 = (re::RigDataValue *)((char *)v4 + 288);
      v5 -= 288;
    }
    while (v5);
  }
  return result;
}

uint64_t re::RigDataValue::attributeValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  _BYTE *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  re::RigDataTypeClass *v15;
  const void *v16;
  uint64_t result;
  re::DynamicString *v18;
  size_t v19;
  _BYTE *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[38];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)a2 + v6;
  v9 = memchr(*(void **)a2, 46, v6);
  if (v9)
    v10 = v9;
  else
    v10 = (_BYTE *)v8;
  v11 = *(_QWORD *)(a1 + 256);
  if (!v11)
    goto LABEL_10;
  v12 = 0;
  v13 = 0;
  v14 = v10 - v7;
  v26 = a1;
  v15 = (re::RigDataTypeClass *)(a1 + 32);
  do
  {
    v16 = *(const void **)(re::RigDataTypeClass::attributeName(v15, v13) + 8);
    if (v14 == strlen((const char *)v16))
    {
      result = memcmp(v7, v16, v14);
      if (!(_DWORD)result)
      {
        if (v14 == v6)
        {
          v23 = *(_QWORD *)(v26 + 256);
          if (v23 > v13)
          {
            v24 = *(_QWORD *)(v26 + 272) - v12;
            *(_BYTE *)a3 = 1;
            *(_QWORD *)(a3 + 8) = v24;
            return result;
          }
          v27[0] = 0;
          v33 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v28 = 136315906;
          *(_QWORD *)&v28[4] = "operator[]";
          *(_WORD *)&v28[12] = 1024;
          *(_DWORD *)&v28[14] = 797;
          *(_WORD *)&v28[18] = 2048;
          *(_QWORD *)&v28[20] = v13;
          *(_WORD *)&v28[28] = 2048;
          *(_QWORD *)&v28[30] = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        else
        {
          v25 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (*(_QWORD *)a2 + v14 + 1);
          v27[0] = *(_QWORD *)a2 + v14 + 1;
          v27[1] = v25;
          v23 = *(_QWORD *)(v26 + 256);
          if (v23 > v13)
            return re::RigDataValue::attributeValue(*(_QWORD *)(v26 + 272) - v12, v27);
        }
        v27[2] = 0;
        v33 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v28 = 136315906;
        *(_QWORD *)&v28[4] = "operator[]";
        *(_WORD *)&v28[12] = 1024;
        *(_DWORD *)&v28[14] = 797;
        *(_WORD *)&v28[18] = 2048;
        *(_QWORD *)&v28[20] = v13;
        *(_WORD *)&v28[28] = 2048;
        *(_QWORD *)&v28[30] = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    ++v13;
    v12 -= 288;
  }
  while (v11 != v13);
  v6 = *(_QWORD *)(a2 + 8);
  a1 = v26;
LABEL_10:
  v18 = *(re::DynamicString **)a1;
  *(_QWORD *)&v28[16] = 0;
  *(_QWORD *)&v28[24] = 0;
  if (v6)
    v19 = v6 + 1;
  else
    v19 = 0;
  *(_QWORD *)v28 = v18;
  *(_QWORD *)&v28[8] = 0;
  re::DynamicString::setCapacity(v28, v19);
  re::DynamicString::operator=((re::DynamicString *)v28, a2);
  if ((v28[8] & 1) != 0)
    v20 = *(_BYTE **)&v28[16];
  else
    v20 = &v28[9];
  re::DynamicString::format(v18, (re::Allocator *)"Attribute name could not be resolved: %s", (re::DynamicString *)&v29, v20);
  v21 = v29;
  v22 = v30;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 5003;
  *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a3 + 24) = v21;
  *(_OWORD *)(a3 + 40) = v22;
  result = *(_QWORD *)v28;
  if (*(_QWORD *)v28)
  {
    if ((v28[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v28 + 40))();
  }
  return result;
}

{
  size_t v6;
  _BYTE *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  re::RigDataTypeClass *v15;
  const void *v16;
  uint64_t result;
  re::DynamicString *v18;
  size_t v19;
  _BYTE *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[38];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)a2 + v6;
  v9 = memchr(*(void **)a2, 46, v6);
  if (v9)
    v10 = v9;
  else
    v10 = (_BYTE *)v8;
  v11 = *(_QWORD *)(a1 + 256);
  if (!v11)
    goto LABEL_10;
  v12 = 0;
  v13 = 0;
  v14 = v10 - v7;
  v26 = a1;
  v15 = (re::RigDataTypeClass *)(a1 + 32);
  do
  {
    v16 = *(const void **)(re::RigDataTypeClass::attributeName(v15, v13) + 8);
    if (v14 == strlen((const char *)v16))
    {
      result = memcmp(v7, v16, v14);
      if (!(_DWORD)result)
      {
        if (v14 == v6)
        {
          v23 = *(_QWORD *)(v26 + 256);
          if (v23 > v13)
          {
            v24 = *(_QWORD *)(v26 + 272) - v12;
            *(_BYTE *)a3 = 1;
            *(_QWORD *)(a3 + 8) = v24;
            return result;
          }
          v27[0] = 0;
          v33 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v28 = 136315906;
          *(_QWORD *)&v28[4] = "operator[]";
          *(_WORD *)&v28[12] = 1024;
          *(_DWORD *)&v28[14] = 789;
          *(_WORD *)&v28[18] = 2048;
          *(_QWORD *)&v28[20] = v13;
          *(_WORD *)&v28[28] = 2048;
          *(_QWORD *)&v28[30] = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        else
        {
          v25 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (*(_QWORD *)a2 + v14 + 1);
          v27[0] = *(_QWORD *)a2 + v14 + 1;
          v27[1] = v25;
          v23 = *(_QWORD *)(v26 + 256);
          if (v23 > v13)
            return re::RigDataValue::attributeValue(*(_QWORD *)(v26 + 272) - v12, v27);
        }
        v27[2] = 0;
        v33 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v28 = 136315906;
        *(_QWORD *)&v28[4] = "operator[]";
        *(_WORD *)&v28[12] = 1024;
        *(_DWORD *)&v28[14] = 789;
        *(_WORD *)&v28[18] = 2048;
        *(_QWORD *)&v28[20] = v13;
        *(_WORD *)&v28[28] = 2048;
        *(_QWORD *)&v28[30] = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    ++v13;
    v12 -= 288;
  }
  while (v11 != v13);
  v6 = *(_QWORD *)(a2 + 8);
  a1 = v26;
LABEL_10:
  v18 = *(re::DynamicString **)a1;
  *(_QWORD *)&v28[16] = 0;
  *(_QWORD *)&v28[24] = 0;
  if (v6)
    v19 = v6 + 1;
  else
    v19 = 0;
  *(_QWORD *)v28 = v18;
  *(_QWORD *)&v28[8] = 0;
  re::DynamicString::setCapacity(v28, v19);
  re::DynamicString::operator=((re::DynamicString *)v28, a2);
  if ((v28[8] & 1) != 0)
    v20 = *(_BYTE **)&v28[16];
  else
    v20 = &v28[9];
  re::DynamicString::format(v18, (re::Allocator *)"Attribute name could not be resolved: %s", (re::DynamicString *)&v29, v20);
  v21 = v29;
  v22 = v30;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 5003;
  *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a3 + 24) = v21;
  *(_OWORD *)(a3 + 40) = v22;
  result = *(_QWORD *)v28;
  if (*(_QWORD *)v28)
  {
    if ((v28[8] & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)v28 + 40))();
  }
  return result;
}

unint64_t re::RigDataTypeClass::attributeName(re::RigDataTypeClass *this, unint64_t a2)
{
  if (*((_QWORD *)this + 5) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 7) + 32 * a2;
}

__n128 re::RigDataValue::setBuildTimeValueWithString@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  __int128 v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  re::RigDataValue::setRigDataValue(a1, a2, 1, (uint64_t)v7);
  if (v7[0])
  {
    *(_BYTE *)a3 = 1;
  }
  else
  {
    *(_OWORD *)(a3 + 8) = v8;
    result = v9;
    v5 = v10;
    v6 = v11;
    *(_BYTE *)a3 = 0;
    *(__n128 *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 40) = v5;
    *(_QWORD *)(a3 + 48) = v6;
  }
  return result;
}

void re::RigDataValue::setRigDataValue(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  re::RigDataTypeClass *v5;
  char *v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  re::Allocator *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int i;
  int v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  re::Allocator *v55;
  _OWORD *v56;
  uint64_t j;
  uint64_t v58;
  char *v59;
  size_t v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  char *v77;
  size_t v78;
  uint64_t v79;
  re::Allocator *v80;
  _OWORD *v81;
  uint64_t k;
  uint64_t v83;
  char *v84;
  size_t v85;
  size_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  size_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  size_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  char *v103;
  size_t v104;
  uint64_t v105;
  re::Allocator *v106;
  uint64_t v107;
  char *v108;
  size_t v109;
  size_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  size_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  size_t v119;
  int v120;
  uint64_t v121;
  char *v122;
  char v123;
  char v124;
  size_t v125;
  char *v126;
  size_t v127;
  size_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  size_t v133;
  _BOOL4 v134;
  BOOL v135;
  char *v136;
  size_t v137;
  float v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  size_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  size_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  size_t v153;
  size_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  size_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  size_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  size_t v174;
  const char *v175;
  re::DynamicString *v177;
  char *v178;
  _BYTE *v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  const char *v190;
  size_t v191;
  int v192;
  const char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  size_t v203;
  unint64_t v204;
  const char *v205;
  const char *v206;
  size_t v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  size_t v214;
  size_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  size_t v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  int v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t v231;
  int v232;
  size_t v233;
  BOOL v234;
  int v235;
  re::Allocator *v236;
  size_t v237;
  _BYTE *v238;
  re::Allocator *v239;
  _BYTE *v240;
  size_t v241;
  char *v242;
  re::Allocator *v243;
  size_t v244;
  _BYTE *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  re::Allocator *v249;
  _BYTE *v250;
  re::Allocator *v251;
  _BYTE *v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  re::RigDataValue *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _OWORD *v260;
  char *v261;
  const char *v262;
  int v263;
  int v264;
  int v265;
  int v268;
  _OWORD v269[2];
  __int128 v270;
  __int128 v271;
  char *v272;
  size_t v273;
  re::Allocator *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  _BYTE v279[72];
  uint64_t v280;
  int v281;
  uint64_t v282;
  char v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  _OWORD v298[19];
  uint64_t v299;

  v299 = *MEMORY[0x24BDAC8D0];
  v5 = (re::RigDataTypeClass *)(a1 + 4);
  switch(*((_BYTE *)a1 + 32))
  {
    case 1:
      v17 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v19 = v17;
      v20 = v18;
      v21 = a3;
      v22 = &v17[v18];
      v23 = (uint64_t)&v17[v18 + 1];
      if (v17[v18] != 45)
        v23 = (uint64_t)&v17[v18];
      v24 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - v23;
      *(_QWORD *)&v298[0] = v23;
      *((_QWORD *)&v298[0] + 1) = v24;
      v25 = re::RigDataParser::parseNumeric((uint64_t *)v298);
      v27 = v25;
      v28 = v26;
      if (v21)
      {
        v29 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
        *(_QWORD *)&v298[0] = &v25[v26];
        *((_QWORD *)&v298[0] + 1) = v29 - &v25[v26];
        v30 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
        if (&v30[v31] != v29)
          goto LABEL_101;
      }
      v32 = &v27[v28];
      v33 = *v22;
      v34 = v33 == 45;
      if (&v27[v28] - v22 == v34)
      {
        v35 = 0;
      }
      else
      {
        v35 = 0;
        v230 = (unsigned __int8 *)&v22[v34];
        v231 = &v27[v28] - v19 - v20 - v34;
        do
        {
          v232 = (char)*v230++;
          v35 = v232 + 10 * v35 - 48;
          --v231;
        }
        while (v231);
      }
      if (v33 == 45)
        i = -v35;
      else
        i = v35;
      goto LABEL_160;
    case 2:
      v36 = re::RigDataParser::parseNumeric((uint64_t *)a2);
      v38 = v36;
      v39 = v37;
      if (a3)
      {
        v40 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
        *(_QWORD *)&v298[0] = &v36[v37];
        *((_QWORD *)&v298[0] + 1) = v40 - &v36[v37];
        v41 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
        if (&v41[v31] != v40)
          goto LABEL_101;
      }
      v32 = &v38[v39];
      for (i = 0; v39; --v39)
      {
        v43 = *v38++;
        i = v43 + 10 * i - 48;
      }
LABEL_160:
      *((_DWORD *)a1 + 28) = i;
      goto LABEL_161;
    case 3:
      v44 = re::RigDataParser::parseFloat((uint64_t *)a2);
      v46 = v44;
      v47 = v45;
      *(_QWORD *)&v298[0] = v44;
      *((_QWORD *)&v298[0] + 1) = v45;
      if (a3)
      {
        v48 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
        *(_QWORD *)v279 = &v44[v45];
        *(_QWORD *)&v279[8] = v48 - &v44[v45];
        v49 = re::RigDataParser::parseWhitespace((uint64_t *)v279);
        if (&v49[v31] != v48)
          goto LABEL_101;
      }
      *((float *)a1 + 28) = re::RigDataParser::stringToFloat((unsigned __int8 **)v298);
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 8) = &v46[v47];
      return;
    case 4:
      v50 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v52 = &v50[v51];
      v53 = (unint64_t)&v50[v51] < *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      if (strncmp(&v50[v51], "[", v53) || asc_22622DA93[v53])
        goto LABEL_101;
      v263 = a3;
      v54 = 0;
      v55 = (re::Allocator *)&v52[v53];
      v270 = 0u;
      memset(v269, 0, sizeof(v269));
      v56 = v269;
      do
      {
        for (j = 0; j != 12; j += 4)
        {
          v58 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v55;
          v274 = v55;
          v275 = v58;
          v59 = re::RigDataParser::parseFloat((uint64_t *)&v274);
          v61 = v60;
          *(_QWORD *)&v298[0] = v59;
          *((_QWORD *)&v298[0] + 1) = v60;
          v62 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
          v274 = (re::Allocator *)&v59[v60];
          v275 = v62 - (_QWORD)&v59[v60];
          v63 = re::RigDataParser::parseWhitespace((uint64_t *)&v274);
          v65 = &v63[v64];
          v66 = (unint64_t)&v63[v64] < v62;
          if (strncmp(&v63[v64], ",", v66) || asc_22622D9BF[v66])
          {
            if (v54 != 2 || j != 8)
              goto LABEL_101;
            v66 = v61;
            v65 = v59;
          }
          v55 = (re::Allocator *)&v65[v66];
          *(float *)((char *)v56 + j) = re::RigDataParser::stringToFloat((unsigned __int8 **)v298);
        }
        ++v54;
        ++v56;
      }
      while (v54 != 3);
      v67 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v298[0] = &v65[v66];
      *((_QWORD *)&v298[0] + 1) = v67 - (_QWORD)v55;
      v68 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
      v70 = &v68[v69];
      v71 = (unint64_t)&v68[v69] < v67;
      if (strncmp(&v68[v69], "]", v71))
        goto LABEL_101;
      if (asc_22622DA95[v71])
        goto LABEL_101;
      if (v263)
      {
        v72 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
        *(_QWORD *)&v298[0] = &v70[v71];
        *((_QWORD *)&v298[0] + 1) = v72 - &v70[v71];
        v73 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
        if (&v73[v31] != v72)
          goto LABEL_101;
      }
      v32 = &v70[v71];
      *(_OWORD *)((char *)v298 + 8) = v269[0];
      *(_OWORD *)((char *)&v298[1] + 8) = v269[1];
      *(_OWORD *)((char *)&v298[2] + 8) = v270;
      *(_OWORD *)v279 = v298[0];
      *(_OWORD *)&v279[16] = v298[1];
      *(_OWORD *)&v279[32] = v298[2];
      *(_QWORD *)&v279[48] = *((_QWORD *)&v270 + 1);
      v74 = *(_OWORD *)&v279[24];
      *((_OWORD *)a1 + 7) = *(_OWORD *)&v279[8];
      *((_OWORD *)a1 + 8) = v74;
      *((_OWORD *)a1 + 9) = *(_OWORD *)&v279[40];
      goto LABEL_161;
    case 5:
      v75 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v77 = &v75[v76];
      v78 = (unint64_t)&v75[v76] < *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      if (strncmp(&v75[v76], "[", v78) || asc_22622DA93[v78])
        goto LABEL_101;
      v264 = a3;
      v79 = 0;
      v80 = (re::Allocator *)&v77[v78];
      v270 = 0u;
      v271 = 0u;
      memset(v269, 0, sizeof(v269));
      v81 = v269;
      do
      {
        for (k = 0; k != 16; k += 4)
        {
          v83 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v80;
          v274 = v80;
          v275 = v83;
          v84 = re::RigDataParser::parseFloat((uint64_t *)&v274);
          v86 = v85;
          *(_QWORD *)&v298[0] = v84;
          *((_QWORD *)&v298[0] + 1) = v85;
          v87 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
          v274 = (re::Allocator *)&v84[v85];
          v275 = v87 - (_QWORD)&v84[v85];
          v88 = re::RigDataParser::parseWhitespace((uint64_t *)&v274);
          v90 = &v88[v89];
          v91 = (unint64_t)&v88[v89] < v87;
          if (strncmp(&v88[v89], ",", v91) || asc_22622D9BF[v91])
          {
            if (v79 != 3 || k != 12)
              goto LABEL_101;
            v91 = v86;
            v90 = v84;
          }
          v80 = (re::Allocator *)&v90[v91];
          *(float *)((char *)v81 + k) = re::RigDataParser::stringToFloat((unsigned __int8 **)v298);
        }
        ++v79;
        ++v81;
      }
      while (v79 != 4);
      v92 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v298[0] = &v90[v91];
      *((_QWORD *)&v298[0] + 1) = v92 - (_QWORD)v80;
      v93 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
      v95 = &v93[v94];
      v96 = (unint64_t)&v93[v94] < v92;
      if (strncmp(&v93[v94], "]", v96))
        goto LABEL_101;
      if (asc_22622DA95[v96])
        goto LABEL_101;
      if (v264)
      {
        v97 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
        *(_QWORD *)&v298[0] = &v95[v96];
        *((_QWORD *)&v298[0] + 1) = v97 - &v95[v96];
        v98 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
        if (&v98[v31] != v97)
          goto LABEL_101;
      }
      v32 = &v95[v96];
      *(_OWORD *)((char *)v298 + 8) = v269[0];
      *(_OWORD *)((char *)&v298[1] + 8) = v269[1];
      *(_OWORD *)((char *)&v298[2] + 8) = v270;
      *(_OWORD *)((char *)&v298[3] + 8) = v271;
      *(_OWORD *)&v279[32] = v298[2];
      *(_OWORD *)&v279[48] = v298[3];
      *(_QWORD *)&v279[64] = *((_QWORD *)&v271 + 1);
      *(_OWORD *)v279 = v298[0];
      *(_OWORD *)&v279[16] = v298[1];
      v99 = *(_OWORD *)&v279[24];
      *((_OWORD *)a1 + 7) = *(_OWORD *)&v279[8];
      *((_OWORD *)a1 + 8) = v99;
      v100 = *(_OWORD *)&v279[56];
      *((_OWORD *)a1 + 9) = *(_OWORD *)&v279[40];
      *((_OWORD *)a1 + 10) = v100;
      goto LABEL_161;
    case 6:
      v101 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v103 = &v101[v102];
      v104 = (unint64_t)&v101[v102] < *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      if (strncmp(&v101[v102], "[", v104) || asc_22622DA93[v104])
        goto LABEL_101;
      v265 = a3;
      v105 = 0;
      v106 = (re::Allocator *)&v103[v104];
      v269[0] = xmmword_2260E5D70;
      do
      {
        v107 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v106;
        v274 = v106;
        v275 = v107;
        v108 = re::RigDataParser::parseFloat((uint64_t *)&v274);
        v110 = v109;
        *(_QWORD *)&v298[0] = v108;
        *((_QWORD *)&v298[0] + 1) = v109;
        v111 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
        v274 = (re::Allocator *)&v108[v109];
        v275 = v111 - (_QWORD)&v108[v109];
        v112 = re::RigDataParser::parseWhitespace((uint64_t *)&v274);
        v114 = &v112[v113];
        v115 = (unint64_t)&v112[v113] < v111;
        if (strncmp(&v112[v113], ",", v115) || asc_22622D9BF[v115])
        {
          if (v105 != 12)
            goto LABEL_101;
          v115 = v110;
          v114 = v108;
        }
        v106 = (re::Allocator *)&v114[v115];
        *(float *)((char *)v269 + v105) = re::RigDataParser::stringToFloat((unsigned __int8 **)v298);
        v105 += 4;
      }
      while (v105 != 16);
      goto LABEL_90;
    case 7:
      v116 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v118 = &v116[v117];
      v119 = (unint64_t)&v116[v117] < *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      if (strncmp(&v116[v117], "[", v119) || asc_22622DA93[v119])
        goto LABEL_101;
      v120 = 0;
      v121 = 0;
      v122 = &v118[v119];
      *(_QWORD *)&v269[0] = 0;
      v123 = 1;
      while (1)
      {
        v124 = v123;
        v125 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v122;
        *(_QWORD *)v279 = v122;
        *(_QWORD *)&v279[8] = v125;
        v126 = re::RigDataParser::parseFloat((uint64_t *)v279);
        v128 = v127;
        *(_QWORD *)&v298[0] = v126;
        *((_QWORD *)&v298[0] + 1) = v127;
        v129 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
        *(_QWORD *)v279 = &v126[v127];
        *(_QWORD *)&v279[8] = v129 - (_QWORD)&v126[v127];
        v130 = re::RigDataParser::parseWhitespace((uint64_t *)v279);
        v132 = &v130[v131];
        v133 = (unint64_t)&v130[v131] < v129;
        v134 = !strncmp(&v130[v131], ",", v133) && asc_22622D9BF[v133] == 0;
        if (((v120 | v134) & 1) == 0)
          goto LABEL_101;
        v135 = !v134;
        if (v134)
          v136 = v132;
        else
          v136 = v126;
        if (v135)
          v137 = v128;
        else
          v137 = v133;
        v122 = &v136[v137];
        v138 = re::RigDataParser::stringToFloat((unsigned __int8 **)v298);
        v123 = 0;
        *((float *)v269 + v121) = v138;
        v120 = 1;
        v121 = 1;
        if ((v124 & 1) == 0)
        {
          v139 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
          *(_QWORD *)&v298[0] = v122;
          *((_QWORD *)&v298[0] + 1) = v139 - (_QWORD)v122;
          v140 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
          v142 = &v140[v141];
          v143 = (unint64_t)&v140[v141] < v139;
          if (!strncmp(&v140[v141], "]", v143) && !asc_22622DA95[v143])
          {
            if (!a3
              || (v144 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)),
                  *(_QWORD *)&v298[0] = &v142[v143],
                  *((_QWORD *)&v298[0] + 1) = v144 - &v142[v143],
                  v145 = re::RigDataParser::parseWhitespace((uint64_t *)v298),
                  &v145[v31] == v144))
            {
              v32 = &v142[v143];
              a1[14] = *(_QWORD *)&v269[0];
              goto LABEL_161;
            }
          }
          goto LABEL_101;
        }
      }
    case 8:
      v146 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v148 = &v146[v147];
      v149 = (unint64_t)&v146[v147] < *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      if (strncmp(&v146[v147], "[", v149) || asc_22622DA93[v149])
        goto LABEL_101;
      v265 = a3;
      v150 = 0;
      v106 = (re::Allocator *)&v148[v149];
      v269[0] = 0u;
      do
      {
        v151 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v106;
        v274 = v106;
        v275 = v151;
        v152 = re::RigDataParser::parseFloat((uint64_t *)&v274);
        v154 = v153;
        *(_QWORD *)&v298[0] = v152;
        *((_QWORD *)&v298[0] + 1) = v153;
        v155 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
        v274 = (re::Allocator *)&v152[v153];
        v275 = v155 - (_QWORD)&v152[v153];
        v156 = re::RigDataParser::parseWhitespace((uint64_t *)&v274);
        v158 = &v156[v157];
        v159 = (unint64_t)&v156[v157] < v155;
        if (strncmp(&v156[v157], ",", v159) || asc_22622D9BF[v159])
        {
          if (v150 != 8)
            goto LABEL_101;
          v159 = v154;
          v158 = v152;
        }
        v106 = (re::Allocator *)&v158[v159];
        *(float *)((char *)v269 + v150) = re::RigDataParser::stringToFloat((unsigned __int8 **)v298);
        v150 += 4;
      }
      while (v150 != 12);
LABEL_90:
      v160 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v298[0] = v106;
      *((_QWORD *)&v298[0] + 1) = v160 - (_QWORD)v106;
      v161 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
      v163 = &v161[v162];
      v164 = (unint64_t)&v161[v162] < v160;
      if (strncmp(&v161[v162], "]", v164))
        goto LABEL_101;
      if (asc_22622DA95[v164])
        goto LABEL_101;
      if (v265)
      {
        v165 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
        *(_QWORD *)&v298[0] = &v163[v164];
        *((_QWORD *)&v298[0] + 1) = v165 - &v163[v164];
        v166 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
        if (&v166[v31] != v165)
          goto LABEL_101;
      }
      v32 = &v163[v164];
      *(_OWORD *)((char *)v298 + 8) = v269[0];
      *(_OWORD *)v279 = v298[0];
      *(_QWORD *)&v279[16] = *((_QWORD *)&v269[0] + 1);
      *((_OWORD *)a1 + 7) = *(_OWORD *)&v279[8];
LABEL_161:
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v32;
      return;
    case 9:
      v167 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v169 = v168;
      v261 = v167;
      v170 = &v167[v168];
      v171 = *(_QWORD *)a2;
      v172 = *(_QWORD *)(a2 + 8);
      v173 = (const char *)(*(_QWORD *)a2 + v172);
      v174 = &v167[v168] < v173;
      if (strncmp(&v167[v168], "\"", v174))
        goto LABEL_101;
      v175 = &v170[v174];
      if (asc_22622DA14[v174] || v173 == v175)
        goto LABEL_101;
      v233 = 0;
      v234 = 0;
      while (2)
      {
        if (v234)
        {
          v234 = 0;
        }
        else
        {
          v235 = v175[v233];
          if (v235 == 34)
          {
            if (a3)
            {
              v241 = ~v233 + v172 + v171 - v169 - (_QWORD)v261 - v174;
              *(_QWORD *)&v298[0] = &v175[v233 + 1];
              *((_QWORD *)&v298[0] + 1) = v241;
              v242 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
              if (&v242[v31] != &v175[v233 + 1 + v241])
              {
LABEL_101:
                v177 = (re::DynamicString *)*a1;
                v178 = *re::RigDataTypeDescriptions::rigDataTypeDescription(*((unsigned __int8 *)a1 + 32), v31);
                re::DynamicString::DynamicString((re::DynamicString *)v279, *(const char **)a2, *(_QWORD *)(a2 + 8), (re::Allocator *)*a1);
                if ((v279[8] & 1) != 0)
                  v179 = *(_BYTE **)&v279[16];
                else
                  v179 = &v279[9];
                re::DynamicString::format(v177, (re::Allocator *)"Could not parse valid %s value: %s", (re::DynamicString *)v298, v178, v179);
                goto LABEL_105;
              }
            }
            if ((a1[28] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[29]);
            a1[28] = 0;
            a1[29] = &str_110;
            re::StringID::init((re::StringID *)(a1 + 28), (re::Allocator *)*a1, v175, v233);
            *(_BYTE *)a4 = 1;
            *(_QWORD *)(a4 + 8) = &v175[v233 + 1];
            return;
          }
          v234 = v235 == 92;
        }
        if (v172 + v171 - v169 - (_QWORD)v261 - v174 == ++v233)
          goto LABEL_101;
        continue;
      }
    case 0xA:
      v184 = v298[0];
      v185 = v298[1];
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 5002;
      *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v184;
      *(_OWORD *)(a4 + 40) = v185;
      return;
    case 0xB:
    case 0xC:
    case 0xD:
      v9 = re::RigDataParser::parseWhitespace((uint64_t *)a2);
      v11 = &v9[v10];
      v12 = *(const char **)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = (unint64_t)&v9[v10] < *(_QWORD *)a2 + v13;
      if (strncmp(&v9[v10], "{", v14) || asc_22622D872[v14])
      {
        v15 = (re::Allocator *)*a1;
        re::DynamicString::DynamicString((re::DynamicString *)v279, v12, v13, v15);
        if ((v279[8] & 1) != 0)
          v16 = *(_BYTE **)&v279[16];
        else
          v16 = &v279[9];
        re::DynamicString::format(v15, (re::Allocator *)"Could not find initial '{' for attributes: %s", (re::DynamicString *)v298, v16);
LABEL_105:
        v180 = v298[0];
        v181 = v298[1];
        *(_BYTE *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 5002;
        *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(a4 + 24) = v180;
        *(_OWORD *)(a4 + 40) = v181;
        v182 = *(_QWORD *)v279;
        if (*(_QWORD *)v279 && (v279[8] & 1) != 0)
        {
          v183 = *(_QWORD *)&v279[16];
LABEL_108:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 40))(v182, v183);
          return;
        }
        return;
      }
      v268 = a3;
      v186 = a1[32];
      v278 = 0;
      v275 = 0;
      v276 = 0;
      v277 = 0;
      v274 = (re::Allocator *)*a1;
      re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::setCapacity(&v274, v186);
      ++v277;
      v187 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v298[0] = &v11[v14];
      *((_QWORD *)&v298[0] + 1) = v187 - (_QWORD)&v11[v14];
      v188 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
      v190 = &v188[v189];
      v191 = (unint64_t)&v188[v189] < v187;
      v260 = (_OWORD *)(a4 + 8);
      break;
    default:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown Rig Data Type: %u", "!\"Unreachable code\"", "setRigDataValue", 848, *((unsigned __int8 *)a1 + 32));
      _os_crash();
      __break(1u);
      goto LABEL_227;
  }
  do
  {
    if (strncmp(v190, ".", v191))
    {
      v192 = v268;
      goto LABEL_180;
    }
    v192 = v268;
    if (asc_22622D8A2[v191])
      goto LABEL_180;
    v262 = v190;
    v193 = &v190[v191];
    v194 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)&v190[v191];
    *(_QWORD *)&v298[0] = &v190[v191];
    *((_QWORD *)&v298[0] + 1) = v194;
    v195 = re::RigDataParser::parseTypeName((uint64_t *)v298);
    v272 = v195;
    v273 = v196;
    if (!v196)
    {
      v243 = (re::Allocator *)*a1;
      if (*(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v193 >= 0xAuLL)
        v244 = 10;
      else
        v244 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)v193;
      re::DynamicString::DynamicString((re::DynamicString *)v279, &v190[v191], v244, v243);
      if ((v279[8] & 1) != 0)
        v245 = *(_BYTE **)&v279[16];
      else
        v245 = &v279[9];
      re::DynamicString::format(v243, (re::Allocator *)"Expected attribute name: %s", (re::DynamicString *)v298, v245);
      goto LABEL_210;
    }
    v197 = *(unsigned __int8 *)v5;
    if ((v197 - 11) < 2)
    {
      re::RigDataParser::extractArrayIndex((uint64_t *)&v272, (uint64_t)v269);
      v198 = LOBYTE(v269[0]);
      if (LOBYTE(v269[0]))
      {
        v199 = *(_QWORD *)&v269[1];
        if (*(_QWORD *)&v269[1])
        {
          v200 = 0;
          v201 = (char *)*((_QWORD *)&v269[0] + 1);
          do
          {
            v202 = *v201++;
            v200 = v202 + 10 * v200 - 48;
            --v199;
          }
          while (v199);
        }
        else
        {
          v200 = 0;
        }
        if (v200 < a1[32])
        {
          memset(v279, 0, 33);
          *(_QWORD *)&v279[40] = 0;
          *(_QWORD *)&v279[48] = &str_110;
          v282 = 0;
          *(_QWORD *)&v279[64] = 0;
          v280 = 0;
          *(_QWORD *)&v279[56] = 0;
          v281 = 0;
          v283 = 0;
          v284 = 0u;
          v285 = 0u;
          v286 = 0u;
          v287 = 0u;
          v288 = -1;
          v289 = 0;
          v290 = 0;
          v291 = 0;
          v292 = &str_110;
          v297 = 0;
          v294 = 0;
          v295 = 0;
          v296 = 0;
          v293 = 0;
          *(_QWORD *)&v298[0] = v200;
          re::RigDataValue::RigDataValue((re::RigDataValue *)&v298[1], (const re::RigDataValue *)v279);
          re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::add((uint64_t)&v274, (re::RigDataValue *)v298);
          re::RigDataValue::~RigDataValue((re::RigDataValue *)&v298[1]);
          re::RigDataValue::~RigDataValue((re::RigDataValue *)v279);
          v209 = 0;
LABEL_132:
          if (!LOBYTE(v269[0]) && *((_QWORD *)&v269[1] + 1) && (v270 & 1) != 0)
            (*(void (**)(void))(**((_QWORD **)&v269[1] + 1) + 40))();
          if (!v198)
            goto LABEL_213;
          if (v209)
          {
            v206 = v272;
            v207 = v273;
            goto LABEL_206;
          }
          goto LABEL_135;
        }
      }
      else
      {
        v298[0] = *(_OWORD *)((char *)v269 + 8);
        re::DynamicString::DynamicString((re::DynamicString *)&v298[1], (const re::DynamicString *)((char *)&v269[1] + 8));
        *(_BYTE *)a4 = 0;
        *v260 = v298[0];
        v208 = *((_QWORD *)&v298[2] + 1);
        *(_QWORD *)(a4 + 24) = *(_QWORD *)&v298[1];
        *(_QWORD *)(a4 + 48) = v208;
        *(_OWORD *)(a4 + 32) = *(_OWORD *)((char *)&v298[1] + 8);
      }
      v209 = 1;
      goto LABEL_132;
    }
    if ((_DWORD)v197 != 13)
    {
LABEL_227:
      re::internal::assertLog((re::internal *)5, v196, "assertion failure: '%s' (%s:line %i) Unknown Attribute for Rig Data Type: %u", "!\"Unreachable code\"", "setAttributeValuesHelper", 922, v197);
      _os_crash();
      __break(1u);
      JUMPOUT(0x22507E364);
    }
    if (!v186)
    {
      v206 = v195;
      v207 = v196;
LABEL_206:
      v251 = (re::Allocator *)*a1;
      re::DynamicString::DynamicString((re::DynamicString *)v279, v206, v207, v251);
      if ((v279[8] & 1) != 0)
        v252 = *(_BYTE **)&v279[16];
      else
        v252 = &v279[9];
      re::DynamicString::format(v251, (re::Allocator *)"Unknown attribute name: %s", (re::DynamicString *)v298, v252);
      goto LABEL_210;
    }
    v203 = v191;
    v204 = 0;
    while (1)
    {
      v205 = *(const char **)(re::RigDataTypeClass::attributeName(v5, v204) + 8);
      v206 = v272;
      v207 = v273;
      if (!strncmp(v272, v205, v273) && !v205[v207])
        break;
      if (v186 == ++v204)
        goto LABEL_206;
    }
    memset(v279, 0, 33);
    *(_QWORD *)&v279[40] = 0;
    *(_QWORD *)&v279[48] = &str_110;
    v282 = 0;
    *(_QWORD *)&v279[64] = 0;
    v280 = 0;
    *(_QWORD *)&v279[56] = 0;
    v281 = 0;
    v283 = 0;
    v284 = 0u;
    v285 = 0u;
    v286 = 0u;
    v287 = 0u;
    v288 = -1;
    v289 = 0;
    v290 = 0;
    v291 = 0;
    v292 = &str_110;
    v297 = 0;
    v294 = 0;
    v295 = 0;
    v296 = 0;
    v293 = 0;
    *(_QWORD *)&v298[0] = v204;
    re::RigDataValue::RigDataValue((re::RigDataValue *)&v298[1], (const re::RigDataValue *)v279);
    re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::add((uint64_t)&v274, (re::RigDataValue *)v298);
    re::RigDataValue::~RigDataValue((re::RigDataValue *)&v298[1]);
    re::RigDataValue::~RigDataValue((re::RigDataValue *)v279);
    v191 = v203;
LABEL_135:
    v210 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v298[0] = &v272[v273];
    *((_QWORD *)&v298[0] + 1) = v210 - (_QWORD)&v272[v273];
    v211 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
    v213 = &v211[v212];
    v214 = (unint64_t)&v211[v212] < v210;
    if (strncmp(&v211[v212], "=", v214) || asc_22622D992[v214])
    {
      v236 = (re::Allocator *)*a1;
      if (*(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)&v272[v273] >= 0xAuLL)
        v237 = 10;
      else
        v237 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)&v272[v273];
      re::DynamicString::DynamicString((re::DynamicString *)v279, &v272[v273], v237, v236);
      if ((v279[8] & 1) != 0)
        v238 = *(_BYTE **)&v279[16];
      else
        v238 = &v279[9];
      re::DynamicString::format(v236, (re::Allocator *)"Expected attribute equals operator '=': %s", (re::DynamicString *)v298, v238);
      goto LABEL_210;
    }
    v215 = v191;
    v216 = *(_QWORD *)(v278 + 304 * (v276 - 1));
    v217 = a1[32];
    if (v217 <= v216)
    {
      *(_QWORD *)&v269[0] = 0;
      memset(v298, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 789;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = v216;
      *(_WORD *)&v279[28] = 2048;
      *(_QWORD *)&v279[30] = v217;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_225;
    }
    v218 = re::RigDataValue::operator=((_QWORD *)(v278 + 304 * (v276 - 1) + 16), a1[34] + 288 * v216);
    v219 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - (_QWORD)&v213[v214];
    *(_QWORD *)v279 = &v213[v214];
    *(_QWORD *)&v279[8] = v219;
    re::RigDataValue::setRigDataValue(v298, v218, v279, 0);
    if (LOBYTE(v298[0]))
    {
      v220 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      *(_QWORD *)v279 = *((_QWORD *)&v298[0] + 1);
      *(_QWORD *)&v279[8] = v220 - *((_QWORD *)&v298[0] + 1);
      v221 = re::RigDataParser::parseWhitespace((uint64_t *)v279);
      v190 = &v221[v222];
      v191 = (unint64_t)&v221[v222] < v220;
      if (!strncmp(&v221[v222], ",", v191))
      {
        if (asc_22622D9BF[v191])
        {
          v223 = 3;
        }
        else
        {
          v227 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
          *(_QWORD *)v279 = &v190[v191];
          *(_QWORD *)&v279[8] = v227 - (_QWORD)&v190[v191];
          v228 = re::RigDataParser::parseWhitespace((uint64_t *)v279);
          v223 = 0;
          v190 = &v228[v229];
          v191 = (unint64_t)&v228[v229] < v227;
        }
      }
      else
      {
        v223 = 3;
      }
    }
    else
    {
      *v260 = *(_OWORD *)((char *)v298 + 8);
      v224 = *(_OWORD *)((char *)&v298[1] + 8);
      v225 = *((_QWORD *)&v298[2] + 1);
      v226 = *(_QWORD *)&v298[3];
      memset((char *)&v298[1] + 8, 0, 32);
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(a4 + 24) = v224;
      v223 = 1;
      *(_QWORD *)(a4 + 40) = v225;
      *(_QWORD *)(a4 + 48) = v226;
      v190 = v262;
      v191 = v215;
    }
    if (!LOBYTE(v298[0]) && *((_QWORD *)&v298[1] + 1) && (v298[2] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v298[1] + 1) + 40))();
  }
  while (!v223);
  v135 = v223 == 3;
  v192 = v268;
  if (!v135)
    goto LABEL_213;
LABEL_180:
  if (strncmp(v190, "}", v191) || asc_22622D9C1[v191])
  {
    v239 = (re::Allocator *)*a1;
    re::DynamicString::DynamicString((re::DynamicString *)v279, *(const char **)a2, *(_QWORD *)(a2 + 8), v239);
    if ((v279[8] & 1) != 0)
      v240 = *(_BYTE **)&v279[16];
    else
      v240 = &v279[9];
    re::DynamicString::format(v239, (re::Allocator *)"Could not find final '}' for attributes: %s", (re::DynamicString *)v298, v240);
    goto LABEL_210;
  }
  if (v192)
  {
    v246 = (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
    *(_QWORD *)&v298[0] = &v190[v191];
    *((_QWORD *)&v298[0] + 1) = v246 - &v190[v191];
    v247 = re::RigDataParser::parseWhitespace((uint64_t *)v298);
    if (&v247[v248] != v246)
    {
      v249 = (re::Allocator *)*a1;
      re::DynamicString::DynamicString((re::DynamicString *)v279, *(const char **)a2, *(_QWORD *)(a2 + 8), v249);
      if ((v279[8] & 1) != 0)
        v250 = *(_BYTE **)&v279[16];
      else
        v250 = &v279[9];
      re::DynamicString::format(v249, (re::Allocator *)"Could not parse attribute values: %s", (re::DynamicString *)v298, v250);
LABEL_210:
      v253 = v298[0];
      v254 = v298[1];
      *(_QWORD *)&v298[0] = 0;
      *(_QWORD *)&v298[1] = 0;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 5002;
      *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v253;
      *(_OWORD *)(a4 + 40) = v254;
      if (*(_QWORD *)v279 && (v279[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v279 + 40))();
      goto LABEL_213;
    }
  }
  if (v276)
  {
    v258 = 304 * v276;
    v259 = v278 + 16;
    while (1)
    {
      v216 = *(_QWORD *)(v259 - 16);
      v5 = (re::RigDataTypeClass *)a1[32];
      if ((unint64_t)v5 <= v216)
        break;
      re::RigDataValue::operator=((_QWORD *)(a1[34] + 288 * v216), v259);
      v259 += 304;
      v258 -= 304;
      if (!v258)
        goto LABEL_223;
    }
LABEL_225:
    *(_QWORD *)&v269[0] = 0;
    memset(v298, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v279 = 136315906;
    *(_QWORD *)&v279[4] = "operator[]";
    *(_WORD *)&v279[12] = 1024;
    *(_DWORD *)&v279[14] = 789;
    *(_WORD *)&v279[18] = 2048;
    *(_QWORD *)&v279[20] = v216;
    *(_WORD *)&v279[28] = 2048;
    *(_QWORD *)&v279[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_223:
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = &v190[v191];
LABEL_213:
  v182 = (uint64_t)v274;
  if (v274)
  {
    v183 = v278;
    if (v278)
    {
      if (v276)
      {
        v255 = 304 * v276;
        v256 = (re::RigDataValue *)(v278 + 16);
        do
        {
          re::RigDataValue::~RigDataValue(v256);
          v256 = (re::RigDataValue *)(v257 + 304);
          v255 -= 304;
        }
        while (v255);
        v182 = (uint64_t)v274;
        v183 = v278;
      }
      goto LABEL_108;
    }
  }
}

uint64_t re::RigDataValue::setCompilationValueFromCallbackOutput(uint64_t result, re::RigDataValue *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = result;
  v6 = *(_QWORD *)(result + 256);
  if (v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)(v5 + 256) <= i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v12);
        _os_crash();
        __break(1u);
LABEL_27:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v14);
        _os_crash();
        __break(1u);
LABEL_28:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v15);
        _os_crash();
        __break(1u);
LABEL_29:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v16);
        _os_crash();
        __break(1u);
LABEL_30:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v17);
        _os_crash();
        __break(1u);
LABEL_31:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v18);
        _os_crash();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v19);
        _os_crash();
        __break(1u);
LABEL_33:
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v11, v20);
        _os_crash();
        __break(1u);
      }
      v9 = *(_QWORD *)(v5 + 272) + v7;
      v10 = re::RigDataValue::attributeValue(a2, i);
      result = re::RigDataValue::setCompilationValueFromCallbackOutput(v9, v10, a3);
      v7 += 288;
    }
  }
  else
  {
    v11 = *((_QWORD *)a2 + 22);
    switch(*(_BYTE *)(result + 32))
    {
      case 1:
        v12 = a3[19];
        if (v12 <= v11)
          goto LABEL_26;
        v13 = a3[18];
        break;
      case 2:
        v17 = a3[21];
        if (v17 <= v11)
          goto LABEL_30;
        v13 = a3[20];
        break;
      case 3:
        v14 = a3[23];
        if (v14 <= v11)
          goto LABEL_27;
        v13 = a3[22];
        break;
      case 4:
        v15 = a3[25];
        if (v15 <= v11)
          goto LABEL_28;
        v13 = a3[24];
        break;
      case 5:
        v16 = a3[27];
        if (v16 <= v11)
          goto LABEL_29;
        v13 = a3[26];
        break;
      case 6:
        v18 = a3[29];
        if (v18 <= v11)
          goto LABEL_31;
        v13 = a3[28];
        break;
      case 7:
        v19 = a3[31];
        if (v19 <= v11)
          goto LABEL_32;
        v13 = a3[30];
        break;
      case 8:
        v20 = a3[33];
        if (v20 <= v11)
          goto LABEL_33;
        v13 = a3[32];
        break;
      default:
        re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot resolve invalid compile time type: %u", "!\"Unreachable code\"", "setCompilationValueFromCallbackOutput", 625, *((_QWORD *)a2 + 22));
        _os_crash();
        __break(1u);
        JUMPOUT(0x22507E830);
    }
    *(_QWORD *)(result + 176) = *(_QWORD *)(v13 + 8 * v11);
    *(_BYTE *)(result + 96) = 2;
  }
  return result;
}

char **re::RigDataTypeDescriptions::rigDataTypeDescription(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char **result;

  if (a1 < 0xE)
    return &(&re::kRigDataTypeDescriptions)[2 * a1];
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a1, 14, v2, v3);
  result = (char **)_os_crash();
  __break(1u);
  return result;
}

re::RigDataValue *re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::add(uint64_t a1, re::RigDataValue *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  re::RigDataValue *result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 304 * v5);
  *v11 = *(_QWORD *)a2;
  result = re::RigDataValue::RigDataValue((re::RigDataValue *)(v11 + 2), (re::RigDataValue *)((char *)a2 + 16));
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED207E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED207E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::operator()(uint64_t result, re::RigHierarchy **a2)
{
  re::RigHierarchy *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = **(_QWORD **)(result + 8);
    re::RigHierarchy::~RigHierarchy(*a2);
    return (*(uint64_t (**)(uint64_t, re::RigHierarchy *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::RigDataValue(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void std::__function::__func<re::RigDataValue::operator=(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::operator=(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RigDataValue::operator=(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::operator=(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED20870;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::operator=(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::operator=(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED20870;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::operator=(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::operator=(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::operator()(uint64_t result, re::RigHierarchy **a2)
{
  re::RigHierarchy *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = **(_QWORD **)(result + 8);
    re::RigHierarchy::~RigHierarchy(*a2);
    return (*(uint64_t (**)(uint64_t, re::RigHierarchy *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::operator=(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::operator=(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigDataValue::operator=(re::RigDataValue const&)::$_0,std::allocator<re::RigDataValue::operator=(re::RigDataValue const&)::$_0>,void ()(re::RigHierarchy *)>::target_type()
{
}

void std::__function::__func<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0,std::allocator<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0>,void ()(re::RigHierarchy *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0,std::allocator<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0>,void ()(re::RigHierarchy *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED208F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0,std::allocator<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0>,void ()(re::RigHierarchy *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED208F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0,std::allocator<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0>,void ()(re::RigHierarchy *)>::operator()(uint64_t result, re::RigHierarchy **a2)
{
  re::RigHierarchy *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = **(_QWORD **)(result + 8);
    re::RigHierarchy::~RigHierarchy(*a2);
    return (*(uint64_t (**)(uint64_t, re::RigHierarchy *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0,std::allocator<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0>,void ()(re::RigHierarchy *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0,std::allocator<re::RigDataValue::init(re::Allocator *,re::RigEnvironment const*,re::RigDataTypeClass const&,re::EvaluationTree *)::$_0>,void ()(re::RigHierarchy *)>::target_type()
{
}

_QWORD *re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  re::RigDataValue *v10;
  uint64_t v11;
  const re::RigDataValue *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<unsigned long,re::RigDataValue,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x130uLL))
        {
          v2 = 304 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 304 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 304, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (re::RigDataValue *)(v7 + 2);
        v11 = 304 * v9;
        v12 = (const re::RigDataValue *)(v8 + 16);
        do
        {
          *((_QWORD *)v10 - 2) = *((_QWORD *)v12 - 2);
          re::RigDataValue::RigDataValue(v10, v12);
          re::RigDataValue::~RigDataValue(v12);
          v10 = (re::RigDataValue *)((char *)v10 + 304);
          v12 = (const re::RigDataValue *)((char *)v12 + 304);
          v11 -= 304;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_OWORD *re::internal::translationFilterCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 v11;
  _OWORD *result;
  __int128 v13;

  if (a4)
  {
    re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a3, a2);
    CoreIKDoubleExponentialPositionFilterDoFilter();
    if (a8)
    {
      v13 = v11;
      result = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(a7, v10);
      *result = v13;
      return result;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
  result = (_OWORD *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::translationFilterCompile(re::Allocator **a1, const re::RigDataValue **a2, unint64_t a3, re::RigDataValue **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::Allocator *v13;
  uint64_t *v14;
  _OWORD v16[2];
  int v17;
  _OWORD v18[2];
  int v19;
  uint64_t v20;
  StringID v21;
  re::Allocator *v22;
  char **p_var1;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v16, *a1);
  *(_QWORD *)&v21.var0 = 0x3F8FE4A467F9494ELL;
  v21.var1 = "InputTranslation";
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v16, &v21, *a2);
  re::StringID::destroyString((re::StringID *)&v21);
  *(_QWORD *)&v21.var0 = 0xA3F9AE02669A47F4;
  v21.var1 = "FilteredTranslation";
  if (!a5)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v16, &v21, *a4);
  re::StringID::destroyString((re::StringID *)&v21);
  if (a3 <= 1)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_9:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
  }
  if (a3 == 2)
    goto LABEL_9;
  v13 = *a1;
  v14 = (uint64_t *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 16, 8);
  *v14 = CoreIKDoubleExponentialPositionFilterCreate();
  v14[1] = (uint64_t)v13;
  *(_QWORD *)&v21.var0 = v14;
  v21.var1 = (char *)&off_24ED209F0;
  p_var1 = &v21.var1;
  v22 = v13;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v16, (uint64_t)a1, (uint64_t)re::internal::translationFilterCallback, (uint64_t *)&v21);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v21);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v18 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v16 + 8);
  return 1;
}

_OWORD *re::internal::translationAndRotationFilterCallback(int a1, uint64_t a2, re::internal *this, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD *result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (a4)
  {
    re::internal::getSRTFromRDV(this, &v18);
    CoreIKDoubleExponentialTransformFilterDoFilter();
    *(_QWORD *)&v15 = 0x3F8000003F800000;
    *((_QWORD *)&v15 + 1) = 1065353216;
    v16 = v13;
    v17 = v12;
    if (a8)
      return re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(a7, &v15);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, this, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0, v15, v16, v17);
  result = (_OWORD *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::translationAndRotationFilterCompile(re::Allocator **a1, const re::RigDataValue **a2, unint64_t a3, re::RigDataValue **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::Allocator *v13;
  uint64_t *v14;
  _OWORD v16[2];
  int v17;
  _OWORD v18[2];
  int v19;
  uint64_t v20;
  StringID v21;
  re::Allocator *v22;
  char **p_var1;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v16, *a1);
  *(_QWORD *)&v21.var0 = 0xF857424D6C8245C4;
  v21.var1 = "InputTransform";
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v16, &v21, *a2);
  re::StringID::destroyString((re::StringID *)&v21);
  *(_QWORD *)&v21.var0 = 0xEA53A3BE787EB5EALL;
  v21.var1 = "FilteredTransform";
  if (!a5)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v16, &v21, *a4);
  re::StringID::destroyString((re::StringID *)&v21);
  if (a3 <= 1)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_9:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
  }
  if (a3 == 2)
    goto LABEL_9;
  v13 = *a1;
  v14 = (uint64_t *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 16, 8);
  *v14 = CoreIKDoubleExponentialTransformFilterCreate();
  v14[1] = (uint64_t)v13;
  *(_QWORD *)&v21.var0 = v14;
  v21.var1 = (char *)&off_24ED20A70;
  p_var1 = &v21.var1;
  v22 = v13;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v16, (uint64_t)a1, (uint64_t)re::internal::translationAndRotationFilterCallback, (uint64_t *)&v21);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v21);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v18 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v16 + 8);
  return 1;
}

void re::internal::registerTranslationFilter(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[0] = constinit_3;
  v7[1] = *(_OWORD *)&off_24ED20970;
  v7[2] = xmmword_24ED20980;
  v7[3] = *(_OWORD *)&off_24ED20990;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 1uLL, (unint64_t)re::internal::translationFilterCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void re::internal::registerTranslationAndRotationFilter(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[0] = constinit_15;
  v7[1] = *(_OWORD *)&off_24ED209B0;
  v7[2] = xmmword_24ED209C0;
  v7[3] = *(_OWORD *)off_24ED209D0;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 1uLL, (unint64_t)re::internal::translationAndRotationFilterCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_47CoreIKDoubleExponentialPositionFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_47CoreIKDoubleExponentialPositionFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED209F0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_47CoreIKDoubleExponentialPositionFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED209F0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_47CoreIKDoubleExponentialPositionFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EEclEOSC_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    CoreIKDoubleExponentialPositionFilterDestroy();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_47CoreIKDoubleExponentialPositionFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN2re8internal14makeNodeUniqueINS0_47CoreIKDoubleExponentialPositionFilterNodeHelperENS_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_47CoreIKDoubleExponentialPositionFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE11target_typeEv()
{
  return &_ZTIZN2re8internal14makeNodeUniqueINS0_47CoreIKDoubleExponentialPositionFilterNodeHelperENS_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_;
}

void _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_48CoreIKDoubleExponentialTransformFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_48CoreIKDoubleExponentialTransformFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED20A70;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_48CoreIKDoubleExponentialTransformFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED20A70;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_48CoreIKDoubleExponentialTransformFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EEclEOSC_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    CoreIKDoubleExponentialTransformFilterDestroy();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_48CoreIKDoubleExponentialTransformFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN2re8internal14makeNodeUniqueINS0_48CoreIKDoubleExponentialTransformFilterNodeHelperENS_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_48CoreIKDoubleExponentialTransformFilterNodeHelperENS2_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISD_EEFvSC_EE11target_typeEv()
{
  return &_ZTIZN2re8internal14makeNodeUniqueINS0_48CoreIKDoubleExponentialTransformFilterNodeHelperENS_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_;
}

_DWORD *re::internal::getRuntimeValue<re::internal::IKLookAtTaskSettings>@<X0>(re::RigDataValue *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *result;

  v4 = re::RigDataValue::attributeValue(a1, 0);
  *(_OWORD *)a2 = *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v4, v5);
  v6 = re::RigDataValue::attributeValue(a1, 1uLL);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)re::RigDataValue::getRuntimeValue<float>(v6, v7);
  v8 = re::RigDataValue::attributeValue(a1, 2uLL);
  result = (_DWORD *)re::RigDataValue::getRuntimeValue<int>(v8, v9);
  *(_DWORD *)(a2 + 20) = *result;
  return result;
}

uint64_t re::internal::CoreIKGenericSolverNodeHelper::CoreIKGenericSolverNodeHelper(uint64_t a1, uint64_t a2)
{
  unint64_t JointCount;

  *(_QWORD *)a1 = CoreIKGenericSolverCreate();
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  JointCount = CoreIKGenericSolverGetJointCount();
  re::FixedArray<CoreIKTransform>::init<>((uint64_t *)(a1 + 16), a2, JointCount);
  return a1;
}

uint64_t re::internal::CoreIKGenericSolverNodeHelper::updateInteralRestPose(uint64_t this, const re::RigDataValue *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t JointCount;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(this + 40))
  {
    v3 = this;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v4 = *(_QWORD *)(this + 8);
    JointCount = CoreIKGenericSolverGetJointCount();
    re::FixedArray<CoreIKTransform>::init<>(&v6, v4, JointCount);
    re::internal::transferPose(a2, (uint64_t)&v6);
    CoreIKGenericSolverSetRestPose();
    *(_BYTE *)(v3 + 40) = 0;
    this = v6;
    if (v6)
    {
      if (v7)
        return (*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
    }
  }
  return this;
}

_QWORD *re::internal::CoreIKGenericSolverNodeHelper::updateStandardTasks(_QWORD *this, const re::RigDataValue *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t i;
  re::RigDataValue *v6;
  re::RigDataValue *v7;
  unint64_t v8;
  uint64_t v9;
  re::RigDataValue *v10;
  unint64_t v11;
  uint64_t v12;
  re::RigDataValue *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *Runtime;

  v2 = *((_QWORD *)a2 + 32);
  if (v2)
  {
    v4 = this;
    for (i = 0; i != v2; ++i)
    {
      v6 = (re::RigDataValue *)re::RigDataValue::attributeValue(a2, i);
      v7 = (re::RigDataValue *)re::RigDataValue::attributeValue(v6, 0);
      v8 = re::RigDataValue::attributeValue(v7, 0);
      re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v8, v9);
      v10 = (re::RigDataValue *)re::RigDataValue::attributeValue(v6, 0);
      v11 = re::RigDataValue::attributeValue(v10, 1uLL);
      re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v11, v12);
      v13 = (re::RigDataValue *)re::RigDataValue::attributeValue(v6, 0);
      v14 = re::RigDataValue::attributeValue(v13, 2uLL);
      re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v14, v15);
      v16 = re::RigDataValue::attributeValue(v6, 1uLL);
      re::RigDataValue::getRuntimeValue<re::Vector2<float>>(v16, v17);
      v18 = re::RigDataValue::attributeValue(v6, 2uLL);
      Runtime = (int *)re::RigDataValue::getRuntimeValue<int>(v18, v19);
      MEMORY[0x22769154C](*v4, *Runtime);
      this = (_QWORD *)CoreIKGenericConstraintSetTargetParameters();
    }
  }
  return this;
}

_QWORD *re::internal::CoreIKGenericSolverNodeHelper::updateLookAtTasks(_QWORD *this, const re::RigDataValue *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t i;
  re::RigDataValue *v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 32);
  if (v2)
  {
    v4 = this;
    for (i = 0; i != v2; ++i)
    {
      v6 = (re::RigDataValue *)re::RigDataValue::attributeValue(a2, i);
      re::internal::getRuntimeValue<re::internal::IKLookAtTaskSettings>(v6, (uint64_t)&v7);
      MEMORY[0x22769154C](*v4, v8);
      this = (_QWORD *)CoreIKGenericConstraintSetLookAtParameters();
    }
  }
  return this;
}

uint64_t re::internal::CoreIKGenericSolverNodeHelper::solveAndUpdate(re::internal::CoreIKGenericSolverNodeHelper *this, const re::RigDataValue *a2, re::RigDataValue *a3)
{
  int v6;
  uint64_t result;

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v6 = CoreIKGenericSolverSolve();
  if (re::internal::enableSignposts(0, 0))
  {
    CoreIKGenericSolverGetConstraintCount();
    CoreIKGenericSolverGetJointCount();
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::internal::updateOutputBasedOnSolveResult(v6, (uint64_t)a2, (_OWORD *)this + 1, a3);
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

uint64_t re::internal::genericSolverCallback(uint64_t a1, uint64_t a2, const re::RigDataValue *a3, unint64_t a4, uint64_t a5, uint64_t a6, re::RigDataValue *a7, uint64_t a8, re::internal::CoreIKGenericSolverNodeHelper *a9)
{
  const re::RigDataValue *v11;
  re::RigDataValue *v12;
  const re::RigDataValue *v13;
  uint64_t result;

  if (!a4)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (a4 == 1)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (a4 <= 2)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, a4);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  if (a4 == 3)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  if (!a8)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v11 = (const re::RigDataValue *)((char *)a3 + 288);
  v12 = (const re::RigDataValue *)((char *)a3 + 576);
  v13 = (const re::RigDataValue *)((char *)a3 + 864);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::internal::CoreIKGenericSolverNodeHelper::updateInteralRestPose((uint64_t)a9, v13);
  re::internal::CoreIKGenericSolverNodeHelper::updateStandardTasks(a9, a3);
  re::internal::CoreIKGenericSolverNodeHelper::updateLookAtTasks(a9, v11);
  re::internal::transferPose(v12, (uint64_t)a9 + 16);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  return re::internal::CoreIKGenericSolverNodeHelper::solveAndUpdate(a9, v12, a7);
}

uint64_t re::internal::genericSolverCompile(re::Allocator **a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  _anonymous_namespace_ *v11;
  const re::RigDataValue *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::Allocator *v19;
  uint64_t v20;
  _OWORD v22[2];
  int v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;
  StringID v27;
  re::Allocator *v28;
  char **p_var1;
  const char *v30[46];
  _BYTE v31[288];
  _BYTE v32[288];
  _QWORD v33[38];

  v33[37] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  if (a3 == 1)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  if (a3 <= 2)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  v10 = a2[1];
  v11 = *(_anonymous_namespace_ **)(*a2 + 184);
  v12 = (const re::RigDataValue *)a2[2];
  v30[0] = (const char *)0x51C691EF1C9C00D8;
  v30[1] = "IKLookAtTaskSettings[0]";
  re::internal::makeRigDataValue(a1, v30, (uint64_t)v33);
  re::StringID::destroyString((re::StringID *)v30);
  if (a3 == 4)
    re::RigDataValue::operator=(v33, a2[3]);
  if (!a5)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  v14 = *a4;
  v15 = strlen(*(const char **)(v10 + 232));
  v16 = MEMORY[0x22769136C](*(_QWORD *)(v10 + 232), v15);
  re::internal::makePoseFromRig(a1, v11, v16, (uint64_t)v32);
  re::RigHierarchy::getBindPoseHierarchy(v11, v17, (uint64_t)v30);
  re::internal::makePoseFromRig(a1, (_anonymous_namespace_ *)v30, v16, (uint64_t)v31);
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)v30);
  v18 = MEMORY[0x2276916F0](v16);
  re::internal::makePose(a1, v18, (uint64_t)v30);
  v26 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v19 = *a1;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v22, *a1);
  *(_QWORD *)&v27.var0 = 0x3D8860E9FFCEA9D0;
  v27.var1 = "TaskSettings";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v22, &v27, v12);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x80FA33623D02F274;
  v27.var1 = "LookAtTaskSettings";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v22, &v27, (const re::RigDataValue *)v33);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x76F1BA5D1EB6;
  v27.var1 = "InputPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v22, &v27, (const re::RigDataValue *)v32);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x8C23D7EF0C569870;
  v27.var1 = "InputBindPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v22, &v27, (const re::RigDataValue *)v31);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v27.var0 = 0x10498EC9357CACLL;
  v27.var1 = "SolvedPose";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v22, &v27, (re::RigDataValue *)v30);
  re::StringID::destroyString((re::StringID *)&v27);
  v20 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 48, 8);
  *(_QWORD *)&v27.var0 = re::internal::CoreIKGenericSolverNodeHelper::CoreIKGenericSolverNodeHelper(v20, (uint64_t)v19);
  v27.var1 = (char *)&off_24ED20C40;
  p_var1 = &v27.var1;
  v28 = v19;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v22, (uint64_t)a1, (uint64_t)re::internal::genericSolverCallback, (uint64_t *)&v27);
  re::internal::bindCallbackOutputToNodeOutputPose(v11, (re::RigDataValue *)v30, v16, (uint64_t)a1, v14);
  MEMORY[0x2276913A8](v16);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v27);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v24 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v22 + 8);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v30);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v31);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v32);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v33);
  return 1;
}

uint64_t re::internal::genericSolverDebugCallback(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, re::RigDataValue *a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  re::RigDataValue *v20;
  uint64_t v21;
  uint64_t result;

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (!a4)
  {
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  re::internal::CoreIKGenericSolverNodeHelper::updateStandardTasks(a9, (const re::RigDataValue *)a3);
  if (a4 == 1)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  re::internal::CoreIKGenericSolverNodeHelper::updateLookAtTasks(a9, (const re::RigDataValue *)(a3 + 288));
  if (a4 <= 2)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v16 = *a9;
  re::internal::GameRigSettingsUpdateHelper::updateRigJointSettings((re::RigDataValue *)(a3 + 576));
  if (a4 == 3)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  re::internal::GameRigSettingsUpdateHelper::updateRigTaskSettings((re::RigDataValue *)(a3 + 864), v16);
  if (a4 <= 4)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 4, 4);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  re::internal::GameRigSettingsUpdateHelper::updateRigSolverSettings((re::RigDataValue *)(a3 + 1152), v16);
  if (a4 <= 6)
  {
LABEL_18:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 6, a4);
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  re::internal::CoreIKGenericSolverNodeHelper::updateInteralRestPose((uint64_t)a9, (const re::RigDataValue *)(a3 + 1728));
  v20 = (re::RigDataValue *)(a3 + 1440);
  re::internal::transferPose(v20, (uint64_t)(a9 + 2));
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (a8)
    return re::internal::CoreIKGenericSolverNodeHelper::solveAndUpdate((re::internal::CoreIKGenericSolverNodeHelper *)a9, v20, a7);
LABEL_19:
  re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::genericSolverDebugCompile(re::Allocator **a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  _anonymous_namespace_ *v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::Allocator *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[2];
  int v27;
  _OWORD v28[2];
  int v29;
  uint64_t v30;
  StringID v31;
  re::Allocator *v32;
  char **p_var1;
  _BYTE v34[368];
  _BYTE v35[288];
  _BYTE v36[296];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  if (a3 == 1)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v10 = *(_anonymous_namespace_ **)(*(_QWORD *)a2 + 184);
  v11 = *(const char **)(*(_QWORD *)(a2 + 8) + 232);
  v12 = strlen(v11);
  v13 = MEMORY[0x22769136C](v11, v12);
  re::internal::makePoseFromRig(a1, v10, v13, (uint64_t)v36);
  re::RigHierarchy::getBindPoseHierarchy(v10, v14, (uint64_t)v34);
  re::internal::makePoseFromRig(a1, (_anonymous_namespace_ *)v34, v13, (uint64_t)v35);
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)v34);
  if (!a5)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  v16 = *a4;
  v17 = MEMORY[0x2276916F0](v13);
  re::internal::makePose(a1, v17, (uint64_t)v34);
  v30 = 0;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  v18 = *a1;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v26, *a1);
  *(_QWORD *)&v31.var0 = 0x3D8860E9FFCEA9D0;
  v31.var1 = "TaskSettings";
  if (a3 <= 2)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, *(const re::RigDataValue **)(a2 + 16));
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x80FA33623D02F274;
  v31.var1 = "LookAtTaskSettings";
  if (a3 == 3)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, *(const re::RigDataValue **)(a2 + 24));
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x608B8AAFAB2B677ALL;
  v31.var1 = "RigJointSettings";
  if (a3 <= 4)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 4, 4);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, *(const re::RigDataValue **)(a2 + 32));
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x963E12F0C5BD5BB0;
  v31.var1 = "RigTaskSettings";
  if (a3 == 5)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 5, 5);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 6, 6);
    _os_crash();
    __break(1u);
  }
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, *(const re::RigDataValue **)(a2 + 40));
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x86B1473B92D2CCCCLL;
  v31.var1 = "RigSolverSettings";
  if (a3 <= 6)
    goto LABEL_17;
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, *(const re::RigDataValue **)(a2 + 48));
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x76F1BA5D1EB6;
  v31.var1 = "InputPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, (const re::RigDataValue *)v36);
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x8C23D7EF0C569870;
  v31.var1 = "InputBindPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v26, &v31, (const re::RigDataValue *)v35);
  re::StringID::destroyString((re::StringID *)&v31);
  *(_QWORD *)&v31.var0 = 0x10498EC9357CACLL;
  v31.var1 = "SolvedPose";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v26, &v31, (re::RigDataValue *)v34);
  re::StringID::destroyString((re::StringID *)&v31);
  v24 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, 48, 8);
  *(_QWORD *)&v31.var0 = re::internal::CoreIKGenericSolverNodeHelper::CoreIKGenericSolverNodeHelper(v24, (uint64_t)v18);
  v31.var1 = (char *)&off_24ED20C40;
  p_var1 = &v31.var1;
  v32 = v18;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v26, (uint64_t)a1, (uint64_t)re::internal::genericSolverDebugCallback, (uint64_t *)&v31);
  re::internal::bindCallbackOutputToNodeOutputPose(v10, (re::RigDataValue *)v34, v13, (uint64_t)a1, v16);
  MEMORY[0x2276913A8](v13);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v31);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v28 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v26 + 8);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v34);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v35);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v36);
  return 1;
}

void re::internal::registerGenericSolverNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[2] = xmmword_24ED20B00;
  v7[3] = *(_OWORD *)&off_24ED20B10;
  v7[4] = xmmword_24ED20B20;
  v7[0] = constinit_4;
  v7[1] = *(_OWORD *)&off_24ED20AF0;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 4uLL, 1uLL, (unint64_t)re::internal::genericSolverCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void re::internal::registerGenericSolverNoLookAtNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[0] = constinit_20;
  v7[1] = *(_OWORD *)&off_24ED20B40;
  v7[2] = xmmword_24ED20B50;
  v7[3] = *(_OWORD *)&off_24ED20B60;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 1uLL, (unint64_t)re::internal::genericSolverCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void re::internal::registerGenericSolverWithRigSettingsDebug(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[4] = xmmword_24ED20BB0;
  v7[5] = *(_OWORD *)&off_24ED20BC0;
  v7[6] = xmmword_24ED20BD0;
  v7[7] = *(_OWORD *)&off_24ED20BE0;
  v7[0] = constinit_28;
  v7[1] = *(_OWORD *)&off_24ED20B80;
  v7[2] = xmmword_24ED20B90;
  v7[3] = *(_OWORD *)&off_24ED20BA0;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 7uLL, 1uLL, (unint64_t)re::internal::genericSolverDebugCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::internal::ikParametersNodeCallback(uint64_t a1, uint64_t a2, const re::RigDataValue *a3, unint64_t a4, uint64_t a5, uint64_t a6, re::RigDataValue *a7, uint64_t a8, _anonymous_namespace_::IKComponentSolverWrapper *a9)
{
  uint64_t result;
  uint64_t v14;
  re::FullBodyIKSolver *v15;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;

  if (result)
  {
    if (a4)
    {
      if (a8)
      {
        if (a4 > 1)
        {
          v15 = (re::FullBodyIKSolver *)result;
          v29.i64[0] = 0x3F8000003F800000;
          v29.i64[1] = 1065353216;
          v30.i64[0] = 0;
          v30.i64[1] = 0x3F80000000000000;
          v31 = 0uLL;
          re::RigDataValue::getRuntimeValue<re::GenericSRT<float>>((uint64_t)a3 + 288, &v29);
          __asm { FMOV            V0.4S, #1.0 }
          v21 = v30;
          v22 = (int32x4_t)vnegq_f32(v30);
          v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL);
          v22.i32[3] = v30.i32[3];
          v29 = vdivq_f32(_Q0, v29);
          v30 = (float32x4_t)v22;
          v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), v21), v31, v23);
          v25 = (int32x4_t)vaddq_f32(v24, v24);
          v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL);
          v27 = vaddq_f32(v31, vmulq_laneq_f32(v26, v21, 3));
          v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v21), v26, v23);
          v31 = vmulq_f32(vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL)), vnegq_f32(v29));
          return re::FullBodyIKSolver::solve(v15, a3, a7);
        }
LABEL_9:
        re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t `anonymous namespace'::IKComponentSolverWrapper::getSolver(_anonymous_namespace_::IKComponentSolverWrapper *this)
{
  uint64_t Solvers;

  if (*(_QWORD *)this == -1)
    return 0;
  if (*(_QWORD *)(Solvers + 8) <= *(_QWORD *)this)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(Solvers + 16) + (*(_QWORD *)this << 7);
}

_OWORD *re::RigDataValue::getRuntimeValue<re::GenericSRT<float>>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *result;
  const char *v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  _OWORD *v12;
  char v13;

  v8 = "scale";
  v9 = 5;
  re::RigDataValue::attributeValue(a1, (uint64_t)&v8, (uint64_t)v10);
  *a2 = *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v11, v4);
  if (!v10[0] && v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  v8 = "rotation";
  v9 = 8;
  re::RigDataValue::attributeValue(a1, (uint64_t)&v8, (uint64_t)v10);
  a2[1] = *(_OWORD *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v11, v5);
  if (!v10[0] && v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  v8 = "translation";
  v9 = 11;
  re::RigDataValue::attributeValue(a1, (uint64_t)&v8, (uint64_t)v10);
  result = (_OWORD *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v11, v6);
  a2[2] = *result;
  if (!v10[0])
  {
    result = v12;
    if (v12)
    {
      if ((v13 & 1) != 0)
        return (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
    }
  }
  return result;
}

uint64_t re::internal::ikParameterSolverNodeCompile(re::Allocator **a1, const re::RigDataValue **a2, char *a3, uint64_t a4, uint64_t a5)
{
  re::Allocator **v9;
  const re::BindNode *v10;
  uint64_t v11;
  re::Allocator *v12;
  const re::RigDataValue *v13;
  uint64_t v14;
  uint64_t Solvers;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  re::RigEnvironment *v21;
  re::RigEnvironment *v22;
  const re::RigEnvironment *v23;
  re::EvaluationTree *v24;
  re::Allocator *v25;
  const re::RigEnvironment *v26;
  re::EvaluationTree *v27;
  re::Allocator *v28;
  _anonymous_namespace_ *JointCount;
  uint64_t v30;
  _anonymous_namespace_ *v31;
  unint64_t v32;
  _anonymous_namespace_ *Name;
  _anonymous_namespace_ *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  _anonymous_namespace_ *v40;
  re::Allocator **v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const re::RigEnvironment *v47;
  re::EvaluationTree *v48;
  re::Allocator *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  const re::RigEnvironment *v53;
  re::EvaluationTree *v54;
  re::Allocator *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  size_t v65;
  size_t v66;
  size_t v67;
  uint64_t v68;
  re::RigDataValue *v69;
  unint64_t v70;
  _QWORD *v71;
  __n128 *v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  __n128 *v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  __n128 *v80;
  uint64_t *v81;
  size_t v82;
  uint64_t v83;
  StringID v84;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _anonymous_namespace_ *v89;
  re::Allocator **v90;
  _anonymous_namespace_ *v91;
  char v92[24];
  __int128 v93;
  __int128 v94;
  char v95[24];
  __int128 v96;
  __int128 v97;
  _QWORD v98[2];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _QWORD v104[2];
  _QWORD v105[2];
  uint64_t v106[3];
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113[8];
  _BYTE v114[64];
  char v115[8];
  _BYTE v116[64];
  _OWORD v117[2];
  int v118;
  _BYTE v119[32];
  int v120;
  uint64_t v121;
  unsigned __int128 v122;
  __int128 v123;
  _BYTE v124[56];
  __int128 v125;
  int v126;
  _BYTE v127[20];
  __int128 v128;
  _BYTE v129[40];
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[2];
  int v138;
  uint64_t v139[4];
  int v140;
  uint64_t v141;
  _OWORD v142[3];
  __int128 v143;
  __int128 v144;
  int v145;
  uint64_t v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  _BYTE v157[24];
  int v158;
  uint64_t v159;
  _BYTE v160[38];
  _OWORD v161[2];
  char v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  _QWORD v180[3];
  int v181;
  uint64_t v182;
  _OWORD v183[2];
  char v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  char v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  _QWORD v202[3];
  int v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[4];
  _OWORD v207[2];
  uint64_t v208;

  v9 = a1;
  v208 = *MEMORY[0x24BDAC8D0];
  v10 = (re::Allocator *)((char *)a1[2] + 64);
  memset(v207, 0, sizeof(v207));
  re::BindNode::copy((re::BindNode *)v207, v10);
  if ((unint64_t)a3 <= 1)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, a3);
    _os_crash();
    __break(1u);
LABEL_74:
    re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
LABEL_75:
    re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_76;
  }
  v87 = a4;
  v88 = a5;
  v12 = *v9;
  v13 = a2[1];
  v14 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)*v9 + 32))(*v9, 40, 8);
  v122 = 0u;
  v123 = 0u;
  re::BindNode::copy((re::BindNode *)&v122, (const re::BindNode *)v207);
  *(_QWORD *)v14 = -1;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  re::BindNode::move((re::BindNode *)(v14 + 8), (re::BindNode *)&v122);
  if (Solvers)
  {
    v16 = *(_QWORD *)(Solvers + 8);
    if (v16)
    {
      v17 = 0;
      v18 = (_QWORD *)((char *)v13 + 224);
      v19 = *(_QWORD **)(Solvers + 16);
      do
      {
        if (re::StringID::operator==(v19, v18))
          *(_QWORD *)v14 = v17;
        ++v17;
        v19 += 16;
      }
      while (v16 != v17);
    }
  }
  re::BindNode::deinit((re::BindNode *)&v122);
  v205 = v14;
  v206[0] = &off_24ED20D58;
  v206[3] = v206;
  v206[1] = v12;
  {
    if (v88)
    {
      v56 = (__int128 *)*((_QWORD *)*a2 + 23);
      v57 = *(_QWORD *)(*(_QWORD *)v87 + 184);
      v58 = *v56;
      *(_QWORD *)(v57 + 16) = *((_QWORD *)v56 + 2);
      *(_OWORD *)v57 = v58;
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v57 + 24, (uint64_t)v56 + 24);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v57 + 72, (uint64_t)v56 + 72);
      re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(v57 + 120, (uint64_t *)v56 + 15);
      re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(v57 + 160, (uint64_t *)v56 + 20);
      re::DynamicArray<re::StringID>::operator=(v57 + 200, (uint64_t *)v56 + 25);
      re::DynamicArray<unsigned long>::operator=(v57 + 240, (uint64_t *)v56 + 30);
      re::DynamicArray<re::RigHierarchyJointTransform>::operator=(v57 + 280, (uint64_t *)v56 + 35);
      re::DynamicArray<unsigned long>::operator=(v57 + 320, (uint64_t *)v56 + 40);
      goto LABEL_69;
    }
LABEL_76:
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
  v121 = 0;
  memset(v117, 0, sizeof(v117));
  memset(v119, 0, sizeof(v119));
  v118 = 0;
  v120 = 0;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v117, v12);
  v21 = v9[2];
  *(_QWORD *)&v122 = 158357486;
  *((_QWORD *)&v122 + 1) = "SRT[]";
  re::RigEnvironment::lookupRigDataType(v21, (const char **)&v122, v115);
  re::StringID::destroyString((re::StringID *)&v122);
  v22 = v9[2];
  *(_QWORD *)&v122 = 164778;
  *((_QWORD *)&v122 + 1) = "SRT";
  re::RigEnvironment::lookupRigDataType(v22, (const char **)&v122, v113);
  re::StringID::destroyString((re::StringID *)&v122);
  v24 = v9[1];
  v23 = v9[2];
  v25 = *v9;
  memset(v183, 0, sizeof(v183));
  v184 = 0;
  v185 = 0;
  v186 = &str_110;
  v191 = 0;
  v189 = 0;
  v187 = 0;
  v188 = 0;
  v190 = 0;
  v192 = 0;
  v193 = 0u;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v197 = -1;
  v198 = 0;
  v200 = 0;
  v199 = 0;
  v204 = 0;
  v203 = 0;
  v201 = &str_110;
  memset(v202, 0, sizeof(v202));
  re::RigDataValue::init((re::RigDataValue *)v183, v25, v23, (const re::RigDataTypeClass *)v116, v24);
  v27 = v9[1];
  v26 = v9[2];
  v28 = *v9;
  memset(v161, 0, sizeof(v161));
  v162 = 0;
  v163 = 0;
  v164 = &str_110;
  v169 = 0;
  v167 = 0;
  v165 = 0;
  v166 = 0;
  v168 = 0;
  v170 = 0;
  v171 = 0u;
  v172 = 0u;
  v173 = 0u;
  v174 = 0u;
  v175 = -1;
  v176 = 0;
  v178 = 0;
  v177 = 0;
  v182 = 0;
  v181 = 0;
  v179 = &str_110;
  memset(v180, 0, sizeof(v180));
  re::RigDataValue::init((re::RigDataValue *)v161, v28, v26, (const re::RigDataTypeClass *)v116, v27);
  v110 = 0;
  v111 = 0;
  v112 = 0;
  JointCount = (_anonymous_namespace_ *)CoreIKGenericSolverGetJointCount();
  v91 = JointCount;
  if (!JointCount)
  {
    v40 = (_anonymous_namespace_ *)*((_QWORD *)*a2 + 23);
    goto LABEL_24;
  }
  v30 = 0;
  v31 = 0;
  v32 = (unint64_t)&str_110;
  do
  {
    CoreIKGenericSolverGetJoint();
    Name = (_anonymous_namespace_ *)CoreIKJointGetName();
    *(_QWORD *)v160 = 0;
    *(_QWORD *)&v160[8] = &str_110;
    v34 = (_anonymous_namespace_ *)v111;
    if (v111 <= (unint64_t)v31)
    {
      v99 = 0;
      v123 = 0u;
      memset(v124, 0, 48);
      v122 = 0u;
      v42 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v142[0]) = 136315906;
      *(_QWORD *)((char *)v142 + 4) = "operator[]";
      WORD6(v142[0]) = 1024;
      *(_DWORD *)((char *)v142 + 14) = 468;
      WORD1(v142[1]) = 2048;
      *(_QWORD *)((char *)&v142[1] + 4) = v31;
      WORD6(v142[1]) = 2048;
      *(_QWORD *)((char *)&v142[1] + 14) = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      *(_QWORD *)v160 = 0;
      v123 = 0u;
      memset(v124, 0, 48);
      v122 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v142[0]) = 136315906;
      *(_QWORD *)((char *)v142 + 4) = "operator[]";
      WORD6(v142[0]) = 1024;
      *(_DWORD *)((char *)v142 + 14) = 468;
      WORD1(v142[1]) = 2048;
      *(_QWORD *)((char *)&v142[1] + 4) = v34;
      WORD6(v142[1]) = 2048;
      *(_QWORD *)((char *)&v142[1] + 14) = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_72:
      v106[0] = 0;
      v144 = 0u;
      v143 = 0u;
      memset(v142, 0, sizeof(v142));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v160 = 136315906;
      *(_QWORD *)&v160[4] = "operator[]";
      *(_WORD *)&v160[12] = 1024;
      *(_DWORD *)&v160[14] = 468;
      *(_WORD *)&v160[18] = 2048;
      *(_QWORD *)&v160[20] = v32;
      *(_WORD *)&v160[28] = 2048;
      *(_QWORD *)&v160[30] = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_73;
    }
    v35 = (_QWORD *)(v112 + v30);
    v36 = *(_QWORD *)v160;
    v37 = *(_QWORD *)&v160[8];
    *(_QWORD *)&v160[8] = &str_110;
    *(_QWORD *)v160 = 0;
    v38 = *(char **)(v112 + v30 + 8);
    v39 = v36 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v112 + v30) & 1;
    v35[1] = v37;
    *((_QWORD *)&v122 + 1) = v38;
    *(_QWORD *)&v122 = v39;
    *v35 = v36;
    re::StringID::destroyString((re::StringID *)&v122);
    re::StringID::destroyString((re::StringID *)v160);
    v31 = (_anonymous_namespace_ *)((char *)v31 + 1);
    v30 += 16;
  }
  while (JointCount != v31);
  v86 = a3;
  v90 = v9;
  v34 = 0;
  v40 = (_anonymous_namespace_ *)*((_QWORD *)*a2 + 23);
  a3 = v157;
  v32 = 8;
  v89 = v40;
  v41 = v9;
  do
  {
    v42 = v111;
    if (v111 <= (unint64_t)v34)
      goto LABEL_71;
    v43 = (char *)strlen(*(const char **)(v112 + v32));
    *(_QWORD *)&v122 = *(_QWORD *)(v112 + v32);
    *((_QWORD *)&v122 + 1) = v43;
    re::RigHierarchy::getLocalSpaceJointSRT(v40, (uint64_t)&v122, (uint64_t)v160);
    v44 = *(_QWORD *)&v160[8];
    v45 = *(_QWORD *)&v160[16];
    v46 = *(_QWORD *)&v160[24];
    v48 = v41[1];
    v47 = v41[2];
    v49 = *v41;
    v122 = 0u;
    v123 = 0u;
    v124[0] = 0;
    *(_QWORD *)&v124[8] = 0;
    *(_QWORD *)&v124[16] = &str_110;
    *(_QWORD *)&v125 = 0;
    memset(&v124[24], 0, 28);
    BYTE8(v125) = 0;
    *(_OWORD *)&v127[4] = 0u;
    v128 = 0u;
    memset(v129, 0, 32);
    *(_QWORD *)&v129[32] = -1;
    v130 = 0;
    *((_QWORD *)&v132 + 1) = 0;
    v133 = 0;
    *(_QWORD *)&v134 = &str_110;
    *(_QWORD *)&v137[0] = 0;
    v135 = 0uLL;
    v136 = 0;
    *((_QWORD *)&v134 + 1) = 0;
    re::RigDataValue::init((re::RigDataValue *)&v122, v49, v47, (const re::RigDataTypeClass *)v114, v48);
    v50 = re::RigDataValue::attributeValue((re::RigDataValue *)&v122, 0);
    *(_BYTE *)(v50 + 96) = 2;
    *(_QWORD *)(v50 + 176) = v44;
    v51 = re::RigDataValue::attributeValue((re::RigDataValue *)&v122, 1uLL);
    *(_BYTE *)(v51 + 96) = 2;
    *(_QWORD *)(v51 + 176) = v45;
    v52 = re::RigDataValue::attributeValue((re::RigDataValue *)&v122, 2uLL);
    *(_BYTE *)(v52 + 96) = 2;
    *(_QWORD *)(v52 + 176) = v46;
    re::DynamicArray<re::RigDataValue>::add((uint64_t)v202, (const re::RigDataValue *)&v122);
    v54 = v41[1];
    v53 = v41[2];
    v55 = *v41;
    memset(v142, 0, 33);
    *((_QWORD *)&v142[2] + 1) = 0;
    *(_QWORD *)&v143 = &str_110;
    v146 = 0;
    v144 = 0uLL;
    *((_QWORD *)&v143 + 1) = 0;
    v145 = 0;
    v147 = 0;
    v148 = 0u;
    v149 = 0u;
    v150 = 0u;
    v151 = 0u;
    v152 = -1;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = &str_110;
    v159 = 0;
    v158 = 0;
    memset(v157, 0, sizeof(v157));
    re::RigDataValue::init((re::RigDataValue *)v142, v55, v53, (const re::RigDataTypeClass *)v114, v54);
    re::DynamicArray<re::RigDataValue>::add((uint64_t)v180, (const re::RigDataValue *)v142);
    re::RigDataValue::~RigDataValue((re::RigDataValue *)v142);
    re::RigDataValue::~RigDataValue((re::RigDataValue *)&v122);
    if (!v160[0] && *(_QWORD *)&v160[24] && (v160[32] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v160[24] + 40))();
    v34 = (_anonymous_namespace_ *)((char *)v34 + 1);
    v32 += 16;
    v40 = v89;
  }
  while (v91 != v34);
  v9 = v90;
  a3 = v86;
LABEL_24:
  *(_QWORD *)&v122 = 0x76F1BA5D1EB6;
  *((_QWORD *)&v122 + 1) = "InputPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v117, (const StringID *)&v122, (const re::RigDataValue *)v183);
  re::StringID::destroyString((re::StringID *)&v122);
  *(_QWORD *)&v122 = 0x34787D46CC9BED34;
  *((_QWORD *)&v122 + 1) = "SolverRootModelSpaceTransform";
  if ((unint64_t)a3 <= 2)
    goto LABEL_74;
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v117, (const StringID *)&v122, a2[2]);
  re::StringID::destroyString((re::StringID *)&v122);
  *(_QWORD *)&v122 = 0x10498EC9357CACLL;
  *((_QWORD *)&v122 + 1) = "SolvedPose";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v117, (const StringID *)&v122, (re::RigDataValue *)v161);
  re::StringID::destroyString((re::StringID *)&v122);
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v117, (uint64_t)v9, (uint64_t)re::internal::ikParametersNodeCallback, &v205);
  v123 = 0u;
  memset(v124, 0, 28);
  v122 = 0u;
  *(_QWORD *)&v124[28] = 0x7FFFFFFFLL;
  *(_OWORD *)&v124[40] = 0u;
  v125 = 0u;
  v126 = 0;
  *(_QWORD *)v127 = 0x7FFFFFFFLL;
  *(_QWORD *)&v127[12] = 0;
  v128 = 0uLL;
  v141 = 0;
  memset(&v129[8], 0, 32);
  *(_DWORD *)v129 = 0;
  LODWORD(v130) = 0;
  v131 = 0u;
  v132 = 0u;
  LODWORD(v133) = 0;
  v136 = 0;
  v135 = 0u;
  v134 = 0u;
  v138 = 0;
  memset(v137, 0, sizeof(v137));
  memset(v139, 0, sizeof(v139));
  v140 = 0;
  re::RigHierarchy::jointDescription(v40, v60, &v107);
  re::RigHierarchy::init((uint64_t)&v122, (uint64_t)v9[2], (uint64_t)*v9, v9[1], v109, v108);
  if (*((_QWORD *)v40 + 27))
  {
    v62 = 0;
    do
    {
      v63 = re::RigHierarchy::jointName(v40, v62);
      v64 = strlen(*(const char **)(v63 + 8));
      v105[0] = *(_QWORD *)(v63 + 8);
      v105[1] = v64;
      re::RigHierarchy::getLocalSpaceJointScale(v40, (uint64_t)v105, (uint64_t)v142);
      v106[0] = *((_QWORD *)&v142[0] + 1);
      v65 = strlen(*(const char **)(v63 + 8));
      v104[0] = *(_QWORD *)(v63 + 8);
      v104[1] = v65;
      re::RigHierarchy::getLocalSpaceJointRotation(v40, (uint64_t)v104, (uint64_t)v160);
      v106[1] = *(_QWORD *)&v160[8];
      v66 = strlen(*(const char **)(v63 + 8));
      v98[0] = *(_QWORD *)(v63 + 8);
      v98[1] = v66;
      re::RigHierarchy::getLocalSpaceJointTranslation(v40, (uint64_t)v98, (uint64_t)&v99);
      v106[2] = v100;
      if (!(_BYTE)v99 && v102 && (v103 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v102 + 40))();
      if (!v160[0] && *(_QWORD *)&v160[24] && (v160[32] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v160[24] + 40))();
      if (!LOBYTE(v142[0]) && *((_QWORD *)&v142[1] + 1) && (v142[2] & 1) != 0)
        (*(void (**)(void))(**((_QWORD **)&v142[1] + 1) + 40))();
      v67 = strlen(*(const char **)(v63 + 8));
      *(_QWORD *)&v142[0] = *(_QWORD *)(v63 + 8);
      *((_QWORD *)&v142[0] + 1) = v67;
      re::RigHierarchy::setLocalSpaceJointTransform((_anonymous_namespace_ *)&v122, (uint64_t)v142, v106, (uint64_t)v95);
      if (!v95[0] && (_QWORD)v96)
      {
        if ((BYTE8(v96) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v96 + 40))();
        v96 = 0u;
        v97 = 0u;
      }
      ++v62;
    }
    while (v62 < *((_QWORD *)v40 + 27));
  }
  if (v91)
  {
    v32 = 0;
    a3 = (char *)v142 + 8;
    v68 = 8;
    do
    {
      v69 = (re::RigDataValue *)re::RigDataValue::attributeValue((re::RigDataValue *)v161, v32);
      v70 = re::RigDataValue::attributeValue(v69, 0);
      if (*(_BYTE *)(v70 + 96) == 1)
      {
        v71 = *(_QWORD **)(v70 + 16);
        v72 = (__n128 *)(v70 + 112);
        LODWORD(v142[0]) = 7;
        memset((char *)v142 + 8, 0, 24);
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v71 + 243), (uint64_t)v142);
        *(_QWORD *)&v142[0] = v71[245] - 1;
        re::DynamicArray<unsigned long>::add(v71 + 36, v142);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v71 + 76), v72);
        v73 = (uint64_t *)(v71[40] + 8 * v71[38] - 8);
      }
      else
      {
        v73 = (uint64_t *)(v70 + 176);
      }
      v99 = *v73;
      v74 = re::RigDataValue::attributeValue(v69, 1uLL);
      if (*(_BYTE *)(v74 + 96) == 1)
      {
        v75 = *(_QWORD **)(v74 + 16);
        v76 = (__n128 *)(v74 + 112);
        LODWORD(v142[0]) = 5;
        memset((char *)v142 + 8, 0, 24);
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v75 + 233), (uint64_t)v142);
        *(_QWORD *)&v142[0] = v75[235] - 1;
        re::DynamicArray<unsigned long>::add(v75 + 26, v142);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v75 + 66), v76);
        v77 = (uint64_t *)(v75[30] + 8 * v75[28] - 8);
      }
      else
      {
        v77 = (uint64_t *)(v74 + 176);
      }
      v100 = *v77;
      v78 = re::RigDataValue::attributeValue(v69, 2uLL);
      if (*(_BYTE *)(v78 + 96) == 1)
      {
        v79 = *(_QWORD **)(v78 + 16);
        v80 = (__n128 *)(v78 + 112);
        LODWORD(v142[0]) = 7;
        memset((char *)v142 + 8, 0, 24);
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v79 + 243), (uint64_t)v142);
        *(_QWORD *)&v142[0] = v79[245] - 1;
        re::DynamicArray<unsigned long>::add(v79 + 36, v142);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v79 + 76), v80);
        v81 = (uint64_t *)(v79[40] + 8 * v79[38] - 8);
      }
      else
      {
        v81 = (uint64_t *)(v78 + 176);
      }
      v101 = *v81;
      v34 = (_anonymous_namespace_ *)v111;
      if (v111 <= v32)
        goto LABEL_72;
      v82 = strlen(*(const char **)(v112 + v68));
      *(_QWORD *)&v142[0] = *(_QWORD *)(v112 + v68);
      *((_QWORD *)&v142[0] + 1) = v82;
      re::RigHierarchy::setLocalSpaceJointTransform((_anonymous_namespace_ *)&v122, (uint64_t)v142, &v99, (uint64_t)v92);
      if (!v92[0] && (_QWORD)v93)
      {
        if ((BYTE8(v93) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v93 + 40))();
        v93 = 0u;
        v94 = 0u;
      }
      ++v32;
      v68 += 16;
    }
    while (v91 != (_anonymous_namespace_ *)v32);
  }
  if (!v88)
    goto LABEL_75;
  v83 = *(_QWORD *)(*(_QWORD *)v87 + 184);
  v84 = (StringID)v122;
  *(_QWORD *)(v83 + 16) = v123;
  *(StringID *)v83 = v84;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v83 + 24, (uint64_t)&v123 + 8);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v83 + 72, (uint64_t)&v124[40]);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(v83 + 120, (uint64_t *)&v127[12]);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(v83 + 160, (uint64_t *)&v129[16]);
  re::DynamicArray<re::StringID>::operator=(v83 + 200, (uint64_t *)&v131 + 1);
  re::DynamicArray<unsigned long>::operator=(v83 + 240, (uint64_t *)&v134 + 1);
  re::DynamicArray<re::RigHierarchyJointTransform>::operator=(v83 + 280, (uint64_t *)v137 + 1);
  re::DynamicArray<unsigned long>::operator=(v83 + 320, &v139[1]);
  if (v107 && v108)
    (*(void (**)(void))(*(_QWORD *)v107 + 40))();
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)&v122);
  re::FixedArray<re::StringID>::deinit(&v110);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v161);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v183);
  re::Optional<re::RigDataTypeClass>::~Optional(v113);
  re::Optional<re::RigDataTypeClass>::~Optional(v115);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v119[8]);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v117 + 8);
LABEL_69:
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v205);
  re::BindNode::deinit((re::BindNode *)v207);
  return 1;
}

unint64_t re::RigHierarchy::jointName(re::RigHierarchy *this, unint64_t a2)
{
  if (*((_QWORD *)this + 27) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 29) + 16 * a2;
}

void re::internal::registerIKParametersComponentNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[0] = constinit_35;
  v7[1] = *(_OWORD *)&off_24ED20C00;
  v7[2] = xmmword_24ED20C10;
  v7[3] = *(_OWORD *)off_24ED20C20;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 3uLL, 1uLL, (unint64_t)re::internal::ikParameterSolverNodeCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_29CoreIKGenericSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_29CoreIKGenericSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED20C40;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_29CoreIKGenericSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED20C40;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_29CoreIKGenericSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    CoreIKGenericSolverDestroy();
    v4 = v2[2];
    if (v4)
    {
      if (v2[3])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[4]);
        v2[3] = 0;
        v2[4] = 0;
      }
      v2[2] = 0;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_29CoreIKGenericSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN2re8internal14makeNodeUniqueINS0_29CoreIKGenericSolverNodeHelperENS_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_29CoreIKGenericSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
  return &_ZTIZN2re8internal14makeNodeUniqueINS0_29CoreIKGenericSolverNodeHelperENS_9AllocatorEJP9CoreIKRigEEEDaPT0_DpT1_EUlPvE_;
}

uint64_t `anonymous namespace'::IKComponentSolverWrapper::getSolvers(_anonymous_namespace_::IKComponentSolverWrapper *this)
{
  re::BindNode **v1;
  unsigned __int8 v2;
  uint64_t v3;
  re::BindNode **v5;
  int v6;
  uint64_t v7[2];
  _BYTE v8[8];
  _QWORD v9[5];

  v1 = (re::BindNode **)((char *)this + 8);
  v7[0] = (uint64_t)"solvers";
  v7[1] = 7;
  v2 = atomic_load((unsigned __int8 *)&qword_2540F8D88);
  if ((v2 & 1) == 0)
  {
    v5 = v1;
    v6 = __cxa_guard_acquire(&qword_2540F8D88);
    v1 = v5;
    if (v6)
    {
      _MergedGlobals_16 = (uint64_t)re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(0);
      __cxa_guard_release(&qword_2540F8D88);
      v1 = v5;
    }
  }
  re::BindNode::bindPoint(v1, _MergedGlobals_16, v7, (uint64_t)v8);
  if (v9[2] && re::BindPoint::isAlive((re::BindPoint *)v8))
    v3 = re::BindPoint::valueUntyped((re::BindPoint *)v8);
  else
    v3 = 0;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v9);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v9);
  return v3;
}

uint64_t *re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info = (uint64_t)&off_24ED20CC0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::introspect_FullBodyIKSolver((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info, 0);
    qword_2557FF3C8 = 0x1800000004;
    dword_2557FF3D0 = v10;
    word_2557FF3D4 = 0;
    *(_QWORD *)&xmmword_2557FF3D8 = 0;
    *((_QWORD *)&xmmword_2557FF3D8 + 1) = 0xFFFFFFFFLL;
    qword_2557FF3E8 = v9;
    unk_2557FF3F0 = 0;
    re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info = (uint64_t)&off_24ED20CC0;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_2557FF3D8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(BOOL)::info;
}

void re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionFixedArray<re::FullBodyIKSolver>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::FullBodyIKSolver>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::FullBodyIKSolver>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

_QWORD *re::IntrospectionFixedArray<re::FullBodyIKSolver>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::FullBodyIKSolver>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::FullBodyIKSolver>::init(uint64_t a1, uint64_t a2, re *a3, int a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::FullBodyIKSolver>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (*(_QWORD *)(a2 + 8) <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = (uint64_t)re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(*(_QWORD *)(a2 + 16) + v11));
      ++v12;
      v11 += 128;
    }
    while (a5 != v12);
  }
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::FullBodyIKSolver>::deinit(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::FullBodyIKSolver>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::FullBodyIKSolver>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::FullBodyIKSolver>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::FullBodyIKSolver>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + (a3 << 7);
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + (a3 << 7);
}

_QWORD *re::FixedArray<re::FullBodyIKSolver>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (uint64_t *)result[2];
      v5 = v2 << 7;
      do
      {
        v6 = v4[13];
        if (v6)
        {
          if (v4[14])
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v4[15]);
            v4[14] = 0;
            v4[15] = 0;
          }
          v4[13] = 0;
        }
        v7 = v4[10];
        if (v7)
        {
          if (v4[11])
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v4[12]);
            v4[11] = 0;
            v4[12] = 0;
          }
          v4[10] = 0;
        }
        v8 = v4[7];
        if (v8)
        {
          if (v4[8])
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, v4[9]);
            v4[8] = 0;
            v4[9] = 0;
          }
          v4[7] = 0;
        }
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v4 + 2);
        re::StringID::destroyString((re::StringID *)v4);
        v4 += 16;
        v5 -= 128;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::FixedArray<re::FullBodyIKSolver>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >> 57)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 128, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 7, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_QWORD *)(result + 8) = &str_110;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 96) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      result += 128;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 8) = &str_110;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(_QWORD *a1)
{
  re::FixedArray<re::FullBodyIKSolver>::deinit(a1);
  return re::FixedArray<re::FullBodyIKSolver>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(_QWORD *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  re::FixedArray<re::FullBodyIKSolver>::deinit(a1);
  v8 = (_anonymous_namespace_ *)re::FixedArray<re::FullBodyIKSolver>::init<>((uint64_t)a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = a1[1];
    if (v9)
    {
      v10 = (char *)a1[2];
      v11 = v9 << 7;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 128;
        v11 -= 128;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + (a2 << 7);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + ((uint64_t)v1 << 7);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::FullBodyIKSolver>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void std::__function::__func<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED20D58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED20D58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = re::BindNode::deinit((re::BindNode *)(v2 + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2, v4);
  }
  return result;
}

uint64_t std::__function::__func<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0,std::allocator<re::internal::ikParameterSolverNodeCompile(re::RigGraphSystem &,re::Slice<re::RigDataValue const*>,re::Slice<re::RigDataValue*>)::$_0>,void ()(void *)>::target_type()
{
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DynamicArray<re::RigDataValue>>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DynamicArray<re::RigDataValue>>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::DynamicArray<re::RigDataValue>>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DynamicArray<re::RigDataValue>>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::StringID>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::StringID>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::StringID>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::StringID>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<unsigned long>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<unsigned long>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<unsigned long>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::RigHierarchyJointTransform>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::RigHierarchyJointTransform>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RigHierarchyJointTransform>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RigHierarchyJointTransform>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = (re::StringID *)(result[4] + 40);
    v4 = 96 * v2;
    do
    {
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v3 + 16);
      re::StringID::destroyString(v3);
      result = (_QWORD *)*((_QWORD *)v3 - 5);
      if (result)
      {
        if ((*((_BYTE *)v3 - 32) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *((_QWORD *)v3 - 3));
        *(_OWORD *)((char *)v3 - 40) = 0u;
        *(_OWORD *)((char *)v3 - 24) = 0u;
      }
      v3 = (re::StringID *)((char *)v3 + 96);
      v4 -= 96;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::DynamicArray<re::DynamicArray<re::RigDataValue>>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 40 * v2;
    do
    {
      result = re::DynamicArray<re::RigDataValue>::deinit(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void re::DynamicArray<re::StringID>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 16 * v2;
    do
    {
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 16);
      v4 -= 16;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

_OWORD *re::internal::RayCaster::cast@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  result = (_OWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)*a1 + 56))(*a1, a2, a1 + 2, a1 + 6);
  v6 = a1[11];
  if (v6)
  {
    result = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)(a1 + 6), 0);
    v7 = result[3];
    *(_OWORD *)(a3 + 48) = result[2];
    *(_OWORD *)(a3 + 64) = v7;
    *(_OWORD *)(a3 + 80) = result[4];
    v8 = result[1];
    *(_OWORD *)(a3 + 16) = *result;
    *(_OWORD *)(a3 + 32) = v8;
    LOBYTE(v6) = 1;
  }
  *(_BYTE *)a3 = v6;
  return result;
}

uint64_t *re::internal::getSRTFromRDV@<X0>(re::internal *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[2];
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v27[0] = "scale";
  v27[1] = 5;
  re::RigDataValue::attributeValue((uint64_t)this, (uint64_t)v27, (uint64_t)v28);
  v6 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v29, v5);
  v7 = *v6;
  v8 = v6[1];
  v22[0] = "rotation";
  v22[1] = 8;
  re::RigDataValue::attributeValue((uint64_t)this, (uint64_t)v22, (uint64_t)v23);
  v10 = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Quaternion<float>>(v24, v9);
  v11 = *v10;
  v12 = v10[1];
  v17[0] = "translation";
  v17[1] = 11;
  re::RigDataValue::attributeValue((uint64_t)this, (uint64_t)v17, (uint64_t)v18);
  result = (uint64_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v19, v13);
  v15 = *result;
  v16 = result[1];
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v15;
  a2[5] = v16;
  if (!v18[0])
  {
    result = (uint64_t *)v20;
    if (v20)
    {
      if ((v21 & 1) != 0)
        result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 40))();
    }
  }
  if (!v23[0])
  {
    result = (uint64_t *)v25;
    if (v25)
    {
      if ((v26 & 1) != 0)
        result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v25 + 40))();
    }
  }
  if (!v28[0])
  {
    result = (uint64_t *)v30;
    if (v30)
    {
      if ((v31 & 1) != 0)
        return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 40))(v30, v32);
    }
  }
  return result;
}

_BYTE *re::internal::makeRigDataValue@<X0>(re::Allocator **a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  const re::RigEnvironment *v5;
  re::EvaluationTree *v6;
  re::Allocator *v7;
  _BYTE v9[8];
  _BYTE v10[16];
  _BYTE v11[40];
  _BYTE v12[16];
  StringID v13;
  uint64_t v14[5];

  re::RigEnvironment::lookupRigDataType(a1[2], a2, v12);
  v9[0] = v12[8];
  re::StringID::StringID((re::StringID *)v10, &v13);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::DynamicArray((uint64_t)v11, v14);
  v6 = a1[1];
  v5 = a1[2];
  v7 = *a1;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_QWORD *)(a3 + 176) = -1;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 224) = 0;
  *(_QWORD *)(a3 + 272) = 0;
  *(_DWORD *)(a3 + 264) = 0;
  *(_QWORD *)(a3 + 232) = &str_110;
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  *(_QWORD *)(a3 + 256) = 0;
  re::RigDataValue::init((re::RigDataValue *)a3, v7, v5, (const re::RigDataTypeClass *)v9, v6);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v11);
  re::StringID::destroyString((re::StringID *)v10);
  return re::Optional<re::RigDataTypeClass>::~Optional(v12);
}

unint64_t re::internal::makeModelSpaceJointPoseRDV@<X0>(re::Allocator **a1@<X0>, _anonymous_namespace_ *a2@<X1>, const char *a3@<X2>, re::RigDataValue *a4@<X8>)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  _QWORD v13[2];
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v24 = 164778;
  v25 = "SRT";
  re::internal::makeRigDataValue(a1, (const char **)&v24, (uint64_t)a4);
  re::StringID::destroyString((re::StringID *)&v24);
  v23[0] = a3;
  v23[1] = strlen(a3);
  re::RigHierarchy::getModelSpaceJointScale(a2, (uint64_t)v23, (uint64_t)&v24);
  v7 = v25;
  v18[0] = a3;
  v18[1] = strlen(a3);
  re::RigHierarchy::getModelSpaceJointRotation(a2, (uint64_t)v18, (uint64_t)v19);
  v8 = v20;
  v13[0] = a3;
  v13[1] = strlen(a3);
  re::RigHierarchy::getModelSpaceJointTranslation(a2, (uint64_t)v13, (uint64_t)v14);
  v9 = v15;
  if (!v14[0] && v16 && (v17 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v16 + 40))();
  if (!v19[0] && v21 && (v22 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v21 + 40))();
  if (!(_BYTE)v24 && v26 && (v27 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(v26, v28);
  v10 = re::RigDataValue::attributeValue(a4, 0);
  *(_BYTE *)(v10 + 96) = 2;
  *(_QWORD *)(v10 + 176) = v7;
  v11 = re::RigDataValue::attributeValue(a4, 1uLL);
  *(_BYTE *)(v11 + 96) = 2;
  *(_QWORD *)(v11 + 176) = v8;
  result = re::RigDataValue::attributeValue(a4, 2uLL);
  *(_BYTE *)(result + 96) = 2;
  *(_QWORD *)(result + 176) = v9;
  return result;
}

unint64_t re::internal::makeLocalSpaceJointPoseRDV@<X0>(re::Allocator **a1@<X0>, _anonymous_namespace_ *a2@<X1>, const re::RigHierarchy *a3@<X2>, re::RigDataValue *a4@<X8>)
{
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  const char *v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v13 = 164778;
  v14 = "SRT";
  re::internal::makeRigDataValue(a1, (const char **)&v13, (uint64_t)a4);
  re::StringID::destroyString((re::StringID *)&v13);
  v7 = re::RigDataValue::attributeValue(a4, 0);
  v8 = (const char *)v13;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v8;
  v9 = re::RigDataValue::attributeValue(a4, 1uLL);
  v10 = v14;
  *(_BYTE *)(v9 + 96) = 2;
  *(_QWORD *)(v9 + 176) = v10;
  result = re::RigDataValue::attributeValue(a4, 2uLL);
  v12 = v15;
  *(_BYTE *)(result + 96) = 2;
  *(_QWORD *)(result + 176) = v12;
  return result;
}

uint64_t `anonymous namespace'::getLocalSpaceJointPoseEvalSRT@<X0>(_anonymous_namespace_ *this@<X0>, const re::RigHierarchy *__s@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD v8[2];
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v18[0] = __s;
  v18[1] = strlen((const char *)__s);
  re::RigHierarchy::getLocalSpaceJointScale(this, (uint64_t)v18, (uint64_t)v19);
  *a3 = v20;
  v13[0] = __s;
  v13[1] = strlen((const char *)__s);
  re::RigHierarchy::getLocalSpaceJointRotation(this, (uint64_t)v13, (uint64_t)v14);
  a3[1] = v15;
  v8[0] = __s;
  v8[1] = strlen((const char *)__s);
  result = re::RigHierarchy::getLocalSpaceJointTranslation(this, (uint64_t)v8, (uint64_t)v9);
  a3[2] = v10;
  if (!v9[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  if (!v14[0])
  {
    result = v16;
    if (v16)
    {
      if ((v17 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
    }
  }
  if (!v19[0])
  {
    result = v21;
    if (v21)
    {
      if ((v22 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(v21, v23);
    }
  }
  return result;
}

re::RigHierarchy *re::internal::transferPose(re::RigHierarchy *this, const re::RigHierarchy *a2, re::RigHierarchy *a3)
{
  re::RigHierarchy *v4;
  unint64_t v5;
  const re::RigHierarchy *v6;
  size_t v7;
  _QWORD v8[2];
  char v9[24];
  __int128 v10;
  __int128 v11;
  uint64_t v12[3];

  if (*((_QWORD *)this + 27))
  {
    v4 = this;
    v5 = 0;
    do
    {
      v6 = *(const re::RigHierarchy **)(re::RigHierarchy::jointName(v4, v5) + 8);
      v7 = strlen((const char *)v6);
      v8[0] = v6;
      v8[1] = v7;
      this = (re::RigHierarchy *)re::RigHierarchy::setLocalSpaceJointTransform(a2, (uint64_t)v8, v12, (uint64_t)v9);
      if (!v9[0])
      {
        this = (re::RigHierarchy *)v10;
        if ((_QWORD)v10)
        {
          if ((BYTE8(v10) & 1) != 0)
            this = (re::RigHierarchy *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
          v10 = 0u;
          v11 = 0u;
        }
      }
      ++v5;
    }
    while (v5 < *((_QWORD *)v4 + 27));
  }
  return this;
}

re::RigDataValue *re::internal::transferPose(re::RigDataValue *this, const re::RigDataValue *a2, re::RigDataValue *a3)
{
  re::RigDataValue *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*((_QWORD *)this + 32))
  {
    v4 = this;
    v5 = 0;
    do
    {
      *(_QWORD *)&v8 = 0x3F8000003F800000;
      *((_QWORD *)&v8 + 1) = 1065353216;
      v9 = 0;
      v10 = 0x3F80000000000000;
      v11 = 0;
      v12 = 0;
      v6 = re::RigDataValue::attributeValue(v4, v5);
      re::RigDataValue::getRuntimeValue<re::GenericSRT<float>>(v6, &v8);
      v7 = re::RigDataValue::attributeValue(a2, v5);
      this = (re::RigDataValue *)re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v7, &v8);
      ++v5;
    }
    while (v5 < *((_QWORD *)v4 + 32));
  }
  return this;
}

__n128 re::internal::transferPose(re::RigDataValue *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 result;
  unint64_t v9;
  __n128 *v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      *(_QWORD *)&v11 = 0x3F8000003F800000;
      *((_QWORD *)&v11 + 1) = 1065353216;
      v12.n128_u64[0] = 0;
      v12.n128_u64[1] = 0x3F80000000000000;
      v13 = 0uLL;
      v6 = re::RigDataValue::attributeValue(this, v5);
      re::RigDataValue::getRuntimeValue<re::GenericSRT<float>>(v6, &v11);
      v7 = *(_QWORD *)(a2 + 8);
      if (v7 <= v5)
      {
        v14 = 0;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v15 = 136315906;
        v16 = "operator[]";
        v17 = 1024;
        v18 = 468;
        v19 = 2048;
        v20 = v5;
        v21 = 2048;
        v22 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = v12;
      v9 = v13;
      v10 = (__n128 *)(*(_QWORD *)(a2 + 16) + v4);
      v10->n128_u32[2] = DWORD2(v13);
      v10->n128_u64[0] = v9;
      v10[1] = result;
      ++v5;
      v4 += 32;
    }
    while (v5 < *(_QWORD *)(a2 + 8));
  }
  return result;
}

_OWORD *re::internal::transferPose(_OWORD *result, re::RigDataValue *this)
{
  _OWORD *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (*((_QWORD *)result + 1))
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (__int128 *)(*((_QWORD *)v3 + 2) + v4);
      v7 = *((_QWORD *)v6 + 2);
      v8 = *((_QWORD *)v6 + 3);
      v9 = *v6;
      *(_QWORD *)&v11 = 0x3F8000003F800000;
      *((_QWORD *)&v11 + 1) = 1065353216;
      v12 = v7;
      v13 = v8;
      v14 = v9;
      v10 = re::RigDataValue::attributeValue(this, v5);
      result = re::RigDataValue::setRuntimeValue<re::GenericSRT<float>>(v10, &v11);
      ++v5;
      v4 += 32;
    }
    while (v5 < *((_QWORD *)v3 + 1));
  }
  return result;
}

void re::internal::transferPose(re::RigDataValue *a1, _anonymous_namespace_ *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  const char *v9;
  const re::RigDataValue *v10;
  size_t v11;
  _QWORD v12[2];
  _BYTE v13[24];
  __int128 v14;
  __int128 v15;
  uint64_t v16[3];
  _BYTE v17[296];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = MEMORY[0x2276916F0](a3);
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = (const char *)MEMORY[0x2276916FC](a3, i);
      v10 = (const re::RigDataValue *)re::RigDataValue::attributeValue(a1, i);
      re::RigDataValue::RigDataValue((re::RigDataValue *)v17, v10);
      v11 = strlen(v9);
      v12[0] = v9;
      v12[1] = v11;
      re::RigHierarchy::setLocalSpaceJointTransform(a2, (uint64_t)v12, v16, (uint64_t)v13);
      if (!v13[0] && (_QWORD)v14)
      {
        if ((BYTE8(v14) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v14 + 40))();
        v14 = 0u;
        v15 = 0u;
      }
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v17);
    }
  }
}

void `anonymous namespace'::getEvalSRTFromRDV(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  __n128 *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  __n128 *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __n128 *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = re::RigDataValue::attributeValue(this, 0);
  if (*(_BYTE *)(v5 + 96) == 1)
  {
    v6 = *(_QWORD **)(v5 + 16);
    v7 = (__n128 *)(v5 + 112);
    LODWORD(v17) = 7;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v6 + 243), (uint64_t)&v17);
    v17 = v6[245] - 1;
    re::DynamicArray<unsigned long>::add(v6 + 36, &v17);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v6 + 76), v7);
    v8 = (_QWORD *)(v6[40] + 8 * v6[38] - 8);
  }
  else
  {
    v8 = (_QWORD *)(v5 + 176);
  }
  *a2 = *v8;
  v9 = re::RigDataValue::attributeValue(this, 1uLL);
  if (*(_BYTE *)(v9 + 96) == 1)
  {
    v10 = *(_QWORD **)(v9 + 16);
    v11 = (__n128 *)(v9 + 112);
    LODWORD(v17) = 5;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 233), (uint64_t)&v17);
    v17 = v10[235] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 26, &v17);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 66), v11);
    v12 = (_QWORD *)(v10[30] + 8 * v10[28] - 8);
  }
  else
  {
    v12 = (_QWORD *)(v9 + 176);
  }
  a2[1] = *v12;
  v13 = re::RigDataValue::attributeValue(this, 2uLL);
  if (*(_BYTE *)(v13 + 96) == 1)
  {
    v14 = *(_QWORD **)(v13 + 16);
    v15 = (__n128 *)(v13 + 112);
    LODWORD(v17) = 7;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v14 + 243), (uint64_t)&v17);
    v17 = v14[245] - 1;
    re::DynamicArray<unsigned long>::add(v14 + 36, &v17);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v14 + 76), v15);
    v16 = (_QWORD *)(v14[40] + 8 * v14[38] - 8);
  }
  else
  {
    v16 = (_QWORD *)(v13 + 176);
  }
  a2[2] = *v16;
}

void re::internal::makePoseFromRig(re::Allocator **a1@<X0>, _anonymous_namespace_ *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const re::RigHierarchy *v12;
  const char *v13[38];

  v13[37] = *(const char **)MEMORY[0x24BDAC8D0];
  v13[0] = (const char *)158357486;
  v13[1] = "SRT[]";
  re::internal::makeRigDataValue(a1, v13, a4);
  re::StringID::destroyString((re::StringID *)v13);
  v8 = MEMORY[0x2276916F0](a3);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = a4 + 240;
    do
    {
      v12 = (const re::RigHierarchy *)MEMORY[0x2276916FC](a3, v10);
      re::internal::makeLocalSpaceJointPoseRDV(a1, a2, v12, (re::RigDataValue *)v13);
      re::DynamicArray<re::RigDataValue>::add(v11, (const re::RigDataValue *)v13);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v13);
      ++v10;
    }
    while (v9 != v10);
  }
}

void re::internal::makeModelSpacePoseForRayTracingJoints(re::Allocator **a1@<X0>, _anonymous_namespace_ *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ConstraintCount;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *ConstraintTargetName;
  const char *v13[38];

  v13[37] = *(const char **)MEMORY[0x24BDAC8D0];
  v13[0] = (const char *)158357486;
  v13[1] = "SRT[]";
  re::internal::makeRigDataValue(a1, v13, a4);
  re::StringID::destroyString((re::StringID *)v13);
  CoreIKFootPlacementSolverGetGenericSolver();
  ConstraintCount = CoreIKGenericSolverGetConstraintCount();
  if (ConstraintCount)
  {
    v9 = ConstraintCount;
    v10 = 0;
    v11 = a4 + 240;
    do
    {
      MEMORY[0x227691444](a3, v10);
      if (CoreIKFootPlacementConstraintIsRayTracing())
      {
        ConstraintTargetName = (const char *)CoreIKGenericSolverGetConstraintTargetName();
        re::internal::makeModelSpaceJointPoseRDV(a1, a2, ConstraintTargetName, (re::RigDataValue *)v13);
        re::DynamicArray<re::RigDataValue>::add(v11, (const re::RigDataValue *)v13);
        re::RigDataValue::~RigDataValue((re::RigDataValue *)v13);
      }
      ++v10;
    }
    while (v9 != v10);
  }
}

void re::internal::makePose(re::Allocator **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const char *v7[2];
  const char *v8[38];

  v8[37] = *(const char **)MEMORY[0x24BDAC8D0];
  v8[0] = (const char *)158357486;
  v8[1] = "SRT[]";
  re::internal::makeRigDataValue(a1, v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  if (a2)
  {
    v6 = a3 + 240;
    do
    {
      v7[0] = (const char *)164778;
      v7[1] = "SRT";
      re::internal::makeRigDataValue(a1, v7, (uint64_t)v8);
      re::StringID::destroyString((re::StringID *)v7);
      re::DynamicArray<re::RigDataValue>::add(v6, (const re::RigDataValue *)v8);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v8);
      --a2;
    }
    while (a2);
  }
}

void re::internal::makeSourcePose(re::Allocator **a1@<X0>, _anonymous_namespace_ *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const re::RigHierarchy *v12;
  const char *v13[38];

  v13[37] = *(const char **)MEMORY[0x24BDAC8D0];
  v13[0] = (const char *)158357486;
  v13[1] = "SRT[]";
  re::internal::makeRigDataValue(a1, v13, a4);
  re::StringID::destroyString((re::StringID *)v13);
  v8 = MEMORY[0x2276916D8](a3);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = a4 + 240;
    do
    {
      v12 = (const re::RigHierarchy *)MEMORY[0x2276916E4](a3, v10);
      re::internal::makeLocalSpaceJointPoseRDV(a1, a2, v12, (re::RigDataValue *)v13);
      re::DynamicArray<re::RigDataValue>::add(v11, (const re::RigDataValue *)v13);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v13);
      ++v10;
    }
    while (v9 != v10);
  }
}

void re::internal::bindCallbackOutputToNodeOutputPose(re::RigHierarchy *a1, re::RigDataValue *a2, uint64_t a3, uint64_t a4)
{
  re::RigHierarchy *v8;
  uint64_t v9;
  unint64_t v10;
  const StringID *v11;
  const re::RigDataValue *v12;
  size_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  _BYTE v17[24];
  __int128 v18;
  __int128 v19;
  uint64_t v20[3];
  _BYTE v21[8];
  char *__s;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE v26[60];
  uint64_t v27;
  _BYTE v28[32];
  int v29;
  uint64_t v30;
  uint64_t v31[3];
  int v32;
  uint64_t v33[4];
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38[4];
  int v39;
  uint64_t v40[4];
  int v41;
  uint64_t v42[4];
  int v43;
  uint64_t v44;
  _BYTE v45[296];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  memset(v26, 0, sizeof(v26));
  v27 = 0x7FFFFFFFLL;
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  v30 = 0x7FFFFFFFLL;
  memset(v31, 0, sizeof(v31));
  v44 = 0;
  memset(v33, 0, sizeof(v33));
  v32 = 0;
  v34 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  re::RigHierarchy::jointDescription(a1, (uint64_t)a2, &v23);
  re::RigHierarchy::init((uint64_t)v26, *(_QWORD *)(a4 + 16), *(_QWORD *)a4, *(_QWORD **)(a4 + 8), v25, v24);
  re::internal::transferPose(a1, (const re::RigHierarchy *)v26, v8);
  v9 = *((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v10 = 0;
    do
    {
      v11 = (const StringID *)re::RigHierarchy::jointName((re::RigHierarchy *)v26, v10);
      re::StringID::StringID((re::StringID *)v21, v11);
      v12 = (const re::RigDataValue *)re::RigDataValue::attributeValue(a2, v10);
      re::RigDataValue::RigDataValue((re::RigDataValue *)v45, v12);
      v13 = strlen(__s);
      v16[0] = __s;
      v16[1] = v13;
      re::RigHierarchy::setLocalSpaceJointTransform((_anonymous_namespace_ *)v26, (uint64_t)v16, v20, (uint64_t)v17);
      if (!v17[0] && (_QWORD)v18)
      {
        if ((BYTE8(v18) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v18 + 40))();
        v18 = 0u;
        v19 = 0u;
      }
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v45);
      re::StringID::destroyString((re::StringID *)v21);
      ++v10;
    }
    while (v9 != v10);
  }
  v14 = *(_QWORD *)(a3 + 184);
  v15 = *(_OWORD *)v26;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)&v26[16];
  *(_OWORD *)v14 = v15;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v14 + 24, (uint64_t)&v26[24]);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v14 + 72, (uint64_t)v28);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(v14 + 120, v31);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(v14 + 160, &v33[1]);
  re::DynamicArray<re::StringID>::operator=(v14 + 200, (uint64_t *)&v35 + 1);
  re::DynamicArray<unsigned long>::operator=(v14 + 240, &v38[1]);
  re::DynamicArray<re::RigHierarchyJointTransform>::operator=(v14 + 280, &v40[1]);
  re::DynamicArray<unsigned long>::operator=(v14 + 320, &v42[1]);
  if (v23 && v24)
    (*(void (**)(void))(*(_QWORD *)v23 + 40))();
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)v26);
}

void re::internal::bindCallbackOutputToNodeOutputPose(re::RigHierarchy *a1, re::RigDataValue *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re::RigHierarchy *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[60];
  uint64_t v17;
  _OWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21[3];
  int v22;
  uint64_t v23[4];
  int v24;
  uint64_t v25[4];
  int v26;
  uint64_t v27[4];
  int v28;
  uint64_t v29[4];
  int v30;
  uint64_t v31[4];
  int v32;
  uint64_t v33;

  memset(v16, 0, sizeof(v16));
  v17 = 0x7FFFFFFFLL;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v20 = 0x7FFFFFFFLL;
  memset(v21, 0, sizeof(v21));
  v33 = 0;
  memset(v23, 0, sizeof(v23));
  v22 = 0;
  v24 = 0;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  re::RigHierarchy::jointDescription(a1, (uint64_t)a2, &v13);
  re::RigHierarchy::init((uint64_t)v16, *(_QWORD *)(a4 + 16), *(_QWORD *)a4, *(_QWORD **)(a4 + 8), v15, v14);
  re::internal::transferPose(a1, (const re::RigHierarchy *)v16, v10);
  re::internal::transferPose(a2, (_anonymous_namespace_ *)v16, a3);
  v11 = *(_QWORD *)(a5 + 184);
  v12 = *(_OWORD *)v16;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)&v16[16];
  *(_OWORD *)v11 = v12;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v11 + 24, (uint64_t)&v16[24]);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v11 + 72, (uint64_t)v18);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(v11 + 120, v21);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(v11 + 160, &v23[1]);
  re::DynamicArray<re::StringID>::operator=(v11 + 200, &v25[1]);
  re::DynamicArray<unsigned long>::operator=(v11 + 240, &v27[1]);
  re::DynamicArray<re::RigHierarchyJointTransform>::operator=(v11 + 280, &v29[1]);
  re::DynamicArray<unsigned long>::operator=(v11 + 320, &v31[1]);
  if (v13 && v14)
    (*(void (**)(void))(*(_QWORD *)v13 + 40))();
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)v16);
}

void re::internal::makePoseFromRigHierarchy(re::Allocator **a1@<X0>, re::RigHierarchy *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const StringID *v9;
  const re::RigHierarchy *v10[2];
  const char *v11[38];

  v11[37] = *(const char **)MEMORY[0x24BDAC8D0];
  v11[0] = (const char *)158357486;
  v11[1] = "SRT[]";
  re::internal::makeRigDataValue(a1, v11, a3);
  re::StringID::destroyString((re::StringID *)v11);
  v6 = *((_QWORD *)a2 + 27);
  if (v6)
  {
    v7 = 0;
    v8 = a3 + 240;
    do
    {
      v9 = (const StringID *)re::RigHierarchy::jointName(a2, v7);
      re::StringID::StringID((re::StringID *)v10, v9);
      re::internal::makeLocalSpaceJointPoseRDV(a1, a2, v10[1], (re::RigDataValue *)v11);
      re::DynamicArray<re::RigDataValue>::add(v8, (const re::RigDataValue *)v11);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)v11);
      re::StringID::destroyString((re::StringID *)v10);
      ++v7;
    }
    while (v6 != v7);
  }
}

_OWORD *re::internal::updateOutputBasedOnSolveResult(int a1, uint64_t a2, _OWORD *a3, re::RigDataValue *this)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *result;

  switch(a1)
  {
    case 2:
      return re::internal::transferPose(a3, this);
    case 1:
      return re::RigDataValue::operator=(this, a2);
    case 0:
      return re::internal::transferPose(a3, this);
  }
  re::internal::assertLog((re::internal *)4, a2, a3, this, "assertion failure: '%s' (%s:line %i) Unexpected Solve Result", "!\"Unreachable code\"", "updateOutputBasedOnSolveResult", 269, v4, v5);
  result = (_OWORD *)_os_crash();
  __break(1u);
  return result;
}

_QWORD *re::EvaluationTree::init(re::EvaluationTree *this, re::Allocator *a2)
{
  uint64_t i;
  _QWORD *result;
  re::Allocator *v5;

  v5 = a2;
  re::DynamicRegisterIdTable::initArrays<re::Allocator *&>((_QWORD *)this + 1, &v5);
  re::DynamicRegisterTable::initArrays<re::Allocator *&>((_QWORD *)this + 41, &v5);
  re::DynamicRegisterIdTable::initArrays<re::Allocator *&>((_QWORD *)this + 81, &v5);
  re::DynamicRegisterIdTable::initArrays<re::Allocator *&>((_QWORD *)this + 121, &v5);
  re::DynamicRegisterIdTable::initArrays<re::Allocator *&>((_QWORD *)this + 161, &v5);
  re::BucketArray<re::EvaluationBranchGroupData,8ul>::init((uint64_t)this + 1608, (uint64_t)v5, 1uLL);
  for (i = 0; i != 320; i += 40)
  {
    *(_QWORD *)((char *)this + i + 1664) = v5;
    re::DynamicArray<re::EvaluationRegister>::setCapacity((re::EvaluationTree *)((char *)this + i + 1664), 0);
    ++*(_DWORD *)((char *)this + i + 1688);
  }
  *((_QWORD *)this + 248) = v5;
  re::DynamicArray<re::EvaluationCallbackData>::setCapacity((_QWORD *)this + 248, 0);
  ++*((_DWORD *)this + 502);
  *((_QWORD *)this + 253) = v5;
  result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)this + 253, 0);
  ++*((_DWORD *)this + 512);
  return result;
}

uint64_t *re::BucketArray<re::EvaluationBranchGroupData,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::EvaluationBranchGroupData,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DynamicRegisterIdTable::deinit(re::DynamicRegisterIdTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 15) = 0;
    ++*((_DWORD *)this + 36);
  }
  v6 = *((_QWORD *)this + 20);
  if (v6)
  {
    if (*((_QWORD *)this + 24))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 20) = 0;
    ++*((_DWORD *)this + 46);
  }
  v7 = *((_QWORD *)this + 25);
  if (v7)
  {
    if (*((_QWORD *)this + 29))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 25) = 0;
    ++*((_DWORD *)this + 56);
  }
  v8 = *((_QWORD *)this + 30);
  if (v8)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  result = *((_QWORD *)this + 35);
  if (result)
  {
    if (*((_QWORD *)this + 39))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 35) = 0;
    ++*((_DWORD *)this + 76);
  }
  return result;
}

_QWORD *re::EvaluationTree::setupEvaluationModel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v12, a3, a2, a1);
  if ((_BYTE)v12)
  {
    re::FixedRegisterTable::initSize<re::SliceRegisterIdTable>(a5, a2, a4);
    re::FixedArray<re::GenericSRT<float>>::init<>(a5 + 24, a2, a4[17]);
    re::FixedRegisterTable::initSize<re::SliceRegisterIdTable>(a5 + 27, a2, a4 + 18);
    result = re::FixedArray<re::GenericSRT<float>>::init<>(a5 + 51, a2, a4[35]);
    v11 = v12;
    *(_BYTE *)a6 = 1;
    if (v11)
      return result;
  }
  else
  {
    *(_OWORD *)(a6 + 8) = v13;
    *(_QWORD *)(a6 + 24) = v14;
    *(_QWORD *)(a6 + 48) = v16;
    *(_OWORD *)(a6 + 32) = v15;
    v16 = 0;
    v14 = 0;
    v15 = 0uLL;
    *(_BYTE *)a6 = 0;
  }
  result = v14;
  if (v14)
  {
    if ((v15 & 1) != 0)
      return (_QWORD *)(*(uint64_t (**)(void))(*v14 + 40))();
  }
  return result;
}

void re::FixedRegisterTable::initSize<re::SliceRegisterIdTable>(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  re::FixedArray<int>::init<>(a1, a2, a3[1]);
  re::FixedArray<int>::init<>(a1 + 3, a2, a3[3]);
  re::FixedArray<int>::init<>(a1 + 6, a2, a3[5]);
  re::FixedArray<re::Matrix3x3<float>>::init<>(a1 + 9, a2, a3[7]);
  re::FixedArray<re::Matrix4x4<float>>::init<>(a1 + 12, a2, a3[9]);
  re::FixedArray<re::Quaternion<float>>::init<>(a1 + 15, a2, a3[11]);
  re::FixedArray<re::Vector2<float>>::init<>(a1 + 18, a2, a3[13]);
  re::FixedArray<re::Vector3<float>>::init<>(a1 + 21, a2, a3[15]);
}

void re::EvaluationTree::createInputRegister(_QWORD *a1@<X0>, __n128 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  LODWORD(v9) = 7;
  v11 = 0;
  v12 = 0;
  v6 = a1 + 36;
  v7 = (_anonymous_namespace_ *)(a1 + 76);
  v8 = (_anonymous_namespace_ *)(a1 + 243);
  v10 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 243), (uint64_t)&v9);
  v9 = a1[245] - 1;
  re::DynamicArray<unsigned long>::add(v6, &v9);
  re::DynamicArray<re::Vector3<float>>::add(v7, a2);
  *a3 = *(_QWORD *)(a1[40] + 8 * a1[38] - 8);
  LODWORD(v9) = 5;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 233), (uint64_t)&v9);
  v9 = a1[235] - 1;
  re::DynamicArray<unsigned long>::add(a1 + 26, &v9);
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(a1 + 66), a2 + 1);
  a3[1] = *(_QWORD *)(a1[30] + 8 * a1[28] - 8);
  LODWORD(v9) = 7;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  re::DynamicArray<re::EvaluationRegister>::add(v8, (uint64_t)&v9);
  v9 = a1[245] - 1;
  re::DynamicArray<unsigned long>::add(v6, &v9);
  re::DynamicArray<re::Vector3<float>>::add(v7, a2 + 2);
  a3[2] = *(_QWORD *)(a1[40] + 8 * a1[38] - 8);
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<unsigned int>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 56) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 72) + 32 * a2;
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 296) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 312) + 32 * a2;
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector2<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 256) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 272) + 32 * a2;
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 216) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 232) + 32 * a2;
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix3x3<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 136) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 152) + 32 * a2;
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix4x4<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 176) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 192) + 32 * a2;
}

unint64_t re::EvaluationTree::extractRotation(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 34;
  v10 = 0;
  v11 = 0;
  v4 = (uint64_t)(a1 + 208);
  v9 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 223), (uint64_t)&v8);
  v5 = a1[225] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix3x3<float>>(v4, v5) + 8) = a2;
  v8 = 35;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 233), (uint64_t)&v8);
  v6 = a1[235] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v4, v6) + 8) = v5;
  return v6;
}

unint64_t re::EvaluationTree::extractScale(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 34;
  v10 = 0;
  v11 = 0;
  v4 = (uint64_t)(a1 + 208);
  v9 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 223), (uint64_t)&v8);
  v5 = a1[225] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix3x3<float>>(v4, v5) + 8) = a2;
  v8 = 36;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 243), (uint64_t)&v8);
  v6 = a1[245] - 1;
  *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v4, v6) + 8) = v5;
  return v6;
}

unint64_t re::EvaluationTree::constructMatrix4x4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 39;
  v16 = 0;
  v17 = 0;
  v8 = (uint64_t)(a1 + 208);
  v15 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 223), (uint64_t)&v14);
  v9 = a1[225] - 1;
  v10 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix3x3<float>>(v8, v9);
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  v14 = 40;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 228), (uint64_t)&v14);
  v11 = a1[230] - 1;
  v12 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Matrix4x4<float>>(v8, v11);
  *(_QWORD *)(v12 + 8) = v9;
  *(_QWORD *)(v12 + 16) = a4;
  return v11;
}

unint64_t re::EvaluationTree::transformDirection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = 42;
  v12 = 0;
  v13 = 0;
  v6 = a1 + 1664;
  v11 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1944), (uint64_t)&v10);
  v7 = *(_QWORD *)(a1 + 1960) - 1;
  v8 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v6, v7);
  *(_QWORD *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 16) = a3;
  return v7;
}

uint64_t re::DynamicEvaluationRegisterTable::evaluationRegister<float>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 96) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 112) + 32 * a2;
}

uint64_t re::EvaluationTree::additiveBlend@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *a2;
  v9 = *a3;
  v29 = 25;
  v10 = (uint64_t)(a1 + 208);
  v11 = (_anonymous_namespace_ *)(a1 + 243);
  v31 = 0;
  v32 = 0;
  v30 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 243), (uint64_t)&v29);
  v12 = a1[245] - 1;
  v13 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v10, v12);
  *(_QWORD *)(v13 + 8) = v8;
  *(_QWORD *)(v13 + 16) = v9;
  *a4 = v12;
  v14 = a2[1];
  v15 = a3[1];
  v29 = 24;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 233), (uint64_t)&v29);
  v16 = a1[235] - 1;
  v17 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v10, v16);
  *(_QWORD *)(v17 + 8) = v14;
  *(_QWORD *)(v17 + 16) = v15;
  a4[1] = v16;
  v18 = *a2;
  v21 = a2 + 1;
  v19 = a2[1];
  v20 = v21[1];
  v22 = a3[2];
  v29 = 30;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  re::DynamicArray<re::EvaluationRegister>::add(v11, (uint64_t)&v29);
  v23 = a1[245] - 1;
  v24 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v10, v23);
  *(_QWORD *)(v24 + 8) = v19;
  *(_QWORD *)(v24 + 16) = v22;
  v29 = 25;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  re::DynamicArray<re::EvaluationRegister>::add(v11, (uint64_t)&v29);
  v25 = a1[245] - 1;
  v26 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v10, v25);
  *(_QWORD *)(v26 + 8) = v18;
  *(_QWORD *)(v26 + 16) = v23;
  v29 = 8;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  re::DynamicArray<re::EvaluationRegister>::add(v11, (uint64_t)&v29);
  v27 = a1[245] - 1;
  result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v10, v27);
  *(_QWORD *)(result + 8) = v20;
  *(_QWORD *)(result + 16) = v25;
  a4[2] = v27;
  return result;
}

_QWORD *re::EvaluationTree::lerp@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = *a2;
  v11 = *a3;
  v24 = 11;
  v12 = (uint64_t)(a1 + 208);
  v26 = 0;
  v27 = 0;
  v13 = (_anonymous_namespace_ *)(a1 + 243);
  v25 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 243), (uint64_t)&v24);
  v14 = a1[245] - 1;
  v15 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v12, v14);
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = a4;
  *a5 = v14;
  v16 = a2[1];
  v17 = a3[1];
  v24 = 12;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 233), (uint64_t)&v24);
  v18 = a1[235] - 1;
  v19 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v12, v18);
  v19[1] = v16;
  v19[2] = v17;
  v19[3] = a4;
  a5[1] = v18;
  v20 = a2[2];
  v21 = a3[2];
  v24 = 11;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  re::DynamicArray<re::EvaluationRegister>::add(v13, (uint64_t)&v24);
  v22 = a1[245] - 1;
  result = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v12, v22);
  result[1] = v20;
  result[2] = v21;
  result[3] = a4;
  a5[2] = v22;
  return result;
}

uint64_t re::EvaluationTree::registerCallbackFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _anonymous_namespace_ *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t result;
  uint64_t v113;
  _anonymous_namespace_ *v114;
  uint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _anonymous_namespace_ *v129;
  _anonymous_namespace_ *v130;
  _anonymous_namespace_ *v131;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  int v161;
  const char *v162;
  __int16 v163;
  int v164;
  __int16 v165;
  uint64_t *v166;
  __int16 v167;
  uint64_t v168;
  uint64_t v169;

  v7 = a1;
  v169 = *MEMORY[0x24BDAC8D0];
  v8 = 0uLL;
  v159 = 0u;
  v160 = 0u;
  v129 = (_anonymous_namespace_ *)(a1 + 1984);
  v157 = 0u;
  v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v9 = *(_QWORD *)(a1 + 2000);
  v10 = *(_QWORD *)(a1 + 1992);
  if (v9 >= v10)
  {
    v11 = v9 + 1;
    if (v10 < v9 + 1)
    {
      if (*(_QWORD *)v129)
      {
        v12 = 2 * v10;
        v13 = v10 == 0;
        v14 = 8;
        if (!v13)
          v14 = v12;
        if (v14 <= v11)
          v15 = v11;
        else
          v15 = v14;
        re::DynamicArray<re::EvaluationCallbackData>::setCapacity(v129, v15);
        v7 = a1;
      }
      else
      {
        re::DynamicArray<re::EvaluationCallbackData>::setCapacity(v129, v11);
        v7 = a1;
        ++*(_DWORD *)(a1 + 2008);
      }
      v8 = 0uLL;
    }
    v9 = *(_QWORD *)(v7 + 2000);
  }
  v16 = *(_QWORD *)(v7 + 2016) + 448 * v9;
  *(_OWORD *)v16 = v8;
  *(_OWORD *)(v16 + 16) = v8;
  *(_QWORD *)(v16 + 8) = *((_QWORD *)&v133 + 1);
  *((_QWORD *)&v133 + 1) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)&v134 = 0;
  v17 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 24) = *((_QWORD *)&v134 + 1);
  *((_QWORD *)&v134 + 1) = v17;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 32) = v135;
  *(_QWORD *)&v135 = 0;
  *(_QWORD *)(v16 + 40) = *((_QWORD *)&v135 + 1);
  *((_QWORD *)&v135 + 1) = 0;
  v18 = *(_QWORD *)(v16 + 48);
  *(_QWORD *)(v16 + 48) = v136;
  *(_QWORD *)&v136 = v18;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 56) = *((_QWORD *)&v136 + 1);
  *((_QWORD *)&v136 + 1) = 0;
  *(_QWORD *)(v16 + 64) = v137;
  *(_QWORD *)&v137 = 0;
  v19 = *(_QWORD *)(v16 + 72);
  *(_QWORD *)(v16 + 72) = *((_QWORD *)&v137 + 1);
  *((_QWORD *)&v137 + 1) = v19;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 80) = v138;
  *(_QWORD *)&v138 = 0;
  *(_QWORD *)(v16 + 88) = *((_QWORD *)&v138 + 1);
  *((_QWORD *)&v138 + 1) = 0;
  v20 = *(_QWORD *)(v16 + 96);
  *(_QWORD *)(v16 + 96) = v139;
  *(_QWORD *)&v139 = v20;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = 0;
  *(_QWORD *)(v16 + 104) = *((_QWORD *)&v139 + 1);
  *((_QWORD *)&v139 + 1) = 0;
  *(_QWORD *)(v16 + 112) = v140;
  *(_QWORD *)&v140 = 0;
  v21 = *(_QWORD *)(v16 + 120);
  *(_QWORD *)(v16 + 120) = *((_QWORD *)&v140 + 1);
  *((_QWORD *)&v140 + 1) = v21;
  *(_QWORD *)(v16 + 128) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_QWORD *)(v16 + 144) = 0;
  *(_QWORD *)(v16 + 128) = v141;
  *(_QWORD *)&v141 = 0;
  *(_QWORD *)(v16 + 136) = *((_QWORD *)&v141 + 1);
  *((_QWORD *)&v141 + 1) = 0;
  v22 = *(_QWORD *)(v16 + 144);
  *(_QWORD *)(v16 + 144) = v142;
  *(_QWORD *)&v142 = v22;
  *(_QWORD *)(v16 + 152) = 0;
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_QWORD *)(v16 + 152) = *((_QWORD *)&v142 + 1);
  *((_QWORD *)&v142 + 1) = 0;
  *(_QWORD *)(v16 + 160) = v143;
  *(_QWORD *)&v143 = 0;
  v23 = *(_QWORD *)(v16 + 168);
  *(_QWORD *)(v16 + 168) = *((_QWORD *)&v143 + 1);
  *((_QWORD *)&v143 + 1) = v23;
  *(_QWORD *)(v16 + 176) = 0;
  *(_QWORD *)(v16 + 184) = 0;
  *(_QWORD *)(v16 + 192) = 0;
  *(_QWORD *)(v16 + 176) = v144;
  *(_QWORD *)&v144 = 0;
  *(_QWORD *)(v16 + 184) = *((_QWORD *)&v144 + 1);
  *((_QWORD *)&v144 + 1) = 0;
  v24 = *(_QWORD *)(v16 + 192);
  *(_QWORD *)(v16 + 192) = v145;
  *(_QWORD *)&v145 = v24;
  *(_QWORD *)(v16 + 200) = 0;
  *(_QWORD *)(v16 + 208) = 0;
  *(_QWORD *)(v16 + 216) = 0;
  *(_QWORD *)(v16 + 200) = *((_QWORD *)&v145 + 1);
  *((_QWORD *)&v145 + 1) = 0;
  *(_QWORD *)(v16 + 208) = v146;
  *(_QWORD *)&v146 = 0;
  v25 = *(_QWORD *)(v16 + 216);
  *(_QWORD *)(v16 + 216) = *((_QWORD *)&v146 + 1);
  *((_QWORD *)&v146 + 1) = v25;
  *(_QWORD *)(v16 + 224) = 0;
  *(_QWORD *)(v16 + 232) = 0;
  *(_QWORD *)(v16 + 240) = 0;
  *(_QWORD *)(v16 + 224) = v147;
  *(_QWORD *)&v147 = 0;
  *(_QWORD *)(v16 + 232) = *((_QWORD *)&v147 + 1);
  *((_QWORD *)&v147 + 1) = 0;
  v26 = *(_QWORD *)(v16 + 240);
  *(_QWORD *)(v16 + 240) = v148;
  *(_QWORD *)&v148 = v26;
  *(_QWORD *)(v16 + 248) = 0;
  *(_QWORD *)(v16 + 256) = 0;
  *(_QWORD *)(v16 + 264) = 0;
  *(_QWORD *)(v16 + 248) = *((_QWORD *)&v148 + 1);
  *((_QWORD *)&v148 + 1) = 0;
  *(_QWORD *)(v16 + 256) = v149;
  *(_QWORD *)&v149 = 0;
  v27 = *(_QWORD *)(v16 + 264);
  *(_QWORD *)(v16 + 264) = *((_QWORD *)&v149 + 1);
  *((_QWORD *)&v149 + 1) = v27;
  *(_QWORD *)(v16 + 272) = 0;
  *(_QWORD *)(v16 + 280) = 0;
  *(_QWORD *)(v16 + 288) = 0;
  *(_QWORD *)(v16 + 272) = v150;
  *(_QWORD *)&v150 = 0;
  *(_QWORD *)(v16 + 280) = *((_QWORD *)&v150 + 1);
  *((_QWORD *)&v150 + 1) = 0;
  v28 = *(_QWORD *)(v16 + 288);
  *(_QWORD *)(v16 + 288) = v151;
  *(_QWORD *)&v151 = v28;
  *(_QWORD *)(v16 + 296) = 0;
  *(_QWORD *)(v16 + 304) = 0;
  *(_QWORD *)(v16 + 312) = 0;
  *(_QWORD *)(v16 + 296) = *((_QWORD *)&v151 + 1);
  *((_QWORD *)&v151 + 1) = 0;
  *(_QWORD *)(v16 + 304) = v152;
  *(_QWORD *)&v152 = 0;
  v29 = *(_QWORD *)(v16 + 312);
  *(_QWORD *)(v16 + 312) = *((_QWORD *)&v152 + 1);
  *((_QWORD *)&v152 + 1) = v29;
  *(_QWORD *)(v16 + 320) = 0;
  *(_QWORD *)(v16 + 328) = 0;
  *(_QWORD *)(v16 + 336) = 0;
  *(_QWORD *)(v16 + 320) = v153;
  *(_QWORD *)&v153 = 0;
  *(_QWORD *)(v16 + 328) = *((_QWORD *)&v153 + 1);
  *((_QWORD *)&v153 + 1) = 0;
  v30 = *(_QWORD *)(v16 + 336);
  *(_QWORD *)(v16 + 336) = v154;
  *(_QWORD *)&v154 = v30;
  *(_QWORD *)(v16 + 344) = 0;
  *(_QWORD *)(v16 + 352) = 0;
  *(_QWORD *)(v16 + 360) = 0;
  *(_QWORD *)(v16 + 344) = *((_QWORD *)&v154 + 1);
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)(v16 + 352) = v155;
  *(_QWORD *)&v155 = 0;
  v31 = *(_QWORD *)(v16 + 360);
  *(_QWORD *)(v16 + 360) = *((_QWORD *)&v155 + 1);
  *((_QWORD *)&v155 + 1) = v31;
  *(_QWORD *)(v16 + 368) = 0;
  *(_QWORD *)(v16 + 376) = 0;
  *(_QWORD *)(v16 + 384) = 0;
  *(_QWORD *)(v16 + 368) = v156;
  *(_QWORD *)&v156 = 0;
  *(_QWORD *)(v16 + 376) = *((_QWORD *)&v156 + 1);
  *((_QWORD *)&v156 + 1) = 0;
  v32 = *(_QWORD *)(v16 + 384);
  *(_QWORD *)(v16 + 384) = v157;
  *(_QWORD *)&v157 = v32;
  *(_QWORD *)(v16 + 392) = 0;
  *(_QWORD *)(v16 + 400) = 0;
  *(_QWORD *)(v16 + 408) = 0;
  *(_QWORD *)(v16 + 392) = *((_QWORD *)&v157 + 1);
  *((_QWORD *)&v157 + 1) = 0;
  *(_QWORD *)(v16 + 400) = v158;
  *(_QWORD *)&v158 = 0;
  v33 = *(_QWORD *)(v16 + 408);
  *(_QWORD *)(v16 + 408) = *((_QWORD *)&v158 + 1);
  *((_QWORD *)&v158 + 1) = v33;
  *(_QWORD *)(v16 + 416) = 0;
  *(_QWORD *)(v16 + 424) = 0;
  *(_QWORD *)(v16 + 432) = 0;
  *(_QWORD *)(v16 + 416) = v159;
  *(_QWORD *)&v159 = 0;
  *(_QWORD *)(v16 + 424) = *((_QWORD *)&v159 + 1);
  *((_QWORD *)&v159 + 1) = 0;
  v34 = *(_QWORD *)(v16 + 432);
  *(_QWORD *)(v16 + 432) = v160;
  *(_QWORD *)&v160 = v34;
  *(_QWORD *)(v16 + 440) = *((_QWORD *)&v160 + 1);
  ++*(_QWORD *)(v7 + 2000);
  ++*(_DWORD *)(v7 + 2008);
  if ((_QWORD)v159)
    *(_QWORD *)&v159 = 0;
  re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)&v147);
  if (*((_QWORD *)&v145 + 1))
  {
    if ((_QWORD)v146)
    {
      (*(void (**)(void))(**((_QWORD **)&v145 + 1) + 40))();
      v146 = 0uLL;
    }
    *((_QWORD *)&v145 + 1) = 0;
  }
  re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)((char *)&v133 + 8));
  v35 = *(_QWORD *)(a1 + 2000) - 1;
  v36 = *(_QWORD *)(a1 + 2016);
  v37 = v36 + 448 * v35;
  *(_QWORD *)v37 = a2;
  *(_QWORD *)(v37 + 440) = a4;
  v38 = *(_QWORD *)(a1 + 1984);
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 8), v38, *(_QWORD *)(a3 + 8));
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 32), v38, *(_QWORD *)(a3 + 24));
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 56), v38, *(_QWORD *)(a3 + 40));
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 80), v38, *(_QWORD *)(a3 + 56));
  v128 = (_QWORD *)(v37 + 104);
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 104), v38, *(_QWORD *)(a3 + 72));
  v130 = (_anonymous_namespace_ *)(v37 + 128);
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 128), v38, *(_QWORD *)(a3 + 88));
  v39 = (_QWORD *)(v37 + 152);
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 152), v38, *(_QWORD *)(a3 + 104));
  v127 = (_QWORD *)(v37 + 176);
  v40 = (_anonymous_namespace_ *)re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v37 + 176), v38, *(_QWORD *)(a3 + 120));
  if (!*(_QWORD *)(v37 + 8))
  {
    v42 = *(_QWORD *)(a3 + 8);
    if (!v42)
      goto LABEL_25;
  }
  v43 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(v37 + 16) != v43)
  {
LABEL_161:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_162;
  }
  if (v43)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v37 + 24), *(const void **)a3, 8 * v43);
LABEL_25:
  if (!*(_QWORD *)(v37 + 32))
  {
    v44 = *(_QWORD *)(a3 + 24);
    if (!v44)
      goto LABEL_31;
  }
  v45 = *(_QWORD *)(a3 + 24);
  if (*(_QWORD *)(v36 + 448 * v35 + 40) != v45)
  {
LABEL_162:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_163;
  }
  if (v45)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v36 + 448 * v35 + 48), *(const void **)(a3 + 16), 8 * v45);
LABEL_31:
  if (!*(_QWORD *)(v37 + 56))
  {
    v46 = *(_QWORD *)(a3 + 40);
    if (!v46)
      goto LABEL_37;
  }
  v47 = *(_QWORD *)(a3 + 40);
  if (*(_QWORD *)(v36 + 448 * v35 + 64) != v47)
  {
LABEL_163:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_164;
  }
  if (v47)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v36 + 448 * v35 + 72), *(const void **)(a3 + 32), 8 * v47);
LABEL_37:
  if (!*(_QWORD *)(v37 + 80))
  {
    v48 = *(_QWORD *)(a3 + 56);
    if (!v48)
      goto LABEL_43;
  }
  v49 = *(_QWORD *)(a3 + 56);
  if (*(_QWORD *)(v36 + 448 * v35 + 88) != v49)
  {
LABEL_164:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_165;
  }
  if (v49)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v36 + 448 * v35 + 96), *(const void **)(a3 + 48), 8 * v49);
LABEL_43:
  if (!*v128)
  {
    v50 = *(_QWORD *)(a3 + 72);
    if (!v50)
      goto LABEL_49;
  }
  v51 = *(_QWORD *)(a3 + 72);
  if (*(_QWORD *)(v36 + 448 * v35 + 112) != v51)
  {
LABEL_165:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_166;
  }
  if (v51)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v36 + 448 * v35 + 120), *(const void **)(a3 + 64), 8 * v51);
LABEL_49:
  if (!*(_QWORD *)v130)
  {
    v52 = *(_QWORD *)(a3 + 88);
    if (!v52)
      goto LABEL_55;
  }
  v53 = *(_QWORD *)(a3 + 88);
  if (*(_QWORD *)(v36 + 448 * v35 + 136) != v53)
  {
LABEL_166:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_167;
  }
  if (v53)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v36 + 448 * v35 + 144), *(const void **)(a3 + 80), 8 * v53);
LABEL_55:
  if (!*v39)
  {
    v54 = *(_QWORD *)(a3 + 104);
    if (!v54)
      goto LABEL_61;
  }
  v55 = *(_QWORD *)(a3 + 104);
  if (*(_QWORD *)(v36 + 448 * v35 + 160) != v55)
  {
LABEL_167:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_168;
  }
  if (v55)
    v40 = (_anonymous_namespace_ *)memmove(*(void **)(v36 + 448 * v35 + 168), *(const void **)(a3 + 96), 8 * v55);
LABEL_61:
  if (!*v127)
  {
    v56 = *(_QWORD *)(a3 + 120);
    if (!v56)
      goto LABEL_67;
  }
  v57 = *(_QWORD *)(a3 + 120);
  if (*(_QWORD *)(v36 + 448 * v35 + 184) != v57)
  {
LABEL_168:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
LABEL_169:
    re::internal::assertLog((re::internal *)4, v60, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
  }
  if (v57)
    memmove(*(void **)(v36 + 448 * v35 + 192), *(const void **)(a3 + 112), 8 * v57);
LABEL_67:
  v58 = (_QWORD *)(v36 + 448 * v35 + 200);
  v59 = (_anonymous_namespace_ *)re::FixedArray<re::EvaluationSRT>::init<>(v58, *(_QWORD *)v129, *(_QWORD *)(a3 + 136));
  if (!*v58)
  {
    v61 = *(_QWORD *)(a3 + 136);
    v62 = a1;
    if (!v61)
      goto LABEL_73;
  }
  v63 = *(_QWORD *)(a3 + 136);
  v62 = a1;
  if (*(_QWORD *)(v36 + 448 * v35 + 208) != v63)
    goto LABEL_169;
  if (v63)
  {
    memmove(*(void **)(v36 + 448 * v35 + 216), *(const void **)(a3 + 128), 24 * v63);
    v62 = a1;
  }
LABEL_73:
  v64 = v36;
  v65 = (_QWORD *)(v36 + 448 * v35 + 224);
  v66 = v62;
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>(v65, *(_QWORD *)(v62 + 1984), *(_QWORD *)(a3 + 152));
  v131 = (_anonymous_namespace_ *)(v66 + 1664);
  v67 = v35;
  if (*(_QWORD *)(a3 + 152))
  {
    v68 = 0;
    v69 = (char *)&v133 + 8;
    v70 = v64 + 448 * v35;
    v71 = (uint64_t *)(v70 + 232);
    v72 = (uint64_t *)(v70 + 240);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add(v131, (uint64_t)&v133);
      v74 = *(_QWORD *)(a1 + 1680);
      v75 = (uint64_t *)(v74 - 1);
      if (!v74)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1696) + 32 * (_QWORD)v75 + 8) = v35;
      v35 = *v71;
      if (*v71 <= (unint64_t)v68)
        goto LABEL_132;
      *(_QWORD *)(*v72 + 8 * (_QWORD)v68) = v75;
      v76 = *(_QWORD *)(a3 + 152);
      if (v76 <= (unint64_t)v68)
        goto LABEL_133;
      *(_QWORD *)(*(_QWORD *)(a3 + 144) + 8 * (_QWORD)v68) = v75;
      v68 = (uint64_t *)((char *)v68 + 1);
      v35 = v67;
      if ((unint64_t)v68 >= *(_QWORD *)(a3 + 152))
        goto LABEL_79;
    }
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v75;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_132:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = v68;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_133:
    re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v68, v76);
    _os_crash();
    __break(1u);
    goto LABEL_134;
  }
LABEL_79:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 248), *(_QWORD *)v129, *(_QWORD *)(a3 + 168));
  if (*(_QWORD *)(a3 + 168))
  {
    v69 = 0;
    v77 = v64 + 448 * v35;
    v72 = (uint64_t *)(v77 + 256);
    v78 = (_QWORD *)(v77 + 264);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1704), (uint64_t)&v133);
      v80 = *(_QWORD *)(a1 + 1720);
      v71 = (uint64_t *)(v80 - 1);
      if (!v80)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1736) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_135;
      *(_QWORD *)(*v78 + 8 * (_QWORD)v69) = v71;
      v81 = *(_QWORD *)(a3 + 168);
      if (v81 <= (unint64_t)v69)
        goto LABEL_136;
      *(_QWORD *)(*(_QWORD *)(a3 + 160) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 168))
        goto LABEL_85;
    }
LABEL_134:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_135:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_136:
    re::internal::assertLog((re::internal *)6, v79, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v81);
    _os_crash();
    __break(1u);
    goto LABEL_137;
  }
LABEL_85:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 272), *(_QWORD *)v129, *(_QWORD *)(a3 + 184));
  if (*(_QWORD *)(a3 + 184))
  {
    v69 = 0;
    v82 = v64 + 448 * v35;
    v72 = (uint64_t *)(v82 + 280);
    v83 = (_QWORD *)(v82 + 288);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1744), (uint64_t)&v133);
      v85 = *(_QWORD *)(a1 + 1760);
      v71 = (uint64_t *)(v85 - 1);
      if (!v85)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1776) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_138;
      *(_QWORD *)(*v83 + 8 * (_QWORD)v69) = v71;
      v86 = *(_QWORD *)(a3 + 184);
      if (v86 <= (unint64_t)v69)
        goto LABEL_139;
      *(_QWORD *)(*(_QWORD *)(a3 + 176) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 184))
        goto LABEL_91;
    }
LABEL_137:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_138:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_139:
    re::internal::assertLog((re::internal *)6, v84, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v86);
    _os_crash();
    __break(1u);
    goto LABEL_140;
  }
LABEL_91:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 296), *(_QWORD *)v129, *(_QWORD *)(a3 + 200));
  if (*(_QWORD *)(a3 + 200))
  {
    v69 = 0;
    v87 = v64 + 448 * v35;
    v72 = (uint64_t *)(v87 + 304);
    v88 = (_QWORD *)(v87 + 312);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1784), (uint64_t)&v133);
      v90 = *(_QWORD *)(a1 + 1800);
      v71 = (uint64_t *)(v90 - 1);
      if (!v90)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1816) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_141;
      *(_QWORD *)(*v88 + 8 * (_QWORD)v69) = v71;
      v91 = *(_QWORD *)(a3 + 200);
      if (v91 <= (unint64_t)v69)
        goto LABEL_142;
      *(_QWORD *)(*(_QWORD *)(a3 + 192) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 200))
        goto LABEL_97;
    }
LABEL_140:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_141:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_142:
    re::internal::assertLog((re::internal *)6, v89, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v91);
    _os_crash();
    __break(1u);
    goto LABEL_143;
  }
LABEL_97:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 320), *(_QWORD *)v129, *(_QWORD *)(a3 + 216));
  if (*(_QWORD *)(a3 + 216))
  {
    v69 = 0;
    v92 = v64 + 448 * v35;
    v72 = (uint64_t *)(v92 + 328);
    v93 = (_QWORD *)(v92 + 336);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1824), (uint64_t)&v133);
      v95 = *(_QWORD *)(a1 + 1840);
      v71 = (uint64_t *)(v95 - 1);
      if (!v95)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1856) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_144;
      *(_QWORD *)(*v93 + 8 * (_QWORD)v69) = v71;
      v96 = *(_QWORD *)(a3 + 216);
      if (v96 <= (unint64_t)v69)
        goto LABEL_145;
      *(_QWORD *)(*(_QWORD *)(a3 + 208) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 216))
        goto LABEL_103;
    }
LABEL_143:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_144:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_145:
    re::internal::assertLog((re::internal *)6, v94, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v96);
    _os_crash();
    __break(1u);
    goto LABEL_146;
  }
LABEL_103:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 344), *(_QWORD *)v129, *(_QWORD *)(a3 + 232));
  if (*(_QWORD *)(a3 + 232))
  {
    v69 = 0;
    v97 = v64 + 448 * v35;
    v72 = (uint64_t *)(v97 + 352);
    v98 = (_QWORD *)(v97 + 360);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1864), (uint64_t)&v133);
      v100 = *(_QWORD *)(a1 + 1880);
      v71 = (uint64_t *)(v100 - 1);
      if (!v100)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_147;
      *(_QWORD *)(*v98 + 8 * (_QWORD)v69) = v71;
      v101 = *(_QWORD *)(a3 + 232);
      if (v101 <= (unint64_t)v69)
        goto LABEL_148;
      *(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 232))
        goto LABEL_109;
    }
LABEL_146:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_147:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_148:
    re::internal::assertLog((re::internal *)6, v99, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v101);
    _os_crash();
    __break(1u);
    goto LABEL_149;
  }
LABEL_109:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 368), *(_QWORD *)v129, *(_QWORD *)(a3 + 248));
  if (*(_QWORD *)(a3 + 248))
  {
    v69 = 0;
    v102 = v64 + 448 * v35;
    v72 = (uint64_t *)(v102 + 376);
    v103 = (_QWORD *)(v102 + 384);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1904), (uint64_t)&v133);
      v105 = *(_QWORD *)(a1 + 1920);
      v71 = (uint64_t *)(v105 - 1);
      if (!v105)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1936) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_150;
      *(_QWORD *)(*v103 + 8 * (_QWORD)v69) = v71;
      v106 = *(_QWORD *)(a3 + 248);
      if (v106 <= (unint64_t)v69)
        goto LABEL_151;
      *(_QWORD *)(*(_QWORD *)(a3 + 240) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 248))
        goto LABEL_115;
    }
LABEL_149:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_150:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_151:
    re::internal::assertLog((re::internal *)6, v104, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v106);
    _os_crash();
    __break(1u);
    goto LABEL_152;
  }
LABEL_115:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 448 * v35 + 392), *(_QWORD *)v129, *(_QWORD *)(a3 + 264));
  if (*(_QWORD *)(a3 + 264))
  {
    v69 = 0;
    v107 = v64 + 448 * v35;
    v72 = (uint64_t *)(v107 + 400);
    v108 = (_QWORD *)(v107 + 408);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1944), (uint64_t)&v133);
      v110 = *(_QWORD *)(a1 + 1960);
      v71 = (uint64_t *)(v110 - 1);
      if (!v110)
        break;
      *(_QWORD *)(*(_QWORD *)(a1 + 1976) + 32 * (_QWORD)v71 + 8) = v35;
      v35 = *v72;
      if (*v72 <= (unint64_t)v69)
        goto LABEL_153;
      *(_QWORD *)(*v108 + 8 * (_QWORD)v69) = v71;
      v111 = *(_QWORD *)(a3 + 264);
      if (v111 <= (unint64_t)v69)
        goto LABEL_154;
      *(_QWORD *)(*(_QWORD *)(a3 + 256) + 8 * (_QWORD)v69++) = v71;
      v35 = v67;
      if ((unint64_t)v69 >= *(_QWORD *)(a3 + 264))
        goto LABEL_121;
    }
LABEL_152:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 789;
    v165 = 2048;
    v166 = v71;
    v167 = 2048;
    v168 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_153:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = (uint64_t *)v69;
    v167 = 2048;
    v168 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_154:
    re::internal::assertLog((re::internal *)6, v109, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v69, v111);
    _os_crash();
    __break(1u);
    goto LABEL_155;
  }
LABEL_121:
  result = (uint64_t)re::FixedArray<re::EvaluationSRT>::init<>((_QWORD *)(v64 + 448 * v35 + 416), *(_QWORD *)v129, *(_QWORD *)(a3 + 280));
  if (*(_QWORD *)(a3 + 280))
  {
    v113 = 0;
    v72 = 0;
    v114 = (_anonymous_namespace_ *)(a1 + 1944);
    v115 = v64 + 448 * v67;
    v116 = (uint64_t *)(v115 + 424);
    v117 = (_QWORD *)(v115 + 432);
    while (1)
    {
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add(v114, (uint64_t)&v133);
      v118 = *(_QWORD *)(a1 + 1960) - 1;
      *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>((uint64_t)v131, v118) + 8) = v67;
      v64 = *v116;
      if (*v116 <= (unint64_t)v72)
        break;
      *(_QWORD *)(*v117 + v113) = v118;
      v120 = *(_QWORD *)(a3 + 280);
      if (v120 <= (unint64_t)v72)
        goto LABEL_156;
      *(_QWORD *)(*(_QWORD *)(a3 + 272) + v113) = v118;
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 1864), (uint64_t)&v133);
      v121 = *(_QWORD *)(a1 + 1880) - 1;
      *(_QWORD *)(re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>((uint64_t)v131, v121) + 8) = v67;
      v64 = *v116;
      if (*v116 <= (unint64_t)v72)
        goto LABEL_157;
      *(_QWORD *)(*v117 + v113 + 8) = v121;
      v123 = *(_QWORD *)(a3 + 280);
      if (v123 <= (unint64_t)v72)
        goto LABEL_158;
      *(_QWORD *)(*(_QWORD *)(a3 + 272) + v113 + 8) = v121;
      LODWORD(v133) = 76;
      v134 = 0uLL;
      *((_QWORD *)&v133 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add(v114, (uint64_t)&v133);
      v124 = *(_QWORD *)(a1 + 1960) - 1;
      result = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>((uint64_t)v131, v124);
      *(_QWORD *)(result + 8) = v67;
      v64 = *v116;
      if (*v116 <= (unint64_t)v72)
        goto LABEL_159;
      *(_QWORD *)(*v117 + v113 + 16) = v124;
      v126 = *(_QWORD *)(a3 + 280);
      if (v126 <= (unint64_t)v72)
        goto LABEL_160;
      *(_QWORD *)(*(_QWORD *)(a3 + 272) + v113 + 16) = v124;
      v72 = (uint64_t *)((char *)v72 + 1);
      v113 += 24;
      if ((unint64_t)v72 >= *(_QWORD *)(a3 + 280))
        return result;
    }
LABEL_155:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = v72;
    v167 = 2048;
    v168 = v64;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_156:
    re::internal::assertLog((re::internal *)6, v119, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v72, v120);
    _os_crash();
    __break(1u);
LABEL_157:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = v72;
    v167 = 2048;
    v168 = v64;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v72, v123);
    _os_crash();
    __break(1u);
LABEL_159:
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v161 = 136315906;
    v162 = "operator[]";
    v163 = 1024;
    v164 = 468;
    v165 = 2048;
    v166 = v72;
    v167 = 2048;
    v168 = v64;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_160:
    re::internal::assertLog((re::internal *)6, v125, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v72, v126);
    _os_crash();
    __break(1u);
    goto LABEL_161;
  }
  return result;
}

_QWORD *re::FixedArray<re::EvaluationSRT>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = 24 * a3;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = result;
  if (a3 != 1)
  {
    result = memset(result, 255, v5 - 24);
    v7 = (_QWORD *)((char *)v7 + v5 - 24);
  }
  v7[1] = -1;
  v7[2] = -1;
  *v7 = -1;
  return result;
}

unint64_t re::EvaluationTree::appendEvaluationCommand(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = a4;
  v25 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v7 = (unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * a2 + 10;
    v8 = a4;
    while (1)
    {
      v10 = *v7++;
      v9 = v10;
      if (v10 >= 8)
        break;
      if (!--v8)
        goto LABEL_5;
    }
LABEL_20:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "appendEvaluationCommand", 1008, v9, v18, v19);
    _os_crash();
    __break(1u);
  }
LABEL_5:
  switch(LOBYTE((&re::kEvaluationCommandDescriptions)[2 * a2 + 1]))
  {
    case 0:
      v11 = a1 + 208;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 208), (uint64_t)&v20);
      v12 = a1 + 210;
      break;
    case 1:
      v11 = a1 + 213;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 213), (uint64_t)&v20);
      v12 = a1 + 215;
      break;
    case 2:
      v11 = a1 + 218;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 218), (uint64_t)&v20);
      v12 = a1 + 220;
      break;
    case 3:
      v11 = a1 + 223;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 223), (uint64_t)&v20);
      v12 = a1 + 225;
      break;
    case 4:
      v11 = a1 + 228;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 228), (uint64_t)&v20);
      v12 = a1 + 230;
      break;
    case 5:
      v11 = a1 + 233;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 233), (uint64_t)&v20);
      v12 = a1 + 235;
      break;
    case 6:
      v11 = a1 + 238;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 238), (uint64_t)&v20);
      v12 = a1 + 240;
      break;
    case 7:
      v11 = a1 + 243;
      LODWORD(v20) = a2;
      v21 = 0uLL;
      *((_QWORD *)&v20 + 1) = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a1 + 243), (uint64_t)&v20);
      v12 = a1 + 245;
      break;
    default:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "appendEvaluationCommand", 1018, LOBYTE((&re::kEvaluationCommandDescriptions)[2 * a2 + 1]));
      _os_crash();
      __break(1u);
      JUMPOUT(0x225088DFCLL);
  }
  v13 = *v12;
  v14 = v13 - 1;
  if (v4)
  {
    v15 = 32 * v13 - 24;
    while (v11[2] > v14)
    {
      v16 = *a3++;
      *(_QWORD *)(v11[4] + v15) = v16;
      v15 += 8;
      if (!--v4)
        return v14;
    }
    v18 = 0;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v19) = 136315906;
    *(_QWORD *)((char *)&v19 + 4) = "operator[]";
    WORD6(v19) = 1024;
    HIWORD(v19) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_20;
  }
  return v14;
}

uint64_t re::EvaluationTree::getInputValue<re::Vector3<float>>(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v3 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    while (a1[118] > v3)
    {
      a2 = *(_QWORD *)(a1[120] + 8 * v3);
      v3 = a2 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_4;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_4:
  v4 = a1[38];
  if (!v4)
    return 0;
  v5 = (_QWORD *)a1[40];
  v6 = &v5[v4];
  v7 = v5;
  do
  {
    v8 = v4 >> 1;
    v9 = &v7[v4 >> 1];
    v11 = *v9;
    v10 = v9 + 1;
    v4 += ~(v4 >> 1);
    if (v11 < a2)
      v7 = v10;
    else
      v4 = v8;
  }
  while (v4);
  if (v7 == v6 || *v7 != a2)
    return 0;
  v12 = v7 - v5;
  if (a1[78] <= v12)
    goto LABEL_16;
  *a3 = *(_OWORD *)(a1[80] + 16 * v12);
  return 1;
}

uint64_t re::EvaluationTree::getInputValue<re::Quaternion<float>>(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v3 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    while (a1[108] > v3)
    {
      a2 = *(_QWORD *)(a1[110] + 8 * v3);
      v3 = a2 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_4;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_4:
  v4 = a1[28];
  if (!v4)
    return 0;
  v5 = (_QWORD *)a1[30];
  v6 = &v5[v4];
  v7 = v5;
  do
  {
    v8 = v4 >> 1;
    v9 = &v7[v4 >> 1];
    v11 = *v9;
    v10 = v9 + 1;
    v4 += ~(v4 >> 1);
    if (v11 < a2)
      v7 = v10;
    else
      v4 = v8;
  }
  while (v4);
  if (v7 == v6 || *v7 != a2)
    return 0;
  v12 = v7 - v5;
  if (a1[68] <= v12)
    goto LABEL_16;
  *a3 = *(_OWORD *)(a1[70] + 16 * v12);
  return 1;
}

unint64_t re::EvaluationTree::getCallbackData(re::EvaluationTree *this, unint64_t a2)
{
  if (*((_QWORD *)this + 250) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 252) + 448 * a2;
}

_QWORD *re::EvaluationTree::resolveAliasRegisters(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  re::EvaluationTree::resolveAliasRegistersForType<int>(a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<unsigned int>(a1, a2, (uint64_t)a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<float>(a1, a2, (uint64_t)a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix3x3<float>>(a1, a2, (uint64_t)a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix4x4<float>>(a1, a2, (uint64_t)a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Quaternion<float>>(a1, a2, (uint64_t)a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector2<float>>(a1, a2, (uint64_t)a3, a4);
  return re::EvaluationTree::resolveAliasRegistersForType<re::Vector3<float>>(a1, a2, (uint64_t)a3, a4);
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<int>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4, a2, a3[1]);
  if (a3[1])
  {
    v8 = 0;
    v9 = *a3;
    v10 = a4[2];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 664) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[1] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < a3[1]);
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 3, a2, *(_QWORD *)(a3 + 24));
  if (*(_QWORD *)(a3 + 24))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = a4[5];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 704) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 720) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[4] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 24));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 3, a2, *(_QWORD *)(a3 + 32));
  if (*(_QWORD *)(a3 + 32))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 40);
    v10 = a4[5];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 704) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 720) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[4] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 32));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<float>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 6, a2, *(_QWORD *)(a3 + 40));
  if (*(_QWORD *)(a3 + 40))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 32);
    v10 = a4[8];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 744) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 760) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[7] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 40));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 6, a2, *(_QWORD *)(a3 + 56));
  if (*(_QWORD *)(a3 + 56))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 64);
    v10 = a4[8];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 744) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 760) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[7] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 56));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<re::Matrix3x3<float>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 9, a2, *(_QWORD *)(a3 + 56));
  if (*(_QWORD *)(a3 + 56))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 48);
    v10 = a4[11];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 784) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[10] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 56));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 9, a2, *(_QWORD *)(a3 + 80));
  if (*(_QWORD *)(a3 + 80))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 88);
    v10 = a4[11];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 784) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[10] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 80));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<re::Matrix4x4<float>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 12, a2, *(_QWORD *)(a3 + 72));
  if (*(_QWORD *)(a3 + 72))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 64);
    v10 = a4[14];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 824) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[13] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 72));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 12, a2, *(_QWORD *)(a3 + 104));
  if (*(_QWORD *)(a3 + 104))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 112);
    v10 = a4[14];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 824) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[13] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 104));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<re::Quaternion<float>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 15, a2, *(_QWORD *)(a3 + 88));
  if (*(_QWORD *)(a3 + 88))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 80);
    v10 = a4[17];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 864) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[16] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 88));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 15, a2, *(_QWORD *)(a3 + 128));
  if (*(_QWORD *)(a3 + 128))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 136);
    v10 = a4[17];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 864) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[16] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 128));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<re::Vector2<float>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 18, a2, *(_QWORD *)(a3 + 104));
  if (*(_QWORD *)(a3 + 104))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 96);
    v10 = a4[20];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 904) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 920) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[19] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 104));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 18, a2, *(_QWORD *)(a3 + 152));
  if (*(_QWORD *)(a3 + 152))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 160);
    v10 = a4[20];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 904) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 920) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[19] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 152));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<re::Vector3<float>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 21, a2, *(_QWORD *)(a3 + 120));
  if (*(_QWORD *)(a3 + 120))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 112);
    v10 = a4[23];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 944) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[22] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 120));
  }
  return result;
}

{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4 + 21, a2, *(_QWORD *)(a3 + 176));
  if (*(_QWORD *)(a3 + 176))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 184);
    v10 = a4[23];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 944) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[22] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 176));
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegisters(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;

  re::EvaluationTree::resolveAliasRegistersForType<int>((uint64_t)a1, a2, (uint64_t *)a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<unsigned int>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<float>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix3x3<float>>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix4x4<float>>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Quaternion<float>>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector2<float>>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector3<float>>((uint64_t)a1, a2, a3, a4);
  re::EvaluationTree::resolveAliasRegistersForType(a1, a2, *(_QWORD *)(a3 + 128), *(_QWORD *)(a3 + 136), a5);
  re::EvaluationTree::resolveAliasRegistersForType<int>((uint64_t)a1, a2, (uint64_t *)(a3 + 144), a6);
  re::EvaluationTree::resolveAliasRegistersForType<unsigned int>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType<float>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix3x3<float>>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix4x4<float>>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType<re::Quaternion<float>>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector2<float>>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector3<float>>((uint64_t)a1, a2, a3 + 144, a6);
  re::EvaluationTree::resolveAliasRegistersForType(a1, a2, *(_QWORD *)(a3 + 272), *(_QWORD *)(a3 + 280), a7);
  re::SliceRegisterTable::operator=<re::FixedRegisterTable>(a8, a4);
  v16 = a5[1];
  a8[16] = a5[2];
  a8[17] = v16;
  result = re::SliceRegisterTable::operator=<re::FixedRegisterTable>(a8 + 18, a6);
  v18 = a7[1];
  a8[34] = a7[2];
  a8[35] = v18;
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  result = re::FixedArray<re::EvaluationSRT>::init<>(a5, a2, a4);
  if (a4)
  {
    v10 = 0;
    v11 = a5[2];
    while (1)
    {
      v12 = *(_QWORD *)(a3 + 24 * v10);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if (v12 - 0x7FFFFFFFFFFFFFFFLL >= 0)
        break;
LABEL_6:
      if (a5[1] <= v10)
        goto LABEL_20;
      *(_QWORD *)(v11 + 24 * v10) = v12;
      v14 = *(_QWORD *)(a3 + 24 * v10 + 8);
      v15 = v14 - 0x7FFFFFFFFFFFFFFFLL;
      if (v14 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (a1[108] > v15)
        {
          v14 = *(_QWORD *)(a1[110] + 8 * v15);
          v15 = v14 - 0x7FFFFFFFFFFFFFFFLL;
          if (v14 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_10;
        }
LABEL_18:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_19:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_21:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_10:
      if (a5[1] <= v10)
        goto LABEL_21;
      *(_QWORD *)(v11 + 24 * v10 + 8) = v14;
      v16 = *(_QWORD *)(a3 + 24 * v10 + 16);
      v17 = v16 - 0x7FFFFFFFFFFFFFFFLL;
      if (v16 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (a1[118] > v17)
        {
          v16 = *(_QWORD *)(a1[120] + 8 * v17);
          v17 = v16 - 0x7FFFFFFFFFFFFFFFLL;
          if (v16 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_14;
        }
        goto LABEL_19;
      }
LABEL_14:
      if (a5[1] <= v10)
        goto LABEL_22;
      *(_QWORD *)(v11 + 24 * v10++ + 16) = v16;
      if (v10 == a4)
        return result;
    }
    while (a1[118] > v13)
    {
      v12 = *(_QWORD *)(a1[120] + 8 * v13);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if (v12 - 0x7FFFFFFFFFFFFFFFLL < 0)
        goto LABEL_6;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

_QWORD *re::EvaluationTree::resolveAliasRegisters(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;

  *a4 = *a3;
  a4[55] = a3[55];
  v8 = (uint64_t)(a3 + 1);
  v9 = a4 + 1;
  re::EvaluationTree::resolveAliasRegistersForType<int>((uint64_t)a1, a2, (uint64_t)(a3 + 1), a4 + 1);
  re::EvaluationTree::resolveAliasRegistersForType<unsigned int>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType<float>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix3x3<float>>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix4x4<float>>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType<re::Quaternion<float>>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector2<float>>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector3<float>>((uint64_t)a1, a2, v8, v9);
  re::EvaluationTree::resolveAliasRegistersForType(a1, a2, a3[27], a3[26], a4 + 25);
  re::EvaluationTree::resolveAliasRegistersForType<int>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<unsigned int>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<float>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix3x3<float>>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<re::Matrix4x4<float>>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<re::Quaternion<float>>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector2<float>>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  re::EvaluationTree::resolveAliasRegistersForType<re::Vector3<float>>((uint64_t)a1, a2, (uint64_t)(a3 + 28), a4 + 28);
  return re::EvaluationTree::resolveAliasRegistersForType(a1, a2, a3[54], a3[53], a4 + 52);
}

_QWORD *re::EvaluationTree::resolveAliasRegistersForType<int>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a4, a2, *(_QWORD *)(a3 + 8));
  if (*(_QWORD *)(a3 + 8))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = a4[2];
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
      if (v11 - 0x7FFFFFFFFFFFFFFFLL >= 0)
      {
        while (*(_QWORD *)(a1 + 664) > v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * v12);
          v12 = v11 - 0x7FFFFFFFFFFFFFFFLL;
          if (v11 - 0x7FFFFFFFFFFFFFFFLL < 0)
            goto LABEL_6;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_6:
      if (a4[1] <= v8)
        goto LABEL_10;
      *(_QWORD *)(v10 + 8 * v8++) = v11;
    }
    while (v8 < *(_QWORD *)(a3 + 8));
  }
  return result;
}

uint64_t *re::BucketArray<re::EvaluationBranchGroupData,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 5568, 0);
        result = (uint64_t *)re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result;
  if (!*(_QWORD *)result)
  {
    v7 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::setCapacity(v1, v7);
    *((_DWORD *)v1 + 4) += 2;
    return result;
  }
  v2 = *((_QWORD *)result + 1);
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    v4 = v2 + 1;
    if (v4 < 3)
      return result;
    v6 = 4;
    goto LABEL_12;
  }
  v3 = *((_QWORD *)result + 3);
  v5 = v2 >= v3;
  v4 = v2 + 1;
  v5 = !v5 || v3 >= v4;
  if (!v5)
  {
    v6 = 2 * v3;
LABEL_12:
    if (v6 <= v4)
      v8 = v4;
    else
      v8 = v6;
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::EvaluationBranchGroupData *,2ul>::setCapacity(result, v8);
  }
  return result;
}

_QWORD *re::DynamicArray<re::EvaluationCallbackData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationCallbackData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x1C0uLL))
        {
          v2 = 448 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 448 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 448, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 448 * v9;
        do
        {
          v12 = (_QWORD *)(v8 + v10);
          re::EvaluationCallbackData::EvaluationCallbackData(&v7[v10 / 8], (_QWORD *)(v8 + v10));
          v13 = *(_QWORD *)(v8 + v10 + 416);
          if (v13)
          {
            if (v12[53])
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v8 + v10 + 432));
              v12[53] = 0;
              v12[54] = 0;
            }
            v12[52] = 0;
          }
          re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v12 + 28));
          v14 = v12[25];
          if (v14)
          {
            if (*(_QWORD *)(v8 + v10 + 208))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v8 + v10 + 216));
              *(_QWORD *)(v8 + v10 + 208) = 0;
              *(_QWORD *)(v8 + v10 + 216) = 0;
            }
            v12[25] = 0;
          }
          re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v8 + v10 + 8));
          v10 += 448;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

_QWORD *re::EvaluationCallbackData::EvaluationCallbackData(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  v2 = a2[2];
  result[1] = a2[1];
  result[2] = v2;
  a2[1] = 0;
  a2[2] = 0;
  v3 = result[3];
  result[3] = a2[3];
  a2[3] = v3;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  v4 = a2[5];
  result[4] = a2[4];
  result[5] = v4;
  a2[4] = 0;
  a2[5] = 0;
  v5 = result[6];
  result[6] = a2[6];
  a2[6] = v5;
  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  v6 = a2[8];
  result[7] = a2[7];
  result[8] = v6;
  a2[7] = 0;
  a2[8] = 0;
  v7 = result[9];
  result[9] = a2[9];
  a2[9] = v7;
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  v8 = a2[11];
  result[10] = a2[10];
  result[11] = v8;
  a2[10] = 0;
  a2[11] = 0;
  v9 = result[12];
  result[12] = a2[12];
  a2[12] = v9;
  result[13] = 0;
  result[14] = 0;
  result[15] = 0;
  v10 = a2[14];
  result[13] = a2[13];
  result[14] = v10;
  a2[13] = 0;
  a2[14] = 0;
  v11 = result[15];
  result[15] = a2[15];
  a2[15] = v11;
  result[16] = 0;
  result[17] = 0;
  result[18] = 0;
  v12 = a2[17];
  result[16] = a2[16];
  result[17] = v12;
  a2[16] = 0;
  a2[17] = 0;
  v13 = result[18];
  result[18] = a2[18];
  a2[18] = v13;
  result[19] = 0;
  result[20] = 0;
  result[21] = 0;
  v14 = a2[20];
  result[19] = a2[19];
  result[20] = v14;
  a2[19] = 0;
  a2[20] = 0;
  v15 = result[21];
  result[21] = a2[21];
  a2[21] = v15;
  result[22] = 0;
  result[23] = 0;
  result[24] = 0;
  v16 = a2[23];
  result[22] = a2[22];
  result[23] = v16;
  a2[22] = 0;
  a2[23] = 0;
  v17 = result[24];
  result[24] = a2[24];
  a2[24] = v17;
  result[25] = 0;
  result[26] = 0;
  result[27] = 0;
  v18 = a2[26];
  result[25] = a2[25];
  result[26] = v18;
  a2[25] = 0;
  a2[26] = 0;
  v19 = result[27];
  result[27] = a2[27];
  a2[27] = v19;
  result[28] = 0;
  result[29] = 0;
  result[30] = 0;
  v20 = a2[29];
  result[28] = a2[28];
  result[29] = v20;
  a2[28] = 0;
  a2[29] = 0;
  v21 = result[30];
  result[30] = a2[30];
  a2[30] = v21;
  result[31] = 0;
  result[32] = 0;
  result[33] = 0;
  v22 = a2[32];
  result[31] = a2[31];
  result[32] = v22;
  a2[31] = 0;
  a2[32] = 0;
  v23 = result[33];
  result[33] = a2[33];
  a2[33] = v23;
  result[34] = 0;
  result[35] = 0;
  result[36] = 0;
  v24 = a2[35];
  result[34] = a2[34];
  result[35] = v24;
  a2[34] = 0;
  a2[35] = 0;
  v25 = result[36];
  result[36] = a2[36];
  a2[36] = v25;
  result[37] = 0;
  result[38] = 0;
  result[39] = 0;
  v26 = a2[38];
  result[37] = a2[37];
  result[38] = v26;
  a2[37] = 0;
  a2[38] = 0;
  v27 = result[39];
  result[39] = a2[39];
  a2[39] = v27;
  result[40] = 0;
  result[41] = 0;
  result[42] = 0;
  v28 = a2[41];
  result[40] = a2[40];
  result[41] = v28;
  a2[40] = 0;
  a2[41] = 0;
  v29 = result[42];
  result[42] = a2[42];
  a2[42] = v29;
  result[43] = 0;
  result[44] = 0;
  result[45] = 0;
  v30 = a2[44];
  result[43] = a2[43];
  result[44] = v30;
  a2[43] = 0;
  a2[44] = 0;
  v31 = result[45];
  result[45] = a2[45];
  a2[45] = v31;
  result[46] = 0;
  result[47] = 0;
  result[48] = 0;
  v32 = a2[47];
  result[46] = a2[46];
  result[47] = v32;
  a2[46] = 0;
  a2[47] = 0;
  v33 = result[48];
  result[48] = a2[48];
  a2[48] = v33;
  result[49] = 0;
  result[50] = 0;
  result[51] = 0;
  v34 = a2[50];
  result[49] = a2[49];
  result[50] = v34;
  a2[49] = 0;
  a2[50] = 0;
  v35 = result[51];
  result[51] = a2[51];
  a2[51] = v35;
  result[52] = 0;
  result[53] = 0;
  result[54] = 0;
  v36 = a2[53];
  result[52] = a2[52];
  result[53] = v36;
  a2[52] = 0;
  a2[53] = 0;
  v37 = result[54];
  result[54] = a2[54];
  a2[54] = v37;
  result[55] = a2[55];
  return result;
}

uint64_t re::DynamicRegisterTable::DynamicRegisterTable(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  v4 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v8;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_QWORD *)(result + 96);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  v10 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 144) = 0;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 128) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_QWORD *)(result + 136);
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v12;
  v13 = *(_QWORD *)(result + 152);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 144);
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(result + 168) = v14;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v15 = *(_QWORD *)(result + 176);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v15;
  v16 = *(_QWORD *)(result + 192);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v16;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(result + 184);
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 224) = 0;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(result + 208) = v17;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v18 = *(_QWORD *)(result + 216);
  *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v18;
  v19 = *(_QWORD *)(result + 232);
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = v19;
  ++*(_DWORD *)(a2 + 224);
  ++*(_DWORD *)(result + 224);
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_DWORD *)(result + 264) = 0;
  v20 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(result + 248) = v20;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v21 = *(_QWORD *)(result + 256);
  *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = v21;
  v22 = *(_QWORD *)(result + 272);
  *(_QWORD *)(result + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = v22;
  ++*(_DWORD *)(a2 + 264);
  ++*(_DWORD *)(result + 264);
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 304) = 0;
  v23 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 288) = v23;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v24 = *(_QWORD *)(result + 296);
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = v24;
  v25 = *(_QWORD *)(result + 312);
  *(_QWORD *)(result + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = v25;
  ++*(_DWORD *)(a2 + 304);
  ++*(_DWORD *)(result + 304);
  return result;
}

_QWORD *re::FixedArray<re::EvaluationRegisterId<int>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = 8 * a3;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = result;
  if (a3 != 1)
  {
    result = memset(result, 255, v5 - 8);
    v7 = (_QWORD *)((char *)v7 + v5 - 8);
  }
  *v7 = -1;
  return result;
}

uint64_t re::RigGraphOperatorDefinition::init(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, unint64_t a5, unint64_t a6, const char **a7)
{
  const re::StringID *v10;
  unint64_t *v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  unint64_t i;
  const char *v17;
  const char *v18;
  _anonymous_namespace_ *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  _anonymous_namespace_ *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  const re::StringID *v44;
  unint64_t v46;
  char v47[24];
  uint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  int v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v10 = (const re::StringID *)a3;
  v68 = *MEMORY[0x24BDAC8D0];
  v13 = re::StringID::operator=(a1, a3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::init<>(v13 + 2, *a2, a4);
  v46 = a5;
  v14 = (_anonymous_namespace_ *)re::FixedArray<re::RigGraphOperatorParameterDefinition>::init<>(a1 + 5, *a2, a5);
  if (a4)
  {
    v44 = v10;
    v15 = 0;
    i = 0;
    while (1)
    {
      v18 = *a7;
      v17 = a7[1];
      v50 = 0;
      v51 = &str_110;
      v52 = 0;
      v53 = &str_110;
      v20 = a1[3];
      if (v20 <= i)
        break;
      v21 = (_QWORD *)(a1[4] + v15);
      v22 = v50;
      v23 = v51;
      v24 = v21[1];
      v25 = v50 & 0xFFFFFFFFFFFFFFFELL | *v21 & 1;
      a7 += 2;
      v50 = 0;
      v51 = &str_110;
      v21[1] = v23;
      *(_QWORD *)&v63 = v25;
      *((_QWORD *)&v63 + 1) = v24;
      *v21 = v22;
      re::StringID::destroyString((re::StringID *)&v63);
      v26 = v52;
      v27 = v53;
      v52 = 0;
      v53 = &str_110;
      v28 = v21[3];
      v29 = v26 & 0xFFFFFFFFFFFFFFFELL | v21[2] & 1;
      v21[3] = v27;
      *(_QWORD *)&v63 = v29;
      *((_QWORD *)&v63 + 1) = v28;
      v21[2] = v26;
      re::StringID::destroyString((re::StringID *)&v63);
      re::StringID::destroyString((re::StringID *)&v52);
      re::StringID::destroyString((re::StringID *)&v50);
      ++i;
      v15 += 32;
      if (a4 == i)
      {
        v10 = v44;
        goto LABEL_6;
      }
    }
    v54 = 0;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v63 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v55 = 136315906;
    v56 = "operator[]";
    v57 = 1024;
    v58 = 468;
    v59 = 2048;
    v60 = i;
    v61 = 2048;
    v62 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    v54 = 0;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v63 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v55 = 136315906;
    v56 = "operator[]";
    v57 = 1024;
    v58 = 468;
    v59 = 2048;
    v60 = i;
    v61 = 2048;
    v62 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_6:
  if (v46)
  {
    v30 = 0;
    for (i = 0; i != v46; ++i)
    {
      v31 = *a7;
      v32 = a7[1];
      v50 = 0;
      v51 = &str_110;
      v52 = 0;
      v53 = &str_110;
      v20 = a1[6];
      if (v20 <= i)
        goto LABEL_16;
      v34 = (_QWORD *)(a1[7] + v30);
      v35 = v50;
      v36 = v51;
      v50 = 0;
      v51 = &str_110;
      v37 = v34[1];
      v38 = v35 & 0xFFFFFFFFFFFFFFFELL | *v34 & 1;
      v34[1] = v36;
      *(_QWORD *)&v63 = v38;
      *((_QWORD *)&v63 + 1) = v37;
      *v34 = v35;
      re::StringID::destroyString((re::StringID *)&v63);
      v39 = v52;
      v40 = v53;
      v52 = 0;
      v53 = &str_110;
      v41 = v34[3];
      v42 = v39 & 0xFFFFFFFFFFFFFFFELL | v34[2] & 1;
      v34[3] = v40;
      *(_QWORD *)&v63 = v42;
      *((_QWORD *)&v63 + 1) = v41;
      v34[2] = v39;
      re::StringID::destroyString((re::StringID *)&v63);
      re::StringID::destroyString((re::StringID *)&v52);
      re::StringID::destroyString((re::StringID *)&v50);
      v30 += 32;
      a7 += 2;
    }
  }
  a1[8] = a6;
  result = re::RigEnvironment::insertRigGraphOperator((re::RigEnvironment *)a2, v10, (StringID *)a1, (uint64_t)v47);
  if (!v47[0])
  {
    result = v48;
    if (v48)
    {
      if ((v49 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v48 + 40))();
    }
  }
  return result;
}

uint64_t re::ConvertQuaternionToIntrinsicEulerCompile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v22) = 5;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 233), (uint64_t)&v22);
    v22 = v10[235] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 26, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 66), v11);
    v12 = (__n128 *)(v10[30] + 8 * v10[28] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v22) = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 213), (uint64_t)&v22);
    v22 = v15[215] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 6, &v22);
    re::DynamicArray<int>::add(v15 + 46, v16);
    v17 = (__n128 *)(v15[10] + 8 * v15[8] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  v18 = v17->n128_u64[0];
  LODWORD(v22) = 14;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1944), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1960) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

uint64_t re::ExtractTwistFromQuaternionCompile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  __n128 *v8;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  _QWORD *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  _QWORD *v28;
  __n128 *v29;
  __n128 *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t result;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (a3 <= 1)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, a3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = a2[1];
    if (v8[6].n128_u8[0] == 1)
    {
      v10 = (_QWORD *)v8[1].n128_u64[0];
      v11 = v8 + 7;
      LODWORD(v75) = 7;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v75);
      v75 = v10[245] - 1;
      re::DynamicArray<unsigned long>::add(v10 + 36, &v75);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
      v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
      v13 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v12 = v8 + 11;
      v13 = *(_QWORD **)(a1 + 8);
    }
    v14 = v12->n128_u64[0];
    v74.n128_u32[0] = 0;
    LODWORD(v75) = 2;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 218), (uint64_t)&v75);
    v75 = v13[220] - 1;
    re::DynamicArray<unsigned long>::add(v13 + 11, &v75);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 51), (float *)&v74);
    v15 = *(_QWORD *)(v13[15] + 8 * v13[13] - 8);
    LODWORD(v75) = 46;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v7 + 1864), (uint64_t)&v75);
    v16 = *(_QWORD *)(v7 + 1880) - 1;
    v17 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v7 + 1664, v16);
    *(_QWORD *)(v17 + 8) = v14;
    *(_QWORD *)(v17 + 16) = v15;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *a2;
    if ((*a2)[6].n128_u8[0] == 1)
    {
      v20 = (_QWORD *)v19[1].n128_u64[0];
      v21 = v19 + 7;
      LODWORD(v75) = 5;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v20 + 233), (uint64_t)&v75);
      v75 = v20[235] - 1;
      re::DynamicArray<unsigned long>::add(v20 + 26, &v75);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v20 + 66), v21);
      v22 = (__n128 *)(v20[30] + 8 * v20[28] - 8);
    }
    else
    {
      v22 = v19 + 11;
    }
    v23 = v22->n128_u64[0];
    LODWORD(v75) = 44;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v18 + 1744), (uint64_t)&v75);
    v24 = *(_QWORD *)(v18 + 1760) - 1;
    v25 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v18 + 1664, v24);
    *(_QWORD *)(v25 + 8) = v23;
    *(_QWORD *)(v25 + 16) = v16;
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *a2;
    if ((*a2)[6].n128_u8[0] == 1)
    {
      v28 = (_QWORD *)v27[1].n128_u64[0];
      v29 = v27 + 7;
      LODWORD(v75) = 5;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v28 + 233), (uint64_t)&v75);
      v75 = v28[235] - 1;
      re::DynamicArray<unsigned long>::add(v28 + 26, &v75);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v28 + 66), v29);
      v30 = (__n128 *)(v28[30] + 8 * v28[28] - 8);
    }
    else
    {
      v30 = v27 + 11;
    }
    v31 = *(_QWORD **)(a1 + 8);
    v32 = v30->n128_u64[0];
    v74.n128_u64[0] = 0;
    v74.n128_u64[1] = 0x3F80000000000000;
    LODWORD(v75) = 5;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v31 + 233), (uint64_t)&v75);
    v75 = v31[235] - 1;
    re::DynamicArray<unsigned long>::add(v31 + 26, &v75);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v31 + 66), &v74);
    v33 = *(_QWORD *)(v31[30] + 8 * v31[28] - 8);
    LODWORD(v75) = 44;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v26 + 1744), (uint64_t)&v75);
    v34 = *(_QWORD *)(v26 + 1760) - 1;
    v35 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v26 + 1664, v34);
    *(_QWORD *)(v35 + 8) = v32;
    *(_QWORD *)(v35 + 16) = v33;
    v36 = *(_QWORD *)(a1 + 8);
    v37 = v36 + 1664;
    LODWORD(v75) = 59;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v36 + 1744), (uint64_t)&v75);
    v38 = *(_QWORD *)(v36 + 1760) - 1;
    v39 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v37, v38);
    *(_QWORD *)(v39 + 8) = v24;
    *(_QWORD *)(v39 + 16) = v34;
    v40 = *(_QWORD **)(a1 + 8);
    v74.n128_u32[0] = -1077342245;
    LODWORD(v75) = 2;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v40 + 218), (uint64_t)&v75);
    v75 = v40[220] - 1;
    re::DynamicArray<unsigned long>::add(v40 + 11, &v75);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v40 + 51), (float *)&v74);
    v41 = *(_QWORD *)(v40[15] + 8 * v40[13] - 8);
    LODWORD(v75) = 63;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v40 + 213), (uint64_t)&v75);
    v42 = v40[215] - 1;
    v43 = re::DynamicEvaluationRegisterTable::evaluationRegister<unsigned int>((uint64_t)(v40 + 208), v42);
    *(_QWORD *)(v43 + 8) = v38;
    *(_QWORD *)(v43 + 16) = v41;
    v44 = *(_QWORD **)(a1 + 8);
    v74.n128_u32[0] = 1070141403;
    LODWORD(v75) = 2;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v44 + 218), (uint64_t)&v75);
    v75 = v44[220] - 1;
    re::DynamicArray<unsigned long>::add(v44 + 11, &v75);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v44 + 51), (float *)&v74);
    v45 = *(_QWORD *)(v44[15] + 8 * v44[13] - 8);
    LODWORD(v75) = 61;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v44 + 213), (uint64_t)&v75);
    v46 = v44[215] - 1;
    v47 = re::DynamicEvaluationRegisterTable::evaluationRegister<unsigned int>((uint64_t)(v44 + 208), v46);
    *(_QWORD *)(v47 + 8) = v38;
    *(_QWORD *)(v47 + 16) = v45;
    v48 = *(_QWORD **)(a1 + 8);
    v74.n128_u32[0] = 1078530011;
    LODWORD(v75) = 2;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v48 + 218), (uint64_t)&v75);
    v75 = v48[220] - 1;
    re::DynamicArray<unsigned long>::add(v48 + 11, &v75);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v48 + 51), (float *)&v74);
    v49 = *(_QWORD *)(v48[15] + 8 * v48[13] - 8);
    v50 = *(_QWORD *)(a1 + 8);
    v51 = v50 + 1664;
    LODWORD(v75) = 49;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v50 + 1744), (uint64_t)&v75);
    v52 = *(_QWORD *)(v50 + 1760) - 1;
    v53 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v51, v52);
    *(_QWORD *)(v53 + 8) = v38;
    *(_QWORD *)(v53 + 16) = v49;
    v54 = *(_QWORD *)(a1 + 8);
    v55 = v54 + 1664;
    LODWORD(v75) = 50;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v54 + 1744), (uint64_t)&v75);
    v56 = *(_QWORD *)(v54 + 1760) - 1;
    v57 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v55, v56);
    *(_QWORD *)(v57 + 8) = v38;
    *(_QWORD *)(v57 + 16) = v49;
    v58 = *(_QWORD *)(a1 + 8);
    v59 = v58 + 1664;
    LODWORD(v75) = 60;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v58 + 1744), (uint64_t)&v75);
    v60 = *(_QWORD *)(v58 + 1760) - 1;
    v61 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v59, v60);
    v61[1] = v42;
    v61[2] = v52;
    v61[3] = v38;
    v62 = *(_QWORD *)(a1 + 8);
    v63 = v62 + 1664;
    LODWORD(v75) = 60;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v62 + 1744), (uint64_t)&v75);
    v64 = *(_QWORD *)(v62 + 1760) - 1;
    v65 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v63, v64);
    v65[1] = v46;
    v65[2] = v56;
    v65[3] = v60;
    if (a5)
    {
      v67 = *a4;
      v68 = *(_QWORD **)(a1 + 8);
      v74.n128_u32[0] = 0x40000000;
      LODWORD(v75) = 2;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v68 + 218), (uint64_t)&v75);
      v75 = v68[220] - 1;
      re::DynamicArray<unsigned long>::add(v68 + 11, &v75);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)(v68 + 51), (float *)&v74);
      v69 = *(_QWORD *)(v68[15] + 8 * v68[13] - 8);
      LODWORD(v75) = 51;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v68 + 218), (uint64_t)&v75);
      v70 = v68[220] - 1;
      v71 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>((uint64_t)(v68 + 208), v70);
      *(_QWORD *)(v71 + 8) = v64;
      *(_QWORD *)(v71 + 16) = v69;
      *(_BYTE *)(v67 + 96) = 2;
      *(_QWORD *)(v67 + 176) = v70;
      return 1;
    }
  }
  re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ConstructQuaternionCompile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  float *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v22) = 7;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v22);
    v22 = v10[245] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 36, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
    v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = (float *)&v14[7];
    LODWORD(v22) = 2;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 218), (uint64_t)&v22);
    v22 = v15[220] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 11, &v22);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v15 + 51), v16);
    v17 = (__n128 *)(v15[15] + 8 * v15[13] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  v18 = v17->n128_u64[0];
  LODWORD(v22) = 45;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1864), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1880) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

uint64_t re::GetVector3ComponentCompile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v22) = 7;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v22);
    v22 = v10[245] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 36, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
    v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v22) = 7;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 243), (uint64_t)&v22);
    v22 = v15[245] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 36, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v15 + 76), v16);
    v17 = (__n128 *)(v15[40] + 8 * v15[38] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  v18 = v17->n128_u64[0];
  LODWORD(v22) = 22;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1744), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1760) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

uint64_t re::ConstructVector3Compile(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if (*(_BYTE *)(*a2 + 96) == 1)
  {
    v10 = *(_QWORD **)(v9 + 16);
    v11 = (float *)(v9 + 112);
    LODWORD(v27) = 2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 218), (uint64_t)&v27);
    v27 = v10[220] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 11, &v27);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v10 + 51), v11);
    v12 = (uint64_t *)(v10[15] + 8 * v10[13] - 8);
  }
  else
  {
    v12 = (uint64_t *)(v9 + 176);
  }
  if (a3 <= 1)
    goto LABEL_17;
  v13 = *v12;
  v14 = a2[1];
  if (*(_BYTE *)(v14 + 96) == 1)
  {
    v15 = *(_QWORD **)(v14 + 16);
    v16 = (float *)(v14 + 112);
    LODWORD(v27) = 2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 218), (uint64_t)&v27);
    v27 = v15[220] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 11, &v27);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v15 + 51), v16);
    v17 = (uint64_t *)(v15[15] + 8 * v15[13] - 8);
  }
  else
  {
    v17 = (uint64_t *)(v14 + 176);
  }
  if (a3 <= 2)
    goto LABEL_18;
  v18 = *v17;
  v19 = a2[2];
  if (*(_BYTE *)(v19 + 96) == 1)
  {
    v20 = *(_QWORD **)(v19 + 16);
    v21 = (float *)(v19 + 112);
    LODWORD(v27) = 2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v20 + 218), (uint64_t)&v27);
    v27 = v20[220] - 1;
    re::DynamicArray<unsigned long>::add(v20 + 11, &v27);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v20 + 51), v21);
    v22 = (uint64_t *)(v20[15] + 8 * v20[13] - 8);
  }
  else
  {
    v22 = (uint64_t *)(v19 + 176);
  }
  v23 = *v22;
  LODWORD(v27) = 47;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1944), (uint64_t)&v27);
  v24 = *(_QWORD *)(v8 + 1960) - 1;
  v25 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v8 + 1664, v24);
  v25[1] = v13;
  v25[2] = v18;
  v25[3] = v23;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v24;
  return 1;
}

uint64_t re::GetVector2ComponentCompile(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_QWORD *)*a2;
  if (*(_BYTE *)(*a2 + 96) == 1)
  {
    v10 = (_QWORD *)v9[2];
    v11 = v9 + 14;
    LODWORD(v22) = 6;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 238), (uint64_t)&v22);
    v22 = v10[240] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 31, &v22);
    re::DynamicArray<unsigned long>::add(v10 + 71, v11);
    v12 = (uint64_t *)(v10[35] + 8 * v10[33] - 8);
  }
  else
  {
    v12 = v9 + 22;
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = *v12;
  v14 = a2[1];
  if (*(_BYTE *)(v14 + 96) == 1)
  {
    v15 = *(_QWORD **)(v14 + 16);
    v16 = (_QWORD *)(v14 + 112);
    LODWORD(v22) = 6;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 238), (uint64_t)&v22);
    v22 = v15[240] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 31, &v22);
    re::DynamicArray<unsigned long>::add(v15 + 71, v16);
    v17 = (uint64_t *)(v15[35] + 8 * v15[33] - 8);
  }
  else
  {
    v17 = (uint64_t *)(v14 + 176);
  }
  v18 = *v17;
  LODWORD(v22) = 23;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1744), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1760) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

uint64_t re::ConstructVector2Compile(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if (*(_BYTE *)(*a2 + 96) == 1)
  {
    v10 = *(_QWORD **)(v9 + 16);
    v11 = (float *)(v9 + 112);
    LODWORD(v22) = 2;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 218), (uint64_t)&v22);
    v22 = v10[220] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 11, &v22);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v10 + 51), v11);
    v12 = (uint64_t *)(v10[15] + 8 * v10[13] - 8);
  }
  else
  {
    v12 = (uint64_t *)(v9 + 176);
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = *v12;
  v14 = a2[1];
  if (*(_BYTE *)(v14 + 96) == 1)
  {
    v15 = *(_QWORD **)(v14 + 16);
    v16 = (float *)(v14 + 112);
    LODWORD(v22) = 2;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 218), (uint64_t)&v22);
    v22 = v15[220] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 11, &v22);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v15 + 51), v16);
    v17 = (uint64_t *)(v15[15] + 8 * v15[13] - 8);
  }
  else
  {
    v17 = (uint64_t *)(v14 + 176);
  }
  v18 = *v17;
  LODWORD(v22) = 48;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1904), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1920) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector2<float>>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

uint64_t re::ConvertIntrinsicEulerToQuaternionCompile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v22) = 7;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v22);
    v22 = v10[245] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 36, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
    v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v22) = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 213), (uint64_t)&v22);
    v22 = v15[215] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 6, &v22);
    re::DynamicArray<int>::add(v15 + 46, v16);
    v17 = (__n128 *)(v15[10] + 8 * v15[8] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  v18 = v17->n128_u64[0];
  LODWORD(v22) = 13;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1864), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1880) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

uint64_t re::SlerpCompile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  _QWORD *v20;
  float *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v27) = 5;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 233), (uint64_t)&v27);
    v27 = v10[235] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 26, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 66), v11);
    v12 = (__n128 *)(v10[30] + 8 * v10[28] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_17;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v27) = 5;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 233), (uint64_t)&v27);
    v27 = v15[235] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 26, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v15 + 66), v16);
    v17 = (__n128 *)(v15[30] + 8 * v15[28] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  if (a3 <= 2)
    goto LABEL_18;
  v18 = v17->n128_u64[0];
  v19 = a2[2];
  if (v19[6].n128_u8[0] == 1)
  {
    v20 = (_QWORD *)v19[1].n128_u64[0];
    v21 = (float *)&v19[7];
    LODWORD(v27) = 2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v20 + 218), (uint64_t)&v27);
    v27 = v20[220] - 1;
    re::DynamicArray<unsigned long>::add(v20 + 11, &v27);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v20 + 51), v21);
    v22 = (__n128 *)(v20[15] + 8 * v20[13] - 8);
  }
  else
  {
    v22 = v19 + 11;
  }
  v23 = v22->n128_u64[0];
  LODWORD(v27) = 12;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1864), (uint64_t)&v27);
  v24 = *(_QWORD *)(v8 + 1880) - 1;
  v25 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Quaternion<float>>(v8 + 1664, v24);
  v25[1] = v13;
  v25[2] = v18;
  v25[3] = v23;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v24;
  return 1;
}

uint64_t re::LerpVector3Compile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  _QWORD *v20;
  float *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v27) = 7;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v27);
    v27 = v10[245] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 36, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
    v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_17;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v27) = 7;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 243), (uint64_t)&v27);
    v27 = v15[245] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 36, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v15 + 76), v16);
    v17 = (__n128 *)(v15[40] + 8 * v15[38] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  if (a3 <= 2)
    goto LABEL_18;
  v18 = v17->n128_u64[0];
  v19 = a2[2];
  if (v19[6].n128_u8[0] == 1)
  {
    v20 = (_QWORD *)v19[1].n128_u64[0];
    v21 = (float *)&v19[7];
    LODWORD(v27) = 2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v20 + 218), (uint64_t)&v27);
    v27 = v20[220] - 1;
    re::DynamicArray<unsigned long>::add(v20 + 11, &v27);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v20 + 51), v21);
    v22 = (__n128 *)(v20[15] + 8 * v20[13] - 8);
  }
  else
  {
    v22 = v19 + 11;
  }
  v23 = v22->n128_u64[0];
  LODWORD(v27) = 11;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1944), (uint64_t)&v27);
  v24 = *(_QWORD *)(v8 + 1960) - 1;
  v25 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v8 + 1664, v24);
  v25[1] = v13;
  v25[2] = v18;
  v25[3] = v23;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v24;
  return 1;
}

uint64_t re::LerpFloatCompile(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v10 = *(_QWORD **)(a1 + 8);
  v48 = 1065353216;
  LODWORD(v49) = 2;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 218), (uint64_t)&v49);
  v49 = v10[220] - 1;
  re::DynamicArray<unsigned long>::add(v10 + 11, &v49);
  *(float *)&v12 = re::DynamicArray<float>::add((_anonymous_namespace_ *)(v10 + 51), (float *)&v48);
  if (a3 <= 2)
  {
    re::internal::assertLog((re::internal *)6, v11, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, a3);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)(v10[15] + 8 * v10[13] - 8);
  v14 = a2[2];
  if (*(_BYTE *)(v14 + 96) == 1)
  {
    v15 = *(_QWORD **)(v14 + 16);
    v16 = (float *)(v14 + 112);
    LODWORD(v49) = 2;
    v51 = 0;
    v52 = 0;
    v50 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 218), (uint64_t)&v49);
    v49 = v15[220] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 11, &v49);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v15 + 51), v16);
    v17 = (uint64_t *)(v15[15] + 8 * v15[13] - 8);
  }
  else
  {
    v17 = (uint64_t *)(v14 + 176);
  }
  v18 = *v17;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v19 + 1664;
  LODWORD(v49) = 50;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v19 + 1744), (uint64_t)&v49);
  v21 = *(_QWORD *)(v19 + 1760) - 1;
  v22 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v20, v21);
  *(_QWORD *)(v22 + 8) = v13;
  *(_QWORD *)(v22 + 16) = v18;
  if (!a5)
    goto LABEL_14;
  v24 = *a4;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *a2;
  if (*(_BYTE *)(*a2 + 96) == 1)
  {
    v27 = *(_QWORD **)(v26 + 16);
    v28 = (float *)(v26 + 112);
    LODWORD(v49) = 2;
    v51 = 0;
    v52 = 0;
    v50 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v27 + 218), (uint64_t)&v49);
    v49 = v27[220] - 1;
    re::DynamicArray<unsigned long>::add(v27 + 11, &v49);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v27 + 51), v28);
    v29 = (uint64_t *)(v27[15] + 8 * v27[13] - 8);
  }
  else
  {
    v29 = (uint64_t *)(v26 + 176);
  }
  v30 = *v29;
  LODWORD(v49) = 51;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v25 + 1744), (uint64_t)&v49);
  v31 = *(_QWORD *)(v25 + 1760) - 1;
  v32 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v25 + 1664, v31);
  *(_QWORD *)(v32 + 8) = v21;
  *(_QWORD *)(v32 + 16) = v30;
  v33 = *(_QWORD *)(a1 + 8);
  v34 = a2[1];
  if (*(_BYTE *)(v34 + 96) == 1)
  {
    v47 = v24;
    v35 = v18;
    v36 = *(_QWORD **)(v34 + 16);
    v37 = (float *)(v34 + 112);
    LODWORD(v49) = 2;
    v51 = 0;
    v52 = 0;
    v50 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v36 + 218), (uint64_t)&v49);
    v49 = v36[220] - 1;
    re::DynamicArray<unsigned long>::add(v36 + 11, &v49);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v36 + 51), v37);
    v38 = v36[15];
    v39 = v36[13];
    v18 = v35;
    v24 = v47;
    v40 = (uint64_t *)(v38 + 8 * v39 - 8);
  }
  else
  {
    v40 = (uint64_t *)(v34 + 176);
  }
  v41 = *v40;
  LODWORD(v49) = 51;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v33 + 1744), (uint64_t)&v49);
  v42 = *(_QWORD *)(v33 + 1760) - 1;
  v43 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v33 + 1664, v42);
  *(_QWORD *)(v43 + 8) = v18;
  *(_QWORD *)(v43 + 16) = v41;
  LODWORD(v49) = 49;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v25 + 1744), (uint64_t)&v49);
  v44 = *(_QWORD *)(v25 + 1760) - 1;
  v45 = re::DynamicEvaluationRegisterTable::evaluationRegister<float>(v25 + 1664, v44);
  *(_QWORD *)(v45 + 8) = v31;
  *(_QWORD *)(v45 + 16) = v42;
  *(_BYTE *)(v24 + 96) = 2;
  *(_QWORD *)(v24 + 176) = v44;
  return 1;
}

uint64_t re::LerpSRTCompile(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32[3];
  const char *v33;
  uint64_t v34;
  unint64_t v35[3];

  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_22;
  }
  v9 = *(_QWORD **)(a1 + 8);
  if (a3 == 1)
  {
LABEL_22:
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_23;
  }
  if (a3 <= 2)
  {
LABEL_23:
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v12 + 96) == 1)
  {
    v13 = *(_QWORD **)(v12 + 16);
    v14 = (float *)(v12 + 112);
    LODWORD(v27) = 2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v13 + 218), (uint64_t)&v27);
    v27 = v13[220] - 1;
    re::DynamicArray<unsigned long>::add(v13 + 11, &v27);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 51), v14);
    v15 = (uint64_t *)(v13[15] + 8 * v13[13] - 8);
  }
  else
  {
    v15 = (uint64_t *)(v12 + 176);
  }
  re::EvaluationTree::lerp(v9, (uint64_t *)&v33, v32, *v15, v35);
  if (!a5)
    goto LABEL_24;
  v17 = *a4;
  v33 = "scale";
  v34 = 5;
  re::RigDataValue::attributeValue(v17, (uint64_t)&v33, (uint64_t)&v27);
  v18 = v28;
  v19 = v35[0];
  *(_BYTE *)(v28 + 96) = 2;
  *(_QWORD *)(v18 + 176) = v19;
  if (!(_BYTE)v27 && v30 && (v31 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  v20 = *a4;
  v33 = "rotation";
  v34 = 8;
  re::RigDataValue::attributeValue(v20, (uint64_t)&v33, (uint64_t)&v27);
  v21 = v28;
  v22 = v35[1];
  *(_BYTE *)(v28 + 96) = 2;
  *(_QWORD *)(v21 + 176) = v22;
  if (!(_BYTE)v27 && v30 && (v31 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  v23 = *a4;
  v33 = "translation";
  v34 = 11;
  re::RigDataValue::attributeValue(v23, (uint64_t)&v33, (uint64_t)&v27);
  v24 = v28;
  v25 = v35[2];
  *(_BYTE *)(v28 + 96) = 2;
  *(_QWORD *)(v24 + 176) = v25;
  if (!(_BYTE)v27 && v30 && (v31 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  return 1;
}

void re::`anonymous namespace'::rigDataValueToSRT(re::_anonymous_namespace_ *this, const re::RigDataValue *a2)
{
  _QWORD *v4;
  __n128 *v5;
  __n128 *v6;
  _QWORD *v7;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  _QWORD *v11;
  __n128 *v12;
  __n128 *v13;
  _QWORD v14[2];
  uint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  char v27[8];
  __n128 *v28;
  uint64_t v29;
  char v30;
  _QWORD v31[4];

  v26[0] = "scale";
  v26[1] = 5;
  re::RigDataValue::attributeValue((uint64_t)a2, (uint64_t)v26, (uint64_t)v27);
  if (v28[6].n128_u8[0] == 1)
  {
    v4 = (_QWORD *)v28[1].n128_u64[0];
    v5 = v28 + 7;
    LODWORD(v21) = 7;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v4 + 243), (uint64_t)&v21);
    v21 = v4[245] - 1;
    re::DynamicArray<unsigned long>::add(v4 + 36, &v21);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v4 + 76), v5);
    v6 = (__n128 *)(v4[40] + 8 * v4[38] - 8);
  }
  else
  {
    v6 = v28 + 11;
  }
  *(_QWORD *)this = v6->n128_u64[0];
  v20[0] = "rotation";
  v20[1] = 8;
  re::RigDataValue::attributeValue((uint64_t)a2, (uint64_t)v20, (uint64_t)&v21);
  if (v22[6].n128_u8[0] == 1)
  {
    v7 = (_QWORD *)v22[1].n128_u64[0];
    v8 = v22 + 7;
    LODWORD(v15) = 5;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v7 + 233), (uint64_t)&v15);
    v15 = v7[235] - 1;
    re::DynamicArray<unsigned long>::add(v7 + 26, &v15);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v7 + 66), v8);
    v9 = (__n128 *)(v7[30] + 8 * v7[28] - 8);
  }
  else
  {
    v9 = v22 + 11;
  }
  *((_QWORD *)this + 1) = v9->n128_u64[0];
  v14[0] = "translation";
  v14[1] = 11;
  re::RigDataValue::attributeValue((uint64_t)a2, (uint64_t)v14, (uint64_t)&v15);
  if (v16[6].n128_u8[0] == 1)
  {
    v11 = (_QWORD *)v16[1].n128_u64[0];
    v12 = v16 + 7;
    LODWORD(v31[0]) = 7;
    memset(&v31[1], 0, 24);
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v11 + 243), (uint64_t)v31);
    v31[0] = v11[245] - 1;
    re::DynamicArray<unsigned long>::add(v11 + 36, v31);
    v10 = re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v11 + 76), v12);
    v13 = (__n128 *)(v11[40] + 8 * v11[38] - 8);
  }
  else
  {
    v13 = v16 + 11;
  }
  *((_QWORD *)this + 2) = v13->n128_u64[0];
  if (!(_BYTE)v15 && v18 && (v19 & 1) != 0)
    (*(void (**)(__n128))(*(_QWORD *)v18 + 40))(v10);
  if (!(_BYTE)v21 && v24 && (v25 & 1) != 0)
    (*(void (**)(__n128))(*(_QWORD *)v24 + 40))(v10);
  if (!v27[0] && v29 && (v30 & 1) != 0)
    (*(void (**)(__n128))(*(_QWORD *)v29 + 40))(v10);
}

uint64_t re::ComponentLerpVector3Compile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  _QWORD *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v27) = 7;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v27);
    v27 = v10[245] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 36, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
    v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_17;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v27) = 7;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 243), (uint64_t)&v27);
    v27 = v15[245] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 36, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v15 + 76), v16);
    v17 = (__n128 *)(v15[40] + 8 * v15[38] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  if (a3 <= 2)
    goto LABEL_18;
  v18 = v17->n128_u64[0];
  v19 = a2[2];
  if (v19[6].n128_u8[0] == 1)
  {
    v20 = (_QWORD *)v19[1].n128_u64[0];
    v21 = v19 + 7;
    LODWORD(v27) = 7;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v20 + 243), (uint64_t)&v27);
    v27 = v20[245] - 1;
    re::DynamicArray<unsigned long>::add(v20 + 36, &v27);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v20 + 76), v21);
    v22 = (__n128 *)(v20[40] + 8 * v20[38] - 8);
  }
  else
  {
    v22 = v19 + 11;
  }
  v23 = v22->n128_u64[0];
  LODWORD(v27) = 10;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1944), (uint64_t)&v27);
  v24 = *(_QWORD *)(v8 + 1960) - 1;
  v25 = (_QWORD *)re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v8 + 1664, v24);
  v25[1] = v13;
  v25[2] = v18;
  v25[3] = v23;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v24;
  return 1;
}

uint64_t re::CrossVector3Compile(uint64_t a1, __n128 **a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a5)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  if ((*a2)[6].n128_u8[0] == 1)
  {
    v10 = (_QWORD *)v9[1].n128_u64[0];
    v11 = v9 + 7;
    LODWORD(v22) = 7;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v10 + 243), (uint64_t)&v22);
    v22 = v10[245] - 1;
    re::DynamicArray<unsigned long>::add(v10 + 36, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v10 + 76), v11);
    v12 = (__n128 *)(v10[40] + 8 * v10[38] - 8);
  }
  else
  {
    v12 = v9 + 11;
  }
  if (a3 <= 1)
    goto LABEL_13;
  v13 = v12->n128_u64[0];
  v14 = a2[1];
  if (v14[6].n128_u8[0] == 1)
  {
    v15 = (_QWORD *)v14[1].n128_u64[0];
    v16 = v14 + 7;
    LODWORD(v22) = 7;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v15 + 243), (uint64_t)&v22);
    v22 = v15[245] - 1;
    re::DynamicArray<unsigned long>::add(v15 + 36, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v15 + 76), v16);
    v17 = (__n128 *)(v15[40] + 8 * v15[38] - 8);
  }
  else
  {
    v17 = v14 + 11;
  }
  v18 = v17->n128_u64[0];
  LODWORD(v22) = 15;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v8 + 1944), (uint64_t)&v22);
  v19 = *(_QWORD *)(v8 + 1960) - 1;
  v20 = re::DynamicEvaluationRegisterTable::evaluationRegister<re::Vector3<float>>(v8 + 1664, v19);
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v18;
  *(_BYTE *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 176) = v19;
  return 1;
}

