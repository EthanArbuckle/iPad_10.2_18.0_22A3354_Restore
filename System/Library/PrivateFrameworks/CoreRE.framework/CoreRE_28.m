_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentEdges(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = this[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = *(unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *(int *)(*(_QWORD *)(v1 + 144) + 8 * v3 + 4);
        v9 = *(_QWORD *)(v1 + 192);
        v10 = *(_QWORD *)(v1 + 120);
        v11 = this[24];
        v12 = this[2];
        v13 = v7 + 2;
        v14 = *(_QWORD *)(v12 + 336);
        v15 = (_DWORD *)(v14 + 8 * v5);
        *v15 = v7 + 2;
        if ((_DWORD)v5)
          v16 = *(v15 - 1) + *(v15 - 2);
        else
          v16 = 0;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13)
          v13 = *(_DWORD *)(v12 + 20);
        *(_DWORD *)(v12 + 20) = v13;
        if ((int)v7 < 1)
        {
          v19 = 0;
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = v6 + 4 * v8;
          v21 = v9 + 2 * v8;
          v22 = (_DWORD *)(v10 + 8 * v3);
          v23 = v11 + 8 * v3;
          v24 = *(int *)(v14 + 4 * (int)((2 * v5) | 1));
          v25 = *(_QWORD *)(v12 + 360) + 4 * v24;
          v26 = *(_QWORD *)(v12 + 384) + 2 * v24;
          v27 = this[13];
          v28 = this[18];
          v29 = -1;
          do
          {
            v30 = *(unsigned __int16 *)(v21 + 2 * v17);
            v31 = (2 * *(int *)(v20 + 4 * v17)) | 1;
            v32 = v28 + 4 * *(int *)(v27 + 4 * v31);
            if (v17)
            {
              v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              v34 = *(_DWORD *)(v32 + 4 * *(unsigned __int16 *)(v21 + 2 * v17));
            }
            else
            {
              if (*v22 != v22[1])
                v18 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(*(_QWORD *)(v1 + 24) + 4 * v31) + 4 * v30) != *v22;
              v35 = *(_DWORD *)(v23 + 4 * !v18);
              v29 = *(_DWORD *)(v23 + 4 * v18);
              v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              v34 = *(_DWORD *)(v32 + 4 * v30);
              if (v35 != -1)
              {
                *(_DWORD *)(v25 + 4 * v19) = v35;
                *(_WORD *)(v26 + 2 * v19++) = 0;
              }
            }
            if (v33 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v33;
              *(_WORD *)(v26 + 2 * v19++) = 1;
            }
            if (v34 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v34;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            if (!v17 && v29 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v29;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            ++v17;
          }
          while (v7 != v17);
        }
        *v15 = v19;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::markSparseFaceChildren(_QWORD *this)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;

  v1 = (int *)this[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = 4;
    *(_QWORD *)&v4 = 0x200000002;
    *((_QWORD *)&v4 + 1) = 0x200000002;
    do
    {
      v5 = this[15] + 4 * *(int *)(this[11] + v3);
      v6 = this[18] + 4 * *(int *)(this[13] + v3);
      v7 = this[51];
      if ((*(_BYTE *)(v7 + v2) & 1) != 0)
      {
        *(_OWORD *)v5 = v4;
        *(_DWORD *)v6 = 2;
        *(_QWORD *)(v6 + 4) = 0x200000002;
        *(_BYTE *)(v7 + v2) &= 0xE1u;
      }
      else
      {
        v8 = *(int *)(*((_QWORD *)v1 + 3) + v3);
        v9 = (int *)(*((_QWORD *)v1 + 6) + 4 * v8);
        if ((*(_BYTE *)(this[57] + v9[1]) & 1) + (*(_BYTE *)(this[57] + *v9) & 1) + (*(_BYTE *)(this[57] + v9[2]) & 1))
        {
          v10 = *(_BYTE *)(this[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8 + 4)) & 0xE | (*(unsigned __int8 *)(this[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8)) >> 1) & 0xF | (2 * *(unsigned __int8 *)(this[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8 + 8))) & 0xC;
          *(_BYTE *)(v7 + v2) = *(_BYTE *)(v7 + v2) & 0xE1 | (2 * v10);
          if (v10)
          {
            *(_DWORD *)(v5 + 12) = 1;
            *(_DWORD *)v6 = 1;
            *(_QWORD *)(v6 + 4) = 0x100000001;
          }
          v11 = this[57];
          if ((*(_BYTE *)(v11 + *v9) & 1) != 0)
          {
            *(_DWORD *)v5 = 1;
            *(_DWORD *)v6 = 1;
          }
          if ((*(_BYTE *)(v11 + v9[1]) & 1) != 0)
          {
            *(_DWORD *)(v5 + 4) = 1;
            *(_DWORD *)(v6 + 4) = 1;
          }
          if ((*(_BYTE *)(v11 + v9[2]) & 1) != 0)
          {
            *(_DWORD *)(v5 + 8) = 1;
            *(_DWORD *)(v6 + 8) = 1;
          }
        }
      }
      ++v2;
      v1 = (int *)this[1];
      v3 += 8;
    }
    while (v2 < *v1);
  }
  return this;
}

OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::EndCapBSplineBasisPatchFactory(OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3, OpenSubdiv::v3_1_1::Far::StencilTable *a4)
{
  uint64_t v6;
  std::vector<int>::size_type v7;
  int v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v6 = **(int **)(*((_QWORD *)a2 + 11) + 24 * (((unint64_t)*((unsigned __int8 *)a2 + 8) >> 2) & 0xF));
  v7 = 7 * v6;
  v8 = 112 * v6;
  if (v8 >= 104857600)
    v9 = 104857600;
  else
    v9 = v8;
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 16), v7);
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 64), v9);
  std::vector<float>::reserve((void **)a3 + 11, v9);
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    std::vector<int>::reserve((std::vector<int> *)(v10 + 16), v7);
    std::vector<int>::reserve((std::vector<int> *)(v10 + 64), v7);
    std::vector<float>::reserve((void **)(v10 + 88), v7);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::GetPatchPoints(uint64_t a1, uint64_t a2, int a3, __int16 *a4, unsigned int a5, unsigned int a6)
{
  uint64_t v8;
  int32x4_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  __int16 v14;
  __int16 v15;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (int32x4_t *)(*(_QWORD *)(a2 + 48) + 4 * *(int *)(v8 + 8 * a3 + 4));
  v10 = *(unsigned int *)(v8 + 8 * a3);
  if ((a6 & 0x80000000) == 0)
    return OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPointsFromGregoryBasis(a1);
  v11 = 0;
  v12 = -1;
  do
  {
    v14 = *(_WORD *)(*(_QWORD *)(a2 + 432) + 2 * v9->i32[v11]);
    if ((v14 & 0x780) != 0x80 || (v15 = *a4) != 0)
      LOBYTE(v15) = 1;
    if ((v14 & 2) != 0)
    {
      if (v12 < 0)
        v12 = v11;
      else
        LOBYTE(v15) = 1;
    }
    if (v11 > 2)
      break;
    ++v11;
    a4 += 3;
  }
  while ((v15 & 1) == 0);
  if ((v15 & 1) == 0)
    return OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(a1, (_DWORD *)a2, a3, v12, v9, v10, a5, a6);
  else
    return OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPointsFromGregoryBasis(a1);
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPointsFromGregoryBasis(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  unsigned int v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t i;
  float v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  char *v40;
  OpenSubdiv::v3_1_1::Far::StencilTable *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t k;
  int v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  _QWORD *v60;
  char *v61;
  unint64_t v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t m;
  _BYTE *v91;
  uint64_t n;
  _BYTE *v93;
  uint64_t ii;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v100;
  _BYTE v101[4];
  int v102;
  _BYTE v103[16];
  int v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[352];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[352];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[1776];
  _BYTE v120[344];
  void *__p;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  _QWORD v126[18];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v102 = v3;
  v100 = v4;
  v5 = v1;
  v126[16] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v1 + 16);
  if ((v2 & 0x80000000) != 0)
  {
    v10 = *(_DWORD *)(v6 + 20);
  }
  else
  {
    v8 = v6 + 40;
    v7 = *(uint64_t **)(v6 + 40);
    v9 = *(_QWORD *)(v8 + 8) - (_QWORD)v7;
    if ((int)((unint64_t)v9 >> 3) < 1)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = (int)(v9 >> 3);
      if (v11 <= 1)
        v11 = 1;
      do
      {
        v12 = *v7++;
        v10 += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 456) + 8 * v2) + 16);
        --v11;
      }
      while (v11);
    }
  }
  v13 = 0;
  v14 = (_QWORD *)(v1 + 48);
  v15 = *(_DWORD *)(v1 + 24);
  v16 = *(char **)(v1 + 40);
  do
  {
    v17 = v15 + v10;
    if ((unint64_t)v16 >= *v14)
    {
      v19 = *(char **)(v5 + 32);
      v20 = (v16 - v19) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
LABEL_110:
        abort();
      v22 = *v14 - (_QWORD)v19;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5 + 48, v23);
        v19 = *(char **)(v5 + 32);
        v16 = *(char **)(v5 + 40);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = v17;
      v18 = v25 + 4;
      while (v16 != v19)
      {
        v26 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(_QWORD *)(v5 + 32) = v25;
      *(_QWORD *)(v5 + 40) = v18;
      *(_QWORD *)(v5 + 48) = &v24[4 * v23];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v16 = v17;
      v18 = v16 + 4;
    }
    *(_QWORD *)(v5 + 40) = v18;
    v15 = *(_DWORD *)(v5 + 24) + 1;
    *(_DWORD *)(v5 + 24) = v15;
    ++v13;
    v16 = v18;
  }
  while (v13 != 16);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis((uint64_t)v103);
  v126[0] = v103;
  v126[1] = &v108;
  v126[2] = &v113;
  v126[3] = &v105;
  v126[4] = &v112;
  v126[5] = &v116;
  v126[6] = &v117;
  v126[7] = &v109;
  v126[8] = &v111;
  v126[9] = v119;
  v126[10] = &v118;
  v126[11] = &v114;
  v126[12] = v107;
  v126[13] = v115;
  v126[14] = &v110;
  v126[15] = &v106;
  v27 = v104;
  v28 = &v122;
  v122 = &v124;
  v123 = 0x1000000010;
  v29 = 16;
  v125 = 0;
  do
  {
    *((_DWORD *)v28 + 4) = 0;
    v28[3] = (uint64_t *)(v28 + 5);
    v28[45] = 0;
    v28[4] = (uint64_t *)0x2800000028;
    v28 += 44;
    --v29;
  }
  while (v29);
  v30 = 0;
  v31 = (char *)&unk_22619D384;
  do
  {
    v32 = 0;
    v33 = 4 * v30;
    v34 = v126;
    do
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)&v122[44 * v32 + 44 * v33], v27);
      for (i = 0; i != 16; i += 4)
      {
        v36 = *(float *)&v31[i];
        if (v36 != 0.0)
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v122[44 * v32 + 44 * v33], (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v34[i], v36);
      }
      ++v32;
      ++v34;
    }
    while (v32 != 4);
    ++v30;
    v31 += 16;
  }
  while (v30 != 4);
  v37 = 0;
  for (j = 0; j != 4; ++j)
  {
    v39 = 0;
    v40 = (char *)&unk_22619D384;
    do
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, v27);
      v42 = 0;
      v43 = v37;
      do
      {
        v44 = *(float *)&v40[v42];
        if (v44 != 0.0)
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v122 + v43), v44);
        v42 += 4;
        v43 += 352;
      }
      while (v42 != 16);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)v120, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v5, v41);
      operator delete(__p);
      ++v39;
      v40 += 16;
    }
    while (v39 != 4);
    v37 += 1408;
  }
  if (*(_QWORD *)(v5 + 8))
  {
    for (k = 0; k != 16; ++k)
    {
      v46 = *(_DWORD *)(v100 + 4 * dword_22619D3C4[k]);
      v47 = *(_QWORD **)(v5 + 8);
      v48 = (char *)v47[3];
      v49 = v47[4];
      if ((unint64_t)v48 >= v49)
      {
        v51 = (char *)v47[2];
        v52 = (v48 - v51) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
          goto LABEL_110;
        v54 = v49 - (_QWORD)v51;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 4), v55);
          v51 = (char *)v47[2];
          v48 = (char *)v47[3];
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[4 * v52];
        *(_DWORD *)v57 = 1;
        v50 = v57 + 4;
        while (v48 != v51)
        {
          v58 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        v47[2] = v57;
        v47[3] = v50;
        v47[4] = &v56[4 * v55];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_DWORD *)v48 = 1;
        v50 = v48 + 4;
      }
      v59 = v46 + v102;
      v47[3] = v50;
      v60 = *(_QWORD **)(v5 + 8);
      v61 = (char *)v60[9];
      v62 = v60[10];
      if ((unint64_t)v61 >= v62)
      {
        v64 = (char *)v60[8];
        v65 = (v61 - v64) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          goto LABEL_110;
        v67 = v62 - (_QWORD)v64;
        if (v67 >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 10), v68);
          v64 = (char *)v60[8];
          v61 = (char *)v60[9];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[4 * v65];
        *(_DWORD *)v70 = v59;
        v63 = v70 + 4;
        while (v61 != v64)
        {
          v71 = *((_DWORD *)v61 - 1);
          v61 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        v60[8] = v70;
        v60[9] = v63;
        v60[10] = &v69[4 * v68];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_DWORD *)v61 = v59;
        v63 = v61 + 4;
      }
      v60[9] = v63;
      v72 = *(_QWORD **)(v5 + 8);
      v73 = (char *)v72[12];
      v74 = v72[13];
      if ((unint64_t)v73 >= v74)
      {
        v76 = (char *)v72[11];
        v77 = (v73 - v76) >> 2;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62)
          goto LABEL_110;
        v79 = v74 - (_QWORD)v76;
        if (v79 >> 1 > v78)
          v78 = v79 >> 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
          v80 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
        {
          v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v72 + 13), v80);
          v76 = (char *)v72[11];
          v73 = (char *)v72[12];
        }
        else
        {
          v81 = 0;
        }
        v82 = &v81[4 * v77];
        *(_DWORD *)v82 = 1065353216;
        v75 = v82 + 4;
        while (v73 != v76)
        {
          v83 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v82 - 1) = v83;
          v82 -= 4;
        }
        v72[11] = v82;
        v72[12] = v75;
        v72[13] = &v81[4 * v80];
        if (v76)
          operator delete(v76);
      }
      else
      {
        *(_DWORD *)v73 = 1065353216;
        v75 = v73 + 4;
      }
      v72[12] = v75;
    }
  }
  v84 = *(int *)(v5 + 28);
  *(_DWORD *)(v5 + 28) = v84 + 1;
  v85 = *(_QWORD *)(v5 + 32);
  if ((_DWORD)v123)
  {
    v86 = 0;
    v87 = 43;
    do
    {
      v88 = &v122[v87];
      v89 = &v122[v87 - 42];
      operator delete((void *)v122[v87]);
      *v89 = (uint64_t)(v88 - 40);
      *((_DWORD *)v88 - 81) = 40;
      ++v86;
      v87 += 44;
    }
    while (v86 < v123);
  }
  operator delete(v125);
  for (m = 0; m != -1408; m -= 352)
  {
    v91 = &v103[m];
    operator delete(*(void **)&v119[m + 1752]);
    *((_QWORD *)v91 + 837) = &v119[m + 1432];
    *((_DWORD *)v91 + 1677) = 40;
  }
  for (n = 0; n != -1408; n -= 352)
  {
    v93 = &v103[n];
    operator delete(*(void **)&v119[n + 344]);
    *((_QWORD *)v93 + 661) = &v119[n + 24];
    *((_DWORD *)v93 + 1325) = 40;
  }
  for (ii = 0; ii != -1408; ii -= 352)
  {
    v95 = &v103[ii];
    operator delete(*(void **)&v115[ii + 344]);
    *((_QWORD *)v95 + 485) = v95 + 3896;
    *((_DWORD *)v95 + 973) = 40;
  }
  v96 = 1408;
  do
  {
    v97 = &v103[v96];
    operator delete(*(void **)&v107[v96 + 344]);
    *((_QWORD *)v97 + 133) = v97 + 1080;
    *((_DWORD *)v97 + 269) = 40;
    v96 -= 352;
  }
  while (v96);
  v98 = 1408;
  do
  {
    operator delete(*(void **)&v101[v98]);
    *(_QWORD *)&v103[v98 - 344] = &v103[v98 - 328];
    *(_DWORD *)&v103[v98 - 332] = 40;
    v98 -= 352;
  }
  while (v98);
  return v85 + (v84 << 6);
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(uint64_t a1, _DWORD *a2, int a3, int a4, int32x4_t *a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  unsigned int v15;
  int v16;
  _BYTE *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int *v28;
  __int32 v29;
  __int32 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int32x4_t *v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  float v46;
  __int32 v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  float *v52;
  __float2 v53;
  __float2 v54;
  __float2 v55;
  __float2 v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  int32x4_t *v60;
  _DWORD *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  _DWORD *v83;
  unsigned int v84;
  int v85;
  int v86;
  uint64_t *v87;
  float *v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  float *v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  float *v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  float *v102;
  uint64_t *v103;
  int v104;
  uint64_t v105;
  float *v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  float *v110;
  uint64_t *v111;
  int v112;
  __int32 *v113;
  float *v114;
  uint64_t v115;
  __int32 *v116;
  uint64_t v117;
  float *v118;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  __int32 *v122;
  uint64_t v123;
  float *v124;
  __int32 *v125;
  uint64_t v126;
  float *v127;
  __int32 *v128;
  uint64_t v129;
  float *v130;
  __int32 *v131;
  int v132;
  int v133;
  uint64_t v134;
  float *v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  float *v139;
  _DWORD *v140;
  int v141;
  uint64_t v142;
  float *v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  float *v147;
  _DWORD *v148;
  uint64_t v149;
  float *v150;
  _DWORD *v151;
  uint64_t v152;
  float *v153;
  _DWORD *v154;
  int v155;
  uint64_t v156;
  float *v157;
  _DWORD *v158;
  int v159;
  uint64_t v160;
  float *v161;
  _DWORD *v162;
  int v163;
  uint64_t v164;
  float *v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  float *v169;
  _DWORD *v170;
  uint64_t v171;
  float *v172;
  _DWORD *v173;
  uint64_t v174;
  float *v175;
  _DWORD *v176;
  uint64_t v177;
  float *v178;
  _DWORD *v179;
  uint64_t v180;
  float *v181;
  _DWORD *v182;
  int v183;
  int v184;
  uint64_t v185;
  float *v186;
  uint64_t v187;
  _DWORD *v188;
  uint64_t v189;
  float *v190;
  _DWORD *v191;
  int v192;
  uint64_t *v193;
  float *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  float *v198;
  uint64_t *v199;
  uint64_t v200;
  float *v201;
  uint64_t *v202;
  int v203;
  int v204;
  float *v205;
  uint64_t v206;
  uint64_t *v207;
  OpenSubdiv::v3_1_1::Far::StencilTable *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  OpenSubdiv::v3_1_1::Far::GregoryBasis *v216;
  int v217;
  OpenSubdiv::v3_1_1::Far::GregoryBasis *v218;
  int v219;
  int v220;
  int v221;
  OpenSubdiv::v3_1_1::Far::StencilTable *v222;
  _QWORD *v223;
  int v224;
  int v225;
  int v226;
  int v227;
  OpenSubdiv::v3_1_1::Far::StencilTable *v228;
  _QWORD *v229;
  int v230;
  OpenSubdiv::v3_1_1::Far::StencilTable *v231;
  _QWORD *v232;
  OpenSubdiv::v3_1_1::Far::GregoryBasis *v233;
  int v234;
  OpenSubdiv::v3_1_1::Far::StencilTable *v235;
  _QWORD *v236;
  int v237;
  int v238;
  int v239;
  int v240;
  OpenSubdiv::v3_1_1::Far::StencilTable *v241;
  _QWORD *v242;
  int v243;
  OpenSubdiv::v3_1_1::Far::StencilTable *v244;
  _QWORD *v245;
  int v246;
  OpenSubdiv::v3_1_1::Far::StencilTable *v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  float v265;
  float v266;
  _QWORD *v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  float v271;
  uint64_t v272;
  __int32 v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  void *v277;
  int v278;
  uint64_t v279;
  void *v280;
  unsigned int v281;
  uint64_t v282;
  void *v283;
  int *v284;
  uint64_t v285;
  _BYTE v286[160];
  void *v287;
  void *v288;
  _OWORD v289[4];
  unsigned int v290;
  _DWORD *v291;
  void *v292;
  unsigned int v293;
  _DWORD *v294;
  void *v295;
  unsigned int v296;
  _DWORD *v297;
  void *v298;
  int v299;
  __int32 *v300;
  uint64_t v301;
  __int32 v302;
  float v303[79];
  void *__p;
  void *v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  void *v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;

  v315 = *MEMORY[0x24BDAC8D0];
  v15 = 2 * a2[5] + 16;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v296, v15);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, v15);
  v268 = v15;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, v15);
  v16 = a2[5];
  v17 = v286;
  v284 = (int *)v286;
  v285 = 0x2800000000;
  v287 = 0;
  v18 = 2 * v16;
  if (v16)
  {
    if (v18 < 0x29)
      goto LABEL_6;
    operator delete(0);
    v284 = (int *)v286;
    HIDWORD(v285) = 40;
    v17 = operator new(4 * v18);
    v287 = v17;
    v19 = v18;
  }
  else
  {
    operator delete(0);
    v19 = 40;
  }
  v284 = (int *)v17;
  HIDWORD(v285) = v19;
LABEL_6:
  LODWORD(v285) = v18;
  v274 = a4;
  v267 = a2;
  v269 = a8;
  v20 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex((OpenSubdiv::v3_1_1::Vtr::internal::Level *)a2, a5->i32[a4], (int *)v17, a8);
  v21 = v20;
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = (v22 >> 1);
  v24 = v20 + 1;
  v270 = a4;
  if (v20 < 2)
  {
    v35 = a5;
    v265 = -6.2832;
    v266 = -6.2832;
  }
  else
  {
    v25 = 0;
    if (a4 + 3 <= 0)
      v26 = -(-(a4 + 3) & 3);
    else
      v26 = (a4 + 3) & 3;
    if (a4 + 1 <= 0)
      v27 = -(-(a4 + 1) & 3);
    else
      v27 = (a4 + 1) & 3;
    v28 = v284;
    v29 = a5->i32[v27];
    v30 = a5->i32[v26];
    v31 = -1;
    v32 = -1;
    do
    {
      v34 = *v28;
      v28 += 2;
      v33 = v34;
      if (v34 == v29)
        v31 = v25;
      if (v33 == v30)
        v32 = v25;
      ++v25;
    }
    while (v23 != v25);
    v35 = a5;
    v265 = (float)v31 * 6.2832;
    v266 = (float)v32 * 6.2832;
  }
  LODWORD(v310) = 0;
  v311 = &v313;
  v314 = 0;
  v312 = 0x2800000028;
  LODWORD(v305) = 0;
  v306 = &v308;
  v309 = 0;
  v307 = 0x2800000028;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v310, v24);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v305, v24);
  v36 = (float)(int)v23;
  v37 = cosf(6.2832 / (float)(int)v23);
  if (v21 > 1)
  {
    v38 = 0;
    v39 = 1.0
        / (float)((float)((float)((float)(v37 + 5.0) + sqrtf((float)(v37 + 9.0) * (float)(v37 + 1.0))) * v36) * 0.0625);
    v40 = 2.0 / (float)(v36 + 5.0);
    v271 = 1.0 / (float)(v36 + 5.0);
    do
    {
      v41 = v38 + 1;
      if (v38 + 1 == v23)
        v42 = 0;
      else
        v42 = v38 + 1;
      v43 = &v284[2 * v38];
      v45 = *v43;
      v44 = v43[1];
      v46 = *(float *)&v284[2 * v42];
      v300 = &v302;
      __p = 0;
      v301 = 0x2800000004;
      v47 = v35->i32[v274];
      v303[0] = v36 / (float)(v36 + 5.0);
      v302 = v47;
      v299 = 1;
      if (v47 == LODWORD(v46))
      {
        v303[0] = v40 + (float)(v36 / (float)(v36 + 5.0));
        v48 = 1;
      }
      else
      {
        v303[2] = 2.0 / (float)(v36 + 5.0);
        v48 = 2;
        v303[1] = v46;
        v299 = 2;
      }
      v49 = 0;
      while (SLODWORD(v303[v49 - 1]) != v45)
      {
        v49 += 2;
        if (2 * v48 == v49)
        {
          v50 = &v303[2 * v48 - 1];
          *(_DWORD *)v50 = v45;
          v50[1] = v40;
          v299 = ++v48;
          goto LABEL_37;
        }
      }
      v303[v49] = v40 + v303[v49];
LABEL_37:
      v51 = 0;
      while (SLODWORD(v303[v51 - 1]) != v44)
      {
        v51 += 2;
        if (2 * v48 == v51)
        {
          v52 = &v303[2 * v48 - 1];
          *(_DWORD *)v52 = v44;
          v52[1] = v271;
          v299 = v48 + 1;
          goto LABEL_42;
        }
      }
      v303[v51] = v271 + v303[v51];
LABEL_42:
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v296, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, 1.0 / v36);
      v53 = __sincosf_stret((float)((float)(int)v38 * 6.2832) / v36);
      v54 = __sincosf_stret((float)((float)v42 * 6.2832) / v36);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, v39 * (float)((float)(v54.__cosval * 0.5) + (float)(v53.__cosval * 0.5)));
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, v39 * (float)((float)(v54.__sinval * 0.5) + (float)(v53.__sinval * 0.5)));
      operator delete(__p);
      ++v38;
    }
    while (v41 != v23);
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v293, (int *)&v296);
  v55 = __sincosf_stret(v265 / v36);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, v55.__cosval);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, v55.__sinval);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v290, (int *)&v296);
  v56 = __sincosf_stret(v266 / v36);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, v56.__cosval);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, v56.__sinval);
  operator delete(v309);
  operator delete(v314);
  operator delete(v287);
  v57 = v296;
  if ((int)v296 >= 1)
  {
    v58 = v297;
    do
    {
      *v58 += a7;
      v58 += 2;
      --v57;
    }
    while (v57);
  }
  v59 = v293;
  v60 = v35;
  if ((int)v293 >= 1)
  {
    v61 = v294;
    do
    {
      *v61 += a7;
      v61 += 2;
      --v59;
    }
    while (v59);
  }
  v62 = v290;
  if ((int)v290 >= 1)
  {
    v63 = v291;
    do
    {
      *v63 += a7;
      v63 += 2;
      --v62;
    }
    while (v62);
  }
  v64 = 0;
  v289[0] = vaddq_s32(*v35, vdupq_n_s32(a7));
  v65 = v267[3];
  v66 = v267[6];
  v67 = v66 + 4 * *(int *)(v65 + 4 * ((2 * a3) | 1));
  v68 = v267[36];
  v69 = v267[33];
  v70 = v267[39];
  v71 = 4;
  do
  {
    v72 = *(int *)(v67 + 4 * v64);
    v73 = *(int *)(v69 + 8 * v72 + 4);
    v74 = (_DWORD *)(v68 + 4 * v73);
    v75 = v70 + 2 * v73;
    if (v64 == v270)
    {
      v76 = *(unsigned int *)(v69 + 8 * (_DWORD)v72);
      if ((int)v76 < 1)
      {
LABEL_58:
        LODWORD(v77) = -1;
      }
      else
      {
        v77 = 0;
        while (v74[v77] != a3)
        {
          if (v76 == ++v77)
            goto LABEL_58;
        }
      }
      *((_DWORD *)v289 + v71) = *(_DWORD *)(v66
                                          + 4 * *(int *)(v65 + 8 * (int)v74[((int)v77 + 1) % (int)v76] + 4)
                                          + 4
                                          * ((*(_WORD *)(v75 + 2 * (((int)v77 + 1) % (int)v76)) - 1) & 3))
                              + a7;
      v78 = (_DWORD *)(v66
                     + 4 * *(int *)(v65 + 8 * (int)v74[((int)v76 + (int)v77 - 1) % (int)v76] + 4)
                     + 4 * ((*(_WORD *)(v75 + 2 * (((int)v76 + (int)v77 - 1) % (int)v76)) + 1) & 3));
    }
    else
    {
      if (*v74 == a3)
      {
        v79 = 0;
      }
      else if (v74[1] == a3)
      {
        v79 = 1;
      }
      else if (v74[2] == a3)
      {
        v79 = 2;
      }
      else if (v74[3] == a3)
      {
        v79 = 3;
      }
      else
      {
        v79 = -1;
      }
      v80 = (v79 + 2) & 3;
      v81 = *(_WORD *)(v75 + 2 * v80);
      v82 = v66 + 4 * *(int *)(v65 + 8 * (int)v74[v80] + 4);
      v83 = (_DWORD *)v289 + v71;
      v84 = *(_DWORD *)(v82 + 4 * ((v81 + 2) & 3)) + a7;
      *v83 = *(_DWORD *)(v82 + 4 * ((v81 + 1) & 3)) + a7;
      v83[1] = v84;
      v78 = (_DWORD *)(v82 + 4 * ((v81 - 1) & 3));
    }
    *((_DWORD *)v289 + v71 + 2) = *v78 + a7;
    v71 += 3;
    ++v64;
  }
  while (v64 != 4);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v284, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v281, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v278, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v275, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, 12.0);
  v85 = *((_DWORD *)v289
        + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274]);
  v86 = (int)v305;
  v87 = v306;
  if ((int)v305 < 1)
  {
LABEL_75:
    v90 = &v306[(int)v305];
    *(_DWORD *)v90 = v85;
    *((_DWORD *)v90 + 1) = -1062557013;
    LODWORD(v305) = ++v86;
  }
  else
  {
    v88 = (float *)v306 + 1;
    v89 = v305;
    while (*((_DWORD *)v88 - 1) != v85)
    {
      v88 += 2;
      if (!--v89)
        goto LABEL_75;
    }
    *v88 = *v88 + -5.3333;
  }
  v91 = *((_DWORD *)v289
        + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 1]);
  if (v86 < 1)
  {
LABEL_81:
    v94 = &v87[v86];
    *(_DWORD *)v94 = v91;
    *((_DWORD *)v94 + 1) = -1070945621;
    LODWORD(v305) = ++v86;
  }
  else
  {
    v92 = v86;
    v93 = (float *)v87 + 1;
    while (*((_DWORD *)v93 - 1) != v91)
    {
      v93 += 2;
      if (!--v92)
        goto LABEL_81;
    }
    *v93 = *v93 + -2.6667;
  }
  v95 = OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 2];
  v96 = *((_DWORD *)v289 + v95);
  if (v86 < 1)
  {
LABEL_87:
    v99 = &v87[v86];
    *(_DWORD *)v99 = v96;
    *((_DWORD *)v99 + 1) = -1087722837;
    LODWORD(v305) = ++v86;
  }
  else
  {
    v97 = v86;
    v98 = (float *)v87 + 1;
    while (*((_DWORD *)v98 - 1) != v96)
    {
      v98 += 2;
      if (!--v97)
        goto LABEL_87;
    }
    *v98 = *v98 + -0.66667;
  }
  v100 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 3]);
  if (v86 < 1)
  {
LABEL_93:
    v103 = &v87[v86];
    *(_DWORD *)v103 = v100;
    *((_DWORD *)v103 + 1) = -1079334229;
    LODWORD(v305) = ++v86;
  }
  else
  {
    v101 = v86;
    v102 = (float *)v87 + 1;
    while (*((_DWORD *)v102 - 1) != v100)
    {
      v102 += 2;
      if (!--v101)
        goto LABEL_93;
    }
    *v102 = *v102 + -1.3333;
  }
  v104 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 6]);
  if (v86 < 1)
  {
LABEL_99:
    v107 = &v87[v86];
    *(_DWORD *)v107 = v104;
    *((_DWORD *)v107 + 1) = -1096111445;
    LODWORD(v305) = ++v86;
  }
  else
  {
    v105 = v86;
    v106 = (float *)v87 + 1;
    while (*((_DWORD *)v106 - 1) != v104)
    {
      v106 += 2;
      if (!--v105)
        goto LABEL_99;
    }
    *v106 = *v106 + -0.33333;
  }
  v108 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 7]);
  v272 = v95;
  if (v86 < 1)
  {
LABEL_105:
    v111 = &v87[v86];
    *(_DWORD *)v111 = v108;
    *((_DWORD *)v111 + 1) = -1087722837;
    LODWORD(v305) = v86 + 1;
  }
  else
  {
    v109 = v86;
    v110 = (float *)v87 + 1;
    while (*((_DWORD *)v110 - 1) != v108)
    {
      v110 += 2;
      if (!--v109)
        goto LABEL_105;
    }
    *v110 = *v110 + -0.66667;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, -6.0);
  v112 = v299;
  v113 = v300;
  if (v299 < 1)
  {
LABEL_111:
    v116 = &v300[2 * v299];
    *v116 = v85;
    v116[1] = 1076538027;
    v299 = ++v112;
  }
  else
  {
    v114 = (float *)(v300 + 1);
    v115 = v299;
    while (*((_DWORD *)v114 - 1) != v85)
    {
      v114 += 2;
      if (!--v115)
        goto LABEL_111;
    }
    *v114 = *v114 + 2.6667;
  }
  if (v112 < 1)
  {
LABEL_117:
    v119 = &v113[2 * v112];
    *v119 = v91;
    v119[1] = 1068149419;
    v299 = ++v112;
  }
  else
  {
    v117 = v112;
    v118 = (float *)(v113 + 1);
    while (*((_DWORD *)v118 - 1) != v91)
    {
      v118 += 2;
      if (!--v117)
        goto LABEL_117;
    }
    *v118 = *v118 + 1.3333;
  }
  if (v112 < 1)
  {
LABEL_123:
    v122 = &v113[2 * v112];
    *v122 = v96;
    v122[1] = 1051372203;
    v299 = ++v112;
  }
  else
  {
    v120 = v112;
    v121 = (float *)(v113 + 1);
    while (*((_DWORD *)v121 - 1) != v96)
    {
      v121 += 2;
      if (!--v120)
        goto LABEL_123;
    }
    *v121 = *v121 + 0.33333;
  }
  if (v112 < 1)
  {
LABEL_129:
    v125 = &v113[2 * v112];
    *v125 = v100;
    v125[1] = 1059760811;
    v299 = ++v112;
  }
  else
  {
    v123 = v112;
    v124 = (float *)(v113 + 1);
    while (*((_DWORD *)v124 - 1) != v100)
    {
      v124 += 2;
      if (!--v123)
        goto LABEL_129;
    }
    *v124 = *v124 + 0.66667;
  }
  if (v112 < 1)
  {
LABEL_135:
    v128 = &v113[2 * v112];
    *v128 = v104;
    v128[1] = 1059760811;
    v299 = ++v112;
  }
  else
  {
    v126 = v112;
    v127 = (float *)(v113 + 1);
    while (*((_DWORD *)v127 - 1) != v104)
    {
      v127 += 2;
      if (!--v126)
        goto LABEL_135;
    }
    *v127 = *v127 + 0.66667;
  }
  if (v112 < 1)
  {
LABEL_141:
    v131 = &v113[2 * v112];
    *v131 = v108;
    v131[1] = 1068149419;
    v299 = v112 + 1;
  }
  else
  {
    v129 = v112;
    v130 = (float *)(v113 + 1);
    while (*((_DWORD *)v130 - 1) != v108)
    {
      v130 += 2;
      if (!--v129)
        goto LABEL_141;
    }
    *v130 = *v130 + 1.3333;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v284, (int *)&v305);
  v132 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 8]);
  v133 = (int)v284;
  v134 = v285;
  if ((int)v284 < 1)
  {
LABEL_147:
    v137 = (_DWORD *)(v285 + 8 * (int)v284);
    *v137 = v132;
    v137[1] = 1065353216;
    LODWORD(v284) = ++v133;
  }
  else
  {
    v135 = (float *)(v285 + 4);
    v136 = v284;
    while (*((_DWORD *)v135 - 1) != v132)
    {
      v135 += 2;
      if (!--v136)
        goto LABEL_147;
    }
    *v135 = *v135 + 1.0;
  }
  if (v133 < 1)
  {
LABEL_153:
    v140 = (_DWORD *)(v134 + 8 * v133);
    *v140 = v104;
    v140[1] = -1082130432;
    LODWORD(v284) = v133 + 1;
  }
  else
  {
    v138 = v133;
    v139 = (float *)(v134 + 4);
    while (*((_DWORD *)v139 - 1) != v104)
    {
      v139 += 2;
      if (!--v138)
        goto LABEL_153;
    }
    *v139 = *v139 + -1.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v281, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, 12.0);
  v141 = v281;
  v142 = v282;
  if ((int)v281 < 1)
  {
LABEL_159:
    v145 = (_DWORD *)(v282 + 8 * (int)v281);
    *v145 = v85;
    v145[1] = -1062557013;
    v281 = ++v141;
  }
  else
  {
    v143 = (float *)(v282 + 4);
    v144 = v281;
    while (*((_DWORD *)v143 - 1) != v85)
    {
      v143 += 2;
      if (!--v144)
        goto LABEL_159;
    }
    *v143 = *v143 + -5.3333;
  }
  if (v141 < 1)
  {
LABEL_165:
    v148 = (_DWORD *)(v142 + 8 * v141);
    *v148 = v91;
    v148[1] = -1079334229;
    v281 = ++v141;
  }
  else
  {
    v146 = v141;
    v147 = (float *)(v142 + 4);
    while (*((_DWORD *)v147 - 1) != v91)
    {
      v147 += 2;
      if (!--v146)
        goto LABEL_165;
    }
    *v147 = *v147 + -1.3333;
  }
  if (v141 < 1)
  {
LABEL_171:
    v151 = (_DWORD *)(v142 + 8 * v141);
    *v151 = v96;
    v151[1] = -1087722837;
    v281 = ++v141;
  }
  else
  {
    v149 = v141;
    v150 = (float *)(v142 + 4);
    while (*((_DWORD *)v150 - 1) != v96)
    {
      v150 += 2;
      if (!--v149)
        goto LABEL_171;
    }
    *v150 = *v150 + -0.66667;
  }
  if (v141 < 1)
  {
LABEL_177:
    v154 = (_DWORD *)(v142 + 8 * v141);
    *v154 = v100;
    v154[1] = -1070945621;
    v281 = ++v141;
  }
  else
  {
    v152 = v141;
    v153 = (float *)(v142 + 4);
    while (*((_DWORD *)v153 - 1) != v100)
    {
      v153 += 2;
      if (!--v152)
        goto LABEL_177;
    }
    *v153 = *v153 + -2.6667;
  }
  v155 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 4]);
  if (v141 < 1)
  {
LABEL_183:
    v158 = (_DWORD *)(v142 + 8 * v141);
    *v158 = v155;
    v158[1] = -1096111445;
    v281 = ++v141;
  }
  else
  {
    v156 = v141;
    v157 = (float *)(v142 + 4);
    while (*((_DWORD *)v157 - 1) != v155)
    {
      v157 += 2;
      if (!--v156)
        goto LABEL_183;
    }
    *v157 = *v157 + -0.33333;
  }
  v159 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 15]);
  if (v141 < 1)
  {
LABEL_189:
    v162 = (_DWORD *)(v142 + 8 * v141);
    *v162 = v159;
    v162[1] = -1087722837;
    v281 = v141 + 1;
  }
  else
  {
    v160 = v141;
    v161 = (float *)(v142 + 4);
    while (*((_DWORD *)v161 - 1) != v159)
    {
      v161 += 2;
      if (!--v160)
        goto LABEL_189;
    }
    *v161 = *v161 + -0.66667;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v278, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, -6.0);
  v163 = v278;
  v164 = v279;
  if (v278 < 1)
  {
LABEL_195:
    v167 = (_DWORD *)(v279 + 8 * v278);
    *v167 = v85;
    v167[1] = 1076538027;
    v278 = ++v163;
  }
  else
  {
    v165 = (float *)(v279 + 4);
    v166 = v278;
    while (*((_DWORD *)v165 - 1) != v85)
    {
      v165 += 2;
      if (!--v166)
        goto LABEL_195;
    }
    *v165 = *v165 + 2.6667;
  }
  if (v163 < 1)
  {
LABEL_201:
    v170 = (_DWORD *)(v164 + 8 * v163);
    *v170 = v91;
    v170[1] = 1059760811;
    v278 = ++v163;
  }
  else
  {
    v168 = v163;
    v169 = (float *)(v164 + 4);
    while (*((_DWORD *)v169 - 1) != v91)
    {
      v169 += 2;
      if (!--v168)
        goto LABEL_201;
    }
    *v169 = *v169 + 0.66667;
  }
  if (v163 < 1)
  {
LABEL_207:
    v173 = (_DWORD *)(v164 + 8 * v163);
    *v173 = v96;
    v173[1] = 1051372203;
    v278 = ++v163;
  }
  else
  {
    v171 = v163;
    v172 = (float *)(v164 + 4);
    while (*((_DWORD *)v172 - 1) != v96)
    {
      v172 += 2;
      if (!--v171)
        goto LABEL_207;
    }
    *v172 = *v172 + 0.33333;
  }
  if (v163 < 1)
  {
LABEL_213:
    v176 = (_DWORD *)(v164 + 8 * v163);
    *v176 = v100;
    v176[1] = 1068149419;
    v278 = ++v163;
  }
  else
  {
    v174 = v163;
    v175 = (float *)(v164 + 4);
    while (*((_DWORD *)v175 - 1) != v100)
    {
      v175 += 2;
      if (!--v174)
        goto LABEL_213;
    }
    *v175 = *v175 + 1.3333;
  }
  if (v163 < 1)
  {
LABEL_219:
    v179 = (_DWORD *)(v164 + 8 * v163);
    *v179 = v155;
    v179[1] = 1059760811;
    v278 = ++v163;
  }
  else
  {
    v177 = v163;
    v178 = (float *)(v164 + 4);
    while (*((_DWORD *)v178 - 1) != v155)
    {
      v178 += 2;
      if (!--v177)
        goto LABEL_219;
    }
    *v178 = *v178 + 0.66667;
  }
  if (v163 < 1)
  {
LABEL_225:
    v182 = (_DWORD *)(v164 + 8 * v163);
    *v182 = v159;
    v182[1] = 1068149419;
    v278 = v163 + 1;
  }
  else
  {
    v180 = v163;
    v181 = (float *)(v164 + 4);
    while (*((_DWORD *)v181 - 1) != v159)
    {
      v181 += 2;
      if (!--v180)
        goto LABEL_225;
    }
    *v181 = *v181 + 1.3333;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v275, (int *)&v281);
  v183 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 14]);
  v184 = v275;
  v185 = v276;
  if ((int)v275 < 1)
  {
LABEL_231:
    v188 = (_DWORD *)(v276 + 8 * (int)v275);
    *v188 = v183;
    v188[1] = 1065353216;
    v275 = ++v184;
  }
  else
  {
    v186 = (float *)(v276 + 4);
    v187 = v275;
    while (*((_DWORD *)v186 - 1) != v183)
    {
      v186 += 2;
      if (!--v187)
        goto LABEL_231;
    }
    *v186 = *v186 + 1.0;
  }
  if (v184 < 1)
  {
LABEL_237:
    v191 = (_DWORD *)(v185 + 8 * v184);
    *v191 = v155;
    v191[1] = -1082130432;
    v275 = v184 + 1;
  }
  else
  {
    v189 = v184;
    v190 = (float *)(v185 + 4);
    while (*((_DWORD *)v190 - 1) != v155)
    {
      v190 += 2;
      if (!--v189)
        goto LABEL_237;
    }
    *v190 = *v190 + -1.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v296, 36.0);
  v192 = (int)v310;
  v193 = v311;
  if ((int)v310 < 1)
  {
LABEL_243:
    v196 = &v311[(int)v310];
    *(_DWORD *)v196 = v85;
    *((_DWORD *)v196 + 1) = -1048576000;
    LODWORD(v310) = ++v192;
  }
  else
  {
    v194 = (float *)v311 + 1;
    v195 = v310;
    while (*((_DWORD *)v194 - 1) != v85)
    {
      v194 += 2;
      if (!--v195)
        goto LABEL_243;
    }
    *v194 = *v194 + -16.0;
  }
  if (v192 < 1)
  {
LABEL_249:
    v199 = &v193[v192];
    *(_DWORD *)v199 = v91;
    *((_DWORD *)v199 + 1) = -1065353216;
    LODWORD(v310) = ++v192;
  }
  else
  {
    v197 = v192;
    v198 = (float *)v193 + 1;
    while (*((_DWORD *)v198 - 1) != v91)
    {
      v198 += 2;
      if (!--v197)
        goto LABEL_249;
    }
    *v198 = *v198 + -4.0;
  }
  if (v192 < 1)
  {
LABEL_255:
    v202 = &v193[v192];
    *(_DWORD *)v202 = v100;
    *((_DWORD *)v202 + 1) = -1065353216;
    LODWORD(v310) = v192 + 1;
  }
  else
  {
    v200 = v192;
    v201 = (float *)v193 + 1;
    while (*((_DWORD *)v201 - 1) != v100)
    {
      v201 += 2;
      if (!--v200)
        goto LABEL_255;
    }
    *v201 = *v201 + -4.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v281, -4.0);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, -4.0);
  v203 = *((_DWORD *)v289 + v272);
  v204 = (int)v310;
  if ((int)v310 < 1)
  {
LABEL_261:
    v207 = &v311[(int)v310];
    *(_DWORD *)v207 = v203;
    *((_DWORD *)v207 + 1) = -1082130432;
    LODWORD(v310) = v204 + 1;
  }
  else
  {
    v205 = (float *)v311 + 1;
    v206 = v310;
    while (*((_DWORD *)v205 - 1) != v203)
    {
      v205 += 2;
      if (!--v206)
        goto LABEL_261;
    }
    *v205 = *v205 + -1.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, -1.0);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v278, -1.0);
  v209 = *(_QWORD *)(a1 + 16);
  if ((v269 & 0x80000000) != 0)
  {
    v213 = *(_DWORD *)(v209 + 20);
  }
  else
  {
    v211 = v209 + 40;
    v210 = *(uint64_t **)(v209 + 40);
    v212 = *(_QWORD *)(v211 + 8) - (_QWORD)v210;
    if ((int)((unint64_t)v212 >> 3) < 1)
    {
      v213 = 0;
    }
    else
    {
      v213 = 0;
      v214 = (int)(v212 >> 3);
      if (v214 <= 1)
        v214 = 1;
      do
      {
        v215 = *v210++;
        v213 += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v215 + 456) + 8 * v269) + 16);
        --v214;
      }
      while (v214);
    }
  }
  v216 = (OpenSubdiv::v3_1_1::Far::GregoryBasis *)(v35->i32[v274] + a7);
  v217 = v270 + 1;
  v218 = (OpenSubdiv::v3_1_1::Far::GregoryBasis *)(v35->i32[(v270 + 1) & 3] + a7);
  v219 = v270 + 3;
  v273 = v60->i32[(v270 + 3) & 3];
  v220 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v220 + 1;
  v221 = 3 * v274;
  *((_DWORD *)&v289[1] + 3 * v274 + 2) = v220 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v305, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v208);
  v223 = *(_QWORD **)(a1 + 8);
  if (v223)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v216, v223, v222);
  v224 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v224 + 1;
  v225 = v224 + v213;
  if (v217 <= 0)
    v226 = -(-v217 & 3);
  else
    v226 = (v270 + 1) & 3;
  v227 = 3 * v226;
  *((_DWORD *)&v289[1] + 3 * v226) = v225;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v299, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v222);
  v229 = *(_QWORD **)(a1 + 8);
  if (v229)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v218, v229, v228);
  v230 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v230 + 1;
  *((_DWORD *)&v289[1] + v227 + 1) = v230 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v284, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v228);
  v232 = *(_QWORD **)(a1 + 8);
  if (v232)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v218, v232, v231);
  v233 = (OpenSubdiv::v3_1_1::Far::GregoryBasis *)(v273 + a7);
  v234 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v234 + 1;
  *((_DWORD *)&v289[1] + v221) = v234 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v281, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v231);
  v236 = *(_QWORD **)(a1 + 8);
  if (v236)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v216, v236, v235);
  v237 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v237 + 1;
  v238 = v237 + v213;
  if (v219 <= 0)
    v239 = -(-v219 & 3);
  else
    v239 = v219 & 3;
  v240 = 3 * v239;
  *((_DWORD *)&v289[1] + 3 * v239 + 2) = v238;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v278, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v235);
  v242 = *(_QWORD **)(a1 + 8);
  if (v242)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v233, v242, v241);
  v243 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v243 + 1;
  *((_DWORD *)&v289[1] + v240 + 1) = v243 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v275, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v241);
  v245 = *(_QWORD **)(a1 + 8);
  if (v245)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v233, v245, v244);
  v246 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v246 + 1;
  *((_DWORD *)&v289[1] + v221 + 1) = v246 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v310, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v244);
  v248 = *(_QWORD **)(a1 + 8);
  if (v248)
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v216, v248, v247);
  v249 = 0;
  v250 = (_QWORD *)(a1 + 48);
  v251 = *(char **)(a1 + 40);
  do
  {
    v252 = OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::permuteRegular[v249];
    if ((unint64_t)v251 >= *v250)
    {
      v254 = *(char **)(a1 + 32);
      v255 = (v251 - v254) >> 2;
      v256 = v255 + 1;
      if ((unint64_t)(v255 + 1) >> 62)
        abort();
      v257 = *v250 - (_QWORD)v254;
      if (v257 >> 1 > v256)
        v256 = v257 >> 1;
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL)
        v258 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v258 = v256;
      if (v258)
      {
        v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 48, v258);
        v254 = *(char **)(a1 + 32);
        v251 = *(char **)(a1 + 40);
      }
      else
      {
        v259 = 0;
      }
      v260 = &v259[4 * v255];
      *(_DWORD *)v260 = *((_DWORD *)v289 + v252);
      v253 = v260 + 4;
      while (v251 != v254)
      {
        v261 = *((_DWORD *)v251 - 1);
        v251 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *(_QWORD *)(a1 + 32) = v260;
      *(_QWORD *)(a1 + 40) = v253;
      *(_QWORD *)(a1 + 48) = &v259[4 * v258];
      if (v254)
        operator delete(v254);
    }
    else
    {
      *(_DWORD *)v251 = *((_DWORD *)v289 + v252);
      v253 = v251 + 4;
    }
    *(_QWORD *)(a1 + 40) = v253;
    ++v249;
    v251 = v253;
  }
  while (v249 != 16);
  v262 = *(int *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v262 + 1;
  v263 = *(_QWORD *)(a1 + 32);
  operator delete(v277);
  operator delete(v280);
  operator delete(v283);
  operator delete(v288);
  operator delete(__p);
  operator delete(v309);
  operator delete(v314);
  operator delete(v292);
  operator delete(v295);
  operator delete(v298);
  return v263 + (v262 << 6);
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(OpenSubdiv::v3_1_1::Far::GregoryBasis *this, const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t i;
  int v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;

  v5 = *(unsigned int *)this;
  v6 = (char *)a2 + 32;
  v7 = *((_QWORD *)a2 + 4);
  v8 = (char *)*((_QWORD *)a2 + 3);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)*((_QWORD *)a2 + 2);
    v11 = (v8 - v10) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
LABEL_53:
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v14);
      v10 = (char *)*((_QWORD *)a2 + 2);
      v8 = (char *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = v5;
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((_QWORD *)a2 + 2) = v16;
    *((_QWORD *)a2 + 3) = v9;
    *((_QWORD *)a2 + 4) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = v5;
    v9 = v8 + 4;
  }
  *((_QWORD *)a2 + 3) = v9;
  if ((int)v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      v20 = *(_DWORD *)(*((_QWORD *)this + 1) + 8 * i);
      v22 = (char *)*((_QWORD *)a2 + 9);
      v21 = *((_QWORD *)a2 + 10);
      if ((unint64_t)v22 >= v21)
      {
        v24 = (char *)*((_QWORD *)a2 + 8);
        v25 = (v22 - v24) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          goto LABEL_53;
        v27 = v21 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)a2 + 80, v28);
          v24 = (char *)*((_QWORD *)a2 + 8);
          v22 = (char *)*((_QWORD *)a2 + 9);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        *(_DWORD *)v30 = v20;
        v23 = v30 + 4;
        while (v22 != v24)
        {
          v31 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        *((_QWORD *)a2 + 8) = v30;
        *((_QWORD *)a2 + 9) = v23;
        *((_QWORD *)a2 + 10) = &v29[4 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v22 = v20;
        v23 = v22 + 4;
      }
      *((_QWORD *)a2 + 9) = v23;
      v32 = *(_DWORD *)(*((_QWORD *)this + 1) + 8 * i + 4);
      v34 = (char *)*((_QWORD *)a2 + 12);
      v33 = *((_QWORD *)a2 + 13);
      if ((unint64_t)v34 >= v33)
      {
        v36 = (char *)*((_QWORD *)a2 + 11);
        v37 = (v34 - v36) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          goto LABEL_53;
        v39 = v33 - (_QWORD)v36;
        if (v39 >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)a2 + 104, v40);
          v36 = (char *)*((_QWORD *)a2 + 11);
          v34 = (char *)*((_QWORD *)a2 + 12);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[4 * v37];
        *(_DWORD *)v42 = v32;
        v35 = v42 + 4;
        while (v34 != v36)
        {
          v43 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v42 - 1) = v43;
          v42 -= 4;
        }
        *((_QWORD *)a2 + 11) = v42;
        *((_QWORD *)a2 + 12) = v35;
        *((_QWORD *)a2 + 13) = &v41[4 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_DWORD *)v34 = v32;
        v35 = v34 + 4;
      }
      *((_QWORD *)a2 + 12) = v35;
    }
  }
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(OpenSubdiv::v3_1_1::Far::GregoryBasis *this, _QWORD *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;

  v4 = (int)this;
  v5 = (uint64_t)(a2 + 4);
  v6 = a2[4];
  v7 = (char *)a2[3];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)a2[2];
    v10 = (v7 - v9) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      goto LABEL_50;
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5, v13);
      v9 = (char *)a2[2];
      v7 = (char *)a2[3];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = 1;
    v8 = v15 + 4;
    while (v7 != v9)
    {
      v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    a2[2] = v15;
    a2[3] = v8;
    a2[4] = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v7 = 1;
    v8 = v7 + 4;
  }
  v18 = a2[10];
  a2[3] = v8;
  v19 = (char *)a2[9];
  if ((unint64_t)v19 >= v18)
  {
    v21 = (char *)a2[8];
    v22 = (v19 - v21) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      goto LABEL_50;
    v24 = v18 - (_QWORD)v21;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 10), v25);
      v21 = (char *)a2[8];
      v19 = (char *)a2[9];
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v28 = &v26[4 * v25];
    *(_DWORD *)v27 = v4;
    v20 = v27 + 4;
    while (v19 != v21)
    {
      v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    a2[8] = v27;
    a2[9] = v20;
    a2[10] = v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_DWORD *)v19 = v4;
    v20 = v19 + 4;
  }
  v30 = a2[13];
  a2[9] = v20;
  v31 = (char *)a2[12];
  if ((unint64_t)v31 < v30)
  {
    *(_DWORD *)v31 = 1065353216;
    v32 = v31 + 4;
    goto LABEL_49;
  }
  v33 = (char *)a2[11];
  v34 = (v31 - v33) >> 2;
  v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 62)
LABEL_50:
    abort();
  v36 = v30 - (_QWORD)v33;
  if (v36 >> 1 > v35)
    v35 = v36 >> 1;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
    v37 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
  {
    v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 13), v37);
    v33 = (char *)a2[11];
    v31 = (char *)a2[12];
  }
  else
  {
    v38 = 0;
  }
  v39 = &v38[4 * v34];
  v40 = &v38[4 * v37];
  *(_DWORD *)v39 = 1065353216;
  v32 = v39 + 4;
  while (v31 != v33)
  {
    v41 = *((_DWORD *)v31 - 1);
    v31 -= 4;
    *((_DWORD *)v39 - 1) = v41;
    v39 -= 4;
  }
  a2[11] = v39;
  a2[12] = v32;
  a2[13] = v40;
  if (v33)
    operator delete(v33);
LABEL_49:
  a2[12] = v32;
}

OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point(OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *this, unsigned int a2)
{
  char *v4;
  int v5;

  *(_DWORD *)this = 0;
  v4 = (char *)this + 24;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 0x2800000000;
  *((_QWORD *)this + 43) = 0;
  if (!a2)
  {
    operator delete(0);
    v5 = 40;
    goto LABEL_5;
  }
  if (a2 >= 0x29)
  {
    operator delete(0);
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 5) = 40;
    v4 = (char *)operator new(8 * a2);
    *((_QWORD *)this + 43) = v4;
    v5 = a2;
LABEL_5:
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 5) = v5;
  }
  *((_DWORD *)this + 4) = a2;
  return this;
}

OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::EndCapGregoryBasisPatchFactory(OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3, OpenSubdiv::v3_1_1::Far::StencilTable *a4, char a5)
{
  uint64_t v7;
  std::vector<int>::size_type v8;
  int v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = a2;
  *((_BYTE *)this + 24) = a5;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v7 = **(int **)(*((_QWORD *)a2 + 11) + 24 * (((unint64_t)*((unsigned __int8 *)a2 + 8) >> 2) & 0xF));
  v8 = 20 * v7;
  v9 = 320 * v7;
  if (v9 >= 104857600)
    v10 = 104857600;
  else
    v10 = v9;
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 16), v8);
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 64), v10);
  std::vector<float>::reserve((void **)a3 + 11, v10);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    std::vector<int>::reserve((std::vector<int> *)(v11 + 16), v8);
    std::vector<int>::reserve((std::vector<int> *)(v11 + 64), v8);
    std::vector<float>::reserve((void **)(v11 + 88), v8);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _DWORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  int *v45;
  uint64_t i;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int *v50;
  _DWORD *v51;
  int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  int *v58;
  char *v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t j;
  char v65;
  OpenSubdiv::v3_1_1::Far::StencilTable *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t k;
  _BYTE *v78;
  uint64_t m;
  _BYTE *v80;
  uint64_t n;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  int v87;
  _BYTE v88[7060];
  _DWORD __key[5];
  uint64_t v90;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  v9 = 0;
  v90 = *MEMORY[0x24BDAC8D0];
  v10 = (_QWORD *)(v1 + 56);
  v11 = *(char **)(v1 + 48);
  do
  {
    if ((unint64_t)v11 >= *v10)
    {
      v13 = *(char **)(v8 + 40);
      v14 = (v11 - v13) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        goto LABEL_104;
      v16 = *v10 - (_QWORD)v13;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v10, v17);
        v13 = *(char **)(v8 + 40);
        v11 = *(char **)(v8 + 48);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[4 * v14];
      *(_DWORD *)v19 = -1;
      v12 = v19 + 4;
      while (v11 != v13)
      {
        v20 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v19 - 1) = v20;
        v19 -= 4;
      }
      *(_QWORD *)(v8 + 40) = v19;
      *(_QWORD *)(v8 + 48) = v12;
      *(_QWORD *)(v8 + 56) = &v18[4 * v17];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v11 = -1;
      v12 = v11 + 4;
    }
    *(_QWORD *)(v8 + 48) = v12;
    ++v9;
    v11 = v12;
  }
  while (v9 != 20);
  v21 = *(_QWORD *)(v8 + 40) + 80 * *(int *)(v8 + 32);
  v22 = *(_QWORD *)(v8 + 16);
  if ((v3 & 0x80000000) != 0)
  {
    v26 = *(_DWORD *)(v22 + 20);
  }
  else
  {
    v24 = v22 + 40;
    v23 = *(uint64_t **)(v22 + 40);
    v25 = *(_QWORD *)(v24 + 8) - (_QWORD)v23;
    if ((int)((unint64_t)v25 >> 3) < 1)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v27 = (int)(v25 >> 3);
      if (v27 <= 1)
        v27 = 1;
      do
      {
        v28 = *v23++;
        v26 += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 456) + 8 * v3) + 16);
        --v27;
      }
      while (v27);
    }
  }
  if (!*(_BYTE *)(v8 + 24))
    goto LABEL_69;
  v29 = *(_DWORD *)(v7 + 12);
  v30 = *(_QWORD *)(v7 + 72) + 4 * *(int *)(*(_QWORD *)(v7 + 24) + 4 * ((2 * v5) | 1));
  OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceETags((_QWORD *)v7, v5, v88, v3);
  v31 = 0;
  v87 = v29 << 28;
  v32 = OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::gregoryEdgeVerts;
  do
  {
    if ((v88[v31] & 2) != 0)
      goto LABEL_51;
    v33 = *(int *)(v30 + 4 * v31);
    v34 = *(_QWORD *)(v7 + 144);
    v35 = *(unsigned int *)(v34 + 8 * v33);
    if ((int)v35 < 1)
    {
LABEL_34:
      v38 = 0;
    }
    else
    {
      v36 = 0;
      v37 = *(_QWORD *)(v7 + 168) + 4 * *(int *)(v34 + 4 * (int)((2 * v33) | 1));
      while (*(_DWORD *)(v37 + 4 * v36) != v5)
      {
        if (v35 == ++v36)
          goto LABEL_34;
      }
      v38 = *(_DWORD *)(v37 + 4 * (((int)v36 + 1) % (int)v35));
    }
    if (v38 == -1 || v38 >= v5)
      goto LABEL_51;
    v39 = *(_BYTE **)(v8 + 64);
    v40 = *(_BYTE **)(v8 + 72);
    if (v39 == v40)
      break;
    v41 = (_DWORD *)(*(_QWORD *)(v7 + 72) + 4 * *(int *)(*(_QWORD *)(v7 + 24) + 4 * ((2 * v38) | 1)));
    if (*v41 == (_DWORD)v33)
    {
      v42 = 0;
    }
    else if (v41[1] == (_DWORD)v33)
    {
      v42 = 1;
    }
    else if (v41[2] == (_DWORD)v33)
    {
      v42 = 2;
    }
    else
    {
      v42 = v41[3] == (_DWORD)v33 ? 3 : -1;
    }
    __key[0] = v38 | v87;
    v43 = bsearch(__key, v39, (v40 - v39) >> 2, 4uLL, (int (__cdecl *)(const void *, const void *))OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::LevelAndFaceIndex::compare);
    if (!v43)
      break;
    v44 = *(_QWORD *)(v8 + 40)
        + ((uint64_t)((unint64_t)(5 * (((unint64_t)v43 - *(_QWORD *)(v8 + 64)) >> 2)) << 34) >> 30);
    v45 = &OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::gregoryEdgeVerts[4 * v42];
    for (i = 3; i != -1; --i)
    {
      v47 = *v45++;
      *(_DWORD *)(v21 + 4 * v32[i]) = *(_DWORD *)(v44 + 4 * v47);
    }
LABEL_51:
    ++v31;
    v32 += 4;
  }
  while (v31 != 4);
  v48 = v87 | v5;
  v49 = *(_QWORD *)(v8 + 80);
  v50 = *(int **)(v8 + 72);
  if ((unint64_t)v50 < v49)
  {
    *v50 = v48;
    v51 = v50 + 1;
    goto LABEL_68;
  }
  v52 = *(int **)(v8 + 64);
  v53 = v50 - v52;
  v54 = v53 + 1;
  if ((unint64_t)(v53 + 1) >> 62)
LABEL_104:
    abort();
  v55 = v49 - (_QWORD)v52;
  if (v55 >> 1 > v54)
    v54 = v55 >> 1;
  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
    v56 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
  {
    v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v8 + 80, v56);
    v52 = *(int **)(v8 + 64);
    v50 = *(int **)(v8 + 72);
  }
  else
  {
    v57 = 0;
  }
  v58 = (int *)&v57[4 * v53];
  v59 = &v57[4 * v56];
  *v58 = v48;
  v51 = v58 + 1;
  while (v50 != v52)
  {
    v60 = *--v50;
    *--v58 = v60;
  }
  *(_QWORD *)(v8 + 64) = v58;
  *(_QWORD *)(v8 + 72) = v51;
  *(_QWORD *)(v8 + 80) = v59;
  if (v52)
    operator delete(v52);
LABEL_68:
  *(_QWORD *)(v8 + 72) = v51;
LABEL_69:
  v61 = 0;
  v62 = __key;
  v63 = v21;
  do
  {
    for (j = 0; j != 5; ++j)
    {
      if (*(_DWORD *)(v63 + 4 * j) == -1)
      {
        *(_DWORD *)(v63 + 4 * j) = *(_DWORD *)(v8 + 28) + v26;
        ++*(_DWORD *)(v8 + 28);
        v65 = 1;
      }
      else
      {
        v65 = 0;
      }
      *((_BYTE *)v62 + j) = v65;
    }
    ++v61;
    v62 = (_DWORD *)((char *)v62 + 5);
    v63 += 20;
  }
  while (v61 != 4);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis((uint64_t)v88);
  v67 = 0;
  v68 = (char *)__key + 2;
  v69 = 7040;
  v70 = 5632;
  v71 = 4224;
  do
  {
    if (*(v68 - 2))
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v88[v67], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v66);
      v72 = *(_QWORD **)(v8 + 8);
      if (v72)
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v88[v69], v72, v66);
    }
    if (*(v68 - 1))
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v88[v67 + 1408], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v66);
      v73 = *(_QWORD **)(v8 + 8);
      if (v73)
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v88[v69], v73, v66);
    }
    if (*v68)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v88[v67 + 2816], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v66);
      v74 = *(_QWORD **)(v8 + 8);
      if (v74)
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v88[v69], v74, v66);
    }
    if (v68[1])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v88[v71], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v66);
      v75 = *(_QWORD **)(v8 + 8);
      if (v75)
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v88[v69], v75, v66);
    }
    if (v68[2])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v88[v70], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v66);
      v76 = *(_QWORD **)(v8 + 8);
      if (v76)
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v88[v69], v76, v66);
    }
    v68 += 5;
    v67 += 352;
    v69 += 4;
    v70 += 352;
    v71 += 352;
  }
  while (v67 != 1408);
  for (k = 0; k != -1408; k -= 352)
  {
    v78 = &v88[k];
    operator delete(*(void **)&v88[k + 7032]);
    *((_QWORD *)v78 + 837) = &v88[k + 6712];
    *((_DWORD *)v78 + 1677) = 40;
  }
  for (m = 0; m != -1408; m -= 352)
  {
    v80 = &v88[m];
    operator delete(*(void **)&v88[m + 5624]);
    *((_QWORD *)v80 + 661) = &v88[m + 5304];
    *((_DWORD *)v80 + 1325) = 40;
  }
  for (n = 0; n != -1408; n -= 352)
  {
    v82 = &v88[n];
    operator delete(*(void **)&v88[n + 4216]);
    *((_QWORD *)v82 + 485) = v82 + 3896;
    *((_DWORD *)v82 + 973) = 40;
  }
  v83 = 1408;
  do
  {
    v84 = &v88[v83];
    operator delete(*(void **)&v88[v83 + 1400]);
    *((_QWORD *)v84 + 133) = v84 + 1080;
    *((_DWORD *)v84 + 269) = 40;
    v83 -= 352;
  }
  while (v83);
  v85 = 1408;
  do
  {
    operator delete(*(void **)&v88[v85 - 8]);
    *(_QWORD *)&v88[v85 - 344] = &v88[v85 - 328];
    *(_DWORD *)&v88[v85 - 332] = 40;
    v85 -= 352;
  }
  while (v85);
  ++*(_DWORD *)(v8 + 32);
  return v21;
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::LevelAndFaceIndex::compare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

void OpenSubdiv::v3_1_1::Vtr::internal::SparseSelector::selectFace(OpenSubdiv::v3_1_1::Vtr::internal::Refinement **this, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*((_BYTE *)this + 8))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::initializeSparseSelectionTags(*this);
    *((_BYTE *)this + 8) = 1;
  }
  v4 = *((_QWORD *)*this + 51);
  if ((*(_BYTE *)(v4 + a2) & 1) == 0)
  {
    *(_BYTE *)(v4 + a2) |= 1u;
    v5 = (_QWORD *)*((_QWORD *)*this + 1);
    v6 = v5[3];
    v7 = *(unsigned int *)(v6 + 8 * a2);
    if ((int)v7 >= 1)
    {
      v8 = *(int *)(v6 + 8 * a2 + 4);
      v9 = (int *)(v5[9] + 4 * v8);
      v10 = (int *)(v5[6] + 4 * v8);
      do
      {
        v11 = *v9++;
        *(_BYTE *)(*((_QWORD *)*this + 54) + v11) |= 1u;
        v12 = *v10++;
        *(_BYTE *)(*((_QWORD *)*this + 57) + v12) |= 1u;
        --v7;
      }
      while (v7);
    }
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::~QuadRefinement(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::~Refinement(this);
  JUMPOUT(0x2276933B8);
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::allocateParentChildIndices(std::vector<int> *this)
{
  std::vector<int>::pointer end;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::vector<int>::size_type v6;
  std::vector<int>::size_type v7;
  std::vector<int>::size_type v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  std::vector<int>::value_type __x;

  end = this->__end_;
  v3 = *((_QWORD *)end + 7) - *((_QWORD *)end + 6);
  v4 = *((_QWORD *)end + 10) - *((_QWORD *)end + 9);
  v5 = *((_QWORD *)end + 16) - *((_QWORD *)end + 15);
  v6 = *end;
  v7 = end[1];
  v8 = end[2];
  __x = 0;
  v9 = (int *)*((_QWORD *)end + 3);
  v10 = (*((_QWORD *)end + 4) - (_QWORD)v9) >> 2;
  this[3].__end_cap_.__value_ = v9;
  LODWORD(this[4].__begin_) = v10;
  v11 = (int *)*((_QWORD *)end + 3);
  v12 = (*((_QWORD *)end + 4) - (_QWORD)v11) >> 2;
  this[4].__end_ = v11;
  LODWORD(this[4].__end_cap_.__value_) = v12;
  std::vector<unsigned int>::resize(this + 5, (int)(v3 >> 2), &__x);
  std::vector<unsigned int>::resize(this + 6, (int)(v4 >> 2), &__x);
  std::vector<unsigned int>::resize(this + 8, (int)(v5 >> 2), &__x);
  std::vector<unsigned int>::resize(this + 7, v6, &__x);
  std::vector<unsigned int>::resize(this + 9, v7, &__x);
  std::vector<unsigned int>::resize(this + 10, v8, &__x);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  std::vector<int> *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;

  v2 = (std::vector<int> *)*((_QWORD *)this + 2);
  if (v2[1].__end_ == v2[1].__begin_)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexCountsAndOffsets(this);
    v2 = (std::vector<int> *)*((_QWORD *)this + 2);
  }
  std::vector<unsigned int>::resize(v2 + 2, 4 * SLODWORD(v2->__begin_));
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  result = *(unsigned int *)v3;
  if ((int)result >= 1)
  {
    v5 = 0;
    v6 = v3[3];
    v7 = v3[6];
    v8 = v3[9];
    v9 = *((_QWORD *)this + 11);
    v10 = *((_QWORD *)this + 15);
    do
    {
      v11 = *(unsigned int *)(v6 + 8 * v5);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = (8 * v5) | 4;
        v14 = *(int *)(v6 + v13);
        v15 = v7 + 4 * v14;
        v16 = v8 + 4 * v14;
        v17 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          v18 = *(_DWORD *)(v17 + 4 * v12);
          if (v18 != -1)
          {
            if (v12)
              v19 = v12;
            else
              v19 = v11;
            v20 = *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v5);
            LODWORD(v21) = v19 - 1;
            v22 = *((_QWORD *)this + 27);
            v23 = *(_DWORD *)(v22 + 4 * *(int *)(v16 + 4 * (v19 - 1)));
            v24 = *(_DWORD *)(*((_QWORD *)this + 30) + 4 * *(int *)(v15 + 4 * v12));
            v25 = *(_DWORD *)(v22 + 4 * *(int *)(v16 + 4 * v12));
            v26 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48)
                           + 4 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 4 * ((2 * v18) | 1)));
            if ((_DWORD)v11 == 4)
            {
              v21 = (int)v21;
              LODWORD(v27) = v19 - 2;
              if (!(_DWORD)v21)
                LODWORD(v27) = 3;
              v26[v12] = v24;
              if ((_DWORD)v27)
                v28 = v27 - 1;
              else
                v28 = 3;
              v26[v28] = v25;
              v27 = (int)v27;
            }
            else
            {
              *v26 = v24;
              v26[1] = v25;
              v27 = 2;
              v21 = 3;
            }
            v26[v27] = v20;
            v26[v21] = v23;
          }
          ++v12;
        }
        while (v11 != v12);
        result = *(unsigned int *)v3;
      }
      ++v5;
    }
    while (v5 < (int)result);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexCountsAndOffsets(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 24), 2 * **((int **)this + 2));
  v2 = (int *)*((_QWORD *)this + 2);
  if (*v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_DWORD *)(*((_QWORD *)v2 + 3) + 4);
    do
    {
      *(v5 - 1) = 4;
      *v5 = v3;
      ++v4;
      v3 += 4;
      v5 += 2;
    }
    while (v4 < *v2);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceEdgeRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  std::vector<int> *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  _BOOL4 v31;
  _BOOL4 v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;

  v2 = (std::vector<int> *)*((_QWORD *)this + 2);
  if (v2[1].__end_ == v2[1].__begin_)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexCountsAndOffsets(this);
    v2 = (std::vector<int> *)*((_QWORD *)this + 2);
  }
  std::vector<unsigned int>::resize(v2 + 3, 4 * SLODWORD(v2->__begin_));
  v3 = *((_QWORD *)this + 1);
  v4 = *(_DWORD *)v3;
  if (*(int *)v3 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v3 + 24);
    v7 = *(_QWORD *)(v3 + 48);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *((_QWORD *)this + 11);
    v10 = *((_QWORD *)this + 15);
    v11 = *((_QWORD *)this + 13);
    v12 = *((_QWORD *)this + 18);
    do
    {
      v13 = *(unsigned int *)(v6 + 8 * v5);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        v15 = (8 * v5) | 4;
        v16 = *(int *)(v6 + v15);
        v17 = v7 + 4 * v16;
        v18 = v8 + 4 * v16;
        v19 = v10 + 4 * *(int *)(v9 + v15);
        v20 = v12 + 4 * *(int *)(v11 + v15);
        do
        {
          v21 = *(_DWORD *)(v19 + 4 * v14);
          if (v21 != -1)
          {
            if (v14)
              v22 = v14;
            else
              v22 = v13;
            LODWORD(v23) = v22 - 1;
            v24 = *(int *)(v18 + 4 * (v22 - 1));
            v25 = *(_QWORD *)(v3 + 120);
            v26 = (_DWORD *)(v25 + 8 * v24);
            v27 = *(int *)(v18 + 4 * v14);
            v28 = *(_DWORD *)(v17 + 4 * v14);
            v29 = (_DWORD *)(v25 + 8 * v27);
            v31 = *v26 == v26[1] || *v26 != v28;
            v33 = *v29 != v29[1] && *v29 != v28;
            v34 = *((_QWORD *)this + 24);
            v35 = *(_DWORD *)(v34 + 8 * v24 + 4 * v31);
            v36 = *(_DWORD *)(v34 + 8 * v27 + 4 * v33);
            v37 = *(_DWORD *)(v20 + 4 * (int)v23);
            v38 = *(_DWORD *)(v20 + 4 * v14);
            v39 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 72)
                           + 4 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 4 * ((2 * v21) | 1)));
            if ((_DWORD)v13 == 4)
            {
              v23 = (int)v23;
              LODWORD(v40) = v22 - 2;
              if (!(_DWORD)v23)
                LODWORD(v40) = 3;
              v39[v14] = v36;
              if ((_DWORD)v40)
                v41 = v40 - 1;
              else
                v41 = 3;
              v39[v41] = v38;
              v40 = (int)v40;
            }
            else
            {
              *v39 = v36;
              v39[1] = v38;
              v40 = 2;
              v23 = 3;
            }
            v39[v40] = v37;
            v39[v23] = v35;
          }
          ++v14;
        }
        while (v13 != v14);
        v4 = *(_DWORD *)v3;
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateEdgeVertexRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _DWORD *v23;

  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 120), 2 * *(int *)(*((_QWORD *)this + 2) + 4));
  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)v2;
  if (*(int *)v2 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 24);
    v6 = *(_QWORD *)(v2 + 72);
    v7 = *((_QWORD *)this + 13);
    v8 = *((_QWORD *)this + 18);
    do
    {
      v9 = *(unsigned int *)(v5 + 8 * v4);
      if ((int)v9 >= 1)
      {
        v10 = (8 * v4) | 4;
        v11 = (int *)(v6 + 4 * *(int *)(v5 + v10));
        v12 = (int *)(v8 + 4 * *(int *)(v7 + v10));
        do
        {
          v14 = *v12++;
          v13 = v14;
          if ((_DWORD)v14 != -1)
          {
            v15 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 120) + 8 * v13);
            *v15 = *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v4);
            v15[1] = *(_DWORD *)(*((_QWORD *)this + 27) + 4 * *v11);
          }
          ++v11;
          --v9;
        }
        while (v9);
        v3 = *(_DWORD *)v2;
      }
      ++v4;
    }
    while (v4 < v3);
  }
  if (*(int *)(v2 + 4) >= 1)
  {
    v16 = 0;
    v17 = *(_QWORD *)(v2 + 120);
    v18 = *((_QWORD *)this + 24);
    do
    {
      v19 = 0;
      v20 = 1;
      do
      {
        v21 = v20;
        v22 = *(int *)(v18 + 8 * v16 + 4 * v19);
        if ((_DWORD)v22 != -1)
        {
          v23 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 120) + 8 * v22);
          *v23 = *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v16);
          v23[1] = *(_DWORD *)(*((_QWORD *)this + 30) + 4 * *(int *)(v17 + 8 * v16 + 4 * v19));
        }
        v20 = 0;
        v19 = 1;
      }
      while ((v21 & 1) != 0);
      ++v16;
    }
    while (v16 < *(int *)(v2 + 4));
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateEdgeFaceRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  __int16 v70;
  int *v71;
  std::vector<int>::size_type v72;

  v2 = 2
     * (((*(_QWORD *)(*((_QWORD *)this + 1) + 176) - *(_QWORD *)(*((_QWORD *)this + 1) + 168)) >> 2)
      + ((*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 2));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 144), 2 * *(int *)(*((_QWORD *)this + 2) + 4));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 168), v2);
  std::vector<unsigned short>::resize(*((_QWORD *)this + 2) + 192, v2);
  v4 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v4 + 16);
  v5 = *(_DWORD *)v4;
  if (*(int *)v4 >= 1)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 11);
    v8 = *((_QWORD *)this + 15);
    v9 = *((_QWORD *)this + 13);
    v10 = *((_QWORD *)this + 18);
    do
    {
      v11 = *(unsigned int *)(v7 + 8 * v6);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = (8 * v6) | 4;
        v14 = v8 + 4 * *(int *)(v7 + v13);
        v15 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          v16 = *(int *)(v15 + 4 * v12);
          if ((_DWORD)v16 == -1)
          {
            ++v12;
          }
          else
          {
            v17 = *(_QWORD *)(v3 + 144);
            v18 = (_DWORD *)(v17 + 8 * v16);
            *v18 = 2;
            if ((_DWORD)v16)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v20 = 2 * v16;
            v18[1] = v19;
            v21 = *(_DWORD *)(v3 + 16);
            if (v21 <= 2)
              v21 = 2;
            *(_DWORD *)(v3 + 16) = v21;
            v22 = *(int *)(v17 + 4 * (v20 | 1));
            v23 = (_DWORD *)(*(_QWORD *)(v3 + 168) + 4 * v22);
            v24 = (__int16 *)(*(_QWORD *)(v3 + 192) + 2 * v22);
            v25 = v12 + 1;
            if (v12 + 1 >= v11)
              v26 = 0;
            else
              v26 = v12 + 1;
            v27 = *(_DWORD *)(v14 + 4 * v12);
            if (v27 == -1)
            {
              v29 = 0;
            }
            else
            {
              *v23 = v27;
              if ((_DWORD)v11 == 4)
                v28 = v26;
              else
                v28 = 1;
              *v24 = v28;
              v29 = 1;
            }
            v30 = *(_DWORD *)(v14 + 4 * v26);
            if (v30 != -1)
            {
              v23[v29] = v30;
              v31 = ((_BYTE)v26 + 2) & 3;
              if ((_DWORD)v11 != 4)
                v31 = 2;
              v24[v29] = v31;
              LODWORD(v29) = v29 + 1;
            }
            *v18 = v29;
            v12 = v25;
          }
        }
        while (v12 != v11);
        v5 = *(_DWORD *)v4;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v32 = *(_DWORD *)(v4 + 4);
  if (v32 >= 1)
  {
    v33 = 0;
    v34 = *((_QWORD *)this + 24);
    do
    {
      v35 = (_DWORD *)(v34 + 8 * v33);
      if (*v35 != -1 || v35[1] != -1)
      {
        v36 = 0;
        v37 = *(_QWORD *)(v4 + 144);
        v38 = *(int *)(v37 + ((8 * v33) | 4));
        v39 = *(unsigned int *)(v37 + 8 * v33);
        v40 = *(_QWORD *)(v4 + 168) + 4 * v38;
        v41 = *(_QWORD *)(v4 + 192) + 2 * v38;
        v42 = (_DWORD *)(*(_QWORD *)(v4 + 120) + 8 * v33);
        v43 = 1;
        do
        {
          v44 = v43;
          v45 = (int)v35[v36];
          if ((_DWORD)v45 != -1)
          {
            v46 = *(_QWORD *)(v3 + 144);
            v47 = (_DWORD *)(v46 + 8 * v45);
            *v47 = v39;
            if ((_DWORD)v45)
              v48 = *(v47 - 1) + *(v47 - 2);
            else
              v48 = 0;
            v47[1] = v48;
            v49 = *(_DWORD *)(v3 + 16);
            if (v49 <= (int)v39)
              v49 = v39;
            *(_DWORD *)(v3 + 16) = v49;
            if ((int)v39 < 1)
            {
              v50 = 0;
            }
            else
            {
              v50 = 0;
              v51 = *(int *)(v46 + 4 * (int)((2 * v45) | 1));
              v52 = *(_QWORD *)(v3 + 168) + 4 * v51;
              v53 = *(_QWORD *)(v3 + 192) + 2 * v51;
              v54 = *(_QWORD *)(v4 + 24);
              v55 = *((_QWORD *)this + 11);
              v56 = *((_QWORD *)this + 15);
              v57 = (int *)v40;
              v58 = (unsigned __int16 *)v41;
              v59 = v39;
              do
              {
                v61 = *v57++;
                v60 = v61;
                LODWORD(v61) = *v58++;
                v62 = v61;
                v63 = (2 * v60) | 1;
                v64 = v36;
                if (*v42 != v42[1])
                  v64 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * *(int *)(v54 + 4 * v63) + 4 * v62) != v42[v36];
                v65 = 2 * v60;
                v66 = v56 + 4 * *(int *)(v55 + 4 * v63);
                if (v64 + (_DWORD)v62 == *(_DWORD *)(v55 + 4 * v65))
                  v67 = 0;
                else
                  v67 = v64 + v62;
                v68 = *(_DWORD *)(v66 + 4 * v67);
                if (v68 != -1)
                {
                  v69 = *(_DWORD *)(v54 + 4 * v65);
                  *(_DWORD *)(v52 + 4 * v50) = v68;
                  if (v64)
                    v70 = 3;
                  else
                    v70 = 0;
                  if (v69 != 4)
                    LOWORD(v62) = v70;
                  *(_WORD *)(v53 + 2 * v50++) = v62;
                }
                --v59;
              }
              while (v59);
            }
            *v47 = v50;
          }
          v43 = 0;
          v36 = 1;
        }
        while ((v44 & 1) != 0);
        v32 = *(_DWORD *)(v4 + 4);
      }
      ++v33;
    }
    while (v33 < v32);
  }
  v71 = (int *)(*(_QWORD *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  v72 = v71[1] + (uint64_t)*v71;
  std::vector<unsigned int>::resize((std::vector<int> *)(v3 + 168), v72);
  std::vector<unsigned short>::resize(*((_QWORD *)this + 2) + 192, v72);
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFaceRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int *v5;
  std::vector<int>::size_type v6;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (((v2[22] - v2[21]) >> 1) & 0xFFFFFFFE) + ((v2[7] - v2[6]) >> 2) + ((v2[37] - v2[36]) >> 2);
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 264), 2 * *(int *)(*((_QWORD *)this + 2) + 8));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 288), v3);
  std::vector<unsigned short>::resize(*((_QWORD *)this + 2) + 312, v3);
  if (*((_DWORD *)this + 21))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentEdges(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentEdges(this);
  }
  v4 = *((_QWORD *)this + 2);
  v5 = (int *)(*(_QWORD *)(v4 + 264) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  std::vector<unsigned int>::resize((std::vector<int> *)(v4 + 288), v6);
  std::vector<unsigned short>::resize(*((_QWORD *)this + 2) + 312, v6);
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentVertices(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = this[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 288);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 312);
        v11 = (_QWORD *)this[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = this[11];
          v20 = this[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              v25 = *(_DWORD *)(v19 + 8 * (_DWORD)v21);
              *(_DWORD *)(v17 + 4 * v14) = v24;
              if (v25 != 4)
                v23 = 0;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentFaces(_QWORD *this)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  v1 = (int *)this[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = this[21];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = (unsigned int *)(this[11] + 8 * v3);
        v7 = this[15];
        v8 = *v6;
        v9 = (int)v6[1];
        v10 = (_QWORD *)this[2];
        v11 = (_DWORD *)(v10[33] + 8 * v5);
        *v11 = v8;
        if ((_DWORD)v5)
          v12 = *(v11 - 1) + *(v11 - 2);
        else
          v12 = 0;
        v11[1] = v12;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v13 = 0;
          v14 = 0;
          v15 = v7 + 4 * v9;
          v16 = v10[36] + 4 * v12;
          v17 = v10[39] + 2 * v12;
          do
          {
            v18 = *(_DWORD *)(v15 + 4 * v13);
            if (v18 != -1)
            {
              *(_DWORD *)(v16 + 4 * v14) = v18;
              v19 = ((_BYTE)v13 + 2) & 3;
              if ((_DWORD)v8 != 4)
                v19 = 2;
              *(_WORD *)(v17 + 2 * v14++) = v19;
            }
            ++v13;
          }
          while (v8 != v13);
        }
        *v11 = v14;
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentEdges(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = this[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 192);
        v11 = (_QWORD *)this[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = 2 * v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = this[11];
          v20 = this[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            v25 = *(_DWORD *)(v19 + 8 * (_DWORD)v21);
            if ((_DWORD)v22 + 1 == v25)
              v26 = 0;
            else
              v26 = v23 + 1;
            v27 = *(_DWORD *)(v24 + 4 * v26);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              if (v25 == 4)
                v28 = v23;
              else
                v28 = 3;
              *(_WORD *)(v18 + 2 * v14++) = v28;
            }
            v29 = *(_DWORD *)(v24 + 4 * v23);
            if (v29 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v29;
              if (v25 == 4)
                v30 = v26;
              else
                v30 = 1;
              *(_WORD *)(v18 + 2 * v14++) = v30;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgeRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  std::vector<int>::size_type v6;

  v2 = *((_QWORD *)this + 1);
  v3 = ((*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 2)
     + 2 * *(_DWORD *)(v2 + 4)
     + ((*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 2)
     + ((*(_QWORD *)(v2 + 368) - *(_QWORD *)(v2 + 360)) >> 2);
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 336), 2 * *(int *)(*((_QWORD *)this + 2) + 8));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 2) + 360), v3);
  std::vector<unsigned short>::resize(*((_QWORD *)this + 2) + 384, v3);
  if (*((_DWORD *)this + 21))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentEdges(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentEdges(this);
  }
  v4 = *((_QWORD *)this + 2);
  v5 = (int *)(*(_QWORD *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  std::vector<unsigned int>::resize((std::vector<int> *)(v4 + 360), v6);
  std::vector<unsigned short>::resize(*((_QWORD *)this + 2) + 384, v6);
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentVertices(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = this[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 360);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 336) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 384);
        v11 = this[2];
        v12 = *(_QWORD *)(v11 + 336);
        v13 = (_DWORD *)(v12 + 8 * v5);
        *v13 = v8;
        if ((_DWORD)v5)
          v14 = *(v13 - 1) + *(v13 - 2);
        else
          v14 = 0;
        v13[1] = v14;
        v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8)
          v15 = v8;
        *(_DWORD *)(v11 + 20) = v15;
        if ((int)v8 < 1)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = (int *)(v6 + 4 * v9);
          v18 = (unsigned __int16 *)(v10 + 2 * v9);
          v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          v20 = *(_QWORD *)(v11 + 360) + 4 * v19;
          v21 = *(_QWORD *)(v11 + 384) + 2 * v19;
          v22 = this[24];
          do
          {
            v24 = *v17++;
            v23 = v24;
            LODWORD(v24) = *v18++;
            v25 = *(_DWORD *)(v22 + 8 * v23 + 4 * v24);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *v13 = v16;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentFaces(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v1 = this[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = this[21];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 8 * v3);
        v7 = *(int *)(this[13] + 8 * v3 + 4);
        v8 = this[18];
        v9 = this[2];
        v10 = *(_QWORD *)(v9 + 336);
        v11 = (int *)(v10 + 8 * v5);
        *v11 = v6;
        if ((_DWORD)v5)
          v12 = *(v11 - 1) + *(v11 - 2);
        else
          v12 = 0;
        v11[1] = v12;
        v13 = *(_DWORD *)(v9 + 20);
        if (v13 <= v6)
          v13 = v6;
        *(_DWORD *)(v9 + 20) = v13;
        if (v6 < 1)
        {
          v15 = 0;
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v16 = v8 + 4 * v7;
          v17 = *(int *)(v10 + 4 * (int)((2 * v5) | 1));
          v18 = *(_QWORD *)(v9 + 360) + 4 * v17;
          v19 = *(_QWORD *)(v9 + 384) + 2 * v17;
          do
          {
            if (v14)
              v20 = v14;
            else
              v20 = v6;
            v21 = *(_DWORD *)(v16 + 4 * (v20 - 1));
            if (v21 != -1)
            {
              *(_DWORD *)(v18 + 4 * v15) = v21;
              *(_WORD *)(v19 + 2 * v15++) = 0;
            }
            ++v14;
          }
          while (v6 != v14);
        }
        *v11 = v15;
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentEdges(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  __int16 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  __int16 v37;

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = this[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = *(unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *(int *)(*(_QWORD *)(v1 + 144) + 8 * v3 + 4);
        v9 = *(_QWORD *)(v1 + 192);
        v10 = *(_QWORD *)(v1 + 120);
        v11 = this[24];
        v12 = this[2];
        v13 = v7 + 2;
        v14 = *(_QWORD *)(v12 + 336);
        v15 = (int *)(v14 + 8 * v5);
        *v15 = v7 + 2;
        if ((_DWORD)v5)
          v16 = *(v15 - 1) + *(v15 - 2);
        else
          v16 = 0;
        v17 = (int *)(v11 + 8 * v3);
        v18 = 2 * v5;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13)
          v13 = *(_DWORD *)(v12 + 20);
        *(_DWORD *)(v12 + 20) = v13;
        v19 = *(int *)(v14 + 4 * (v18 | 1));
        v20 = (int *)(*(_QWORD *)(v12 + 360) + 4 * v19);
        v21 = (__int16 *)(*(_QWORD *)(v12 + 384) + 2 * v19);
        if (*v17 == -1)
        {
          v22 = 0;
        }
        else
        {
          *v20 = *v17;
          *v21 = 0;
          v22 = 1;
        }
        v23 = v17[1];
        if (v23 != -1)
        {
          v20[v22] = v23;
          v21[v22++] = 0;
        }
        if ((int)v7 >= 1)
        {
          v24 = 0;
          v25 = v6 + 4 * v8;
          v26 = v9 + 2 * v8;
          v27 = this[13];
          v28 = this[18];
          v29 = (_DWORD *)(v10 + 8 * v3);
          do
          {
            v30 = *(unsigned __int16 *)(v26 + 2 * v24);
            v31 = (2 * *(int *)(v25 + 4 * v24)) | 1;
            v32 = *(_DWORD *)(v28 + 4 * *(int *)(v27 + 4 * v31) + 4 * v30);
            if (v32 != -1)
            {
              v20[v22] = v32;
              v21[v22++] = 1;
              if (!v24 && v22 == 3)
              {
                if (*v29 == v29[1])
                {
                  v33 = v20[1];
                  v34 = v21[1];
                }
                else
                {
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(*(_QWORD *)(v1 + 24) + 4 * v31) + 4 * v30);
                  v33 = v20[1];
                  v34 = v21[1];
                  if (v35 == *v29)
                  {
                    v36 = *v20;
                    *v20 = v33;
                    v37 = *v21;
                    *v21 = v34;
                    v34 = v37;
                    v33 = v36;
                  }
                }
                v20[1] = v20[2];
                v20[2] = v33;
                v21[1] = v21[2];
                v21[2] = v34;
                v22 = 3;
              }
            }
            ++v24;
          }
          while (v7 != v24);
        }
        *v15 = v22;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::markSparseFaceChildren(_QWORD *this)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  char v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;

  v1 = (int *)this[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    while (1)
    {
      v3 = (2 * v2) | 1;
      v4 = (_DWORD *)(this[15] + 4 * *(int *)(this[11] + 4 * v3));
      v5 = (_DWORD *)(this[18] + 4 * *(int *)(this[13] + 4 * v3));
      v6 = *((_QWORD *)v1 + 3);
      v7 = *(unsigned int *)(v6 + 8 * v2);
      v8 = this[51];
      if ((*(_BYTE *)(v8 + v2) & 1) != 0)
        break;
      if ((int)v7 >= 1)
      {
        v9 = 0;
        v10 = *((_QWORD *)v1 + 6) + 4 * *(int *)(v6 + 4 * v3);
        v11 = this[57];
        v12 = 1;
        do
        {
          while ((*(_BYTE *)(v11 + *(int *)(v10 + 4 * v9)) & 1) != 0)
          {
            v12 = 0;
            if (v9)
              v13 = v9;
            else
              v13 = v7;
            v4[v9] = 1;
            v5[v9] = 1;
            v5[v13 - 1] = 1;
            if (v7 - 1 == v9++)
              goto LABEL_22;
          }
          ++v9;
        }
        while (v7 != v9);
        if ((v12 & 1) != 0)
          goto LABEL_19;
LABEL_22:
        *(_DWORD *)(this[21] + 4 * v2) = 1;
        v16 = (int *)(*((_QWORD *)v1 + 9) + 4 * *(int *)(v6 + 4 * v3));
        v17 = *(unsigned int *)(v6 + 8 * v2);
        if ((_DWORD)v17 == 3)
        {
          v23 = *(_BYTE *)(this[54] + v16[1]) & 0xE | (*(unsigned __int8 *)(this[54] + *v16) >> 1) & 0xF | (2 * *(unsigned __int8 *)(this[54] + v16[2])) & 0xC;
          v22 = *(_BYTE *)(v8 + v2);
        }
        else
        {
          if ((_DWORD)v17 != 4)
          {
            v24 = *(_BYTE *)(v8 + v2) & 0xE1;
            *(_BYTE *)(v8 + v2) &= 0xE1u;
            if ((int)v17 >= 1)
            {
              do
              {
                v25 = *v16++;
                v24 |= *(_BYTE *)(this[54] + v25) & 0x1E;
                *(_BYTE *)(v8 + v2) = v24;
                --v17;
              }
              while (v17);
            }
            goto LABEL_19;
          }
          v18 = this[54];
          v19 = *(unsigned __int8 *)(v18 + *v16);
          v20 = *(_BYTE *)(v18 + v16[1]) & 0xE;
          v21 = (2 * *(unsigned __int8 *)(v18 + v16[2])) & 0xC;
          LOBYTE(v18) = 4 * *(_BYTE *)(v18 + v16[3]);
          v22 = *(_BYTE *)(v8 + v2);
          v23 = v20 | (v19 >> 1) & 0xF | v21 | v18 & 8;
        }
        v15 = v22 & 0xE1 | (2 * (v23 & 0xF));
        goto LABEL_18;
      }
LABEL_19:
      ++v2;
      v1 = (int *)this[1];
      if (v2 >= *v1)
        return this;
    }
    if ((int)v7 >= 1)
    {
      do
      {
        *v4++ = 2;
        *v5++ = 2;
        --v7;
      }
      while (v7);
    }
    *(_DWORD *)(this[21] + 4 * v2) = 2;
    v15 = *(_BYTE *)(v8 + v2) & 0xE1;
LABEL_18:
    *(_BYTE *)(v8 + v2) = v15;
    goto LABEL_19;
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefiner::TopologyRefiner(uint64_t a1, int a2, int a3)
{
  char *v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xC0 | 1;
  *(_BYTE *)(a1 + 12) &= 0xC0u;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF000 | 0xF0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v4 = (char *)operator new(0x50uLL);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v4 + 80;
  v5 = (_OWORD *)operator new();
  v6 = v5;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v8 = *(_QWORD **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v14);
    else
      v15 = 0;
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17 = v14 + 8 * v15;
    *v16 = v6;
    v9 = v16 + 1;
    v19 = *(char **)(a1 + 40);
    v18 = *(char **)(a1 + 48);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = *(char **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 48) = v9;
  v21 = *(_BYTE **)(a1 + 88);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v21) >> 3) <= 9)
  {
    v22 = *(_BYTE **)(a1 + 96);
    v23 = (char *)operator new(0xF0uLL);
    v24 = &v23[24 * ((v22 - v21) / 24)];
    v25 = v24;
    if (v22 != v21)
    {
      v26 = &v23[24 * ((v22 - v21) / 24)];
      do
      {
        v25 = v26 - 24;
        v27 = *(_OWORD *)(v22 - 24);
        *((_QWORD *)v26 - 1) = *((_QWORD *)v22 - 1);
        *(_OWORD *)(v26 - 24) = v27;
        v22 -= 24;
        v26 -= 24;
      }
      while (v22 != v21);
    }
    *(_QWORD *)(a1 + 88) = v25;
    *(_QWORD *)(a1 + 96) = v24;
    *(_QWORD *)(a1 + 104) = v23 + 240;
    if (v21)
      operator delete(v21);
  }
  OpenSubdiv::v3_1_1::Far::TopologyRefiner::assembleFarLevels((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)a1);
  return a1;
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::assembleFarLevels(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6) - (_QWORD)v2;
  v4 = v3 >> 3;
  v6 = (char *)*((_QWORD *)this + 11);
  v5 = (_BYTE *)*((_QWORD *)this + 12);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
  v8 = (v3 >> 3) - v7;
  if (v3 >> 3 <= v7)
  {
    if (v3 >> 3 >= v7)
      goto LABEL_18;
    v17 = &v6[24 * v4];
    goto LABEL_17;
  }
  v9 = *((_QWORD *)this + 13);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 3) >= v8)
  {
    v17 = &v5[24 * (24 * v8 / 0x18)];
LABEL_17:
    *((_QWORD *)this + 12) = v17;
    goto LABEL_18;
  }
  if ((unint64_t)v3 >= 0x5555555555555551)
    abort();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v6) >> 3);
  v11 = 0x5555555555555556 * ((v9 - (uint64_t)v6) >> 3);
  if (v11 > v4)
    v4 = v11;
  if (v10 >= 0x555555555555555)
    v4 = 0xAAAAAAAAAAAAAAALL;
  if (v4 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = 3 * v4;
  v13 = (char *)operator new(24 * v4);
  v14 = &v13[8 * ((v5 - v6) >> 3)];
  v15 = &v14[24 * (24 * v8 / 0x18)];
  if (v5 != v6)
  {
    do
    {
      v16 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v16;
      v14 -= 24;
      v5 -= 24;
    }
    while (v5 != v6);
    v5 = v6;
  }
  *((_QWORD *)this + 11) = v14;
  *((_QWORD *)this + 12) = v15;
  v6 = v14;
  *((_QWORD *)this + 13) = &v13[8 * v12];
  if (v5)
  {
    operator delete(v5);
    v6 = (char *)*((_QWORD *)this + 11);
    v2 = (_QWORD *)*((_QWORD *)this + 5);
  }
LABEL_18:
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)v6 = *v2;
  *((_QWORD *)v6 + 2) = 0;
  v18 = (_QWORD *)*((_QWORD *)this + 8);
  v19 = *((_QWORD *)this + 9) - (_QWORD)v18;
  v20 = v19 >> 3;
  if ((v19 >> 3))
  {
    *((_QWORD *)v6 + 2) = *v18;
    if ((int)v20 >= 2)
    {
      v21 = (v19 >> 3) - 1;
      v22 = v6 + 40;
      v23 = v18 + 1;
      v24 = v2 + 1;
      do
      {
        *(v22 - 1) = *(v23 - 1);
        v25 = *v24++;
        *(v22 - 2) = v25;
        v26 = *v23++;
        *v22 = v26;
        v22 += 3;
        --v21;
      }
      while (v21);
    }
    v27 = &v6[24 * (int)v20];
    *((_QWORD *)v27 + 1) = *(_QWORD *)((char *)v18 + ((uint64_t)((v19 << 29) - 0x100000000) >> 29));
    *(_QWORD *)v27 = *(_QWORD *)((char *)v2 + ((uint64_t)(v19 << 29) >> 29));
    *((_QWORD *)v27 + 2) = 0;
  }
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v3 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 6);
  if ((int)((unint64_t)(v2 - v3) >> 3) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(v3 + 8 * v4);
      if (v5)
      {
        OpenSubdiv::v3_1_1::Vtr::internal::Level::~Level(v5);
        MEMORY[0x2276933B8]();
        v3 = *((_QWORD *)this + 5);
        v2 = *((_QWORD *)this + 6);
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v2 - v3) >> 3));
  }
  v6 = (_QWORD *)*((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 9);
  if ((int)((unint64_t)(v7 - (_QWORD)v6) >> 3) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = v6[v8];
      if (v9)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v9 + 8))(v6[v8]);
        v6 = (_QWORD *)*((_QWORD *)this + 8);
        v7 = *((_QWORD *)this + 9);
      }
      ++v8;
    }
    while (v8 < (int)((unint64_t)(v7 - (_QWORD)v6) >> 3));
  }
  v10 = (void *)*((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 12) = v10;
    operator delete(v10);
    v6 = (_QWORD *)*((_QWORD *)this + 8);
  }
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
}

int32x2_t OpenSubdiv::v3_1_1::Far::TopologyRefiner::initializeInventory(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this)
{
  int **v1;
  int *v2;
  int32x2_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int32x2_t result;

  v1 = (int **)*((_QWORD *)this + 5);
  if (*((int ***)this + 6) == v1)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = 0;
    v3 = 0;
  }
  else
  {
    v2 = *v1;
    v3 = *(int32x2_t *)(*v1 + 1);
    v4 = **v1;
    v5 = (*((_QWORD *)v2 + 7) - *((_QWORD *)v2 + 6)) >> 2;
    v6 = v2[5];
  }
  result = vrev64_s32(v3);
  *(int32x2_t *)((char *)this + 20) = result;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = v5;
  *((_DWORD *)this + 9) = v6;
  return result;
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::RefineAdaptive(int *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int *v9;
  const char *v10;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  __int16 v16;
  _BOOL4 v17;
  __int16 v18;
  __int16 v19;
  uint64_t *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (**v31)(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *__hidden);
  uint64_t v32;
  int *v33;
  int v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int16 *v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  int isSingleCreasePatch;
  __int16 *v67;
  __int16 v68;
  int v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int *v108;
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement *v109;
  char v110;
  int v111;
  int v112;
  unsigned __int16 v113;
  _BYTE v114[22];

  *(_QWORD *)&v114[6] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(**((_QWORD **)a1 + 5) + 8))
  {
    v10 = "Failure in TopologyRefiner::RefineAdaptive() -- base level is uninitialized.";
    goto LABEL_12;
  }
  v9 = a1;
  if (*((_QWORD *)a1 + 9) != *((_QWORD *)a1 + 8))
  {
    v10 = "Failure in TopologyRefiner::RefineAdaptive() -- previous refinements already applied.";
LABEL_12:
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)v10, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if (*a1 != 1)
  {
    v10 = "Failure in TopologyRefiner::RefineAdaptive() -- currently only supported for Catmark scheme.";
    goto LABEL_12;
  }
  *((_BYTE *)a1 + 8) &= ~1u;
  *((_WORD *)a1 + 8) = a2;
  v12 = (unsigned __int16)a2 >> 4;
  v13 = a2 >> 4;
  v14 = a2 & 0xF;
  if (v14 >= v13)
    v15 = a2 >> 4;
  else
    v15 = a2 & 0xF;
  v101 = v15;
  v16 = 15;
  if ((a2 & 0x100) != 0)
  {
    OpenSubdiv::v3_1_1::Sdc::staticTraitsTable((OpenSubdiv::v3_1_1::Sdc *)a1);
    v17 = DWORD1(xmmword_25582AFC8) == 4;
    if (DWORD1(xmmword_25582AFC8) == 4)
      v16 = 11;
    else
      v16 = 15;
  }
  else
  {
    v17 = 0;
  }
  if (v17 | ((unsigned __int16)(a2 & 0x200) >> 9))
    v18 = 0;
  else
    v18 = 16;
  LOWORD(v112) = (v12 & 0x20 | a2 & 0x400 | v16 | v18) ^ 0x3E0;
  v111 = v112;
  v19 = v112;
  if (v14 > v13)
  {
    v19 = v112 & 0xFFFC;
    LOWORD(v111) = v112 & 0xFFFC;
    if ((a2 & 0x200) != 0)
    {
      v19 = v112 & 0xFF0C;
      LOWORD(v111) = v112 & 0xFF0C;
    }
  }
  if ((v112 & 0x400) != 0)
  {
    v20 = *(uint64_t **)(**((_QWORD **)v9 + 5) + 456);
    v21 = *(_QWORD *)(**((_QWORD **)v9 + 5) + 464) - (_QWORD)v20;
    if ((int)(v21 >> 3) < 1)
      goto LABEL_27;
    v22 = 0;
    v23 = (v21 >> 3);
    do
    {
      v24 = *v20++;
      v22 |= *(_BYTE *)(v24 + 12) == 0;
      --v23;
    }
    while (v23);
    if ((v22 & 1) == 0)
    {
LABEL_27:
      LOWORD(v112) = v112 & 0xFBFF;
      LOWORD(v111) = v19 & 0xFBFF;
    }
  }
  v25 = *v9;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable((OpenSubdiv::v3_1_1::Sdc *)a1);
  if (v14)
  {
    v100 = OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v25 + 1];
    v97 = v14 + 1;
    v98 = (a2 >> 10) & 2 | 1;
    v26 = 1;
    v99 = v9;
    do
    {
      v27 = *(_QWORD *)(*((_QWORD *)v9 + 5) + 8 * v26 - 8);
      v28 = operator new();
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(_OWORD *)(v28 + 112) = 0u;
      *(_OWORD *)(v28 + 128) = 0u;
      *(_OWORD *)(v28 + 144) = 0u;
      *(_OWORD *)(v28 + 160) = 0u;
      *(_OWORD *)(v28 + 176) = 0u;
      *(_OWORD *)(v28 + 192) = 0u;
      *(_OWORD *)(v28 + 208) = 0u;
      *(_OWORD *)(v28 + 224) = 0u;
      *(_OWORD *)(v28 + 240) = 0u;
      *(_OWORD *)(v28 + 256) = 0u;
      *(_OWORD *)(v28 + 272) = 0u;
      *(_OWORD *)(v28 + 288) = 0u;
      *(_OWORD *)(v28 + 304) = 0u;
      *(_OWORD *)(v28 + 320) = 0u;
      *(_OWORD *)(v28 + 336) = 0u;
      *(_OWORD *)(v28 + 352) = 0u;
      *(_OWORD *)(v28 + 368) = 0u;
      *(_OWORD *)(v28 + 384) = 0u;
      *(_OWORD *)(v28 + 400) = 0u;
      *(_OWORD *)(v28 + 416) = 0u;
      *(_OWORD *)(v28 + 432) = 0u;
      *(_OWORD *)(v28 + 448) = 0u;
      *(_OWORD *)(v28 + 464) = 0u;
      v29 = operator new();
      *(_QWORD *)(v29 + 8) = v27;
      *(_QWORD *)(v29 + 16) = v28;
      *(_DWORD *)(v29 + 24) = v9[1];
      *(_WORD *)(v29 + 36) = 0;
      *(_QWORD *)(v29 + 104) = 0;
      *(_DWORD *)(v29 + 112) = 0;
      *(_OWORD *)(v29 + 40) = 0u;
      *(_OWORD *)(v29 + 56) = 0u;
      *(_OWORD *)(v29 + 72) = 0u;
      *(_OWORD *)(v29 + 84) = 0u;
      *(_OWORD *)(v29 + 136) = 0u;
      *(_OWORD *)(v29 + 152) = 0u;
      *(_OWORD *)(v29 + 168) = 0u;
      *(_OWORD *)(v29 + 184) = 0u;
      *(_OWORD *)(v29 + 200) = 0u;
      *(_OWORD *)(v29 + 216) = 0u;
      *(_OWORD *)(v29 + 232) = 0u;
      *(_OWORD *)(v29 + 248) = 0u;
      *(_OWORD *)(v29 + 120) = 0u;
      *(_OWORD *)(v29 + 264) = 0u;
      *(_OWORD *)(v29 + 280) = 0u;
      *(_OWORD *)(v29 + 296) = 0u;
      *(_OWORD *)(v29 + 312) = 0u;
      *(_OWORD *)(v29 + 328) = 0u;
      *(_OWORD *)(v29 + 344) = 0u;
      *(_OWORD *)(v29 + 360) = 0u;
      *(_OWORD *)(v29 + 376) = 0u;
      *(_OWORD *)(v29 + 392) = 0u;
      *(_OWORD *)(v29 + 408) = 0u;
      *(_OWORD *)(v29 + 424) = 0u;
      *(_OWORD *)(v29 + 440) = 0u;
      *(_OWORD *)(v29 + 456) = 0u;
      *(_OWORD *)(v29 + 472) = 0u;
      *(_OWORD *)(v29 + 488) = 0u;
      v30 = *(_DWORD *)(v27 + 12);
      if (v100)
      {
        v31 = &off_24ED89E98;
        *(_QWORD *)v29 = &off_24ED89E98;
        *(_QWORD *)(v29 + 520) = 0;
        v32 = 0x300000001;
        *(_QWORD *)(v29 + 504) = 0;
        *(_QWORD *)(v29 + 512) = 0;
      }
      else
      {
        v32 = 0x400000000;
        v31 = &off_24ED89F10;
        *(_QWORD *)v29 = &off_24ED89F10;
      }
      *(_QWORD *)(v29 + 28) = v32;
      *(_DWORD *)(v28 + 12) = v30 + 1;
      v110 = 0;
      v33 = &v112;
      if (v26 > v101)
        v33 = &v111;
      v108 = v33;
      v109 = (OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)v29;
      v34 = *v33;
      if (!v34)
        goto LABEL_182;
      v35 = *(int **)(v29 + 8);
      if ((v34 & 0x400) != 0)
        v106 = (*((_QWORD *)v35 + 58) - *((_QWORD *)v35 + 57)) >> 3;
      else
        LODWORD(v106) = 0;
      if (*v35 < 1)
      {
LABEL_181:
        v31 = *(void (***)(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *__hidden))v29;
LABEL_182:
        v31[1]((OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *)v29);
        OpenSubdiv::v3_1_1::Vtr::internal::Level::~Level((OpenSubdiv::v3_1_1::Vtr::internal::Level *)v28);
        MEMORY[0x2276933B8]();
        break;
      }
      v103 = v28;
      v104 = v26;
      v36 = 0;
      v107 = v35[3];
      v102 = v29;
      v105 = *(unsigned int *)(v29 + 32);
      do
      {
        if ((*(_BYTE *)(*((_QWORD *)v35 + 12) + v36) & 1) != 0)
          goto LABEL_111;
        v37 = *((_QWORD *)v35 + 3);
        if (v107)
        {
          v38 = *(unsigned int *)(v37 + 8 * v36);
        }
        else
        {
          v39 = *(unsigned int *)(v37 + 8 * v36);
          v38 = v105;
          if (v39 != v105)
          {
            if ((int)v39 >= 1)
            {
              v59 = 0;
              v60 = *((_QWORD *)v35 + 6) + 4 * *(int *)(v37 + ((8 * v36) | 4));
              do
              {
                v61 = *(int *)(v60 + 4 * v59);
                v62 = *((_QWORD *)v35 + 33);
                v63 = *(unsigned int *)(v62 + 8 * (_DWORD)v61);
                if ((int)v63 >= 1)
                {
                  v64 = (int *)(*((_QWORD *)v35 + 36) + 4 * *(int *)(v62 + 8 * v61 + 4));
                  do
                  {
                    v65 = *v64++;
                    OpenSubdiv::v3_1_1::Vtr::internal::SparseSelector::selectFace(&v109, v65);
                    --v63;
                  }
                  while (v63);
                }
                ++v59;
              }
              while (v59 != v39);
            }
            goto LABEL_111;
          }
        }
        OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v35, v36, &v113, 0xFFFFFFFF);
        v40 = v113;
        if ((int)v38 >= 2)
        {
          v41 = v38 - 1;
          v42 = (unsigned __int16 *)v114;
          do
          {
            v43 = *v42++;
            v40 |= v43;
            --v41;
          }
          while (v41);
        }
        if ((v40 & 0x800) != 0)
          goto LABEL_54;
        if ((v40 & 1) != 0 && (*(_WORD *)v108 & 0x200) != 0)
          goto LABEL_110;
        if ((v40 & 2) != 0 && (*(_WORD *)v108 & 1) != 0)
        {
          if ((v40 & 0x780) == 0x80)
            goto LABEL_110;
          if (v35[3] <= 1 && (int)v38 >= 1)
          {
            v67 = (__int16 *)&v113;
            do
            {
              v68 = *v67++;
              if ((v68 & 0x782) == 0x82)
                goto LABEL_110;
              --v38;
            }
            while (v38);
          }
        }
        if ((v40 & 0x780) == 0x80)
        {
LABEL_54:
          LOWORD(v44) = *(_WORD *)v108;
          goto LABEL_55;
        }
        if ((v40 & 0x80) == 0)
          goto LABEL_110;
        if ((v40 & 0x60) != 0)
        {
          if ((~*(unsigned __int16 *)v108 & 0xC) == 0)
            goto LABEL_110;
          isSingleCreasePatch = OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch((OpenSubdiv::v3_1_1::Vtr::internal::Level *)v35, v36, 0, 0);
          LOWORD(v44) = *(_WORD *)v108;
          if (isSingleCreasePatch)
          {
            if ((v44 & 4) != 0)
              goto LABEL_110;
          }
          else if ((v44 & 8) != 0)
          {
            goto LABEL_110;
          }
        }
        else
        {
          if ((v40 & 0x1010) == 0)
            goto LABEL_54;
          if ((v40 & 0x4000) != 0)
          {
            if (((v40 >> 7) & 0xF) >= 8)
            {
              LOWORD(v44) = *(_WORD *)v108;
              if ((*(_WORD *)v108 & 0x100) != 0)
                goto LABEL_110;
            }
            else if (((v40 >> 7) & 4) != 0)
            {
              v44 = *(unsigned __int16 *)v108;
              if ((v40 & 4) != 0)
                v69 = 2;
              else
                v69 = 128;
              if ((v44 & v69) != 0)
                goto LABEL_110;
            }
            else
            {
              if (((v40 >> 7) & 2) == 0)
                goto LABEL_54;
              LOWORD(v44) = *(_WORD *)v108;
              if ((*(_WORD *)v108 & 0x40) != 0)
                goto LABEL_110;
            }
          }
          else
          {
            if ((v40 & 4) != 0)
            {
              if ((v40 & 0x400) == 0)
                goto LABEL_54;
              LOWORD(v44) = *(_WORD *)v108;
              if ((v40 & 8) != 0)
                goto LABEL_55;
            }
            else
            {
              LOWORD(v44) = *(_WORD *)v108;
              if ((v40 & 0x400) == 0)
              {
                if ((v44 & 0x10) != 0)
                  goto LABEL_110;
                goto LABEL_55;
              }
            }
            if ((v44 & 0x20) != 0)
              goto LABEL_110;
          }
        }
LABEL_55:
        if ((v44 & 0x400) != 0 && (int)v106 >= 1)
        {
          v45 = 0;
          LOBYTE(v46) = 0;
          while (1)
          {
            if ((OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*((_QWORD *)v35 + 57) + 8 * v45), v36) & 1) == 0)goto LABEL_70;
            v47 = *((_QWORD *)v35 + 3);
            v48 = *(unsigned int *)(v47 + 8 * v36);
            if ((int)v48 < 1)
              goto LABEL_69;
            v49 = 0;
            v50 = *((_QWORD *)v35 + 6) + 4 * *(int *)(v47 + 4 * ((2 * v36) | 1));
            do
            {
              *(_WORD *)&v114[2 * v49 - 2] = OpenSubdiv::v3_1_1::Vtr::internal::Level::getVertexCompositeFVarVTag((OpenSubdiv::v3_1_1::Vtr::internal::Level *)v35, *(_DWORD *)(v50 + 4 * v49), v45);
              ++v49;
            }
            while (v48 != v49);
            v51 = v113;
            if ((int)v48 >= 2)
            {
              v52 = v48 - 1;
              v53 = (unsigned __int16 *)v114;
              do
              {
                v54 = *v53++;
                v51 |= v54;
                --v52;
              }
              while (v52);
            }
            if ((v51 & 1) != 0 && (*(_WORD *)v108 & 0x200) != 0)
            {
LABEL_69:
              LOBYTE(v46) = 1;
              goto LABEL_70;
            }
            if ((v51 & 2) != 0)
            {
              LOBYTE(v46) = 1;
              if ((v51 & 0x80) == 0 || (*(_WORD *)v108 & 1) != 0)
                goto LABEL_70;
            }
            else if ((v51 & 0x80) == 0)
            {
              goto LABEL_69;
            }
            if ((v51 & 0x4000) == 0)
              break;
            if (((v51 >> 7) & 0xF) < 8)
            {
              if (((v51 >> 7) & 4) != 0)
              {
                if ((v51 & 4) != 0)
                  v58 = 2;
                else
                  v58 = 128;
                LOBYTE(v46) = (unsigned __int16)(*(_WORD *)v108 & v58) != 0;
                goto LABEL_70;
              }
              if (((v51 >> 7) & 2) != 0)
              {
                v46 = (*(unsigned __int16 *)v108 >> 6) & 1;
                goto LABEL_70;
              }
              goto LABEL_85;
            }
            v46 = HIBYTE(*(unsigned __int16 *)v108) & 1;
LABEL_70:
            if ((v46 & 1) == 0 && ++v45 < (int)v106)
              continue;
            if ((v46 & 1) == 0)
              goto LABEL_111;
LABEL_110:
            OpenSubdiv::v3_1_1::Vtr::internal::SparseSelector::selectFace(&v109, v36);
            goto LABEL_111;
          }
          if ((v51 & 4) == 0)
          {
            v55 = *(unsigned __int16 *)v108;
            v56 = (v55 >> 4) & 1;
            v57 = (v55 >> 5) & 1;
            if ((v51 & 0x400) != 0)
              LOBYTE(v46) = v57;
            else
              LOBYTE(v46) = v56;
            goto LABEL_70;
          }
          if ((v51 & 0x400) != 0)
          {
            LOBYTE(v46) = (v51 & 8) == 0 && (*(_WORD *)v108 & 0x20) != 0;
            goto LABEL_70;
          }
LABEL_85:
          LOBYTE(v46) = 0;
          goto LABEL_70;
        }
LABEL_111:
        ++v36;
      }
      while (v36 < *v35);
      v9 = v99;
      v28 = v103;
      v29 = v102;
      if (!v110)
        goto LABEL_181;
      OpenSubdiv::v3_1_1::Vtr::internal::Refinement::refine(v102, v98);
      v71 = (uint64_t *)*((_QWORD *)v99 + 6);
      v70 = *((_QWORD *)v99 + 7);
      if ((unint64_t)v71 >= v70)
      {
        v73 = *((_QWORD *)v99 + 5);
        v74 = ((uint64_t)v71 - v73) >> 3;
        if ((unint64_t)(v74 + 1) >> 61)
          goto LABEL_184;
        v75 = v70 - v73;
        v76 = v75 >> 2;
        if (v75 >> 2 <= (unint64_t)(v74 + 1))
          v76 = v74 + 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v76;
        if (v77)
          v77 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v77);
        else
          v78 = 0;
        v79 = (uint64_t *)(v77 + 8 * v74);
        *v79 = v103;
        v72 = v79 + 1;
        v81 = (char *)*((_QWORD *)v99 + 5);
        v80 = (char *)*((_QWORD *)v99 + 6);
        if (v80 != v81)
        {
          do
          {
            v82 = *((_QWORD *)v80 - 1);
            v80 -= 8;
            *--v79 = v82;
          }
          while (v80 != v81);
          v80 = (char *)*((_QWORD *)v99 + 5);
        }
        *((_QWORD *)v99 + 5) = v79;
        *((_QWORD *)v99 + 6) = v72;
        *((_QWORD *)v99 + 7) = v77 + 8 * v78;
        if (v80)
          operator delete(v80);
      }
      else
      {
        *v71 = v103;
        v72 = v71 + 1;
      }
      *((_QWORD *)v99 + 6) = v72;
      v83 = v99[7] + *(_DWORD *)v103;
      v84 = v99[8] + ((*(_QWORD *)(v103 + 56) - *(_QWORD *)(v103 + 48)) >> 2);
      *(int32x2_t *)(v99 + 5) = vadd_s32(*(int32x2_t *)(v99 + 5), vrev64_s32(*(int32x2_t *)(v103 + 4)));
      v99[7] = v83;
      v99[8] = v84;
      v85 = *(_DWORD *)(v103 + 20);
      if (v99[9] > v85)
        v85 = v99[9];
      v99[9] = v85;
      v87 = (uint64_t *)*((_QWORD *)v99 + 9);
      v86 = *((_QWORD *)v99 + 10);
      if ((unint64_t)v87 >= v86)
      {
        v89 = (_QWORD *)*((_QWORD *)v99 + 8);
        v90 = v87 - v89;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61)
LABEL_184:
          abort();
        v92 = v86 - (_QWORD)v89;
        if (v92 >> 2 > v91)
          v91 = v92 >> 2;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        if (v93)
        {
          if (v93 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v94 = (char *)operator new(8 * v93);
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        *v95 = v102;
        v88 = v95 + 1;
        if (v87 != v89)
        {
          do
          {
            v96 = *--v87;
            *--v95 = v96;
          }
          while (v87 != v89);
          v87 = (uint64_t *)*((_QWORD *)v99 + 8);
        }
        *((_QWORD *)v99 + 8) = v95;
        *((_QWORD *)v99 + 9) = v88;
        *((_QWORD *)v99 + 10) = &v94[8 * v93];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v87 = v102;
        v88 = v87 + 1;
      }
      *((_QWORD *)v99 + 9) = v88;
      v26 = v104 + 1;
    }
    while (v104 + 1 != v97);
  }
  *((_BYTE *)v9 + 8) = ((v9[18] - v9[16]) >> 1) & 0x3C | v9[2] & 0xC3;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner::assembleFarLevels((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v9);
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::GetPatchPoints(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4, int a5, unsigned int a6)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char **v20;
  void **v21;
  _QWORD *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  void **v37;
  _QWORD *v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  char *v67;
  char *v68;
  int v69;

  if ((a6 & 0x80000000) != 0)
  {
    v11 = a2[3];
    v10 = (int *)(a2[6] + 4 * *(int *)(v11 + 8 * a3 + 4));
    v9 = (unsigned int *)(v11 + 8 * a3);
  }
  else
  {
    v7 = *(_QWORD **)(a2[57] + 8 * a6);
    v8 = *(_QWORD *)(*v7 + 24);
    v9 = (unsigned int *)(v8 + 8 * a3);
    v10 = (int *)(v7[3] + 4 * *(int *)(v8 + 4 * ((2 * a3) | 1)));
  }
  v12 = *v9;
  v13 = a2[54];
  v14 = *(_WORD *)(v13 + 2 * *v10);
  if ((int)v12 >= 2)
  {
    v15 = v12 - 1;
    v16 = v10 + 1;
    do
    {
      v17 = *v16++;
      v14 |= *(_WORD *)(v13 + 2 * v17);
      --v15;
    }
    while (v15);
  }
  v18 = 0;
  if ((v14 & 4) != 0)
  {
    v20 = (char **)(a1 + 5);
    v36 = (char *)a1[5];
    v37 = (void **)(a1 + 4);
    v38 = a1 + 6;
    do
    {
      v39 = v10[v18] + a5;
      if ((unint64_t)v36 >= *v38)
      {
        v41 = (char *)*v37;
        v42 = (v36 - (_BYTE *)*v37) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          goto LABEL_79;
        v44 = *v38 - (_QWORD)v41;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v20 + 1), v45);
          v36 = *v20;
          v41 = (char *)*v37;
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *(_DWORD *)v47 = v39;
        v40 = v47 + 4;
        while (v36 != v41)
        {
          v48 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *v37 = v47;
        *v20 = v40;
        *v38 = &v46[4 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_DWORD *)v36 = v39;
        v40 = v36 + 4;
      }
      *v20 = v40;
      ++v18;
      v36 = v40;
    }
    while (v18 != 4);
    v49 = a1[12];
    v50 = (char *)a1[11];
    if ((unint64_t)v50 >= v49)
    {
      v58 = (char *)a1[10];
      v59 = (v50 - v58) >> 2;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62)
        goto LABEL_79;
      v61 = v49 - (_QWORD)v58;
      if (v61 >> 1 > v60)
        v60 = v61 >> 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v60;
      if (v62)
      {
        v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 12), v62);
        v58 = (char *)a1[10];
        v50 = (char *)a1[11];
      }
      else
      {
        v63 = 0;
      }
      v67 = &v63[4 * v59];
      v68 = &v63[4 * v62];
      *(_DWORD *)v67 = a3;
      v51 = v67 + 4;
      while (v50 != v58)
      {
        v69 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v67 - 1) = v69;
        v67 -= 4;
      }
      a1[10] = v67;
      a1[11] = v51;
      a1[12] = v68;
      if (v58)
        operator delete(v58);
    }
    else
    {
      *(_DWORD *)v50 = a3;
      v51 = v50 + 4;
    }
    a1[11] = v51;
    return (uint64_t)(*v20 - 16);
  }
  v20 = (char **)(a1 + 2);
  v19 = (char *)a1[2];
  v21 = (void **)(a1 + 1);
  v22 = a1 + 3;
  do
  {
    v23 = v10[v18] + a5;
    if ((unint64_t)v19 >= *v22)
    {
      v25 = (char *)*v21;
      v26 = (v19 - (_BYTE *)*v21) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        goto LABEL_79;
      v28 = *v22 - (_QWORD)v25;
      if (v28 >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v20 + 1), v29);
        v19 = *v20;
        v25 = (char *)*v21;
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[4 * v26];
      *(_DWORD *)v31 = v23;
      v24 = v31 + 4;
      while (v19 != v25)
      {
        v32 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v31 - 1) = v32;
        v31 -= 4;
      }
      *v21 = v31;
      *v20 = v24;
      *v22 = &v30[4 * v29];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_DWORD *)v19 = v23;
      v24 = v19 + 4;
    }
    *v20 = v24;
    ++v18;
    v19 = v24;
  }
  while (v18 != 4);
  v33 = a1[9];
  v34 = (char *)a1[8];
  if ((unint64_t)v34 >= v33)
  {
    v52 = (char *)a1[7];
    v53 = (v34 - v52) >> 2;
    v54 = v53 + 1;
    if (!((unint64_t)(v53 + 1) >> 62))
    {
      v55 = v33 - (_QWORD)v52;
      if (v55 >> 1 > v54)
        v54 = v55 >> 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
        v56 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 9), v56);
        v52 = (char *)a1[7];
        v34 = (char *)a1[8];
      }
      else
      {
        v57 = 0;
      }
      v64 = &v57[4 * v53];
      v65 = &v57[4 * v56];
      *(_DWORD *)v64 = a3;
      v35 = v64 + 4;
      while (v34 != v52)
      {
        v66 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *((_DWORD *)v64 - 1) = v66;
        v64 -= 4;
      }
      a1[7] = v64;
      a1[8] = v35;
      a1[9] = v65;
      if (v52)
        operator delete(v52);
      goto LABEL_70;
    }
LABEL_79:
    abort();
  }
  *(_DWORD *)v34 = a3;
  v35 = v34 + 4;
LABEL_70:
  a1[8] = v35;
  return (uint64_t)(*v20 - 16);
}

void OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::Finalize(_QWORD *a1, int a2, std::vector<int> *this, std::vector<int> *a4, unsigned int *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  std::vector<int>::pointer begin;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::vector<int>::pointer v31;
  int *v32;
  int v33;
  uint64_t v34;
  std::vector<int>::pointer v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v43;

  v8 = a1;
  v10 = a1[7];
  v9 = a1[8];
  v11 = v9 - v10;
  v37 = a1[10];
  v39 = a1[11];
  v12 = (v39 - v37) >> 2;
  v13 = v12 + ((v9 - v10) >> 2);
  v14 = *(_QWORD **)(*(_QWORD *)(*a1 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(*a1 + 8) >> 2) & 0xF));
  std::vector<unsigned int>::resize(this, 4 * v13);
  if (v13)
  {
    begin = this->__begin_;
    if (v9 != v10)
    {
      v16 = 0;
      if ((unint64_t)(v11 >> 2) <= 1)
        v17 = 1;
      else
        v17 = v11 >> 2;
      do
      {
        OpenSubdiv::v3_1_1::Far::getQuadOffsets(v14, (const OpenSubdiv::v3_1_1::Vtr::internal::Level *)*(unsigned int *)(v8[7] + 4 * v16), (uint64_t)begin, a5);
        begin += 4;
        ++v16;
      }
      while (v17 != v16);
    }
    if (v39 != v37)
    {
      v18 = 0;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        OpenSubdiv::v3_1_1::Far::getQuadOffsets(v14, (const OpenSubdiv::v3_1_1::Vtr::internal::Level *)*(unsigned int *)(v8[10] + 4 * v18), (uint64_t)begin, a5);
        begin += 4;
        ++v18;
      }
      while (v12 != v18);
    }
  }
  v19 = (2 * a2) | 1;
  std::vector<unsigned int>::resize(a4, *(int *)(*v8 + 20) * v19);
  v20 = 0;
  v21 = 0;
  v22 = ((unint64_t)*(unsigned __int8 *)(*v8 + 8) >> 2) & 0xF;
  v23 = (int)v19;
  v24 = (v22 + 1);
  v25 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
  v40 = v22;
  v41 = v8;
  v38 = v24;
  do
  {
    v26 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*v8 + 40) + 8 * v20);
    v27 = *((_DWORD *)v26 + 2);
    if (v20 == v22 && v27 >= 1)
    {
      v43 = v20;
      v28 = 0;
      v29 = v21 * (int)v23;
      v30 = 4 * v29 + 4;
      do
      {
        v31 = a4->__begin_;
        v32 = &a4->__begin_[v29];
        *v32 = 0;
        v33 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex(v26, v28, v32 + 1, 0xFFFFFFFF);
        if (v33 >= 1)
        {
          v34 = v33;
          v35 = (std::vector<int>::pointer)((char *)v31 + v30);
          do
          {
            *v35++ += v21;
            --v34;
          }
          while (v34);
        }
        if ((v33 & 1) != 0)
        {
          v32[v33 + 1] = v32[v33];
          v33 = ~v33;
        }
        if (v33 >= 0)
          v36 = v33;
        else
          v36 = v33 + 1;
        *v32 = v36 >> 1;
        v29 += v23;
        ++v28;
        v27 = *((_DWORD *)v26 + 2);
        v30 += v25;
      }
      while (v28 < v27);
      v8 = v41;
      v20 = v43;
      v24 = v38;
      v22 = v40;
    }
    v21 += v27;
    ++v20;
  }
  while (v20 != v24);
}

_QWORD *OpenSubdiv::v3_1_1::Far::getQuadOffsets(_QWORD *this, const OpenSubdiv::v3_1_1::Vtr::internal::Level *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((a4 & 0x80000000) != 0)
  {
    v5 = this + 6;
    v7 = this[3];
  }
  else
  {
    v4 = *(uint64_t **)(this[57] + 8 * a4);
    v6 = *v4;
    v5 = v4 + 3;
    v7 = *(_QWORD *)(v6 + 24);
  }
  v8 = (int *)(v7 + 8 * (int)a2 + 4);
  v9 = 0;
  v10 = *v5 + 4 * *v8;
  v11 = this[36];
  v12 = this[33];
  v13 = this[42];
  do
  {
    v14 = *(int *)(v10 + 4 * v9);
    v15 = 2 * v14;
    v16 = *(unsigned int *)(v12 + 8 * (_DWORD)v14);
    if ((int)v16 < 1)
    {
LABEL_9:
      LODWORD(v17) = -1;
    }
    else
    {
      v17 = 0;
      v18 = v11 + 4 * *(int *)(v12 + 8 * v14 + 4);
      while (*(_DWORD *)(v18 + 4 * v17) != (_DWORD)a2)
      {
        if (v16 == ++v17)
          goto LABEL_9;
      }
    }
    *(_DWORD *)(a3 + 4 * v9++) = v17 | ((((int)v17 + 1) % *(_DWORD *)(v13 + 4 * v15)) << 8);
  }
  while (v9 != 4);
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::resizeComponentTopology(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::vector<int> *v7;
  char *begin;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;

  v4 = *a2;
  v5 = **(_QWORD **)(a1 + 40);
  *(_DWORD *)(v5 + 8) = v4;
  std::vector<unsigned int>::resize((std::vector<int> *)(v5 + 264), 2 * v4);
  std::vector<unsigned int>::resize((std::vector<int> *)(v5 + 336), 2 * v4);
  std::vector<float>::resize(v5 + 408, v4);
  std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize(v5 + 432, v4);
  bzero(*(void **)(v5 + 432), 2 * *(int *)(v5 + 8));
  v6 = a2[1];
  v7 = **(std::vector<int> ***)(a1 + 40);
  LODWORD(v7->__begin_) = v6;
  std::vector<unsigned int>::resize(v7 + 1, 2 * v6);
  begin = (char *)v7[4].__begin_;
  v9 = (char *)v7[4].__end_ - begin;
  if (v6 <= v9)
  {
    if (v6 < v9)
      v7[4].__end_ = (std::vector<int>::pointer)&begin[v6];
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)&v7[4].__begin_, v6 - v9);
    begin = (char *)v7[4].__begin_;
  }
  bzero(begin, SLODWORD(v7->__begin_));
  if (a2[1] >= 1)
  {
    v10 = 0;
    v11 = *((_QWORD *)a2 + 1);
    v12 = **(_QWORD **)(a1 + 40);
    v13 = *(_DWORD **)(v12 + 24);
    do
    {
      v14 = *(_DWORD *)(v11 + 4 * v10);
      *v13 = v14;
      if (v10)
        v15 = *(v13 - 1) + *(v13 - 2);
      else
        v15 = 0;
      v13[1] = v15;
      if (*(_DWORD *)(v12 + 20) > v14)
        v14 = *(_DWORD *)(v12 + 20);
      *(_DWORD *)(v12 + 20) = v14;
      ++v10;
      v13 += 2;
    }
    while (v10 < a2[1]);
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTopology(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;

  if (*(int *)(a2 + 4) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = **(_QWORD **)(a1 + 40);
    v5 = *(_QWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 48);
    v7 = *(unsigned __int8 *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 16);
    do
    {
      v9 = (unsigned int *)(v5 + 8 * v2);
      v10 = *v9;
      v11 = (_DWORD *)(v6 + 4 * (int)v9[1]);
      if (v7)
      {
        *v11 = *(_DWORD *)(v8 + 4 * v3++);
        if ((int)v10 >= 2)
        {
          v12 = v10 + 1;
          v13 = (int *)(v8 + 4 * v3);
          do
          {
            v14 = *v13++;
            v11[(v12-- - 2)] = v14;
            ++v3;
          }
          while (v12 > 2);
        }
      }
      else if ((int)v10 >= 1)
      {
        v15 = (int *)(v8 + 4 * v3);
        v3 += v10;
        do
        {
          v16 = *v15++;
          *v11++ = v16;
          --v10;
        }
        while (v10);
      }
      ++v2;
    }
    while (v2 < *(int *)(a2 + 4));
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTags(uint64_t a1, uint64_t a2)
{
  int v4;
  int *v5;
  uint64_t i;
  int v7;
  int v8;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v9;
  int Edge;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char __str[1024];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  if (v4 >= 1)
  {
    v5 = *(int **)(a2 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a2 + 40))
      {
        for (i = 0; i < v4; ++i)
        {
          v7 = *v5;
          v8 = v5[1];
          v9 = **(OpenSubdiv::v3_1_1::Vtr::internal::Level ***)(a1 + 40);
          Edge = OpenSubdiv::v3_1_1::Vtr::internal::Level::findEdge(v9, *v5, v8);
          if (Edge == -1)
          {
            snprintf(__str, 0x400uLL, "Edge %d specified to be sharp does not exist (%d, %d)", i, v7, v8);
            OpenSubdiv::v3_1_1::Far::Warning((OpenSubdiv::v3_1_1::Far *)"%s", v11, __str);
            v4 = *(_DWORD *)(a2 + 24);
          }
          else
          {
            *(_DWORD *)(*((_QWORD *)v9 + 27) + 4 * Edge) = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * i);
          }
          v5 += 2;
        }
      }
    }
  }
  if (*(int *)(a2 + 48) >= 1 && *(_QWORD *)(a2 + 56) && *(_QWORD *)(a2 + 64))
  {
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v12);
      if ((v13 & 0x80000000) != 0 || (v14 = **(_QWORD **)(a1 + 40), (int)v13 >= *(_DWORD *)(v14 + 8)))
      {
        snprintf(__str, 0x400uLL, "Vertex %d specified to be sharp does not exist", *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v12));
        OpenSubdiv::v3_1_1::Far::Warning((OpenSubdiv::v3_1_1::Far *)"%s", v15, __str);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v14 + 408) + 4 * v13) = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v12);
      }
      ++v12;
    }
    while (v12 < *(int *)(a2 + 48));
  }
  if (*(int *)(a2 + 72) >= 1)
  {
    v16 = 0;
    do
    {
      v17 = *(int *)(*(_QWORD *)(a2 + 80) + 4 * v16);
      v18 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 96);
      *(_BYTE *)(v18 + v17) |= 1u;
      *(_BYTE *)(a1 + 8) |= 2u;
      ++v16;
    }
    while (v16 < *(int *)(a2 + 72));
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::reportInvalidTopology(uint64_t a1, const char *a2)
{
  return OpenSubdiv::v3_1_1::Far::Warning((OpenSubdiv::v3_1_1::Far *)"%s", a2, a2);
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignFaceVaryingTopology(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  int *v18;
  int v19;
  int *v20;
  int v21;

  if (*(int *)(a2 + 92) >= 1)
  {
    v4 = 0;
    v5 = (_WORD *)(a1 + 4);
    do
    {
      v6 = *(_QWORD *)(a2 + 96) + 16 * v4;
      v7 = *(_QWORD *)(v6 + 8);
      OpenSubdiv::v3_1_1::Vtr::internal::Level::createFVarChannel(**(_QWORD ***)(a1 + 40), *(_DWORD *)v6, v5);
      if (*(int *)(a2 + 4) >= 1)
      {
        v8 = 0;
        v9 = 0;
        v10 = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 456) + 8 * (int)v4);
        v11 = *(_QWORD *)(*v10 + 24);
        v12 = v10[3];
        v13 = *(unsigned __int8 *)(a2 + 88);
        do
        {
          v14 = (unsigned int *)(v11 + 8 * v8);
          v15 = *v14;
          v16 = (_DWORD *)(v12 + 4 * (int)v14[1]);
          if (v13)
          {
            *v16 = *(_DWORD *)(v7 + 4 * v9++);
            if ((int)v15 >= 2)
            {
              v17 = v15 + 1;
              v18 = (int *)(v7 + 4 * v9);
              do
              {
                v19 = *v18++;
                v16[(v17-- - 2)] = v19;
                ++v9;
              }
              while (v17 > 2);
            }
          }
          else if ((int)v15 >= 1)
          {
            v20 = (int *)(v7 + 4 * v9);
            v9 += v15;
            do
            {
              v21 = *v20++;
              *v16++ = v21;
              --v15;
            }
            while (v15);
          }
          ++v8;
        }
        while (v8 < *(int *)(a2 + 4));
      }
      ++v4;
    }
    while (v4 < *(int *)(a2 + 92));
  }
  return 1;
}

void OpenSubdiv::v3_1_1::Osd::CpuEvalStencils(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, int *a7, const float *a8, int a9, int a10)
{
  const float *v10;
  int *v11;
  int *v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  int v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int i;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  _OWORD *v52;
  __int128 v53;
  _BYTE v54[12];
  int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v10 = a8;
  v11 = a7;
  v12 = a5;
  v58 = *MEMORY[0x24BDAC8D0];
  if (a9 >= 1)
  {
    v12 = &a5[a9];
    v15 = *(int *)(a6 + 4 * a9);
    v11 = &a7[v15];
    v10 = &a8[v15];
  }
  v16 = a1 + 4 * *a2;
  v17 = a3 + 4 * *a4;
  v18.i64[0] = *(_QWORD *)(a4 + 1);
  *(int32x2_t *)v19.i8 = vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)(a2 + 1));
  HIDWORD(v20) = v18.i32[1];
  LODWORD(v20) = HIDWORD(*(_QWORD *)(a2 + 1));
  v19.i64[1] = v20;
  v21.i64[0] = 0x400000004;
  v21.i64[1] = 0x400000004;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v19, v21)))) & 1) != 0)
  {
    v18.i64[1] = *(_QWORD *)(a2 + 1);
    v22.i64[0] = 0x800000008;
    v22.i64[1] = 0x800000008;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18, v22)))) & 1) != 0)
    {
      MEMORY[0x24BDAC7A8](a1);
      v24 = &v54[-v23];
      bzero(&v54[-v23], v25);
      v55 = a10 - a9;
      if (a10 - a9 >= 1)
      {
        v26 = 0;
        do
        {
          v27 = v17;
          v28 = a2[1];
          bzero(v24, 4 * v28);
          v29 = *v12;
          if (*v12 < 1)
          {
            v17 = v27;
          }
          else
          {
            v30 = 0;
            v31 = v28;
            v32 = a2[2];
            v17 = v27;
            do
            {
              v34 = *v11++;
              v33 = v34;
              v35 = *v10++;
              v36 = v35;
              if ((int)v31 >= 1)
              {
                v37 = (float *)(v16 + 4 * v33 * v32);
                v38 = (float *)v24;
                v39 = v31;
                do
                {
                  v40 = *v37++;
                  *v38 = *v38 + (float)(v40 * v36);
                  ++v38;
                  --v39;
                }
                while (v39);
              }
              ++v30;
            }
            while (v30 != v29);
          }
          memcpy((void *)(v17 + 4 * a4[2] * v26++), v24, 4 * a4[1]);
          ++v12;
        }
        while (v26 != v55);
      }
    }
    else if (a10 > a9)
    {
      v46 = a9;
      do
      {
        v56 = 0uLL;
        v57 = 0uLL;
        v47 = v12[v46];
        if (v47 >= 1)
        {
          for (i = 0; i != v47; ++i)
          {
            v49 = 0;
            v50 = v16 + 32 * *v11;
            v51 = vld1q_dup_f32(v10);
            do
            {
              *(__int128 *)((char *)&v56 + v49) = (__int128)vmlaq_f32(*(float32x4_t *)((char *)&v56 + v49), v51, *(float32x4_t *)(v50 + v49));
              v49 += 16;
            }
            while (v49 != 32);
            ++v11;
            ++v10;
          }
        }
        v52 = (_OWORD *)(v17 + 32 * (_DWORD)v46);
        v53 = v57;
        *v52 = v56;
        v52[1] = v53;
        ++v46;
      }
      while (v46 != a10);
    }
  }
  else if (a10 > a9)
  {
    v41 = a9;
    do
    {
      v42 = v12[v41];
      v43 = 0uLL;
      if (v42 >= 1)
      {
        do
        {
          v45 = *v11++;
          v44 = v45;
          *(float *)&v45 = *v10++;
          v43 = vmlaq_n_f32(v43, *(float32x4_t *)(v16 + 16 * v44), *(float *)&v45);
          --v42;
        }
        while (v42);
      }
      *(float32x4_t *)(v17 + 16 * (_DWORD)v41++) = v43;
    }
    while (v41 != a10);
  }
}

int8x16_t *re::pathprocessing::ContinuousEdge::getIndex(int8x16_t *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;

  if (a4)
  {
    v4 = a3
       + 24
       * *(_QWORD *)(*(_QWORD *)(a2[1] + (((unint64_t)(a2[4] + a2[5] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((a2[4] + a2[5] - 1) & 0x1FF));
    *result = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    v5 = *(_QWORD *)v4;
  }
  else
  {
    v6 = (int8x16_t *)(a3
                     + 24
                     * *(_QWORD *)(*(_QWORD *)(a2[1] + ((a2[4] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a2[4] & 0x1FFLL)));
    *result = *v6;
    v5 = v6[1].i64[0];
  }
  result[1].i64[0] = v5;
  return result;
}

void re::pathprocessing::ContinuousEdge::appendBezier(re::pathprocessing::ContinuousEdge *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  void *__p;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;

  if (a3 == 2)
  {
    v10 = *((_QWORD *)this + 4);
    if (!v10)
    {
      v11 = *((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      v13 = ((v12 - v11) << 6) - 1;
      v14 = v12 - v11;
      if (v12 == v11)
        v13 = 0;
      if ((unint64_t)(v13 - *((_QWORD *)this + 5)) < 0x200)
      {
        v15 = (char *)this + 24;
        v16 = *((_QWORD *)this + 3);
        v17 = *(_QWORD *)this;
        v18 = v16 - *(_QWORD *)this;
        if (v14 >= v18)
        {
          if (v16 == v17)
            v19 = 1;
          else
            v19 = v18 >> 2;
          v57 = (uint64_t)this + 24;
          __p = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v15, v19);
          v54 = (char *)__p;
          v55 = (char *)__p;
          v56 = (char *)__p + 8 * v20;
          v52 = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(&__p, &v52);
          v21 = (char *)*((_QWORD *)this + 1);
          v22 = v55;
          if (v21 == *((char **)this + 2))
          {
            v41 = (char *)*((_QWORD *)this + 1);
          }
          else
          {
            do
            {
              if (v22 == v56)
              {
                v23 = v54 - (_BYTE *)__p;
                if (v54 <= __p)
                {
                  if (v22 == __p)
                    v31 = 1;
                  else
                    v31 = (v22 - (_BYTE *)__p) >> 2;
                  v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v57, v31);
                  v34 = v54;
                  v22 = &v32[8 * (v31 >> 2)];
                  v35 = v55 - v54;
                  if (v55 != v54)
                  {
                    v22 = &v32[8 * (v31 >> 2) + (v35 & 0xFFFFFFFFFFFFFFF8)];
                    v36 = 8 * (v35 >> 3);
                    v37 = &v32[8 * (v31 >> 2)];
                    do
                    {
                      v38 = *(_QWORD *)v34;
                      v34 += 8;
                      *(_QWORD *)v37 = v38;
                      v37 += 8;
                      v36 -= 8;
                    }
                    while (v36);
                  }
                  v39 = __p;
                  __p = v32;
                  v54 = &v32[8 * (v31 >> 2)];
                  v55 = v22;
                  v56 = &v32[8 * v33];
                  if (v39)
                  {
                    operator delete(v39);
                    v22 = v55;
                  }
                }
                else
                {
                  v24 = v23 >> 3;
                  v25 = v23 >> 3 < -1;
                  v26 = (v23 >> 3) + 2;
                  if (v25)
                    v27 = v26;
                  else
                    v27 = v24 + 1;
                  v28 = &v54[-8 * (v27 >> 1)];
                  v29 = v22 - v54;
                  if (v22 != v54)
                  {
                    memmove(&v54[-8 * (v27 >> 1)], v54, v22 - v54);
                    v22 = v54;
                  }
                  v30 = &v22[-8 * (v27 >> 1)];
                  v22 = &v28[v29];
                  v54 = v30;
                  v55 = &v28[v29];
                }
              }
              v40 = *(_QWORD *)v21;
              v21 += 8;
              *(_QWORD *)v22 = v40;
              v22 = v55 + 8;
              v55 += 8;
            }
            while (v21 != *((char **)this + 2));
            v41 = (char *)*((_QWORD *)this + 1);
          }
          v44 = *(void **)this;
          v45 = v54;
          *(_QWORD *)this = __p;
          *((_QWORD *)this + 1) = v45;
          __p = v44;
          v54 = v41;
          v46 = (char *)*((_QWORD *)this + 3);
          v47 = v56;
          *((_QWORD *)this + 2) = v22;
          *((_QWORD *)this + 3) = v47;
          v55 = v21;
          v56 = v46;
          if (v22 - v45 == 8)
            v48 = 256;
          else
            v48 = *((_QWORD *)this + 4) + 512;
          *((_QWORD *)this + 4) = v48;
          if (v21 != v41)
            v55 = &v21[(v41 - v21 + 7) & 0xFFFFFFFFFFFFFFF8];
          if (v44)
            operator delete(v44);
        }
        else
        {
          if (v11 == v17)
          {
            __p = operator new(0x1000uLL);
            std::__split_buffer<unsigned long *>::push_back(this, &__p);
            v42 = *((_QWORD *)this + 2);
            __p = *(void **)(v42 - 8);
            *((_QWORD *)this + 2) = v42 - 8;
          }
          else
          {
            __p = operator new(0x1000uLL);
          }
          std::__split_buffer<unsigned long *>::push_front((uint64_t)this, &__p);
          if (*((_QWORD *)this + 2) - *((_QWORD *)this + 1) == 8)
            v43 = 256;
          else
            v43 = *((_QWORD *)this + 4) + 512;
          *((_QWORD *)this + 4) = v43;
        }
      }
      else
      {
        *((_QWORD *)this + 4) = 512;
        __p = *(void **)(v12 - 8);
        *((_QWORD *)this + 2) = v12 - 8;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)this, &__p);
      }
      v10 = *((_QWORD *)this + 4);
    }
    v49 = *((_QWORD *)this + 1);
    v50 = (_QWORD *)(v49 + 8 * (v10 >> 9));
    v51 = *v50 + 8 * (v10 & 0x1FF);
    if (*((_QWORD *)this + 2) == v49)
      v51 = 0;
    if (v51 == *v50)
      v51 = *(v50 - 1) + 4096;
    *(_QWORD *)(v51 - 8) = a2;
    --*((_QWORD *)this + 4);
    v5 = (_QWORD *)((char *)this + 40);
  }
  else
  {
    if (a3)
      return;
    v5 = (_QWORD *)((char *)this + 40);
    v6 = *((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 1);
    if (v6 == v7)
      v8 = 0;
    else
      v8 = ((v6 - v7) << 6) - 1;
    v9 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4);
    if (v8 == v9)
    {
      std::deque<unsigned long>::__add_back_capacity(this);
      v7 = *((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = a2;
  }
  ++*v5;
}

void re::pathprocessing::ContinuousVertex::addEdgeFromEnd(void **a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;

  v7 = (char *)a1[1];
  v6 = (char *)a1[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      abort();
    v11 = v6 - (_BYTE *)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v12);
    v14 = &v13[16 * v9];
    v16 = &v13[16 * v15];
    *(_QWORD *)v14 = a2;
    *((_DWORD *)v14 + 2) = a3;
    v8 = v14 + 16;
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_DWORD *)v7 + 2) = a3;
    v8 = v7 + 16;
  }
  a1[1] = v8;
}

uint64_t re::pathprocessing::ContinuousVertex::compareAngle(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t result;
  float32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;

  v3 = *a1;
  v2 = a1[1];
  v4 = vsub_f32(v2, *a1);
  v5 = (int32x2_t)vmul_f32(v4, v4);
  v6 = a2[1];
  v7 = vsub_f32(v6, *a2);
  v8 = (int32x2_t)vmul_f32(v7, v7);
  v9 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v5, v8), (float32x2_t)vzip2_s32(v5, v8)));
  __asm { FMOV            V7.2S, #1.0 }
  v15 = vdiv_f32(_D7, v9);
  v16 = vmul_n_f32(v4, v15.f32[0]);
  v17 = vmul_lane_f32(v7, v15, 1);
  if (fabsf(vmlas_n_f32((float)-v16.f32[1] * v17.f32[0], v17.f32[1], v16.f32[0])) >= 0.0001
    || vaddv_f32(vmul_f32(v16, v17)) <= 0.0001)
  {
    if (v16.f32[1] < 0.0)
      v16.f32[0] = -2.0 - v16.f32[0];
    if (v17.f32[1] < 0.0)
      v17.f32[0] = -2.0 - v17.f32[0];
    if (v16.f32[0] <= v17.f32[0])
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    result = 0;
    v20 = vadd_f32(vsub_f32(v3, vadd_f32(v2, v2)), a1[2]);
    v21 = (int32x2_t)vadd_f32(v20, v20);
    v22 = vmul_f32(v15, v15);
    v23 = vadd_f32(vsub_f32(*a2, vadd_f32(v6, v6)), a2[2]);
    v24 = (int32x2_t)vadd_f32(v23, v23);
    v25 = vneg_f32(v17);
    v25.f32[0] = -v16.f32[1];
    v26 = vmul_f32(v22, vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v21, v24), v25), (float32x2_t)vzip2_s32(v21, v24), (float32x2_t)vzip1_s32((int32x2_t)v16, (int32x2_t)v17)));
    if (v26.f32[0] != v26.f32[1] && vabds_f32(v26.f32[0], v26.f32[1]) > 0.0001)
    {
      if (v26.f32[0] >= v26.f32[1])
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t re::pathprocessing::HDSMesh::HDSMesh(uint64_t a1, uint64_t *a2)
{
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2[3] != a2[4] && *a2 != a2[1] && a2[6] != a2[7])
    re::pathprocessing::HDSMesh::generateTopology((char **)a1, a2);
  return a1;
}

void re::pathprocessing::HDSMesh::generateTopology(char **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t *v86;
  unsigned __int8 v87;
  void *__p;

  v5 = *a2;
  v4 = a2[1];
  v6 = 0x8E38E38E38E38E39 * ((v4 - *a2) >> 3);
  v8 = a2[3];
  v7 = a2[4];
  v9 = 0x1C71C71C71C71C72 * ((v4 - *a2) >> 3);
  v11 = *a1;
  v10 = a1[1];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a1) >> 4);
  v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12)
      a1[1] = &v11[0x5555555555555560 * ((v4 - *a2) >> 3)];
  }
  else
  {
    v14 = (uint64_t)(a1 + 2);
    v15 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v10) >> 4) >= v13)
    {
      v31 = &v10[48 * v13];
      v32 = 0x5555555555555560 * ((v4 - *a2) >> 3) - 48 * v12;
      *(_QWORD *)&v33 = -1;
      *((_QWORD *)&v33 + 1) = -1;
      do
      {
        *(_OWORD *)v10 = v33;
        *((_OWORD *)v10 + 1) = v33;
        *((_QWORD *)v10 + 4) = -1;
        *((_QWORD *)v10 + 5) = 0;
        v10 += 48;
        v32 -= 48;
      }
      while (v32);
      a1[1] = v31;
    }
    else
    {
      if (v9 > 0x555555555555555)
        goto LABEL_71;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v9)
        v17 = 0x1C71C71C71C71C72 * ((v4 - *a2) >> 3);
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::HalfEdge>>(v14, v18);
      v21 = &v19[48 * v12];
      v22 = &v19[48 * v9];
      v23 = 96 * v6 - 48 * v12;
      *(_QWORD *)&v24 = -1;
      *((_QWORD *)&v24 + 1) = -1;
      v25 = v21;
      do
      {
        *(_OWORD *)v25 = v24;
        *((_OWORD *)v25 + 1) = v24;
        *((_QWORD *)v25 + 4) = -1;
        *((_QWORD *)v25 + 5) = 0;
        v25 += 48;
        v23 -= 48;
      }
      while (v23);
      v26 = &v19[48 * v20];
      v28 = *a1;
      v27 = a1[1];
      if (v27 != *a1)
      {
        do
        {
          v29 = *((_OWORD *)v27 - 3);
          v30 = *((_OWORD *)v27 - 2);
          *(_OWORD *)(v21 - 20) = *(_OWORD *)(v27 - 20);
          *((_OWORD *)v21 - 3) = v29;
          *((_OWORD *)v21 - 2) = v30;
          v21 -= 48;
          v27 -= 48;
        }
        while (v27 != v28);
        v27 = *a1;
      }
      *a1 = v21;
      a1[1] = v22;
      a1[2] = v26;
      if (v27)
        operator delete(v27);
    }
  }
  v34 = (v7 - v8) / 24;
  v35 = v6 + 2 - v34;
  if (v6 + 2 < v34)
    return;
  v36 = a1[3];
  if (v35 > (a1[5] - v36) >> 4)
  {
    if (!(v35 >> 60))
    {
      v37 = (char *)(a1[4] - v36);
      v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v35);
      v39 = &v38[(unint64_t)v37 & 0xFFFFFFFFFFFFFFF0];
      v41 = &v38[16 * v40];
      v43 = a1[3];
      v42 = a1[4];
      v44 = v39;
      if (v42 != v43)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v42 - 1);
          v44 -= 16;
          v42 -= 16;
        }
        while (v42 != v43);
        v42 = a1[3];
      }
      a1[3] = v44;
      a1[4] = v39;
      a1[5] = v41;
      if (v42)
        operator delete(v42);
      goto LABEL_29;
    }
LABEL_71:
    abort();
  }
LABEL_29:
  if (v4 != v5)
  {
    v45 = 0;
    v46 = 0;
    if (v6 <= 1)
      v47 = 1;
    else
      v47 = v6;
    v48 = *a1 + 88;
    do
    {
      *(v48 - 12) = 0;
      *v48 = 1;
      *((_QWORD *)v48 - 8) = v45 + 1;
      *((_QWORD *)v48 - 7) = v46;
      *((_QWORD *)v48 - 2) = v45;
      *((_QWORD *)v48 - 1) = v46++;
      v48 += 24;
      v45 += 2;
    }
    while (v47 != v46);
  }
  if (v7 != v8)
  {
    v49 = 0;
    v50 = a2[3];
    if (v34 <= 1)
      v51 = 1;
    else
      v51 = (v7 - v8) / 24;
    do
    {
      v52 = (uint64_t *)(v50 + 24 * v49);
      v53 = *v52;
      v54 = v52[1] - *v52;
      if (v54)
      {
        v55 = v54 >> 4;
        v56 = v54 & 0xFFFFFFFFFFFFFFF0;
        v57 = *a1;
        if (v55 <= 1)
          v55 = 1;
        v58 = v56 + v53;
        v59 = *(_DWORD *)(v58 - 8);
        v60 = *(_QWORD *)(v58 - 16);
        v61 = (_DWORD *)(v53 + 8);
        do
        {
          v62 = *v61;
          v63 = (v59 != 0) | (unint64_t)(2 * v60);
          v64 = *((_QWORD *)v61 - 1);
          v65 = (*v61 == 0) | (unint64_t)(2 * v64);
          *(_QWORD *)&v57[48 * v65 + 8] = v63;
          *(_QWORD *)&v57[48 * v63 + 16] = v65;
          v61 += 4;
          v60 = v64;
          v59 = v62;
          --v55;
        }
        while (v55);
      }
      ++v49;
    }
    while (v49 != v51);
  }
  v67 = *a1;
  v66 = a1[1];
  v68 = 0xAAAAAAAAAAAAAAABLL * ((v66 - *a1) >> 4);
  v87 = 0;
  std::vector<BOOL>::vector(&__p, v68, &v87);
  v69 = __p;
  if (v66 != v67)
  {
    v70 = 0;
    if (v68 <= 1)
      v68 = 1;
    do
    {
      if (((1 << v70) & v69[v70 >> 6]) == 0)
      {
        v71 = a1[3];
        v72 = a1[4];
        v73 = (v72 - v71) >> 4;
        v74 = (unint64_t)a1[5];
        if ((unint64_t)v72 >= v74)
        {
          if ((unint64_t)(v73 + 1) >> 60)
            goto LABEL_71;
          v76 = v74 - (_QWORD)v71;
          v77 = v76 >> 3;
          if (v76 >> 3 <= (unint64_t)(v73 + 1))
            v77 = v73 + 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
            v78 = 0xFFFFFFFFFFFFFFFLL;
          else
            v78 = v77;
          v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v78);
          v81 = &v79[16 * v73];
          *(_OWORD *)v81 = xmmword_2260FF4D0;
          v75 = v81 + 16;
          v83 = a1[3];
          v82 = a1[4];
          if (v82 != v83)
          {
            do
            {
              *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
              v81 -= 16;
              v82 -= 16;
            }
            while (v82 != v83);
            v82 = a1[3];
          }
          a1[3] = v81;
          a1[4] = v75;
          a1[5] = &v79[16 * v80];
          if (v82)
            operator delete(v82);
        }
        else
        {
          *(_OWORD *)v72 = xmmword_2260FF4D0;
          v75 = v72 + 16;
        }
        a1[4] = v75;
        *((_QWORD *)v75 - 2) = v70;
        v84 = *a1;
        v69 = __p;
        v85 = v70;
        do
        {
          v86 = (uint64_t *)&v84[48 * v85];
          *v86 = v73;
          *(_QWORD *)((char *)v69 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
          v85 = v86[1];
        }
        while (v85 != v70);
        v69[v70 >> 6] |= 1 << v70;
      }
      ++v70;
    }
    while (v70 != v68);
    goto LABEL_68;
  }
  if (__p)
LABEL_68:
    operator delete(v69);
  *((_BYTE *)a1 + 48) = 1;
}

uint64_t *re::pathprocessing::BezierGraphInfo::BezierGraphInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  char *v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  uint64_t *v42;
  void **v43;
  void **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void **v65;
  unint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  void *v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  void **v83;
  uint64_t v84;
  _QWORD *v85;
  int64x2_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void **v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  void **v115;
  uint64_t v116;
  void **v117;
  void **v118;
  void **v119;
  void **v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  void **v130;
  void *v131;
  void *v132;
  unint64_t v133;
  void **v134;
  uint64_t v135;
  void **v136;
  void **v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  void **v149;
  void *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  __int128 *v166;
  uint64_t v167;
  unint64_t v168;
  char **v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL4 v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  __int128 v228;
  uint64_t v229;
  _QWORD *v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  void *v257;
  void **__p;
  uint64_t *v260;
  uint64_t *v261;
  void **v262;
  char *v263;
  unint64_t v264;
  void **v265;
  void **v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t *v269;
  _QWORD v270[4];
  _QWORD v271[4];
  _QWORD v272[4];
  _QWORD v273[4];
  uint64_t *v274;
  _QWORD *v275[2];
  uint64_t *v276;
  __int128 v277;
  _QWORD v278[2];
  uint64_t *v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t *v282;
  _QWORD *v283;

  v2 = a2;
  *((_OWORD *)a1 + 3) = 0u;
  v269 = a1 + 6;
  a1[8] = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = *a2;
  v5 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v5 == *a2)
  {
    a1[7] = 0x5555555555555558 * ((v5 - *a2) >> 3);
  }
  else
  {
    if (v6 >> 61)
      goto LABEL_299;
    std::vector<unsigned long>::__vallocate[abi:nn180100](v269, 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3));
    v7 = (char *)a1[7];
    memset(v7, 255, 8 * v6);
    a1[7] = (uint64_t)&v7[8 * v6];
    v4 = *v2;
    v5 = v2[1];
  }
  v274 = (uint64_t *)v275;
  v275[0] = 0;
  v275[1] = 0;
  v276 = v2;
  v260 = v2;
  if (v5 == v4)
  {
    v43 = 0;
    v44 = 0;
    __p = 0;
    goto LABEL_244;
  }
  v8 = 0;
  v261 = a1 + 3;
  do
  {
    v9 = v4 + 24 * v8;
    v10 = std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::__emplace_unique_key_args<re::Vector2<float>,std::piecewise_construct_t const&,std::tuple<re::Vector2<float> const&>,std::tuple<>>(&v274, (_QWORD *)v9, *(float *)v9, *(float *)(v9 + 4));
    v11 = v10;
    v13 = (unint64_t *)*((_QWORD *)v10 + 7);
    v12 = *((_QWORD *)v10 + 8);
    if ((unint64_t)v13 >= v12)
    {
      v15 = *((_QWORD *)v10 + 6);
      v16 = ((uint64_t)v13 - v15) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        goto LABEL_299;
      v18 = v12 - v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v19);
      v22 = (unint64_t *)&v20[16 * v16];
      *v22 = v8;
      v22[1] = 0;
      v24 = (char *)*((_QWORD *)v11 + 6);
      v23 = (char *)*((_QWORD *)v11 + 7);
      v25 = v22;
      if (v23 != v24)
      {
        do
        {
          *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
          v25 -= 2;
          v23 -= 16;
        }
        while (v23 != v24);
        v23 = (char *)*((_QWORD *)v11 + 6);
      }
      v14 = v22 + 2;
      *((_QWORD *)v11 + 6) = v25;
      *((_QWORD *)v11 + 7) = v22 + 2;
      *((_QWORD *)v11 + 8) = &v20[16 * v21];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v13 = v8;
      v13[1] = 0;
      v14 = v13 + 2;
    }
    *((_QWORD *)v11 + 7) = v14;
    v26 = std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::__emplace_unique_key_args<re::Vector2<float>,std::piecewise_construct_t const&,std::tuple<re::Vector2<float> const&>,std::tuple<>>(&v274, (_QWORD *)(v9 + 16), *(float *)(v9 + 16), *(float *)(v9 + 20));
    v27 = v26;
    v29 = (unint64_t *)*((_QWORD *)v26 + 7);
    v28 = *((_QWORD *)v26 + 8);
    if ((unint64_t)v29 >= v28)
    {
      v31 = *((_QWORD *)v26 + 6);
      v32 = ((uint64_t)v29 - v31) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        goto LABEL_299;
      v34 = v28 - v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v35);
      v38 = (unint64_t *)&v36[16 * v32];
      *v38 = v8;
      v38[1] = 2;
      v40 = (char *)*((_QWORD *)v27 + 6);
      v39 = (char *)*((_QWORD *)v27 + 7);
      v41 = v38;
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v41 - 1) = *((_OWORD *)v39 - 1);
          v41 -= 2;
          v39 -= 16;
        }
        while (v39 != v40);
        v39 = (char *)*((_QWORD *)v27 + 6);
      }
      v30 = v38 + 2;
      *((_QWORD *)v27 + 6) = v41;
      *((_QWORD *)v27 + 7) = v38 + 2;
      *((_QWORD *)v27 + 8) = &v36[16 * v37];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *v29 = v8;
      v29[1] = 2;
      v30 = v29 + 2;
    }
    *((_QWORD *)v27 + 7) = v30;
    ++v8;
    v4 = *v276;
  }
  while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v276[1] - *v276) >> 3));
  v42 = v274;
  if (v274 == (uint64_t *)v275)
  {
    v43 = 0;
    v44 = 0;
    __p = 0;
    goto LABEL_243;
  }
  v43 = 0;
  v44 = 0;
  v262 = 0;
  __p = 0;
  v267 = 0;
  do
  {
    v45 = (uint64_t *)v42[6];
    v46 = v42[7] - (_QWORD)v45;
    if (v46 == 16)
    {
      v48 = *a1;
      for (i = a1[1]; i != v48; i = std::deque<unsigned long>::~deque[abi:nn180100]((_QWORD *)(i - 72)))
        ;
      a1[1] = v48;
      _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(v261);
      a1[7] = a1[6];
      goto LABEL_49;
    }
    if (v46 != 32)
    {
      v56 = (((char *)v44 - (char *)v43) << 6) - 1;
      v57 = (char *)v44 - (char *)v43;
      if (v44 == v43)
        v56 = 0;
      if (v56 != v267)
        goto LABEL_157;
      v58 = v57 >> 3;
      if (v57 >> 3 < (unint64_t)(v262 - __p))
      {
        v59 = operator new(0x1000uLL);
        v60 = v59;
        if (v262 != v44)
        {
          *v44++ = v59;
LABEL_157:
          v117 = v44;
LABEL_158:
          (*(_QWORD **)((char *)v43 + ((v267 >> 6) & 0x3FFFFFFFFFFFFF8)))[v267 & 0x1FF] = v42 + 5;
          ++v267;
          v44 = v117;
          goto LABEL_170;
        }
        if (v43 == __p)
        {
          if (v44 == v43)
            v143 = 1;
          else
            v143 = ((char *)v262 - (char *)v43) >> 2;
          v144 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v143);
          v146 = v145;
          __p = v144;
          v92 = (void **)((char *)v144 + ((2 * v143 + 6) & 0xFFFFFFFFFFFFFFF8));
          v55 = v44 == v43;
          v44 = v92;
          if (!v55)
          {
            v147 = 8 * v58;
            v148 = v92;
            v149 = v43;
            v44 = &v92[v58];
            do
            {
              v150 = *v149++;
              *v148++ = v150;
              v147 -= 8;
            }
            while (v147);
          }
          if (v43)
            operator delete(v43);
          *(v92 - 1) = v60;
          v262 = &__p[v146];
          if (v44 != v262)
            goto LABEL_156;
        }
        else
        {
          *(v43 - 1) = v59;
          v92 = v43;
        }
        if (v92 <= __p)
        {
          if (v44 == __p)
            v133 = 1;
          else
            v133 = ((char *)v44 - (char *)__p) >> 2;
          v134 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v133);
          v136 = v134;
          v137 = &v134[v133 >> 2];
          v138 = v44;
          v44 = v137;
          v139 = (char *)v138 - (char *)v92;
          if (v139)
          {
            v44 = (void **)((char *)v137 + (v139 & 0xFFFFFFFFFFFFFFF8));
            v140 = 8 * (v139 >> 3);
            v141 = (char *)&v134[v133 >> 2];
            do
            {
              v142 = (uint64_t)*v92++;
              *(_QWORD *)v141 = v142;
              v141 += 8;
              v140 -= 8;
            }
            while (v140);
          }
          v262 = &v134[v135];
          if (__p)
            operator delete(__p);
          v92 = v137;
          __p = v136;
        }
        else
        {
          v93 = v92 - __p;
          if (v93 >= -1)
            v94 = v93 + 1;
          else
            v94 = v93 + 2;
          v95 = v94 >> 1;
          v96 = &v92[-v95];
          v262 = v44;
          if (v44 != v92)
            memmove(&v92[-v95], v92, (char *)v44 - (char *)v92);
          v44 = (void **)((char *)v96 + (char *)v44 - (char *)v92);
          v92 = v96;
        }
LABEL_156:
        *v44++ = v60;
        v43 = v92;
        goto LABEL_157;
      }
      v65 = v44;
      if (v262 == __p)
        v66 = 1;
      else
        v66 = ((char *)v262 - (char *)__p) >> 2;
      v67 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v66);
      v69 = v68;
      v70 = &v67[v58];
      v263 = (char *)&v67[v68];
      v71 = operator new(0x1000uLL);
      if (v58 == v69)
      {
        v72 = 8 * v58;
        v73 = v65;
        if (v57 < 1)
        {
          v112 = v71;
          v113 = v72 >> 2;
          if (v65 == v43)
            v114 = 1;
          else
            v114 = v113;
          v115 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v114);
          v70 = &v115[v114 >> 2];
          v263 = (char *)&v115[v116];
          if (v67)
            operator delete(v67);
          v67 = v115;
          v73 = v65;
          v71 = v112;
        }
        else
        {
          v74 = v72 >> 3;
          if (v74 >= -1)
            v75 = v74 + 1;
          else
            v75 = v74 + 2;
          v70 -= v75 >> 1;
        }
      }
      else
      {
        v73 = v65;
      }
      *v70 = v71;
      v117 = v70 + 1;
      v118 = (void **)v263;
      if (v73 == v43)
      {
LABEL_135:
        v262 = v118;
        if (__p)
          operator delete(__p);
        v43 = v70;
        __p = v67;
        goto LABEL_158;
      }
      while (1)
      {
        if (v70 == v67)
        {
          if (v117 < v118)
          {
            v121 = v118 - v117;
            if (v121 >= -1)
              v122 = v121 + 1;
            else
              v122 = v121 + 2;
            v119 = &v117[v122 >> 1];
            v120 = &v70[v122 >> 1];
            if (v117 == v70)
              v70 = v117;
            else
              memmove(&v70[v122 >> 1], v70, (char *)v117 - (char *)v70);
            goto LABEL_134;
          }
          if (v118 == v70)
            v123 = 1;
          else
            v123 = ((char *)v118 - (char *)v70) >> 2;
          v124 = 2 * v123;
          v125 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v123);
          v67 = v125;
          v120 = (void **)((char *)v125 + ((v124 + 6) & 0xFFFFFFFFFFFFFFF8));
          v119 = v120;
          v127 = (char *)v117 - (char *)v70;
          if (v117 != v70)
          {
            v119 = (void **)((char *)v120 + (v127 & 0xFFFFFFFFFFFFFFF8));
            v128 = 8 * (v127 >> 3);
            v129 = v120;
            v130 = v70;
            do
            {
              v131 = *v130++;
              *v129++ = v131;
              v128 -= 8;
            }
            while (v128);
          }
          v118 = &v125[v126];
          operator delete(v70);
        }
        else
        {
          v119 = v117;
          v120 = v70;
        }
        v70 = v67;
LABEL_134:
        v132 = *--v73;
        *(v120 - 1) = v132;
        v67 = v70;
        v70 = v120 - 1;
        v117 = v119;
        if (v73 == v43)
          goto LABEL_135;
      }
    }
    v49 = v44;
    v50 = *v45;
    v51 = *v269;
    v52 = v45[2];
    v53 = *(_QWORD *)(*v269 + 8 * *v45);
    v54 = *(_QWORD *)(*v269 + 8 * v52);
    v55 = v53 == -1 && v54 == -1;
    if (v55)
    {
      v61 = a1[1];
      v62 = 0x8E38E38E38E38E39 * ((uint64_t)(v61 - *a1) >> 3);
      v63 = a1[2];
      if (v61 >= v63)
      {
        v76 = v62 + 1;
        if (v62 + 1 > 0x38E38E38E38E38ELL)
          goto LABEL_299;
        if (0x1C71C71C71C71C72 * ((uint64_t)(v63 - *a1) >> 3) > v76)
          v76 = 0x1C71C71C71C71C72 * ((uint64_t)(v63 - *a1) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a1) >> 3) >= 0x1C71C71C71C71C7)
          v77 = 0x38E38E38E38E38ELL;
        else
          v77 = v76;
        v283 = a1 + 2;
        v78 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v77);
        v79 = &v78[9 * v62];
        v279 = v78;
        v280 = v79;
        v282 = &v78[9 * v80];
        v79[8] = 0;
        *(_OWORD *)v79 = 0u;
        *((_OWORD *)v79 + 1) = 0u;
        *((_OWORD *)v79 + 2) = 0u;
        *((_OWORD *)v79 + 3) = 0u;
        *((_BYTE *)v79 + 64) = 1;
        v281 = v79 + 9;
        std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer(a1, &v279);
        v64 = a1[1];
        std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
      }
      else
      {
        *(_QWORD *)(v61 + 64) = 0;
        *(_OWORD *)(v61 + 32) = 0u;
        *(_OWORD *)(v61 + 48) = 0u;
        *(_OWORD *)v61 = 0u;
        *(_OWORD *)(v61 + 16) = 0u;
        v64 = v61 + 72;
        *(_BYTE *)(v61 + 64) = 1;
      }
      a1[1] = v64;
      re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(v64 - 72), *(_QWORD *)v42[6], *(_QWORD *)(v42[6] + 8));
      re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(v64 - 72), *(_QWORD *)(v42[6] + 16), *(_QWORD *)(v42[6] + 24));
      *(_QWORD *)(v51 + 8 * v50) = v62;
      *(_QWORD *)(v51 + 8 * v52) = v62;
      goto LABEL_169;
    }
    if (v53 == -1)
    {
      if (v54 != -1)
      {
        re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(*a1 + 72 * v54), *v45, v45[1]);
        *(_QWORD *)(v51 + 8 * v50) = *(_QWORD *)(v51 + 8 * v52);
        goto LABEL_169;
      }
    }
    else if (v54 == -1)
    {
      re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(*a1 + 72 * v53), v45[2], v45[3]);
      *(_QWORD *)(v51 + 8 * v52) = *(_QWORD *)(v51 + 8 * v50);
LABEL_169:
      v44 = v49;
      goto LABEL_170;
    }
    if (v53 == v54)
    {
      v82 = (_QWORD *)a1[4];
      v81 = a1[5];
      if ((unint64_t)v82 >= v81)
      {
        v97 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v82 - *v261) >> 3);
        v98 = v97 + 1;
        if (v97 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_299;
        v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *v261) >> 3);
        if (2 * v99 > v98)
          v98 = 2 * v99;
        if (v99 >= 0x555555555555555)
          v100 = 0xAAAAAAAAAAAAAAALL;
        else
          v100 = v98;
        v283 = a1 + 5;
        if (v100)
          v100 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v100);
        else
          v101 = 0;
        v158 = (uint64_t *)(v100 + 24 * v97);
        v279 = (uint64_t *)v100;
        v280 = v158;
        v282 = (uint64_t *)(v100 + 24 * v101);
        *v158 = 0;
        v158[1] = 0;
        v158[2] = 0;
        v281 = v158 + 3;
        std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v261, &v279);
        v83 = (void **)a1[4];
        std::__split_buffer<re::pathprocessing::ContinuousVertex>::~__split_buffer((uint64_t)&v279);
      }
      else
      {
        *v82 = 0;
        v82[1] = 0;
        v83 = (void **)(v82 + 3);
        v82[2] = 0;
      }
      a1[4] = (uint64_t)v83;
      re::pathprocessing::ContinuousVertex::addEdgeFromEnd(v83 - 3, *(_QWORD *)(v51 + 8 * v50), 0);
      re::pathprocessing::ContinuousVertex::addEdgeFromEnd(v83 - 3, *(_QWORD *)(v51 + 8 * v52), 1);
      goto LABEL_169;
    }
    v84 = *a1;
    v85 = (_QWORD *)(*a1 + 72 * v54);
    v86 = (int64x2_t *)(*a1 + 72 * v53);
    v87 = v86[2].u64[0];
    v88 = v87 + v86[2].i64[1];
    v89 = v86->i64[1];
    if (*(_QWORD *)(*(_QWORD *)(v89 + (((v88 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v88 - 1) & 0x1FF)) != v50)
    {
      v90 = (char *)(v89 + 8 * (v87 >> 9));
      if (*(_QWORD *)(*(_QWORD *)v90 + 8 * (v86[2].i64[0] & 0x1FF)) != v50)
        goto LABEL_188;
      v102 = v85[4];
      v103 = v102 + v85[5];
      v104 = v85[1];
      v105 = v85[2];
      if (v86[1].i64[0] == v89)
        v91 = 0;
      else
        v91 = *(_QWORD *)v90 + 8 * (v86[2].i64[0] & 0x1FF);
      if (*(_QWORD *)(*(_QWORD *)(v104 + (((v103 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v103 - 1) & 0x1FF)) == v52)
      {
        v106 = (uint64_t *)(v104 + 8 * (v102 >> 9));
        v107 = *a1;
        if (v105 == v104)
        {
          v108 = 0;
          v154 = 0;
          v109 = (uint64_t *)(v104 + 8 * (v103 >> 9));
          goto LABEL_183;
        }
        v108 = (char *)(*v106 + 8 * (v85[4] & 0x1FFLL));
        v109 = (uint64_t *)(v104 + 8 * (v103 >> 9));
        v110 = *v109;
        v111 = v103 & 0x1FF;
        goto LABEL_163;
      }
      v161 = (_QWORD *)(v104 + 8 * (v103 >> 9));
      v107 = *a1;
      if (v105 == v104)
      {
        v162 = 0;
        v164 = 0;
        v163 = (_QWORD *)(v104 + 8 * (v102 >> 9));
      }
      else
      {
        v162 = *v161 + 8 * (v103 & 0x1FF);
        v163 = (_QWORD *)(v104 + 8 * (v102 >> 9));
        v164 = *v163 + 8 * (v85[4] & 0x1FFLL);
      }
      v271[0] = v161;
      v271[1] = v162;
      v271[2] = v161;
      v271[3] = v162;
      v270[0] = v163;
      v270[1] = v164;
      v270[2] = v163;
      v270[3] = v164;
      v165 = v271;
      v166 = (__int128 *)v270;
LABEL_186:
      std::deque<unsigned long>::insert<std::reverse_iterator<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>,0>(v86, v90, v91, (uint64_t)v165, v166);
      goto LABEL_187;
    }
    v90 = (char *)(v89 + 8 * (v88 >> 9));
    if (v86[1].i64[0] == v89)
      v91 = 0;
    else
      v91 = *(_QWORD *)v90 + 8 * (v88 & 0x1FF);
    v151 = v85[1];
    v152 = v85[4];
    v106 = (uint64_t *)(v151 + 8 * (v152 >> 9));
    v108 = (char *)(*v106 + 8 * (v152 & 0x1FF));
    if (*(_QWORD *)v108 != v52)
    {
      v155 = v85[5] + v152;
      v156 = (_QWORD *)(v151 + 8 * (v155 >> 9));
      v107 = *a1;
      if (v85[2] == v151)
      {
        v157 = 0;
        v108 = 0;
      }
      else
      {
        v157 = *v156 + 8 * (v155 & 0x1FF);
      }
      v273[0] = v156;
      v273[1] = v157;
      v273[2] = v156;
      v273[3] = v157;
      v272[0] = v106;
      v272[1] = v108;
      v272[2] = v106;
      v272[3] = v108;
      v165 = v273;
      v166 = (__int128 *)v272;
      goto LABEL_186;
    }
    v107 = *a1;
    if (v85[2] == v151)
    {
      v108 = 0;
      v154 = 0;
      v109 = (uint64_t *)(v151 + 8 * ((v85[5] + v152) >> 9));
      goto LABEL_183;
    }
    v153 = v85[5] + v152;
    v109 = (uint64_t *)(v151 + 8 * (v153 >> 9));
    v110 = *v109;
    v111 = v153 & 0x1FF;
LABEL_163:
    v154 = (char *)(v110 + 8 * v111);
LABEL_183:
    std::deque<unsigned long>::insert<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>((uint64_t)v86, v90, v91, v106, v108, v109, v154);
LABEL_187:
    v84 = v107;
LABEL_188:
    v167 = v85[1];
    if (v85[2] != v167)
    {
      v168 = v85[4];
      v169 = (char **)(v167 + 8 * (v168 >> 9));
      v170 = *v169;
      v171 = &(*v169)[8 * (v168 & 0x1FF)];
      v172 = *(_QWORD *)(v167 + (((v85[5] + v168) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v85[5] + v168) & 0x1FF);
      if (v171 != (char *)v172)
      {
        v173 = *v269;
        do
        {
          v174 = *(_QWORD *)v171;
          v171 += 8;
          *(_QWORD *)(v173 + 8 * v174) = *(_QWORD *)(v51 + 8 * v50);
          if (v171 - v170 == 4096)
          {
            v175 = v169[1];
            ++v169;
            v170 = v175;
            v171 = v175;
          }
        }
        while (v171 != (char *)v172);
      }
    }
    *(_BYTE *)(v84 + 72 * v54 + 64) = 0;
    v44 = v49;
LABEL_49:
    if (v46 == 16)
      goto LABEL_291;
LABEL_170:
    v159 = (uint64_t *)v42[1];
    if (v159)
    {
      do
      {
        v160 = v159;
        v159 = (uint64_t *)*v159;
      }
      while (v159);
    }
    else
    {
      do
      {
        v160 = (uint64_t *)v42[2];
        v55 = *v160 == (_QWORD)v42;
        v42 = v160;
      }
      while (!v55);
    }
    v42 = v160;
  }
  while (v160 != (uint64_t *)v275);
  v176 = v267;
  if (!v267)
  {
LABEL_243:
    v2 = v260;
    goto LABEL_244;
  }
  do
  {
    v265 = v44;
    v268 = v176;
    v177 = v176 - 1;
    v178 = (*(_QWORD **)((char *)v43 + (((v176 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v176 - 1) & 0x1FF];
    v180 = (_QWORD *)a1[4];
    v179 = a1[5];
    v264 = v177;
    if ((unint64_t)v180 >= v179)
    {
      v182 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - *v261) >> 3);
      v183 = v182 + 1;
      if (v182 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_299;
      v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - *v261) >> 3);
      if (2 * v184 > v183)
        v183 = 2 * v184;
      if (v184 >= 0x555555555555555)
        v185 = 0xAAAAAAAAAAAAAAALL;
      else
        v185 = v183;
      v283 = a1 + 5;
      if (v185)
        v185 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v185);
      else
        v186 = 0;
      v187 = (uint64_t *)(v185 + 24 * v182);
      v279 = (uint64_t *)v185;
      v280 = v187;
      v282 = (uint64_t *)(v185 + 24 * v186);
      *v187 = 0;
      v187[1] = 0;
      v187[2] = 0;
      v281 = v187 + 3;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v261, &v279);
      v181 = (_QWORD *)a1[4];
      std::__split_buffer<re::pathprocessing::ContinuousVertex>::~__split_buffer((uint64_t)&v279);
    }
    else
    {
      *v180 = 0;
      v180[1] = 0;
      v181 = v180 + 3;
      v180[2] = 0;
    }
    a1[4] = (uint64_t)v181;
    v189 = *(uint64_t **)(v178 + 8);
    v188 = *(uint64_t **)(v178 + 16);
    while (v189 != v188)
    {
      v190 = *v269;
      v191 = *v189;
      v192 = v189[1] != 0;
      if (*(_QWORD *)(*v269 + 8 * *v189) == -1)
      {
        v194 = *a1;
        v193 = a1[1];
        v195 = 0x8E38E38E38E38E39 * ((uint64_t)(v193 - *a1) >> 3);
        *(_QWORD *)(v190 + 8 * v191) = v195;
        v196 = a1[2];
        if (v193 >= v196)
        {
          v198 = v195 + 1;
          if (v195 + 1 > 0x38E38E38E38E38ELL)
            goto LABEL_299;
          v199 = 0x8E38E38E38E38E39 * ((uint64_t)(v196 - v194) >> 3);
          if (2 * v199 > v198)
            v198 = 2 * v199;
          if (v199 >= 0x1C71C71C71C71C7)
            v200 = 0x38E38E38E38E38ELL;
          else
            v200 = v198;
          v283 = a1 + 2;
          v201 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v200);
          v202 = &v201[9 * v195];
          v279 = v201;
          v280 = v202;
          v282 = &v201[9 * v203];
          v202[8] = 0;
          *(_OWORD *)v202 = 0u;
          *((_OWORD *)v202 + 1) = 0u;
          *((_OWORD *)v202 + 2) = 0u;
          *((_OWORD *)v202 + 3) = 0u;
          *((_BYTE *)v202 + 64) = 1;
          v281 = v202 + 9;
          std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer(a1, &v279);
          v197 = a1[1];
          std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
        }
        else
        {
          *(_QWORD *)(v193 + 64) = 0;
          *(_OWORD *)(v193 + 32) = 0u;
          *(_OWORD *)(v193 + 48) = 0u;
          *(_OWORD *)v193 = 0u;
          *(_OWORD *)(v193 + 16) = 0u;
          v197 = v193 + 72;
          *(_BYTE *)(v193 + 64) = 1;
        }
        a1[1] = v197;
        re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(v197 - 72), *v189, v189[1]);
      }
      v205 = *(v181 - 2);
      v204 = *(v181 - 1);
      if (v205 >= v204)
      {
        v207 = *(v181 - 3);
        v208 = (uint64_t)(v205 - v207) >> 4;
        v209 = v208 + 1;
        if ((unint64_t)(v208 + 1) >> 60)
          goto LABEL_299;
        v210 = v204 - v207;
        if (v210 >> 3 > v209)
          v209 = v210 >> 3;
        if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF0)
          v211 = 0xFFFFFFFFFFFFFFFLL;
        else
          v211 = v209;
        v212 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v211);
        v214 = &v212[16 * v208];
        *(_QWORD *)v214 = *(_QWORD *)(v190 + 8 * v191);
        *((_DWORD *)v214 + 2) = v192;
        v216 = (char *)*(v181 - 3);
        v215 = (char *)*(v181 - 2);
        v217 = v214;
        if (v215 != v216)
        {
          do
          {
            *((_OWORD *)v217 - 1) = *((_OWORD *)v215 - 1);
            v217 -= 16;
            v215 -= 16;
          }
          while (v215 != v216);
          v215 = (char *)*(v181 - 3);
        }
        v206 = v214 + 16;
        *(v181 - 3) = v217;
        *(v181 - 2) = v214 + 16;
        *(v181 - 1) = &v212[16 * v213];
        if (v215)
          operator delete(v215);
      }
      else
      {
        *(_QWORD *)v205 = *(_QWORD *)(v190 + 8 * v191);
        *(_DWORD *)(v205 + 8) = v192;
        v206 = (char *)(v205 + 16);
      }
      *(v181 - 2) = v206;
      v189 += 2;
    }
    v44 = v265;
    v218 = (((char *)v265 - (char *)v43) << 6) - 1;
    if (v265 == v43)
      v218 = 0;
    if (v218 - v268 - 1023 <= 0xFFFFFFFFFFFFFBFFLL)
    {
      v44 = v265 - 1;
      operator delete(*(v265 - 1));
    }
    v2 = v260;
    v176 = v264;
  }
  while (v264);
LABEL_244:
  v219 = (_QWORD *)a1[1];
  if (v219 != (_QWORD *)*a1)
  {
    v220 = 0x8E38E38E38E38E39 * (((uint64_t)v219 - *a1) >> 3);
    if (!(v220 >> 61))
    {
      v221 = operator new(0x71C71C71C71C71C8 * (((uint64_t)v219 - *a1) >> 3));
      bzero(v221, 8 * v220);
      v277 = 0uLL;
      v278[0] = 0;
      v283 = v278;
      v279 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v220);
      v280 = v279;
      v281 = v279;
      v282 = &v279[9 * v222];
      std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer((uint64_t *)&v277, &v279);
      std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
      v223 = *a1;
      v219 = (_QWORD *)a1[1];
      if (v219 == (_QWORD *)*a1)
      {
        v219 = (_QWORD *)*a1;
      }
      else
      {
        v266 = v44;
        v224 = 0;
        v225 = 0;
        v226 = 32;
        do
        {
          if (*(_BYTE *)(v223 + v226 + 32))
          {
            v227 = (_QWORD *)(v223 + v226 - 32);
            v228 = v277;
            v229 = (*((_QWORD *)&v277 + 1) - (_QWORD)v277) / 72;
            *((_QWORD *)v221 + v225) = v224 + v229;
            if (*((_QWORD *)&v228 + 1) >= v278[0])
            {
              v233 = v229 + 1;
              if ((unint64_t)(v229 + 1) > 0x38E38E38E38E38ELL)
                goto LABEL_299;
              if ((unint64_t)(0x1C71C71C71C71C72 * ((uint64_t)(v278[0] - v228) >> 3)) > *((_QWORD *)&v228 + 1))
                v233 = 0x1C71C71C71C71C72 * ((uint64_t)(v278[0] - v228) >> 3);
              if (0x8E38E38E38E38E39 * ((uint64_t)(v278[0] - v228) >> 3) >= 0x1C71C71C71C71C7)
                v234 = 0x38E38E38E38E38ELL;
              else
                v234 = v233;
              v283 = v278;
              if (v234)
                v234 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v234);
              else
                v235 = 0;
              v236 = v234 + 72 * v229;
              v279 = (uint64_t *)v234;
              v280 = (uint64_t *)v236;
              v282 = (uint64_t *)(v234 + 72 * v235);
              *(_QWORD *)v236 = *v227;
              v237 = (_QWORD *)(v223 + v226);
              *(_QWORD *)(v236 + 8) = *(_QWORD *)(v223 + v226 - 24);
              *(_QWORD *)(v236 + 16) = *(_QWORD *)(v223 + v226 - 16);
              *(_QWORD *)(v236 + 24) = *(_QWORD *)(v223 + v226 - 8);
              *(_OWORD *)v227 = 0u;
              *(_OWORD *)(v223 + v226 - 16) = 0u;
              *(_QWORD *)(v236 + 32) = *(_QWORD *)(v223 + v226);
              *(_QWORD *)(v236 + 40) = *(_QWORD *)(v223 + v226 + 8);
              *v237 = 0;
              v237[1] = 0;
              v238 = *(_OWORD *)(v223 + v226 + 16);
              *(_BYTE *)(v236 + 64) = *(_BYTE *)(v223 + v226 + 32);
              *(_OWORD *)(v236 + 48) = v238;
              v281 = (uint64_t *)(v236 + 72);
              std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer((uint64_t *)&v277, &v279);
              v232 = *((_QWORD *)&v277 + 1);
              std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
            }
            else
            {
              **((_QWORD **)&v228 + 1) = *v227;
              v230 = (_QWORD *)(v223 + v226);
              *(_OWORD *)(*((_QWORD *)&v228 + 1) + 8) = *(_OWORD *)(v223 + v226 - 24);
              *(_QWORD *)(*((_QWORD *)&v228 + 1) + 24) = *(_QWORD *)(v223 + v226 - 8);
              *(_OWORD *)v227 = 0u;
              *(_OWORD *)(v223 + v226 - 16) = 0u;
              *(_OWORD *)(*((_QWORD *)&v228 + 1) + 32) = *(_OWORD *)(v223 + v226);
              *v230 = 0;
              v230[1] = 0;
              v231 = *(_OWORD *)(v223 + v226 + 16);
              *(_BYTE *)(*((_QWORD *)&v228 + 1) + 64) = *(_BYTE *)(v223 + v226 + 32);
              *(_OWORD *)(*((_QWORD *)&v228 + 1) + 48) = v231;
              v232 = *((_QWORD *)&v228 + 1) + 72;
            }
            *((_QWORD *)&v277 + 1) = v232;
            v223 = *a1;
            v219 = (_QWORD *)a1[1];
          }
          ++v225;
          v226 += 72;
          --v224;
        }
        while (v225 < 0x8E38E38E38E38E39 * (((uint64_t)v219 - v223) >> 3));
        v2 = v260;
        v44 = v266;
      }
      goto LABEL_266;
    }
LABEL_299:
    abort();
  }
  v221 = 0;
  v277 = 0uLL;
  v223 = (uint64_t)v219;
  v278[0] = 0;
LABEL_266:
  v239 = a1[3];
  v240 = a1[4];
  while (v239 != v240)
  {
    v241 = *(_QWORD **)v239;
    v242 = *(_QWORD **)(v239 + 8);
    while (v241 != v242)
    {
      *v241 += *((_QWORD *)v221 + *v241);
      v241 += 2;
    }
    v239 += 24;
  }
  v243 = (_QWORD *)a1[6];
  v244 = (_QWORD *)a1[7];
  while (v243 != v244)
  {
    *v243 += *((_QWORD *)v221 + *v243);
    ++v243;
  }
  if (v223)
  {
    if (v219 != (_QWORD *)v223)
    {
      do
        v219 = (_QWORD *)std::deque<unsigned long>::~deque[abi:nn180100](v219 - 9);
      while (v219 != (_QWORD *)v223);
      v219 = (_QWORD *)*a1;
    }
    a1[1] = v223;
    operator delete(v219);
  }
  *(_OWORD *)a1 = v277;
  a1[2] = v278[0];
  v278[0] = 0;
  v277 = 0uLL;
  v279 = (uint64_t *)&v277;
  std::vector<re::pathprocessing::ContinuousEdge>::__destroy_vector::operator()[abi:nn180100]((void ***)&v279);
  if (v221)
    operator delete(v221);
  v245 = a1[3];
  if (a1[4] != v245)
  {
    v246 = 0;
    do
    {
      v247 = (uint64_t *)(v245 + 24 * v246);
      v248 = *v247;
      v249 = v247[1];
      v250 = 126 - 2 * __clz((uint64_t)(v249 - *v247) >> 4);
      v55 = v249 == *v247;
      v279 = a1;
      v280 = v2;
      if (v55)
        v251 = 0;
      else
        v251 = v250;
      std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,false>(v248, v249, &v279, v251, 1);
      v252 = *v247;
      v253 = v247[1];
      if (*v247 != v253)
      {
        v254 = *a1;
        do
        {
          *(_QWORD *)(v254 + 72 * *(_QWORD *)v252 + 8 * *(unsigned int *)(v252 + 8) + 48) = v246;
          v252 += 16;
        }
        while (v252 != v253);
      }
      ++v246;
      v245 = a1[3];
    }
    while (v246 < 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v245) >> 3));
  }
LABEL_291:
  v255 = (char *)v44 - (char *)v43;
  if ((unint64_t)((char *)v44 - (char *)v43) >= 0x11)
  {
    do
    {
      v256 = *v43++;
      operator delete(v256);
      v255 -= 8;
    }
    while (v255 > 0x10);
  }
  while (v43 != v44)
  {
    v257 = *v43++;
    operator delete(v257);
  }
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(v275[0]);
  return a1;
}

_QWORD *std::deque<unsigned long>::insert<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7)
{
  uint64_t *v8;
  uint64_t *v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char **v33;
  char *v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  char *v40;
  char **v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _BYTE *v47;
  uint64_t *v48;
  _BYTE *v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _BYTE *v58;
  void **v59;
  uint64_t *v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char **v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char **v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char **v90;
  char *v91;
  unint64_t v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v111;
  void *__dst[2];
  __n128 v113;
  char *v114;
  char *v115;

  v8 = a6;
  v10 = a4;
  if (a7 == a5)
    v12 = 0;
  else
    v12 = ((uint64_t)&a7[-*a6] >> 3) + (((char *)a6 - (char *)a4) << 6) - ((uint64_t)&a5[-*a4] >> 3);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = v13 >> 9;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = (char *)(v15 + 8 * (v13 >> 9));
  if (v16 == v15)
    v18 = 0;
  else
    v18 = *(_QWORD *)v17 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
  if (a3 == v18)
    v19 = 0;
  else
    v19 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v17) << 6) - ((v18 - *(_QWORD *)v17) >> 3);
  v20 = *(_QWORD *)(a1 + 40);
  v111 = v19;
  if (v19 < v20 - v19)
  {
    if (v12 > v13)
    {
      std::deque<unsigned long>::__add_front_capacity((void **)a1, v12 - v13);
      v19 = v111;
      v13 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
      v14 = v13 >> 9;
    }
    v21 = (void **)(v15 + 8 * v14);
    if (v16 == v15)
      v22 = 0;
    else
      v22 = (char *)*v21 + 8 * (v13 & 0x1FF);
    __dst[0] = (void *)(v15 + 8 * v14);
    __dst[1] = v22;
    if (v12 <= v19)
    {
      v29 = a5;
      if (!v12)
      {
LABEL_129:
        v19 = v111;
        goto LABEL_130;
      }
LABEL_57:
      v46 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)__dst, v12);
      v48 = v46;
      v49 = v47;
      v50 = (char *)__dst[1];
      if (__dst[1] != v47)
      {
        v51 = (char *)*v21;
        v52 = v46;
        v53 = v47;
        do
        {
          if (v22 == v51)
          {
            v54 = (char *)*--v21;
            v51 = v54;
            v22 = v54 + 4096;
          }
          if (v53 == (char *)*v52)
          {
            v55 = *--v52;
            v53 = (char *)(v55 + 4096);
          }
          v56 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v22 - 1) = v56;
          v22 -= 8;
          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_226130400);
        }
        while (v53 != v50);
      }
      if (v12 >= v111)
      {
        v59 = (void **)__dst[0];
      }
      else
      {
        v57 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)__dst, v111);
        v113 = *(__n128 *)__dst;
        std::__for_each_segment[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>>(v48, v49, v57, v58, (uint64_t)&v113);
        v50 = (char *)v113.n128_u64[1];
        v59 = (void **)v113.n128_u64[0];
        *(__n128 *)__dst = v113;
      }
      if (v10 == v8)
      {
        v70 = v29;
        v71 = a7;
      }
      else
      {
        v61 = (char *)*v10;
        v60 = v10 + 1;
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v29, v61 + 4096, v59, v50);
        v62 = (void **)v113.n128_u64[1];
        v63 = v114;
        if (v60 != v8)
        {
          v64 = *(char **)v113.n128_u64[1];
          do
          {
            v65 = 0;
            v66 = *v60;
            for (++v62; ; ++v62)
            {
              v67 = v64 - v63 + 4096;
              if ((4096 - 8 * v65) >> 3 >= v67 >> 3)
                v68 = v67 >> 3;
              else
                v68 = (4096 - 8 * v65) >> 3;
              if (v68)
                memmove(v63, (const void *)(v66 + 8 * v65), 8 * v68);
              v65 += v68;
              if (v65 == 512)
                break;
              v69 = (char *)*v62;
              v64 = v69;
              v63 = v69;
            }
            v63 += 8 * v68;
            v64 = (char *)*(v62 - 1);
            if (v64 + 4096 == v63)
            {
              v64 = (char *)*v62;
              v63 = (char *)*v62;
            }
            else
            {
              --v62;
            }
            ++v60;
          }
          while (v60 != v8);
        }
        v70 = (char *)*v8;
        v71 = a7;
        v59 = v62;
        v50 = v63;
      }
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v70, v71, v59, v50);
      goto LABEL_129;
    }
    if (v19 >= v12 >> 1)
    {
      v28 = v12 - v19 + ((uint64_t)&a5[-*v10] >> 3);
      if (v28 >= 1)
      {
        v10 += (unint64_t)v28 >> 9;
        goto LABEL_39;
      }
      v35 = 511 - v28;
      v36 = ~(_WORD)v35;
      v10 -= v35 >> 9;
    }
    else
    {
      if (!v19)
      {
        v10 = v8;
        v29 = a7;
        goto LABEL_49;
      }
      v28 = ((uint64_t)&a7[-*v8] >> 3) - v19;
      if (v28 >= 1)
      {
        v10 = &v8[(unint64_t)v28 >> 9];
LABEL_39:
        v29 = (char *)(*v10 + 8 * (v28 & 0x1FF));
        goto LABEL_49;
      }
      v39 = 511 - v28;
      v36 = ~(_WORD)v39;
      v10 = &v8[-(v39 >> 9)];
    }
    v29 = (char *)(*v10 + 8 * (v36 & 0x1FF));
LABEL_49:
    if (v29 != a5)
    {
      v40 = (char *)*v21;
      v41 = (char **)v10;
      v42 = v29;
      do
      {
        if (v22 == v40)
        {
          v43 = (char *)*--v21;
          v40 = v43;
          v22 = v43 + 4096;
        }
        if (v42 == *v41)
        {
          v44 = (uint64_t)*--v41;
          v42 = (char *)(v44 + 4096);
        }
        v45 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v22 - 1) = v45;
        v22 -= 8;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_226130400);
      }
      while (v42 != a5);
    }
    v12 = v19;
    if (!v19)
      goto LABEL_129;
    goto LABEL_57;
  }
  v23 = ((v16 - v15) << 6) - 1;
  if (v16 == v15)
    v23 = 0;
  v24 = v20 + v13;
  v25 = v23 - v24;
  if (v12 > v25)
  {
    std::deque<unsigned long>::__add_back_capacity((_QWORD *)a1, v12 - v25);
    v19 = v111;
    v20 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    v24 = *(_QWORD *)(a1 + 32) + v20;
  }
  v26 = (char *)(v15 + 8 * (v24 >> 9));
  if (v16 == v15)
    v27 = 0;
  else
    v27 = (char *)(*(_QWORD *)v26 + 8 * (v24 & 0x1FF));
  v30 = v20 - v19;
  if (v20 - v19 < v12)
  {
    if (v30 >= v12 >> 1)
    {
      v31 = v20 - v19 - v12 + ((uint64_t)&a7[-*v8] >> 3);
      if (v31 >= 1)
      {
        v8 += (unint64_t)v31 >> 9;
        goto LABEL_42;
      }
      v37 = 511 - v31;
      v38 = ~(_WORD)v37;
      v8 -= v37 >> 9;
    }
    else
    {
      if (!v30)
      {
        v8 = v10;
        v34 = a5;
        goto LABEL_87;
      }
      v31 = v30 + ((uint64_t)&a5[-*v10] >> 3);
      if (v31 >= 1)
      {
        v8 = &v10[(unint64_t)v31 >> 9];
LABEL_42:
        v34 = (char *)(*v8 + 8 * (v31 & 0x1FF));
        goto LABEL_87;
      }
      v72 = 511 - v31;
      v38 = ~(_WORD)v72;
      v8 = &v10[-(v72 >> 9)];
    }
    v34 = (char *)(*v8 + 8 * (v38 & 0x1FF));
LABEL_87:
    if (v34 == a7)
    {
      v32 = v27;
      v33 = (char **)v26;
    }
    else
    {
      v73 = *(char **)v26;
      v74 = v8;
      v75 = v34;
      v33 = (char **)v26;
      v32 = v27;
      do
      {
        *(_QWORD *)v32 = *(_QWORD *)v75;
        v32 += 8;
        if (v32 - v73 == 4096)
        {
          v76 = v33[1];
          ++v33;
          v73 = v76;
          v32 = v76;
        }
        v75 += 8;
        if (&v75[-*v74] == (char *)4096)
        {
          v77 = (char *)v74[1];
          ++v74;
          v75 = v77;
        }
        ++*(_QWORD *)(a1 + 40);
      }
      while (v75 != a7);
    }
    v12 = v30;
    if (v30)
      goto LABEL_97;
    goto LABEL_130;
  }
  v32 = v27;
  v33 = (char **)v26;
  v34 = a7;
  if (v12)
  {
LABEL_97:
    v78 = (uint64_t)&v27[-*(_QWORD *)v26] >> 3;
    v79 = v78 - v12;
    if ((uint64_t)(v78 - v12) < 1)
    {
      v81 = 511 - v79;
      LOWORD(v79) = ~(511 - v79);
      v80 = (char **)&v26[-8 * (v81 >> 9)];
    }
    else
    {
      v80 = (char **)&v26[8 * (v79 >> 9)];
    }
    v82 = *v80;
    v83 = &(*v80)[8 * (v79 & 0x1FF)];
    if (v83 != v27)
    {
      v84 = *v33;
      v85 = v80;
      v86 = v83;
      do
      {
        *(_QWORD *)v32 = *(_QWORD *)v86;
        v32 += 8;
        if (v32 - v84 == 4096)
        {
          v87 = v33[1];
          ++v33;
          v84 = v87;
          v32 = v87;
        }
        v86 += 8;
        if (v86 - v82 == 4096)
        {
          v88 = v85[1];
          ++v85;
          v82 = v88;
          v86 = v88;
        }
        ++*(_QWORD *)(a1 + 40);
      }
      while (v86 != v27);
    }
    if (v12 < v30)
    {
      v89 = v78 - v30;
      if (v89 < 1)
      {
        v92 = 511 - v89;
        v90 = (char **)&v26[-8 * (v92 >> 9)];
        v91 = &(*v90)[8 * (~(_WORD)v92 & 0x1FF)];
      }
      else
      {
        v90 = (char **)&v26[8 * ((unint64_t)v89 >> 9)];
        v91 = &(*v90)[8 * (v89 & 0x1FF)];
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v90, v91, v80, v83, v26, v27);
      v26 = v114;
      v27 = v115;
    }
    if (v10 == v8)
    {
      v105 = a5;
      v104 = v34;
      v106 = v26;
      v107 = v27;
    }
    else
    {
      v94 = (char *)*v8;
      v93 = v8 - 1;
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v94, v34, v26, v27);
      v95 = (char *)v113.n128_u64[1];
      v96 = v114;
      if (v93 != v10)
      {
        v97 = *(char **)v113.n128_u64[1];
        do
        {
          v98 = (_BYTE *)*v93;
          v99 = (char *)(*v93 + 4096);
          while (1)
          {
            v100 = v96 - v97;
            if ((v99 - v98) >> 3 >= v100 >> 3)
              v101 = v100 >> 3;
            else
              v101 = (v99 - v98) >> 3;
            v99 -= 8 * v101;
            v96 -= 8 * v101;
            if (v101)
              memmove(v96, v99, 8 * v101);
            if (v99 == v98)
              break;
            v102 = (char *)*((_QWORD *)v95 - 1);
            v95 -= 8;
            v97 = v102;
            v96 = v102 + 4096;
          }
          v97 = *(char **)v95;
          if ((char *)(*(_QWORD *)v95 + 4096) == v96)
          {
            v103 = (char *)*((_QWORD *)v95 + 1);
            v95 += 8;
            v97 = v103;
            v96 = v103;
          }
          --v93;
        }
        while (v93 != v10);
      }
      v104 = (char *)(*v10 + 4096);
      v105 = a5;
      v106 = v95;
      v107 = v96;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v105, v104, v106, v107);
    goto LABEL_129;
  }
LABEL_130:
  v108 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v108)
    v109 = 0;
  else
    v109 = *(_QWORD *)(v108 + 8 * (*(_QWORD *)(a1 + 32) >> 9)) + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
  v113.n128_u64[0] = v108 + 8 * (*(_QWORD *)(a1 + 32) >> 9);
  v113.n128_u64[1] = v109;
  return std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v113, v19);
}

_QWORD *std::deque<unsigned long>::insert<std::reverse_iterator<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>,0>(int64x2_t *a1, char *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char **v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char **v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char **v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  __n128 *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _BYTE *v90;
  uint64_t *v91;
  _BYTE *v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _BYTE *v101;
  char **v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v117;
  __int128 v118;
  __n128 v119;
  __int128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  _QWORD *v125;
  char *v126;

  v6 = *(_OWORD *)(a4 + 16);
  v119 = *(__n128 *)a4;
  v120 = v6;
  v7 = a5[1];
  v117 = *a5;
  v118 = v7;
  v8 = *(_QWORD *)(a4 + 24);
  v9 = *((_QWORD *)a5 + 3);
  if (v8 == v9)
    v10 = 0;
  else
    v10 = ((v8 - **(_QWORD **)(a4 + 16)) >> 3)
        + ((*(_QWORD *)(a4 + 16) - *((_QWORD *)a5 + 2)) << 6)
        - ((v9 - **((_QWORD **)a5 + 2)) >> 3);
  v11 = a1[2].u64[0];
  v12 = v11 >> 9;
  v13 = a1->i64[1];
  v14 = a1[1].i64[0];
  v15 = (char *)(v13 + 8 * (v11 >> 9));
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *(_QWORD *)v15 + 8 * (a1[2].i64[0] & 0x1FF);
  if (a3 == v16)
    v17 = 0;
  else
    v17 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v15) << 6) - ((v16 - *(_QWORD *)v15) >> 3);
  v18 = a1[2].i64[1];
  if (v17 >= v18 - v17)
  {
    v21 = ((v14 - v13) << 6) - 1;
    if (v14 == v13)
      v21 = 0;
    v22 = v18 + v11;
    v23 = v21 - v22;
    if (v10 > v23)
    {
      std::deque<unsigned long>::__add_back_capacity(a1, v10 - v23);
      v18 = a1[2].i64[1];
      v13 = a1->i64[1];
      v14 = a1[1].i64[0];
      v22 = a1[2].i64[0] + v18;
    }
    v24 = (_QWORD *)(v13 + 8 * (v22 >> 9));
    if (v14 == v13)
      v25 = 0;
    else
      v25 = (char *)(*v24 + 8 * (v22 & 0x1FF));
    v31 = *((_QWORD *)&v118 + 1);
    v30 = (_QWORD *)v118;
    v32 = v18 - v17;
    if (v10 <= v18 - v17)
    {
      v35 = v25;
      v36 = (char **)v24;
      if (!v10)
        goto LABEL_132;
LABEL_52:
      v45 = (uint64_t)&v25[-*v24] >> 3;
      v46 = v45 - v10;
      if ((uint64_t)(v45 - v10) < 1)
      {
        v48 = 511 - v46;
        LOWORD(v46) = ~(511 - v46);
        v47 = (char **)&v24[-(v48 >> 9)];
      }
      else
      {
        v47 = (char **)&v24[v46 >> 9];
      }
      v49 = *v47;
      v50 = &(*v47)[8 * (v46 & 0x1FF)];
      if (v50 != v25)
      {
        v51 = *v36;
        v52 = v47;
        v53 = v50;
        do
        {
          *(_QWORD *)v35 = *(_QWORD *)v53;
          v35 += 8;
          if (v35 - v51 == 4096)
          {
            v54 = v36[1];
            ++v36;
            v51 = v54;
            v35 = v54;
          }
          v53 += 8;
          if (v53 - v49 == 4096)
          {
            v55 = v52[1];
            ++v52;
            v49 = v55;
            v53 = v55;
          }
          ++a1[2].i64[1];
        }
        while (v53 != v25);
      }
      if (v10 < v32)
      {
        v56 = v45 - v32;
        if (v56 < 1)
        {
          v59 = 511 - v56;
          v57 = (char **)&v24[-(v59 >> 9)];
          v58 = &(*v57)[8 * (~(_WORD)v59 & 0x1FF)];
        }
        else
        {
          v57 = (char **)&v24[(unint64_t)v56 >> 9];
          v58 = &(*v57)[8 * (v56 & 0x1FF)];
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v124, v57, v58, v47, v50, v24, v25);
        v24 = v125;
        v25 = v126;
      }
      v60 = *((_QWORD *)&v120 + 1);
      if (v31 == *((_QWORD *)&v120 + 1))
        goto LABEL_132;
      v61 = v120;
      v62 = (char *)*v24;
      v63 = (uint64_t)(*((_QWORD *)&v120 + 1) - *(_QWORD *)v120) >> 3;
      v64 = *v30;
      while (1)
      {
        v65 = v25 - v62;
        v66 = (v25 - v62) >> 3;
        v67 = (v31 - v64) >> 3;
        if (v63 + ((v61 - (uint64_t)v30) << 6) - v67 >= v65 >> 3)
          v68 = v66;
        else
          v68 = v63 + ((v61 - (_QWORD)v30) << 6) - ((v31 - v64) >> 3);
        v69 = v31;
        if (v68)
        {
          v70 = v68 + v67;
          if (v68 + v67 < 1)
            v69 = v30[-((511 - v70) >> 9)] + 8 * (~(511 - (_WORD)v70) & 0x1FF);
          else
            v69 = *(_QWORD *)((char *)v30 + ((v70 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v70 & 0x1FF);
        }
        if (v31 != v69)
          break;
LABEL_83:
        if (v68)
        {
          v77 = v68 + v67;
          if (v77 < 1)
          {
            v78 = 511 - v77;
            LOWORD(v77) = ~(511 - v77);
            v30 -= v78 >> 9;
          }
          else
          {
            v30 += (unint64_t)v77 >> 9;
          }
          v64 = *v30;
          v31 = *v30 + 8 * (v77 & 0x1FF);
        }
        if (v31 == v60)
          goto LABEL_132;
        v79 = (char *)*--v24;
        v62 = v79;
        v25 = v79 + 4096;
      }
      v71 = v25 - 8;
      v72 = v64;
      v73 = v30;
      v74 = v31;
      while (1)
      {
        v74 += 8;
        if (v74 - v72 == 4096)
          break;
        v76 = v74;
        if (v74 == v72)
          goto LABEL_81;
LABEL_82:
        *(_QWORD *)v71 = *(_QWORD *)(v76 - 8);
        v71 -= 8;
        if (v74 == v69)
          goto LABEL_83;
      }
      v75 = v73[1];
      ++v73;
      v72 = v75;
LABEL_81:
      v76 = *(v73 - 1) + 4096;
      v74 = v72;
      goto LABEL_82;
    }
    if (v32 >= v10 >> 1)
    {
      v34 = v10 - (v18 - v17) + ((uint64_t)(*((_QWORD *)&v118 + 1) - *(_QWORD *)v118) >> 3);
    }
    else
    {
      v33 = *((_QWORD *)&v120 + 1);
      v30 = (_QWORD *)v120;
      if (!v32)
        goto LABEL_40;
      v34 = ((uint64_t)(*((_QWORD *)&v120 + 1) - *(_QWORD *)v120) >> 3) - v32;
    }
    if (v34 < 1)
    {
      v38 = 511 - v34;
      v30 -= v38 >> 9;
      v33 = *v30 + 8 * (~(_WORD)v38 & 0x1FF);
    }
    else
    {
      v30 += (unint64_t)v34 >> 9;
      v33 = *v30 + 8 * (v34 & 0x1FF);
    }
LABEL_40:
    if (v33 == *((_QWORD *)&v118 + 1))
    {
      v35 = v25;
      v36 = (char **)v24;
    }
    else
    {
      v39 = *v30;
      v40 = v30;
      v41 = v33;
      v36 = (char **)v24;
      v35 = v25;
      do
      {
        v42 = v41;
        if (v41 == v39)
          v42 = *(v40 - 1) + 4096;
        *(_QWORD *)v35 = *(_QWORD *)(v42 - 8);
        v35 += 8;
        if (v35 - *v36 == 4096)
        {
          v43 = v36[1];
          ++v36;
          v35 = v43;
        }
        if (v41 == v39)
        {
          v44 = *--v40;
          v39 = v44;
          v41 = v44 + 4096;
        }
        v41 -= 8;
        ++a1[2].i64[1];
      }
      while (v41 != v31);
      v31 = v33;
    }
    v10 = v32;
    if (!v32)
      goto LABEL_132;
    goto LABEL_52;
  }
  if (v10 > v11)
  {
    std::deque<unsigned long>::__add_front_capacity((void **)a1, v10 - v11);
    v11 = a1[2].u64[0];
    v13 = a1->i64[1];
    v14 = a1[1].i64[0];
    v12 = v11 >> 9;
  }
  v19 = (uint64_t *)(v13 + 8 * v12);
  if (v14 == v13)
    v20 = 0;
  else
    v20 = *v19 + 8 * (v11 & 0x1FF);
  v122.n128_u64[0] = v13 + 8 * v12;
  v122.n128_u64[1] = v20;
  v121 = v119;
  v27 = *((_QWORD *)&v120 + 1);
  v26 = (_QWORD *)v120;
  if (v17 < v10)
  {
    if (v17 >= v10 >> 1)
    {
      v37 = v17 - v10 + ((uint64_t)(*((_QWORD *)&v120 + 1) - *(_QWORD *)v120) >> 3);
      if (v37 < 1)
      {
        v80 = 511 - v37;
        v26 = (_QWORD *)(v120 - 8 * (v80 >> 9));
        v28 = *v26 + 8 * (~(_WORD)v80 & 0x1FF);
      }
      else
      {
        v26 = (_QWORD *)(v120 + 8 * ((unint64_t)v37 >> 9));
        v28 = *v26 + 8 * (v37 & 0x1FF);
      }
      v81 = &v119;
    }
    else
    {
      v28 = *((_QWORD *)&v118 + 1);
      v26 = (_QWORD *)v118;
      if (v17)
      {
        v29 = v17 + ((uint64_t)(*((_QWORD *)&v118 + 1) - *(_QWORD *)v118) >> 3);
        if (v29 < 1)
        {
          v82 = 511 - v29;
          v26 = (_QWORD *)(v118 - 8 * (v82 >> 9));
          v28 = *v26 + 8 * (~(_WORD)v82 & 0x1FF);
        }
        else
        {
          v26 = (_QWORD *)(v118 + 8 * ((unint64_t)v29 >> 9));
          v28 = *v26 + 8 * (v29 & 0x1FF);
        }
      }
      v81 = (__n128 *)&v117;
    }
    v121 = *v81;
    if (v28 != *((_QWORD *)&v120 + 1))
    {
      v83 = *v19;
      v84 = v26;
      v85 = v28;
      while (1)
      {
        if (v20 == v83)
        {
          v86 = *--v19;
          v83 = v86;
          v20 = v86 + 4096;
        }
        v85 += 8;
        if (v85 - *v84 == 4096)
          break;
        v88 = v85;
        if (v85 == *v84)
          goto LABEL_101;
LABEL_102:
        *(_QWORD *)(v20 - 8) = *(_QWORD *)(v88 - 8);
        v20 -= 8;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_226130400);
        if (v85 == v27)
        {
          v27 = v28;
          goto LABEL_104;
        }
      }
      v87 = v84[1];
      ++v84;
      v85 = v87;
LABEL_101:
      v88 = *(v84 - 1) + 4096;
      goto LABEL_102;
    }
LABEL_104:
    v10 = v17;
  }
  if (v10)
  {
    v89 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v122, v10);
    v91 = v89;
    v92 = v90;
    v93 = (char *)v122.n128_u64[1];
    if ((_BYTE *)v122.n128_u64[1] != v90)
    {
      v94 = *v19;
      v95 = v89;
      v96 = v90;
      do
      {
        if (v20 == v94)
        {
          v97 = *--v19;
          v94 = v97;
          v20 = v97 + 4096;
        }
        if (v96 == (char *)*v95)
        {
          v98 = *--v95;
          v96 = (char *)(v98 + 4096);
        }
        v99 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *(_QWORD *)(v20 - 8) = v99;
        v20 -= 8;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_226130400);
      }
      while (v96 != v93);
    }
    if (v10 >= v17)
    {
      v102 = (char **)v122.n128_u64[0];
    }
    else
    {
      v100 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v122, v17);
      v124 = v122;
      std::__for_each_segment[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>>(v91, v92, v100, v101, (uint64_t)&v124);
      v93 = (char *)v124.n128_u64[1];
      v102 = (char **)v124.n128_u64[0];
      v122 = v124;
    }
    v123 = v121;
    v103 = *((_QWORD *)&v118 + 1);
    if (v27 != *((_QWORD *)&v118 + 1))
    {
      v104 = (char *)v118;
      v105 = *v102;
      v106 = v27;
      while (1)
      {
        v107 = v105 - v93 + 4096;
        v108 = v103 - *(_QWORD *)v104;
        if (((v27 - *v26) >> 3) + (((char *)v26 - v104) << 6) - (v108 >> 3) >= v107 >> 3)
          v109 = v107 >> 3;
        else
          v109 = ((v27 - *v26) >> 3) + (((char *)v26 - v104) << 6) - (v108 >> 3);
        v124 = v123;
        if (v109)
        {
          v110 = ((v27 - *v26) >> 3) - v109;
          if (v110 < 1)
            v106 = v26[-((unint64_t)(511 - v110) >> 9)] + 8 * (~(511 - (_WORD)v110) & 0x1FF);
          else
            v106 = *(_QWORD *)((char *)v26 + (((unint64_t)v110 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v110 & 0x1FF);
        }
        while (v27 != v106)
        {
          if (v27 == *v26)
          {
            v112 = *--v26;
            v111 = (_QWORD *)(v112 + 4088);
            v27 = v112 + 4096;
          }
          else
          {
            v111 = (_QWORD *)(v27 - 8);
          }
          *(_QWORD *)v93 = *v111;
          v93 += 8;
          v27 -= 8;
        }
        v123 = v124;
        if (v106 == v103)
          break;
        v113 = v102[1];
        ++v102;
        v105 = v113;
        v27 = v106;
        v93 = v113;
      }
    }
  }
LABEL_132:
  v114 = a1->i64[1];
  if (a1[1].i64[0] == v114)
    v115 = 0;
  else
    v115 = *(_QWORD *)(v114 + 8 * ((unint64_t)a1[2].i64[0] >> 9)) + 8 * (a1[2].i64[0] & 0x1FF);
  v124.n128_u64[0] = v114 + 8 * ((unint64_t)a1[2].i64[0] >> 9);
  v124.n128_u64[1] = v115;
  return std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v124, v17);
}

void std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(*a1);
    std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

char *std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::__emplace_unique_key_args<re::Vector2<float>,std::piecewise_construct_t const&,std::tuple<re::Vector2<float> const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, float a3, float a4)
{
  float *v6;
  uint64_t **v7;
  char *v8;
  float v9;
  float v10;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;

  v7 = a1 + 1;
  v6 = (float *)a1[1];
  if (!v6)
  {
    v8 = (char *)(a1 + 1);
    goto LABEL_17;
  }
  do
  {
    while (1)
    {
      v8 = (char *)v6;
      v9 = v6[8];
      if (v9 <= a3)
        break;
LABEL_5:
      v6 = *(float **)v6;
      v7 = (uint64_t **)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_17;
    }
    if (v9 == a3)
    {
      v10 = v6[9];
      if (v10 > a4)
        goto LABEL_5;
      if (v9 >= a3 && v10 >= a4)
        return v8;
    }
    else if (v9 >= a3)
    {
      return v8;
    }
    v6 = (float *)*((_QWORD *)v6 + 1);
  }
  while (v6);
  v7 = (uint64_t **)(v8 + 8);
LABEL_17:
  v12 = v8;
  v8 = (char *)operator new(0x48uLL);
  *((_QWORD *)v8 + 4) = *a2;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = v12;
  *v7 = (uint64_t *)v8;
  v13 = (uint64_t *)**a1;
  v14 = (uint64_t *)v8;
  if (v13)
  {
    *a1 = v13;
    v14 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__split_buffer<unsigned long *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,false>(uint64_t result, unint64_t a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t **v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t j;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  BOOL v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t i;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  int v95;
  unint64_t *v96;
  int64_t v97;
  _QWORD *v98;
  unint64_t v99;
  int *v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  int v115;
  int v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t **v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  int *v137;
  uint64_t v138;
  int v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int *v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  int64_t v167;
  uint64_t *v168;
  unint64_t *v169;
  uint64_t *v170;
  _QWORD *v172;
  int v173;
  uint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int8x16_t v192;
  int8x16_t v193;

  v6 = a3;
  v8 = result;
LABEL_2:
  v182 = (unint64_t *)(a2 - 16);
  v166 = (unint64_t *)(a2 - 48);
  v169 = (unint64_t *)(a2 - 32);
  v178 = a2;
  while (2)
  {
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v61 = **v6;
        v62 = (_QWORD *)(v61 + 72 * *(_QWORD *)v8);
        v63 = *v6[1];
        re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v61 + 72 * *(_QWORD *)(a2 - 16)), v63, *(_DWORD *)(a2 - 8));
        re::pathprocessing::ContinuousEdge::getIndex(&v192, v62, v63, *(_DWORD *)(v8 + 8));
        result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
        if ((_DWORD)result)
        {
          if ((_DWORD)result != -1)
            return result;
        }
        else
        {
          v161 = *(_DWORD *)(a2 - 8);
          if (v161 == *(_DWORD *)(v8 + 8))
          {
            v162 = *(_QWORD *)(a2 - 16);
            if (v161)
            {
              if (v162 <= *(_QWORD *)v8)
                return result;
            }
            else if (v162 >= *(_QWORD *)v8)
            {
              return result;
            }
          }
          else if (v161)
          {
            return result;
          }
        }
        v163 = *(_QWORD *)v8;
        *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v163;
        LODWORD(v163) = *(_DWORD *)(v8 + 8);
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v163;
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)v8, (unint64_t *)(v8 + 16), v182, **v6, v6[1]);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(v8, v8 + 16, v8 + 32, (uint64_t)v182, v6);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,0>(v8, v8 + 16, v8 + 32, v8 + 48, v182, v6);
      default:
        v180 = v8;
        if (v9 <= 383)
        {
          v64 = v8 + 16;
          v66 = v8 == a2 || v64 == a2;
          if ((a5 & 1) != 0)
          {
            if (v66)
              return result;
            v67 = 0;
            v68 = v6[1];
            v69 = **v6;
            v70 = v8;
            while (1)
            {
              v71 = v70;
              v70 = v64;
              v72 = (_QWORD *)(v69 + 72 * *(_QWORD *)v71);
              v73 = *v68;
              re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v69 + 72 * *(_QWORD *)(v71 + 16)), *v68, *(_DWORD *)(v71 + 24));
              re::pathprocessing::ContinuousEdge::getIndex(&v192, v72, v73, *(_DWORD *)(v71 + 8));
              result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
              if ((_DWORD)result)
              {
                if ((_DWORD)result != -1)
                  goto LABEL_206;
                v74 = *(_DWORD *)(v71 + 24);
              }
              else
              {
                v74 = *(_DWORD *)(v71 + 24);
                if (v74 == *(_DWORD *)(v71 + 8))
                {
                  if (v74)
                  {
                    if (*(_QWORD *)v70 <= *(_QWORD *)v71)
                      goto LABEL_206;
                  }
                  else
                  {
                    if (*(_QWORD *)v70 >= *(_QWORD *)v71)
                      goto LABEL_206;
                    v74 = 0;
                  }
                }
                else if (v74)
                {
                  goto LABEL_206;
                }
              }
              v75 = *(_QWORD *)(v71 + 16);
              *(_QWORD *)(v71 + 16) = *(_QWORD *)v71;
              *(_DWORD *)(v70 + 8) = *(_DWORD *)(v71 + 8);
              v76 = v8;
              if (v71 == v8)
                goto LABEL_205;
              v183 = v70;
              v188 = v75;
              v77 = (_QWORD *)(v69 + 72 * v75);
              v78 = v67;
              while (1)
              {
                v79 = v8 + v78;
                v80 = (_QWORD *)(v69 + 72 * *(_QWORD *)(v79 - 16));
                v81 = *v68;
                re::pathprocessing::ContinuousEdge::getIndex(&v193, v77, *v68, v74);
                re::pathprocessing::ContinuousEdge::getIndex(&v192, v80, v81, *(_DWORD *)(v79 - 8));
                result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                if ((_DWORD)result)
                {
                  if ((_DWORD)result != -1)
                    break;
                  goto LABEL_201;
                }
                if (v74 != *(_DWORD *)(v79 - 8))
                {
                  if (v74)
                  {
                    v8 = v180;
                    v76 = v180 + v78;
                    goto LABEL_204;
                  }
                  goto LABEL_201;
                }
                v82 = *(_QWORD *)(v79 - 16);
                if (v74)
                {
                  if (v188 <= v82)
                    break;
                  goto LABEL_201;
                }
                if (v188 >= v82)
                  break;
LABEL_201:
                v71 -= 16;
                v83 = v180 + v78;
                *(_QWORD *)v83 = *(_QWORD *)(v79 - 16);
                v84 = *(_DWORD *)(v79 - 8);
                v8 = v180;
                *(_DWORD *)(v83 + 8) = v84;
                v78 -= 16;
                if (!v78)
                {
                  v76 = v180;
                  goto LABEL_204;
                }
              }
              v76 = v71;
              v8 = v180;
LABEL_204:
              v70 = v183;
              v75 = v188;
LABEL_205:
              *(_QWORD *)v76 = v75;
              *(_DWORD *)(v76 + 8) = v74;
LABEL_206:
              v64 = v70 + 16;
              v67 += 16;
              if (v70 + 16 == v178)
                return result;
            }
          }
          if (v66)
            return result;
          v150 = v6[1];
          v151 = **v6;
          while (1)
          {
            v152 = v8;
            v8 = v64;
            v153 = (_QWORD *)(v151 + 72 * *(_QWORD *)v152);
            v154 = *v150;
            re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v151 + 72 * *(_QWORD *)(v152 + 16)), *v150, *(_DWORD *)(v152 + 24));
            re::pathprocessing::ContinuousEdge::getIndex(&v192, v153, v154, *(_DWORD *)(v152 + 8));
            result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
            if ((_DWORD)result)
            {
              if ((_DWORD)result != -1)
                goto LABEL_339;
              v155 = *(_DWORD *)(v152 + 24);
            }
            else
            {
              v155 = *(_DWORD *)(v152 + 24);
              if (v155 == *(_DWORD *)(v152 + 8))
              {
                if (v155)
                {
                  if (*(_QWORD *)v8 <= *(_QWORD *)v152)
                    goto LABEL_339;
                }
                else
                {
                  if (*(_QWORD *)v8 >= *(_QWORD *)v152)
                    goto LABEL_339;
                  v155 = 0;
                }
              }
              else if (v155)
              {
                goto LABEL_339;
              }
            }
            v181 = v8;
            v156 = *(_QWORD *)v8;
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    v157 = v152;
                    *(_QWORD *)(v152 + 16) = *(_QWORD *)v152;
                    *(_DWORD *)(v152 + 24) = *(_DWORD *)(v152 + 8);
                    v158 = *(_QWORD *)(v152 - 16);
                    v152 -= 16;
                    v159 = *v150;
                    re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v151 + 72 * v156), *v150, v155);
                    re::pathprocessing::ContinuousEdge::getIndex(&v192, (_QWORD *)(v151 + 72 * v158), v159, *(_DWORD *)(v157 - 8));
                    result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                    if (!(_DWORD)result)
                      break;
                    if ((_DWORD)result != -1)
                      goto LABEL_338;
                  }
                  if (v155 == *(_DWORD *)(v157 - 8))
                    break;
                  if (v155)
                    goto LABEL_338;
                }
                v160 = *(_QWORD *)(v157 - 16);
                if (!v155)
                  break;
                if (v156 <= v160)
                  goto LABEL_338;
              }
            }
            while (v156 < v160);
LABEL_338:
            *(_QWORD *)v157 = v156;
            *(_DWORD *)(v157 + 8) = v155;
            a2 = v178;
            v8 = v181;
LABEL_339:
            v64 = v8 + 16;
            if (v8 + 16 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v8 == a2)
            return result;
          v85 = (v10 - 2) >> 1;
          v164 = *v6;
          v176 = v6[1];
          v86 = v85;
          while (1)
          {
            v87 = v86;
            if (v85 < v86)
              goto LABEL_263;
            v88 = (2 * v86) | 1;
            v89 = v8 + 16 * v88;
            v90 = 2 * v86 + 2;
            v91 = *v164;
            v92 = *v176;
            v167 = v86;
            v189 = *v164;
            if (v90 >= (uint64_t)v10)
              goto LABEL_215;
            v93 = (_QWORD *)(v91 + 72 * *(_QWORD *)v89);
            v94 = (_QWORD *)(v91 + 72 * *(_QWORD *)(v89 + 16));
            re::pathprocessing::ContinuousEdge::getIndex(&v193, v93, v92, *(_DWORD *)(v89 + 8));
            re::pathprocessing::ContinuousEdge::getIndex(&v192, v94, v92, *(_DWORD *)(v89 + 24));
            v95 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
            if (!v95)
              break;
            v87 = v167;
            v91 = v189;
            if (v95 == -1)
              goto LABEL_214;
LABEL_215:
            v96 = (unint64_t *)(v8 + 16 * v87);
            v97 = v87;
            v98 = (_QWORD *)(v91 + 72 * *v96);
            re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v91 + 72 * *(_QWORD *)v89), v92, *(_DWORD *)(v89 + 8));
            v99 = v8 + 16 * v97;
            v101 = *(_DWORD *)(v99 + 8);
            v100 = (int *)(v99 + 8);
            re::pathprocessing::ContinuousEdge::getIndex(&v192, v98, v92, v101);
            result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
            if ((_DWORD)result)
            {
              v87 = v167;
              v85 = (v10 - 2) >> 1;
              if ((_DWORD)result == -1)
                goto LABEL_263;
              v184 = *v100;
              v102 = *(_DWORD *)(v89 + 8);
            }
            else
            {
              v102 = *(_DWORD *)(v89 + 8);
              v184 = *v100;
              v85 = (v10 - 2) >> 1;
              if (v102 == *v100)
              {
                v103 = *(_QWORD *)v89;
                v104 = *v96;
                if (v102)
                {
                  v184 = *(_DWORD *)(v89 + 8);
                  v105 = v103 > v104;
                  v87 = v167;
                  if (v105)
                    goto LABEL_263;
                }
                else
                {
                  v44 = v103 >= v104;
                  v87 = v167;
                  if (!v44)
                    goto LABEL_263;
                  v102 = 0;
                  v184 = 0;
                }
              }
              else
              {
                v87 = v167;
                if (!v102)
                  goto LABEL_263;
              }
            }
            v108 = *v96;
            *v96 = *(_QWORD *)v89;
            *v100 = v102;
            v165 = v108;
            if (v85 < v88)
            {
              v109 = v184;
              goto LABEL_262;
            }
            v172 = (_QWORD *)(v91 + 72 * v108);
            while (1)
            {
              v110 = v89;
              v111 = 2 * v88;
              v88 = (2 * v88) | 1;
              v89 = v8 + 16 * v88;
              v112 = v111 + 2;
              v113 = *v176;
              if (v111 + 2 >= (uint64_t)v10)
                goto LABEL_241;
              v114 = (_QWORD *)(v189 + 72 * *(_QWORD *)(v89 + 16));
              re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v189 + 72 * *(_QWORD *)v89), *v176, *(_DWORD *)(v89 + 8));
              re::pathprocessing::ContinuousEdge::getIndex(&v192, v114, v113, *(_DWORD *)(v89 + 24));
              v115 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
              if (v115)
              {
                v8 = v180;
                v85 = (v10 - 2) >> 1;
                if (v115 != -1)
                  goto LABEL_241;
LABEL_240:
                v89 += 16;
                v88 = v112;
                goto LABEL_241;
              }
              v118 = *(_DWORD *)(v89 + 8);
              if (v118 == *(_DWORD *)(v89 + 24))
              {
                v119 = *(_QWORD *)(v89 + 16);
                v8 = v180;
                v85 = (v10 - 2) >> 1;
                if (v118)
                {
                  if (*(_QWORD *)v89 > v119)
                    goto LABEL_240;
                }
                else if (*(_QWORD *)v89 < v119)
                {
                  goto LABEL_240;
                }
              }
              else
              {
                v8 = v180;
                v85 = (v10 - 2) >> 1;
                if (!v118)
                  goto LABEL_240;
              }
LABEL_241:
              re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v189 + 72 * *(_QWORD *)v89), v113, *(_DWORD *)(v89 + 8));
              v109 = v184;
              re::pathprocessing::ContinuousEdge::getIndex(&v192, v172, v113, v184);
              result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
              if ((_DWORD)result)
              {
                if ((_DWORD)result == -1)
                  break;
                v116 = *(_DWORD *)(v89 + 8);
                goto LABEL_257;
              }
              v116 = *(_DWORD *)(v89 + 8);
              if (v116 != v184)
              {
                if (!v116)
                  break;
                goto LABEL_257;
              }
              v117 = *(_QWORD *)v89;
              if (v116)
              {
                v116 = v184;
                if (v117 > v165)
                  break;
                goto LABEL_257;
              }
              v116 = v184;
              if (v117 < v165)
                break;
LABEL_257:
              *(_QWORD *)v110 = *(_QWORD *)v89;
              *(_DWORD *)(v110 + 8) = v116;
              if (v85 < v88)
                goto LABEL_262;
            }
            v89 = v110;
LABEL_262:
            v87 = v167;
            *(_QWORD *)v89 = v165;
            *(_DWORD *)(v89 + 8) = v109;
LABEL_263:
            v86 = v87 - 1;
            if (!v87)
            {
              v120 = (unint64_t)v9 >> 4;
              v121 = a3;
              v168 = *a3;
              v170 = a3[1];
              v122 = v178;
              while (1)
              {
                v123 = 0;
                v177 = *(_QWORD *)v8;
                v179 = v122;
                v173 = *(_DWORD *)(v8 + 8);
                v185 = v121[1];
                v190 = *v121;
                v124 = v8;
                do
                {
                  v125 = v124;
                  v124 += 16 * (v123 + 1);
                  v126 = 2 * v123;
                  v123 = (2 * v123) | 1;
                  v127 = v126 + 2;
                  if (v126 + 2 >= v120)
                    goto LABEL_272;
                  v128 = (_QWORD *)(*v190 + 72 * *(_QWORD *)(v124 + 16));
                  v129 = *v185;
                  re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(*v190 + 72 * *(_QWORD *)v124), *v185, *(_DWORD *)(v124 + 8));
                  re::pathprocessing::ContinuousEdge::getIndex(&v192, v128, v129, *(_DWORD *)(v124 + 24));
                  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                  if ((_DWORD)result)
                  {
                    if ((_DWORD)result != -1)
                      goto LABEL_272;
LABEL_271:
                    v124 += 16;
                    v123 = v127;
                    goto LABEL_272;
                  }
                  v130 = *(_DWORD *)(v124 + 8);
                  if (v130 == *(_DWORD *)(v124 + 24))
                  {
                    v131 = *(_QWORD *)(v124 + 16);
                    if (v130)
                    {
                      if (*(_QWORD *)v124 > v131)
                        goto LABEL_271;
                    }
                    else if (*(_QWORD *)v124 < v131)
                    {
                      goto LABEL_271;
                    }
                  }
                  else if (!v130)
                  {
                    goto LABEL_271;
                  }
LABEL_272:
                  *(_QWORD *)v125 = *(_QWORD *)v124;
                  *(_DWORD *)(v125 + 8) = *(_DWORD *)(v124 + 8);
                }
                while (v123 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
                if (v124 == v179 - 16)
                {
                  *(_QWORD *)v124 = v177;
                  *(_DWORD *)(v124 + 8) = v173;
                  goto LABEL_311;
                }
                *(_QWORD *)v124 = *(_QWORD *)(v179 - 16);
                *(_DWORD *)(v124 + 8) = *(_DWORD *)(v179 - 8);
                *(_QWORD *)(v179 - 16) = v177;
                *(_DWORD *)(v179 - 8) = v173;
                v132 = v124 - v180 + 16;
                if (v132 >= 17)
                {
                  v133 = ((unint64_t)v132 >> 4) - 2;
                  v134 = v133 >> 1;
                  v135 = v180 + 16 * (v133 >> 1);
                  v186 = v120;
                  v191 = *v168;
                  v136 = (_QWORD *)(*v168 + 72 * *(_QWORD *)v124);
                  v137 = (int *)(v135 + 8);
                  v138 = *v170;
                  re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(*v168 + 72 * *(_QWORD *)v135), *v170, *(_DWORD *)(v135 + 8));
                  re::pathprocessing::ContinuousEdge::getIndex(&v192, v136, v138, *(_DWORD *)(v124 + 8));
                  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                  if ((_DWORD)result)
                  {
                    v120 = v186;
                    if ((_DWORD)result != -1)
                      goto LABEL_311;
                    v139 = *(_DWORD *)(v124 + 8);
                    v140 = *v137;
                  }
                  else
                  {
                    v140 = *v137;
                    v139 = *(_DWORD *)(v124 + 8);
                    if (*v137 == v139)
                    {
                      v141 = *(_QWORD *)v135;
                      v142 = *(_QWORD *)v124;
                      v120 = v186;
                      if (v140)
                      {
                        v139 = *v137;
                        if (v141 <= v142)
                          goto LABEL_311;
                      }
                      else
                      {
                        if (v141 >= v142)
                          goto LABEL_311;
                        v140 = 0;
                        v139 = 0;
                      }
                    }
                    else
                    {
                      v120 = v186;
                      if (v140)
                        goto LABEL_311;
                    }
                  }
                  v143 = *(_QWORD *)v124;
                  *(_QWORD *)v124 = *(_QWORD *)v135;
                  *(_DWORD *)(v124 + 8) = v140;
                  if (v133 < 2)
                    goto LABEL_310;
                  while (1)
                  {
                    v144 = v135;
                    v145 = v134 - 1;
                    v134 = (v134 - 1) >> 1;
                    v135 = v180 + 16 * v134;
                    v146 = (int *)(v135 + 8);
                    v147 = *v170;
                    re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v191 + 72 * *(_QWORD *)v135), *v170, *(_DWORD *)(v135 + 8));
                    re::pathprocessing::ContinuousEdge::getIndex(&v192, (_QWORD *)(v191 + 72 * v143), v147, v139);
                    result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                    if ((_DWORD)result)
                    {
                      if ((_DWORD)result != -1)
                        goto LABEL_309;
                      v148 = *v146;
                    }
                    else
                    {
                      v148 = *v146;
                      if (*v146 == v139)
                      {
                        v149 = *(_QWORD *)v135;
                        if (v148)
                        {
                          v148 = v139;
                          if (v149 <= v143)
                            goto LABEL_309;
                        }
                        else
                        {
                          v148 = v139;
                          if (v149 >= v143)
                          {
LABEL_309:
                            v135 = v144;
LABEL_310:
                            *(_QWORD *)v135 = v143;
                            *(_DWORD *)(v135 + 8) = v139;
                            v120 = v186;
                            break;
                          }
                        }
                      }
                      else if (v148)
                      {
                        goto LABEL_309;
                      }
                    }
                    *(_QWORD *)v144 = *(_QWORD *)v135;
                    *(_DWORD *)(v144 + 8) = v148;
                    if (v145 <= 1)
                      goto LABEL_310;
                  }
                }
LABEL_311:
                v122 = v179 - 16;
                v105 = v120-- <= 2;
                v8 = v180;
                v121 = a3;
                if (v105)
                  return result;
              }
            }
          }
          v106 = *(_DWORD *)(v89 + 8);
          if (v106 == *(_DWORD *)(v89 + 24))
          {
            v107 = *(_QWORD *)(v89 + 16);
            v91 = v189;
            if (v106)
            {
              v87 = v167;
              if (*(_QWORD *)v89 <= v107)
                goto LABEL_215;
            }
            else
            {
              v87 = v167;
              if (*(_QWORD *)v89 >= v107)
                goto LABEL_215;
            }
          }
          else
          {
            v87 = v167;
            v91 = v189;
            if (v106)
              goto LABEL_215;
          }
LABEL_214:
          v89 += 16;
          v88 = v90;
          goto LABEL_215;
        }
        v11 = v8 + 16 * (v10 >> 1);
        v12 = v6[1];
        v13 = **v6;
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v8 + 16 * (v10 >> 1)), (unint64_t *)v8, v182, v13, v12);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)v8, (unint64_t *)(v8 + 16 * (v10 >> 1)), v182, v13, v12);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v8 + 16), (unint64_t *)(v11 - 16), v169, **v6, v6[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v8 + 32), (unint64_t *)(v8 + 16 + 16 * (v10 >> 1)), v166, **v6, v6[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v11 - 16), (unint64_t *)v11, (unint64_t *)(v8 + 16 + 16 * (v10 >> 1)), **v6, v6[1]);
          v14 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v14;
          LODWORD(v14) = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v11 + 8);
          *(_DWORD *)(v11 + 8) = v14;
        }
        v175 = a4 - 1;
        v15 = v6[1];
        v16 = **v6;
        v187 = v15;
        v17 = *v15;
        if ((a5 & 1) == 0)
        {
          v18 = (_QWORD *)(v16 + 72 * *(_QWORD *)v8);
          re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v16 + 72 * *(_QWORD *)(v8 - 16)), *v15, *(_DWORD *)(v8 - 8));
          re::pathprocessing::ContinuousEdge::getIndex(&v192, v18, v17, *(_DWORD *)(v8 + 8));
          v19 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
          if (v19)
          {
            if (v19 == -1)
              goto LABEL_12;
          }
          else
          {
            v46 = *(_DWORD *)(v8 - 8);
            if (v46 == *(_DWORD *)(v8 + 8))
            {
              v47 = *(_QWORD *)(v8 - 16);
              if (v46)
              {
                if (v47 > *(_QWORD *)v8)
                  goto LABEL_12;
              }
              else if (v47 < *(_QWORD *)v8)
              {
                goto LABEL_12;
              }
            }
            else if (!v46)
            {
              goto LABEL_12;
            }
          }
          v48 = *(_QWORD *)v8;
          v49 = *(_DWORD *)(v8 + 8);
          v50 = (_QWORD *)(v16 + 72 * *(_QWORD *)v8);
          v51 = (_QWORD *)(v16 + 72 * *(_QWORD *)(v178 - 16));
          re::pathprocessing::ContinuousEdge::getIndex(&v193, v50, v17, v49);
          re::pathprocessing::ContinuousEdge::getIndex(&v192, v51, v17, *(_DWORD *)(v178 - 8));
          result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
          if ((_DWORD)result)
          {
            if ((_DWORD)result != -1)
              goto LABEL_91;
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_110:
                  while (1)
                  {
                    v53 = *(_QWORD *)(v8 + 16);
                    v8 += 16;
                    re::pathprocessing::ContinuousEdge::getIndex(&v193, v50, v17, v49);
                    re::pathprocessing::ContinuousEdge::getIndex(&v192, (_QWORD *)(v16 + 72 * v53), v17, *(_DWORD *)(v8 + 8));
                    result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                    if (!(_DWORD)result)
                      break;
                    if ((_DWORD)result == -1)
                      goto LABEL_120;
                  }
                  if (v49 == *(_DWORD *)(v8 + 8))
                    break;
                  if (!v49)
                    goto LABEL_120;
                }
                if (!v49)
                  break;
                if (v48 > *(_QWORD *)v8)
                  goto LABEL_120;
              }
            }
            while (v48 >= *(_QWORD *)v8);
          }
          else
          {
            if (v49 == *(_DWORD *)(v178 - 8))
            {
              if (v49)
              {
                if (v48 > *v182)
                  goto LABEL_110;
              }
              else if (v48 < *v182)
              {
                goto LABEL_110;
              }
            }
            else if (!v49)
            {
              goto LABEL_110;
            }
LABEL_91:
            while (1)
            {
              v8 += 16;
              if (v8 >= v178)
                break;
              v52 = (_QWORD *)(v16 + 72 * *(_QWORD *)v8);
              re::pathprocessing::ContinuousEdge::getIndex(&v193, v50, v17, v49);
              re::pathprocessing::ContinuousEdge::getIndex(&v192, v52, v17, *(_DWORD *)(v8 + 8));
              result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
              if ((_DWORD)result)
              {
                if ((_DWORD)result == -1)
                  break;
              }
              else if (v49 == *(_DWORD *)(v8 + 8))
              {
                if (v49)
                {
                  if (v48 > *(_QWORD *)v8)
                    break;
                }
                else if (v48 < *(_QWORD *)v8)
                {
                  break;
                }
              }
              else if (!v49)
              {
                break;
              }
            }
          }
LABEL_120:
          i = v178;
          if (v8 < v178)
          {
            for (i = (unint64_t)v182; ; i -= 16)
            {
              v55 = (_QWORD *)(v16 + 72 * *(_QWORD *)i);
              re::pathprocessing::ContinuousEdge::getIndex(&v193, v50, v17, v49);
              re::pathprocessing::ContinuousEdge::getIndex(&v192, v55, v17, *(_DWORD *)(i + 8));
              result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
              if ((_DWORD)result)
              {
                if ((_DWORD)result != -1)
                  break;
              }
              else if (v49 == *(_DWORD *)(i + 8))
              {
                if (v49)
                {
                  if (v48 <= *(_QWORD *)i)
                    break;
                }
                else if (v48 >= *(_QWORD *)i)
                {
                  break;
                }
              }
              else if (v49)
              {
                break;
              }
            }
          }
LABEL_154:
          while (v8 < i)
          {
            v56 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)i;
            *(_QWORD *)i = v56;
            LODWORD(v56) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(i + 8);
            *(_DWORD *)(i + 8) = v56;
            v57 = *v187;
            do
            {
              while (1)
              {
                while (1)
                {
                  v58 = *(_QWORD *)(v8 + 16);
                  v8 += 16;
                  re::pathprocessing::ContinuousEdge::getIndex(&v193, v50, v57, v49);
                  re::pathprocessing::ContinuousEdge::getIndex(&v192, (_QWORD *)(v16 + 72 * v58), v57, *(_DWORD *)(v8 + 8));
                  v59 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                  if (!v59)
                    break;
                  if (v59 == -1)
                    goto LABEL_144;
                }
                if (v49 != *(_DWORD *)(v8 + 8))
                  break;
                if (v49)
                {
                  if (v48 > *(_QWORD *)v8)
                    goto LABEL_144;
                }
                else if (v48 < *(_QWORD *)v8)
                {
                  goto LABEL_144;
                }
              }
            }
            while (v49);
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_144:
                  while (1)
                  {
                    v60 = *(_QWORD *)(i - 16);
                    i -= 16;
                    re::pathprocessing::ContinuousEdge::getIndex(&v193, v50, v57, v49);
                    re::pathprocessing::ContinuousEdge::getIndex(&v192, (_QWORD *)(v16 + 72 * v60), v57, *(_DWORD *)(i + 8));
                    result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                    if (!(_DWORD)result)
                      break;
                    if ((_DWORD)result != -1)
                      goto LABEL_154;
                  }
                  if (v49 == *(_DWORD *)(i + 8))
                    break;
                  if (v49)
                    goto LABEL_154;
                }
                if (!v49)
                  break;
                if (v48 <= *(_QWORD *)i)
                  goto LABEL_154;
              }
            }
            while (v48 < *(_QWORD *)i);
          }
          if (v8 - 16 != v180)
          {
            *(_QWORD *)v180 = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v180 + 8) = *(_DWORD *)(v8 - 8);
          }
          a5 = 0;
          *(_QWORD *)(v8 - 16) = v48;
          *(_DWORD *)(v8 - 8) = v49;
          a4 = v175;
          a2 = v178;
          v6 = a3;
          continue;
        }
LABEL_12:
        v20 = 0;
        v21 = *(_QWORD *)v8;
        v22 = *(_DWORD *)(v8 + 8);
        v23 = (_QWORD *)(v16 + 72 * *(_QWORD *)v8);
        while (1)
        {
          v24 = v8 + v20;
          re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v16 + 72 * *(_QWORD *)(v8 + v20 + 16)), v17, *(_DWORD *)(v8 + v20 + 24));
          re::pathprocessing::ContinuousEdge::getIndex(&v192, v23, v17, v22);
          v25 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
          if (v25)
          {
            if (v25 != -1)
              goto LABEL_24;
            goto LABEL_23;
          }
          v26 = *(_DWORD *)(v24 + 24);
          if (v26 == v22)
            break;
          if (v26)
            goto LABEL_24;
LABEL_23:
          v20 += 16;
        }
        v27 = *(_QWORD *)(v24 + 16);
        if (v26)
        {
          if (v27 <= v21)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (v27 < v21)
          goto LABEL_23;
LABEL_24:
        v28 = v8 + v20 + 16;
        j = (unint64_t)v182;
        if (v20)
        {
          while (1)
          {
            re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v16 + 72 * *(_QWORD *)j), v17, *(_DWORD *)(j + 8));
            re::pathprocessing::ContinuousEdge::getIndex(&v192, v23, v17, v22);
            v30 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
            if (v30)
            {
              if (v30 == -1)
                goto LABEL_53;
            }
            else
            {
              v31 = *(_DWORD *)(j + 8);
              if (v31 == v22)
              {
                if (v31)
                {
                  if (*(_QWORD *)j > v21)
                    goto LABEL_53;
                }
                else if (*(_QWORD *)j < v21)
                {
                  goto LABEL_53;
                }
              }
              else if (!v31)
              {
                goto LABEL_53;
              }
            }
            j -= 16;
          }
        }
        j = v178;
        if (v28 < v178)
        {
          for (j = (unint64_t)v182; ; j -= 16)
          {
            re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v16 + 72 * *(_QWORD *)j), v17, *(_DWORD *)(j + 8));
            re::pathprocessing::ContinuousEdge::getIndex(&v192, v23, v17, v22);
            v32 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
            if (v32)
            {
              if (v28 >= j || v32 == -1)
                break;
            }
            else
            {
              v33 = *(_DWORD *)(j + 8);
              if (v33 == v22)
              {
                v34 = *(_QWORD *)j;
                if (v33)
                {
                  if (v28 >= j || v34 > v21)
                    break;
                }
                else if (v28 >= j || v34 < v21)
                {
                  break;
                }
              }
              else if (v28 >= j || !v33)
              {
                break;
              }
            }
          }
        }
LABEL_53:
        v8 += v20 + 16;
        if (v28 < j)
        {
          v35 = j;
          do
          {
            v36 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v35;
            *(_QWORD *)v35 = v36;
            LODWORD(v36) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v35 + 8);
            *(_DWORD *)(v35 + 8) = v36;
            v37 = *v187;
            do
            {
              while (1)
              {
                while (1)
                {
                  v38 = *(_QWORD *)(v8 + 16);
                  v8 += 16;
                  re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v16 + 72 * v38), v37, *(_DWORD *)(v8 + 8));
                  re::pathprocessing::ContinuousEdge::getIndex(&v192, v23, v37, v22);
                  v39 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                  if (!v39)
                    break;
                  if (v39 != -1)
                    goto LABEL_66;
                }
                v40 = *(_DWORD *)(v8 + 8);
                if (v40 != v22)
                  break;
                if (v40)
                {
                  if (*(_QWORD *)v8 <= v21)
                    goto LABEL_66;
                }
                else if (*(_QWORD *)v8 >= v21)
                {
                  goto LABEL_66;
                }
              }
            }
            while (!v40);
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_66:
                  while (1)
                  {
                    v41 = *(_QWORD *)(v35 - 16);
                    v35 -= 16;
                    re::pathprocessing::ContinuousEdge::getIndex(&v193, (_QWORD *)(v16 + 72 * v41), v37, *(_DWORD *)(v35 + 8));
                    re::pathprocessing::ContinuousEdge::getIndex(&v192, v23, v37, v22);
                    v42 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v193, (float32x2_t *)&v192);
                    if (!v42)
                      break;
                    if (v42 == -1)
                      goto LABEL_76;
                  }
                  v43 = *(_DWORD *)(v35 + 8);
                  if (v43 == v22)
                    break;
                  if (!v43)
                    goto LABEL_76;
                }
                if (!v43)
                  break;
                if (*(_QWORD *)v35 > v21)
                  goto LABEL_76;
              }
            }
            while (*(_QWORD *)v35 >= v21);
LABEL_76:
            ;
          }
          while (v8 < v35);
        }
        if (v8 - 16 != v180)
        {
          *(_QWORD *)v180 = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v180 + 8) = *(_DWORD *)(v8 - 8);
        }
        *(_QWORD *)(v8 - 16) = v21;
        *(_DWORD *)(v8 - 8) = v22;
        v44 = v28 >= j;
        a4 = v175;
        a2 = v178;
        v6 = a3;
        if (!v44)
        {
LABEL_83:
          result = std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,false>(v180, v8 - 16, a3, v175, a5 & 1);
          a5 = 0;
          continue;
        }
        v45 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(v180, v8 - 16, a3);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(v8, v178, a3);
        if (!(_DWORD)result)
        {
          if (v45)
            continue;
          goto LABEL_83;
        }
        a2 = v8 - 16;
        v8 = v180;
        if (!v45)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t **a6)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v39;
  int8x16_t v40;
  int8x16_t v41;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(a1, a2, a3, a4, a6);
  v10 = *a5;
  v11 = a6[1];
  v12 = **a6;
  v13 = *(_QWORD *)a4;
  v14 = (_QWORD *)(v12 + 72 * *(_QWORD *)a4);
  v15 = *((_DWORD *)a5 + 2);
  v39 = v11;
  v16 = *v11;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (_QWORD *)(v12 + 72 * *a5), *v11, v15);
  v17 = *(_DWORD *)(a4 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v14, v16, v17);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
  }
  else if (v15 == v17)
  {
    if (v15)
    {
      v17 = v15;
      if (v10 <= v13)
        return result;
    }
    else
    {
      if (v10 >= v13)
        return result;
      v17 = 0;
    }
  }
  else if (v15)
  {
    return result;
  }
  *(_QWORD *)a4 = v10;
  *a5 = v13;
  *(_DWORD *)(a4 + 8) = v15;
  *((_DWORD *)a5 + 2) = v17;
  v19 = *(_QWORD *)a4;
  v20 = *(_QWORD *)a3;
  v21 = (_QWORD *)(v12 + 72 * *(_QWORD *)a3);
  v22 = *(_DWORD *)(a4 + 8);
  v23 = *v39;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (_QWORD *)(v12 + 72 * *(_QWORD *)a4), *v39, v22);
  v24 = *(_DWORD *)(a3 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v21, v23, v24);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
  }
  else if (v22 == v24)
  {
    if (v22)
    {
      v24 = v22;
      if (v19 <= v20)
        return result;
    }
    else
    {
      if (v19 >= v20)
        return result;
      v24 = 0;
    }
  }
  else if (v22)
  {
    return result;
  }
  *(_QWORD *)a3 = v19;
  *(_QWORD *)a4 = v20;
  *(_DWORD *)(a3 + 8) = v22;
  *(_DWORD *)(a4 + 8) = v24;
  v25 = *(_QWORD *)a3;
  v26 = *(_QWORD *)a2;
  v27 = (_QWORD *)(v12 + 72 * *(_QWORD *)a2);
  v28 = *(_DWORD *)(a3 + 8);
  v29 = *v39;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (_QWORD *)(v12 + 72 * *(_QWORD *)a3), *v39, v28);
  v30 = *(_DWORD *)(a2 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v27, v29, v30);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
  }
  else if (v28 == v30)
  {
    if (v28)
    {
      v30 = v28;
      if (v25 <= v26)
        return result;
    }
    else
    {
      if (v25 >= v26)
        return result;
      v30 = 0;
    }
  }
  else if (v28)
  {
    return result;
  }
  *(_QWORD *)a2 = v25;
  *(_QWORD *)a3 = v26;
  *(_DWORD *)(a2 + 8) = v28;
  *(_DWORD *)(a3 + 8) = v30;
  v31 = *(_QWORD *)a2;
  v32 = *(_QWORD *)a1;
  v33 = (_QWORD *)(v12 + 72 * *(_QWORD *)a1);
  v34 = *(_DWORD *)(a2 + 8);
  v35 = *v39;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (_QWORD *)(v12 + 72 * *(_QWORD *)a2), *v39, v34);
  v36 = *(_DWORD *)(a1 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v33, v35, v36);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
    goto LABEL_45;
  }
  if (v34 != v36)
  {
    if (v34)
      return result;
    goto LABEL_45;
  }
  if (!v34)
  {
    if (v31 >= v32)
      return result;
    v36 = 0;
    goto LABEL_45;
  }
  v36 = v34;
  if (v31 > v32)
  {
LABEL_45:
    *(_QWORD *)a1 = v31;
    *(_QWORD *)a2 = v32;
    *(_DWORD *)(a1 + 8) = v34;
    *(_DWORD *)(a2 + 8) = v36;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t result;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;

  v33 = *a2;
  v10 = (_QWORD *)(a4 + 72 * *a2);
  v32 = *a1;
  v11 = (_QWORD *)(a4 + 72 * *a1);
  v12 = *((_DWORD *)a2 + 2);
  v13 = *a5;
  re::pathprocessing::ContinuousEdge::getIndex(&v35, v10, *a5, v12);
  v14 = *((_DWORD *)a1 + 2);
  re::pathprocessing::ContinuousEdge::getIndex(&v34, v11, v13, v14);
  v15 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
  v31 = a5;
  if (!v15)
  {
    if (v12 == v14)
    {
      if (v12)
      {
        if (v33 <= v32)
          goto LABEL_3;
      }
      else if (v33 >= v32)
      {
        goto LABEL_3;
      }
    }
    else if (v12)
    {
      goto LABEL_3;
    }
LABEL_15:
    v30 = *a3;
    v19 = *((_DWORD *)a3 + 2);
    re::pathprocessing::ContinuousEdge::getIndex(&v35, (_QWORD *)(a4 + 72 * *a3), v13, v19);
    re::pathprocessing::ContinuousEdge::getIndex(&v34, v10, v13, v12);
    result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -1)
        goto LABEL_40;
    }
    else
    {
      if (v19 == v12)
      {
        if (v19)
        {
          if (v30 <= v33)
            goto LABEL_45;
        }
        else if (v30 >= v33)
        {
          v12 = 0;
          goto LABEL_45;
        }
LABEL_40:
        *a1 = v30;
        *a3 = v32;
        *((_DWORD *)a1 + 2) = v19;
        goto LABEL_57;
      }
      if (!v19)
        goto LABEL_40;
    }
LABEL_45:
    *a1 = v33;
    *a2 = v32;
    *((_DWORD *)a1 + 2) = v12;
    *((_DWORD *)a2 + 2) = v14;
    v27 = *a3;
    v28 = *((_DWORD *)a3 + 2);
    v29 = *v31;
    re::pathprocessing::ContinuousEdge::getIndex(&v35, (_QWORD *)(a4 + 72 * *a3), *v31, v28);
    re::pathprocessing::ContinuousEdge::getIndex(&v34, v11, v29, v14);
    result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
    if ((_DWORD)result)
    {
      if ((_DWORD)result != -1)
        return result;
    }
    else if (v28 == v14)
    {
      if (v28)
      {
        if (v27 <= v32)
          return result;
      }
      else
      {
        if (v27 >= v32)
          return result;
        v14 = 0;
      }
    }
    else if (v28)
    {
      return result;
    }
    *a2 = v27;
    *a3 = v32;
    *((_DWORD *)a2 + 2) = v28;
LABEL_57:
    *((_DWORD *)a3 + 2) = v14;
    return result;
  }
  if (v15 == -1)
    goto LABEL_15;
LABEL_3:
  v16 = *a3;
  v17 = *((_DWORD *)a3 + 2);
  re::pathprocessing::ContinuousEdge::getIndex(&v35, (_QWORD *)(a4 + 72 * *a3), v13, v17);
  re::pathprocessing::ContinuousEdge::getIndex(&v34, v10, v13, v12);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
  }
  else if (v17 == v12)
  {
    if (v17)
    {
      if (v16 <= v33)
        return result;
    }
    else
    {
      if (v16 >= v33)
        return result;
      v12 = 0;
    }
  }
  else if (v17)
  {
    return result;
  }
  *a2 = v16;
  *a3 = v33;
  *((_DWORD *)a2 + 2) = v17;
  *((_DWORD *)a3 + 2) = v12;
  v20 = *a2;
  v21 = (_QWORD *)(a4 + 72 * *a2);
  v22 = *a1;
  v23 = (_QWORD *)(a4 + 72 * *a1);
  v24 = *((_DWORD *)a2 + 2);
  v25 = *v31;
  re::pathprocessing::ContinuousEdge::getIndex(&v35, v21, *v31, v24);
  v26 = *((_DWORD *)a1 + 2);
  re::pathprocessing::ContinuousEdge::getIndex(&v34, v23, v25, v26);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
    goto LABEL_43;
  }
  if (v24 != v26)
  {
    if (v24)
      return result;
    goto LABEL_43;
  }
  if (!v24)
  {
    if (v20 >= v22)
      return result;
    v26 = 0;
    goto LABEL_43;
  }
  v26 = v24;
  if (v20 > v22)
  {
LABEL_43:
    *a1 = v20;
    *a2 = v22;
    *((_DWORD *)a1 + 2) = v24;
    *((_DWORD *)a2 + 2) = v26;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int8x16_t v38;
  int8x16_t v39;

  v4 = a2;
  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)(a2 - 16);
      v9 = **a3;
      v10 = *(_QWORD *)a1;
      v11 = (_QWORD *)(v9 + 72 * *(_QWORD *)a1);
      v12 = *(_DWORD *)(a2 - 8);
      v13 = *a3[1];
      re::pathprocessing::ContinuousEdge::getIndex(&v39, (_QWORD *)(v9 + 72 * v8), v13, v12);
      v14 = *(_DWORD *)(a1 + 8);
      re::pathprocessing::ContinuousEdge::getIndex(&v38, v11, v13, v14);
      v15 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v39, (float32x2_t *)&v38);
      if (v15)
      {
        if (v15 != -1)
          return 1;
      }
      else if (v12 == v14)
      {
        if (v12)
        {
          v14 = v12;
          if (v8 <= v10)
            return 1;
        }
        else
        {
          if (v8 >= v10)
            return 1;
          v14 = 0;
        }
      }
      else if (v12)
      {
        return 1;
      }
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(v4 - 16) = v10;
      *(_DWORD *)(a1 + 8) = v12;
      result = 1;
      *(_DWORD *)(v4 - 8) = v14;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16), **a3, a3[1]);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,0>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16), a3);
      return 1;
    default:
      v16 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), **a3, a3[1]);
      v17 = a1 + 48;
      if (a1 + 48 == v4)
        return 1;
      v18 = 0;
      v19 = 0;
      v36 = **a3;
      v37 = a3[1];
      v33 = v4;
      break;
  }
  while (2)
  {
    v20 = *(_QWORD *)v17;
    v21 = (_QWORD *)(v36 + 72 * *(_QWORD *)v17);
    v22 = (_QWORD *)(v36 + 72 * *(_QWORD *)v16);
    v23 = *v37;
    re::pathprocessing::ContinuousEdge::getIndex(&v39, v21, *v37, *(_DWORD *)(v17 + 8));
    re::pathprocessing::ContinuousEdge::getIndex(&v38, v22, v23, *(_DWORD *)(v16 + 8));
    v24 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v39, (float32x2_t *)&v38);
    if (v24)
    {
      if (v24 != -1)
        goto LABEL_35;
      v25 = *(_DWORD *)(v17 + 8);
    }
    else
    {
      v25 = *(_DWORD *)(v17 + 8);
      if (v25 == *(_DWORD *)(v16 + 8))
      {
        if (v25)
        {
          if (v20 <= *(_QWORD *)v16)
            goto LABEL_35;
        }
        else
        {
          if (v20 >= *(_QWORD *)v16)
            goto LABEL_35;
          v25 = 0;
        }
      }
      else if (v25)
      {
        goto LABEL_35;
      }
    }
    *(_QWORD *)v17 = *(_QWORD *)v16;
    *(_DWORD *)(v17 + 8) = *(_DWORD *)(v16 + 8);
    v26 = a1;
    if (v16 == a1)
      goto LABEL_34;
    v35 = v20;
    v34 = v19;
    v27 = v18;
    while (1)
    {
      v28 = a1 + v27;
      v29 = (_QWORD *)(v36 + 72 * *(_QWORD *)(a1 + v27 + 16));
      v30 = *v37;
      re::pathprocessing::ContinuousEdge::getIndex(&v39, v21, *v37, v25);
      re::pathprocessing::ContinuousEdge::getIndex(&v38, v29, v30, *(_DWORD *)(a1 + v27 + 24));
      v31 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v39, (float32x2_t *)&v38);
      if (v31)
      {
        if (v31 != -1)
          break;
        goto LABEL_30;
      }
      if (v25 != *(_DWORD *)(v28 + 24))
      {
        if (v25)
          break;
        goto LABEL_30;
      }
      v32 = *(_QWORD *)(v28 + 16);
      if (v25)
      {
        if (v35 <= v32)
        {
          v26 = a1 + v27 + 32;
          goto LABEL_33;
        }
        goto LABEL_30;
      }
      if (v35 >= v32)
        break;
LABEL_30:
      v16 -= 16;
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(v28 + 16);
      *(_DWORD *)(a1 + v27 + 40) = *(_DWORD *)(v28 + 24);
      v27 -= 16;
      if (v27 == -32)
      {
        v26 = a1;
        goto LABEL_33;
      }
    }
    v26 = v16;
LABEL_33:
    v4 = v33;
    v19 = v34;
    v20 = v35;
LABEL_34:
    *(_QWORD *)v26 = v20;
    *(_DWORD *)(v26 + 8) = v25;
    if (++v19 != 8)
    {
LABEL_35:
      v16 = v17;
      v18 += 16;
      v17 += 16;
      if (v17 == v4)
        return 1;
      continue;
    }
    return v17 + 16 == v4;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  int8x16_t v31;
  int8x16_t v32;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3, **a5, a5[1]);
  v8 = *(_QWORD *)a4;
  v9 = a5[1];
  v10 = **a5;
  v11 = *(_QWORD *)a3;
  v12 = (_QWORD *)(v10 + 72 * *(_QWORD *)a3);
  v13 = *(_DWORD *)(a4 + 8);
  v14 = *v9;
  re::pathprocessing::ContinuousEdge::getIndex(&v32, (_QWORD *)(v10 + 72 * *(_QWORD *)a4), *v9, v13);
  v15 = *(_DWORD *)(a3 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v31, v12, v14, v15);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v32, (float32x2_t *)&v31);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
  }
  else if (v13 == v15)
  {
    if (v13)
    {
      v15 = v13;
      if (v8 <= v11)
        return result;
    }
    else
    {
      if (v8 >= v11)
        return result;
      v15 = 0;
    }
  }
  else if (v13)
  {
    return result;
  }
  *(_QWORD *)a3 = v8;
  *(_QWORD *)a4 = v11;
  *(_DWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a4 + 8) = v15;
  v17 = *(_QWORD *)a3;
  v18 = *(_QWORD *)a2;
  v19 = (_QWORD *)(v10 + 72 * *(_QWORD *)a2);
  v20 = *(_DWORD *)(a3 + 8);
  v21 = *v9;
  re::pathprocessing::ContinuousEdge::getIndex(&v32, (_QWORD *)(v10 + 72 * *(_QWORD *)a3), *v9, v20);
  v22 = *(_DWORD *)(a2 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v31, v19, v21, v22);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v32, (float32x2_t *)&v31);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
  }
  else if (v20 == v22)
  {
    if (v20)
    {
      v22 = v20;
      if (v17 <= v18)
        return result;
    }
    else
    {
      if (v17 >= v18)
        return result;
      v22 = 0;
    }
  }
  else if (v20)
  {
    return result;
  }
  *(_QWORD *)a2 = v17;
  *(_QWORD *)a3 = v18;
  *(_DWORD *)(a2 + 8) = v20;
  *(_DWORD *)(a3 + 8) = v22;
  v23 = *(_QWORD *)a2;
  v24 = *(_QWORD *)a1;
  v25 = (_QWORD *)(v10 + 72 * *(_QWORD *)a1);
  v26 = *(_DWORD *)(a2 + 8);
  v27 = *v9;
  re::pathprocessing::ContinuousEdge::getIndex(&v32, (_QWORD *)(v10 + 72 * *(_QWORD *)a2), *v9, v26);
  v28 = *(_DWORD *)(a1 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v31, v25, v27, v28);
  result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v32, (float32x2_t *)&v31);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1)
      return result;
    goto LABEL_34;
  }
  if (v26 != v28)
  {
    if (v26)
      return result;
    goto LABEL_34;
  }
  if (!v26)
  {
    if (v23 >= v24)
      return result;
    v28 = 0;
    goto LABEL_34;
  }
  v28 = v26;
  if (v23 > v24)
  {
LABEL_34:
    *(_QWORD *)a1 = v23;
    *(_QWORD *)a2 = v24;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a2 + 8) = v28;
  }
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::HalfEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

void std::vector<re::pathprocessing::ContinuousEdge>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::deque<unsigned long>::~deque[abi:nn180100]((_QWORD *)(v4 - 72));
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<unsigned long>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t *std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 72) = *(_QWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 56) = *(_QWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v7 - 56) = 0uLL;
      v8 = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v7 - 72) = 0uLL;
      *(_QWORD *)(v6 - 40) = v8;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 24);
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v9;
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(72 * a1);
}

uint64_t std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::deque<unsigned long>::~deque[abi:nn180100]((_QWORD *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<re::pathprocessing::ContinuousVertex>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<unsigned long>::__add_front_capacity(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 6) - 1;
  if ((v6 & 0x1FF) != 0)
    v8 = (v6 >> 9) + 1;
  else
    v8 = v6 >> 9;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 9)
    v11 = v10 >> 9;
  else
    v11 = v8;
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<unsigned long *>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 511 : 512;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

_QWORD *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_76;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_76:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      v39 = (_QWORD *)a1[1];
      if (v8)
      {
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = v39;
      if ((_QWORD *)a1[2] != v39)
      {
        v57 = (_QWORD *)a1[2];
        do
          std::__split_buffer<unsigned long *>::push_front((uint64_t)__p, --v57);
        while (v57 != (_QWORD *)a1[1]);
        v39 = (_QWORD *)a1[2];
      }
      v58 = (char *)*a1;
      v59 = *(_OWORD *)__p;
      v60 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v61 = a1[3];
      v62 = a1[4];
      *(_OWORD *)a1 = v59;
      *((_OWORD *)a1 + 1) = v60;
      *(_QWORD *)&v90 = v39;
      *((_QWORD *)&v90 + 1) = v61;
      a1[4] = v62 - v38;
      if (v39 != v57)
        *(_QWORD *)&v90 = (char *)v39 + (((char *)v57 - (char *)v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v58)
        operator delete(v58);
    }
  }
}

double std::__for_each_segment[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>>(uint64_t *a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v8;
  void **v9;
  char *i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  void **v19;
  char *v20;
  double result;
  uint64_t v22;
  __int128 v23;

  if (a1 == a3)
  {
    v19 = *(void ***)a5;
    v20 = *(char **)(a5 + 8);
    v18 = a4;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v22, a2, (_BYTE *)(*a1 + 4096), *(void ***)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    v9 = *(void ***)a5;
    for (i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      v11 = 0;
      v12 = *v8;
      v14 = (char *)*v9++;
      v13 = v14;
      while (1)
      {
        v15 = v13 - i + 4096;
        if ((4096 - 8 * v11) >> 3 >= v15 >> 3)
          v16 = v15 >> 3;
        else
          v16 = (4096 - 8 * v11) >> 3;
        if (v16)
          memmove(i, (const void *)(v12 + 8 * v11), 8 * v16);
        v11 += v16;
        if (v11 == 512)
          break;
        v17 = (char *)*v9++;
        v13 = v17;
        i = v17;
      }
      i += 8 * v16;
      if ((char *)*(v9 - 1) + 4096 == i)
        i = (char *)*v9;
      else
        --v9;
      *(_QWORD *)a5 = v9;
      *(_QWORD *)(a5 + 8) = i;
    }
    a2 = (_BYTE *)*a3;
    v18 = a4;
    v19 = v9;
    v20 = i;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v22, a2, v18, v19, v20);
  result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(_QWORD *result, _BYTE *__src, _BYTE *a3, void **a4, char *__dst)
{
  void **v6;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  v8 = result;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        result = memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(__n128 *a1, char **a2, char *a3, char **a4, char *a5, _QWORD *a6, char *a7)
{
  char **v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  __n128 result;
  uint64_t v27;
  __n128 v28;

  if (a2 == a4)
  {
    v23 = a3;
    v22 = a5;
    v24 = a6;
    v25 = a7;
  }
  else
  {
    v12 = a4 - 1;
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v27, *a4, a5, a6, a7);
    v14 = (char *)v28.n128_u64[1];
    v13 = (_QWORD *)v28.n128_u64[0];
    if (v12 != a2)
    {
      v15 = *(char **)v28.n128_u64[0];
      do
      {
        v16 = *v12;
        v17 = *v12 + 4096;
        while (1)
        {
          v18 = v14 - v15;
          if ((v17 - v16) >> 3 >= v18 >> 3)
            v19 = v18 >> 3;
          else
            v19 = (v17 - v16) >> 3;
          v17 -= 8 * v19;
          v14 -= 8 * v19;
          if (v19)
            memmove(v14, v17, 8 * v19);
          if (v17 == v16)
            break;
          v20 = (char *)*--v13;
          v15 = v20;
          v14 = v20 + 4096;
        }
        v15 = (char *)*v13;
        if ((char *)(*v13 + 4096) == v14)
        {
          v21 = (char *)v13[1];
          ++v13;
          v15 = v21;
          v14 = v21;
        }
        --v12;
      }
      while (v12 != a2);
    }
    v22 = *a2 + 4096;
    v23 = a3;
    v24 = v13;
    v25 = v14;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v27, v23, v22, v24, v25);
  result = v28;
  a1->n128_u64[0] = (unint64_t)a4;
  a1->n128_u64[1] = (unint64_t)a5;
  a1[1] = result;
  return result;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a2) >> 3;
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13)
        result = memmove(a5, v11, 8 * v13);
      if (v11 == a2)
        break;
      v14 = *--v6;
      v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

BOOL re::pathprocessing::BezierUtils::lineCrossBezierHull(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  float32x2_t *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;

  v6 = a3;
  v7 = a2;
  v4 = a1 + 1;
  if (result)
  {
    if (result)
  }
  return result;
}

BOOL re::pathprocessing::`anonymous namespace'::rightToOrOnLine(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float v6;
  float32x2_t v7;
  float v8;
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  float32x2_t v13;
  unsigned __int8 v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;

  v4 = vsub_f32(*a2, *a1);
  v5 = vsub_f32(*a3, *a1);
  v6 = vmlas_n_f32((float)-v4.f32[1] * v5.f32[0], v5.f32[1], v4.f32[0]);
  v7 = vsub_f32(*a4, *a1);
  v8 = vmlas_n_f32((float)-v4.f32[1] * v7.f32[0], v7.f32[1], v4.f32[0]);
  v9 = v6 > 0.0001;
  if (v6 < -0.0001)
    v9 = 0;
  if (v9 && v8 > 0.0001 && v8 >= -0.0001)
    return 0;
  v10 = v8 < -0.0001;
  v11 = v6 < -0.0001;
  if (v6 > 0.0001)
    v11 = 1;
  if (v8 > 0.0001)
    v10 = 1;
  if (!v11 && !v10)
    return 0;
  if (v6 < -0.0001 && v8 < -0.0001)
    return 1;
  v13 = vabs_f32(v4);
  v14 = vmvn_s8((int8x8_t)vcge_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1))).u8[0];
  v15 = vadd_f32(vmul_n_f32(*a4, v6 / (float)(v6 - v8)), vmul_n_f32(*a3, 1.0 - (float)(v6 / (float)(v6 - v8))));
  v25 = v15;
  if (!v11)
  {
    if (v8 >= -0.0001)
      goto LABEL_33;
    return 1;
  }
  if (v10)
  {
    v16 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v14 & 1)));
    v17 = a1->f32[v14 & 1];
    v18 = a2->f32[v14 & 1];
    if (v17 <= v18)
      v19 = a1->f32[v14 & 1];
    else
      v19 = a2->f32[v14 & 1];
    if (v17 <= v18)
      v17 = a2->f32[v14 & 1];
    if ((float)(v19 + -0.0001) >= v16 || (float)(v17 + 0.0001) <= v16)
    {
      if (v9)
        *a3 = v15;
      else
        *a4 = v15;
    }
    return 1;
  }
  if (v6 < -0.0001)
    return 1;
LABEL_33:
  v21 = a1->f32[v14 & 1];
  v22 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v14 & 1)));
  v23 = a2->f32[v14 & 1];
  if (v21 <= v23)
    v24 = a1->f32[v14 & 1];
  else
    v24 = a2->f32[v14 & 1];
  if (v21 <= v23)
    v21 = a2->f32[v14 & 1];
  return (float)(v21 + -0.0001) > v22 && (float)(v24 + 0.0001) < v22;
}

BOOL re::pathprocessing::BezierUtils::bezierHullOverlap(float32x2_t *a1, float32x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float32x2_t v12;
  uint64_t v13;
  float32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  float32x2_t v18;
  uint64_t v19;

  v2 = (uint64_t)a1[1];
  v3 = (uint64_t)a1[2];
  v4 = (int32x2_t)vsub_f32((float32x2_t)v3, *a1);
  v5 = (int32x2_t)vsub_f32((float32x2_t)v2, *a1);
  v6 = (uint64_t)a2[1];
  v7 = (uint64_t)a2[2];
  v8 = (int32x2_t)vsub_f32((float32x2_t)v7, *a2);
  v9 = (int32x2_t)vsub_f32((float32x2_t)v6, *a2);
  v10 = vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v5, v9), vneg_f32((float32x2_t)vzip2_s32(v4, v8))), (float32x2_t)vzip2_s32(v5, v9), (float32x2_t)vzip1_s32(v4, v8));
  if ((vcgt_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).u8[0] & 1) == 0)
  {
    v18 = *a1;
    v19 = (uint64_t)a1[1];
    if (!re::pathprocessing::BezierUtils::lineCrossBezierHull(a2, (uint64_t)*a1, v2)
      && !re::pathprocessing::BezierUtils::lineCrossBezierHull(a2, v19, v3))
    {
      v14 = a2;
      v15 = v3;
      v16 = (uint64_t)v18;
      return re::pathprocessing::BezierUtils::lineCrossBezierHull(v14, v15, v16);
    }
    return 1;
  }
  v12 = *a2;
  v13 = (uint64_t)a2[1];
  if (re::pathprocessing::BezierUtils::lineCrossBezierHull(a1, (uint64_t)*a2, v6)
    || re::pathprocessing::BezierUtils::lineCrossBezierHull(a1, v13, v7))
  {
    return 1;
  }
  v14 = a1;
  v15 = v7;
  v16 = (uint64_t)v12;
  return re::pathprocessing::BezierUtils::lineCrossBezierHull(v14, v15, v16);
}

re::pathprocessing::IndexedMesh *re::pathprocessing::IndexedMesh::IndexedMesh(uint64_t a1, float32x2_t **a2, int a3)
{
  re::pathprocessing::IndexedMesh *v4;
  float32x2_t v5;
  float32x2_t v6;
  void **v7;
  void *collection_2f;
  float32x2_t *v9;
  float32x2_t *v10;
  int v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t *v20;
  float32x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  float32x2_t v32;
  unsigned int monotonic_intervals_2f;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t i;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  __int128 v55;
  re::pathprocessing::IndexedMesh *v56;
  uint64_t *v57;
  uint64_t *v58;
  __int128 v59;
  re::pathprocessing::IndexedMesh *v60;
  unint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  char *v86;
  uint64_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t *v93;
  _QWORD *v95;
  uint64_t v96;
  float32x2_t v97;
  float32x2_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  float32x2_t v107;
  void *v108;
  void *v109;
  int32x2_t v110;
  int32x2_t v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t *v114;
  void **v115;
  void **v116;
  float32x2_t v117;
  void *v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x2_t v121;
  void *v122;
  void *v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x2_t v128;
  BOOL v129;
  void **v131;
  void **v132;
  int32x2_t v136;
  int32x2_t v137;
  int32x2_t v138;
  int32x2_t v139;
  float32x2_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  void **v143;
  void **v144;
  uint64_t v145;
  uint32x2_t v146;
  unsigned __int32 v147;
  uint32x2_t v148;
  uint32x2_t v149;
  uint32x2_t v150;
  uint64_t **v151;
  uint64_t **v152;
  float v153;
  float v154;
  uint64_t *v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t *v158;
  float *v159;
  uint64_t *v160;
  float v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  float *v175;
  float *v176;
  float v177;
  _QWORD *v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  void *v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  char *v195;
  int64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  float *v206;
  int v207;
  char *v208;
  void *v209;
  char *v210;
  int64_t v211;
  unint64_t v212;
  int64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  float *v219;
  float *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t *v248;
  _QWORD *v249;
  re::pathprocessing::IndexedMesh *v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  __int128 v259;
  uint64_t *v260;
  _QWORD *v261;
  re::pathprocessing::IndexedMesh *v262;
  char *v263;
  unint64_t v264;
  uint64_t v265;
  re::pathprocessing::IndexedMesh *v266;
  char *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  __int128 v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  _QWORD *v284;
  unint64_t v285;
  unint64_t v286;
  __int128 v287;
  int64x2_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  _QWORD *v293;
  unint64_t v294;
  uint8x8_t v295;
  _QWORD *v296;
  _QWORD *j;
  unint64_t v298;
  _QWORD *v299;
  float v300;
  _BOOL8 v301;
  unint64_t v302;
  unint64_t v303;
  int8x8_t prime;
  void *v305;
  void *v306;
  uint64_t v307;
  _QWORD **v308;
  unint64_t v309;
  uint8x8_t v310;
  unint64_t v311;
  uint8x8_t v312;
  uint64_t v313;
  _QWORD *k;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  unint64_t *v327;
  unint64_t v328;
  uint8x8_t v329;
  unint64_t v330;
  _QWORD *v331;
  _QWORD *m;
  unint64_t v333;
  uint64_t v334;
  void *v335;
  unint64_t v336;
  unint64_t v337;
  char *n;
  uint64_t *v339;
  uint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  char *v343;
  _QWORD *v344;
  _QWORD *v345;
  void *v346;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  unint64_t v352;
  uint64_t v354;
  void **v355;
  float32x2_t *v356;
  uint64_t v357;
  unint64_t v358;
  re::pathprocessing::IndexedMesh *v359;
  uint64_t v360;
  uint64_t **v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  int v365;
  void *__p[2];
  __int128 v367;
  __int128 v368;
  void *v369[2];
  void *v370[2];
  float v371;
  int64x2_t v372;
  unint64_t v373;
  __n128 *v374;
  __n128 *v375;
  _BYTE v376[32];
  __int128 v377;
  uint64_t v378;

  v4 = (re::pathprocessing::IndexedMesh *)a1;
  v378 = *MEMORY[0x24BDAC8D0];
  v5 = (float32x2_t)vdup_n_s32(0x7F800000u);
  v6 = (float32x2_t)0x7F0000007FLL;
  *(float32x2_t *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0x7F0000007FLL;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  collection_2f = (void *)geom_create_collection_2f();
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    v5 = (float32x2_t)vdup_n_s32(0x7F800000u);
    do
    {
      v11 = v9->i8[0];
      if ((v11 - 76) < 2)
      {
        v14 = v9[3];
        v5 = vminnm_f32(v5, v14);
        v6 = vmaxnm_f32(v6, v14);
      }
      else if (v11 == 67)
      {
        v15 = v9[1];
        v16 = v9[2];
        v17 = vminnm_f32(vminnm_f32(v5, v15), v16);
        v18 = vmaxnm_f32(vmaxnm_f32(v6, v15), v16);
        v19 = v9[3];
        v5 = vminnm_f32(v17, v19);
        v6 = vmaxnm_f32(v18, v19);
      }
      else if (v11 == 81)
      {
        v12 = v9[1];
        v13 = v9[3];
        v5 = vminnm_f32(vminnm_f32(v5, v12), v13);
        v6 = vmaxnm_f32(vmaxnm_f32(v6, v12), v13);
      }
      v9 += 4;
    }
    while (v9 != v10);
  }
  *(float32x2_t *)v4 = v5;
  *((float32x2_t *)v4 + 1) = v6;
  v20 = *a2;
  v21 = a2[1];
  v359 = v4;
  v355 = v7;
  if (*a2 != v21)
  {
    v22 = -1;
    v23 = -1;
    v356 = v21;
    do
    {
      v24 = v20->i8[0];
      if (v24 <= 76)
      {
        if (v24 == 67)
        {
          v360 = v22;
          memset(v376, 0, 24);
          monotonic_intervals_2f = geom_cubic_bezier_find_monotonic_intervals_2f();
          v34 = monotonic_intervals_2f - 1;
          if (monotonic_intervals_2f != 1)
          {
            v35 = 0;
            do
            {
              ++v35;
              geom_cubic_bezier_extract_2f();
              geom_cubic_bezier_fit_with_quadratic_beziers_2f();
              v36 = geom_collection_size_2f();
              v37 = geom_collection_data_2f();
              if (v36)
              {
                v38 = v37;
                for (i = 0; i < v36; i += 3)
                {
                  v40 = v38 + 8 * i;
                  __p[0] = *(void **)(v40 + 8);
                  v369[0] = *(void **)(v40 + 16);
                  v23 = re::pathprocessing::IndexedMesh::addBezierTo(v4, v23, (uint64_t *)__p, (float *)v369);
                }
              }
            }
            while (v35 != v34);
          }
          v7 = v355;
          v21 = v356;
          v22 = v360;
        }
        else if (v24 == 76)
        {
          *(float32x2_t *)v376 = vsub_f32(v20[3], *(float32x2_t *)v4);
          v28 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)v4, (float *)v376);
          re::pathprocessing::IndexedMesh::addLineTo(v4, v23, v28);
          v23 = v28;
        }
      }
      else
      {
        switch(v24)
        {
          case 'Z':
            if (v23 != v22)
            {
              v30 = (uint64_t *)*((_QWORD *)v4 + 6);
              v29 = *((_QWORD *)v4 + 7);
              if ((unint64_t)v30 >= v29)
              {
                v47 = (uint64_t *)*((_QWORD *)v4 + 5);
                v48 = 0xAAAAAAAAAAAAAAABLL * (v30 - v47);
                v49 = v48 + 1;
                if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_515;
                v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v47) >> 3);
                if (2 * v50 > v49)
                  v49 = 2 * v50;
                if (v50 >= 0x555555555555555)
                  v51 = 0xAAAAAAAAAAAAAAALL;
                else
                  v51 = v49;
                if (v51)
                {
                  v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v51);
                  v47 = (uint64_t *)*((_QWORD *)v4 + 5);
                  v30 = (uint64_t *)*((_QWORD *)v4 + 6);
                }
                else
                {
                  v52 = 0;
                }
                v57 = (uint64_t *)(v51 + 24 * v48);
                *v57 = v23;
                v57[1] = -1;
                v57[2] = v22;
                v58 = v57;
                if (v30 == v47)
                {
                  v60 = v4;
                }
                else
                {
                  do
                  {
                    v59 = *(_OWORD *)(v30 - 3);
                    *(v58 - 1) = *(v30 - 1);
                    *(_OWORD *)(v58 - 3) = v59;
                    v58 -= 3;
                    v30 -= 3;
                  }
                  while (v30 != v47);
                  v60 = v4;
                  v47 = (uint64_t *)*((_QWORD *)v4 + 5);
                }
                v31 = v57 + 3;
                *((_QWORD *)v60 + 5) = v58;
                *((_QWORD *)v60 + 6) = v57 + 3;
                *((_QWORD *)v60 + 7) = v51 + 24 * v52;
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *v30 = v23;
                v30[1] = -1;
                v31 = v30 + 3;
                v30[2] = v22;
              }
              *((_QWORD *)v4 + 6) = v31;
            }
            v23 = v22;
            break;
          case 'Q':
            v32 = *(float32x2_t *)v4;
            *(float32x2_t *)v376 = vsub_f32(v20[1], *(float32x2_t *)v4);
            __p[0] = (void *)vsub_f32(v20[3], v32);
            v23 = re::pathprocessing::IndexedMesh::addBezierTo(v4, v23, (uint64_t *)v376, (float *)__p);
            break;
          case 'M':
            if (v22 != v23)
            {
              v26 = (uint64_t *)*((_QWORD *)v4 + 6);
              v25 = *((_QWORD *)v4 + 7);
              if ((unint64_t)v26 >= v25)
              {
                v41 = (uint64_t *)*((_QWORD *)v4 + 5);
                v42 = 0xAAAAAAAAAAAAAAABLL * (v26 - v41);
                v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_515;
                v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v41) >> 3);
                if (2 * v44 > v43)
                  v43 = 2 * v44;
                if (v44 >= 0x555555555555555)
                  v45 = 0xAAAAAAAAAAAAAAALL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v45);
                  v41 = (uint64_t *)*((_QWORD *)v4 + 5);
                  v26 = (uint64_t *)*((_QWORD *)v4 + 6);
                }
                else
                {
                  v46 = 0;
                }
                v53 = (uint64_t *)(v45 + 24 * v42);
                *v53 = v23;
                v53[1] = -1;
                v53[2] = v22;
                v54 = v53;
                if (v26 == v41)
                {
                  v56 = v4;
                }
                else
                {
                  do
                  {
                    v55 = *(_OWORD *)(v26 - 3);
                    *(v54 - 1) = *(v26 - 1);
                    *(_OWORD *)(v54 - 3) = v55;
                    v54 -= 3;
                    v26 -= 3;
                  }
                  while (v26 != v41);
                  v56 = v4;
                  v41 = (uint64_t *)*((_QWORD *)v4 + 5);
                }
                v27 = v53 + 3;
                *((_QWORD *)v56 + 5) = v54;
                *((_QWORD *)v56 + 6) = v53 + 3;
                *((_QWORD *)v56 + 7) = v45 + 24 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *v26 = v23;
                v26[1] = -1;
                v27 = v26 + 3;
                v26[2] = v22;
              }
              *((_QWORD *)v4 + 6) = v27;
            }
            *(float32x2_t *)v376 = vsub_f32(v20[3], *(float32x2_t *)v4);
            v23 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)v4, (float *)v376);
            v22 = v23;
            break;
        }
      }
      v20 += 4;
    }
    while (v20 != v21);
    if (v22 != v23)
    {
      v62 = (uint64_t *)*((_QWORD *)v4 + 6);
      v61 = *((_QWORD *)v4 + 7);
      if ((unint64_t)v62 >= v61)
      {
        v64 = (uint64_t *)*((_QWORD *)v4 + 5);
        v65 = 0xAAAAAAAAAAAAAAABLL * (v62 - v64);
        v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_515;
        v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)v64) >> 3);
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v66;
        if (v68)
        {
          v68 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v68);
          v64 = (uint64_t *)*((_QWORD *)v4 + 5);
          v62 = (uint64_t *)*((_QWORD *)v4 + 6);
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)(v68 + 24 * v65);
        v71 = v68 + 24 * v69;
        *v70 = v23;
        v70[1] = -1;
        v70[2] = v22;
        v63 = v70 + 3;
        if (v62 != v64)
        {
          do
          {
            v72 = *(_OWORD *)(v62 - 3);
            *(v70 - 1) = *(v62 - 1);
            *(_OWORD *)(v70 - 3) = v72;
            v70 -= 3;
            v62 -= 3;
          }
          while (v62 != v64);
          v64 = (uint64_t *)*((_QWORD *)v4 + 5);
        }
        *((_QWORD *)v4 + 5) = v70;
        *((_QWORD *)v4 + 6) = v63;
        *((_QWORD *)v4 + 7) = v71;
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v62 = v23;
        v62[1] = -1;
        v62[2] = v22;
        v63 = v62 + 3;
      }
      *((_QWORD *)v4 + 6) = v63;
    }
  }
  os_release(collection_2f);
  if (!a3)
    return v4;
  v74 = *((_QWORD *)v4 + 5);
  v73 = *((_QWORD *)v4 + 6);
  v75 = v73 - v74;
  if (v73 == v74)
  {
    v343 = 0;
    n = 0;
    v168 = 0uLL;
    v363 = 0u;
    v364 = 0u;
    v365 = 1065353216;
LABEL_504:
    v372 = 0uLL;
    v373 = 0;
    *(_OWORD *)v369 = v168;
    *(_OWORD *)v370 = v168;
    v371 = 1.0;
    goto LABEL_505;
  }
  v76 = v75 / 24;
  if ((unint64_t)(v75 / 24) > 0xAAAAAAAAAAAAAAALL)
LABEL_515:
    abort();
  v77 = (char *)operator new(v75);
  v78 = 0;
  v348 = &v77[24 * v76];
  do
  {
    v79 = &v77[v78];
    *((_QWORD *)v79 + 2) = 0;
    *(_QWORD *)&v77[v78 + 8] = 0;
    *(_QWORD *)v79 = &v77[v78 + 8];
    v78 += 24;
  }
  while (24 * v76 != v78);
  v351 = v77;
  v352 = v76;
  v80 = 0;
  if (v76 <= 1)
    v81 = 1;
  else
    v81 = v76;
  v349 = v81;
  do
  {
    v82 = (uint64_t *)(*((_QWORD *)v4 + 5) + 24 * v80);
    v83 = *v82;
    v84 = v82[1];
    v85 = *v82 != -1 && v84 == -1;
    if (v85)
    {
      v84 = v82[2];
      v86 = (char *)*v7;
      if (v84 != -1)
      {
        v88 = *(float32x2_t *)&v86[8 * v83];
        v89 = *(float32x2_t *)&v86[8 * v84];
        v90 = vadd_f32(vmul_f32(v88, (float32x2_t)0x3F0000003F000000), vmul_f32(v89, (float32x2_t)0x3F0000003F000000));
        goto LABEL_104;
      }
      v87 = -1;
    }
    else
    {
      v86 = (char *)*v7;
      v87 = v82[2];
    }
    v88 = *(float32x2_t *)&v86[8 * v83];
    v90 = *(float32x2_t *)&v86[8 * v84];
    v89 = *(float32x2_t *)&v86[8 * v87];
LABEL_104:
    v350 = v80 + 1;
    if (v80 + 1 < v76)
    {
      v91 = v80 + 1;
      v361 = (uint64_t **)&v351[24 * v80];
      v92 = v361 + 1;
      v354 = *((_QWORD *)v4 + 5) + 24 * v80;
      do
      {
        v93 = (uint64_t *)(*((_QWORD *)v4 + 5) + 24 * v91);
        if (*v93 != -1 && v93[1] == -1)
        {
          v96 = v93[2];
          v95 = *v7;
        }
        else
        {
          v95 = *v7;
          v96 = v93[2];
        }
        v97 = (float32x2_t)v95[*v93];
        v98 = (float32x2_t)v95[v96];
        v369[1] = 0;
        *((_QWORD *)&v363 + 1) = 0;
        v100 = *v82;
        v99 = v82[1];
        v101 = v82[2];
        v103 = *v93;
        v102 = v93[1];
        v104 = v93[2];
        v357 = v91;
        if (*v82 == -1
          || v99 != -1
          || v101 == -1
          || (v103 != -1 ? (v105 = v102 == -1) : (v105 = 0), v105 ? (v106 = v104 == -1) : (v106 = 1), v106))
        {
          v117 = (float32x2_t)v95[v100];
          v118 = (void *)v95[v101];
          *(float32x2_t *)v119.f32 = vminnm_f32(v117, (float32x2_t)v118);
          v120 = vmaxnm_f32(v117, (float32x2_t)v118);
          if (v101 != -1 && v100 != -1 && v99 != -1)
          {
            v121 = (float32x2_t)v95[v99];
            *(float32x2_t *)v119.f32 = vminnm_f32(*(float32x2_t *)v119.f32, v121);
            v120 = vmaxnm_f32(v120, v121);
          }
          v122 = (void *)v95[v103];
          v123 = (void *)v95[v104];
          v124 = vminnm_f32((float32x2_t)v122, (float32x2_t)v123);
          *(float32x2_t *)v125.f32 = vmaxnm_f32((float32x2_t)v122, (float32x2_t)v123);
          if (v104 != -1 && v103 != -1 && v102 != -1)
          {
            v128 = (float32x2_t)v95[v102];
            v124 = vminnm_f32(v124, v128);
            *(float32x2_t *)v125.f32 = vmaxnm_f32(*(float32x2_t *)v125.f32, v128);
          }
          *(float32x2_t *)&v119.u32[2] = v124;
          *(float32x2_t *)&v125.u32[2] = v120;
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v125, v119)), 0xFuLL))) & 1) != 0)
          {
            if (v100 != -1)
            {
              if (v99 == -1)
              {
                if (v103 != -1 && v101 != -1 && v102 != -1 && v104 != -1)
                {
                  __p[0] = (void *)v95[v100];
                  __p[1] = v118;
                  *(_QWORD *)v376 = v122;
                  *(_QWORD *)&v376[8] = v95[v102];
                  *(_QWORD *)&v376[16] = v123;
                  v131 = (void **)&v363;
                  v132 = v369;
                  goto LABEL_165;
                }
              }
              else if (v101 != -1)
              {
                v129 = v103 != -1 && v102 == -1;
                if (v129 && v104 != -1)
                {
                  *(_QWORD *)v376 = v95[v100];
                  *(_QWORD *)&v376[8] = v95[v99];
                  *(_QWORD *)&v376[16] = v118;
                  __p[0] = v122;
                  __p[1] = v123;
                  v131 = v369;
                  v132 = (void **)&v363;
LABEL_165:
                  re::pathprocessing::Bezier2::intersectLineSegment((uint64_t)v376, (uint64_t)__p, v131, v132);
                  goto LABEL_166;
                }
              }
            }
            *(_QWORD *)v376 = v95[v100];
            *(_QWORD *)&v376[8] = v95[v99];
            *(_QWORD *)&v376[16] = v118;
            __p[0] = v122;
            __p[1] = (void *)v95[v102];
            *(_QWORD *)&v367 = v123;
            v136 = (int32x2_t)vsub_f32(*(float32x2_t *)&v376[8], v117);
            v137 = (int32x2_t)vsub_f32((float32x2_t)v118, v117);
            v138 = (int32x2_t)vsub_f32((float32x2_t)__p[1], (float32x2_t)v122);
            v139 = (int32x2_t)vsub_f32((float32x2_t)v123, (float32x2_t)v122);
            v140 = vabs_f32(vmul_f32(vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v137, v139), vneg_f32((float32x2_t)vzip2_s32(v136, v138))), (float32x2_t)vzip2_s32(v137, v139), (float32x2_t)vzip1_s32(v136, v138)), (float32x2_t)0x3F0000003F000000));
            if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v140, 1), v140).u8[0] & 1) != 0)
            {
              v141 = (float32x2_t *)v376;
              v142 = (float32x2_t *)__p;
              v143 = v369;
              v144 = (void **)&v363;
            }
            else
            {
              v141 = (float32x2_t *)__p;
              v142 = (float32x2_t *)v376;
              v143 = (void **)&v363;
              v144 = v369;
            }
            re::pathprocessing::Bezier2::intersectCurveWithCurve(v141, v142, (uint64_t)v143, (uint64_t)v144, 0);
          }
        }
        else
        {
          v107 = (float32x2_t)v95[v101];
          *(_QWORD *)v376 = v95[v100];
          *(float32x2_t *)&v376[8] = v107;
          v108 = (void *)v95[v103];
          v109 = (void *)v95[v104];
          __p[0] = v108;
          __p[1] = v109;
          v110 = (int32x2_t)vabd_f32(v107, *(float32x2_t *)v376);
          v111 = (int32x2_t)vabd_f32((float32x2_t)v109, (float32x2_t)v108);
          v112 = vmaxnm_f32((float32x2_t)vzip1_s32(v110, v111), (float32x2_t)vzip2_s32(v110, v111));
          if ((vcgt_f32(v112, (float32x2_t)vdup_lane_s32((int32x2_t)v112, 1)).u8[0] & 1) != 0)
          {
            v113 = (float32x2_t *)v376;
            v114 = (float32x2_t *)__p;
            v115 = v369;
            v116 = (void **)&v363;
          }
          else
          {
            v113 = (float32x2_t *)__p;
            v114 = (float32x2_t *)v376;
            v115 = (void **)&v363;
            v116 = v369;
          }
          re::pathprocessing::LineSegment::intersect(v113, v114, (uint64_t)v115, (uint64_t)v116);
        }
LABEL_166:
        if (v369[1])
        {
          v145 = 0;
          v146 = (uint32x2_t)vceq_f32(v88, v97);
          v147 = vpmin_u32(v146, v146).u32[0];
          v148 = (uint32x2_t)vceq_f32(v88, v98);
          v149 = (uint32x2_t)vceq_f32(v97, v89);
          v150 = (uint32x2_t)vceq_f32(v98, v89);
          v151 = (uint64_t **)&v351[24 * v357];
          v152 = v151 + 1;
          while (1)
          {
            v153 = 0.0;
            if ((v147 & 0x80000000) == 0 && (vpmin_u32(v148, v148).u32[0] & 0x80000000) == 0)
            {
              v153 = 1.0;
              if ((vpmin_u32(v149, v149).u32[0] & 0x80000000) == 0 && (vpmin_u32(v150, v150).u32[0] & 0x80000000) == 0)
                break;
            }
            v154 = *((float *)v369 + v145);
            if (v153 != v154 && vabds_f32(v153, v154) > 0.0001)
              goto LABEL_175;
LABEL_196:
            if ((void *)++v145 >= v369[1])
              goto LABEL_197;
          }
          v154 = *((float *)v369 + v145);
LABEL_175:
          v155 = *v92;
          if (!*v92)
            goto LABEL_182;
          v156 = v361 + 1;
          do
          {
            v157 = v155 + 1;
            if ((float)(*((float *)v155 + 8) + 0.0001) >= v154)
            {
              v157 = v155;
              v156 = (uint64_t **)v155;
            }
            v155 = (uint64_t *)*v157;
          }
          while (*v157);
          if (v156 == v92 || (float)(v154 + 0.0001) < *((float *)v156 + 8))
LABEL_182:
            v156 = v361 + 1;
          if (v92 == v156)
          {
            v159 = (float *)&v363 + v145;
            v160 = *v152;
            if (!*v152)
              goto LABEL_192;
            v161 = *v159;
            v162 = v151 + 1;
            do
            {
              v163 = v160 + 1;
              if ((float)(*((float *)v160 + 8) + 0.0001) >= v161)
              {
                v163 = v160;
                v162 = (uint64_t **)v160;
              }
              v160 = (uint64_t *)*v163;
            }
            while (*v163);
            if (v162 == v152 || (float)(v161 + 0.0001) < *((float *)v162 + 8))
LABEL_192:
              v162 = v151 + 1;
            if (v152 == v162)
            {
              *(float32x2_t *)v376 = vadd_f32(vmul_n_f32(v89, v154 * v154), vadd_f32(vmul_n_f32(v88, (float)(1.0 - v154) * (float)(1.0 - v154)), vmul_n_f32(v90, (float)(v154 + v154) * (float)(1.0 - v154))));
              v165 = (uint64_t *)re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)v4, (float *)v376);
              std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v361, (_DWORD *)v369 + v145, *((float *)v369 + v145))[5] = v165;
              std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v151, (_DWORD *)&v363 + v145, *v159)[5] = v165;
              v4 = v359;
            }
            else
            {
              v164 = v162[5];
              std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v361, (_DWORD *)v369 + v145, v154)[5] = v164;
            }
          }
          else
          {
            v158 = v156[5];
            std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v151, (_DWORD *)&v363 + v145, *((float *)&v363 + v145))[5] = v158;
          }
          goto LABEL_196;
        }
LABEL_197:
        v7 = v355;
        v91 = v357 + 1;
        v76 = v352;
        v82 = (uint64_t *)v354;
      }
      while (v357 + 1 != v352);
    }
    v80 = v350;
  }
  while (v350 != v349);
  v167 = *((_QWORD *)v4 + 5);
  v166 = *((_QWORD *)v4 + 6);
  v168 = 0uLL;
  v363 = 0u;
  v364 = 0u;
  v365 = 1065353216;
  v169 = v166 - v167;
  if (!v169)
  {
    v343 = v351;
    n = v348;
    goto LABEL_504;
  }
  v170 = 0;
  v171 = v169 / 24;
  if (v171 <= 1)
    v171 = 1;
  v358 = v171;
  v362 = (uint64_t)v4 + 32;
  while (2)
  {
    v172 = (unint64_t)&v351[24 * v170];
    v173 = *(_QWORD *)(v172 + 16);
    if (v173)
    {
      v174 = (uint64_t *)(*((_QWORD *)v4 + 5) + 24 * v170);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v367 = 0;
      std::vector<float>::reserve(__p, v173);
      v369[0] = 0;
      v369[1] = 0;
      v370[0] = 0;
      std::vector<unsigned long>::reserve(v369, *(_QWORD *)(v172 + 16));
      v176 = *(float **)v172;
      v172 += 8;
      v175 = v176;
      if (v176 != (float *)v172)
      {
        do
        {
          v177 = v175[8];
          if (fabsf(v177) >= 0.0001)
          {
            if (v177 != 1.0 && fabsf(v177 + -1.0) > 0.0001)
            {
              v189 = (char *)__p[1];
              if (__p[1] >= (void *)v367)
              {
                v195 = (char *)__p[0];
                v196 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                v197 = v196 + 1;
                if ((unint64_t)(v196 + 1) >> 62)
                  goto LABEL_515;
                v198 = v367 - (unint64_t)__p[0];
                if ((uint64_t)(v367 - (unint64_t)__p[0]) >> 1 > v197)
                  v197 = v198 >> 1;
                if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL)
                  v199 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v199 = v197;
                if (v199)
                {
                  v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v367, v199);
                  v195 = (char *)__p[0];
                  v189 = (char *)__p[1];
                  v177 = v175[8];
                }
                else
                {
                  v200 = 0;
                }
                v206 = (float *)&v200[4 * v196];
                *v206 = v177;
                v190 = v206 + 1;
                while (v189 != v195)
                {
                  v207 = *((_DWORD *)v189 - 1);
                  v189 -= 4;
                  *((_DWORD *)v206-- - 1) = v207;
                }
                __p[0] = v206;
                __p[1] = v190;
                *(_QWORD *)&v367 = &v200[4 * v199];
                if (v195)
                  operator delete(v195);
              }
              else
              {
                *(float *)__p[1] = v177;
                v190 = v189 + 4;
              }
              __p[1] = v190;
              v208 = (char *)v369[1];
              if (v369[1] >= v370[0])
              {
                v210 = (char *)v369[0];
                v211 = ((char *)v369[1] - (char *)v369[0]) >> 3;
                v212 = v211 + 1;
                if ((unint64_t)(v211 + 1) >> 61)
                  goto LABEL_515;
                v213 = (char *)v370[0] - (char *)v369[0];
                if (((char *)v370[0] - (char *)v369[0]) >> 2 > v212)
                  v212 = v213 >> 2;
                if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
                  v214 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v214 = v212;
                if (v214)
                {
                  v215 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v370, v214);
                  v210 = (char *)v369[0];
                  v208 = (char *)v369[1];
                }
                else
                {
                  v215 = 0;
                }
                v217 = &v215[8 * v211];
                *(_QWORD *)v217 = *((_QWORD *)v175 + 5);
                v209 = v217 + 8;
                while (v208 != v210)
                {
                  v218 = *((_QWORD *)v208 - 1);
                  v208 -= 8;
                  *((_QWORD *)v217 - 1) = v218;
                  v217 -= 8;
                }
                v369[0] = v217;
                v369[1] = v209;
                v370[0] = &v215[8 * v214];
                if (v210)
                  operator delete(v210);
              }
              else
              {
                *(_QWORD *)v369[1] = *((_QWORD *)v175 + 5);
                v209 = v208 + 8;
              }
              v369[1] = v209;
              goto LABEL_271;
            }
            *(_QWORD *)v376 = v174[2];
            v191 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v363, *(unint64_t *)v376, v376);
            v179 = v191;
            v180 = (char *)v191[4];
            v192 = (uint64_t)(v191 + 5);
            v193 = v191[5];
            if ((unint64_t)v180 >= v193)
            {
              v183 = (char *)v191[3];
              v201 = (v180 - v183) >> 3;
              v202 = v201 + 1;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_515;
              v203 = v193 - (_QWORD)v183;
              if (v203 >> 2 > v202)
                v202 = v203 >> 2;
              if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF8)
                v187 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v187 = v202;
              if (v187)
              {
                v188 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v192, v187);
                v183 = (char *)v179[3];
                v180 = (char *)v179[4];
              }
              else
              {
                v188 = 0;
              }
              v204 = &v188[8 * v201];
              *(_QWORD *)v204 = *((_QWORD *)v175 + 5);
              v194 = v204 + 8;
              while (v180 != v183)
              {
                v216 = *((_QWORD *)v180 - 1);
                v180 -= 8;
                *((_QWORD *)v204 - 1) = v216;
                v204 -= 8;
              }
              goto LABEL_261;
            }
          }
          else
          {
            *(_QWORD *)v376 = *v174;
            v178 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v363, *(unint64_t *)v376, v376);
            v179 = v178;
            v180 = (char *)v178[4];
            v181 = (uint64_t)(v178 + 5);
            v182 = v178[5];
            if ((unint64_t)v180 >= v182)
            {
              v183 = (char *)v178[3];
              v184 = (v180 - v183) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_515;
              v186 = v182 - (_QWORD)v183;
              if (v186 >> 2 > v185)
                v185 = v186 >> 2;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                v187 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v187 = v185;
              if (v187)
              {
                v188 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v181, v187);
                v183 = (char *)v179[3];
                v180 = (char *)v179[4];
              }
              else
              {
                v188 = 0;
              }
              v204 = &v188[8 * v184];
              *(_QWORD *)v204 = *((_QWORD *)v175 + 5);
              v194 = v204 + 8;
              while (v180 != v183)
              {
                v205 = *((_QWORD *)v180 - 1);
                v180 -= 8;
                *((_QWORD *)v204 - 1) = v205;
                v204 -= 8;
              }
LABEL_261:
              v179[3] = v204;
              v179[4] = v194;
              v179[5] = &v188[8 * v187];
              if (v183)
                operator delete(v183);
              goto LABEL_263;
            }
          }
          *(_QWORD *)v180 = *((_QWORD *)v175 + 5);
          v194 = v180 + 8;
LABEL_263:
          v179[4] = v194;
LABEL_271:
          v219 = (float *)*((_QWORD *)v175 + 1);
          if (v219)
          {
            do
            {
              v220 = v219;
              v219 = *(float **)v219;
            }
            while (v219);
          }
          else
          {
            do
            {
              v220 = (float *)*((_QWORD *)v175 + 2);
              v85 = *(_QWORD *)v220 == (_QWORD)v175;
              v175 = v220;
            }
            while (!v85);
          }
          v175 = v220;
        }
        while (v220 != (float *)v172);
      }
      v221 = *v174;
      if (*v174 == -1 || v174[1] != -1 || v174[2] == -1)
      {
        v222 = (uint64_t *)(*((_QWORD *)v359 + 5) + 24 * v170);
        v223 = *((_QWORD *)v359 + 2);
        v224 = *v222;
        v225 = v222[1];
        v226 = v222[2];
        v372.i64[0] = *(_QWORD *)(v223 + 8 * v224);
        v372.i64[1] = *(_QWORD *)(v223 + 8 * v225);
        v373 = *(_QWORD *)(v223 + 8 * v226);
        re::pathprocessing::Bezier2::split((__n128 *)&v372, (uint64_t *)__p, &v374);
        v227 = *v174;
        if (__p[1] == __p[0])
        {
          v229 = *v174;
          v7 = v355;
        }
        else
        {
          v172 = 0;
          v7 = v355;
          do
          {
            v228 = (char *)v374 + 24 * v172;
            v229 = *((_QWORD *)v369[0] + v172);
            v230 = *v7;
            *(_QWORD *)v376 = *((_QWORD *)*v7 + v227);
            v232 = *((_QWORD *)v228 + 1);
            v231 = v228 + 8;
            *(_QWORD *)&v376[8] = v232;
            *(_QWORD *)&v376[16] = v230[v229];
            v233 = re::pathprocessing::Bezier2::geometryType((re::pathprocessing::Bezier2 *)v376);
            if (v233 == 1)
            {
              v229 = v227;
            }
            else if (v233 == 2)
            {
              re::pathprocessing::IndexedMesh::addLineTo(v359, v227, v229);
            }
            else
            {
              v234 = *((_QWORD *)v359 + 2);
              v235 = (_QWORD *)*((_QWORD *)v359 + 3);
              v236 = ((uint64_t)v235 - v234) >> 3;
              v237 = *((_QWORD *)v359 + 4);
              if ((unint64_t)v235 >= v237)
              {
                if ((unint64_t)(v236 + 1) >> 61)
                  goto LABEL_515;
                v239 = v237 - v234;
                v240 = v239 >> 2;
                if (v239 >> 2 <= (unint64_t)(v236 + 1))
                  v240 = v236 + 1;
                if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
                  v241 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v241 = v240;
                if (v241)
                  v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v362, v241);
                else
                  v242 = 0;
                v243 = &v242[8 * v236];
                *(_QWORD *)v243 = *v231;
                v238 = v243 + 8;
                v245 = (char *)*((_QWORD *)v359 + 2);
                v244 = (char *)*((_QWORD *)v359 + 3);
                if (v244 != v245)
                {
                  do
                  {
                    v246 = *((_QWORD *)v244 - 1);
                    v244 -= 8;
                    *((_QWORD *)v243 - 1) = v246;
                    v243 -= 8;
                  }
                  while (v244 != v245);
                  v244 = (char *)*v355;
                }
                *((_QWORD *)v359 + 2) = v243;
                *((_QWORD *)v359 + 3) = v238;
                *((_QWORD *)v359 + 4) = &v242[8 * v241];
                if (v244)
                  operator delete(v244);
              }
              else
              {
                *v235 = *v231;
                v238 = v235 + 1;
              }
              *((_QWORD *)v359 + 3) = v238;
              v248 = (uint64_t *)*((_QWORD *)v359 + 6);
              v247 = *((_QWORD *)v359 + 7);
              if ((unint64_t)v248 >= v247)
              {
                v251 = (uint64_t *)*((_QWORD *)v359 + 5);
                v252 = 0xAAAAAAAAAAAAAAABLL * (v248 - v251);
                v253 = v252 + 1;
                if (v252 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_515;
                v254 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - (_QWORD)v251) >> 3);
                if (2 * v254 > v253)
                  v253 = 2 * v254;
                if (v254 >= 0x555555555555555)
                  v255 = 0xAAAAAAAAAAAAAAALL;
                else
                  v255 = v253;
                if (v255)
                {
                  v255 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v255);
                  v251 = (uint64_t *)*((_QWORD *)v359 + 5);
                  v248 = (uint64_t *)*((_QWORD *)v359 + 6);
                }
                else
                {
                  v256 = 0;
                }
                v257 = (uint64_t *)(v255 + 24 * v252);
                *v257 = v227;
                v257[1] = v236;
                v257[2] = v229;
                v258 = v257;
                if (v248 == v251)
                {
                  v250 = v359;
                }
                else
                {
                  v250 = v359;
                  do
                  {
                    v259 = *(_OWORD *)(v248 - 3);
                    *(v258 - 1) = *(v248 - 1);
                    *(_OWORD *)(v258 - 3) = v259;
                    v258 -= 3;
                    v248 -= 3;
                  }
                  while (v248 != v251);
                  v251 = (uint64_t *)*((_QWORD *)v359 + 5);
                }
                v249 = v257 + 3;
                *((_QWORD *)v250 + 5) = v258;
                *((_QWORD *)v250 + 6) = v257 + 3;
                *((_QWORD *)v250 + 7) = v255 + 24 * v256;
                if (v251)
                  operator delete(v251);
              }
              else
              {
                *v248 = v227;
                v248[1] = v236;
                v249 = v248 + 3;
                v248[2] = v229;
                v250 = v359;
              }
              *((_QWORD *)v250 + 6) = v249;
              v7 = v355;
            }
            ++v172;
            v227 = v229;
          }
          while (v172 < ((char *)__p[1] - (char *)__p[0]) >> 2);
        }
        v4 = v359;
        v260 = (uint64_t *)(*((_QWORD *)v359 + 5) + 24 * v170);
        *v260 = v229;
        *(_QWORD *)(*((_QWORD *)v359 + 2) + 8 * v260[1]) = v375[-1].n128_u64[0];
        if (v374)
        {
          v375 = v374;
          operator delete(v374);
        }
      }
      else
      {
        if (__p[1] == __p[0])
        {
          v262 = v359;
        }
        else
        {
          v172 = 0;
          v261 = v369[0];
          v262 = v359;
          v263 = (char *)*((_QWORD *)v359 + 6);
          do
          {
            v264 = *((_QWORD *)v262 + 7);
            if ((unint64_t)v263 >= v264)
            {
              v267 = (char *)*((_QWORD *)v262 + 5);
              v268 = 0xAAAAAAAAAAAAAAABLL * ((v263 - v267) >> 3);
              v269 = v268 + 1;
              if (v268 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_515;
              v270 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v264 - (_QWORD)v267) >> 3);
              if (2 * v270 > v269)
                v269 = 2 * v270;
              if (v270 >= 0x555555555555555)
                v271 = 0xAAAAAAAAAAAAAAALL;
              else
                v271 = v269;
              if (v271)
              {
                v271 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v271);
                v267 = (char *)*((_QWORD *)v359 + 5);
                v263 = (char *)*((_QWORD *)v359 + 6);
              }
              else
              {
                v272 = 0;
              }
              v273 = v261[v172];
              v274 = (uint64_t *)(v271 + 24 * v268);
              *v274 = v221;
              v274[1] = -1;
              v274[2] = v273;
              v275 = v274;
              if (v263 == v267)
              {
                v266 = v359;
              }
              else
              {
                v266 = v359;
                do
                {
                  v276 = *(_OWORD *)(v263 - 24);
                  *(v275 - 1) = *((_QWORD *)v263 - 1);
                  *(_OWORD *)(v275 - 3) = v276;
                  v275 -= 3;
                  v263 -= 24;
                }
                while (v263 != v267);
                v267 = (char *)*((_QWORD *)v359 + 5);
              }
              v263 = (char *)(v274 + 3);
              *((_QWORD *)v266 + 5) = v275;
              *((_QWORD *)v266 + 6) = v274 + 3;
              *((_QWORD *)v266 + 7) = v271 + 24 * v272;
              if (v267)
                operator delete(v267);
            }
            else
            {
              v265 = v261[v172];
              *(_QWORD *)v263 = v221;
              *((_QWORD *)v263 + 1) = -1;
              *((_QWORD *)v263 + 2) = v265;
              v263 += 24;
              v266 = v262;
            }
            *((_QWORD *)v266 + 6) = v263;
            v262 = v266;
            v261 = v369[0];
            v221 = *((_QWORD *)v369[0] + v172++);
          }
          while (v172 < ((char *)__p[1] - (char *)__p[0]) >> 2);
        }
        *(_QWORD *)(*((_QWORD *)v262 + 5) + 24 * v170) = v221;
        v4 = v262;
        v7 = v355;
      }
      if (v369[0])
      {
        v369[1] = v369[0];
        operator delete(v369[0]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (++v170 != v358)
      continue;
    break;
  }
  v277 = (_QWORD *)v364;
  v372 = 0uLL;
  v373 = 0;
  *(_OWORD *)v369 = 0u;
  *(_OWORD *)v370 = 0u;
  v371 = 1.0;
  if ((_QWORD)v364)
  {
    while (2)
    {
      if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((uint64_t)v369[0], (unint64_t)v369[1], v277[2]))
      {
        v278 = v372.u64[1];
        if (v372.i64[1] >= v373)
        {
          v172 = 0xAAAAAAAAAAAAAAABLL * ((v372.i64[1] - v372.i64[0]) >> 3);
          v280 = v172 + 1;
          if (v172 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_515;
          if (0x5555555555555556 * ((uint64_t)(v373 - v372.i64[0]) >> 3) > v280)
            v280 = 0x5555555555555556 * ((uint64_t)(v373 - v372.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v373 - v372.i64[0]) >> 3) >= 0x555555555555555)
            v281 = 0xAAAAAAAAAAAAAAALL;
          else
            v281 = v280;
          *(_QWORD *)&v377 = &v373;
          if (v281)
            v282 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v373, v281);
          else
            v282 = 0;
          v283 = &v282[24 * v172];
          *(_QWORD *)v376 = v282;
          *(_QWORD *)&v376[8] = v283;
          *(_QWORD *)&v376[24] = &v282[24 * v281];
          *(_QWORD *)v283 = 0;
          *((_QWORD *)v283 + 1) = 0;
          *((_QWORD *)v283 + 2) = 0;
          v279 = (unint64_t)(v283 + 24);
          *(_QWORD *)&v376[16] = v283 + 24;
          v284 = (_QWORD *)v372.i64[1];
          v285 = v372.i64[0];
          v286 = *(_QWORD *)&v376[8];
          if (v372.i64[1] == v372.i64[0])
          {
            v288 = vdupq_n_s64(v372.u64[1]);
          }
          else
          {
            do
            {
              *(_QWORD *)(v286 - 24) = 0;
              *(_QWORD *)(v286 - 16) = 0;
              v286 -= 24;
              *(_QWORD *)(v286 + 16) = 0;
              v287 = *(_OWORD *)(v284 - 3);
              v284 -= 3;
              *(_OWORD *)v286 = v287;
              *(_QWORD *)(v286 + 16) = v284[2];
              *v284 = 0;
              v284[1] = 0;
              v284[2] = 0;
            }
            while (v284 != (_QWORD *)v285);
            v288 = v372;
            v279 = *(_QWORD *)&v376[16];
          }
          v372.i64[0] = v286;
          v372.i64[1] = v279;
          *(int64x2_t *)&v376[8] = v288;
          v289 = v373;
          v373 = *(_QWORD *)&v376[24];
          *(_QWORD *)&v376[24] = v289;
          *(_QWORD *)v376 = v288.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v376);
        }
        else
        {
          *(_QWORD *)v372.i64[1] = 0;
          *(_QWORD *)(v278 + 8) = 0;
          v279 = v278 + 24;
          *(_QWORD *)(v278 + 16) = 0;
        }
        v372.i64[1] = v279;
        v374 = (__n128 *)v277[2];
        *(_OWORD *)__p = 0u;
        v367 = 0u;
        v368 = 0u;
        std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(__p, (uint64_t *)&v374, 1uLL);
        *(_OWORD *)v376 = *(_OWORD *)__p;
        *(_OWORD *)&v376[16] = v367;
        *(_OWORD *)__p = 0u;
        v367 = 0u;
        v377 = v368;
        v368 = 0uLL;
        std::deque<unsigned long>::~deque[abi:nn180100](__p);
        v290 = *((_QWORD *)&v377 + 1);
        while (2)
        {
          v291 = v290 - 1;
          v292 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v376[8]
                                       + (((unint64_t)(v291 + v377) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v291 + v377) & 0x1FF));
          *((_QWORD *)&v377 + 1) = v291;
          std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v376, 1);
          v293 = v369[0];
          v294 = (unint64_t)v369[1];
          if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((uint64_t)v369[0], (unint64_t)v369[1], v292))
          {
            goto LABEL_375;
          }
          if (v294)
          {
            v295 = (uint8x8_t)vcnt_s8((int8x8_t)v294);
            v295.i16[0] = vaddlv_u8(v295);
            if (v295.u32[0] > 1uLL)
            {
              v172 = v292;
              if (v294 <= v292)
                v172 = v292 % v294;
            }
            else
            {
              v172 = (v294 - 1) & v292;
            }
            v296 = (_QWORD *)v293[v172];
            if (v296)
            {
              for (j = (_QWORD *)*v296; j; j = (_QWORD *)*j)
              {
                v298 = j[1];
                if (v298 == v292)
                {
                  if (j[2] == v292)
                    goto LABEL_449;
                }
                else
                {
                  if (v295.u32[0] > 1uLL)
                  {
                    if (v298 >= v294)
                      v298 %= v294;
                  }
                  else
                  {
                    v298 &= v294 - 1;
                  }
                  if (v298 != v172)
                    break;
                }
              }
            }
          }
          v299 = operator new(0x18uLL);
          *v299 = 0;
          v299[1] = v292;
          v299[2] = v292;
          v300 = (float)((unint64_t)v370[1] + 1);
          if (!v294 || (float)(v371 * (float)v294) < v300)
          {
            v301 = (v294 & (v294 - 1)) != 0;
            if (v294 < 3)
              v301 = 1;
            v302 = v301 | (2 * v294);
            v303 = vcvtps_u32_f32(v300 / v371);
            if (v302 <= v303)
              prime = (int8x8_t)v303;
            else
              prime = (int8x8_t)v302;
            if (*(_QWORD *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              v294 = (unint64_t)v369[1];
            }
            if (*(_QWORD *)&prime <= v294)
            {
              if (*(_QWORD *)&prime < v294)
              {
                v311 = vcvtps_u32_f32((float)(unint64_t)v370[1] / v371);
                if (v294 < 3
                  || (v312 = (uint8x8_t)vcnt_s8((int8x8_t)v294), v312.i16[0] = vaddlv_u8(v312), v312.u32[0] > 1uLL))
                {
                  v311 = std::__next_prime(v311);
                }
                else
                {
                  v313 = 1 << -(char)__clz(v311 - 1);
                  if (v311 >= 2)
                    v311 = v313;
                }
                if (*(_QWORD *)&prime <= v311)
                  prime = (int8x8_t)v311;
                if (*(_QWORD *)&prime >= v294)
                {
                  v294 = (unint64_t)v369[1];
                }
                else
                {
                  if (prime)
                    goto LABEL_405;
                  v335 = v369[0];
                  v369[0] = 0;
                  if (v335)
                    operator delete(v335);
                  v294 = 0;
                  v369[1] = 0;
                }
              }
            }
            else
            {
LABEL_405:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v305 = operator new(8 * *(_QWORD *)&prime);
              v306 = v369[0];
              v369[0] = v305;
              if (v306)
                operator delete(v306);
              v307 = 0;
              v369[1] = (void *)prime;
              do
                *((_QWORD *)v369[0] + v307++) = 0;
              while (*(_QWORD *)&prime != v307);
              v308 = (_QWORD **)v370[0];
              if (v370[0])
              {
                v309 = *((_QWORD *)v370[0] + 1);
                v310 = (uint8x8_t)vcnt_s8(prime);
                v310.i16[0] = vaddlv_u8(v310);
                if (v310.u32[0] > 1uLL)
                {
                  if (v309 >= *(_QWORD *)&prime)
                    v309 %= *(_QWORD *)&prime;
                }
                else
                {
                  v309 &= *(_QWORD *)&prime - 1;
                }
                *((_QWORD *)v369[0] + v309) = v370;
                for (k = *v308; k; v309 = v315)
                {
                  v315 = k[1];
                  if (v310.u32[0] > 1uLL)
                  {
                    if (v315 >= *(_QWORD *)&prime)
                      v315 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v315 &= *(_QWORD *)&prime - 1;
                  }
                  if (v315 != v309)
                  {
                    if (!*((_QWORD *)v369[0] + v315))
                    {
                      *((_QWORD *)v369[0] + v315) = v308;
                      goto LABEL_430;
                    }
                    *v308 = (_QWORD *)*k;
                    *k = **((_QWORD **)v369[0] + v315);
                    **((_QWORD **)v369[0] + v315) = k;
                    k = v308;
                  }
                  v315 = v309;
LABEL_430:
                  v308 = (_QWORD **)k;
                  k = (_QWORD *)*k;
                }
              }
              v294 = (unint64_t)prime;
            }
            if ((v294 & (v294 - 1)) != 0)
            {
              if (v294 <= v292)
                v172 = v292 % v294;
              else
                v172 = v292;
            }
            else
            {
              v172 = (v294 - 1) & v292;
            }
          }
          v316 = v369[0];
          v317 = (_QWORD *)*((_QWORD *)v369[0] + v172);
          if (v317)
          {
            *v299 = *v317;
            goto LABEL_447;
          }
          *v299 = v370[0];
          v370[0] = v299;
          v316[v172] = v370;
          if (*v299)
          {
            v318 = *(_QWORD *)(*v299 + 8);
            if ((v294 & (v294 - 1)) != 0)
            {
              if (v318 >= v294)
                v318 %= v294;
            }
            else
            {
              v318 &= v294 - 1;
            }
            v317 = (char *)v369[0] + 8 * v318;
LABEL_447:
            *v317 = v299;
          }
          ++v370[1];
LABEL_449:
          v320 = *(unint64_t **)(v279 - 16);
          v319 = *(_QWORD *)(v279 - 8);
          if ((unint64_t)v320 >= v319)
          {
            v321 = *(unint64_t **)(v279 - 24);
            v322 = v320 - v321;
            v323 = v322 + 1;
            if ((unint64_t)(v322 + 1) >> 61)
              goto LABEL_515;
            v324 = v319 - (_QWORD)v321;
            if (v324 >> 2 > v323)
              v323 = v324 >> 2;
            if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8)
              v325 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v325 = v323;
            if (v325)
            {
              v326 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v279 - 8, v325);
              v321 = *(unint64_t **)(v279 - 24);
              v320 = *(unint64_t **)(v279 - 16);
            }
            else
            {
              v326 = 0;
            }
            v327 = (unint64_t *)&v326[8 * v322];
            *v327 = v292;
            v172 = (unint64_t)(v327 + 1);
            while (v320 != v321)
            {
              v328 = *--v320;
              *--v327 = v328;
            }
            *(_QWORD *)(v279 - 24) = v327;
            *(_QWORD *)(v279 - 16) = v172;
            *(_QWORD *)(v279 - 8) = &v326[8 * v325];
            if (v321)
              operator delete(v321);
          }
          else
          {
            *v320 = v292;
            v172 = (unint64_t)(v320 + 1);
          }
          *(_QWORD *)(v279 - 16) = v172;
          if (*((_QWORD *)&v363 + 1))
          {
            v329 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v363 + 8));
            v329.i16[0] = vaddlv_u8(v329);
            if (v329.u32[0] > 1uLL)
            {
              v330 = v292;
              if (v292 >= *((_QWORD *)&v363 + 1))
                v330 = v292 % *((_QWORD *)&v363 + 1);
            }
            else
            {
              v330 = (*((_QWORD *)&v363 + 1) - 1) & v292;
            }
            v331 = *(_QWORD **)(v363 + 8 * v330);
            if (v331)
            {
              for (m = (_QWORD *)*v331; m; m = (_QWORD *)*m)
              {
                v333 = m[1];
                if (v333 == v292)
                {
                  if (m[2] == v292)
                  {
                    v172 = m[3];
                    v334 = m[4];
                    while (v172 != v334)
                    {
                      __p[0] = 0;
                      __p[0] = *(void **)v172;
                      if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((uint64_t)v369[0], (unint64_t)v369[1], (unint64_t)__p[0]))std::deque<unsigned long>::push_back(v376, __p);
                      v172 += 8;
                    }
                    break;
                  }
                }
                else
                {
                  if (v329.u32[0] > 1uLL)
                  {
                    if (v333 >= *((_QWORD *)&v363 + 1))
                      v333 %= *((_QWORD *)&v363 + 1);
                  }
                  else
                  {
                    v333 &= *((_QWORD *)&v363 + 1) - 1;
                  }
                  if (v333 != v330)
                    break;
                }
              }
            }
          }
LABEL_375:
          v290 = *((_QWORD *)&v377 + 1);
          if (*((_QWORD *)&v377 + 1))
            continue;
          break;
        }
        std::deque<unsigned long>::~deque[abi:nn180100](v376);
        v4 = v359;
        v7 = v355;
      }
      v277 = (_QWORD *)*v277;
      if (v277)
        continue;
      break;
    }
    v337 = v372.u64[1];
    v336 = v372.i64[0];
    for (n = v348; v336 != v337; v336 += 24)
    {
      v339 = *(uint64_t **)v336;
      if (*(_QWORD *)(v336 + 8) - *(_QWORD *)v336 >= 9uLL)
      {
        v340 = *v339;
        v341 = *v7;
        v342 = 1;
        do
        {
          *((_QWORD *)*v7 + v339[v342++]) = v341[v340];
          v339 = *(uint64_t **)v336;
        }
        while (v342 < (uint64_t)(*(_QWORD *)(v336 + 8) - *(_QWORD *)v336) >> 3);
      }
    }
    v343 = v351;
  }
  else
  {
    v343 = v351;
    n = v348;
  }
LABEL_505:
  v344 = v370[0];
  if (v370[0])
  {
    do
    {
      v345 = (_QWORD *)*v344;
      operator delete(v344);
      v344 = v345;
    }
    while (v345);
  }
  v346 = v369[0];
  v369[0] = 0;
  if (v346)
    operator delete(v346);
  *(_QWORD *)v376 = &v372;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v376);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)&v363);
  if (v343)
  {
    for (; n != v343; n -= 24)
      std::__tree<re::ecs2::Scene *>::destroy(*((_QWORD **)n - 2));
    operator delete(v343);
  }
  return v4;
}

uint64_t re::pathprocessing::IndexedMesh::getOrAddIndex(uint64_t a1, float *a2)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  float *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;

  v5 = (_QWORD **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
    goto LABEL_8;
  v6 = a1 + 72;
  do
  {
    v7 = re::pathprocessing::MathUtils::lexicographicalApproxLess((float *)(v4 + 32), a2);
    v8 = (uint64_t *)(v4 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v4;
      v6 = v4;
    }
    v4 = *v8;
  }
  while (*v8);
  if ((_QWORD **)v6 == v5 || re::pathprocessing::MathUtils::lexicographicalApproxLess(a2, (float *)(v6 + 32)))
  {
LABEL_8:
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD **)(a1 + 24);
    v12 = ((uint64_t)v11 - v10) >> 3;
    if ((unint64_t)v11 >= v9)
    {
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v14 = v9 - v10;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v12 + 1))
        v15 = v12 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(a1 + 32, v16);
      else
        v17 = 0;
      v18 = &v17[8 * v12];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = *(_QWORD *)a2;
      v13 = v18 + 8;
      v21 = *(char **)(a1 + 16);
      v20 = *(char **)(a1 + 24);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        v20 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = *(_QWORD *)a2;
      v13 = v11 + 1;
    }
    *(_QWORD *)(a1 + 24) = v13;
    v23 = *(_QWORD **)(a1 + 72);
    if (v23)
    {
      while (1)
      {
        while (1)
        {
          v24 = v23;
          v25 = (float *)(v23 + 4);
          if (!re::pathprocessing::MathUtils::lexicographicalApproxLess(a2, (float *)v23 + 8))
            break;
          v23 = (_QWORD *)*v24;
          v5 = (_QWORD **)v24;
          if (!*v24)
            goto LABEL_33;
        }
        if (!re::pathprocessing::MathUtils::lexicographicalApproxLess(v25, a2))
          break;
        v5 = (_QWORD **)(v24 + 1);
        v23 = (_QWORD *)v24[1];
        if (!v23)
          goto LABEL_33;
      }
      v26 = *v5;
      if (*v5)
        goto LABEL_36;
    }
    else
    {
      v24 = v5;
    }
LABEL_33:
    v26 = operator new(0x30uLL);
    v26[4] = *(_QWORD *)a2;
    v26[5] = 0;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v24;
    *v5 = v26;
    v27 = **(_QWORD **)(a1 + 64);
    v28 = v26;
    if (v27)
    {
      *(_QWORD *)(a1 + 64) = v27;
      v28 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v28);
    ++*(_QWORD *)(a1 + 80);
LABEL_36:
    v26[5] = v12;
    return v12;
  }
  return *(_QWORD *)(v6 + 40);
}

uint64_t re::pathprocessing::IndexedMesh::addBezierTo(re::pathprocessing::IndexedMesh *a1, uint64_t a2, uint64_t *a3, float *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  __int128 v37;
  _QWORD v39[3];

  v8 = *a3;
  v39[0] = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * a2);
  v39[1] = v8;
  v39[2] = *(_QWORD *)a4;
  v9 = re::pathprocessing::Bezier2::geometryType((re::pathprocessing::Bezier2 *)v39);
  if (v9 == 1)
    return a2;
  if (v9 != 2)
  {
    v11 = *((_QWORD *)a1 + 4);
    v12 = *((_QWORD *)a1 + 2);
    v13 = (uint64_t *)*((_QWORD *)a1 + 3);
    v14 = ((uint64_t)v13 - v12) >> 3;
    if ((unint64_t)v13 >= v11)
    {
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_38;
      v16 = v11 - v12;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v14 + 1))
        v17 = v14 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)a1 + 32, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v14];
      v21 = &v19[8 * v18];
      *(_QWORD *)v20 = *a3;
      v15 = v20 + 8;
      v23 = (char *)*((_QWORD *)a1 + 2);
      v22 = (char *)*((_QWORD *)a1 + 3);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v22 != v23);
        v22 = (char *)*((_QWORD *)a1 + 2);
      }
      *((_QWORD *)a1 + 2) = v20;
      *((_QWORD *)a1 + 3) = v15;
      *((_QWORD *)a1 + 4) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v13 = *a3;
      v15 = v13 + 1;
    }
    *((_QWORD *)a1 + 3) = v15;
    v25 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)a1, a4);
    v10 = v25;
    v26 = (uint64_t *)*((_QWORD *)a1 + 6);
    v27 = *((_QWORD *)a1 + 7);
    if ((unint64_t)v26 < v27)
    {
      *v26 = a2;
      v26[1] = v14;
      v28 = v26 + 3;
      v26[2] = v25;
LABEL_36:
      *((_QWORD *)a1 + 6) = v28;
      return v10;
    }
    v29 = 0xAAAAAAAAAAAAAAALL;
    v30 = (uint64_t *)*((_QWORD *)a1 + 5);
    v31 = 0xAAAAAAAAAAAAAAABLL * (v26 - v30);
    v32 = v31 + 1;
    if (v31 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v30) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 < 0x555555555555555)
        v29 = v32;
      if (v29)
      {
        v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v29);
        v30 = (uint64_t *)*((_QWORD *)a1 + 5);
        v26 = (uint64_t *)*((_QWORD *)a1 + 6);
      }
      else
      {
        v34 = 0;
      }
      v35 = (uint64_t *)(v29 + 24 * v31);
      v36 = v29 + 24 * v34;
      *v35 = a2;
      v35[1] = v14;
      v35[2] = v10;
      v28 = v35 + 3;
      if (v26 != v30)
      {
        do
        {
          v37 = *(_OWORD *)(v26 - 3);
          *(v35 - 1) = *(v26 - 1);
          *(_OWORD *)(v35 - 3) = v37;
          v35 -= 3;
          v26 -= 3;
        }
        while (v26 != v30);
        v30 = (uint64_t *)*((_QWORD *)a1 + 5);
      }
      *((_QWORD *)a1 + 5) = v35;
      *((_QWORD *)a1 + 6) = v28;
      *((_QWORD *)a1 + 7) = v36;
      if (v30)
        operator delete(v30);
      goto LABEL_36;
    }
LABEL_38:
    abort();
  }
  v10 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)a1, a4);
  re::pathprocessing::IndexedMesh::addLineTo(a1, a2, v10);
  return v10;
}

uint64_t re::pathprocessing::IndexedMesh::addLineTo(re::pathprocessing::IndexedMesh *this, uint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;

  if (a3 != a2)
  {
    v6 = (char *)*((_QWORD *)this + 6);
    v7 = *((_QWORD *)this + 7);
    if ((unint64_t)v6 >= v7)
    {
      v9 = 0xAAAAAAAAAAAAAAALL;
      v10 = (char *)*((_QWORD *)this + 5);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 < 0x555555555555555)
        v9 = v12;
      if (v9)
      {
        v9 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v9);
        v10 = (char *)*((_QWORD *)this + 5);
        v6 = (char *)*((_QWORD *)this + 6);
      }
      else
      {
        v14 = 0;
      }
      v15 = (_QWORD *)(v9 + 24 * v11);
      v16 = v9 + 24 * v14;
      *v15 = a2;
      v15[1] = -1;
      v15[2] = a3;
      v8 = v15 + 3;
      if (v6 != v10)
      {
        do
        {
          v17 = *(_OWORD *)(v6 - 24);
          *(v15 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)(v15 - 3) = v17;
          v15 -= 3;
          v6 -= 24;
        }
        while (v6 != v10);
        v10 = (char *)*((_QWORD *)this + 5);
      }
      *((_QWORD *)this + 5) = v15;
      *((_QWORD *)this + 6) = v8;
      *((_QWORD *)this + 7) = v16;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v6 = a2;
      *((_QWORD *)v6 + 1) = -1;
      *((_QWORD *)v6 + 2) = a3;
      v8 = v6 + 24;
    }
    *((_QWORD *)this + 6) = v8;
  }
  return a3;
}

void re::pathprocessing::IndexedMesh::flatten(_QWORD *a1, uint64_t *a2, std::vector<int> *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  float32x2_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v7 = a1[5];
  v6 = a1[6];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
  std::vector<re::pathprocessing::Bezier2>::resize((uint64_t)a2, v8);
  std::vector<unsigned int>::resize(a3, v8);
  if (v6 != v7)
  {
    v9 = 0;
    v10 = 0;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    while (1)
    {
      v12 = (uint64_t *)(a1[5] + v9);
      v13 = *v12;
      v14 = v12[1];
      v15 = v12[2];
      if (v13 == -1 || v14 != -1)
        goto LABEL_13;
      if (v15 == -1)
        break;
      v17 = a1[2];
      v18 = *(float32x2_t *)(v17 + 8 * v13);
      v19 = *(float32x2_t *)(v17 + 8 * v15);
      v20 = *a2;
      v21 = (float32x2_t *)(*a2 + v9);
      *v21 = v18;
      v21[1] = vadd_f32(vmul_f32(v18, (float32x2_t)0x3F0000003F000000), vmul_f32(v19, (float32x2_t)0x3F0000003F000000));
      v22 = 2;
LABEL_14:
      *(float32x2_t *)(v20 + v9 + 16) = v19;
      a3->__begin_[v10++] = v22;
      v9 += 24;
      if (v11 == v10)
        return;
    }
    v14 = -1;
LABEL_13:
    v23 = a1[2];
    v24 = *(_QWORD *)(v23 + 8 * v13);
    v25 = *(_QWORD *)(v23 + 8 * v14);
    v19 = *(float32x2_t *)(v23 + 8 * v15);
    v20 = *a2;
    v26 = (_QWORD *)(*a2 + v9);
    *v26 = v24;
    v26[1] = v25;
    v22 = 3;
    goto LABEL_14;
  }
}

void std::vector<re::pathprocessing::Bezier2>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<re::pathprocessing::Bezier2>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<re::pathprocessing::Bezier2>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

uint64_t **std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(uint64_t **a1, _DWORD *a2, float a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((float *)v5 + 8);
        if ((float)(a3 + 0.0001) >= v8)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((float)(v8 + 0.0001) >= a3)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a2;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<unsigned long>::__add_back_capacity(a1, a3 - v10);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6)
    v12 = 0;
  else
    v12 = *v11 + 8 * (v9 & 0x1FF);
  v19[0] = v6 + 8 * (v9 >> 9);
  v19[1] = v12;
  result = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)v19, a3);
  while (v12 != v14)
  {
    v15 = (_QWORD *)(v11 == result ? v14 : *v11 + 4096);
    if ((_QWORD *)v12 == v15)
    {
      v15 = (_QWORD *)v12;
    }
    else
    {
      v16 = (_QWORD *)v12;
      do
      {
        v17 = *a2++;
        *v16++ = v17;
      }
      while (v16 != v15);
    }
    a1[5] += ((uint64_t)v15 - v12) >> 3;
    if (v11 == result)
      break;
    v18 = v11[1];
    ++v11;
    v12 = v18;
  }
  return result;
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

float32x2_t re::pathprocessing::Bezier2::curveBetween@<D0>(float32x2_t *this@<X0>, float a2@<S0>, float a3@<S1>, float32x2_t *a4@<X8>)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t result;

  v4 = *this;
  v5 = this[1];
  v6 = this[2];
  v7 = vadd_f32(vadd_f32(vmul_n_f32(*this, (float)(1.0 - a2) * (float)(1.0 - a2)), vmul_n_f32(v5, (float)(a2 + a2) * (float)(1.0 - a2))), vmul_n_f32(v6, a2 * a2));
  *a4 = v7;
  a4[1] = vadd_f32(vmul_n_f32(v7, 1.0 - (float)((float)(a3 - a2) / (float)(1.0 - a2))), vmul_n_f32(vadd_f32(vmul_n_f32(v5, 1.0 - a2), vmul_n_f32(v6, a2)), (float)(a3 - a2) / (float)(1.0 - a2)));
  result = vadd_f32(vadd_f32(vmul_n_f32(v4, (float)(1.0 - a3) * (float)(1.0 - a3)), vmul_n_f32(v5, (float)(a3 + a3) * (float)(1.0 - a3))), vmul_n_f32(v6, a3 * a3));
  a4[2] = result;
  return result;
}

uint64_t re::pathprocessing::Bezier2::geometryType(re::pathprocessing::Bezier2 *this)
{
  uint64_t result;

  result = re::pathprocessing::Bezier2::isfinite(this);
  if ((_DWORD)result)
  {
    if (re::pathprocessing::Bezier2::isPoint(this))
    {
      return 1;
    }
    else if (re::pathprocessing::Bezier2::isLine((float32x2_t *)this))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

BOOL re::pathprocessing::Bezier2::isfinite(re::pathprocessing::Bezier2 *this)
{
  if ((*(_DWORD *)this & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*((_DWORD *)this + 1) & 0x7FFFFFFFu) < 0x7F800000
    || (*((_DWORD *)this + 2) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*((_DWORD *)this + 3) & 0x7FFFFFFFu) < 0x7F800000)
  {
    return 1;
  }
  if ((*((_DWORD *)this + 4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  return (*((_DWORD *)this + 5) & 0x7FFFFFFFu) < 0x7F800000;
}

BOOL re::pathprocessing::Bezier2::isPoint(re::pathprocessing::Bezier2 *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;

  v1 = *(float *)this;
  v2 = *((float *)this + 2);
  if (*(float *)this != v2 && vabds_f32(v1, v2) > 0.0001)
    return 0;
  v3 = *((float *)this + 1);
  v4 = *((float *)this + 3);
  if (v3 != v4 && vabds_f32(v3, v4) > 0.0001)
    return 0;
  v5 = *((float *)this + 4);
  if (v2 != v5 && vabds_f32(v2, v5) > 0.0001)
    return 0;
  v6 = *((float *)this + 5);
  if (v4 != v6 && vabds_f32(v4, v6) > 0.0001)
    return 0;
  if (v1 != v5 && vabds_f32(v1, v5) > 0.0001)
    return 0;
  if (vabds_f32(v3, v6) <= 0.0001)
    return 1;
  return v3 == v6;
}

BOOL re::pathprocessing::Bezier2::isLine(float32x2_t *this)
{
  float32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;

  if (re::pathprocessing::Bezier2::isPoint((re::pathprocessing::Bezier2 *)this))
    return 0;
  v3 = this[1];
  v4 = vsub_f32(v3, *this);
  v5 = (int32x2_t)vmul_f32(v4, v4);
  v6 = this[2];
  v7 = vsub_f32(v6, v3);
  v8 = (int32x2_t)vmul_f32(v7, v7);
  v9 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v5, v8), (float32x2_t)vzip2_s32(v5, v8)));
  v10 = vsub_f32(*this, v6);
  v11 = sqrtf(vaddv_f32(vmul_f32(v10, v10)));
  if (v9.f32[0] <= v9.f32[1])
    v12 = v9.f32[1];
  else
    v12 = v9.f32[0];
  if (v9.f32[0] > v9.f32[1])
    v9.f32[0] = v9.f32[1];
  if (v12 <= v11)
    v13 = v11;
  else
    v13 = v12;
  if (v12 <= v11)
    v11 = v12;
  return fabsf((float)((float)(v9.f32[0] + v11) / v13) + -1.0) < 0.0001;
}

BOOL re::pathprocessing::Bezier2::enclosingTriangleOverlaps(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  _BOOL4 isLine;
  _BOOL4 v13;
  int v14;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  __int128 v26;
  float32x2_t v27;
  __int128 v28;
  float32x2_t v29;

  v2 = *this;
  v3 = this[1];
  v4 = this[2];
  *(float32x2_t *)v5.f32 = vminnm_f32(vminnm_f32(*this, v3), v4);
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(float32x2_t *)v9.f32 = vmaxnm_f32(vmaxnm_f32(*a2, v7), v8);
  *(float32x2_t *)&v5.u32[2] = vminnm_f32(vminnm_f32(*a2, v7), v8);
  *(float32x2_t *)&v9.u32[2] = vmaxnm_f32(vmaxnm_f32(*this, v3), v4);
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v9, v5)), 0xFuLL))) & 1) == 0)
    return 0;
  isLine = re::pathprocessing::Bezier2::isLine(this);
  v13 = re::pathprocessing::Bezier2::isLine(a2);
  v14 = !v13;
  if (isLine && !v14)
    return 0;
  if (isLine && !v13)
  {
    v19 = (uint64_t)v2;
    v20 = (uint64_t)v4;
    v21 = vsub_f32(v7, v6);
    v22 = vsub_f32(v8, v7);
    if (vmlas_n_f32((float)-v21.f32[1] * v22.f32[0], v22.f32[1], v21.f32[0]) >= 0.0)
    {
      *(float32x2_t *)&v28 = v8;
      *((float32x2_t *)&v28 + 1) = v7;
      v29 = v6;
      return re::pathprocessing::BezierUtils::lineCrossBezierHull((float32x2_t *)&v28, v19, v20);
    }
    v28 = *(_OWORD *)a2->f32;
    v23 = a2[2];
LABEL_13:
    v29 = v23;
    return re::pathprocessing::BezierUtils::lineCrossBezierHull((float32x2_t *)&v28, v19, v20);
  }
  v16 = vsub_f32(v3, v2);
  v17 = vsub_f32(v4, v3);
  v18 = vmlas_n_f32((float)-v16.f32[1] * v17.f32[0], v17.f32[1], v16.f32[0]);
  if (((isLine | v14) & 1) == 0)
  {
    v19 = (uint64_t)v6;
    v20 = (uint64_t)v8;
    if (v18 >= 0.0)
    {
      *(float32x2_t *)&v28 = v4;
      *((float32x2_t *)&v28 + 1) = v3;
      v29 = v2;
      return re::pathprocessing::BezierUtils::lineCrossBezierHull((float32x2_t *)&v28, v19, v20);
    }
    v28 = *(_OWORD *)this->f32;
    v23 = this[2];
    goto LABEL_13;
  }
  if (v18 >= 0.0)
  {
    *(float32x2_t *)&v28 = v4;
    *((float32x2_t *)&v28 + 1) = v3;
    v29 = v2;
  }
  else
  {
    v28 = *(_OWORD *)this->f32;
    v29 = this[2];
  }
  v24 = vsub_f32(v7, v6);
  v25 = vsub_f32(v8, v7);
  if (vmlas_n_f32((float)-v24.f32[1] * v25.f32[0], v25.f32[1], v24.f32[0]) >= 0.0)
  {
    *(float32x2_t *)&v26 = v8;
    *((float32x2_t *)&v26 + 1) = v7;
    v27 = v6;
  }
  else
  {
    v26 = *(_OWORD *)a2->f32;
    v27 = a2[2];
  }
  return re::pathprocessing::BezierUtils::bezierHullOverlap((float32x2_t *)&v28, (float32x2_t *)&v26);
}

void re::pathprocessing::Bezier2::removeOverlaps(__int128 *a1, __int128 *a2, _QWORD *a3, char **a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  float32x2_t *v18;
  uint64_t v19;
  uint32x2_t v20;
  unsigned __int32 v21;
  BOOL v22;
  uint64_t v23;
  uint32x2_t v24;
  unsigned __int32 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int32x2_t v39;
  float32x2_t v40;
  int32x2_t v41;
  float32x2_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  float v49;
  uint64_t v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float32x2_t v58;
  float v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  float32x2_t *v121;
  float32x2_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float32x2_t *v125;
  unint64_t j;
  char *v127;
  float *v128;
  char *v129;
  float32x2_t *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  size_t v134;
  BOOL v135;
  size_t v136;
  uint64_t v137;
  float32x2_t *v138;
  float32x2_t *v139;
  uint64_t i;
  float *v141;
  char *v142;
  float32x2_t *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  size_t v147;
  size_t v148;
  unint64_t v149;
  float32x2_t *v150;
  float32x2_t *v151;
  uint64_t v152;
  float *v153;
  char *v154;
  float32x2_t *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  size_t v159;
  unint64_t v160;
  float *v161;
  char *v162;
  float32x2_t *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  size_t v167;
  char **v168;
  char **v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  uint64_t k;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  int v185;
  _QWORD *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  _DWORD *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  int v200;
  unint64_t v202;
  unint64_t v203;
  char *v205;
  unint64_t v206;
  char *__p;
  float32x2_t *__pa;
  float32x2_t *__pb;
  float32x2_t *__pc;
  uint64_t v211;
  char *v212;
  _BYTE *__src;
  uint64_t v214;
  _OWORD v215[2];
  float v216[6];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _OWORD v221[4];
  uint64_t v222;

  v222 = *MEMORY[0x24BDAC8D0];
  re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, a1, 0.0, 1.0);
  re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)v221, a2, 0.0, 1.0);
  v6 = (char *)operator new(0x80uLL);
  v7 = 0;
  v8 = 0;
  __src = 0;
  v9 = 0;
  v10 = v221[1];
  v11 = v221[2];
  v12 = v220;
  v13 = v6 + 128;
  *((_OWORD *)v6 + 4) = v221[0];
  *((_OWORD *)v6 + 5) = v10;
  v14 = v221[3];
  *((_OWORD *)v6 + 6) = v11;
  *((_OWORD *)v6 + 7) = v14;
  v15 = v218;
  *(_OWORD *)v6 = v217;
  *((_OWORD *)v6 + 1) = v15;
  v202 = 0;
  *((_OWORD *)v6 + 2) = v219;
  *((_OWORD *)v6 + 3) = v12;
  v205 = v6 + 128;
  __p = 0;
  do
  {
    std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>((uint64_t)v6, (float *)v13, 126 - 2 * __clz((v13 - v6) >> 6), 1);
    v16 = v13 - 64;
    v211 = v13 - 64 - v6;
    if (v13 - 64 == v6)
    {
LABEL_11:
      v23 = 0;
      do
      {
        v24 = (uint32x2_t)vceq_f32(*(float32x2_t *)&v13[v23 - 24], *(float32x2_t *)((char *)a1 + v23));
        v25 = vpmin_u32(v24, v24).u32[0];
        if ((v25 & 0x80000000) == 0)
          break;
        v22 = v23 == 16;
        v23 += 8;
      }
      while (!v22);
      if ((v25 & 0x80000000) == 0)
      {
        if (v9 >= __p)
        {
          v60 = (v9 - __src) >> 6;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 58)
            goto LABEL_230;
          if ((__p - __src) >> 5 > v61)
            v61 = (__p - __src) >> 5;
          if ((unint64_t)(__p - __src) >= 0x7FFFFFFFFFFFFFC0)
            v62 = 0x3FFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
            v62 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v62);
          else
            v63 = 0;
          v75 = (_OWORD *)(v62 + (v60 << 6));
          v76 = *(_OWORD *)v16;
          v77 = *((_OWORD *)v13 - 3);
          v78 = *((_OWORD *)v13 - 1);
          v75[2] = *((_OWORD *)v13 - 2);
          v75[3] = v78;
          *v75 = v76;
          v75[1] = v77;
          if (v9 == __src)
          {
            v83 = (_BYTE *)(v62 + (v60 << 6));
          }
          else
          {
            v79 = v62 + (v60 << 6);
            do
            {
              v80 = *((_OWORD *)v9 - 4);
              v81 = *((_OWORD *)v9 - 3);
              v82 = *((_OWORD *)v9 - 1);
              v83 = (_BYTE *)(v79 - 64);
              *(_OWORD *)(v79 - 32) = *((_OWORD *)v9 - 2);
              *(_OWORD *)(v79 - 16) = v82;
              *(_OWORD *)(v79 - 64) = v80;
              *(_OWORD *)(v79 - 48) = v81;
              v9 -= 64;
              v79 -= 64;
            }
            while (v9 != __src);
          }
          __p = (char *)(v62 + (v63 << 6));
          v9 = (char *)(v75 + 4);
          if (__src)
            operator delete(__src);
          v13 -= 64;
          __src = v83;
          continue;
        }
        v26 = *(_OWORD *)v16;
        v27 = *((_OWORD *)v13 - 3);
        v28 = *((_OWORD *)v13 - 1);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v13 - 2);
        *((_OWORD *)v9 + 3) = v28;
        *(_OWORD *)v9 = v26;
        *((_OWORD *)v9 + 1) = v27;
        v9 += 64;
LABEL_20:
        v13 -= 64;
        continue;
      }
      if ((unint64_t)v8 < v202)
      {
        v29 = *(_OWORD *)v16;
        v30 = *((_OWORD *)v13 - 3);
        v31 = *((_OWORD *)v13 - 1);
        *((_OWORD *)v8 + 2) = *((_OWORD *)v13 - 2);
        *((_OWORD *)v8 + 3) = v31;
        *(_OWORD *)v8 = v29;
        *((_OWORD *)v8 + 1) = v30;
        v8 += 64;
        goto LABEL_20;
      }
      v68 = (v8 - v7) >> 6;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 58)
        goto LABEL_230;
      if ((uint64_t)(v202 - (_QWORD)v7) >> 5 > v69)
        v69 = (uint64_t)(v202 - (_QWORD)v7) >> 5;
      if (v202 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
        v70 = 0x3FFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      if (v70)
        v70 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v70);
      else
        v71 = 0;
      v84 = (_OWORD *)(v70 + (v68 << 6));
      v85 = *(_OWORD *)v16;
      v86 = *((_OWORD *)v13 - 3);
      v87 = *((_OWORD *)v13 - 1);
      v84[2] = *((_OWORD *)v13 - 2);
      v84[3] = v87;
      *v84 = v85;
      v84[1] = v86;
      if (v8 == v7)
      {
        v92 = (char *)(v70 + (v68 << 6));
      }
      else
      {
        v88 = v70 + (v68 << 6);
        do
        {
          v89 = *((_OWORD *)v8 - 4);
          v90 = *((_OWORD *)v8 - 3);
          v91 = *((_OWORD *)v8 - 1);
          v92 = (char *)(v88 - 64);
          *(_OWORD *)(v88 - 32) = *((_OWORD *)v8 - 2);
          *(_OWORD *)(v88 - 16) = v91;
          *(_OWORD *)(v88 - 64) = v89;
          *(_OWORD *)(v88 - 48) = v90;
          v8 -= 64;
          v88 -= 64;
        }
        while (v8 != v7);
      }
      v202 = v70 + (v71 << 6);
      v8 = (char *)(v84 + 4);
      if (v7)
        operator delete(v7);
      v13 -= 64;
      v7 = v92;
    }
    else
    {
      v17 = v13 - 88;
      v18 = (float32x2_t *)(v13 - 64);
      while (1)
      {
        v19 = 0;
        do
        {
          v20 = (uint32x2_t)vceq_f32(*(float32x2_t *)&v13[v19 - 24], *(float32x2_t *)&v17[v19]);
          v21 = vpmin_u32(v20, v20).u32[0];
          if ((v21 & 0x80000000) == 0)
            break;
          v22 = v19 == 16;
          v19 += 8;
        }
        while (!v22);
        if ((v21 & 0x80000000) == 0
          && re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)v13 - 6, v18 - 6))
        {
          break;
        }
        v18 -= 8;
        v17 -= 64;
        if (v18 == (float32x2_t *)v6)
          goto LABEL_11;
      }
      v32 = *((_OWORD *)v13 - 1);
      v33 = *(_OWORD *)v16;
      v34 = *((_OWORD *)v13 - 3);
      v215[0] = *((_OWORD *)v13 - 2);
      v215[1] = v32;
      v214 = v33;
      v35 = v32;
      v36 = *(float32x2_t *)((char *)&v34 + 8);
      v37 = *(float32x2_t *)((char *)v215 + 8);
      v38 = vadd_f32(vsub_f32(*(float32x2_t *)((char *)v215 + 8), vadd_f32(*(float32x2_t *)&v35, *(float32x2_t *)&v35)), *(float32x2_t *)((char *)&v32 + 8));
      *(float32x2_t *)&v32 = vsub_f32(*(float32x2_t *)&v32, *(float32x2_t *)((char *)v215 + 8));
      *(float *)&v33 = vaddv_f32(vmul_f32(v38, v38));
      *(float *)&v34 = vaddv_f32(vmul_f32(*(float32x2_t *)&v32, v38));
      v39 = (int32x2_t)vmul_f32(*(float32x2_t *)&v32, *(float32x2_t *)&v32);
      v40 = vsub_f32(*(float32x2_t *)((char *)v215 + 8), *(float32x2_t *)((char *)&v34 + 8));
      v41 = (int32x2_t)vmul_f32(v40, v38);
      v42 = vadd_f32((float32x2_t)vzip1_s32(v39, v41), (float32x2_t)vzip2_s32(v39, v41));
      re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)&v217, 0.0, *(float *)&v33, (float)(*(float *)&v34 * 3.0), (float)((float)(v42.f32[0] + v42.f32[0]) + v42.f32[1]), vaddv_f32(vmul_f32(v40, *(float32x2_t *)&v32)));
      if (!HIDWORD(v221[0]))
        goto LABEL_49;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 8 * HIDWORD(v221[0]);
      do
      {
        v47 = *(double *)((char *)&v219 + v43 + 8);
        if (v47 >= 0.0 || v47 <= 1.0)
        {
          v49 = v47;
          v44 = v45 + 1;
          v216[v45++] = v49;
        }
        v43 += 8;
      }
      while (v46 != v43);
      if (v44)
      {
        v50 = 4 * v44;
        v51 = v216;
        v52 = NAN;
        v53 = 3.4028e38;
        do
        {
          v54 = *v51++;
          v55 = v54;
          if (v54 <= 1.0)
            v56 = v55;
          else
            v56 = 1.0;
          if (v55 >= 0.0)
            v57 = v56;
          else
            v57 = 0.0;
          v58 = vsub_f32(v36, vadd_f32(vmul_n_f32(*(float32x2_t *)((char *)&v35 + 8), v57 * v57), vadd_f32(vmul_n_f32(v37, (float)(1.0 - v57) * (float)(1.0 - v57)), vmul_n_f32(*(float32x2_t *)&v35, (float)(v57 + v57) * (float)(1.0 - v57)))));
          v59 = vaddv_f32(vmul_f32(v58, v58));
          if (v59 < v53)
          {
            v52 = v57;
            v53 = v59;
          }
          v50 -= 4;
        }
        while (v50);
      }
      else
      {
LABEL_49:
        v52 = NAN;
      }
      if (v52 <= *(float *)&v214 || v52 >= *((float *)&v214 + 1))
        goto LABEL_223;
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (_OWORD *)((char *)v215 + 8), *(float *)&v214, v52);
      if (v16 >= v205)
      {
        v72 = (v211 >> 6) + 1;
        if (v72 >> 58)
          goto LABEL_230;
        if ((v205 - v6) >> 5 > v72)
          v72 = (v205 - v6) >> 5;
        if ((unint64_t)(v205 - v6) >= 0x7FFFFFFFFFFFFFC0)
          v73 = 0x3FFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
          v73 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v73);
        else
          v74 = 0;
        v93 = (char *)(v73 + (v211 >> 6 << 6));
        v94 = v217;
        v95 = v218;
        v96 = v220;
        v205 = (char *)(v73 + (v74 << 6));
        *((_OWORD *)v93 + 2) = v219;
        *((_OWORD *)v93 + 3) = v96;
        *(_OWORD *)v93 = v94;
        *((_OWORD *)v93 + 1) = v95;
        v13 = v93 + 64;
        do
        {
          v97 = *((_OWORD *)v16 - 4);
          v98 = *((_OWORD *)v16 - 3);
          v99 = *((_OWORD *)v16 - 1);
          *((_OWORD *)v93 - 2) = *((_OWORD *)v16 - 2);
          *((_OWORD *)v93 - 1) = v99;
          *((_OWORD *)v93 - 4) = v97;
          *((_OWORD *)v93 - 3) = v98;
          v93 -= 64;
          v16 -= 64;
        }
        while (v16 != v6);
        if (v6)
          operator delete(v6);
        v6 = v93;
      }
      else
      {
        v65 = v217;
        v66 = v218;
        v67 = v220;
        *((_OWORD *)v13 - 2) = v219;
        *((_OWORD *)v13 - 1) = v67;
        *(_OWORD *)v16 = v65;
        *((_OWORD *)v13 - 3) = v66;
      }
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (_OWORD *)((char *)v215 + 8), v52, *((float *)&v214 + 1));
      if (v13 >= v205)
      {
        v104 = (v13 - v6) >> 6;
        v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 58)
          goto LABEL_230;
        if ((v205 - v6) >> 5 > v105)
          v105 = (v205 - v6) >> 5;
        if ((unint64_t)(v205 - v6) >= 0x7FFFFFFFFFFFFFC0)
          v106 = 0x3FFFFFFFFFFFFFFLL;
        else
          v106 = v105;
        if (v106)
          v106 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v106);
        else
          v107 = 0;
        v108 = (char *)(v106 + (v104 << 6));
        v109 = v217;
        v110 = v218;
        v111 = v220;
        v205 = (char *)(v106 + (v107 << 6));
        *((_OWORD *)v108 + 2) = v219;
        *((_OWORD *)v108 + 3) = v111;
        *(_OWORD *)v108 = v109;
        *((_OWORD *)v108 + 1) = v110;
        v103 = v108 + 64;
        if (v13 == v6)
          goto LABEL_111;
        do
        {
          v112 = *((_OWORD *)v13 - 4);
          v113 = *((_OWORD *)v13 - 3);
          v114 = *((_OWORD *)v13 - 1);
          *((_OWORD *)v108 - 2) = *((_OWORD *)v13 - 2);
          *((_OWORD *)v108 - 1) = v114;
          *((_OWORD *)v108 - 4) = v112;
          *((_OWORD *)v108 - 3) = v113;
          v108 -= 64;
          v13 -= 64;
        }
        while (v13 != v6);
        if (v6)
LABEL_111:
          operator delete(v6);
        v6 = v108;
      }
      else
      {
        v100 = v217;
        v101 = v218;
        v102 = v220;
        *((_OWORD *)v13 + 2) = v219;
        *((_OWORD *)v13 + 3) = v102;
        *(_OWORD *)v13 = v100;
        *((_OWORD *)v13 + 1) = v101;
        v103 = v13 + 64;
      }
      v13 = v103;
    }
  }
  while (v6 != v13);
  v206 = (v9 - __src) >> 6;
  v115 = 126 - 2 * __clz(v206);
  v116 = v9 - __src;
  if (v9 == __src)
    v117 = 0;
  else
    v117 = v115;
  v118 = (v8 - v7) >> 6;
  v119 = 126 - 2 * __clz(v118);
  if (v8 == v7)
    v120 = 0;
  else
    v120 = v119;
  std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>((uint64_t)v7, (float *)v8, v120, 1);
  std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>((uint64_t)__src, (float *)v9, v117, 1);
  v212 = v7;
  if (v118 <= v116 >> 6)
  {
    v203 = (v8 - v7) >> 6;
    if (v8 == v7)
    {
      __pb = 0;
      v125 = 0;
      v123 = (v9 - __src) >> 6;
    }
    else
    {
      v123 = (v9 - __src) >> 6;
      if (v8 - v7 < 0)
        goto LABEL_230;
      v124 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v203);
      memmove(v124, v7, v8 - v7);
      __pb = v124;
      v125 = &v124[8 * v203];
    }
    for (i = v123 - 1; v123 != 1; i = v123 - 1)
    {
      v141 = (float *)&__src[64 * v123];
      v123 = i;
      v142 = &__src[64 * i];
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (__int128 *)(v142 + 40), *(v141 - 32), *((float *)v142 + 1));
      v143 = __pb;
      if (__pb == v125)
      {
LABEL_147:
        v144 = v217;
        v145 = v218;
        v146 = v220;
        *((_OWORD *)v141 - 6) = v219;
        *((_OWORD *)v141 - 5) = v146;
        *((_OWORD *)v141 - 8) = v144;
        *((_OWORD *)v141 - 7) = v145;
        v147 = v9 - (char *)v141;
        if (v147)
          memmove(v142, v141, v147);
        v9 = &v142[v147];
      }
      else
      {
        while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v143 + 2))
        {
          v143 += 8;
          if (v143 == v125)
            goto LABEL_147;
        }
      }
    }
    if (__pb)
      operator delete(__pb);
    v7 = v212;
    v148 = v9 - __src;
    v149 = v203;
    if (v9 == __src)
    {
      __pc = 0;
      v151 = 0;
    }
    else
    {
      if (v9 - __src < 0)
        goto LABEL_230;
      v150 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v148 >> 6);
      memmove(v150, __src, v148);
      __pc = v150;
      v151 = (float32x2_t *)((char *)v150 + v148);
    }
    v160 = v203 - 1;
    if (v203 != 1)
    {
      do
      {
        v161 = (float *)&v7[64 * v149];
        v149 = v160;
        v162 = &v7[64 * v160];
        re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (__int128 *)(v162 + 40), *(v161 - 32), *((float *)v162 + 1));
        v163 = __pc;
        if (__pc == v151)
        {
LABEL_171:
          v164 = v217;
          v165 = v218;
          v166 = v220;
          *((_OWORD *)v161 - 6) = v219;
          *((_OWORD *)v161 - 5) = v166;
          *((_OWORD *)v161 - 8) = v164;
          *((_OWORD *)v161 - 7) = v165;
          v167 = v8 - (char *)v161;
          if (v167)
            memmove(v162, v161, v167);
          v8 = &v162[v167];
        }
        else
        {
          while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v163 + 2))
          {
            v163 += 8;
            if (v163 == v151)
              goto LABEL_171;
          }
        }
        v7 = v212;
        v160 = v149 - 1;
      }
      while (v149 != 1);
    }
  }
  else
  {
    if (v9 != __src)
    {
      if ((v116 & 0x8000000000000000) == 0)
      {
        v121 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v206);
        memmove(v121, __src, v116);
        __pa = v121;
        v122 = &v121[8 * v206];
        goto LABEL_129;
      }
LABEL_230:
      abort();
    }
    __pa = 0;
    v122 = 0;
LABEL_129:
    for (j = v118 - 1; v118 != 1; v7 = v212)
    {
      v127 = v7;
      v128 = (float *)&v7[64 * v118];
      v118 = j;
      v129 = &v127[64 * j];
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (__int128 *)(v129 + 40), *(v128 - 32), *((float *)v129 + 1));
      v130 = __pa;
      if (__pa == v122)
      {
LABEL_133:
        v131 = v217;
        v132 = v218;
        v133 = v220;
        *((_OWORD *)v128 - 6) = v219;
        *((_OWORD *)v128 - 5) = v133;
        *((_OWORD *)v128 - 8) = v131;
        *((_OWORD *)v128 - 7) = v132;
        v134 = v8 - (char *)v128;
        if (v134)
          memmove(v129, v128, v134);
        v8 = &v129[v134];
      }
      else
      {
        while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v130 + 2))
        {
          v130 += 8;
          if (v130 == v122)
            goto LABEL_133;
        }
      }
      j = v118 - 1;
    }
    if (__pa)
      operator delete(__pa);
    v136 = v8 - v7;
    v22 = v8 == v7;
    v135 = v8 - v7 < 0;
    v137 = (v9 - __src) >> 6;
    if (v22)
    {
      __pc = 0;
      v139 = 0;
    }
    else
    {
      if (v135)
        goto LABEL_230;
      v138 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v136 >> 6);
      memmove(v138, v212, v136);
      __pc = v138;
      v139 = (float32x2_t *)((char *)v138 + v136);
    }
    v152 = v206 - 1;
    if (v206 != 1)
    {
      do
      {
        v153 = (float *)&__src[64 * v137];
        v137 = v152;
        v154 = &__src[64 * v152];
        re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (__int128 *)(v154 + 40), *(v153 - 32), *((float *)v154 + 1));
        v155 = __pc;
        if (__pc == v139)
        {
LABEL_161:
          v156 = v217;
          v157 = v218;
          v158 = v220;
          *((_OWORD *)v153 - 6) = v219;
          *((_OWORD *)v153 - 5) = v158;
          *((_OWORD *)v153 - 8) = v156;
          *((_OWORD *)v153 - 7) = v157;
          v159 = v9 - (char *)v153;
          if (v159)
            memmove(v154, v153, v159);
          v9 = &v154[v159];
        }
        else
        {
          while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v155 + 2))
          {
            v155 += 8;
            if (v155 == v139)
              goto LABEL_161;
          }
        }
        v152 = v137 - 1;
      }
      while (v137 != 1);
    }
    v7 = v212;
  }
  if (__pc)
    operator delete(__pc);
  v168 = (char **)a3;
  a3[1] = *a3;
  v169 = a4;
  a4[1] = *a4;
  if ((unint64_t)(v8 - v7) >= 0x41)
  {
    v170 = (v8 - v7) >> 6;
    v171 = a3 + 2;
    if (v170 <= 2)
      v172 = 2;
    else
      v172 = v170;
    v173 = (char *)a3[1];
    for (k = 1; k != v172; ++k)
    {
      v175 = &v7[64 * k];
      if ((unint64_t)v173 >= *v171)
      {
        v177 = *v168;
        v178 = (v173 - *v168) >> 2;
        v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 62)
          goto LABEL_230;
        v180 = *v171 - (_QWORD)v177;
        if (v180 >> 1 > v179)
          v179 = v180 >> 1;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
          v181 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          v182 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v171, v181);
          v168 = (char **)a3;
          v183 = v182;
          v177 = (char *)*a3;
          v173 = (char *)a3[1];
        }
        else
        {
          v183 = 0;
        }
        v184 = &v183[4 * v178];
        *(_DWORD *)v184 = *(_DWORD *)v175;
        v176 = v184 + 4;
        while (v173 != v177)
        {
          v185 = *((_DWORD *)v173 - 1);
          v173 -= 4;
          *((_DWORD *)v184 - 1) = v185;
          v184 -= 4;
        }
        *v168 = v184;
        v168[1] = v176;
        v168[2] = &v183[4 * v181];
        if (v177)
        {
          operator delete(v177);
          v168 = (char **)a3;
        }
        v169 = a4;
      }
      else
      {
        *(_DWORD *)v173 = *(_DWORD *)v175;
        v176 = v173 + 4;
      }
      v168[1] = v176;
      v173 = v176;
    }
  }
  if ((unint64_t)(v9 - __src) >= 0x41)
  {
    v186 = v169 + 2;
    if ((unint64_t)((v9 - __src) >> 6) <= 2)
      v187 = 2;
    else
      v187 = (v9 - __src) >> 6;
    v188 = v169[1];
    v189 = 1;
    do
    {
      v190 = &__src[64 * v189];
      if ((unint64_t)v188 >= *v186)
      {
        v192 = *v169;
        v193 = (v188 - *v169) >> 2;
        v194 = v193 + 1;
        if ((unint64_t)(v193 + 1) >> 62)
          goto LABEL_230;
        v195 = *v186 - (_QWORD)v192;
        if (v195 >> 1 > v194)
          v194 = v195 >> 1;
        if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL)
          v196 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v196 = v194;
        if (v196)
        {
          v197 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v186, v196);
          v169 = a4;
          v198 = v197;
          v192 = *a4;
          v188 = a4[1];
        }
        else
        {
          v198 = 0;
        }
        v199 = &v198[4 * v193];
        *(_DWORD *)v199 = *v190;
        v191 = v199 + 4;
        while (v188 != v192)
        {
          v200 = *((_DWORD *)v188 - 1);
          v188 -= 4;
          *((_DWORD *)v199 - 1) = v200;
          v199 -= 4;
        }
        *v169 = v199;
        v169[1] = v191;
        v169[2] = &v198[4 * v196];
        if (v192)
        {
          operator delete(v192);
          v169 = a4;
        }
      }
      else
      {
        *(_DWORD *)v188 = *v190;
        v191 = v188 + 4;
      }
      v169[1] = v191;
      ++v189;
      v188 = v191;
    }
    while (v189 != v187);
  }
  v6 = v13;
LABEL_223:
  if (__src)
    operator delete(__src);
  if (v7)
    operator delete(v7);
  if (v6)
    operator delete(v6);
}

float32x2_t *re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier(float32x2_t *a1, __int128 *a2, float a3, float a4)
{
  __int128 v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  __int128 v17;
  float32x2_t v18;

  a1->f32[0] = a3;
  a1->f32[1] = a4;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5 = *a2;
  a1[7] = (float32x2_t)a2[1];
  *(_OWORD *)a1[5].f32 = v5;
  re::pathprocessing::Bezier2::curveBetween(a1 + 5, a3, a4, (float32x2_t *)&v17);
  *(_OWORD *)a1[2].f32 = v17;
  a1[4] = v18;
  v6 = a1[3];
  v7 = vsub_f32(a1[2], v6);
  v8 = vmul_f32(v7, v7);
  v8.i32[0] = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  v8.i32[0] = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).u32[0];
  v11 = vsub_f32(a1[4], v6);
  v12 = vmul_f32(v11, v11);
  v13 = vmul_n_f32(v7, v8.f32[0]);
  v8.i32[0] = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v14, v14)));
  a1[1].f32[0] = (float)(vaddv_f32(vmul_f32(v13, vmul_n_f32(v11, vmul_f32(v15, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v15, v15))).f32[0])))* 0.5)+ 0.5;
  return a1;
}

float32x2_t re::pathprocessing::Bezier2::tangentAt(float32x2_t *a1, int a2, float a3)
{
  _BOOL4 isLine;
  float32x2_t v7;
  float32x2_t result;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;

  isLine = re::pathprocessing::Bezier2::isLine(a1);
  v7 = *a1;
  if (isLine)
  {
    result = vsub_f32(a1[2], v7);
    if (a2)
      return result;
  }
  else
  {
    result = vadd_f32(vmul_n_f32(vsub_f32(a1[1], v7), (float)(1.0 - a3) + (float)(1.0 - a3)), vmul_n_f32(vsub_f32(a1[2], a1[1]), a3 + a3));
    if (a2)
      return result;
  }
  v9 = vmul_f32(result, result);
  v9.i32[0] = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1)).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  return vmul_n_f32(result, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
}

__n128 re::pathprocessing::Bezier2::split@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, __n128 **a3@<X8>)
{
  uint64_t v5;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 *v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  unint64_t *v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  unint64_t *v22;
  __n128 *v23;

  v5 = a2[1];
  if (*a2 == v5)
  {
    v23 = (__n128 *)operator new(0x18uLL);
    a3[1] = (__n128 *)((char *)v23 + 24);
    a3[2] = (__n128 *)((char *)v23 + 24);
    result = *a1;
    *v23 = *a1;
    v23[1].n128_u64[0] = a1[1].n128_u64[0];
    *a3 = v23;
  }
  else
  {
    std::vector<std::vector<unsigned long>>::vector(a3, ((v5 - *a2) >> 2) + 1);
    v8 = *a2;
    if (a2[1] != *a2)
    {
      v9 = 0;
      v10 = 0;
      v11 = *a3;
      v12 = 0.0;
      result.n128_u32[0] = 1.0;
      do
      {
        v13 = *(float *)(v8 + 4 * v10);
        v14 = (float)(v13 - v12) / (float)(1.0 - v12);
        v15 = (float32x2_t)a1->n128_u64[0];
        v16 = (float32x2_t)a1[1].n128_u64[0];
        v17 = *(float32x2_t *)&a1->n128_i8[8];
        v18 = &v11->n128_u64[v9];
        *v18 = a1->n128_u64[0];
        v19 = vadd_f32(vmul_n_f32(v17, v14), vmul_n_f32(v15, 1.0 - v14));
        v20 = vadd_f32(vmul_n_f32(v16, v14), vmul_n_f32(v17, 1.0 - v14));
        v21 = vadd_f32(vmul_n_f32(v20, v14), vmul_n_f32(v19, 1.0 - v14));
        v18[1] = (unint64_t)v19;
        v18[2] = (unint64_t)v21;
        ++v10;
        v22 = &(*a3)->n128_u64[v9];
        v22[3] = (unint64_t)v21;
        v22[4] = (unint64_t)v20;
        v22[5] = (unint64_t)v16;
        v11 = *a3;
        a1 = (__n128 *)((char *)*a3 + 24 * v10);
        v8 = *a2;
        v9 += 3;
        v12 = v13;
      }
      while (v10 < (a2[1] - *a2) >> 2);
    }
  }
  return result;
}

uint64_t re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic(re::pathprocessing::Bezier2 *this, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  _QWORD v14[9];
  unsigned int v15;
  float v16[4];

  v2 = *((float *)this + 5);
  v3 = *((float *)this + 1);
  if (v2 >= v3)
    v4 = *((float *)this + 1);
  else
    v4 = *((float *)this + 5);
  if (v3 >= v2)
    v5 = *((float *)this + 1);
  else
    v5 = *((float *)this + 5);
  if (v4 > 0.0)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    if (v5 > 0.0)
    {
      re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)v14, 0.0, 0.0, v3 + *((float *)this + 3) * -2.0 + v2, *((float *)this + 3) - v3 + *((float *)this + 3) - v3, v3);
      if (v15)
      {
        v7 = 0;
        v8 = 8 * v15;
        do
        {
          v9 = *(double *)&v14[v7 + 5];
          v10 = v7 + 1;
          v16[v7++] = v9;
          v8 -= 8;
        }
        while (v8);
        *(float *)&v6 = v16[0];
        if (v10 == 2)
        {
          v11 = vabds_f32(0.5, v16[0]);
          if (v11 > 1.0)
            v11 = 1.0;
          v12 = vabds_f32(0.5, v16[1]);
          if (v12 > 1.0)
            v12 = 1.0;
          if (v11 >= v12)
            return HIDWORD(*(_QWORD *)v16);
        }
        else if (v10 != 1)
        {
          LODWORD(v6) = 0;
        }
      }
      else
      {
        LODWORD(v6) = 0;
      }
    }
  }
  return v6;
}

uint64_t re::pathprocessing::Bezier2::intersectLineSegment(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  size_t v8;
  __int128 __dst;
  _BYTE v10[8];
  _BYTE __src[8];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  result = geom_intersect_line_segment_quadratic_bezier_2f();
  if ((_DWORD)result)
  {
    v7 = result;
    *((_QWORD *)&__dst + 1) = result;
    v8 = 4 * result;
    memcpy(&__dst, __src, v8);
    *a3 = __dst;
    *((_QWORD *)&__dst + 1) = v7;
    memcpy(&__dst, v10, v8);
    *a4 = __dst;
    return 2;
  }
  return result;
}

uint64_t re::pathprocessing::Bezier2::intersectRay(re::pathprocessing::Bezier2 *a1, float32x2_t *a2, float32x2_t *a3)
{
  int32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  int32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x2_t v34;
  int32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  __int8 *v41;
  float32x2_t v42;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float v63;
  uint64_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float *p_src;
  float32x2_t v68;
  float v69;
  float v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76[4];
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  __int128 __dst;
  __int128 v81;
  float32x4_t v82;
  int32x4_t __src;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  uint64_t v87;

  if (re::pathprocessing::Bezier2::isPoint(a1))
    return *(_QWORD *)v76;
  if (re::pathprocessing::Bezier2::isLine((float32x2_t *)a1))
  {
    v9 = *(float32x2_t *)((char *)a1 + 16);
    v10 = vsub_f32(v9, *(float32x2_t *)a1);
    v11 = *a3;
    LODWORD(v12) = HIDWORD(*(unint64_t *)a3);
    if (fabsf(vmlas_n_f32((float)-v10.f32[1] * COERCE_FLOAT(*a3), v12, v10.f32[0])) >= 0.0001)
    {
      v13 = (int32x2_t)vsub_f32(*(float32x2_t *)a1, *a2);
      v14 = (int32x2_t)vsub_f32(v9, *a2);
      v15 = vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32(v13, v14), -v12), (float32x2_t)vzip2_s32(v13, v14), v11.f32[0]);
      v16 = vcgt_f32((float32x2_t)vdup_n_s32(0x38D1B717u), vabs_f32(v15));
      if ((v16.i8[4] & 1) != 0
        || (v16.i8[0] & 1) != 0
        || (veor_s8((int8x8_t)vdup_lane_s32((int32x2_t)v15, 1), (int8x8_t)v15).u32[0] & 0x80000000) != 0)
      {
        v17 = vdiv_f32(v15, vsub_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1))).f32[0];
        v18 = *(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32((float32x2_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), (float32x2_t)vdup_lane_s32((int32x2_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), 1))) & 1;
        v19 = 1.0;
        if ((float)((float)((float)((float)(*((float *)a1 + v18 + 4) * v17)
                                   + (float)(*((float *)a1 + v18) * (float)(1.0 - v17)))
                           - a2->f32[v18])
                   / a3->f32[v18]) >= -0.0001)
        {
          if (v17 <= 1.0)
            v19 = v17;
          if (v17 < 0.0)
            v19 = 0.0;
          v76[0] = v19;
        }
      }
    }
    return *(_QWORD *)v76;
  }
  v20 = 0;
  *(float32x2_t *)v8.f32 = *a2;
  v21 = *a3;
  v22 = vsub_f32(vadd_f32(*a3, *a2), *a2);
  *(float32x2_t *)v7.i8 = vmul_n_f32(v22, 1.0 / sqrtf(vaddv_f32(vmul_f32(v22, v22))));
  v23 = v8;
  v23.i32[0] = (__int32)*a2;
  v24 = vnegq_f32(v23);
  v24.i32[2] = 1.0;
  v25.i64[1] = 0;
  v27 = (float32x4_t)vtrn1q_s32((int32x4_t)0, v7);
  v25.i32[0] = v7.i32[0];
  v26.i32[3] = 0;
  __dst = xmmword_2260E5F10;
  v81 = xmmword_2260E5F20;
  v82 = v24;
  v27.i32[0] = v7.i32[1];
  do
  {
    v28 = *(float32x4_t *)((char *)&__dst + v20);
    v25.f32[1] = -*(float *)&v7.i32[1];
    v29 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v28.f32[0]), v27, *(float32x2_t *)v28.f32, 1), (float32x4_t)xmmword_2260E5F40, v28, 2);
    *(int32x4_t *)((char *)&__src + v20) = v29;
    v20 += 16;
  }
  while (v20 != 48);
  v72 = *(float32x2_t *)v8.f32;
  v30 = 0;
  v31 = (float32x4_t)__src;
  v32 = (float32x4_t)v84;
  v28.i64[0] = *(_QWORD *)a1;
  v29.i64[0] = *((_QWORD *)a1 + 1);
  v26.i64[0] = *((_QWORD *)a1 + 2);
  v28.i32[2] = 1.0;
  v29.i32[2] = 1.0;
  v26.i32[2] = 1.0;
  v33 = (float32x4_t)v85;
  __dst = (__int128)v28;
  v81 = (__int128)v29;
  v82 = v26;
  do
  {
    *(float32x4_t *)((char *)&__src + v30) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(__int128 *)((char *)&__dst + v30))), v32, *(float32x2_t *)((char *)&__dst + v30), 1), v33, *(float32x4_t *)((char *)&__dst + v30), 2);
    v30 += 16;
  }
  while (v30 != 48);
  v77 = vdiv_f32(*(float32x2_t *)__src.i8, (float32x2_t)vdup_laneq_s32(__src, 2));
  v78 = vdiv_f32(*(float32x2_t *)v84.i8, (float32x2_t)vdup_laneq_s32(v84, 2));
  v73 = v78;
  v74 = v77;
  v75 = vdiv_f32(*(float32x2_t *)v85.i8, (float32x2_t)vdup_laneq_s32(v85, 2));
  v79 = v75;
  if (re::pathprocessing::Bezier2::isLine(&v77))
  {
    if (v74.f32[1] == 0.0 && v75.f32[1] == 0.0)
      return *(_QWORD *)v76;
    v36 = vsub_f32(v75, v74);
    v37 = (float32x2_t)vdup_lane_s32((int32x2_t)v36, 0);
    v37.f32[0] = v74.f32[0] + 1.0;
    v36.i32[0] = v74.i32[1];
    v38 = vmla_f32(vmul_f32(v37, (float32x2_t)0x80000000), (float32x2_t)0xC000000040000000, v36);
    v39 = vdiv_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1)).f32[0];
    if (v39 <= 0.0 || v39 >= 1.0)
      return *(_QWORD *)v76;
    *(float *)&__dst = v39;
    __src.i64[0] = __dst;
    __src.i64[1] = 1;
    v41 = &__src.i8[4];
    v42 = v72;
    goto LABEL_47;
  }
  _V6.S[1] = v73.i32[1];
  _S2 = -2.0;
  __asm { FMLA            S0, S2, V6.S[1] }
  *(float *)v34.i32 = (float)(v74.f32[1] - v73.f32[1]) / (float)(_S0 + v75.f32[1]);
  if (*(float *)v34.i32 > 0.0 && *(float *)v34.i32 < 1.0)
  {
    *(float *)v35.i32 = 1.0 - *(float *)v34.i32;
    v53 = (float32x2_t)vdup_lane_s32(v35, 0);
    v54 = (float32x2_t)vdup_lane_s32(v34, 0);
    v70 = 1.0 - *(float *)v34.i32;
    v71 = (float)(v74.f32[1] - v73.f32[1]) / (float)(_S0 + v75.f32[1]);
    v55 = vadd_f32(vmul_n_f32(v75, *(float *)v34.i32 * *(float *)v34.i32), vadd_f32(vmul_n_f32(v74, *(float *)v35.i32 * *(float *)v35.i32), vmul_n_f32(v73, (float)(*(float *)v34.i32 + *(float *)v34.i32) * (float)(1.0 - *(float *)v34.i32))));
    *(float32x2_t *)__src.i8 = v74;
    __src.u64[1] = (unint64_t)vadd_f32(vmul_n_f32(v73, *(float *)v34.i32), vmul_n_f32(v74, 1.0 - *(float *)v34.i32));
    *(float32x2_t *)v84.i8 = v55;
    v86 = re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic((re::pathprocessing::Bezier2 *)&__src, *(float *)&__src.i32[2]);
    v87 = v56;
    if (v56)
    {
      v57 = 0;
      v58 = 4 * v56;
      do
      {
        v59 = v57 + 1;
        *((float *)&__dst + v57) = v71 * *((float *)&v86 + v57);
        ++v57;
        v58 -= 4;
      }
      while (v58);
    }
    else
    {
      v59 = 0;
    }
    *(float32x2_t *)__src.i8 = v55;
    __src.u64[1] = (unint64_t)vadd_f32(vmul_f32(v75, v54), vmul_f32(v73, v53));
    *(float32x2_t *)v84.i8 = v75;
    v86 = re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic((re::pathprocessing::Bezier2 *)&__src, *(float *)&__src.i32[2]);
    v87 = v60;
    if (v60)
    {
      v61 = 4 * v60;
      v62 = (float *)&v86;
      v42 = v72;
      do
      {
        v63 = *v62++;
        v52 = v59 + 1;
        *((float *)&__dst + v59++) = v71 + (float)(v63 * v70);
        v61 -= 4;
      }
      while (v61);
      goto LABEL_45;
    }
    v52 = v59;
  }
  else
  {
    __src.i64[0] = re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic((re::pathprocessing::Bezier2 *)&v77, 1.0);
    __src.i64[1] = v50;
    if (v50)
    {
      v51 = (v50 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      memcpy(&__dst, &__src, 4 * (v50 - 1) + 4);
      v52 = v51 + 1;
    }
    else
    {
      v52 = 0;
    }
  }
  v42 = v72;
LABEL_45:
  __src.i64[0] = __dst;
  __src.i64[1] = v52;
  if (!v52)
    return *(_QWORD *)v76;
  v41 = &__src.i8[4 * v52];
LABEL_47:
  v64 = 0;
  v65 = *(float32x2_t *)a1;
  v66 = *(float32x2_t *)((char *)a1 + 8);
  p_src = (float *)&__src;
  v68 = *(float32x2_t *)((char *)a1 + 16);
  do
  {
    v69 = *p_src;
    if (vaddv_f32(vmul_f32(v21, vsub_f32(vadd_f32(vmul_n_f32(v68, v69 * v69), vadd_f32(vmul_n_f32(v65, (float)(1.0 - *p_src) * (float)(1.0 - *p_src)), vmul_n_f32(v66, (float)(v69 + v69) * (float)(1.0 - *p_src)))), v42))) > 0.0)v76[v64++] = v69;
    ++p_src;
  }
  while (p_src != (float *)v41);
  return *(_QWORD *)v76;
}

uint64_t re::pathprocessing::Bezier2::intersectCurveWithCurve(float32x2_t *a1, float32x2_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float v13;
  float32x2_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float32x2_t v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t result;
  double *v36;
  uint64_t v37;
  float v38;
  uint32x2_t v39;
  uint32x2_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  int *v47;
  int *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE v57[8];
  uint64_t v58;

  v10 = vsub_f32(a2[1], *a2);
  v11 = vsub_f32(a2[2], *a2);
  v12 = 1.0 / vmlas_n_f32((float)-v10.f32[1] * v11.f32[0], v11.f32[1], v10.f32[0]);
  v13 = 0.5 / vaddv_f32(vmul_f32(v10, v10));
  v11.f32[0] = 1.0 - (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v11, 1), v10.f32[0], v11.f32[0]) * v13);
  v14 = vsub_f32(*a1, *a2);
  v15 = v12 * vmlas_n_f32((float)-v10.f32[1] * v14.f32[0], v14.f32[1], v10.f32[0]);
  v16 = (float)(v11.f32[0] * v15)
      + (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v14, 1), v10.f32[0], v14.f32[0]) * v13);
  v17 = vsub_f32(a1[1], *a2);
  v18 = v12 * vmlas_n_f32((float)-v10.f32[1] * v17.f32[0], v17.f32[1], v10.f32[0]);
  v19 = (float)(v11.f32[0] * v18)
      + (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v17, 1), v10.f32[0], v17.f32[0]) * v13);
  v20 = vsub_f32(a1[2], *a2);
  v21 = v12 * vmlas_n_f32((float)-v10.f32[1] * v20.f32[0], v20.f32[1], v10.f32[0]);
  v22 = (float)(v11.f32[0] * v21)
      + (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v20, 1), v10.f32[0], v20.f32[0]) * v13);
  v23 = v16;
  v24 = v15;
  v25 = v19;
  v26 = v18;
  v27 = v21;
  if (fabs(v16 + v19 * -2.0 + v22) < 0.005
    && ((v28 = v25 + v25 + v23 * -2.0, v29 = v24 + v26 * -2.0 + v27,
                                       v30 = v28 * v28,
                                       v31 = v29 / (v28 * v28),
                                       v31 == 1.0)
     || fabs(v31 + -1.0) <= 0.005)
    && ((v32 = v26 + v26 + v24 * -2.0, v33 = (v29 + v29) * v23 / v30, v33 - v32 / v28 == 0.0)
     || vabdd_f64(v33, v32 / v28) <= 0.005)
    && ((v34 = v23 * v23 * v29 / v30 - v32 * v23 / v28 + v24, v34 == 0.0) || fabs(v34) <= 0.005))
  {
    v54 = 0;
    v58 = 0;
    result = re::pathprocessing::LineSegment::rangeOverlaps((uint64_t)&v53, (uint64_t)v57, v16, v22, 0.0, 1.0);
    v46 = v54;
    if (v54)
    {
      v47 = (int *)v57;
      v48 = (int *)&v53;
      do
      {
        v49 = *v48++;
        v50 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v50 + 1;
        *(_DWORD *)(a3 + 4 * v50) = v49;
        v51 = *v47++;
        v52 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(a4 + 8) = v52 + 1;
        *(_DWORD *)(a4 + 4 * v52) = v51;
        --v46;
      }
      while (v46);
    }
  }
  else
  {
    re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)&v53, v23 * 4.0 * v25 - v23 * v23 + v23 * -2.0 * v22 + v25 * -4.0 * v25 + v25 * 4.0 * v22 - v22 * v22, v23 * -12.0 * v25 + v23 * 4.0 * v23 + v22 * 4.0 * v23 + v25 * 8.0 * v25 + v22 * -4.0 * v25, v23 * 12.0 * v25 + v23 * -6.0 * v23 + v22 * -2.0 * v23 + v25 * -4.0 * v25 + v24 + v26 * -2.0 + v27, v25 * -4.0 * v23 + v23 * 4.0 * v23 + v24 * -2.0 + v26 * 2.0, v24 - v23 * v23);
    if (v56)
    {
      result = 0;
      v36 = (double *)&v55;
      v37 = 8 * v56;
      do
      {
        v38 = *v36;
        if (fabsf(v38) >= 0.0001
          || (v39 = (uint32x2_t)vceq_f32(a2[2], *a1), (vpmin_u32(v39, v39).u32[0] & 0x80000000) == 0))
        {
          if (v38 != 1.0 && fabsf(v38 + -1.0) > 0.0001
            || (v40 = (uint32x2_t)vceq_f32(a1[2], *a2), (vpmin_u32(v40, v40).u32[0] & 0x80000000) == 0))
          {
            v41 = (float)(v22 * (float)(v38 * v38))
                + (float)((float)(v16 * (float)((float)(1.0 - v38) * (float)(1.0 - v38)))
                        + (float)(v19 * (float)((float)(v38 + v38) * (float)(1.0 - v38))));
            if (a5 == 1
              || (v38 > 0.0 ? (v44 = v38 < 1.0) : (v44 = 0), v44 && (v41 > 0.0 ? (v45 = v41 < 1.0) : (v45 = 0), v45)))
            {
              v42 = *(_QWORD *)(a3 + 8);
              *(_QWORD *)(a3 + 8) = v42 + 1;
              *(float *)(a3 + 4 * v42) = v38;
              v43 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)(a4 + 8) = v43 + 1;
              *(float *)(a4 + 4 * v43) = v41;
              result = 2;
            }
          }
        }
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::pathprocessing::Polynomial::setCoefficients(re::pathprocessing::Polynomial *this, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  __double2 v20;
  double v21;
  int v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v36;
  double v37;
  double v38;
  double v39;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  long double v49;
  double v50;
  long double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double v60;

  *((_DWORD *)this + 19) = 0;
  *(double *)this = a6;
  *((double *)this + 1) = a5;
  *((double *)this + 2) = a4;
  *((double *)this + 3) = a3;
  *((double *)this + 4) = a2;
  v7 = 4;
  while (fabs(*((double *)this + v7)) < 0.00001)
  {
    *((_QWORD *)this + v7--) = 0;
    if (v7 == -1)
    {
      *((_DWORD *)this + 18) = 0;
      return;
    }
  }
  *((_DWORD *)this + 18) = v7;
  switch((int)v7)
  {
    case 1:
      v8 = *((double *)this + 1);
      if (v8 != 0.0)
      {
        v9 = -*(double *)this / v8;
        *((_DWORD *)this + 19) = 1;
        *((double *)this + 5) = v9;
      }
      return;
    case 2:
      v24 = *((double *)this + 2);
      v25 = *((double *)this + 1) / v24;
      v26 = *(double *)this / v24 * -4.0 + v25 * v25;
      if (v26 > 0.0)
      {
        v27 = sqrt(v26);
        *((double *)this + 5) = (v27 - v25) * 0.5;
        v21 = (-v25 - v27) * 0.5;
        v22 = 2;
        v23 = 1;
        goto LABEL_38;
      }
      if (v26 == 0.0)
      {
        v23 = 0;
        v21 = v25 * -0.5;
        goto LABEL_37;
      }
      return;
    case 3:
      v10 = *((double *)this + 3);
      v11 = *((double *)this + 2) / v10;
      v12 = *((double *)this + 1) / v10;
      v13 = v12 + v11 * v11 / -3.0;
      v14 = *(double *)this / v10 + v11 * (v12 * -9.0 + (v11 + v11) * v11) / 27.0;
      v15 = v13 * (v13 * v13);
      v16 = v15 * 4.0 / 27.0 + v14 * v14;
      v17 = v11 / -3.0;
      if (v16 >= 0.0)
      {
        v48 = sqrt(v16);
        v49 = (-v14 - v48) * 0.5;
        v50 = cbrt((v48 - v14) * 0.5);
        v51 = cbrt(v49);
        v23 = 0;
        v21 = v17 + v50 + v51;
LABEL_37:
        v22 = 1;
      }
      else
      {
        v18 = sqrt(v13 / -3.0);
        v19 = acos(v14 * sqrt(-27.0 / v15) * -0.5);
        v20 = __sincos_stret(v19 / 3.0);
        *((double *)this + 5) = v17 + v18 * (v20.__cosval + v20.__cosval);
        *((double *)this + 6) = v17 - v18 * (v20.__cosval + v20.__sinval * 1.73205081);
        v21 = v17 + v18 * (v20.__sinval * 1.73205081 - v20.__cosval);
        v22 = 3;
        v23 = 2;
      }
LABEL_38:
      *((_DWORD *)this + 19) = v22;
      *((double *)this + v23 + 5) = v21;
      return;
    case 4:
      v28 = *((double *)this + 4);
      v29 = *((double *)this + 3) / v28;
      v30 = *((double *)this + 2) / v28;
      v31 = *((double *)this + 1) / v28;
      v32 = *(double *)this / v28;
      v33 = v32 * -4.0;
      re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)&v59, 0.0, 1.0, -v30, v32 * -4.0 + v29 * v31, v30 * 4.0 * v32 + -(v29 * v29) * v32 - v31 * v31);
      v34 = v29 * v29 * 0.25 - v30 + v60;
      if (fabs(v34) <= 0.00001 || v34 == 0.0)
        v34 = 0.0;
      if (v34 <= 0.0)
      {
        if (v34 >= 0.0)
        {
          v52 = v33 + v60 * v60;
          if (v52 == 0.0 || fabs(v52) <= 0.00001)
          {
            if (v52 < 0.0)
              v52 = 0.0;
            v53 = sqrt(v52);
            v54 = v53 + v53;
            v55 = v29 * (v29 * 3.0) * 0.25 + v30 * -2.0;
            if (v55 + v54 > 0.00001)
            {
              v56 = sqrt(v55 + v54) * 0.5;
              v57 = *((unsigned int *)this + 19);
              *((double *)this + v57 + 5) = v29 * -0.25 + v56;
              *((_DWORD *)this + 19) = v57 + 2;
              *((double *)this + (v57 + 1) + 5) = v29 * -0.25 - v56;
            }
            v58 = v55 - v54;
            if (v58 > 0.00001)
            {
              v47 = sqrt(v58) * 0.5 + v29 * -0.25;
              v46 = *((unsigned int *)this + 19);
              *((double *)this + v46 + 5) = v47;
              goto LABEL_33;
            }
          }
        }
      }
      else
      {
        v36 = sqrt(v34);
        v37 = v29 * (v29 * 3.0) * 0.25 - v36 * v36 + v30 * -2.0;
        v38 = (v31 * -8.0 + v29 * 4.0 * v30 - v29 * v29 * v29) / (v36 * 4.0);
        v39 = v37 + v38;
        if (fabs(v37 + v38) <= 0.00001 || v39 == 0.0)
          v39 = 0.0;
        if (vabdd_f64(v37, v38) <= 0.00001 || v37 - v38 == 0.0)
          v42 = 0.0;
        else
          v42 = v37 - v38;
        if (v39 >= 0.0)
        {
          v43 = sqrt(v39);
          v44 = *((unsigned int *)this + 19);
          *((double *)this + v44 + 5) = v29 * -0.25 + (v36 + v43) * 0.5;
          *((_DWORD *)this + 19) = v44 + 2;
          *((double *)this + (v44 + 1) + 5) = v29 * -0.25 + (v36 - v43) * 0.5;
        }
        if (v42 >= 0.0)
        {
          v45 = sqrt(v42);
          v46 = *((unsigned int *)this + 19);
          *((double *)this + v46 + 5) = v29 * -0.25 + (v45 - v36) * 0.5;
          v47 = v29 * -0.25 - (v36 + v45) * 0.5;
LABEL_33:
          *((_DWORD *)this + 19) = v46 + 2;
          *((double *)this + (v46 + 1) + 5) = v47;
        }
      }
      return;
    default:
      return;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  float v30;
  float v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  unint64_t v39;
  float v40;
  float *v41;
  float *v42;
  float v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  float v47;
  float v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 *v55;
  __int128 *v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  float *v77;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  float *v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  float v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  float v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v125;
  float v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  float v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int v140;
  int v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  int v177;
  int v178;
  __int128 v179;
  int v180;

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v3 = a2[2];
  v4 = a3[2];
  if (v3 >= result[2])
  {
    if (v4 < v3)
    {
      v13 = *((_OWORD *)a2 + 2);
      v12 = *((_OWORD *)a2 + 3);
      v15 = *(_OWORD *)a2;
      v14 = *((_OWORD *)a2 + 1);
      v16 = *((_OWORD *)a3 + 3);
      v18 = *(_OWORD *)a3;
      v17 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v16;
      *(_OWORD *)a2 = v18;
      *((_OWORD *)a2 + 1) = v17;
      *(_OWORD *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      *((_OWORD *)a3 + 2) = v13;
      *((_OWORD *)a3 + 3) = v12;
      if (a2[2] < result[2])
      {
        v20 = *((_OWORD *)result + 2);
        v19 = *((_OWORD *)result + 3);
        v22 = *(_OWORD *)result;
        v21 = *((_OWORD *)result + 1);
        v23 = *((_OWORD *)a2 + 3);
        v25 = *(_OWORD *)a2;
        v24 = *((_OWORD *)a2 + 1);
        *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)result + 3) = v23;
        *(_OWORD *)result = v25;
        *((_OWORD *)result + 1) = v24;
        *(_OWORD *)a2 = v22;
        *((_OWORD *)a2 + 1) = v21;
        *((_OWORD *)a2 + 2) = v20;
        *((_OWORD *)a2 + 3) = v19;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v27 = *((_OWORD *)result + 2);
      v26 = *((_OWORD *)result + 3);
      v29 = *(_OWORD *)result;
      v28 = *((_OWORD *)result + 1);
      v30 = *((_OWORD *)a2 + 3);
      v32 = *(_OWORD *)a2;
      v31 = *((_OWORD *)a2 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)result + 3) = v30;
      *(_OWORD *)result = v32;
      *((_OWORD *)result + 1) = v31;
      *(_OWORD *)a2 = v29;
      *((_OWORD *)a2 + 1) = v28;
      *((_OWORD *)a2 + 2) = v27;
      *((_OWORD *)a2 + 3) = v26;
      if (a3[2] >= a2[2])
        return result;
      v6 = *((_OWORD *)a2 + 2);
      v5 = *((_OWORD *)a2 + 3);
      v8 = *(_OWORD *)a2;
      v7 = *((_OWORD *)a2 + 1);
      v33 = *((_OWORD *)a3 + 3);
      v35 = *(_OWORD *)a3;
      v34 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v33;
      *(_OWORD *)a2 = v35;
      *((_OWORD *)a2 + 1) = v34;
    }
    else
    {
      v6 = *((_OWORD *)result + 2);
      v5 = *((_OWORD *)result + 3);
      v8 = *(_OWORD *)result;
      v7 = *((_OWORD *)result + 1);
      v9 = *((_OWORD *)a3 + 3);
      v11 = *(_OWORD *)a3;
      v10 = *((_OWORD *)a3 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)result + 3) = v9;
      *(_OWORD *)result = v11;
      *((_OWORD *)result + 1) = v10;
    }
    *(_OWORD *)a3 = v8;
    *((_OWORD *)a3 + 1) = v7;
    *((_OWORD *)a3 + 2) = v6;
    *((_OWORD *)a3 + 3) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 56) < *(float *)(a1 + 8))
      {
        v7 = *(_OWORD *)(a1 + 32);
        v6 = *(_OWORD *)(a1 + 48);
        v9 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v10 = *(_OWORD *)(a2 - 16);
        v12 = *(_OWORD *)(a2 - 64);
        v11 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 48) = v10;
        *(_OWORD *)a1 = v12;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a2 - 64) = v9;
        *(_OWORD *)(a2 - 48) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (__int128 *)(a2 - 64));
      return 1;
    case 5:
      v24 = (__int128 *)(a1 + 64);
      v25 = (__int128 *)(a1 + 128);
      v26 = (__int128 *)(a1 + 192);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (__int128 *)(a1 + 192));
      if (*(float *)(a2 - 56) >= *(float *)(a1 + 200))
        return 1;
      v28 = *(_OWORD *)(a1 + 224);
      v27 = *(_OWORD *)(a1 + 240);
      v30 = *v26;
      v29 = *(_OWORD *)(a1 + 208);
      v31 = *(_OWORD *)(a2 - 16);
      v33 = *(_OWORD *)(a2 - 64);
      v32 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 240) = v31;
      *v26 = v33;
      *(_OWORD *)(a1 + 208) = v32;
      *(_OWORD *)(a2 - 64) = v30;
      *(_OWORD *)(a2 - 48) = v29;
      *(_OWORD *)(a2 - 32) = v28;
      *(_OWORD *)(a2 - 16) = v27;
      if (*(float *)(a1 + 200) >= *(float *)(a1 + 136))
        return 1;
      v35 = *(_OWORD *)(a1 + 160);
      v34 = *(_OWORD *)(a1 + 176);
      v37 = *v25;
      v36 = *(_OWORD *)(a1 + 144);
      v38 = *(_OWORD *)(a1 + 208);
      *v25 = *v26;
      *(_OWORD *)(a1 + 144) = v38;
      v39 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 176) = v39;
      *v26 = v37;
      *(_OWORD *)(a1 + 208) = v36;
      *(_OWORD *)(a1 + 224) = v35;
      *(_OWORD *)(a1 + 240) = v34;
      if (*(float *)(a1 + 136) >= *(float *)(a1 + 72))
        return 1;
      v41 = *(_OWORD *)(a1 + 96);
      v40 = *(_OWORD *)(a1 + 112);
      v43 = *v24;
      v42 = *(_OWORD *)(a1 + 80);
      v44 = *(_OWORD *)(a1 + 144);
      *v24 = *v25;
      *(_OWORD *)(a1 + 80) = v44;
      v45 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 112) = v45;
      *v25 = v43;
      *(_OWORD *)(a1 + 144) = v42;
      *(_OWORD *)(a1 + 160) = v41;
      *(_OWORD *)(a1 + 176) = v40;
      if (*(float *)(a1 + 72) >= *(float *)(a1 + 8))
        return 1;
      v47 = *(_OWORD *)(a1 + 32);
      v46 = *(_OWORD *)(a1 + 48);
      v49 = *(_OWORD *)a1;
      v48 = *(_OWORD *)(a1 + 16);
      v50 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v50;
      v51 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + 48) = v51;
      *v24 = v49;
      *(_OWORD *)(a1 + 80) = v48;
      result = 1;
      *(_OWORD *)(a1 + 96) = v47;
      *(_OWORD *)(a1 + 112) = v46;
      return result;
    default:
      v13 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128));
      v14 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(float *)(v14 + 8);
    if (v17 < *(float *)(v13 + 8))
    {
      v18 = *(_QWORD *)v14;
      v52 = *(_OWORD *)(v14 + 12);
      v53 = *(_OWORD *)(v14 + 28);
      v54 = *(_OWORD *)(v14 + 44);
      v55 = *(_DWORD *)(v14 + 60);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        v22 = *(_OWORD *)(a1 + v19 + 176);
        *(_OWORD *)(v20 + 224) = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 240) = v22;
        if (v19 == -128)
          break;
        v19 -= 64;
        if (v17 >= *(float *)(v20 + 72))
        {
          v23 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      v23 = a1;
LABEL_12:
      *(_QWORD *)v23 = v18;
      *(float *)(v23 + 8) = v17;
      *(_OWORD *)(v23 + 12) = v52;
      *(_OWORD *)(v23 + 28) = v53;
      *(_OWORD *)(v23 + 44) = v54;
      *(_DWORD *)(v23 + 60) = v55;
      if (++v16 == 8)
        return v14 + 64 == a2;
    }
    v13 = v14;
    v15 += 64;
    v14 += 64;
    if (v14 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *a1, float *a2, float *a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, a2, a3);
  result.n128_u32[0] = *((_DWORD *)a4 + 2);
  if (result.n128_f32[0] < a3[2])
  {
    v9 = *((_OWORD *)a3 + 2);
    result = *(__n128 *)(a3 + 12);
    v11 = *(_OWORD *)a3;
    v10 = *((_OWORD *)a3 + 1);
    v12 = a4[3];
    v14 = *a4;
    v13 = a4[1];
    *((_OWORD *)a3 + 2) = a4[2];
    *((_OWORD *)a3 + 3) = v12;
    *(_OWORD *)a3 = v14;
    *((_OWORD *)a3 + 1) = v13;
    *a4 = v11;
    a4[1] = v10;
    a4[2] = v9;
    a4[3] = (__int128)result;
    result.n128_f32[0] = a3[2];
    if (result.n128_f32[0] < a2[2])
    {
      v15 = *((_OWORD *)a2 + 2);
      result = *(__n128 *)(a2 + 12);
      v17 = *(_OWORD *)a2;
      v16 = *((_OWORD *)a2 + 1);
      v18 = *((_OWORD *)a3 + 3);
      v20 = *(_OWORD *)a3;
      v19 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v18;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v19;
      *(_OWORD *)a3 = v17;
      *((_OWORD *)a3 + 1) = v16;
      *((_OWORD *)a3 + 2) = v15;
      *((__n128 *)a3 + 3) = result;
      result.n128_f32[0] = a2[2];
      if (result.n128_f32[0] < a1[2])
      {
        v21 = *((_OWORD *)a1 + 2);
        result = *(__n128 *)(a1 + 12);
        v23 = *(_OWORD *)a1;
        v22 = *((_OWORD *)a1 + 1);
        v24 = *((_OWORD *)a2 + 3);
        v26 = *(_OWORD *)a2;
        v25 = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v24;
        *(_OWORD *)a1 = v26;
        *((_OWORD *)a1 + 1) = v25;
        *(_OWORD *)a2 = v23;
        *((_OWORD *)a2 + 1) = v22;
        *((_OWORD *)a2 + 2) = v21;
        *((__n128 *)a2 + 3) = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  float *v20;
  float v21;
  float v22;
  float *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  float v33;
  unint64_t v34;
  float *v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float *v45;
  float v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  float *v53;
  float v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  float *v74;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  float *v79;
  float v80;
  uint64_t v81;
  float *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  float *v113;
  float v114;
  float *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v120;
  float v121;
  float *v122;
  __int128 v123;
  __int128 v124;
  float v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[28];
  _BYTE v133[28];
  _BYTE v134[28];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[28];
  _BYTE v160[28];
  __int128 v161;
  _BYTE v162[28];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v13 = *((_OWORD *)a2 + 2);
      v12 = *((_OWORD *)a2 + 3);
      v15 = *(_OWORD *)a2;
      v14 = *((_OWORD *)a2 + 1);
      v16 = *((_OWORD *)a3 + 3);
      v18 = *(_OWORD *)a3;
      v17 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v16;
      *(_OWORD *)a2 = v18;
      *((_OWORD *)a2 + 1) = v17;
      *(_OWORD *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      *((_OWORD *)a3 + 2) = v13;
      *((_OWORD *)a3 + 3) = v12;
      if (*a2 < *result)
      {
        v20 = *((_OWORD *)result + 2);
        v19 = *((_OWORD *)result + 3);
        v22 = *(_OWORD *)result;
        v21 = *((_OWORD *)result + 1);
        v23 = *((_OWORD *)a2 + 3);
        v25 = *(_OWORD *)a2;
        v24 = *((_OWORD *)a2 + 1);
        *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)result + 3) = v23;
        *(_OWORD *)result = v25;
        *((_OWORD *)result + 1) = v24;
        *(_OWORD *)a2 = v22;
        *((_OWORD *)a2 + 1) = v21;
        *((_OWORD *)a2 + 2) = v20;
        *((_OWORD *)a2 + 3) = v19;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v27 = *((_OWORD *)result + 2);
      v26 = *((_OWORD *)result + 3);
      v29 = *(_OWORD *)result;
      v28 = *((_OWORD *)result + 1);
      v30 = *((_OWORD *)a2 + 3);
      v32 = *(_OWORD *)a2;
      v31 = *((_OWORD *)a2 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)result + 3) = v30;
      *(_OWORD *)result = v32;
      *((_OWORD *)result + 1) = v31;
      *(_OWORD *)a2 = v29;
      *((_OWORD *)a2 + 1) = v28;
      *((_OWORD *)a2 + 2) = v27;
      *((_OWORD *)a2 + 3) = v26;
      if (*a3 >= *a2)
        return result;
      v6 = *((_OWORD *)a2 + 2);
      v5 = *((_OWORD *)a2 + 3);
      v8 = *(_OWORD *)a2;
      v7 = *((_OWORD *)a2 + 1);
      v33 = *((_OWORD *)a3 + 3);
      v35 = *(_OWORD *)a3;
      v34 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v33;
      *(_OWORD *)a2 = v35;
      *((_OWORD *)a2 + 1) = v34;
    }
    else
    {
      v6 = *((_OWORD *)result + 2);
      v5 = *((_OWORD *)result + 3);
      v8 = *(_OWORD *)result;
      v7 = *((_OWORD *)result + 1);
      v9 = *((_OWORD *)a3 + 3);
      v11 = *(_OWORD *)a3;
      v10 = *((_OWORD *)a3 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)result + 3) = v9;
      *(_OWORD *)result = v11;
      *((_OWORD *)result + 1) = v10;
    }
    *(_OWORD *)a3 = v8;
    *((_OWORD *)a3 + 1) = v7;
    *((_OWORD *)a3 + 2) = v6;
    *((_OWORD *)a3 + 3) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float *v26;
  __int128 *v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[28];

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 64);
      if (*(float *)(a2 - 64) < *(float *)a1)
      {
        v8 = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a1 + 48);
        v10 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v11 = *(_OWORD *)(a2 - 16);
        v13 = *v6;
        v12 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a1 + 16) = v12;
        *v6 = v10;
        *(_OWORD *)(a2 - 48) = v9;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (__int128 *)(a2 - 64));
      return 1;
    case 5:
      v24 = (float *)(a1 + 64);
      v25 = (float *)(a1 + 128);
      v26 = (float *)(a1 + 192);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (__int128 *)(a1 + 192));
      v28 = *(float *)(a2 - 64);
      v27 = (__int128 *)(a2 - 64);
      if (v28 >= *(float *)(a1 + 192))
        return 1;
      v30 = *(_OWORD *)(a1 + 224);
      v29 = *(_OWORD *)(a1 + 240);
      v32 = *(_OWORD *)v26;
      v31 = *(_OWORD *)(a1 + 208);
      v33 = v27[3];
      v35 = *v27;
      v34 = v27[1];
      *(_OWORD *)(a1 + 224) = v27[2];
      *(_OWORD *)(a1 + 240) = v33;
      *(_OWORD *)v26 = v35;
      *(_OWORD *)(a1 + 208) = v34;
      *v27 = v32;
      v27[1] = v31;
      v27[2] = v30;
      v27[3] = v29;
      if (*v26 >= *v25)
        return 1;
      v37 = *(_OWORD *)(a1 + 160);
      v36 = *(_OWORD *)(a1 + 176);
      v39 = *(_OWORD *)v25;
      v38 = *(_OWORD *)(a1 + 144);
      v40 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 144) = v40;
      v41 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 176) = v41;
      *(_OWORD *)v26 = v39;
      *(_OWORD *)(a1 + 208) = v38;
      *(_OWORD *)(a1 + 224) = v37;
      *(_OWORD *)(a1 + 240) = v36;
      if (*v25 >= *v24)
        return 1;
      v43 = *(_OWORD *)(a1 + 96);
      v42 = *(_OWORD *)(a1 + 112);
      v45 = *(_OWORD *)v24;
      v44 = *(_OWORD *)(a1 + 80);
      v46 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 80) = v46;
      v47 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 112) = v47;
      *(_OWORD *)v25 = v45;
      *(_OWORD *)(a1 + 144) = v44;
      *(_OWORD *)(a1 + 160) = v43;
      *(_OWORD *)(a1 + 176) = v42;
      if (*(float *)(a1 + 64) >= *(float *)a1)
        return 1;
      v49 = *(_OWORD *)(a1 + 32);
      v48 = *(_OWORD *)(a1 + 48);
      v51 = *(_OWORD *)a1;
      v50 = *(_OWORD *)(a1 + 16);
      v52 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 16) = v52;
      v53 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + 48) = v53;
      *(_OWORD *)v24 = v51;
      *(_OWORD *)(a1 + 80) = v50;
      result = 1;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v48;
      return result;
    default:
      v14 = (float *)(a1 + 128);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128));
      v15 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(float *)v15;
    if (*(float *)v15 < *v14)
    {
      v54 = *(_OWORD *)(v15 + 4);
      v55 = *(_OWORD *)(v15 + 20);
      *(_OWORD *)v56 = *(_OWORD *)(v15 + 36);
      *(_OWORD *)&v56[12] = *(_OWORD *)(v15 + 48);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        v22 = *(_OWORD *)(a1 + v19 + 176);
        *(_OWORD *)(v20 + 224) = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 240) = v22;
        if (v19 == -128)
          break;
        v19 -= 64;
        if (v18 >= *(float *)(v20 + 64))
        {
          v23 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      v23 = a1;
LABEL_12:
      *(float *)v23 = v18;
      *(_OWORD *)(v23 + 4) = v54;
      *(_OWORD *)(v23 + 20) = v55;
      *(_OWORD *)(v23 + 36) = *(_OWORD *)v56;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)&v56[12];
      if (++v17 == 8)
        return v15 + 64 == a2;
    }
    v14 = (float *)v15;
    v16 += 64;
    v15 += 64;
    if (v15 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *a1, float *a2, float *a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, a2, a3);
  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 < *a3)
  {
    v9 = *((_OWORD *)a3 + 2);
    result = *(__n128 *)(a3 + 12);
    v11 = *(_OWORD *)a3;
    v10 = *((_OWORD *)a3 + 1);
    v12 = a4[3];
    v14 = *a4;
    v13 = a4[1];
    *((_OWORD *)a3 + 2) = a4[2];
    *((_OWORD *)a3 + 3) = v12;
    *(_OWORD *)a3 = v14;
    *((_OWORD *)a3 + 1) = v13;
    *a4 = v11;
    a4[1] = v10;
    a4[2] = v9;
    a4[3] = (__int128)result;
    result.n128_f32[0] = *a3;
    if (*a3 < *a2)
    {
      v15 = *((_OWORD *)a2 + 2);
      result = *(__n128 *)(a2 + 12);
      v17 = *(_OWORD *)a2;
      v16 = *((_OWORD *)a2 + 1);
      v18 = *((_OWORD *)a3 + 3);
      v20 = *(_OWORD *)a3;
      v19 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v18;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v19;
      *(_OWORD *)a3 = v17;
      *((_OWORD *)a3 + 1) = v16;
      *((_OWORD *)a3 + 2) = v15;
      *((__n128 *)a3 + 3) = result;
      result.n128_f32[0] = *a2;
      if (*a2 < *a1)
      {
        v21 = *((_OWORD *)a1 + 2);
        result = *(__n128 *)(a1 + 12);
        v23 = *(_OWORD *)a1;
        v22 = *((_OWORD *)a1 + 1);
        v24 = *((_OWORD *)a2 + 3);
        v26 = *(_OWORD *)a2;
        v25 = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v24;
        *(_OWORD *)a1 = v26;
        *((_OWORD *)a1 + 1) = v25;
        *(_OWORD *)a2 = v23;
        *((_OWORD *)a2 + 1) = v22;
        *((_OWORD *)a2 + 2) = v21;
        *((__n128 *)a2 + 3) = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  float *v20;
  float v21;
  float v22;
  float *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  float v33;
  unint64_t v34;
  float *v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float *v45;
  float v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  float *v53;
  float v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  float *v74;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  float *v79;
  float v80;
  uint64_t v81;
  float *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  float *v113;
  float v114;
  float *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v120;
  float v121;
  float *v122;
  __int128 v123;
  __int128 v124;
  float v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[28];
  _BYTE v133[28];
  _BYTE v134[28];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[28];
  _BYTE v160[28];
  __int128 v161;
  _BYTE v162[28];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float *v26;
  __int128 *v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[28];

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 64);
      if (*(float *)(a2 - 64) < *(float *)a1)
      {
        v8 = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a1 + 48);
        v10 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v11 = *(_OWORD *)(a2 - 16);
        v13 = *v6;
        v12 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a1 + 16) = v12;
        *v6 = v10;
        *(_OWORD *)(a2 - 48) = v9;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (__int128 *)(a2 - 64));
      return 1;
    case 5:
      v24 = (float *)(a1 + 64);
      v25 = (float *)(a1 + 128);
      v26 = (float *)(a1 + 192);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (__int128 *)(a1 + 192));
      v28 = *(float *)(a2 - 64);
      v27 = (__int128 *)(a2 - 64);
      if (v28 >= *(float *)(a1 + 192))
        return 1;
      v30 = *(_OWORD *)(a1 + 224);
      v29 = *(_OWORD *)(a1 + 240);
      v32 = *(_OWORD *)v26;
      v31 = *(_OWORD *)(a1 + 208);
      v33 = v27[3];
      v35 = *v27;
      v34 = v27[1];
      *(_OWORD *)(a1 + 224) = v27[2];
      *(_OWORD *)(a1 + 240) = v33;
      *(_OWORD *)v26 = v35;
      *(_OWORD *)(a1 + 208) = v34;
      *v27 = v32;
      v27[1] = v31;
      v27[2] = v30;
      v27[3] = v29;
      if (*v26 >= *v25)
        return 1;
      v37 = *(_OWORD *)(a1 + 160);
      v36 = *(_OWORD *)(a1 + 176);
      v39 = *(_OWORD *)v25;
      v38 = *(_OWORD *)(a1 + 144);
      v40 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 144) = v40;
      v41 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 176) = v41;
      *(_OWORD *)v26 = v39;
      *(_OWORD *)(a1 + 208) = v38;
      *(_OWORD *)(a1 + 224) = v37;
      *(_OWORD *)(a1 + 240) = v36;
      if (*v25 >= *v24)
        return 1;
      v43 = *(_OWORD *)(a1 + 96);
      v42 = *(_OWORD *)(a1 + 112);
      v45 = *(_OWORD *)v24;
      v44 = *(_OWORD *)(a1 + 80);
      v46 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 80) = v46;
      v47 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 112) = v47;
      *(_OWORD *)v25 = v45;
      *(_OWORD *)(a1 + 144) = v44;
      *(_OWORD *)(a1 + 160) = v43;
      *(_OWORD *)(a1 + 176) = v42;
      if (*(float *)(a1 + 64) >= *(float *)a1)
        return 1;
      v49 = *(_OWORD *)(a1 + 32);
      v48 = *(_OWORD *)(a1 + 48);
      v51 = *(_OWORD *)a1;
      v50 = *(_OWORD *)(a1 + 16);
      v52 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 16) = v52;
      v53 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + 48) = v53;
      *(_OWORD *)v24 = v51;
      *(_OWORD *)(a1 + 80) = v50;
      result = 1;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v48;
      return result;
    default:
      v14 = (float *)(a1 + 128);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128));
      v15 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(float *)v15;
    if (*(float *)v15 < *v14)
    {
      v54 = *(_OWORD *)(v15 + 4);
      v55 = *(_OWORD *)(v15 + 20);
      *(_OWORD *)v56 = *(_OWORD *)(v15 + 36);
      *(_OWORD *)&v56[12] = *(_OWORD *)(v15 + 48);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        v22 = *(_OWORD *)(a1 + v19 + 176);
        *(_OWORD *)(v20 + 224) = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 240) = v22;
        if (v19 == -128)
          break;
        v19 -= 64;
        if (v18 >= *(float *)(v20 + 64))
        {
          v23 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      v23 = a1;
LABEL_12:
      *(float *)v23 = v18;
      *(_OWORD *)(v23 + 4) = v54;
      *(_OWORD *)(v23 + 20) = v55;
      *(_OWORD *)(v23 + 36) = *(_OWORD *)v56;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)&v56[12];
      if (++v17 == 8)
        return v15 + 64 == a2;
    }
    v14 = (float *)v15;
    v16 += 64;
    v15 += 64;
    if (v15 == a2)
      return 1;
  }
}

float32x2_t re::pathprocessing::QuadraticBezierBVH::build(uint64_t **this)
{
  float32x2_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t *v12;

  std::vector<re::pathprocessing::Bounds2<float>>::resize((uint64_t)(this + 2), 0xAAAAAAAAAAAAAAABLL * (((*this)[1] - **this) >> 3));
  v3 = **this;
  if ((*this)[1] != v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (float32x2_t *)(v3 + v4);
      v8 = v7[1];
      v9 = vminnm_f32(*v7, v8);
      v10 = vmaxnm_f32(*v7, v8);
      v11 = v7[2];
      result = vmaxnm_f32(v10, v11);
      v12 = (float32x2_t *)&this[2][v5];
      *v12 = vminnm_f32(v9, v11);
      v12[1] = result;
      ++v6;
      v3 = **this;
      v5 += 2;
      v4 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (((*this)[1] - v3) >> 3));
  }
  return result;
}

void std::vector<re::pathprocessing::Bounds2<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<re::pathprocessing::Bounds2<float>>::__append((void **)a1, a2 - v2);
  }
}

uint64_t *re::pathprocessing::QuadraticBezierBVH::buildGroup(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int32x2_t *v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t *v16;
  int32x2_t *v17;
  uint64_t v18;
  int32x2_t *v19;

  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    re::pathprocessing::QuadraticBezierBVH::buildGroupRange((uint64_t)result, a2, (int32x2_t)a3, 0, (v3 - *a2) >> 3, &v19);
    v7 = v4[1];
    v5 = v4 + 1;
    v6 = v7;
    if (v7)
    {
      *v5 = 0;
      v8 = (int32x2_t *)operator new();
      v8[2] = 0;
      v8[3] = 0;
      *v8 = (int32x2_t)-1;
      v8[1] = 0;
      v8[4] = vdup_n_s32(0x7F800000u);
      v8[5] = (int32x2_t)0x7F0000007FLL;
      v18 = 0;
      std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v5, (uint64_t)v8);
      std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](&v18, 0);
      v9 = (uint64_t *)(*v5 + 8);
      v18 = 0;
      std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v9, v6);
      v10 = (uint64_t *)(*v5 + 16);
      v11 = v19;
      v19 = 0;
      std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v10, (uint64_t)v11);
      v12 = (float32x2_t *)*v5;
      v13 = *(float32x2_t **)(*v5 + 8);
      v14 = *(float32x2_t **)(*v5 + 16);
      v15 = vmaxnm_f32(v13[5], v14[5]);
      v12[4] = vminnm_f32(v13[4], v14[4]);
      v12[5] = v15;
      v16 = &v18;
      v17 = 0;
    }
    else
    {
      v17 = v19;
      v19 = 0;
      v16 = v5;
    }
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v16, (uint64_t)v17);
    return std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100]((uint64_t *)&v19, 0);
  }
  return result;
}

double re::pathprocessing::QuadraticBezierBVH::buildGroupRange@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int32x2_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int32x2_t **a6@<X8>)
{
  int32x2_t *v12;
  int32x2_t *v13;
  uint64_t *v14;
  int32x2_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  float32x2_t *v19;
  float32x2_t *v20;
  float32x2_t v21;
  uint64_t v23;

  v12 = (int32x2_t *)operator new();
  v13 = v12;
  v12[1] = 0;
  v14 = (uint64_t *)&v12[1];
  v12[4] = vdup_n_s32(0x7F800000u);
  v12[2] = 0;
  v12[3] = 0;
  v12[5] = (int32x2_t)0x7F0000007FLL;
  *a6 = v12;
  *v12 = a3;
  if (a5 - a4 == 1)
  {
    v15 = *(int32x2_t *)(*a2 + 8 * a4);
    v12[3] = v15;
    v16 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 16 * *(_QWORD *)&v15);
    *(_OWORD *)v12[4].i8 = v16;
  }
  else
  {
    re::pathprocessing::QuadraticBezierBVH::buildGroupRange(&v23, a1, a2, *(_QWORD *)&a3, a4, (unint64_t)(a5 + a4) >> 1);
    v17 = v23;
    v23 = 0;
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v14, v17);
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](&v23, 0);
    re::pathprocessing::QuadraticBezierBVH::buildGroupRange(&v23, a1, a2, *(_QWORD *)&a3, (unint64_t)(a5 + a4) >> 1, a5);
    v18 = v23;
    v23 = 0;
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100]((uint64_t *)&v13[2], v18);
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](&v23, 0);
    v19 = (float32x2_t *)v13[1];
    v20 = (float32x2_t *)v13[2];
    *(float32x2_t *)&v16 = vminnm_f32(v19[4], v20[4]);
    v21 = vmaxnm_f32(v19[5], v20[5]);
    v13[4] = (int32x2_t)v16;
    v13[5] = (int32x2_t)v21;
  }
  return *(double *)&v16;
}

uint64_t re::pathprocessing::QuadraticBezierBVH::intersect(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, float32x2_t *a5)
{
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  float v33;
  float v34;
  char v35;
  float v36;
  char v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  re::pathprocessing::Bezier2 *v45;
  void *v46;
  char v47;
  float v48;
  uint64_t v49;
  void **v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  int8x8_t v63;
  int8x8_t v64;
  unsigned int v65;
  int8x8_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  int32x2_t v79;
  float32x2_t v80;
  int8x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  int8x8_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  void *__p[2];
  __int128 v98;
  __int128 v99;
  char *v100;
  char *v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  void *v105;
  _QWORD v106[3];

  v106[1] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 8))
  {
    v106[0] = *(_QWORD *)(a1 + 8);
    v98 = 0u;
    v99 = 0u;
    v103 = (char *)&v98 + 8;
    v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(1uLL);
    v101 = v100;
    *(_QWORD *)&v102 = v100;
    *((_QWORD *)&v102 + 1) = &v100[8 * v10];
    v105 = operator new(0x1000uLL);
    std::__split_buffer<zip_entry_t *>::push_back(&v100, &v105);
    v11 = v101;
    __p[0] = v100;
    __p[1] = v101;
    v98 = v102;
    v13 = v102;
    v15 = *((_QWORD *)&v99 + 1);
    v14 = (char *)v99;
    v16 = &v101[8 * (((_QWORD)v99 + *((_QWORD *)&v99 + 1)) >> 9)];
    v17 = *(_QWORD *)v16;
    if ((char *)v102 == v101)
      v18 = 0;
    else
      v18 = *(_QWORD *)v16 + 8 * ((v99 + *((_QWORD *)&v99 + 1)) & 0x1FF);
    v19 = (v18 - v17) >> 3;
    if (v18 - v17 < -7)
    {
      v23 = 510 - v19;
      v21 = &v16[-8 * (v23 >> 9)];
      v22 = *(_QWORD *)v21 + 8 * (~(_WORD)v23 & 0x1FF);
    }
    else
    {
      v20 = v19 + 1;
      v21 = &v16[8 * (v20 >> 9)];
      v22 = *(_QWORD *)v21 + 8 * (v20 & 0x1FF);
    }
    if (v18 != v22)
    {
      v24 = v106;
      do
      {
        v25 = (_QWORD *)(v17 + 4096);
        if (v16 == v21)
          v25 = (_QWORD *)v22;
        if ((_QWORD *)v18 == v25)
        {
          v25 = (_QWORD *)v18;
        }
        else
        {
          v26 = (_QWORD *)v18;
          do
          {
            v27 = *v24++;
            *v26++ = v27;
          }
          while (v26 != v25);
        }
        v15 += ((uint64_t)v25 - v18) >> 3;
        if (v16 == v21)
          break;
        v28 = *((_QWORD *)v16 + 1);
        v16 += 8;
        v17 = v28;
        v18 = v28;
      }
      while (v28 != v22);
      v11 = (char *)__p[1];
      v13 = v98;
    }
    v100 = (char *)__p[0];
    v101 = v11;
    *(_QWORD *)&v102 = v13;
    *((_QWORD *)&v102 + 1) = *((_QWORD *)&v98 + 1);
    *(_OWORD *)__p = 0u;
    v98 = 0u;
    v103 = v14;
    v104 = v15;
    v99 = 0uLL;
    std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::~deque[abi:nn180100]((uint64_t)__p);
    v12 = 0;
    if (v15)
    {
      do
      {
        v29 = (((_QWORD)v102 - (_QWORD)v101) << 6) - 1;
        if ((char *)v102 == v101)
          v29 = 0;
        v30 = (unint64_t)&v103[v15 - 1];
        v31 = *(float32x2_t **)(*(_QWORD *)&v101[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF));
        v104 = v15 - 1;
        if (v29 - v30 >= 0x400)
        {
          operator delete(*(void **)(v102 - 8));
          *(_QWORD *)&v102 = v102 - 8;
        }
        if (*v31 != a4)
        {
          v32 = 0;
          v33 = fabsf(a3->f32[0]);
          v34 = 0.0;
          v35 = 1;
          v36 = INFINITY;
          while (1)
          {
            v37 = v35;
            if (v33 >= 0.00001)
            {
              v38 = 1.0 / a3->f32[v32];
              v39 = a2->f32[v32];
              v40 = v38 * (float)(v31[4].f32[v32] - v39);
              v41 = v38 * (float)(v31[5].f32[v32] - v39);
              if (v40 <= v41)
                v42 = v40;
              else
                v42 = v41;
              if (v40 <= v41)
                v43 = v41;
              else
                v43 = v40;
              v44 = (tgamma(3.0) * 2.0 + 1.0) * v43;
              if (v42 > v34)
                v34 = v42;
              if (v36 > v44)
                v36 = v44;
              if (v34 > v36)
                break;
            }
            v35 = 0;
            v32 = 1;
            if ((v37 & 1) == 0)
            {
              if (v31[1])
              {
                __p[0] = (void *)v31[1];
                std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::push_back(&v100, __p);
                __p[0] = (void *)v31[2];
                std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::push_back(&v100, __p);
              }
              else
              {
                v45 = (re::pathprocessing::Bezier2 *)(**(_QWORD **)a1 + 24 * *(_QWORD *)&v31[3]);
                __p[0] = (void *)re::pathprocessing::Bezier2::intersectRay(v45, a2, a3);
                __p[1] = v46;
                v47 = 0;
                if (v46)
                {
                  v48 = a5[5].f32[0];
                  v49 = 4 * (_QWORD)v46;
                  v50 = __p;
                  do
                  {
                    v51 = *(float *)v50;
                    v52 = *(float32x2_t *)v45;
                    v53 = *(float32x2_t *)((char *)v45 + 8);
                    v54 = *(float32x2_t *)((char *)v45 + 16);
                    v55 = vadd_f32(vmul_n_f32(v54, v51 * v51), vadd_f32(vmul_n_f32(*(float32x2_t *)v45, (float)(1.0 - *(float *)v50) * (float)(1.0 - *(float *)v50)), vmul_n_f32(v53, (float)(v51 + v51) * (float)(1.0 - *(float *)v50))));
                    v56 = vabd_f32(v55, *a2);
                    v105 = (void *)vsub_f32(v55, *a2);
                    v56.i8[0] = vmvn_s8((int8x8_t)vcge_f32(v56, (float32x2_t)vdup_lane_s32((int32x2_t)v56, 1))).u8[0];
                    v57 = *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v56.i8[0] & 1)))
                        / a3->f32[v56.i8[0] & 1];
                    if (v57 <= v48)
                    {
                      v58 = vadd_f32(vmul_n_f32(v54, v51), vsub_f32(vmul_n_f32(v52, v51 + -1.0), vmul_n_f32(v53, (float)(v51 * 2.0) + -1.0)));
                      v59 = vadd_f32(v58, v58);
                      v60 = vadd_f32(v54, vsub_f32(v52, vadd_f32(v53, v53)));
                      v61 = vadd_f32(v60, v60);
                      v62 = (v51 != 1.0) & (fabsf(v51 + -1.0) > 0.0001);
                      v63 = (int8x8_t)vneg_f32(v59);
                      v64 = (int8x8_t)vneg_f32(v61);
                      v65 = v62 ? -1 : 0;
                      v66 = (int8x8_t)vdup_n_s32(v65);
                      v67 = (float32x2_t)vbsl_s8(v66, (int8x8_t)v61, v64);
                      v68 = (float32x2_t)vbsl_s8(v66, (int8x8_t)v59, v63);
                      if (v57 != v48 && vabds_f32(v57, v48) > 0.0001)
                        goto LABEL_52;
                      v69 = vmul_f32(v68, v68);
                      v69.i32[0] = vadd_f32(v69, (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1)).u32[0];
                      v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
                      v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
                      v72 = vmul_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
                      v73 = *a3;
                      v74 = (int32x2_t)vmul_f32(*a3, v72);
                      v75 = a5[3];
                      v76 = vmul_f32(v75, v75);
                      v76.i32[0] = vadd_f32(v76, (float32x2_t)vdup_lane_s32((int32x2_t)v76, 1)).u32[0];
                      v77 = vrsqrte_f32((float32x2_t)v76.u32[0]);
                      v78 = vmul_f32(v77, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v77, v77)));
                      v79 = (int32x2_t)vmul_f32(*a3, vmul_n_f32(v75, vmul_f32(v78, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v78, v78))).f32[0]));
                      v80 = vadd_f32((float32x2_t)vzip1_s32(v74, v79), (float32x2_t)vzip2_s32(v74, v79));
                      v81 = (int8x8_t)vneg_f32(v80);
                      v82 = (int8x8_t)vabs_f32(v80);
                      v83 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((fabsf(v51) >= 0.0001) & v62), 0x1FuLL));
                      v84 = vbsl_s8(v83, v82, v81);
                      if (*(float *)v84.i32 >= *(float *)&v84.i32[1])
                      {
                        if (*(float *)v84.i32 != *(float *)&v84.i32[1]
                          && vabds_f32(*(float *)v84.i32, *(float *)&v84.i32[1]) > 0.0001)
                        {
                          goto LABEL_52;
                        }
                        v85 = vmul_f32(v67, v67);
                        v85.i32[0] = vadd_f32(v85, (float32x2_t)vdup_lane_s32((int32x2_t)v85, 1)).u32[0];
                        v86 = vrsqrte_f32((float32x2_t)v85.u32[0]);
                        v87 = vmul_f32(v86, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v86, v86)));
                        v88 = (int32x2_t)vmul_f32(v73, vmul_n_f32(v67, vmul_f32(v87, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v87, v87))).f32[0]));
                        v89 = a5[4];
                        v90 = vmul_f32(v89, v89);
                        v90.i32[0] = vadd_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).u32[0];
                        v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
                        v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
                        v93 = (int32x2_t)vmul_f32(v73, vmul_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]));
                        v94 = vadd_f32((float32x2_t)vzip1_s32(v88, v93), (float32x2_t)vzip2_s32(v88, v93));
                        v95 = (float32x2_t)vbsl_s8(v83, (int8x8_t)vabs_f32(v94), (int8x8_t)vneg_f32(v94));
                        if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v95, 1), v95).u8[0] & 1) == 0)
                        {
LABEL_52:
                          *a5 = *v31;
                          a5[1] = v31[3];
                          a5[2] = v55;
                          a5[3] = v68;
                          a5[4] = v67;
                          a5[5].f32[0] = v57;
                          a5[5].f32[1] = v51;
                          v47 = 1;
                          v48 = v57;
                        }
                      }
                    }
                    v50 = (void **)((char *)v50 + 4);
                    v49 -= 4;
                  }
                  while (v49);
                }
                v12 |= v47;
              }
              break;
            }
          }
        }
        v15 = v104;
      }
      while (v104);
    }
    std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::~deque[abi:nn180100]((uint64_t)&v100);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t *std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v2 + 16, 0);
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v2 + 8, 0);
    JUMPOUT(0x2276933B8);
  }
  return result;
}

void std::vector<re::pathprocessing::Bounds2<float>>::__append(void **a1, unint64_t a2)
{
  int32x2_t *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int32x2_t *v11;
  int32x2_t v12;
  int32x2_t *v13;
  int32x2_t *v14;
  int32x2_t v15;
  int32x2_t *v16;
  char *v17;
  char *v18;
  char *v19;

  v4 = (int32x2_t *)a1[1];
  v5 = a1[2];
  if (a2 <= (v5 - (_BYTE *)v4) >> 4)
  {
    if (a2)
    {
      v11 = &v4[2 * a2];
      v12 = vdup_n_s32(0x7F800000u);
      do
      {
        *v4 = v12;
        v4[1] = (int32x2_t)0x7F0000007FLL;
        v4 += 2;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = (char *)v4 - (_BYTE *)*a1;
    v7 = a2 + (v6 >> 4);
    if (v7 >> 60)
      abort();
    v8 = v5 - (_BYTE *)*a1;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(16 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (int32x2_t *)&v10[16 * (v6 >> 4)];
    v14 = &v13[2 * a2];
    v15 = vdup_n_s32(0x7F800000u);
    v16 = v13;
    do
    {
      *v16 = v15;
      v16[1] = (int32x2_t)0x7F0000007FLL;
      v16 += 2;
    }
    while (v16 != v14);
    v17 = &v10[16 * v9];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)v13[-2].i8 = *((_OWORD *)v18 - 1);
        v13 -= 2;
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

uint64_t std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *i;
  char *v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  _QWORD *v63;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = ((v5 - v4) << 6) - 1;
  v8 = a1[4];
  v7 = a1[5];
  v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x200)
    {
      v23 = (v5 - v4) >> 3;
      v24 = (char *)a1[3];
      v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        if (v24 == (char *)*a1)
          v26 = 1;
        else
          v26 = v25 >> 2;
        v63 = a1 + 3;
        *(_QWORD *)&v61 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v26);
        *((_QWORD *)&v61 + 1) = v61 + 8 * v23;
        *(_QWORD *)&v62 = *((_QWORD *)&v61 + 1);
        *((_QWORD *)&v62 + 1) = v61 + 8 * v27;
        v60 = operator new(0x1000uLL);
        std::__split_buffer<zip_entry_t *>::push_back(&v61, &v60);
        for (i = (_QWORD *)a1[2]; i != (_QWORD *)a1[1]; std::__split_buffer<zip_entry_t *>::push_front((uint64_t)&v61, i))--i;
        v29 = (char *)*a1;
        v30 = v62;
        *(_OWORD *)a1 = v61;
        *((_OWORD *)a1 + 1) = v30;
        if (v29)
          operator delete(v29);
        goto LABEL_36;
      }
      if (v24 != v5)
      {
        *(_QWORD *)&v61 = operator new(0x1000uLL);
        std::__split_buffer<zip_entry_t *>::push_back(a1, &v61);
LABEL_36:
        v4 = (char *)a1[1];
        v7 = a1[5];
        v9 = a1[4] + v7;
        goto LABEL_37;
      }
      *(_QWORD *)&v61 = operator new(0x1000uLL);
      std::__split_buffer<zip_entry_t *>::push_front((uint64_t)a1, &v61);
      v42 = (_QWORD *)a1[1];
      v5 = (char *)a1[2];
      v44 = *v42;
      v43 = (char *)(v42 + 1);
      v11 = v44;
      a1[1] = v43;
      if (v5 == (char *)a1[3])
      {
        v45 = (uint64_t)&v43[-*a1];
        if ((unint64_t)v43 > *a1)
        {
          v46 = v45 >> 3;
          v15 = v45 >> 3 < -1;
          v47 = (v45 >> 3) + 2;
          if (v15)
            v48 = v47;
          else
            v48 = v46 + 1;
          v49 = -(v48 >> 1);
          v50 = v48 >> 1;
          v51 = &v43[-8 * v50];
          v52 = v5 - v43;
          if (v5 != v43)
          {
            memmove(&v43[-8 * v50], v43, v5 - v43);
            v43 = (char *)a1[1];
          }
          v5 = &v51[v52];
          v22 = &v43[8 * v49];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1)
          v53 = 1;
        else
          v53 = (uint64_t)&v5[-*a1] >> 2;
        v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v53);
        v33 = &v32[8 * (v53 >> 2)];
        v35 = &v32[8 * v54];
        v55 = (uint64_t *)a1[1];
        v5 = v33;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v5 = &v33[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v32[8 * (v53 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
LABEL_32:
        v41 = (char *)*a1;
        *a1 = v32;
        a1[1] = v33;
        a1[2] = v5;
        a1[3] = v35;
        if (v41)
        {
          operator delete(v41);
          v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 512;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_35;
        }
        if (v5 == (char *)*a1)
          v31 = 1;
        else
          v31 = (uint64_t)&v5[-*a1] >> 2;
        v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v31);
        v33 = &v32[8 * (v31 >> 2)];
        v35 = &v32[8 * v34];
        v36 = (uint64_t *)a1[1];
        v5 = v33;
        v37 = a1[2] - (_QWORD)v36;
        if (v37)
        {
          v5 = &v33[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = 8 * (v37 >> 3);
          v39 = &v32[8 * (v31 >> 2)];
          do
          {
            v40 = *v36++;
            *(_QWORD *)v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
        }
        goto LABEL_32;
      }
    }
LABEL_35:
    *(_QWORD *)v5 = v11;
    a1[2] += 8;
    goto LABEL_36;
  }
LABEL_37:
  *(_QWORD *)(*(_QWORD *)&v4[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void re::pathprocessing::PathTopologyGenerator::getLoops(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _anonymous_namespace_ *v6;
  void *v7;
  void *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char **v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float32x2_t *v92;
  int v93;
  float32x2_t v94;
  float32x2_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  float v109;
  unint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  char *v114;
  float v115;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  float v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char **v128;
  char *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  float v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  int v162;
  unint64_t v163;
  char *v164;
  char *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  unint64_t v171;
  __int128 v172;
  void *v173;
  void *v174;
  _QWORD *v175;
  _QWORD *v176;
  void *v177;
  char *v178;
  _QWORD *v179;
  void *v180;
  char *v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  void *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int32x2_t v212;
  float32x2_t *v213;
  float32x2_t *v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float32x2_t v218;
  float32x2_t v219;
  unsigned __int32 v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t **v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  int v269;
  uint64_t v270;
  char *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint8x8_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  unint64_t v301;
  char *v302;
  _QWORD *v303;
  unint64_t *v304;
  uint64_t v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  unint64_t *v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  _BYTE *v319;
  _QWORD *v320;
  _BYTE *v321;
  _BYTE *v322;
  uint64_t v323;
  unint64_t v324;
  __n128 v325;
  uint64_t v326;
  __n128 *v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  __n128 *v334;
  char *v335;
  uint64_t v336;
  __n128 *v337;
  uint64_t v338;
  __n128 *v339;
  unint64_t v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  char *v357;
  uint64_t v358;
  unint64_t v359;
  _QWORD *v360;
  char *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  char *v366;
  char *v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  char *v371;
  uint64_t v372;
  unint64_t v373;
  _QWORD *v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  char *v381;
  uint64_t v382;
  __int128 v383;
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  char *v390;
  char *v391;
  _QWORD *v392;
  _QWORD *v393;
  char *v394;
  __int128 v395;
  int64x2_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  char *v403;
  _QWORD *v404;
  char *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  uint8x8_t v413;
  unint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  unint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t **v425;
  uint64_t *v426;
  uint64_t *v427;
  unint64_t v428;
  uint8x8_t v429;
  _QWORD *v430;
  _QWORD *j;
  unint64_t v432;
  float v433;
  _BOOL8 v434;
  unint64_t v435;
  unint64_t v436;
  size_t v437;
  uint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  _BYTE *v441;
  _OWORD *v442;
  void *v443;
  _QWORD *v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t *v453;
  unint64_t v454;
  BOOL v455;
  _QWORD *v456;
  unint64_t v457;
  unint64_t v458;
  uint8x8_t v459;
  char **v460;
  _QWORD **v461;
  _QWORD *m;
  unint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  float v466;
  _BOOL8 v467;
  unint64_t v468;
  unint64_t v469;
  int8x8_t prime;
  void *v471;
  void *v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint8x8_t v476;
  unint64_t v477;
  uint8x8_t v478;
  uint64_t v479;
  _QWORD *n;
  unint64_t v481;
  _QWORD *v482;
  _QWORD *v483;
  unint64_t v484;
  unint64_t v485;
  _QWORD *v486;
  _QWORD *v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char *v493;
  char *v494;
  _QWORD *v495;
  char *v496;
  char *v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  uint64_t v505;
  void *v506;
  _QWORD *v507;
  _OWORD *v508;
  uint64_t v509;
  _OWORD *v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  _OWORD *v514;
  __n128 *v515;
  __n128 *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t *v520;
  _QWORD *v521;
  float v522;
  uint64_t v523;
  char *v524;
  float v525;
  unint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  uint64_t *v535;
  unint64_t v536;
  _QWORD *v537;
  char *v538;
  _QWORD *v539;
  char *v540;
  char *v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  char *v546;
  char *v547;
  uint64_t v548;
  uint64_t *k;
  _OWORD *v550;
  uint64_t v551;
  _OWORD *v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  _OWORD *v556;
  _QWORD *v557;
  unint64_t v558;
  _QWORD *v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  _QWORD *v563;
  _QWORD *v564;
  _QWORD *v565;
  char *v566;
  _QWORD *v567;
  _QWORD *v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  _QWORD *v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  _QWORD *v577;
  _QWORD *v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  char *v582;
  char *v583;
  _QWORD *v584;
  char *v585;
  char *v586;
  char *v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  char *v592;
  char *v593;
  uint64_t v594;
  _QWORD *v595;
  _QWORD *v596;
  void *v597;
  void **v598;
  uint64_t v599;
  _QWORD *v600;
  _QWORD *v601;
  void *v602;
  _anonymous_namespace_ *v603;
  void **v604;
  __int128 v605;
  void *v606;
  void *v607;
  uint64_t v608;
  unint64_t v609;
  char *v610;
  size_t v611;
  unint64_t v612;
  char *v613;
  void **v614;
  uint64_t v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  unint64_t v622;
  unint64_t *v623;
  unint64_t **v624;
  unint64_t v625;
  _QWORD *v626;
  unint64_t *v627;
  unint64_t *v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  unint64_t v632;
  char *v633;
  unint64_t *v634;
  unint64_t v635;
  _QWORD **v636;
  _QWORD **v637;
  unint64_t v638;
  unint64_t *v639;
  unint64_t *v640;
  unint64_t *v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  char *v646;
  unint64_t *v647;
  unint64_t v648;
  char *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  _QWORD *v653;
  char *v654;
  uint64_t v655;
  _QWORD *v656;
  char *v657;
  _QWORD *v658;
  _QWORD *v659;
  unint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  char *v663;
  unint64_t v664;
  _OWORD *v665;
  _QWORD *v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  _QWORD *v670;
  unint64_t v671;
  _QWORD **v672;
  uint64_t v673;
  uint64_t *v674;
  uint64_t *v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  void *v679;
  char *v680;
  void *v681;
  void *v682;
  void *v683;
  _BYTE *v684;
  void *v685;
  _BYTE *v686;
  char v687;
  __int128 __p;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  char v694;
  void *v695[2];
  uint64_t v696;
  __int128 v697;
  __int128 v698;
  int v699;
  void *v700;
  void *v701;
  char *v702;
  char *v703;
  void *v704[4];
  _BYTE v705[24];
  __int128 v706;
  int v707;
  __int128 v708;
  __int128 v709;
  int v710;
  void *v711;
  _BYTE *v712;
  uint64_t v713;
  _BYTE *v714;
  _OWORD *v715;
  _BYTE *v716;
  _OWORD v717[3];
  void *v718[3];
  __int128 v719;
  __int128 v720;
  int v721;
  __int128 v722;
  __int128 v723;
  float v724;
  uint64_t v725;

  v725 = *MEMORY[0x24BDAC8D0];
  v674 = a1;
  v675 = a2;
  v676 = a3;
  re::pathprocessing::BezierGraphInfo::BezierGraphInfo(&v677, a1);
  v6 = (_anonymous_namespace_ *)re::pathprocessing::HDSMesh::HDSMesh((uint64_t)&v683, &v677);
  v695[0] = 0;
  v695[1] = 0;
  v696 = 0;
  __p = 0u;
  v689 = 0u;
  v690 = 0u;
  v691 = 0u;
  v692 = 0u;
  v693 = 0u;
  v694 = 0;
  v7 = v679;
  v8 = v680;
  if (v679 == v680)
    goto LABEL_205;
  if (v677 != v678 && v681 != v682 && v687)
  {
    v651 = a4;
    LOBYTE(v704[0]) = 0;
    std::vector<BOOL>::vector(&v719, (v686 - (_BYTE *)v685) >> 4, (unsigned __int8 *)v704);
    v10 = v685;
    v9 = v686;
    if (v686 != v685)
    {
      v11 = 0;
      do
      {
        if ((*(_QWORD *)(v719 + 8 * (v11 >> 6)) & (1 << v11)) == 0)
        {
          v12 = (_QWORD *)v690;
          if ((unint64_t)v690 >= *((_QWORD *)&v690 + 1))
          {
            v14 = (_QWORD *)*((_QWORD *)&v689 + 1);
            v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((_QWORD *)&v689 + 1)) >> 4);
            v16 = v15 + 1;
            if (v15 + 1 > 0x333333333333333)
              goto LABEL_911;
            if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v690 + 1) - *((_QWORD *)&v689 + 1)) >> 4) > v16)
              v16 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v690 + 1) - *((_QWORD *)&v689 + 1)) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v690 + 1) - *((_QWORD *)&v689 + 1)) >> 4) >= 0x199999999999999)
              v17 = 0x333333333333333;
            else
              v17 = v16;
            if (v17)
            {
              if (v17 > 0x333333333333333)
                goto LABEL_912;
              v18 = (char *)operator new(80 * v17);
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[80 * v15];
            *((_QWORD *)v19 + 8) = 0;
            *((_QWORD *)v19 + 9) = 0;
            *(_QWORD *)v19 = -1;
            *((_QWORD *)v19 + 1) = -1;
            v20 = &v18[80 * v17];
            *((_OWORD *)v19 + 1) = 0u;
            *((_OWORD *)v19 + 2) = 0u;
            *((_OWORD *)v19 + 3) = 0u;
            v13 = v19 + 80;
            if (v12 == v14)
            {
              *((_QWORD *)&v689 + 1) = v19;
              *(_QWORD *)&v690 = v19 + 80;
              *((_QWORD *)&v690 + 1) = &v18[80 * v17];
            }
            else
            {
              do
              {
                *((_OWORD *)v19 - 5) = *((_OWORD *)v12 - 5);
                *((_QWORD *)v19 - 7) = 0;
                *((_QWORD *)v19 - 6) = 0;
                *((_QWORD *)v19 - 8) = 0;
                *((_OWORD *)v19 - 4) = *((_OWORD *)v12 - 4);
                *((_QWORD *)v19 - 6) = *(v12 - 6);
                *(v12 - 8) = 0;
                *(v12 - 7) = 0;
                *(v12 - 6) = 0;
                *((_QWORD *)v19 - 5) = 0;
                *((_QWORD *)v19 - 4) = 0;
                *((_QWORD *)v19 - 3) = 0;
                *(_OWORD *)(v19 - 40) = *(_OWORD *)(v12 - 5);
                *((_QWORD *)v19 - 3) = *(v12 - 3);
                *(v12 - 5) = 0;
                *(v12 - 4) = 0;
                *(v12 - 3) = 0;
                *((_OWORD *)v19 - 1) = *((_OWORD *)v12 - 1);
                v19 -= 80;
                v12 -= 10;
              }
              while (v12 != v14);
              v12 = (_QWORD *)*((_QWORD *)&v689 + 1);
              v21 = (_QWORD *)v690;
              *((_QWORD *)&v689 + 1) = v19;
              *(_QWORD *)&v690 = v13;
              *((_QWORD *)&v690 + 1) = v20;
              while (v21 != v12)
              {
                v21 -= 10;
                std::allocator<re::pathprocessing::FaceGroup>::destroy[abi:nn180100](v21);
              }
            }
            if (v12)
              operator delete(v12);
          }
          else
          {
            *(_QWORD *)(v690 + 64) = 0;
            v12[9] = 0;
            *v12 = -1;
            v12[1] = -1;
            *((_OWORD *)v12 + 1) = 0u;
            *((_OWORD *)v12 + 2) = 0u;
            v13 = v12 + 10;
            *((_OWORD *)v12 + 3) = 0u;
          }
          *(_QWORD *)&v690 = v13;
          v22 = *(v13 - 6);
          v667 = (uint64_t)(v13 - 6);
          v23 = (unint64_t *)*(v13 - 7);
          if ((unint64_t)v23 >= v22)
          {
            v25 = (unint64_t *)*(v13 - 8);
            v26 = v23 - v25;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              goto LABEL_911;
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v667, v29);
              v25 = (unint64_t *)*(v13 - 8);
              v23 = (unint64_t *)*(v13 - 7);
            }
            else
            {
              v30 = 0;
            }
            v31 = (unint64_t *)&v30[8 * v26];
            *v31 = v11;
            v24 = v31 + 1;
            while (v23 != v25)
            {
              v32 = *--v23;
              *--v31 = v32;
            }
            *(v13 - 8) = v31;
            *(v13 - 7) = v24;
            *(v13 - 6) = &v30[8 * v29];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *v23 = v11;
            v24 = v23 + 1;
          }
          *(v13 - 7) = v24;
          *(_QWORD *)(v719 + 8 * (v11 >> 6)) |= 1 << v11;
          v664 = v11;
          *(_QWORD *)&v722 = v11;
          memset(v717, 0, sizeof(v717));
          std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(v717, (uint64_t *)&v722, 1uLL);
          *(_OWORD *)v704 = v717[0];
          *(_OWORD *)&v704[2] = v717[1];
          memset(v717, 0, sizeof(v717));
          *(_OWORD *)v705 = v717[2];
          std::deque<unsigned long>::~deque[abi:nn180100](v717);
          for (i = *(_QWORD *)&v705[8]; *(_QWORD *)&v705[8]; i = *(_QWORD *)&v705[8])
          {
            v34 = i - 1;
            v35 = *(_QWORD *)(*(_QWORD *)((char *)v704[1]
                                        + (((unint64_t)(*(_QWORD *)v705 + v34) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(_QWORD *)v705 + v34) & 0x1FF));
            *(_QWORD *)&v705[8] = v34;
            std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
            v36 = (uint64_t *)((char *)v685 + 16 * v35);
            v37 = *v36;
            do
            {
              v38 = v683;
              v39 = (char *)v683 + 48 * *((_QWORD *)v683 + 6 * v37 + 3);
              if (((*(_QWORD *)(v719 + ((*v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v39) & 1) == 0)
              {
                std::deque<unsigned long>::push_back(v704, (_QWORD *)v683 + 6 * *((_QWORD *)v683 + 6 * v37 + 3));
                *(_QWORD *)(v719 + ((*v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v39;
                v41 = (char *)*(v13 - 7);
                v40 = *(v13 - 6);
                if ((unint64_t)v41 >= v40)
                {
                  v43 = (char *)*(v13 - 8);
                  v44 = (v41 - v43) >> 3;
                  v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 61)
                    goto LABEL_911;
                  v46 = v40 - (_QWORD)v43;
                  if (v46 >> 2 > v45)
                    v45 = v46 >> 2;
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                    v47 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v47 = v45;
                  if (v47)
                  {
                    v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v667, v47);
                    v43 = (char *)*(v13 - 8);
                    v41 = (char *)*(v13 - 7);
                  }
                  else
                  {
                    v48 = 0;
                  }
                  v49 = &v48[8 * v44];
                  *(_QWORD *)v49 = *v39;
                  v42 = v49 + 8;
                  while (v41 != v43)
                  {
                    v50 = *((_QWORD *)v41 - 1);
                    v41 -= 8;
                    *((_QWORD *)v49 - 1) = v50;
                    v49 -= 8;
                  }
                  *(v13 - 8) = v49;
                  *(v13 - 7) = v42;
                  *(v13 - 6) = &v48[8 * v47];
                  if (v43)
                    operator delete(v43);
                }
                else
                {
                  *(_QWORD *)v41 = *v39;
                  v42 = v41 + 8;
                }
                *(v13 - 7) = v42;
              }
              v52 = (char *)*(v13 - 4);
              v51 = *(v13 - 3);
              if ((unint64_t)v52 >= v51)
              {
                v54 = (char *)*(v13 - 5);
                v55 = (v52 - v54) >> 3;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61)
                  goto LABEL_911;
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 2 > v56)
                  v56 = v57 >> 2;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                  v58 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v13 - 3), v58);
                  v54 = (char *)*(v13 - 5);
                  v52 = (char *)*(v13 - 4);
                }
                else
                {
                  v59 = 0;
                }
                v60 = &v59[8 * v55];
                *(_QWORD *)v60 = v37;
                v53 = v60 + 8;
                while (v52 != v54)
                {
                  v61 = *((_QWORD *)v52 - 1);
                  v52 -= 8;
                  *((_QWORD *)v60 - 1) = v61;
                  v60 -= 8;
                }
                *(v13 - 5) = v60;
                *(v13 - 4) = v53;
                *(v13 - 3) = &v59[8 * v58];
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_QWORD *)v52 = v37;
                v53 = v52 + 8;
              }
              *(v13 - 4) = v53;
              v37 = v38[6 * v37 + 1];
            }
            while (v37 != *v36);
          }
          std::deque<unsigned long>::~deque[abi:nn180100](v704);
          v10 = v685;
          v9 = v686;
          v11 = v664;
        }
        ++v11;
      }
      while (v11 < (v9 - v10) >> 4);
    }
    if ((_QWORD)v719)
      operator delete((void *)v719);
    v62 = 0x8E38E38E38E38E39 * ((v678 - v677) >> 3);
    v63 = v689;
    v64 = (char *)__p;
    if (v62 <= (uint64_t)(v689 - __p) >> 2)
    {
      v69 = (char *)*((_QWORD *)&__p + 1);
      v70 = *((_QWORD *)&__p + 1) - __p;
      v71 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
      if (v71 >= v62)
        v72 = 0x8E38E38E38E38E39 * ((v678 - v677) >> 3);
      else
        v72 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
      if (v72)
        bzero((void *)__p, 4 * v72);
      v73 = v62 >= v71;
      v74 = v62 - v71;
      if (v74 != 0 && v73)
      {
        bzero(v69, 4 * v62 - (v70 & 0xFFFFFFFFFFFFFFFCLL));
        v68 = &v69[4 * v74];
      }
      else
      {
        v68 = &v64[4 * v62];
      }
      *((_QWORD *)&__p + 1) = v68;
    }
    else
    {
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
        v63 = 0;
        __p = 0uLL;
        *(_QWORD *)&v689 = 0;
      }
      if (v62 >> 62)
        goto LABEL_911;
      v65 = v63 >> 1;
      if (v63 >> 1 <= v62)
        v65 = v62;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v66 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      std::vector<float>::__vallocate[abi:nn180100](&__p, v66);
      v67 = *((_QWORD *)&__p + 1);
      bzero(*((void **)&__p + 1), 4 * v62);
      v68 = (char *)(v67 + 4 * v62);
      *((_QWORD *)&__p + 1) = v68;
      v64 = (char *)__p;
    }
    v75 = v68 - v64;
    if (v68 != v64)
    {
      v76 = 0;
      v77 = v75 >> 2;
      v78 = v677;
      if (v77 <= 1)
        v77 = 1;
      v79 = v674;
      v80 = v675;
      do
      {
        v81 = (_QWORD *)(v78 + 72 * v76);
        v82 = v81[1];
        if (v81[2] != v82)
        {
          v83 = v81[4];
          v84 = v81[5];
          v85 = (char **)(v82 + 8 * (v83 >> 9));
          v86 = *v85;
          v87 = &(*v85)[8 * (v83 & 0x1FF)];
          v88 = *(_QWORD *)(v82 + (((v84 + v83) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v84 + v83) & 0x1FF);
          if (v87 != (char *)v88)
          {
            v89 = *v79;
            v90 = *v80;
            v91 = *(float *)&v64[4 * v76];
            do
            {
              v92 = (float32x2_t *)(v89 + 24 * *(_QWORD *)v87);
              v93 = *(_DWORD *)(v90 + 4 * *(_QWORD *)v87);
              v91 = v91
                  + vmlas_n_f32((float)-COERCE_FLOAT(HIDWORD(*(unint64_t *)v92)) * COERCE_FLOAT(*(_QWORD *)&v92[2]), COERCE_FLOAT(HIDWORD(*(_QWORD *)&v92[2])), COERCE_FLOAT(*v92))* 0.5;
              *(float *)&v64[4 * v76] = v91;
              if (v93 == 3)
              {
                v94 = vsub_f32(v92[1], *v92);
                v95 = vsub_f32(v92[2], *v92);
                v91 = v91 + (float)(vmlas_n_f32((float)-v94.f32[1] * v95.f32[0], v95.f32[1], v94.f32[0]) * 0.33333);
                *(float *)&v64[4 * v76] = v91;
              }
              v87 += 8;
              if (v87 - v86 == 4096)
              {
                v96 = v85[1];
                ++v85;
                v86 = v96;
                v87 = v96;
              }
            }
            while (v87 != (char *)v88);
          }
        }
        ++v76;
      }
      while (v76 != v77);
    }
    v97 = *((_QWORD *)&v689 + 1);
    v98 = v685;
    if ((_QWORD)v690 != *((_QWORD *)&v689 + 1))
    {
      v99 = 0;
      v100 = v683;
      v101 = v677;
      v102 = ((_QWORD)v690 - *((_QWORD *)&v689 + 1)) / 80;
      if (v102 <= 1)
        v102 = 1;
      do
      {
        v103 = (_QWORD *)(v97 + 80 * v99);
        v104 = v103[2];
        v105 = v103[3];
        v106 = v105 - v104;
        if (v105 != v104)
        {
          v107 = 0;
          v108 = v106 >> 3;
          if (v108 <= 1)
            v108 = 1;
          v109 = INFINITY;
          do
          {
            v110 = 0;
            v111 = *(_QWORD *)(v104 + 8 * v107);
            v112 = 0.0;
            v113 = v98[2 * v111];
            do
            {
              v114 = (char *)&v100[6 * v113];
              v115 = *(float *)&v64[4 * *((_QWORD *)v114 + 4)];
              if (*((_DWORD *)v114 + 10))
                v115 = -v115;
              v112 = v112 + v115;
              v113 = *((_QWORD *)v114 + 1);
              ++v110;
            }
            while (v113 != v98[2 * v111]);
            if (v112 < v109)
            {
              *v103 = v111;
              v109 = v112;
            }
            if (fabsf(v112) < 0.0001 && v110 <= 2)
              v98[2 * v111 + 1] |= 8uLL;
            if (v110 == 1)
              v98[2 * v111 + 1] |= 4uLL;
            ++v107;
          }
          while (v107 != v108);
        }
        v98[2 * *v103 + 1] |= 1uLL;
        v117 = v98[2 * *v103];
        v118 = v97 + 80 * v99;
        v119 = (_QWORD *)(v118 + 64);
        v120 = (uint64_t *)(v118 + 72);
        v121 = INFINITY;
        v122 = v674;
        v123 = v117;
        do
        {
          v124 = (_QWORD *)(v101 + 72 * v100[6 * v123 + 4]);
          v125 = v124[1];
          if (v124[2] != v125)
          {
            v126 = v124[4];
            v127 = v124[5];
            v128 = (char **)(v125 + 8 * (v126 >> 9));
            v129 = *v128;
            v130 = (uint64_t *)&(*v128)[8 * (v126 & 0x1FF)];
            v131 = *(_QWORD *)(v125 + (((v127 + v126) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v127 + v126) & 0x1FF);
            if (v130 != (uint64_t *)v131)
            {
              v132 = *v122 + 4;
              do
              {
                v133 = 0;
                v134 = *v130;
                v135 = v132 + 24 * *v130;
                v136 = 1;
                do
                {
                  v137 = v136;
                  v138 = *(float *)(v135 + 8 * v133);
                  if (v138 < v121)
                  {
                    *v119 = v134;
                    *v120 = v133;
                    v121 = v138;
                  }
                  v136 = 0;
                  v133 = 2;
                }
                while ((v137 & 1) != 0);
                if ((char *)++v130 - v129 == 4096)
                {
                  v139 = v128[1];
                  ++v128;
                  v129 = v139;
                  v130 = (uint64_t *)v139;
                }
              }
              while (v130 != (uint64_t *)v131);
            }
          }
          v123 = v100[6 * v123 + 1];
        }
        while (v123 != v117);
        ++v99;
      }
      while (v99 != v102);
    }
    v140 = *((_QWORD *)&v692 + 1);
    v141 = v686 - (_BYTE *)v98;
    v142 = (v686 - (_BYTE *)v98) >> 4;
    v143 = *((_QWORD *)&v693 + 1);
    if (v142 <= (uint64_t)(*((_QWORD *)&v693 + 1) - *((_QWORD *)&v692 + 1)) >> 2)
    {
      v4 = v693;
      v147 = v693 - *((_QWORD *)&v692 + 1);
      v148 = (uint64_t)(v693 - *((_QWORD *)&v692 + 1)) >> 2;
      if (v148 >= v142)
        v149 = v142;
      else
        v149 = (uint64_t)(v693 - *((_QWORD *)&v692 + 1)) >> 2;
      if (v149)
        bzero(*((void **)&v692 + 1), 4 * v149);
      v73 = v142 >= v148;
      v150 = v142 - v148;
      if (v150 != 0 && v73)
      {
        bzero((void *)v4, (((v141 >> 2) - (v147 & 0xFFFFFFFFFFFFFFFCLL) - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        v151 = v4 + 4 * v150;
      }
      else
      {
        v151 = v140 + 4 * v142;
      }
      *(_QWORD *)&v693 = v151;
    }
    else
    {
      v4 = (uint64_t)&v692 + 8;
      if (*((_QWORD *)&v692 + 1))
      {
        *(_QWORD *)&v693 = *((_QWORD *)&v692 + 1);
        operator delete(*((void **)&v692 + 1));
        v143 = 0;
        *((_QWORD *)&v692 + 1) = 0;
        v693 = 0uLL;
      }
      if (v141 < 0)
        goto LABEL_911;
      v144 = v143 >> 1;
      if (v143 >> 1 <= v142)
        v144 = v142;
      if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
        v145 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v145 = v144;
      std::vector<float>::__vallocate[abi:nn180100]((_QWORD *)&v692 + 1, v145);
      v146 = v693;
      bzero((void *)v693, ((unint64_t)v141 >> 2) & 0x3FFFFFFFFFFFFFFCLL);
      *(_QWORD *)&v693 = v146 + 4 * v142;
      v142 = (v686 - (_BYTE *)v685) >> 4;
    }
    LOBYTE(v704[0]) = 0;
    std::vector<BOOL>::vector(&v719, v142, (unsigned __int8 *)v704);
    v152 = (_QWORD *)*((_QWORD *)&v689 + 1);
    v668 = (_QWORD *)v690;
    if (*((_QWORD *)&v689 + 1) != (_QWORD)v690)
    {
      v4 = 1;
      do
      {
        *(_QWORD *)(v719 + ((*v152 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v152;
        *(_QWORD *)&v722 = *v152;
        memset(v717, 0, sizeof(v717));
        std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(v717, (uint64_t *)&v722, 1uLL);
        *(_OWORD *)v704 = v717[0];
        *(_OWORD *)&v704[2] = v717[1];
        memset(v717, 0, sizeof(v717));
        *(_OWORD *)v705 = v717[2];
        std::deque<unsigned long>::~deque[abi:nn180100](v717);
        while (*(_QWORD *)&v705[8])
        {
          v153 = *(_QWORD *)(*(_QWORD *)((char *)v704[1]
                                       + (((unint64_t)(*(_QWORD *)v705 + *(_QWORD *)&v705[8] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((*(_QWORD *)v705 + *(_QWORD *)&v705[8] - 1) & 0x1FF));
          --*(_QWORD *)&v705[8];
          std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
          v154 = (uint64_t *)((char *)v685 + 16 * v153);
          v155 = *v154;
          v156 = *(_DWORD *)(*((_QWORD *)&v692 + 1) + 4 * v153);
          v157 = v719;
          v158 = *v154;
          do
          {
            v159 = v683;
            v160 = *((_QWORD *)v683 + 6 * v158 + 3);
            v161 = (char *)v683 + 48 * v160;
            if (((*(_QWORD *)(v157 + ((*v161 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v161) & 1) == 0)
            {
              std::deque<unsigned long>::push_back(v704, (_QWORD *)v683 + 6 * v160);
              v157 = v719;
              *(_QWORD *)(v719 + ((*v161 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v161;
              if (v159[12 * v160 + 10])
                v162 = v156 - 1;
              else
                v162 = v156 + 1;
              *(_DWORD *)(*((_QWORD *)&v692 + 1) + 4 * *v161) = v162;
              v155 = *v154;
            }
            v158 = *(_QWORD *)&v159[12 * v158 + 2];
          }
          while (v158 != v155);
        }
        std::deque<unsigned long>::~deque[abi:nn180100](v704);
        v152 += 10;
      }
      while (v152 != v668);
    }
    v6 = (_anonymous_namespace_ *)v719;
    if ((_QWORD)v719)
      operator delete((void *)v719);
    v7 = v679;
    v8 = v680;
    a4 = v651;
  }
  if (v7 == v8 || v677 == v678 || v681 == v682 || !v687)
  {
LABEL_205:
    v172 = *(_OWORD *)v704;
    v173 = v704[2];
    v174 = v704[3];
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 3;
    *(_QWORD *)(a4 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v172;
    *(_QWORD *)(a4 + 40) = v173;
    *(_QWORD *)(a4 + 48) = v174;
    goto LABEL_206;
  }
  v652 = a4;
  v163 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((_QWORD *)&v689 + 1)) >> 4);
  v165 = (char *)*((_QWORD *)&v691 + 1);
  v164 = (char *)v691;
  v166 = (uint64_t)(*((_QWORD *)&v691 + 1) - v691) >> 4;
  if (v163 > v166)
  {
    v167 = v163 - v166;
    if (v163 - v166 > (uint64_t)(v692 - *((_QWORD *)&v691 + 1)) >> 4)
    {
      if (v163 >> 60)
        goto LABEL_911;
      v168 = v692 - v691;
      if ((uint64_t)(v692 - v691) >> 3 > v163)
        v163 = v168 >> 3;
      if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0)
        v169 = 0xFFFFFFFFFFFFFFFLL;
      else
        v169 = v163;
      if (v169 >> 60)
LABEL_912:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v170 = operator new(16 * v169);
      v166 = (unint64_t)v170 + 16 * v166;
      v4 = (uint64_t)v170 + 16 * v169;
      memset((void *)v166, 255, 16 * v167);
      v171 = v166 + 16 * v167;
      if (v165 != v164)
      {
        do
        {
          *(_OWORD *)(v166 - 16) = *((_OWORD *)v165 - 1);
          v166 -= 16;
          v165 -= 16;
        }
        while (v165 != v164);
        v165 = v164;
      }
      *(_QWORD *)&v691 = v166;
      *((_QWORD *)&v691 + 1) = v171;
      *(_QWORD *)&v692 = v4;
      if (v165)
        operator delete(v165);
      goto LABEL_238;
    }
    memset(*((void **)&v691 + 1), 255, 16 * v167);
    v184 = (uint64_t)&v165[16 * v167];
    goto LABEL_237;
  }
  if (v163 < v166)
  {
    v184 = v691 - 0x3333333333333330 * ((uint64_t)(v690 - *((_QWORD *)&v689 + 1)) >> 4);
LABEL_237:
    *((_QWORD *)&v691 + 1) = v184;
  }
LABEL_238:
  *(_QWORD *)&v717[0] = v674;
  memset((char *)v717 + 8, 0, 32);
  re::pathprocessing::QuadraticBezierBVH::build((uint64_t **)v717);
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(&v719, 0x8E38E38E38E38E39 * ((v678 - v677) >> 3), (unsigned __int8 *)v704);
  v185 = *((_QWORD *)&v689 + 1);
  if ((_QWORD)v690 != *((_QWORD *)&v689 + 1))
  {
    v186 = 0;
    v166 = (unint64_t)&v704[2];
    do
    {
      memset(v704, 0, 24);
      v669 = v186;
      v187 = v185 + 80 * v186;
      v189 = *(_QWORD **)(v187 + 40);
      v188 = *(_QWORD **)(v187 + 48);
      if (v189 != v188)
      {
        v190 = 0;
        do
        {
          v191 = *((_QWORD *)v683 + 6 * *v189 + 4);
          v192 = *(_QWORD *)(v719 + 8 * (v191 >> 6));
          if (((1 << v191) & v192) == 0)
          {
            *(_QWORD *)(v719 + 8 * (v191 >> 6)) = v192 | (1 << v191);
            v193 = (_QWORD *)(v677 + 72 * v191);
            v194 = v193[1];
            if (v193[2] != v194)
            {
              v195 = v193[4];
              v4 = v194 + 8 * (v195 >> 9);
              v196 = (uint64_t *)(*(_QWORD *)v4 + 8 * (v195 & 0x1FF));
              v197 = *(_QWORD *)(v194 + (((v193[5] + v195) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v193[5] + v195) & 0x1FF);
              while (v196 != (uint64_t *)v197)
              {
                v198 = *v196;
                if (v190 >= v704[2])
                {
                  v199 = (char *)v704[0];
                  v200 = (v190 - (char *)v704[0]) >> 3;
                  v201 = v200 + 1;
                  if ((unint64_t)(v200 + 1) >> 61)
                    goto LABEL_911;
                  v202 = (char *)v704[2] - (char *)v704[0];
                  if (((char *)v704[2] - (char *)v704[0]) >> 2 > v201)
                    v201 = v202 >> 2;
                  if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
                    v203 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v203 = v201;
                  if (v203)
                  {
                    v204 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)&v704[2], v203);
                    v199 = (char *)v704[0];
                    v190 = (char *)v704[1];
                  }
                  else
                  {
                    v204 = 0;
                  }
                  v205 = &v204[8 * v200];
                  *(_QWORD *)v205 = v198;
                  v206 = v205 + 8;
                  while (v190 != v199)
                  {
                    v207 = *((_QWORD *)v190 - 1);
                    v190 -= 8;
                    *((_QWORD *)v205 - 1) = v207;
                    v205 -= 8;
                  }
                  v704[0] = v205;
                  v704[1] = v206;
                  v704[2] = &v204[8 * v203];
                  if (v199)
                    operator delete(v199);
                  v190 = (char *)v206;
                }
                else
                {
                  *(_QWORD *)v190 = v198;
                  v190 += 8;
                }
                v704[1] = v190;
                if ((uint64_t *)((char *)++v196 - *(_QWORD *)v4) == (uint64_t *)4096)
                {
                  v208 = *(uint64_t **)(v4 + 8);
                  v4 += 8;
                  v196 = v208;
                }
              }
            }
          }
          ++v189;
        }
        while (v189 != v188);
      }
      re::pathprocessing::QuadraticBezierBVH::buildGroup((uint64_t *)v717, v704, v669);
      if (v704[0])
      {
        v704[1] = v704[0];
        operator delete(v704[0]);
      }
      v186 = v669 + 1;
      v185 = *((_QWORD *)&v689 + 1);
    }
    while (v669 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((_QWORD *)&v689 + 1)) >> 4));
    if ((_QWORD)v690 != *((_QWORD *)&v689 + 1))
    {
      v209 = 0;
      v210 = 0;
      v211 = 0;
      v166 = (unint64_t)&v704[2];
      v4 = -1;
      v212 = vdup_n_s32(0x7F800000u);
      do
      {
        v704[0] = (void *)-1;
        v704[1] = (void *)-1;
        v704[3] = 0;
        *(_QWORD *)v705 = 0;
        v704[2] = 0;
        *(int32x2_t *)&v705[8] = v212;
        v213 = (float32x2_t *)(*v674 + 24 * *(_QWORD *)(v185 + v209 + 64) + 8 * *(_QWORD *)(v185 + v209 + 72));
        *(_QWORD *)&v722 = 0xBF80000000000000;
        if (re::pathprocessing::QuadraticBezierBVH::intersect((uint64_t)v717, v213, (float32x2_t *)&v722, v211, (float32x2_t *)v704))
        {
          v214 = (float32x2_t *)(*v674 + 24 * (uint64_t)v704[1]);
          v215 = v214[1];
          v216 = v214[2];
          v217 = vadd_f32(vmul_n_f32(v216, *(float *)&v705[12]), vsub_f32(vmul_n_f32(*v214, *(float *)&v705[12] + -1.0), vmul_n_f32(v215, (float)(*(float *)&v705[12] * 2.0) + -1.0)));
          v218 = vadd_f32(v217, v217);
          if (v218.f32[0] == 0.0)
          {
            v219 = vadd_f32(v216, vsub_f32(*v214, vadd_f32(v215, v215)));
            v220 = vadd_f32(v219, v219).u32[0];
            if (*(float *)&v705[12] == 1.0 || *(float *)&v705[12] > 0.0 && v218.f32[1] < 0.0)
              v218.i32[0] = v220 ^ 0x80000000;
            else
              v218.i32[0] = v220;
          }
          v221 = (v218.f32[0] <= 0.0) | (unint64_t)(2 * *((_QWORD *)v681 + (uint64_t)v704[1]));
          v222 = *((_QWORD *)v683 + 6 * v221);
          v223 = *((_QWORD *)v685 + 2 * v222 + 1);
          if ((v223 & 8) != 0)
          {
            v224 = (char *)v683 + 48 * v221;
            if ((v223 & 4) != 0)
            {
              v222 = *((_QWORD *)v683 + 6 * *((_QWORD *)v224 + 3));
            }
            else
            {
              v222 = *((_QWORD *)v683 + 6 * *((_QWORD *)v683 + 6 * *((_QWORD *)v224 + 1) + 3));
              if ((*((_BYTE *)v685 + 16 * v222 + 8) & 8) != 0)
              {
                while (1)
                  ;
              }
            }
          }
          v225 = v691 + v210;
          *(void **)v225 = v704[0];
          *(_QWORD *)(v225 + 8) = v222;
        }
        ++v211;
        v185 = *((_QWORD *)&v689 + 1);
        v210 += 16;
        v209 += 80;
      }
      while (v211 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((_QWORD *)&v689 + 1)) >> 4));
    }
  }
  if ((_QWORD)v719)
    operator delete((void *)v719);
  if (*(_QWORD *)&v717[1])
  {
    *((_QWORD *)&v717[1] + 1) = *(_QWORD *)&v717[1];
    operator delete(*(void **)&v717[1]);
  }
  std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100]((uint64_t *)v717 + 1, 0);
  v226 = v691;
  v227 = (uint64_t)(*((_QWORD *)&v691 + 1) - v691) >> 4;
  std::vector<std::vector<unsigned long>>::vector(v717, v227);
  *(_OWORD *)v705 = 0u;
  memset(v704, 0, sizeof(v704));
  LOBYTE(v722) = 0;
  std::vector<BOOL>::vector(&v719, v227, (unsigned __int8 *)&v722);
  *(_QWORD *)&v722 = 0;
  if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
  {
    v228 = 0;
    v4 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      v229 = *(_QWORD *)(v691 + 16 * v228);
      if (v229 == -1)
      {
        std::deque<unsigned long>::push_back(v704, &v722);
      }
      else
      {
        v230 = *(_QWORD *)&v717[0] + 24 * v229;
        v232 = (unint64_t **)(v230 + 8);
        v231 = *(unint64_t **)(v230 + 8);
        v166 = v230 + 16;
        v233 = *(_QWORD *)(v230 + 16);
        if ((unint64_t)v231 >= v233)
        {
          v235 = *(unint64_t **)v230;
          v236 = ((uint64_t)v231 - *(_QWORD *)v230) >> 3;
          v237 = v236 + 1;
          if ((unint64_t)(v236 + 1) >> 61)
            goto LABEL_911;
          v238 = v233 - (_QWORD)v235;
          if (v238 >> 2 > v237)
            v237 = v238 >> 2;
          if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
            v239 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v239 = v237;
          if (v239)
          {
            v240 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v166, v239);
            v231 = *v232;
            v235 = *(unint64_t **)v230;
            v228 = v722;
          }
          else
          {
            v240 = 0;
          }
          v241 = (unint64_t *)&v240[8 * v236];
          *v241 = v228;
          v234 = v241 + 1;
          while (v231 != v235)
          {
            v242 = *--v231;
            *--v241 = v242;
          }
          *(_QWORD *)v230 = v241;
          *v232 = v234;
          *(_QWORD *)v166 = &v240[8 * v239];
          if (v235)
            operator delete(v235);
        }
        else
        {
          *v231 = v228;
          v234 = v231 + 1;
        }
        *v232 = v234;
      }
      v228 = v722 + 1;
      *(_QWORD *)&v722 = v228;
    }
    while (v228 < v227);
  }
  v702 = 0;
  v703 = 0;
  v701 = 0;
  std::vector<unsigned long>::reserve(&v701, v227);
  v243 = *(_QWORD *)&v705[8];
  if (*(_QWORD *)&v705[8])
  {
    v166 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      v244 = v243 - 1;
      v245 = *(_QWORD *)(*(_QWORD *)((char *)v704[1]
                                   + (((unint64_t)(*(_QWORD *)v705 + v244) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*(_QWORD *)v705 + v244) & 0x1FF));
      *(_QWORD *)&v705[8] = v244;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
      v246 = v702;
      if (v702 >= v703)
      {
        v248 = (char *)v701;
        v249 = (v702 - (_BYTE *)v701) >> 3;
        v250 = v249 + 1;
        if ((unint64_t)(v249 + 1) >> 61)
          goto LABEL_911;
        v251 = v703 - (_BYTE *)v701;
        if ((v703 - (_BYTE *)v701) >> 2 > v250)
          v250 = v251 >> 2;
        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8)
          v252 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v252 = v250;
        if (v252)
        {
          v253 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)&v703, v252);
          v248 = (char *)v701;
          v246 = v702;
        }
        else
        {
          v253 = 0;
        }
        v254 = &v253[8 * v249];
        *(_QWORD *)v254 = v245;
        v247 = v254 + 8;
        while (v246 != v248)
        {
          v255 = *((_QWORD *)v246 - 1);
          v246 -= 8;
          *((_QWORD *)v254 - 1) = v255;
          v254 -= 8;
        }
        v701 = v254;
        v702 = v247;
        v703 = &v253[8 * v252];
        if (v248)
          operator delete(v248);
      }
      else
      {
        *(_QWORD *)v702 = v245;
        v247 = v246 + 8;
      }
      v702 = v247;
      v256 = (uint64_t *)(*(_QWORD *)&v717[0] + 24 * v245);
      v4 = *v256;
      v257 = v256[1];
      while (v4 != v257)
      {
        *(_QWORD *)&v722 = 0;
        v258 = *(_QWORD *)v4;
        v4 += 8;
        *(_QWORD *)&v722 = v258;
        std::deque<unsigned long>::push_back(v704, &v722);
      }
      v243 = *(_QWORD *)&v705[8];
    }
    while (*(_QWORD *)&v705[8]);
  }
  if ((_QWORD)v719)
    operator delete((void *)v719);
  std::deque<unsigned long>::~deque[abi:nn180100](v704);
  v704[0] = v717;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
  v259 = v701;
  if (v702 != v701)
  {
    v260 = 0;
    v261 = (v702 - (_BYTE *)v701) >> 3;
    if (v261 <= 1)
      v261 = 1;
    v262 = *((_QWORD *)&v692 + 1);
    v263 = v691;
    v264 = *((_QWORD *)&v689 + 1);
    do
    {
      v265 = v259[v260];
      if (*(_QWORD *)(v263 + 16 * v265) != -1)
      {
        v266 = v264 + 80 * v265;
        v267 = *(uint64_t **)(v266 + 16);
        v268 = *(uint64_t **)(v266 + 24);
        if (v267 != v268)
        {
          v269 = *(_DWORD *)(v262 + 4 * *(_QWORD *)(v263 + 16 * v265 + 8));
          do
          {
            v270 = *v267++;
            *(_DWORD *)(v262 + 4 * v270) += v269;
          }
          while (v267 != v268);
        }
      }
      ++v260;
    }
    while (v260 != v261);
  }
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(&v700, (v686 - (_BYTE *)v685) >> 4, (unsigned __int8 *)v704);
  v271 = (char *)v685;
  if (v676)
  {
    if (v686 != v685)
    {
      v272 = 0;
      v273 = (v686 - (_BYTE *)v685) >> 4;
      v274 = *((_QWORD *)&v692 + 1);
      v275 = v700;
      if (v273 <= 1)
        v273 = 1;
      v276 = (unint64_t *)((char *)v685 + 8);
      do
      {
        v277 = v272 >> 6;
        v278 = 1 << v272;
        if ((*(_DWORD *)(v274 + 4 * v272) & 1) != 0)
        {
          v275[v277] |= v278;
          v280 = (unint64_t *)&v271[16 * v272 + 8];
          v279 = *v276 | 2;
        }
        else
        {
          v275[v277] &= ~v278;
          v279 = *v276 & 0xFFFFFFFFFFFFFFFDLL;
          v280 = v276;
        }
        *v280 = v279;
        ++v272;
        v276 += 2;
      }
      while (v273 != v272);
    }
  }
  else if (v686 != v685)
  {
    v281 = 0;
    v282 = (v686 - (_BYTE *)v685) >> 4;
    v283 = *((_QWORD *)&v692 + 1);
    v284 = v700;
    if (v282 <= 1)
      v282 = 1;
    v285 = (unint64_t *)((char *)v685 + 8);
    do
    {
      v286 = v281 >> 6;
      v287 = 1 << v281;
      if (*(_DWORD *)(v283 + 4 * v281))
      {
        v284[v286] |= v287;
        v288 = (unint64_t *)&v271[16 * v281 + 8];
        v289 = *v285 | 2;
      }
      else
      {
        v284[v286] &= ~v287;
        v289 = *v285 & 0xFFFFFFFFFFFFFFFDLL;
        v288 = v285;
      }
      *v288 = v289;
      ++v281;
      v285 += 2;
    }
    while (v282 != v281);
  }
  v697 = 0u;
  v698 = 0u;
  v699 = 1065353216;
  v290 = v701;
  if (v702 != v701)
  {
    v291 = 0;
    v4 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      v292 = v290[v291];
      v704[0] = (void *)v292;
      v293 = *(_QWORD *)(v691 + 16 * v292 + 8);
      if (v293 == -1 || ((*(_QWORD *)((char *)v700 + ((v293 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v293) & 1) == 0)
      {
        std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)&v697, v292, v704);
      }
      else
      {
        v294 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v697 + 8));
        v294.i16[0] = vaddlv_u8(v294);
        v295 = *((_QWORD *)&v697 + 1) - 1;
        v296 = v292;
        do
        {
          do
          {
LABEL_370:
            v297 = v296;
            v296 = *(_QWORD *)(v691 + 16 * v296);
          }
          while (!*((_QWORD *)&v697 + 1));
          if (v294.u32[0] > 1uLL)
          {
            v298 = v296;
            if (v296 >= *((_QWORD *)&v697 + 1))
              v298 = v296 % *((_QWORD *)&v697 + 1);
          }
          else
          {
            v298 = v296 & v295;
          }
          v299 = *(_QWORD **)(v697 + 8 * v298);
        }
        while (!v299);
        do
        {
          while (1)
          {
            v299 = (_QWORD *)*v299;
            if (!v299)
              goto LABEL_370;
            v300 = v299[1];
            if (v300 == v296)
              break;
            if (v294.u32[0] > 1uLL)
            {
              if (v300 >= *((_QWORD *)&v697 + 1))
                v300 %= *((_QWORD *)&v697 + 1);
            }
            else
            {
              v300 &= v295;
            }
            if (v300 != v298)
              goto LABEL_370;
          }
        }
        while (v299[2] != v296);
        v301 = *(_QWORD *)(v691 + 16 * v297 + 8);
        *(_QWORD *)&v717[0] = v296;
        *(_QWORD *)&v719 = v301;
        v302 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)&v697, v296, v717);
        v303 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v302 + 24), v301, &v719);
        v166 = (unint64_t)v303;
        v304 = (unint64_t *)v303[4];
        v305 = (uint64_t)(v303 + 5);
        v306 = v303[5];
        if ((unint64_t)v304 >= v306)
        {
          v308 = (unint64_t *)v303[3];
          v309 = v304 - v308;
          v310 = v309 + 1;
          if ((unint64_t)(v309 + 1) >> 61)
            goto LABEL_911;
          v311 = v306 - (_QWORD)v308;
          if (v311 >> 2 > v310)
            v310 = v311 >> 2;
          if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8)
            v312 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v312 = v310;
          if (v312)
          {
            v313 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v305, v312);
            v308 = *(unint64_t **)(v166 + 24);
            v304 = *(unint64_t **)(v166 + 32);
          }
          else
          {
            v313 = 0;
          }
          v314 = (unint64_t *)&v313[8 * v309];
          *v314 = v292;
          v307 = v314 + 1;
          while (v304 != v308)
          {
            v315 = *--v304;
            *--v314 = v315;
          }
          *(_QWORD *)(v166 + 24) = v314;
          *(_QWORD *)(v166 + 32) = v307;
          *(_QWORD *)(v166 + 40) = &v313[8 * v312];
          if (v308)
            operator delete(v308);
        }
        else
        {
          *v304 = v292;
          v307 = v304 + 1;
        }
        *(_QWORD *)(v166 + 32) = v307;
      }
      ++v291;
      v290 = v701;
    }
    while (v291 < (v702 - (_BYTE *)v701) >> 3);
  }
  v715 = 0;
  v714 = 0;
  v716 = 0;
  v712 = 0;
  v711 = 0;
  v713 = 0;
  v316 = v683;
  v317 = v684 - (_BYTE *)v683;
  if (v684 == v683)
  {
    v320 = 0;
    v319 = 0;
  }
  else
  {
    v166 = 0xAAAAAAAAAAAAAAABLL * (v317 >> 4);
    if (v166 > 0x555555555555555)
      goto LABEL_911;
    v4 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::HalfEdge>>((uint64_t)&v713, 0xAAAAAAAAAAAAAAABLL * (v317 >> 4));
    v711 = (void *)v4;
    v713 = v4 + 48 * v318;
    memmove((void *)v4, v316, v317 - 4);
    v319 = (_BYTE *)(v4 + 16 * (v317 >> 4));
    v712 = v319;
    v320 = v711;
  }
  v719 = 0u;
  v720 = 0u;
  v721 = 1065353216;
  v322 = v685;
  v321 = v686;
  if (v686 != v685)
  {
    v323 = 0;
    v324 = 0;
    v325.n128_u64[0] = -1;
    v325.n128_u64[1] = -1;
    while (1)
    {
      if ((v322[v323 + 8] & 8) == 0)
        goto LABEL_428;
      v326 = *(_QWORD *)&v322[v323];
      v327 = (__n128 *)&v320[6 * v326];
      if (v327->n128_u64[0] == -1)
        goto LABEL_428;
      v328 = v320[6 * v326 + 1];
      if (v328 == -1)
        goto LABEL_428;
      v329 = v320[6 * v326 + 2];
      if (v329 == -1)
        goto LABEL_428;
      v330 = (char *)&v320[6 * v326];
      v333 = *((_QWORD *)v330 + 3);
      v331 = v330 + 24;
      v332 = v333;
      if (v333 == -1 || v320[6 * v326 + 4] == -1)
        goto LABEL_428;
      if (v329 != v328)
      {
        v694 = 1;
        MEMORY[0x227692F50](v695, "Invalid topology for degenerated face\n", v325);
        v722 = 0u;
        v723 = 0u;
        v724 = 1.0;
        goto LABEL_584;
      }
      v334 = (__n128 *)&v320[6 * v332];
      if (v328 != v326)
        break;
      v335 = (char *)&v320[6 * v332];
      v336 = *((_QWORD *)v335 + 2);
      v320[6 * v336 + 1] = *((_QWORD *)v335 + 1);
      v320[6 * *((_QWORD *)v335 + 1) + 2] = v336;
LABEL_427:
      v327[2].n128_u64[0] = -1;
      *v327 = v325;
      v327[1] = v325;
      v334[2].n128_u64[0] = -1;
      *v334 = v325;
      v334[1] = v325;
      v322 = v685;
      v321 = v686;
LABEL_428:
      ++v324;
      v323 += 16;
      if (v324 >= (v321 - v322) >> 4)
        goto LABEL_431;
    }
    v337 = (__n128 *)&v320[6 * v328];
    v338 = v337[1].n128_i64[1];
    v339 = (__n128 *)&v320[6 * v338];
    v340 = v339->n128_u64[1];
    if (v332 == v340)
    {
      v341 = (char *)&v320[6 * v332];
      v342 = v320[6 * v338 + 2];
      v320[6 * v342 + 1] = *((_QWORD *)v341 + 1);
      v320[6 * *((_QWORD *)v341 + 1) + 2] = v342;
    }
    else
    {
      if (v332 != v320[6 * v338 + 2])
      {
        v320[6 * v332 + 3] = v338;
        v320[6 * v338 + 3] = *v331;
        goto LABEL_426;
      }
      v343 = v320[6 * v332 + 2];
      v320[6 * v343 + 1] = v340;
      v320[6 * v339->n128_u64[1] + 2] = v343;
    }
    v339[2].n128_u64[0] = -1;
    *v339 = v325;
    v339[1] = v325;
    v334[2].n128_u64[0] = -1;
    *v334 = v325;
    v334[1] = v325;
LABEL_426:
    v334 = v337;
    goto LABEL_427;
  }
  v322 = v686;
LABEL_431:
  if (v319 != (_BYTE *)v320)
  {
    v344 = 0;
    do
    {
      v166 = (unint64_t)&v320[6 * v344];
      v345 = *(_QWORD *)v166;
      if (*(_QWORD *)v166 != -1)
      {
        v346 = (char *)&v320[6 * v344];
        v348 = *((_QWORD *)v346 + 1);
        v347 = (uint64_t *)(v346 + 8);
        if (v348 != -1)
        {
          v349 = v320[6 * v344 + 2];
          if (v349 != -1)
          {
            v350 = v320[6 * v344 + 3];
            if (v350 != -1 && v320[6 * v344 + 4] != -1)
            {
              v351 = *((_QWORD *)v685 + 2 * v345 + 1);
              if ((v351 & 1) == 0)
              {
                v4 = (uint64_t)&v320[6 * v350];
                v352 = *((_QWORD *)v685 + 2 * *(_QWORD *)v4 + 1);
                if ((v352 & 1) == 0 && ((v351 >> 1) & 1) == ((v352 >> 1) & 1))
                {
                  v353 = (char *)&v320[6 * v350];
                  v320[6 * v349 + 1] = *((_QWORD *)v353 + 1);
                  v320[6 * *((_QWORD *)v353 + 1) + 2] = v349;
                  v354 = *v347;
                  v320[6 * v354 + 2] = *((_QWORD *)v353 + 2);
                  v320[6 * *((_QWORD *)v353 + 2) + 1] = v354;
                  v355 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v719, v345, (_QWORD *)v166);
                  v356 = v355;
                  v357 = (char *)v355[4];
                  v358 = (uint64_t)(v355 + 5);
                  v359 = v355[5];
                  if ((unint64_t)v357 >= v359)
                  {
                    v361 = (char *)v355[3];
                    v362 = (v357 - v361) >> 3;
                    v363 = v362 + 1;
                    if ((unint64_t)(v362 + 1) >> 61)
                      goto LABEL_911;
                    v364 = v359 - (_QWORD)v361;
                    if (v364 >> 2 > v363)
                      v363 = v364 >> 2;
                    if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8)
                      v365 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v365 = v363;
                    if (v365)
                    {
                      v366 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v358, v365);
                      v361 = (char *)v356[3];
                      v357 = (char *)v356[4];
                    }
                    else
                    {
                      v366 = 0;
                    }
                    v367 = &v366[8 * v362];
                    *(_QWORD *)v367 = *(_QWORD *)v4;
                    v360 = v367 + 8;
                    while (v357 != v361)
                    {
                      v368 = *((_QWORD *)v357 - 1);
                      v357 -= 8;
                      *((_QWORD *)v367 - 1) = v368;
                      v367 -= 8;
                    }
                    v356[3] = v367;
                    v356[4] = v360;
                    v356[5] = &v366[8 * v365];
                    if (v361)
                      operator delete(v361);
                  }
                  else
                  {
                    *(_QWORD *)v357 = *(_QWORD *)v4;
                    v360 = v357 + 8;
                  }
                  v356[4] = v360;
                  v369 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v719, *(_QWORD *)v4, (_QWORD *)v4);
                  v370 = v369;
                  v371 = (char *)v369[4];
                  v372 = (uint64_t)(v369 + 5);
                  v373 = v369[5];
                  if ((unint64_t)v371 >= v373)
                  {
                    v375 = (char *)v369[3];
                    v376 = (v371 - v375) >> 3;
                    v377 = v376 + 1;
                    if ((unint64_t)(v376 + 1) >> 61)
                      goto LABEL_911;
                    v378 = v373 - (_QWORD)v375;
                    if (v378 >> 2 > v377)
                      v377 = v378 >> 2;
                    if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFF8)
                      v379 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v379 = v377;
                    if (v379)
                    {
                      v380 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v372, v379);
                      v375 = (char *)v370[3];
                      v371 = (char *)v370[4];
                    }
                    else
                    {
                      v380 = 0;
                    }
                    v381 = &v380[8 * v376];
                    *(_QWORD *)v381 = *(_QWORD *)v166;
                    v374 = v381 + 8;
                    while (v371 != v375)
                    {
                      v382 = *((_QWORD *)v371 - 1);
                      v371 -= 8;
                      *((_QWORD *)v381 - 1) = v382;
                      v381 -= 8;
                    }
                    v370[3] = v381;
                    v370[4] = v374;
                    v370[5] = &v380[8 * v379];
                    if (v375)
                      operator delete(v375);
                  }
                  else
                  {
                    *(_QWORD *)v371 = *(_QWORD *)v166;
                    v374 = v371 + 8;
                  }
                  *(_QWORD *)&v383 = -1;
                  *((_QWORD *)&v383 + 1) = -1;
                  v370[4] = v374;
                  *(_QWORD *)(v166 + 32) = -1;
                  *(_OWORD *)v166 = v383;
                  *(_OWORD *)(v166 + 16) = v383;
                  *(_QWORD *)(v4 + 32) = -1;
                  *(_OWORD *)v4 = v383;
                  *(_OWORD *)(v4 + 16) = v383;
                  v319 = v712;
                  v320 = v711;
                }
              }
            }
          }
        }
      }
      ++v344;
    }
    while (v344 < 0xAAAAAAAAAAAAAAABLL * ((v319 - (_BYTE *)v320) >> 4));
    v322 = v685;
    v321 = v686;
  }
  v708 = 0uLL;
  *(_QWORD *)&v709 = 0;
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(v718, (v321 - v322) >> 4, (unsigned __int8 *)v704);
  v384 = (_QWORD *)v720;
  if (!(_QWORD)v720)
    goto LABEL_537;
  v166 = (unint64_t)&v709;
  do
  {
    if (((*(_QWORD *)((char *)v718[0] + ((v384[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v384[2]) & 1) != 0)
      goto LABEL_536;
    v385 = (_QWORD *)*((_QWORD *)&v708 + 1);
    if (*((_QWORD *)&v708 + 1) >= (unint64_t)v709)
    {
      v387 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v708 + 1) - v708) >> 3);
      v388 = v387 + 1;
      if (v387 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_911;
      if (0x5555555555555556 * ((uint64_t)(v709 - v708) >> 3) > v388)
        v388 = 0x5555555555555556 * ((uint64_t)(v709 - v708) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v709 - v708) >> 3) >= 0x555555555555555)
        v389 = 0xAAAAAAAAAAAAAAALL;
      else
        v389 = v388;
      *(_QWORD *)v705 = &v709;
      if (v389)
        v390 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v709, v389);
      else
        v390 = 0;
      v391 = &v390[24 * v387];
      v704[0] = v390;
      v704[1] = v391;
      v704[3] = &v390[24 * v389];
      *(_QWORD *)v391 = 0;
      *((_QWORD *)v391 + 1) = 0;
      *((_QWORD *)v391 + 2) = 0;
      v386 = v391 + 24;
      v704[2] = v391 + 24;
      v392 = (_QWORD *)*((_QWORD *)&v708 + 1);
      v393 = (_QWORD *)v708;
      v394 = (char *)v704[1];
      if (*((_QWORD *)&v708 + 1) == (_QWORD)v708)
      {
        v396 = vdupq_n_s64(*((unint64_t *)&v708 + 1));
      }
      else
      {
        do
        {
          *((_QWORD *)v394 - 3) = 0;
          *((_QWORD *)v394 - 2) = 0;
          v394 -= 24;
          *((_QWORD *)v394 + 2) = 0;
          v395 = *(_OWORD *)(v392 - 3);
          v392 -= 3;
          *(_OWORD *)v394 = v395;
          *((_QWORD *)v394 + 2) = v392[2];
          *v392 = 0;
          v392[1] = 0;
          v392[2] = 0;
        }
        while (v392 != v393);
        v396 = (int64x2_t)v708;
        v386 = v704[2];
      }
      *(_QWORD *)&v708 = v394;
      *((_QWORD *)&v708 + 1) = v386;
      *(int64x2_t *)&v704[1] = v396;
      v397 = (void *)v709;
      *(void **)&v709 = v704[3];
      v704[3] = v397;
      v704[0] = (void *)v396.i64[0];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v704);
    }
    else
    {
      **((_QWORD **)&v708 + 1) = 0;
      v385[1] = 0;
      v386 = v385 + 3;
      v385[2] = 0;
    }
    *((_QWORD *)&v708 + 1) = v386;
    *(_QWORD *)&v722 = v384[2];
    memset(v717, 0, sizeof(v717));
    std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(v717, (uint64_t *)&v722, 1uLL);
    *(_OWORD *)v704 = v717[0];
    *(_OWORD *)&v704[2] = v717[1];
    memset(v717, 0, sizeof(v717));
    *(_OWORD *)v705 = v717[2];
    std::deque<unsigned long>::~deque[abi:nn180100](v717);
    v4 = (uint64_t)(v386 - 1);
    v398 = *(_QWORD *)&v705[8];
    do
    {
      v399 = v398 - 1;
      v400 = *(_QWORD *)(*(_QWORD *)((char *)v704[1]
                                   + (((unint64_t)(v399 + *(_QWORD *)v705) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v399 + *(_QWORD *)v705) & 0x1FF));
      *(_QWORD *)&v705[8] = v399;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
      v401 = *((_QWORD *)v718[0] + (v400 >> 6));
      if ((v401 & (1 << v400)) != 0)
        goto LABEL_497;
      *((_QWORD *)v718[0] + (v400 >> 6)) = v401 | (1 << v400);
      v403 = (char *)*(v386 - 2);
      v402 = *(v386 - 1);
      if ((unint64_t)v403 >= v402)
      {
        v405 = (char *)*(v386 - 3);
        v406 = (v403 - v405) >> 3;
        v407 = v406 + 1;
        if ((unint64_t)(v406 + 1) >> 61)
          goto LABEL_911;
        v408 = v402 - (_QWORD)v405;
        if (v408 >> 2 > v407)
          v407 = v408 >> 2;
        if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFF8)
          v409 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v409 = v407;
        if (v409)
        {
          v410 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v386 - 1), v409);
          v405 = (char *)*(v386 - 3);
          v403 = (char *)*(v386 - 2);
        }
        else
        {
          v410 = 0;
        }
        v411 = &v410[8 * v406];
        *(_QWORD *)v411 = v400;
        v404 = v411 + 8;
        while (v403 != v405)
        {
          v412 = *((_QWORD *)v403 - 1);
          v403 -= 8;
          *((_QWORD *)v411 - 1) = v412;
          v411 -= 8;
        }
        *(v386 - 3) = v411;
        *(v386 - 2) = v404;
        *(v386 - 1) = &v410[8 * v409];
        if (v405)
          operator delete(v405);
      }
      else
      {
        *(_QWORD *)v403 = v400;
        v404 = v403 + 8;
      }
      *(v386 - 2) = v404;
      if (!*((_QWORD *)&v719 + 1))
        goto LABEL_911;
      v413 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v719 + 8));
      v413.i16[0] = vaddlv_u8(v413);
      if (v413.u32[0] > 1uLL)
      {
        v414 = v400;
        if (v400 >= *((_QWORD *)&v719 + 1))
          v414 = v400 % *((_QWORD *)&v719 + 1);
      }
      else
      {
        v414 = (*((_QWORD *)&v719 + 1) - 1) & v400;
      }
      v415 = *(_QWORD **)(v719 + 8 * v414);
      if (!v415)
        goto LABEL_911;
      v416 = (_QWORD *)*v415;
      if (!v416)
        goto LABEL_911;
      while (1)
      {
        v417 = v416[1];
        if (v417 == v400)
          break;
        if (v413.u32[0] > 1uLL)
        {
          if (v417 >= *((_QWORD *)&v719 + 1))
            v417 %= *((_QWORD *)&v719 + 1);
        }
        else
        {
          v417 &= *((_QWORD *)&v719 + 1) - 1;
        }
        if (v417 != v414)
          goto LABEL_911;
LABEL_530:
        v416 = (_QWORD *)*v416;
        if (!v416)
          goto LABEL_911;
      }
      if (v416[2] != v400)
        goto LABEL_530;
      v418 = (_QWORD *)v416[3];
      v419 = (_QWORD *)v416[4];
      while (v418 != v419)
      {
        *(_QWORD *)&v717[0] = 0;
        *(_QWORD *)&v717[0] = *v418;
        if (((*(_QWORD *)((char *)v718[0] + ((*(_QWORD *)&v717[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SLOBYTE(v717[0])) & 1) == 0)
          std::deque<unsigned long>::push_back(v704, v717);
        ++v418;
      }
LABEL_497:
      v398 = *(_QWORD *)&v705[8];
    }
    while (*(_QWORD *)&v705[8]);
    std::deque<unsigned long>::~deque[abi:nn180100](v704);
LABEL_536:
    v384 = (_QWORD *)*v384;
  }
  while (v384);
LABEL_537:
  v722 = 0u;
  v723 = 0u;
  v724 = 1.0;
  v420 = *((_QWORD *)&v708 + 1);
  v421 = v708;
  if (*((_QWORD *)&v708 + 1) == (_QWORD)v708)
    goto LABEL_581;
  v422 = 0;
  v423 = 0;
  v424 = 0;
  while (2)
  {
    v425 = (uint64_t **)(v421 + 24 * v424);
    v426 = *v425;
    v427 = v425[1];
    if (*v425 == v427)
      goto LABEL_580;
    while (2)
    {
      v428 = *v426;
      if (v423)
      {
        v429 = (uint8x8_t)vcnt_s8((int8x8_t)v423);
        v429.i16[0] = vaddlv_u8(v429);
        if (v429.u32[0] > 1uLL)
        {
          v4 = *v426;
          if (v423 <= v428)
            v4 = v428 % v423;
        }
        else
        {
          v4 = v428 & (v423 - 1);
        }
        v430 = *(_QWORD **)(v722 + 8 * v4);
        if (v430)
        {
          for (j = (_QWORD *)*v430; j; j = (_QWORD *)*j)
          {
            v432 = j[1];
            if (v432 == v428)
            {
              if (j[2] == v428)
                goto LABEL_578;
            }
            else
            {
              if (v429.u32[0] > 1uLL)
              {
                if (v432 >= v423)
                  v432 %= v423;
              }
              else
              {
                v432 &= v423 - 1;
              }
              if (v432 != v4)
                break;
            }
          }
        }
      }
      v166 = (unint64_t)operator new(0x20uLL);
      *(_QWORD *)v166 = 0;
      *(_QWORD *)(v166 + 8) = v428;
      *(_QWORD *)(v166 + 16) = v428;
      *(_QWORD *)(v166 + 24) = v424;
      v433 = (float)(unint64_t)(v422 + 1);
      if (!v423 || (float)(v724 * (float)v423) < v433)
      {
        v434 = (v423 & (v423 - 1)) != 0;
        if (v423 < 3)
          v434 = 1;
        v435 = v434 | (2 * v423);
        v436 = vcvtps_u32_f32(v433 / v724);
        if (v435 <= v436)
          v437 = v436;
        else
          v437 = v435;
        std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)&v722, v437);
        v423 = *((_QWORD *)&v722 + 1);
        if ((v423 & (v423 - 1)) != 0)
        {
          if (*((_QWORD *)&v722 + 1) <= v428)
            v4 = v428 % *((_QWORD *)&v722 + 1);
          else
            v4 = v428;
        }
        else
        {
          v4 = (*((_QWORD *)&v722 + 1) - 1) & v428;
        }
      }
      v438 = v722;
      v439 = *(unint64_t **)(v722 + 8 * v4);
      if (v439)
      {
        *(_QWORD *)v166 = *v439;
        goto LABEL_576;
      }
      *(_QWORD *)v166 = v723;
      *(_QWORD *)&v723 = v166;
      *(_QWORD *)(v438 + 8 * v4) = &v723;
      if (*(_QWORD *)v166)
      {
        v440 = *(_QWORD *)(*(_QWORD *)v166 + 8);
        if ((v423 & (v423 - 1)) != 0)
        {
          if (v440 >= v423)
            v440 %= v423;
        }
        else
        {
          v440 &= v423 - 1;
        }
        v439 = (unint64_t *)(v722 + 8 * v440);
LABEL_576:
        *v439 = v166;
      }
      v422 = ++*((_QWORD *)&v723 + 1);
LABEL_578:
      if (++v426 != v427)
        continue;
      break;
    }
    v420 = *((_QWORD *)&v708 + 1);
    v421 = v708;
LABEL_580:
    if (++v424 < 0xAAAAAAAAAAAAAAABLL * ((v420 - v421) >> 3))
      continue;
    break;
  }
LABEL_581:
  if (v718[0])
    operator delete(v718[0]);
  v704[0] = &v708;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
LABEL_584:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)&v719);
  if (v694)
  {
    v441 = 0;
    v442 = 0;
    v443 = 0;
    memset(v704, 0, 24);
    goto LABEL_849;
  }
  v719 = 0u;
  v720 = 0u;
  v721 = 1065353216;
  v708 = 0u;
  v709 = 0u;
  v710 = 1065353216;
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(v718, 0xAAAAAAAAAAAAAAABLL * ((v712 - (_BYTE *)v711) >> 4), (unsigned __int8 *)v704);
  v444 = (_QWORD *)v698;
  if ((_QWORD)v698)
  {
LABEL_587:
    v653 = v444;
    v445 = (_QWORD *)(*((_QWORD *)&v689 + 1) + 80 * v444[2]);
    memset(v704, 0, sizeof(v704));
    *(_OWORD *)&v705[8] = 0u;
    v706 = 0u;
    *(_DWORD *)v705 = 1065353216;
    v707 = 1065353216;
    v447 = v445 + 5;
    v446 = v445[5];
    v449 = v445 + 6;
    v448 = v445[6];
    if (v448 == v446)
      goto LABEL_776;
    v450 = 0;
    while (1)
    {
      v451 = *(_QWORD *)(v446 + 8 * v450);
      v452 = *((_QWORD *)v718[0] + (v451 >> 6));
      if (((1 << v451) & v452) == 0)
      {
        *((_QWORD *)v718[0] + (v451 >> 6)) = v452 | (1 << v451);
        v453 = (unint64_t *)((char *)v711 + 48 * v451);
        v454 = *v453;
        if (*v453 != -1
          && *((_QWORD *)v711 + 6 * v451 + 1) != -1
          && *((_QWORD *)v711 + 6 * v451 + 2) != -1
          && *((_QWORD *)v711 + 6 * v451 + 3) != -1)
        {
          v455 = *((_QWORD *)v711 + 6 * v451 + 4) == -1 || v454 == *v445;
          if (!v455 && (*((_BYTE *)v685 + 16 * v454 + 8) & 2) != 0)
            break;
        }
      }
LABEL_590:
      if (++v450 >= (unint64_t)((v448 - v446) >> 3))
      {
        v507 = v704[2];
        if (v704[2])
        {
          do
          {
            v508 = v715;
            v509 = 0xAAAAAAAAAAAAAAABLL * (((char *)v715 - v714) >> 4);
            if (v715 >= (_OWORD *)v716)
            {
              v511 = v509 + 1;
              if ((unint64_t)(v509 + 1) > 0x555555555555555)
                goto LABEL_911;
              if (0x5555555555555556 * ((v716 - v714) >> 4) > v511)
                v511 = 0x5555555555555556 * ((v716 - v714) >> 4);
              if (0xAAAAAAAAAAAAAAABLL * ((v716 - v714) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v512 = 0x555555555555555;
              else
                v512 = v511;
              *(_QWORD *)&v717[2] = &v716;
              if (v512)
                v512 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::IslandHalfEdgeLoop>>(v512);
              else
                v513 = 0;
              v514 = (_OWORD *)(v512 + 48 * v509);
              *(_QWORD *)&v717[0] = v512;
              *((_QWORD *)&v717[0] + 1) = v514;
              *((_QWORD *)&v717[1] + 1) = v512 + 48 * v513;
              *v514 = 0u;
              v514[1] = 0u;
              v514[2] = 0u;
              *(_QWORD *)&v717[1] = v514 + 3;
              std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__swap_out_circular_buffer((uint64_t *)&v714, v717);
              v510 = v715;
              std::__split_buffer<re::pathprocessing::IslandHalfEdgeLoop>::~__split_buffer((uint64_t)v717);
            }
            else
            {
              v715[1] = 0u;
              v508[2] = 0u;
              v510 = v508 + 3;
              *v508 = 0u;
            }
            v715 = v510;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,unsigned long &>((uint64_t)&v708, v507[2], v507[2], v509);
            v515 = (__n128 *)v507[3];
            v516 = (__n128 *)v507[4];
            if ((char *)v516 - (char *)v515 == 24)
            {
              std::vector<unsigned long>::__move_assign((uint64_t)(v510 - 3), v515);
            }
            else
            {
              v661 = (uint64_t)(v510 - 3);
              v665 = v510;
              if (v516 != v515)
              {
                v166 = 0;
                v517 = ((char *)v516 - (char *)v515) / 24;
                v655 = (uint64_t)v510 - 8;
                v658 = (_QWORD *)v510 - 3;
                if (v517 <= 1)
                  v517 = 1;
                v671 = v517;
                do
                {
                  v518 = v507[3] + 24 * v166;
                  v519 = *(uint64_t **)v518;
                  v521 = (_QWORD *)(v518 + 8);
                  v520 = *(uint64_t **)(v518 + 8);
                  if (*(uint64_t **)v518 != v520)
                  {
                    v522 = 0.0;
                    do
                    {
                      v523 = *v519++;
                      v524 = (char *)v683 + 48 * v523;
                      v525 = *(float *)(__p + 4 * *((_QWORD *)v524 + 4));
                      if (*((_DWORD *)v524 + 10))
                        v525 = -v525;
                      v522 = v522 + v525;
                    }
                    while (v519 != v520);
                    if (fabsf(v522) >= 0.0001)
                    {
                      if (v522 <= 0.0)
                      {
                        v527 = (_QWORD *)*((_QWORD *)v665 - 2);
                        v526 = *((_QWORD *)v665 - 1);
                        if ((unint64_t)v527 >= v526)
                        {
                          v529 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v527 - *v658) >> 3);
                          v530 = v529 + 1;
                          if (v529 + 1 > 0xAAAAAAAAAAAAAAALL)
                            goto LABEL_911;
                          v531 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v526 - *v658) >> 3);
                          if (2 * v531 > v530)
                            v530 = 2 * v531;
                          if (v531 >= 0x555555555555555)
                            v532 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v532 = v530;
                          *(_QWORD *)&v717[2] = v655;
                          if (v532)
                            v533 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v655, v532);
                          else
                            v533 = 0;
                          v534 = &v533[24 * v529];
                          *(_QWORD *)&v717[0] = v533;
                          *((_QWORD *)&v717[0] + 1) = v534;
                          *((_QWORD *)&v717[1] + 1) = &v533[24 * v532];
                          *(_QWORD *)v534 = 0;
                          *((_QWORD *)v534 + 1) = 0;
                          *((_QWORD *)v534 + 2) = 0;
                          *(_QWORD *)&v717[1] = v534 + 24;
                          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v658, v717);
                          v528 = (_QWORD *)*((_QWORD *)v665 - 2);
                          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v717);
                        }
                        else
                        {
                          *v527 = 0;
                          v527[1] = 0;
                          v528 = v527 + 3;
                          v527[2] = 0;
                        }
                        *((_QWORD *)v665 - 2) = v528;
                        v535 = *(uint64_t **)v518;
                        if (*v521 != *(_QWORD *)v518)
                        {
                          v536 = 0;
                          v537 = v528 - 1;
                          v538 = (char *)*(v528 - 2);
                          do
                          {
                            v539 = (char *)v683 + 48 * v535[v536] + 24;
                            if ((unint64_t)v538 >= *v537)
                            {
                              v541 = (char *)*(v528 - 3);
                              v542 = (v538 - v541) >> 3;
                              v543 = v542 + 1;
                              if ((unint64_t)(v542 + 1) >> 61)
                                goto LABEL_911;
                              v544 = *v537 - (_QWORD)v541;
                              if (v544 >> 2 > v543)
                                v543 = v544 >> 2;
                              if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFF8)
                                v545 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v545 = v543;
                              if (v545)
                              {
                                v546 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v528 - 1), v545);
                                v541 = (char *)*(v528 - 3);
                                v538 = (char *)*(v528 - 2);
                              }
                              else
                              {
                                v546 = 0;
                              }
                              v547 = &v546[8 * v542];
                              *(_QWORD *)v547 = *v539;
                              v540 = v547 + 8;
                              while (v538 != v541)
                              {
                                v548 = *((_QWORD *)v538 - 1);
                                v538 -= 8;
                                *((_QWORD *)v547 - 1) = v548;
                                v547 -= 8;
                              }
                              *(v528 - 3) = v547;
                              *(v528 - 2) = v540;
                              *(v528 - 1) = &v546[8 * v545];
                              if (v541)
                                operator delete(v541);
                            }
                            else
                            {
                              *(_QWORD *)v538 = *v539;
                              v540 = v538 + 8;
                            }
                            *(v528 - 2) = v540;
                            ++v536;
                            v535 = *(uint64_t **)v518;
                            v538 = v540;
                          }
                          while (v536 < (uint64_t)(*v521 - *(_QWORD *)v518) >> 3);
                        }
                      }
                      else
                      {
                        std::vector<unsigned long>::__move_assign(v661, (__n128 *)(v507[3] + 24 * v166));
                      }
                    }
                  }
                  ++v166;
                }
                while (v166 != v671);
              }
            }
            v507 = (_QWORD *)*v507;
          }
          while (v507);
        }
LABEL_776:
        for (k = (uint64_t *)v706; k; k = (uint64_t *)*k)
        {
          v550 = v715;
          v551 = 0xAAAAAAAAAAAAAAABLL * (((char *)v715 - v714) >> 4);
          if (v715 >= (_OWORD *)v716)
          {
            v553 = v551 + 1;
            if ((unint64_t)(v551 + 1) > 0x555555555555555)
              goto LABEL_911;
            if (0x5555555555555556 * ((v716 - v714) >> 4) > v553)
              v553 = 0x5555555555555556 * ((v716 - v714) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((v716 - v714) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v554 = 0x555555555555555;
            else
              v554 = v553;
            *(_QWORD *)&v717[2] = &v716;
            if (v554)
              v554 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::IslandHalfEdgeLoop>>(v554);
            else
              v555 = 0;
            v556 = (_OWORD *)(v554 + 48 * v551);
            *(_QWORD *)&v717[0] = v554;
            *((_QWORD *)&v717[0] + 1) = v556;
            *((_QWORD *)&v717[1] + 1) = v554 + 48 * v555;
            *v556 = 0u;
            v556[1] = 0u;
            v556[2] = 0u;
            *(_QWORD *)&v717[1] = v556 + 3;
            std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__swap_out_circular_buffer((uint64_t *)&v714, v717);
            v552 = v715;
            std::__split_buffer<re::pathprocessing::IslandHalfEdgeLoop>::~__split_buffer((uint64_t)v717);
          }
          else
          {
            v715[1] = 0u;
            v550[2] = 0u;
            v552 = v550 + 3;
            *v550 = 0u;
          }
          v715 = v552;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,unsigned long &>((uint64_t)&v719, k[2], k[2], v551);
          std::vector<unsigned long>::__move_assign((uint64_t)(v552 - 3), (__n128 *)(k + 3));
        }
        v557 = (_QWORD *)v653[5];
        if (v557)
        {
          do
          {
            v558 = v557[2];
            v559 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v722, *((unint64_t *)&v722 + 1), v558);
            if (v559)
            {
              v560 = *((_QWORD *)&v708 + 1);
              v561 = v559[3];
              v562 = v708;
            }
            else
            {
              v560 = *((_QWORD *)&v719 + 1);
              v562 = v719;
              v561 = v558;
            }
            v563 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v562, v560, v561);
            v565 = (_QWORD *)v557[3];
            v564 = (_QWORD *)v557[4];
            v656 = v557;
            if (v565 != v564)
            {
              v566 = &v714[48 * v563[3]];
              v666 = v566 + 24;
              v672 = (_QWORD **)(v566 + 32);
              v567 = v566 + 40;
              v659 = v566 + 40;
              v662 = (_QWORD *)v557[4];
              do
              {
                v568 = (_QWORD *)(*((_QWORD *)&v689 + 1) + 80 * *v565);
                v166 = (unint64_t)(v568 + 5);
                v569 = v568[5];
                v570 = v568[6];
                if (v570 != v569)
                {
                  v571 = 0;
                  v572 = v718[0];
                  do
                  {
                    v573 = *(_QWORD *)(v569 + 8 * v571);
                    v574 = v572[v573 >> 6];
                    if (((1 << v573) & v574) == 0)
                    {
                      v572[v573 >> 6] = (1 << v573) | v574;
                      v575 = *((_QWORD *)v711 + 6 * v573);
                      if (v575 != -1
                        && *((_QWORD *)v711 + 6 * v573 + 1) != -1
                        && *((_QWORD *)v711 + 6 * v573 + 2) != -1
                        && *((_QWORD *)v711 + 6 * v573 + 3) != -1
                        && *((_QWORD *)v711 + 6 * v573 + 4) != -1
                        && v575 != *v568
                        && (*((_BYTE *)v685 + 16 * v575 + 8) & 2) == 0)
                      {
                        v576 = v672;
                        v577 = *v672;
                        if ((unint64_t)*v672 >= *v567)
                        {
                          v579 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v577 - *v666) >> 3);
                          v580 = v579 + 1;
                          if (v579 + 1 > 0xAAAAAAAAAAAAAAALL)
                            goto LABEL_911;
                          if (0x5555555555555556 * ((uint64_t)(*v567 - *v666) >> 3) > v580)
                            v580 = 0x5555555555555556 * ((uint64_t)(*v567 - *v666) >> 3);
                          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v567 - *v666) >> 3) >= 0x555555555555555)
                            v581 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v581 = v580;
                          *(_QWORD *)&v717[2] = v567;
                          if (v581)
                            v582 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v567, v581);
                          else
                            v582 = 0;
                          v583 = &v582[24 * v579];
                          *(_QWORD *)&v717[0] = v582;
                          *((_QWORD *)&v717[0] + 1) = v583;
                          *((_QWORD *)&v717[1] + 1) = &v582[24 * v581];
                          *(_QWORD *)v583 = 0;
                          *((_QWORD *)v583 + 1) = 0;
                          *((_QWORD *)v583 + 2) = 0;
                          *(_QWORD *)&v717[1] = v583 + 24;
                          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v666, v717);
                          v576 = v672;
                          v578 = *v672;
                          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v717);
                        }
                        else
                        {
                          *v577 = 0;
                          v577[1] = 0;
                          v578 = v577 + 3;
                          v577[2] = 0;
                        }
                        *v576 = v578;
                        v584 = v578 - 1;
                        v585 = (char *)*(v578 - 2);
                        do
                        {
                          if ((unint64_t)v585 >= *v584)
                          {
                            v587 = (char *)*(v578 - 3);
                            v588 = (v585 - v587) >> 3;
                            v589 = v588 + 1;
                            if ((unint64_t)(v588 + 1) >> 61)
                              goto LABEL_911;
                            v590 = *v584 - (_QWORD)v587;
                            if (v590 >> 2 > v589)
                              v589 = v590 >> 2;
                            if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFF8)
                              v591 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v591 = v589;
                            if (v591)
                            {
                              v592 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v578 - 1), v591);
                              v587 = (char *)*(v578 - 3);
                              v585 = (char *)*(v578 - 2);
                            }
                            else
                            {
                              v592 = 0;
                            }
                            v593 = &v592[8 * v588];
                            *(_QWORD *)v593 = v573;
                            v586 = v593 + 8;
                            while (v585 != v587)
                            {
                              v594 = *((_QWORD *)v585 - 1);
                              v585 -= 8;
                              *((_QWORD *)v593 - 1) = v594;
                              v593 -= 8;
                            }
                            *(v578 - 3) = v593;
                            *(v578 - 2) = v586;
                            *(v578 - 1) = &v592[8 * v591];
                            if (v587)
                              operator delete(v587);
                          }
                          else
                          {
                            *(_QWORD *)v585 = v573;
                            v586 = v585 + 8;
                          }
                          *(v578 - 2) = v586;
                          v573 = *((_QWORD *)v711 + 6 * v573 + 2);
                          v572 = v718[0];
                          *(_QWORD *)((char *)v718[0] + ((v573 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v573;
                          v569 = *(_QWORD *)v166;
                          v585 = v586;
                        }
                        while (v573 != *(_QWORD *)(*(_QWORD *)v166 + 8 * v571));
                        v570 = v568[6];
                        v567 = v659;
                        v564 = v662;
                      }
                    }
                    ++v571;
                  }
                  while (v571 < (uint64_t)(v570 - v569) >> 3);
                }
                ++v565;
              }
              while (v565 != v564);
            }
            v557 = (_QWORD *)*v656;
          }
          while (*v656);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)&v705[8]);
        v595 = v704[2];
        if (v704[2])
        {
          do
          {
            v596 = (_QWORD *)*v595;
            *(_QWORD *)&v717[0] = v595 + 3;
            std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v717);
            operator delete(v595);
            v595 = v596;
          }
          while (v596);
        }
        v597 = v704[0];
        v704[0] = 0;
        if (v597)
          operator delete(v597);
        v444 = (_QWORD *)*v653;
        if (!*v653)
          goto LABEL_846;
        goto LABEL_587;
      }
    }
    v670 = v449;
    v456 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v722, *((unint64_t *)&v722 + 1), v454);
    if (v456)
    {
      v457 = v456[3];
      v458 = (unint64_t)v704[1];
      if (v704[1])
      {
        v459 = (uint8x8_t)vcnt_s8((int8x8_t)v704[1]);
        v459.i16[0] = vaddlv_u8(v459);
        if (v459.u32[0] > 1uLL)
        {
          v166 = v456[3];
          if (v704[1] <= (void *)v457)
            v166 = v457 % (unint64_t)v704[1];
        }
        else
        {
          v166 = ((unint64_t)v704[1] - 1) & v457;
        }
        v461 = (_QWORD **)*((_QWORD *)v704[0] + v166);
        if (v461)
        {
          for (m = *v461; m; m = (_QWORD *)*m)
          {
            v463 = m[1];
            if (v463 == v457)
            {
              if (m[2] == v457)
                goto LABEL_675;
            }
            else
            {
              if (v459.u32[0] > 1uLL)
              {
                if ((void *)v463 >= v704[1])
                  v463 %= (unint64_t)v704[1];
              }
              else
              {
                v463 &= (unint64_t)v704[1] - 1;
              }
              if (v463 != v166)
                break;
            }
          }
        }
      }
      v464 = v456;
      m = operator new(0x30uLL);
      *m = 0;
      m[1] = v457;
      v465 = v464[3];
      m[4] = 0;
      m[5] = 0;
      m[2] = v465;
      m[3] = 0;
      v466 = (float)((unint64_t)v704[3] + 1);
      if (!v458 || (float)(*(float *)v705 * (float)v458) < v466)
      {
        v467 = (v458 & (v458 - 1)) != 0;
        if (v458 < 3)
          v467 = 1;
        v468 = v467 | (2 * v458);
        v469 = vcvtps_u32_f32(v466 / *(float *)v705);
        if (v468 <= v469)
          prime = (int8x8_t)v469;
        else
          prime = (int8x8_t)v468;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v458 = (unint64_t)v704[1];
        }
        if (*(_QWORD *)&prime <= v458)
        {
          if (*(_QWORD *)&prime < v458)
          {
            v477 = vcvtps_u32_f32((float)(unint64_t)v704[3] / *(float *)v705);
            if (v458 < 3
              || (v478 = (uint8x8_t)vcnt_s8((int8x8_t)v458), v478.i16[0] = vaddlv_u8(v478), v478.u32[0] > 1uLL))
            {
              v477 = std::__next_prime(v477);
            }
            else
            {
              v479 = 1 << -(char)__clz(v477 - 1);
              if (v477 >= 2)
                v477 = v479;
            }
            if (*(_QWORD *)&prime <= v477)
              prime = (int8x8_t)v477;
            if (*(_QWORD *)&prime >= v458)
            {
              v458 = (unint64_t)v704[1];
            }
            else
            {
              if (prime)
                goto LABEL_631;
              v506 = v704[0];
              v704[0] = 0;
              if (v506)
                operator delete(v506);
              v458 = 0;
              v704[1] = 0;
            }
          }
        }
        else
        {
LABEL_631:
          if (*(_QWORD *)&prime >> 61)
            goto LABEL_912;
          v471 = operator new(8 * *(_QWORD *)&prime);
          v472 = v704[0];
          v704[0] = v471;
          if (v472)
            operator delete(v472);
          v473 = 0;
          v704[1] = (void *)prime;
          do
            *((_QWORD *)v704[0] + v473++) = 0;
          while (*(_QWORD *)&prime != v473);
          v474 = (_QWORD **)v704[2];
          if (v704[2])
          {
            v475 = *((_QWORD *)v704[2] + 1);
            v476 = (uint8x8_t)vcnt_s8(prime);
            v476.i16[0] = vaddlv_u8(v476);
            if (v476.u32[0] > 1uLL)
            {
              if (v475 >= *(_QWORD *)&prime)
                v475 %= *(_QWORD *)&prime;
            }
            else
            {
              v475 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)v704[0] + v475) = &v704[2];
            for (n = *v474; n; v475 = v481)
            {
              v481 = n[1];
              if (v476.u32[0] > 1uLL)
              {
                if (v481 >= *(_QWORD *)&prime)
                  v481 %= *(_QWORD *)&prime;
              }
              else
              {
                v481 &= *(_QWORD *)&prime - 1;
              }
              if (v481 != v475)
              {
                if (!*((_QWORD *)v704[0] + v481))
                {
                  *((_QWORD *)v704[0] + v481) = v474;
                  goto LABEL_656;
                }
                *v474 = (_QWORD *)*n;
                *n = **((_QWORD **)v704[0] + v481);
                **((_QWORD **)v704[0] + v481) = n;
                n = v474;
              }
              v481 = v475;
LABEL_656:
              v474 = (_QWORD **)n;
              n = (_QWORD *)*n;
            }
          }
          v458 = (unint64_t)prime;
        }
        if ((v458 & (v458 - 1)) != 0)
        {
          if (v458 <= v457)
            v166 = v457 % v458;
          else
            v166 = v457;
        }
        else
        {
          v166 = (v458 - 1) & v457;
        }
      }
      v482 = v704[0];
      v483 = (_QWORD *)*((_QWORD *)v704[0] + v166);
      if (v483)
      {
        *m = *v483;
        goto LABEL_673;
      }
      *m = v704[2];
      v704[2] = m;
      v482[v166] = &v704[2];
      if (*m)
      {
        v484 = *(_QWORD *)(*m + 8);
        if ((v458 & (v458 - 1)) != 0)
        {
          if (v484 >= v458)
            v484 %= v458;
        }
        else
        {
          v484 &= v458 - 1;
        }
        v483 = (char *)v704[0] + 8 * v484;
LABEL_673:
        *v483 = m;
      }
      ++v704[3];
LABEL_675:
      v485 = m[5];
      v486 = (_QWORD *)m[4];
      if ((unint64_t)v486 >= v485)
      {
        v488 = m[3];
        v489 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v486 - v488) >> 3);
        v490 = v489 + 1;
        if (v489 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_911;
        v491 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v485 - v488) >> 3);
        if (2 * v491 > v490)
          v490 = 2 * v491;
        if (v491 >= 0x555555555555555)
          v492 = 0xAAAAAAAAAAAAAAALL;
        else
          v492 = v490;
        *(_QWORD *)&v717[2] = m + 5;
        if (v492)
          v493 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(m + 5), v492);
        else
          v493 = 0;
        v494 = &v493[24 * v489];
        *(_QWORD *)&v717[0] = v493;
        *((_QWORD *)&v717[0] + 1) = v494;
        *((_QWORD *)&v717[1] + 1) = &v493[24 * v492];
        *(_QWORD *)v494 = 0;
        *((_QWORD *)v494 + 1) = 0;
        *((_QWORD *)v494 + 2) = 0;
        *(_QWORD *)&v717[1] = v494 + 24;
        std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(m + 3, v717);
        v487 = (_QWORD *)m[4];
        std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v717);
      }
      else
      {
        *v486 = 0;
        v486[1] = 0;
        v487 = v486 + 3;
        v486[2] = 0;
      }
      m[4] = v487;
      v460 = (char **)(v487 - 3);
    }
    else
    {
      v460 = (char **)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v705[8], v454, v453)+ 3);
    }
    v495 = v460 + 2;
    v496 = v460[1];
    do
    {
      v166 = (unint64_t)v711;
      *(_QWORD *)((char *)v718[0] + ((v451 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v451;
      if ((unint64_t)v496 >= *v495)
      {
        v498 = *v460;
        v499 = (v496 - *v460) >> 3;
        v500 = v499 + 1;
        if ((unint64_t)(v499 + 1) >> 61)
          goto LABEL_911;
        v501 = *v495 - (_QWORD)v498;
        if (v501 >> 2 > v500)
          v500 = v501 >> 2;
        if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
          v502 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v502 = v500;
        if (v502)
        {
          v503 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v460 + 2), v502);
          v498 = *v460;
          v496 = v460[1];
        }
        else
        {
          v503 = 0;
        }
        v504 = &v503[8 * v499];
        *(_QWORD *)v504 = v451;
        v497 = v504 + 8;
        while (v496 != v498)
        {
          v505 = *((_QWORD *)v496 - 1);
          v496 -= 8;
          *((_QWORD *)v504 - 1) = v505;
          v504 -= 8;
        }
        *v460 = v504;
        v460[1] = v497;
        v460[2] = &v503[8 * v502];
        if (v498)
          operator delete(v498);
      }
      else
      {
        *(_QWORD *)v496 = v451;
        v497 = v496 + 8;
      }
      v460[1] = v497;
      v451 = *(_QWORD *)(v166 + 48 * v451 + 8);
      v446 = *v447;
      v496 = v497;
    }
    while (v451 != *(_QWORD *)(*v447 + 8 * v450));
    v449 = v670;
    v448 = *v670;
    goto LABEL_590;
  }
LABEL_846:
  v443 = v714;
  v442 = v715;
  v704[0] = v714;
  v704[1] = v715;
  v441 = v716;
  v704[2] = v716;
  v715 = 0;
  v714 = 0;
  v716 = 0;
  if (v718[0])
    operator delete(v718[0]);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v708);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v719);
LABEL_849:
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v722);
  if (v711)
  {
    v712 = v711;
    operator delete(v711);
  }
  *(_QWORD *)&v717[0] = &v714;
  std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100]((void ***)v717);
  if (v694)
  {
    v598 = (void **)v717;
  }
  else
  {
    *(_QWORD *)&v717[0] = v443;
    *((_QWORD *)&v717[0] + 1) = v442;
    v598 = v704;
    *(_QWORD *)&v717[1] = v441;
  }
  v599 = v652;
  *v598 = 0;
  v598[1] = 0;
  v598[2] = 0;
  *(_QWORD *)&v719 = v704;
  std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100]((void ***)&v719);
  v600 = (_QWORD *)v698;
  if ((_QWORD)v698)
  {
    do
    {
      v601 = (_QWORD *)*v600;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)(v600 + 3));
      operator delete(v600);
      v600 = v601;
    }
    while (v601);
  }
  v602 = (void *)v697;
  *(_QWORD *)&v697 = 0;
  if (v602)
    operator delete(v602);
  if (v700)
    operator delete(v700);
  v603 = (_anonymous_namespace_ *)v701;
  if (v701)
  {
    v702 = (char *)v701;
    operator delete(v701);
  }
  if (!v694)
  {
    v673 = *(_QWORD *)&v717[0];
    v608 = *((_QWORD *)&v717[0] + 1) - *(_QWORD *)&v717[0];
    if (*((_QWORD *)&v717[0] + 1) == *(_QWORD *)&v717[0])
    {
      v649 = 0;
      v650 = 0;
      v610 = 0;
LABEL_908:
      v719 = 0uLL;
      *(_QWORD *)&v720 = 0;
      *(_BYTE *)v599 = 1;
      *(_QWORD *)(v599 + 8) = v610;
      *(_QWORD *)(v599 + 16) = v650;
      *(_QWORD *)(v599 + 24) = v649;
      memset(v704, 0, 24);
      *(_QWORD *)&v722 = v704;
      std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v722);
      *(_QWORD *)&v722 = &v719;
      std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v722);
      goto LABEL_909;
    }
    v609 = 0xAAAAAAAAAAAAAAABLL * (v608 >> 4);
    if (v609 <= 0x555555555555555)
    {
      v610 = (char *)operator new(*((_QWORD *)&v717[0] + 1) - *(_QWORD *)&v717[0]);
      *(_QWORD *)&v719 = v610;
      v657 = &v610[16 * (v608 >> 4)];
      *(_QWORD *)&v720 = v657;
      v611 = 48 * ((v608 - 48) / 0x30uLL) + 48;
      bzero(v610, v611);
      v612 = 0;
      v654 = &v610[v611];
      *((_QWORD *)&v719 + 1) = &v610[v611];
      v663 = v610;
      v660 = v609;
      do
      {
        v613 = &v610[48 * v612];
        v614 = (void **)(v613 + 24);
        v615 = v673 + 48 * v612;
        v618 = *(_QWORD *)(v615 + 24);
        v617 = (_QWORD *)(v615 + 24);
        v616 = v618;
        v619 = v673 + 48 * v612;
        v621 = *(_QWORD *)(v619 + 32);
        v620 = (_QWORD *)(v619 + 32);
        std::vector<unsigned long>::reserve((void **)v613 + 3, 1 - 0x5555555555555555 * ((v621 - v616) >> 3));
        re::pathprocessing::PathTopologyGenerator::extractBoundary((uint64_t)&v674, *(_QWORD **)(v673 + 48 * v612), *(_QWORD **)(v673 + 48 * v612 + 8), 0, (char **)v613);
        v622 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v613 + 1) - *(_QWORD *)v613) >> 3);
        v624 = (unint64_t **)(v613 + 32);
        v623 = (unint64_t *)*((_QWORD *)v613 + 4);
        v626 = v613 + 40;
        v625 = *((_QWORD *)v613 + 5);
        if ((unint64_t)v623 >= v625)
        {
          v628 = (unint64_t *)*v614;
          v629 = ((char *)v623 - (_BYTE *)*v614) >> 3;
          v630 = v629 + 1;
          if ((unint64_t)(v629 + 1) >> 61)
            goto LABEL_911;
          v631 = v625 - (_QWORD)v628;
          if (v631 >> 2 > v630)
            v630 = v631 >> 2;
          if ((unint64_t)v631 >= 0x7FFFFFFFFFFFFFF8)
            v632 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v632 = v630;
          if (v632)
          {
            v633 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v613 + 40), v632);
            v623 = *v624;
            v628 = (unint64_t *)*v614;
          }
          else
          {
            v633 = 0;
          }
          v634 = (unint64_t *)&v633[8 * v629];
          *v634 = v622;
          v627 = v634 + 1;
          while (v623 != v628)
          {
            v635 = *--v623;
            *--v634 = v635;
          }
          *v614 = v634;
          *v624 = v627;
          *v626 = &v633[8 * v632];
          if (v628)
            operator delete(v628);
        }
        else
        {
          *v623 = v622;
          v627 = v623 + 1;
        }
        *v624 = v627;
        v636 = (_QWORD **)*v617;
        v637 = (_QWORD **)*v620;
        while (v636 != v637)
        {
          re::pathprocessing::PathTopologyGenerator::extractBoundary((uint64_t)&v674, *v636, v636[1], 1, (char **)v613);
          v638 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v613 + 1) - *(_QWORD *)v613) >> 3);
          v639 = *v624;
          if ((unint64_t)*v624 >= *v626)
          {
            v641 = (unint64_t *)*v614;
            v642 = ((char *)v639 - (_BYTE *)*v614) >> 3;
            v643 = v642 + 1;
            if ((unint64_t)(v642 + 1) >> 61)
              goto LABEL_911;
            v644 = *v626 - (_QWORD)v641;
            if (v644 >> 2 > v643)
              v643 = v644 >> 2;
            if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8)
              v645 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v645 = v643;
            if (v645)
            {
              v646 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v613 + 40), v645);
              v639 = *v624;
              v641 = (unint64_t *)*v614;
            }
            else
            {
              v646 = 0;
            }
            v647 = (unint64_t *)&v646[8 * v642];
            *v647 = v638;
            v640 = v647 + 1;
            while (v639 != v641)
            {
              v648 = *--v639;
              *--v647 = v648;
            }
            *v614 = v647;
            *v624 = v640;
            *v626 = &v646[8 * v645];
            if (v641)
              operator delete(v641);
          }
          else
          {
            *v639 = v638;
            v640 = v639 + 1;
          }
          *v624 = v640;
          v636 += 3;
        }
        ++v612;
        v610 = v663;
      }
      while (v612 < v660);
      v599 = v652;
      v650 = v654;
      v649 = v657;
      goto LABEL_908;
    }
LABEL_911:
    abort();
  }
  if (v696 >= 0)
    v604 = v695;
  else
    v604 = (void **)v695[0];
  v605 = *(_OWORD *)v704;
  v606 = v704[2];
  v607 = v704[3];
  *(_BYTE *)v652 = 0;
  *(_QWORD *)(v652 + 8) = 3;
  *(_QWORD *)(v652 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
  *(_OWORD *)(v652 + 24) = v605;
  *(_QWORD *)(v652 + 40) = v606;
  *(_QWORD *)(v652 + 48) = v607;
LABEL_909:
  v704[0] = v717;
  std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
LABEL_206:
  if (SHIBYTE(v696) < 0)
    operator delete(v695[0]);
  if (*((_QWORD *)&v692 + 1))
  {
    *(_QWORD *)&v693 = *((_QWORD *)&v692 + 1);
    operator delete(*((void **)&v692 + 1));
  }
  if ((_QWORD)v691)
  {
    *((_QWORD *)&v691 + 1) = v691;
    operator delete((void *)v691);
  }
  v175 = (_QWORD *)*((_QWORD *)&v689 + 1);
  if (*((_QWORD *)&v689 + 1))
  {
    v176 = (_QWORD *)v690;
    v177 = (void *)*((_QWORD *)&v689 + 1);
    if ((_QWORD)v690 != *((_QWORD *)&v689 + 1))
    {
      do
      {
        v176 -= 10;
        std::allocator<re::pathprocessing::FaceGroup>::destroy[abi:nn180100](v176);
      }
      while (v176 != v175);
      v177 = (void *)*((_QWORD *)&v689 + 1);
    }
    *(_QWORD *)&v690 = v175;
    operator delete(v177);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v685)
  {
    v686 = v685;
    operator delete(v685);
  }
  if (v683)
  {
    v684 = v683;
    operator delete(v683);
  }
  if (v681)
  {
    v682 = v681;
    operator delete(v681);
  }
  v178 = (char *)v679;
  if (v679)
  {
    v179 = v680;
    v180 = v679;
    if (v680 != v679)
    {
      v181 = v680;
      do
      {
        v183 = (void *)*((_QWORD *)v181 - 3);
        v181 -= 24;
        v182 = v183;
        if (v183)
        {
          *(v179 - 2) = v182;
          operator delete(v182);
        }
        v179 = v181;
      }
      while (v181 != v178);
      v180 = v679;
    }
    v680 = v178;
    operator delete(v180);
  }
  v704[0] = &v677;
  std::vector<re::pathprocessing::ContinuousEdge>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
}

void re::pathprocessing::PathTopologyGenerator::extractBoundary(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char **a5)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD *v45;

  if (a2 != a3)
  {
    v7 = a5 + 2;
    do
    {
      v45 = a2;
      v8 = *(_QWORD *)(a1 + 96) + 48 * *a2;
      v9 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 72 * *(_QWORD *)(v8 + 32));
      std::vector<re::pathprocessing::Bezier2>::reserve((void **)a5, v9[5] - 0x5555555555555555 * ((a5[1] - *a5) >> 3));
      v10 = *(_DWORD *)(v8 + 40);
      v11 = v9[5];
      if (v10 == a4)
      {
        if (v11)
        {
          v12 = 0;
          v13 = a5[1];
          do
          {
            v14 = **(_QWORD **)a1
                + 24
                * *(_QWORD *)(*(_QWORD *)(v9[1] + (((v9[4] + v12) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v9[4] + v12) & 0x1FF));
            if ((unint64_t)v13 >= *v7)
            {
              v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a5) >> 3);
              v17 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_45;
              if (0x5555555555555556 * ((uint64_t)(*v7 - (_QWORD)*a5) >> 3) > v17)
                v17 = 0x5555555555555556 * ((uint64_t)(*v7 - (_QWORD)*a5) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - (_QWORD)*a5) >> 3) >= 0x555555555555555)
                v18 = 0xAAAAAAAAAAAAAAALL;
              else
                v18 = v17;
              if (v18)
                v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v18);
              else
                v19 = 0;
              v20 = &v19[24 * v16];
              v21 = *(_OWORD *)v14;
              *((_QWORD *)v20 + 2) = *(_QWORD *)(v14 + 16);
              *(_OWORD *)v20 = v21;
              v23 = *a5;
              v22 = a5[1];
              v24 = v20;
              if (v22 != *a5)
              {
                do
                {
                  v25 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
                  *(_OWORD *)(v24 - 24) = v25;
                  v24 -= 24;
                  v22 -= 24;
                }
                while (v22 != v23);
                v22 = *a5;
              }
              v13 = v20 + 24;
              *a5 = v24;
              a5[1] = v20 + 24;
              a5[2] = &v19[24 * v18];
              if (v22)
                operator delete(v22);
            }
            else
            {
              v15 = *(_OWORD *)v14;
              *((_QWORD *)v13 + 2) = *(_QWORD *)(v14 + 16);
              *(_OWORD *)v13 = v15;
              v13 += 24;
            }
            a5[1] = v13;
            ++v12;
          }
          while (v12 < v9[5]);
        }
      }
      else
      {
        for (; v11; a5[1] = v32)
        {
          if (v9[5] <= (unint64_t)--v11)
LABEL_45:
            abort();
          v26 = (uint64_t *)(**(_QWORD **)a1
                          + 24
                          * *(_QWORD *)(*(_QWORD *)(v9[1]
                                                  + (((unint64_t)(v9[4] + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v9[4] + v11) & 0x1FF)));
          v27 = v26[1];
          v28 = v26[2];
          v29 = *v26;
          v31 = a5[1];
          v30 = (unint64_t)a5[2];
          if ((unint64_t)v31 >= v30)
          {
            v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *a5) >> 3);
            v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_45;
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)*a5) >> 3);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0x555555555555555)
              v36 = 0xAAAAAAAAAAAAAAALL;
            else
              v36 = v34;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v36);
            else
              v37 = 0;
            v38 = &v37[24 * v33];
            *(_QWORD *)v38 = v28;
            *((_QWORD *)v38 + 1) = v27;
            *((_QWORD *)v38 + 2) = v29;
            v40 = *a5;
            v39 = a5[1];
            v41 = v38;
            if (v39 != *a5)
            {
              do
              {
                v42 = *(_OWORD *)(v39 - 24);
                *((_QWORD *)v41 - 1) = *((_QWORD *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }
              while (v39 != v40);
              v39 = *a5;
            }
            v32 = v38 + 24;
            *a5 = v41;
            a5[1] = v38 + 24;
            a5[2] = &v37[24 * v36];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_QWORD *)v31 = v28;
            *((_QWORD *)v31 + 1) = v27;
            v32 = v31 + 24;
            *((_QWORD *)v31 + 2) = v29;
          }
        }
      }
      a2 = v45 + 1;
    }
    while (v45 + 1 != a3);
  }
}

void std::vector<re::pathprocessing::Bezier2>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::allocator<re::pathprocessing::FaceGroup>::destroy[abi:nn180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<re::pathprocessing::IslandHalfEdgeLoop>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<re::pathprocessing::IslandHalfEdgeLoop>::destroy[abi:nn180100](uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v3);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<re::pathprocessing::BezierIslandInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<re::pathprocessing::BezierIslandInfo>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

uint64_t *std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::IslandHalfEdgeLoop>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a1);
}

uint64_t std::__split_buffer<re::pathprocessing::IslandHalfEdgeLoop>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<re::pathprocessing::IslandHalfEdgeLoop>::destroy[abi:nn180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,unsigned long &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2)
        v4 = a2 % v9;
      else
        v4 = a2;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

__n128 std::vector<unsigned long>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *(_QWORD *)v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void re::pathprocessing::moveTo(void **a1, double a2, float a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  double v19;

  *((float *)&a2 + 1) = a3;
  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v9 = (uint64_t)(v7 - (_QWORD)*a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      abort();
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v19 = a2;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v4, v12);
      a2 = v19;
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[32 * v9];
    v15 = &v13[32 * v12];
    *v14 = 77;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((double *)v14 + 3) = a2;
    v8 = v14 + 32;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 32;
        v16 -= 32;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_BYTE *)v7 = 77;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(double *)(v7 + 24) = a2;
    v8 = (char *)(v7 + 32);
  }
  a1[1] = v8;
}

void re::pathprocessing::lineTo(void **a1, double a2, float a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  double v19;

  *((float *)&a2 + 1) = a3;
  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v9 = (uint64_t)(v7 - (_QWORD)*a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      abort();
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v19 = a2;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v4, v12);
      a2 = v19;
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[32 * v9];
    v15 = &v13[32 * v12];
    *v14 = 76;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((double *)v14 + 3) = a2;
    v8 = v14 + 32;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 32;
        v16 -= 32;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_BYTE *)v7 = 76;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(double *)(v7 + 24) = a2;
    v8 = (char *)(v7 + 32);
  }
  a1[1] = v8;
}

void re::pathprocessing::quadTo(void **a1, double a2, float a3, double a4, float a5)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  double v21;
  double v22;

  *((float *)&a2 + 1) = a3;
  *((float *)&a4 + 1) = a5;
  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= (unint64_t)v8)
  {
    v11 = (uint64_t)(v9 - (_QWORD)*a1) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      abort();
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v21 = a2;
      v22 = a4;
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v6, v14);
      a2 = v21;
      a4 = v22;
    }
    else
    {
      v15 = 0;
    }
    v16 = (double *)&v15[32 * v11];
    v17 = &v15[32 * v14];
    *(_BYTE *)v16 = 81;
    v16[1] = a2;
    v16[2] = 0.0;
    v16[3] = a4;
    v10 = (char *)(v16 + 4);
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 4;
        v18 -= 32;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_BYTE *)v9 = 81;
    *(double *)(v9 + 8) = a2;
    *(_QWORD *)(v9 + 16) = 0;
    v10 = (char *)(v9 + 32);
    *(double *)(v9 + 24) = a4;
  }
  a1[1] = v10;
}

void re::pathprocessing::cubicTo(void **a1, double a2, float a3, double a4, float a5, double a6, float a7)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;

  *((float *)&a2 + 1) = a3;
  *((float *)&a4 + 1) = a5;
  *((float *)&a6 + 1) = a7;
  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    v13 = (uint64_t)(v11 - (_QWORD)*a1) >> 5;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59)
      abort();
    v15 = v9 - (_BYTE *)*a1;
    if (v15 >> 4 > v14)
      v14 = v15 >> 4;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v24 = a4;
      v25 = a6;
      v23 = a2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v8, v16);
      a2 = v23;
      a4 = v24;
      a6 = v25;
    }
    else
    {
      v17 = 0;
    }
    v18 = (double *)&v17[32 * v13];
    v19 = &v17[32 * v16];
    *(_BYTE *)v18 = 67;
    v18[1] = a2;
    v18[2] = a4;
    v18[3] = a6;
    v12 = (char *)(v18 + 4);
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_OWORD *)v20 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v20 - 2);
        *((_OWORD *)v18 - 1) = v22;
        v18 -= 4;
        v20 -= 32;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_BYTE *)v11 = 67;
    *(double *)(v11 + 8) = a2;
    *(double *)(v11 + 16) = a4;
    *(double *)(v11 + 24) = a6;
    v12 = (char *)(v11 + 32);
  }
  a1[1] = v12;
}

void re::pathprocessing::close(void **a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = a1[2];
  v2 = (uint64_t)(a1 + 2);
  v3 = v4;
  v5 = *(_QWORD *)(v2 - 8);
  if (v5 >= (unint64_t)v4)
  {
    v7 = (uint64_t)(v5 - (_QWORD)*a1) >> 5;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59)
      abort();
    v9 = v3 - (_BYTE *)*a1;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v2, v10);
    else
      v11 = 0;
    v12 = &v11[32 * v7];
    v13 = &v11[32 * v10];
    *v12 = 90;
    v6 = v12 + 32;
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 3) = 0;
    *((_QWORD *)v12 + 1) = 0;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_OWORD *)v14 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v14 - 2);
        *((_OWORD *)v12 - 1) = v16;
        v12 -= 32;
        v14 -= 32;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_BYTE *)v5 = 90;
    v6 = (char *)(v5 + 32);
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  a1[1] = v6;
}

uint64_t re::SpatialCurve<re::Vector2<float>>::evaluateAt(uint64_t a1, float a2)
{
  float v2;
  unint64_t SplineIndexForParameter;
  uint64_t v5;

  v2 = a2;
  if (*(_BYTE *)a1)
    v2 = re::BezierSpline<float>::evaluateAt(a1 + 208, a2);
  SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(a1, v2);
  if (*(_QWORD *)(a1 + 184) <= SplineIndexForParameter)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * SplineIndexForParameter);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 120))(v5, v2);
}

BOOL re::pathprocessing::computeNormal(_BOOL8 result, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  _BOOL4 isLine;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  float32x2_t v34;
  float v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;

  if (a2 < a3)
  {
    v6 = a2;
    v7 = (uint64_t *)result;
    v8 = a3 - 1;
    v9 = 24 * a2;
    do
    {
      v10 = *v7;
      v11 = (float32x2_t *)(*v7 + 24 * v8);
      isLine = re::pathprocessing::Bezier2::isLine(v11);
      v13 = *v11;
      if (isLine)
      {
        v14 = vsub_f32(v11[2], v13);
      }
      else
      {
        v15 = v11[1];
        v16 = vmul_f32(vsub_f32(v15, v13), 0);
        v17 = vsub_f32(v11[2], v15);
        v14 = vadd_f32(v16, vadd_f32(v17, v17));
      }
      result = re::pathprocessing::Bezier2::isLine((float32x2_t *)(v10 + v9));
      v18 = *(float32x2_t *)(v10 + v9);
      v19 = (float32x2_t *)(v10 + v9);
      if (result)
      {
        v20 = v19[2];
        v21 = vsub_f32(v20, v18);
      }
      else
      {
        v22 = v19[1];
        v20 = v19[2];
        v23 = vsub_f32(v22, v18);
        v21 = vadd_f32(vadd_f32(v23, v23), vmul_f32(vsub_f32(v20, v22), 0));
      }
      v24 = vmul_f32(v14, v14);
      v24.i32[0] = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).u32[0];
      v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
      v27 = (int32x2_t)vmul_n_f32(v14, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
      v26.f32[0] = -*(float *)&v27.i32[1];
      v28 = vmul_f32(v21, v21);
      v28.i32[0] = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).u32[0];
      v29 = (float32x2_t)vzip1_s32((int32x2_t)v26, v27);
      v30 = vrsqrte_f32((float32x2_t)v28.u32[0]);
      v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30)));
      v32 = (int32x2_t)vmul_f32(v31, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v31, v31)));
      v33 = (int32x2_t)vmul_n_f32(v21, *(float *)v32.i32);
      *(float *)v32.i32 = -*(float *)&v33.i32[1];
      v34 = vmul_f32(vadd_f32(v29, (float32x2_t)vzip1_s32(v32, v33)), (float32x2_t)0x3F0000003F000000);
      v35 = vaddv_f32(vmul_f32(v34, v34));
      if (fabsf(v35) < 1.0e-10)
      {
        v36 = vadd_f32(vsub_f32(*v11, vadd_f32(v11[1], v11[1])), v11[2]);
        v37 = vadd_f32(v36, v36);
        v38 = vmul_f32(v37, v37);
        v38.i32[0] = vadd_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1)).u32[0];
        v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
        v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
        v41 = vmul_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
        v42 = vadd_f32(v20, vsub_f32(v18, vadd_f32(*(float32x2_t *)(v10 + v9 + 8), *(float32x2_t *)(v10 + v9 + 8))));
        v43 = vadd_f32(v42, v42);
        v44 = vmul_f32(v43, v43);
        v44.i32[0] = vadd_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).u32[0];
        v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
        v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
        v34 = vadd_f32(vmul_f32(v41, (float32x2_t)0x3F0000003F000000), vmul_f32(vmul_n_f32(v43, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).f32[0]), (float32x2_t)0x3F0000003F000000));
        v35 = vaddv_f32(vmul_f32(v34, v34));
      }
      v47 = vrsqrte_f32((float32x2_t)LODWORD(v35));
      v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)LODWORD(v35), vmul_f32(v47, v47)));
      *(float32x2_t *)(*a4 + 8 * v6) = vmul_n_f32(v34, vmul_f32(v48, vrsqrts_f32((float32x2_t)LODWORD(v35), vmul_f32(v48, v48))).f32[0]);
      v8 = v6;
      v9 += 24;
      ++v6;
    }
    while (a3 != v6);
  }
  return result;
}

uint64_t *re::pathprocessing::offsetBeziers(uint64_t *result, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t *a5, float a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t *v16;
  uint64_t v17;
  int v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;

  if (a4 > a3)
  {
    v12 = a4 - 1;
    v13 = 24 * a4 - 8;
    v14 = a3;
    do
    {
      v15 = *a5;
      v16 = (float32x2_t *)(*a5 + v13);
      v17 = *result;
      v18 = *(_DWORD *)(*a2 + 4 * v12);
      if (v18 == 3)
      {
        v23 = *v16;
        v24 = v16[-2];
        v25 = (int32x2_t)vsub_f32(*v16, v24);
        *(float *)&a12 = -*(float *)&v25.i32[1];
        v26 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a12, v25);
        v27 = vmul_f32(v26, v26);
        v27.i32[0] = vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1)).u32[0];
        v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
        v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
        v30 = vmul_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
        a12 = COERCE_DOUBLE(vmul_n_f32(*(float32x2_t *)(v17 + 8 * v12), a6));
        v31 = vadd_f32(v16[-1], vmul_n_f32(v30, a6));
        v16[-2] = vadd_f32(v24, *(float32x2_t *)&a12);
        v16[-1] = v31;
        *v16 = vadd_f32(v23, vmul_n_f32(*(float32x2_t *)(v17 + 8 * v14), a6));
      }
      else if (v18 == 2)
      {
        v19 = vadd_f32(v16[-2], vmul_n_f32(*(float32x2_t *)(v17 + 8 * v12), a6));
        v16[-2] = v19;
        v20 = vmul_n_f32(*(float32x2_t *)(v17 + 8 * v14), a6);
        v21 = (float32x2_t *)(v15 + v13);
        v22 = vadd_f32(*(float32x2_t *)(v15 + v13), v20);
        *v21 = v22;
        v21[-1] = vadd_f32(vmul_f32(v19, (float32x2_t)0x3F0000003F000000), vmul_f32(v22, (float32x2_t)0x3F0000003F000000));
      }
      v13 -= 24;
      v14 = --a4;
    }
    while (v12-- > a3);
  }
  return result;
}

void re::pathprocessing::createCapTriangles(uint64_t *a1, _QWORD *a2, char **a3, _QWORD *a4, int a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t *v10;
  unint64_t v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float32x2_t *v20;
  char *v21;
  char *v22;
  float32x2_t *v23;
  float32x2_t v24;
  uint32x2_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  float32x2_t *v31;
  char *v32;
  __int128 v33;
  char *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t *v38;
  int v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  float32x2_t *v44;
  char *v45;
  char *v46;
  float32x2_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  float32x2_t *v53;
  char *v54;
  char *v55;
  float32x2_t v56;
  float32x2_t *v57;
  float32x2_t *v58;
  float32x2_t v59;
  float v60;
  float32x2_t v61;
  float v62;
  uint64_t v63;
  std::__split_buffer<unsigned int>::pointer v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  std::__split_buffer<unsigned int>::pointer v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  std::__split_buffer<unsigned int>::pointer end;
  unsigned int *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  std::__split_buffer<unsigned int>::pointer begin;
  __int128 v88;
  int64x2_t v89;
  unsigned int *v90;
  char *v91;
  unsigned int *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int *v102;
  int64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  int v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  __int128 v116;
  _QWORD *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  __int128 v131;
  _QWORD *v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  float v143;
  float32x2_t *v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  __int32 v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  float v152;
  float v153;
  unsigned int v154;
  __int32 v155;
  int v156;
  unsigned int j;
  __int128 v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  int v189;
  char *v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  int v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  float v208;
  char *v209;
  int v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  char *v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  int v228;
  float v229;
  int v230;
  unsigned int i;
  __int128 v232;
  unint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  int v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  int v263;
  char *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  int v272;
  char *v273;
  char *v274;
  void **v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  std::allocator<unsigned int> *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unsigned int *v285;
  uint64_t v286;
  unsigned int *v287;
  unsigned int *v288;
  uint64_t v289;
  int64_t v291;
  unint64_t v292;
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  int v297;
  int v298;
  float32x2_t *v299;
  char **v301;
  void *v302[2];
  void *__p[2];
  _QWORD v304[2];
  int64x2_t v305;
  _QWORD v306[2];
  int64x2_t v307;
  unsigned int *value;
  std::__split_buffer<unsigned int> __v;

  v307 = 0uLL;
  value = 0;
  v305 = 0uLL;
  v306[0] = 0;
  __p[0] = 0;
  __p[1] = 0;
  v304[0] = 0;
  v6 = a3[1] - *a3;
  v7 = v6 >> 4;
  v8 = *a1;
  if (a1[1] == *a1)
  {
    v12 = 0;
    goto LABEL_410;
  }
  v291 = a3[1] - *a3;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v292 = v6 >> 4;
  v298 = -1;
  do
  {
    v15 = (float32x2_t *)(v8 + 24 * v11);
    v16 = (float32x2_t *)__p[0];
    if (__p[0] == v10)
    {
      if ((unint64_t)v10 >= v304[0])
      {
        v17 = (uint64_t)(v304[0] - (_QWORD)v10) >> 2;
        if (v17 <= 1)
          v17 = 1;
        if (v304[0] - (_QWORD)v10 >= 0x7FFFFFFFFFFFFFF8uLL)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v20 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v304, v18);
        *v20 = *v15;
        v10 = v20 + 1;
        v22 = (char *)__p[0];
        v21 = (char *)__p[1];
        v23 = v20;
        if (__p[1] != __p[0])
        {
          do
          {
            v24 = *(float32x2_t *)(v21 - 8);
            v21 -= 8;
            v23[-1] = v24;
            --v23;
          }
          while (v21 != v22);
          v21 = (char *)__p[0];
        }
        __p[0] = v23;
        __p[1] = &v20[1];
        v304[0] = &v20[v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v10++ = *v15;
      }
      __p[1] = v10;
      v298 = v7;
      LODWORD(v7) = v7 + 1;
      v16 = (float32x2_t *)__p[0];
    }
    v25 = (uint32x2_t)vceq_f32(v15[2], *v16);
    v26 = vpmin_u32(v25, v25).u32[0];
    if (*(_DWORD *)(*a2 + 4 * v11) == 3)
    {
      if (v13 >= v14)
      {
        v27 = ((char *)v13 - (char *)v12) >> 5;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59)
          goto LABEL_433;
        if (((char *)v14 - (char *)v12) >> 4 > v28)
          v28 = ((char *)v14 - (char *)v12) >> 4;
        if ((unint64_t)((char *)v14 - (char *)v12) >= 0x7FFFFFFFFFFFFFE0)
          v29 = 0x7FFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
        {
          if (v29 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v30 = (char *)operator new(32 * v29);
        }
        else
        {
          v30 = 0;
        }
        v31 = (float32x2_t *)&v30[32 * v27];
        *(_OWORD *)v31->f32 = 0u;
        *(_OWORD *)v31[2].f32 = 0u;
        if (v13 == v12)
        {
          v34 = &v30[32 * v27];
        }
        else
        {
          v32 = &v30[32 * v27];
          do
          {
            v33 = *(_OWORD *)v13[-2].f32;
            v34 = v32 - 32;
            *((_OWORD *)v32 - 2) = *(_OWORD *)v13[-4].f32;
            *((_OWORD *)v32 - 1) = v33;
            v13 -= 4;
            v32 -= 32;
          }
          while (v13 != v12);
        }
        v14 = (float32x2_t *)&v30[32 * v29];
        v13 = v31 + 4;
        if (v12)
          operator delete(v12);
        v12 = (float32x2_t *)v34;
      }
      else
      {
        *(_OWORD *)v13->f32 = 0u;
        *(_OWORD *)v13[2].f32 = 0u;
        v13 += 4;
      }
      v13[-1] = (float32x2_t)v11;
      v35 = v15[1];
      v36 = vsub_f32(v35, *v15);
      v37 = vsub_f32(v15[2], v35);
      if (vmlas_n_f32((float)-v36.f32[1] * v37.f32[0], v37.f32[1], v36.f32[0]) >= 0.0)
      {
        v13[-4].i32[0] = v7 - 1;
        v13[-4].i32[1] = -1;
        v39 = v298;
        if (v26 >= 0)
          v39 = v7;
        v13[-3].i32[0] = v39;
        v13[-2] = v15[1];
        v10 = (float32x2_t *)__p[1];
      }
      else
      {
        v38 = (float32x2_t *)__p[1];
        if (__p[1] >= (void *)v304[0])
        {
          v40 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if ((unint64_t)(v40 + 1) >> 61)
            goto LABEL_433;
          v41 = (uint64_t)(v304[0] - (unint64_t)__p[0]) >> 2;
          if (v41 <= v40 + 1)
            v41 = v40 + 1;
          if (v304[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
            v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v304, v42);
          else
            v43 = 0;
          v44 = (float32x2_t *)&v43[8 * v40];
          *v44 = v15[1];
          v10 = v44 + 1;
          v46 = (char *)__p[0];
          v45 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v47 = *(float32x2_t *)(v45 - 8);
              v45 -= 8;
              v44[-1] = v47;
              --v44;
            }
            while (v45 != v46);
            v45 = (char *)__p[0];
          }
          __p[0] = v44;
          __p[1] = v10;
          v304[0] = &v43[8 * v42];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(float32x2_t *)__p[1] = v35;
          v10 = v38 + 1;
        }
        __p[1] = v10;
        v13[-4].i32[0] = v7 - 1;
        v13[-4].i32[1] = v7;
        v48 = v298;
        if (v26 >= 0)
          v48 = v7 + 1;
        LODWORD(v7) = v7 + 1;
        v13[-3].i32[0] = v48;
      }
    }
    if ((unint64_t)v10 >= v304[0])
    {
      v49 = ((char *)v10 - (char *)__p[0]) >> 3;
      if ((unint64_t)(v49 + 1) >> 61)
        goto LABEL_433;
      v50 = (uint64_t)(v304[0] - (unint64_t)__p[0]) >> 2;
      if (v50 <= v49 + 1)
        v50 = v49 + 1;
      if (v304[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
        v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v304, v51);
      else
        v52 = 0;
      v53 = (float32x2_t *)&v52[8 * v49];
      *v53 = v15[2];
      v10 = v53 + 1;
      v55 = (char *)__p[0];
      v54 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          v56 = *(float32x2_t *)(v54 - 8);
          v54 -= 8;
          v53[-1] = v56;
          --v53;
        }
        while (v54 != v55);
        v54 = (char *)__p[0];
      }
      __p[0] = v53;
      __p[1] = v10;
      v304[0] = &v52[8 * v51];
      if (v54)
        operator delete(v54);
    }
    else
    {
      *v10++ = v15[2];
    }
    __p[1] = v10;
    if (v26 < 0)
    {
      v57 = v10 - 1;
      __p[1] = &v10[-1];
      v58 = (float32x2_t *)__p[0];
      if ((unint64_t)((char *)&v10[-1] - (char *)__p[0]) < 0x11)
        goto LABEL_86;
      if (__p[0] == v57)
      {
        v62 = 0.0;
      }
      else
      {
        v59 = v10[-2];
        v60 = 0.0;
        do
        {
          v61 = *v58++;
          v60 = v60 + vmlas_n_f32((float)-v61.f32[1] * v59.f32[0], v59.f32[1], v61.f32[0]);
          v59 = v61;
        }
        while (v58 != v57);
        v62 = v60 * 0.5;
      }
      if (fabsf(v62) >= 0.0001)
      {
        v76 = v307.i64[1];
        if (v307.i64[1] >= (unint64_t)value)
        {
          v79 = 0xAAAAAAAAAAAAAAABLL * ((v307.i64[1] - v307.i64[0]) >> 3);
          v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_433;
          if (0x5555555555555556 * (((uint64_t)value - v307.i64[0]) >> 3) > v80)
            v80 = 0x5555555555555556 * (((uint64_t)value - v307.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)value - v307.i64[0]) >> 3) >= 0x555555555555555)
            v81 = 0xAAAAAAAAAAAAAAALL;
          else
            v81 = v80;
          __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)&value;
          v82 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&value, v81);
          v83 = &v82[6 * v79];
          __v.__first_ = v82;
          __v.__begin_ = v83;
          __v.__end_cap_.__value_ = &v82[6 * v84];
          *((_QWORD *)v83 + 1) = 0;
          *((_QWORD *)v83 + 2) = 0;
          *(_QWORD *)v83 = 0;
          *(_OWORD *)v83 = *(_OWORD *)__p;
          *((_QWORD *)v83 + 2) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          end = v83 + 6;
          __v.__end_ = v83 + 6;
          v85 = (_QWORD *)v307.i64[1];
          v86 = (_QWORD *)v307.i64[0];
          begin = __v.__begin_;
          if (v307.i64[1] == v307.i64[0])
          {
            v89 = vdupq_n_s64(v307.u64[1]);
          }
          else
          {
            do
            {
              *((_QWORD *)begin - 3) = 0;
              *((_QWORD *)begin - 2) = 0;
              begin -= 6;
              *((_QWORD *)begin + 2) = 0;
              v88 = *(_OWORD *)(v85 - 3);
              v85 -= 3;
              *(_OWORD *)begin = v88;
              *((_QWORD *)begin + 2) = v85[2];
              *v85 = 0;
              v85[1] = 0;
              v85[2] = 0;
            }
            while (v85 != v86);
            v89 = v307;
            end = __v.__end_;
          }
          v307.i64[0] = (uint64_t)begin;
          v307.i64[1] = (uint64_t)end;
          *(int64x2_t *)&__v.__begin_ = v89;
          v90 = value;
          value = __v.__end_cap_.__value_;
          __v.__end_cap_.__value_ = v90;
          __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v89.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&__v);
        }
        else
        {
          *(_QWORD *)v307.i64[1] = 0;
          *(_QWORD *)(v76 + 8) = 0;
          *(_QWORD *)(v76 + 16) = 0;
          *(_OWORD *)v76 = *(_OWORD *)__p;
          *(_QWORD *)(v76 + 16) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          end = (std::__split_buffer<unsigned int>::pointer)(v76 + 24);
        }
        v307.i64[1] = (uint64_t)end;
      }
      else
      {
LABEL_86:
        v63 = v305.i64[1];
        if (v305.i64[1] >= v306[0])
        {
          v65 = 0xAAAAAAAAAAAAAAABLL * ((v305.i64[1] - v305.i64[0]) >> 3);
          v66 = v65 + 1;
          if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_433;
          if (0x5555555555555556 * ((v306[0] - v305.i64[0]) >> 3) > v66)
            v66 = 0x5555555555555556 * ((v306[0] - v305.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v306[0] - v305.i64[0]) >> 3) >= 0x555555555555555)
            v67 = 0xAAAAAAAAAAAAAAALL;
          else
            v67 = v66;
          __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)v306;
          v68 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v306, v67);
          v69 = &v68[6 * v65];
          __v.__first_ = v68;
          __v.__begin_ = v69;
          __v.__end_cap_.__value_ = &v68[6 * v70];
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = 0;
          *(_OWORD *)v69 = *(_OWORD *)__p;
          *((_QWORD *)v69 + 2) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          v64 = v69 + 6;
          __v.__end_ = v69 + 6;
          v71 = (_QWORD *)v305.i64[1];
          v72 = (_QWORD *)v305.i64[0];
          v73 = __v.__begin_;
          if (v305.i64[1] == v305.i64[0])
          {
            v75 = vdupq_n_s64(v305.u64[1]);
          }
          else
          {
            do
            {
              *((_QWORD *)v73 - 3) = 0;
              *((_QWORD *)v73 - 2) = 0;
              v73 -= 6;
              *((_QWORD *)v73 + 2) = 0;
              v74 = *(_OWORD *)(v71 - 3);
              v71 -= 3;
              *(_OWORD *)v73 = v74;
              *((_QWORD *)v73 + 2) = v71[2];
              *v71 = 0;
              v71[1] = 0;
              v71[2] = 0;
            }
            while (v71 != v72);
            v75 = v305;
            v64 = __v.__end_;
          }
          v305.i64[0] = (uint64_t)v73;
          v305.i64[1] = (uint64_t)v64;
          *(int64x2_t *)&__v.__begin_ = v75;
          v78 = (unsigned int *)v306[0];
          v306[0] = __v.__end_cap_.__value_;
          __v.__end_cap_.__value_ = v78;
          __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v75.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&__v);
        }
        else
        {
          *(_QWORD *)v305.i64[1] = 0;
          *(_QWORD *)(v63 + 8) = 0;
          *(_QWORD *)(v63 + 16) = 0;
          *(_OWORD *)v63 = *(_OWORD *)__p;
          *(_QWORD *)(v63 + 16) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          v64 = (std::__split_buffer<unsigned int>::pointer)(v63 + 24);
        }
        v305.i64[1] = (uint64_t)v64;
      }
      v10 = (float32x2_t *)__p[0];
      __p[1] = __p[0];
    }
    else
    {
      LODWORD(v7) = v7 + 1;
    }
    ++v11;
    v8 = *a1;
  }
  while (v11 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  if (__p[0] == v10)
  {
    v299 = v12;
    LODWORD(v7) = v292;
    if (v307.i64[0] != v307.i64[1])
    {
      re::pathprocessing::triangulateIndexed((uint64_t)&v307, v302);
      v92 = (unsigned int *)v302[0];
      v91 = (char *)v302[1];
      if (v302[0] != v302[1])
      {
        v93 = (char *)v302[0];
        do
        {
          *(_DWORD *)v93 += v292;
          v93 += 4;
        }
        while (v93 != v91);
      }
      if (v91 - (char *)v92 >= 1)
      {
        v94 = a3[6];
        v95 = a3[7];
        v96 = (v91 - (char *)v92) >> 2;
        v97 = a3[8];
        if (v96 <= (v97 - v95) >> 2)
        {
          if (v96 <= 0)
          {
            v104 = a3[7];
            v105 = &v95[4 * v96];
            v106 = &v104[-4 * v96];
            v107 = v104;
            if (v106 < v95)
            {
              v107 = a3[7];
              do
              {
                v108 = *(_DWORD *)v106;
                v106 += 4;
                *(_DWORD *)v107 = v108;
                v107 += 4;
              }
              while (v106 < v95);
            }
            a3[7] = v107;
            if (v104 != v105)
              memmove(&v104[-4 * ((v104 - v105) >> 2)], v95, v104 - v105);
            if (&v92[v96] != v92)
              memmove(v95, v92, 4 * v96);
          }
          else
          {
            v103 = v91 - (char *)v92;
            if (v91 != (char *)v92)
              memmove(a3[7], v92, v91 - (char *)v92);
            a3[7] = &v95[v103];
          }
        }
        else
        {
          v98 = (v95 - v94) >> 2;
          v99 = v98 + v96;
          if ((unint64_t)(v98 + v96) >> 62)
            goto LABEL_433;
          v100 = v97 - v94;
          if (v100 >> 1 > v99)
            v99 = v100 >> 1;
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
            v101 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v101 = v99;
          __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)(a3 + 8);
          if (v101)
            v102 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 8), v101);
          else
            v102 = 0;
          v109 = &v102[v98];
          __v.__first_ = v102;
          __v.__begin_ = v109;
          __v.__end_cap_.__value_ = &v102[v101];
          v110 = 4 * v96;
          v111 = &v109[v96];
          do
          {
            v112 = *v92++;
            *v109++ = v112;
            v110 -= 4;
          }
          while (v110);
          __v.__end_ = v111;
          std::vector<unsigned int>::__swap_out_circular_buffer((std::vector<unsigned int> *)a3 + 2, &__v, (std::vector<unsigned int>::pointer)v95);
          if (__v.__end_ != __v.__begin_)
            __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                                    + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
          if (__v.__first_)
            operator delete(__v.__first_);
        }
      }
      v114 = (_QWORD *)v307.i64[1];
      v113 = (_QWORD *)v307.i64[0];
      if (v307.i64[0] != v307.i64[1])
      {
        v115 = a3 + 2;
        do
        {
          std::vector<re::Vector3<float>>::reserve((void **)a3, ((uint64_t)(v113[1] - *v113) >> 3) + ((a3[1] - *a3) >> 4));
          v117 = (_QWORD *)*v113;
          v118 = (_QWORD *)v113[1];
          if ((_QWORD *)*v113 != v118)
          {
            v119 = a3[1];
            do
            {
              if ((unint64_t)v119 >= *v115)
              {
                v120 = (v119 - *a3) >> 4;
                if ((unint64_t)(v120 + 1) >> 60)
                  goto LABEL_433;
                v121 = *v115 - (_QWORD)*a3;
                v122 = v121 >> 3;
                if (v121 >> 3 <= (unint64_t)(v120 + 1))
                  v122 = v120 + 1;
                if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0)
                  v123 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v123 = v122;
                if (v123)
                  v124 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v123);
                else
                  v124 = 0;
                v125 = &v124[16 * v120];
                *(_QWORD *)&v116 = *v117;
                DWORD2(v116) = 0;
                *(_OWORD *)v125 = v116;
                v119 = v125 + 16;
                v127 = *a3;
                v126 = a3[1];
                if (v126 != *a3)
                {
                  do
                  {
                    v116 = *((_OWORD *)v126 - 1);
                    *((_OWORD *)v125 - 1) = v116;
                    v125 -= 16;
                    v126 -= 16;
                  }
                  while (v126 != v127);
                  v126 = *a3;
                }
                *a3 = v125;
                a3[1] = v119;
                a3[2] = &v124[16 * v123];
                if (v126)
                  operator delete(v126);
              }
              else
              {
                *(_QWORD *)&v116 = *v117;
                DWORD2(v116) = 0;
                *(_OWORD *)v119 = v116;
                v119 += 16;
              }
              a3[1] = v119;
              ++v117;
            }
            while (v117 != v118);
          }
          v113 += 3;
        }
        while (v113 != v114);
      }
      if (v302[0])
      {
        v302[1] = v302[0];
        operator delete(v302[0]);
      }
      v12 = v299;
      LODWORD(v7) = v292;
    }
    if (v12 == v13)
    {
      v6 = v291;
    }
    else
    {
      v129 = (_QWORD *)v305.i64[1];
      v128 = (_QWORD *)v305.i64[0];
      if (v305.i64[0] != v305.i64[1])
      {
        v130 = a3 + 2;
        do
        {
          std::vector<re::Vector3<float>>::reserve((void **)a3, ((uint64_t)(v128[1] - *v128) >> 3) + ((a3[1] - *a3) >> 4));
          v132 = (_QWORD *)*v128;
          v133 = (_QWORD *)v128[1];
          if ((_QWORD *)*v128 != v133)
          {
            v134 = a3[1];
            do
            {
              if ((unint64_t)v134 >= *v130)
              {
                v135 = (v134 - *a3) >> 4;
                if ((unint64_t)(v135 + 1) >> 60)
                  goto LABEL_433;
                v136 = *v130 - (_QWORD)*a3;
                v137 = v136 >> 3;
                if (v136 >> 3 <= (unint64_t)(v135 + 1))
                  v137 = v135 + 1;
                if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0)
                  v138 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v138 = v137;
                if (v138)
                  v139 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v138);
                else
                  v139 = 0;
                v140 = &v139[16 * v135];
                *(_QWORD *)&v131 = *v132;
                DWORD2(v131) = 0;
                *(_OWORD *)v140 = v131;
                v134 = v140 + 16;
                v142 = *a3;
                v141 = a3[1];
                if (v141 != *a3)
                {
                  do
                  {
                    v131 = *((_OWORD *)v141 - 1);
                    *((_OWORD *)v140 - 1) = v131;
                    v140 -= 16;
                    v141 -= 16;
                  }
                  while (v141 != v142);
                  v141 = *a3;
                }
                *a3 = v140;
                a3[1] = v134;
                a3[2] = &v139[16 * v138];
                if (v141)
                  operator delete(v141);
              }
              else
              {
                *(_QWORD *)&v131 = *v132;
                DWORD2(v131) = 0;
                *(_OWORD *)v134 = v131;
                v134 += 16;
              }
              a3[1] = v134;
              ++v132;
            }
            while (v132 != v133);
          }
          v128 += 3;
        }
        while (v128 != v129);
      }
      v295 = (uint64_t)(a3 + 2);
      v301 = a3 + 8;
      v143 = (float)a5;
      v12 = v299;
      v144 = v299;
      do
      {
        v145 = (unint64_t)(a3[1] - *a3) >> 4;
        if (v144->i32[1] == -1)
        {
          v148 = v144->i32[0];
          v149 = *(_QWORD *)(*a4 + 8 * *(_QWORD *)&v144[3]);
          if (*(_BYTE *)v149)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v149 + 208) + 40))(v149 + 208))
              v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v149 + 208) + 40))(v149 + 208);
            else
              v150 = 0xFFFF;
            re::Spline<float>::knotAtIndex(v149 + 208, v150);
            v208 = v229;
          }
          else
          {
            v207 = *(_QWORD *)(v149 + 184);
            if (v207)
              v208 = *(float *)(*(_QWORD *)(v149 + 200) + 24 * v207 - 8);
            else
              v208 = 0.0;
          }
          if ((int)(float)(v208 * v143) <= 1)
            v230 = 1;
          else
            v230 = (int)(float)(v208 * v143);
          if (v230 >= 2)
          {
            v297 = v145 - 1;
            for (i = 1; i != v230; ++i)
            {
              *(_QWORD *)&v232 = re::SpatialCurve<re::Vector2<float>>::evaluateAt(v149, v208 * (float)((float)i / (float)v230));
              v234 = a3[1];
              v233 = (unint64_t)a3[2];
              if ((unint64_t)v234 >= v233)
              {
                v236 = (v234 - *a3) >> 4;
                if ((unint64_t)(v236 + 1) >> 60)
                  goto LABEL_433;
                v237 = v233 - (_QWORD)*a3;
                v238 = v237 >> 3;
                if (v237 >> 3 <= (unint64_t)(v236 + 1))
                  v238 = v236 + 1;
                if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF0)
                  v239 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v239 = v238;
                if (v239)
                {
                  v294 = v232;
                  v240 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v295, v239);
                  v232 = v294;
                }
                else
                {
                  v240 = 0;
                }
                v241 = &v240[16 * v236];
                DWORD2(v232) = 0;
                *(_OWORD *)v241 = v232;
                v235 = v241 + 16;
                v243 = *a3;
                v242 = a3[1];
                if (v242 != *a3)
                {
                  do
                  {
                    *((_OWORD *)v241 - 1) = *((_OWORD *)v242 - 1);
                    v241 -= 16;
                    v242 -= 16;
                  }
                  while (v242 != v243);
                  v242 = *a3;
                }
                *a3 = v241;
                a3[1] = v235;
                a3[2] = &v240[16 * v239];
                if (v242)
                  operator delete(v242);
              }
              else
              {
                DWORD2(v232) = 0;
                *(_OWORD *)v234 = v232;
                v235 = v234 + 16;
              }
              a3[1] = v235;
              v245 = a3[7];
              v244 = a3[8];
              if (v245 >= v244)
              {
                v247 = a3[6];
                v248 = (v245 - v247) >> 2;
                v249 = v248 + 1;
                if ((unint64_t)(v248 + 1) >> 62)
                  goto LABEL_433;
                v250 = v244 - v247;
                if (v250 >> 1 > v249)
                  v249 = v250 >> 1;
                if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL)
                  v251 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v251 = v249;
                if (v251)
                {
                  v252 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v251);
                  v247 = a3[6];
                  v245 = a3[7];
                }
                else
                {
                  v252 = 0;
                }
                v253 = &v252[4 * v248];
                *(_DWORD *)v253 = v148;
                v246 = v253 + 4;
                while (v245 != v247)
                {
                  v254 = *((_DWORD *)v245 - 1);
                  v245 -= 4;
                  *((_DWORD *)v253 - 1) = v254;
                  v253 -= 4;
                }
                v244 = &v252[4 * v251];
                a3[6] = v253;
                a3[7] = v246;
                a3[8] = v244;
                if (v247)
                {
                  operator delete(v247);
                  v244 = *v301;
                }
              }
              else
              {
                *(_DWORD *)v245 = v148;
                v246 = v245 + 4;
              }
              v148 = v297 + i;
              a3[7] = v246;
              if (v246 >= v244)
              {
                v256 = a3[6];
                v257 = (v246 - v256) >> 2;
                v258 = v257 + 1;
                if ((unint64_t)(v257 + 1) >> 62)
                  goto LABEL_433;
                v259 = v244 - v256;
                if (v259 >> 1 > v258)
                  v258 = v259 >> 1;
                if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL)
                  v260 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v260 = v258;
                if (v260)
                {
                  v261 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v260);
                  v256 = a3[6];
                  v246 = a3[7];
                }
                else
                {
                  v261 = 0;
                }
                v262 = &v261[4 * v257];
                *(_DWORD *)v262 = v148;
                v255 = v262 + 4;
                while (v246 != v256)
                {
                  v263 = *((_DWORD *)v246 - 1);
                  v246 -= 4;
                  *((_DWORD *)v262 - 1) = v263;
                  v262 -= 4;
                }
                v244 = &v261[4 * v260];
                a3[6] = v262;
                a3[7] = v255;
                a3[8] = v244;
                if (v256)
                {
                  operator delete(v256);
                  v244 = *v301;
                }
              }
              else
              {
                *(_DWORD *)v246 = v148;
                v255 = v246 + 4;
              }
              v12 = v299;
              a3[7] = v255;
              if (v255 >= v244)
              {
                v265 = a3[6];
                v266 = (v255 - v265) >> 2;
                v267 = v266 + 1;
                if ((unint64_t)(v266 + 1) >> 62)
                  goto LABEL_433;
                v268 = v244 - v265;
                if (v268 >> 1 > v267)
                  v267 = v268 >> 1;
                if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL)
                  v269 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v269 = v267;
                if (v269)
                {
                  v270 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v269);
                  v265 = a3[6];
                  v255 = a3[7];
                }
                else
                {
                  v270 = 0;
                }
                v271 = &v270[4 * v266];
                *(_DWORD *)v271 = v144[1].i32[0];
                v264 = v271 + 4;
                while (v255 != v265)
                {
                  v272 = *((_DWORD *)v255 - 1);
                  v255 -= 4;
                  *((_DWORD *)v271 - 1) = v272;
                  v271 -= 4;
                }
                a3[6] = v271;
                a3[7] = v264;
                a3[8] = &v270[4 * v269];
                if (v265)
                  operator delete(v265);
              }
              else
              {
                *(_DWORD *)v255 = v144[1].i32[0];
                v264 = v255 + 4;
              }
              a3[7] = v264;
            }
          }
        }
        else
        {
          v146 = *(_QWORD *)(*a4 + 8 * *(_QWORD *)&v144[3]);
          if (*(_BYTE *)v146)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v146 + 208) + 40))(v146 + 208))
              v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v146 + 208) + 40))(v146 + 208);
            else
              v147 = 0xFFFF;
            re::Spline<float>::knotAtIndex(v146 + 208, v147);
            v152 = v153;
          }
          else
          {
            v151 = *(_QWORD *)(v146 + 184);
            if (v151)
              v152 = *(float *)(*(_QWORD *)(v146 + 200) + 24 * v151 - 8);
            else
              v152 = 0.0;
          }
          if ((int)(float)(v152 * v143) <= 1)
            v154 = 1;
          else
            v154 = (int)(float)(v152 * v143);
          v155 = v144->i32[0];
          if (v154 <= 1)
          {
            v190 = a3[7];
          }
          else
          {
            v156 = v145 - 1;
            for (j = 1; j != v154; ++j)
            {
              *(_QWORD *)&v158 = re::SpatialCurve<re::Vector2<float>>::evaluateAt(v146, v152 * (float)((float)j / (float)v154));
              v160 = a3[1];
              v159 = (unint64_t)a3[2];
              if ((unint64_t)v160 >= v159)
              {
                v162 = (v160 - *a3) >> 4;
                if ((unint64_t)(v162 + 1) >> 60)
                  goto LABEL_433;
                v163 = v159 - (_QWORD)*a3;
                v164 = v163 >> 3;
                if (v163 >> 3 <= (unint64_t)(v162 + 1))
                  v164 = v162 + 1;
                if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0)
                  v165 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v165 = v164;
                if (v165)
                {
                  v296 = v158;
                  v166 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v295, v165);
                  v158 = v296;
                }
                else
                {
                  v166 = 0;
                }
                v167 = &v166[16 * v162];
                DWORD2(v158) = 0;
                *(_OWORD *)v167 = v158;
                v161 = v167 + 16;
                v169 = *a3;
                v168 = a3[1];
                if (v168 != *a3)
                {
                  do
                  {
                    *((_OWORD *)v167 - 1) = *((_OWORD *)v168 - 1);
                    v167 -= 16;
                    v168 -= 16;
                  }
                  while (v168 != v169);
                  v168 = *a3;
                }
                *a3 = v167;
                a3[1] = v161;
                a3[2] = &v166[16 * v165];
                if (v168)
                  operator delete(v168);
              }
              else
              {
                DWORD2(v158) = 0;
                *(_OWORD *)v160 = v158;
                v161 = v160 + 16;
              }
              a3[1] = v161;
              v171 = a3[7];
              v170 = a3[8];
              if (v171 >= v170)
              {
                v173 = a3[6];
                v174 = (v171 - v173) >> 2;
                v175 = v174 + 1;
                if ((unint64_t)(v174 + 1) >> 62)
                  goto LABEL_433;
                v176 = v170 - v173;
                if (v176 >> 1 > v175)
                  v175 = v176 >> 1;
                if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
                  v177 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v177 = v175;
                if (v177)
                {
                  v178 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v177);
                  v173 = a3[6];
                  v171 = a3[7];
                }
                else
                {
                  v178 = 0;
                }
                v179 = &v178[4 * v174];
                *(_DWORD *)v179 = v155;
                v172 = v179 + 4;
                while (v171 != v173)
                {
                  v180 = *((_DWORD *)v171 - 1);
                  v171 -= 4;
                  *((_DWORD *)v179 - 1) = v180;
                  v179 -= 4;
                }
                v170 = &v178[4 * v177];
                a3[6] = v179;
                a3[7] = v172;
                a3[8] = v170;
                if (v173)
                {
                  operator delete(v173);
                  v170 = *v301;
                }
              }
              else
              {
                *(_DWORD *)v171 = v155;
                v172 = v171 + 4;
              }
              v155 = v156 + j;
              a3[7] = v172;
              if (v172 >= v170)
              {
                v182 = a3[6];
                v183 = (v172 - v182) >> 2;
                v184 = v183 + 1;
                if ((unint64_t)(v183 + 1) >> 62)
                  goto LABEL_433;
                v185 = v170 - v182;
                if (v185 >> 1 > v184)
                  v184 = v185 >> 1;
                if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                  v186 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v186 = v184;
                if (v186)
                {
                  v187 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v186);
                  v182 = a3[6];
                  v172 = a3[7];
                }
                else
                {
                  v187 = 0;
                }
                v188 = &v187[4 * v183];
                *(_DWORD *)v188 = v155;
                v181 = v188 + 4;
                while (v172 != v182)
                {
                  v189 = *((_DWORD *)v172 - 1);
                  v172 -= 4;
                  *((_DWORD *)v188 - 1) = v189;
                  v188 -= 4;
                }
                v170 = &v187[4 * v186];
                a3[6] = v188;
                a3[7] = v181;
                a3[8] = v170;
                if (v182)
                {
                  operator delete(v182);
                  v170 = *v301;
                }
              }
              else
              {
                *(_DWORD *)v172 = v155;
                v181 = v172 + 4;
              }
              a3[7] = v181;
              if (v181 >= v170)
              {
                v191 = a3[6];
                v192 = (v181 - v191) >> 2;
                v193 = v192 + 1;
                if ((unint64_t)(v192 + 1) >> 62)
                  goto LABEL_433;
                v194 = v170 - v191;
                if (v194 >> 1 > v193)
                  v193 = v194 >> 1;
                if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL)
                  v195 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v195 = v193;
                if (v195)
                {
                  v196 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v195);
                  v191 = a3[6];
                  v181 = a3[7];
                }
                else
                {
                  v196 = 0;
                }
                v197 = &v196[4 * v192];
                *(_DWORD *)v197 = v144->i32[1];
                v190 = v197 + 4;
                while (v181 != v191)
                {
                  v198 = *((_DWORD *)v181 - 1);
                  v181 -= 4;
                  *((_DWORD *)v197 - 1) = v198;
                  v197 -= 4;
                }
                a3[6] = v197;
                a3[7] = v190;
                a3[8] = &v196[4 * v195];
                if (v191)
                  operator delete(v191);
              }
              else
              {
                *(_DWORD *)v181 = v144->i32[1];
                v190 = v181 + 4;
              }
              a3[7] = v190;
            }
          }
          v199 = *v301;
          if (v190 >= *v301)
          {
            v201 = a3[6];
            v202 = (v190 - v201) >> 2;
            v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 62)
              goto LABEL_433;
            v204 = v199 - v201;
            if (v204 >> 1 > v203)
              v203 = v204 >> 1;
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
              v205 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v205 = v203;
            if (v205)
            {
              v206 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v205);
              v201 = a3[6];
              v190 = a3[7];
            }
            else
            {
              v206 = 0;
            }
            v209 = &v206[4 * v202];
            *(_DWORD *)v209 = v155;
            v200 = v209 + 4;
            while (v190 != v201)
            {
              v210 = *((_DWORD *)v190 - 1);
              v190 -= 4;
              *((_DWORD *)v209 - 1) = v210;
              v209 -= 4;
            }
            v199 = &v206[4 * v205];
            a3[6] = v209;
            a3[7] = v200;
            a3[8] = v199;
            if (v201)
            {
              operator delete(v201);
              v199 = *v301;
            }
          }
          else
          {
            *(_DWORD *)v190 = v155;
            v200 = v190 + 4;
          }
          v12 = v299;
          a3[7] = v200;
          if (v200 >= v199)
          {
            v212 = a3[6];
            v213 = (v200 - v212) >> 2;
            v214 = v213 + 1;
            if ((unint64_t)(v213 + 1) >> 62)
              goto LABEL_433;
            v215 = v199 - v212;
            if (v215 >> 1 > v214)
              v214 = v215 >> 1;
            if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
              v216 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v216 = v214;
            if (v216)
            {
              v217 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v216);
              v212 = a3[6];
              v200 = a3[7];
            }
            else
            {
              v217 = 0;
            }
            v218 = &v217[4 * v213];
            *(_DWORD *)v218 = v144[1].i32[0];
            v211 = v218 + 4;
            while (v200 != v212)
            {
              v219 = *((_DWORD *)v200 - 1);
              v200 -= 4;
              *((_DWORD *)v218 - 1) = v219;
              v218 -= 4;
            }
            v199 = &v217[4 * v216];
            a3[6] = v218;
            a3[7] = v211;
            a3[8] = v199;
            if (v212)
            {
              operator delete(v212);
              v199 = *v301;
            }
          }
          else
          {
            *(_DWORD *)v200 = v144[1].i32[0];
            v211 = v200 + 4;
          }
          a3[7] = v211;
          if (v211 >= v199)
          {
            v221 = a3[6];
            v222 = (v211 - v221) >> 2;
            v223 = v222 + 1;
            if ((unint64_t)(v222 + 1) >> 62)
              goto LABEL_433;
            v224 = v199 - v221;
            if (v224 >> 1 > v223)
              v223 = v224 >> 1;
            if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL)
              v225 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v225 = v223;
            if (v225)
            {
              v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v225);
              v221 = a3[6];
              v211 = a3[7];
            }
            else
            {
              v226 = 0;
            }
            v227 = &v226[4 * v222];
            *(_DWORD *)v227 = v144->i32[1];
            v220 = v227 + 4;
            while (v211 != v221)
            {
              v228 = *((_DWORD *)v211 - 1);
              v211 -= 4;
              *((_DWORD *)v227 - 1) = v228;
              v227 -= 4;
            }
            a3[6] = v227;
            a3[7] = v220;
            a3[8] = &v226[4 * v225];
            if (v221)
              operator delete(v221);
          }
          else
          {
            *(_DWORD *)v211 = v144->i32[1];
            v220 = v211 + 4;
          }
          a3[7] = v220;
        }
        v144 += 4;
      }
      while (v144 != v13);
      v6 = v291;
      LODWORD(v7) = v292;
    }
LABEL_410:
    v273 = a3[4];
    v275 = (void **)(a3 + 3);
    v274 = a3[3];
    v276 = (a3[1] - *a3) >> 4;
    v277 = v276 - v7;
    *(_OWORD *)v302 = xmmword_2260E5F40;
    if (!v277)
      goto LABEL_428;
    v278 = (v6 >> 4);
    v279 = (std::allocator<unsigned int> *)(a3 + 5);
    v280 = a3[5];
    if (v277 <= (v280 - v273) >> 4)
    {
      v286 = 0;
      do
      {
        *(_OWORD *)&v273[v286] = *(_OWORD *)v302;
        v286 += 16;
      }
      while (16 * v276 - 16 * v278 != v286);
      a3[4] = &v273[16 * v277];
      goto LABEL_428;
    }
    v281 = (v273 - v274) >> 4;
    if (!((v281 + v277) >> 60))
    {
      v282 = v280 - v274;
      v283 = v282 >> 3;
      if (v282 >> 3 <= v281 + v277)
        v283 = v281 + v277;
      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF0)
        v284 = 0xFFFFFFFFFFFFFFFLL;
      else
        v284 = v283;
      __v.__end_cap_.__value_ = v279;
      if (v284)
        v285 = (unsigned int *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v279, v284);
      else
        v285 = 0;
      v287 = &v285[4 * v281];
      __v.__first_ = v285;
      __v.__begin_ = v287;
      __v.__end_cap_.__value_ = &v285[4 * v284];
      v288 = &v287[4 * v277];
      v289 = 16 * v276 - 16 * v278;
      do
      {
        *(_OWORD *)v287 = *(_OWORD *)v302;
        v287 += 4;
        v289 -= 16;
      }
      while (v289);
      __v.__end_ = v288;
      std::vector<re::Vector3<float>>::__swap_out_circular_buffer(v275, (uint64_t)&__v, v273);
      if (__v.__first_)
        operator delete(__v.__first_);
      goto LABEL_428;
    }
LABEL_433:
    abort();
  }
LABEL_428:
  if (v12)
    operator delete(v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __v.__first_ = (std::__split_buffer<unsigned int>::pointer)&v305;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<unsigned int>::pointer)&v307;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__v);
}

void std::vector<re::Vector3<float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void re::pathprocessing::generateCapAndBevel(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, __n128 a8, float a9)
{
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  const void *v30;
  int64_t v31;
  char *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __float2 *v43;
  float32x4_t v44;
  float v45;
  unint64_t i;
  __float2 v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  float32x4_t v51;
  unint64_t v52;
  float32x2_t *v53;
  unint64_t v54;
  float v55;
  float v56;
  int v57;
  float32x4_t v58;
  __int32 v59;
  char *v60;
  char *v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  void *v80;
  uint64_t *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  uint64_t v86;
  float32x2_t *v87;
  float v88;
  float32x4_t v89;
  __int128 v90;
  float32x4_t v92;
  unint64_t v93;
  void *v94[3];
  void *__p[3];
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  __float2 *v102;
  __float2 *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *__src;
  char *v109;
  uint64_t v110;
  char v111[8];

  v13 = a1;
  if (!a4)
  {
    std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::vector(v94, a6);
    re::pathprocessing::createCapTriangles(v13, a2, (char **)a5, v94, a7);
    v80 = v94[0];
    if (!v94[0])
      return;
    v94[1] = v94[0];
    goto LABEL_45;
  }
  v17 = *a1;
  v16 = a1[1];
  v99 = 0;
  v100 = 0;
  v101 = 0;
  if (v16 != v17)
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3);
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v99, v18);
    v19 = v100;
    bzero(v100, 8 * v18);
    v100 = &v19[8 * v18];
  }
  re::pathprocessing::computeNormal((_BOOL8)v13, 0, **(_QWORD **)a3, &v99);
  v26 = *(unint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)
  {
    v27 = 0;
    do
    {
      v28 = &v26[v27++];
      re::pathprocessing::computeNormal((_BOOL8)v13, *v28, v28[1], &v99);
      v26 = *(unint64_t **)a3;
    }
    while (v27 < ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) - 1);
  }
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v30 = (const void *)*v13;
  v29 = v13[1];
  v31 = v29 - *v13;
  if (v29 != *v13)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](&v96, 0xAAAAAAAAAAAAAAABLL * (v31 >> 3));
    v32 = v97;
    memmove(v97, v30, v31);
    v97 = &v32[v31];
    v26 = *(unint64_t **)a3;
  }
  re::pathprocessing::offsetBeziers((uint64_t *)&v99, a2, 0, *v26, (uint64_t *)&v96, a8.n128_f32[0], v20, v21, v22, v23, v24, v25);
  v39 = *(unint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)
  {
    v40 = 0;
    do
    {
      v41 = &v39[v40++];
      re::pathprocessing::offsetBeziers((uint64_t *)&v99, a2, *v41, v41[1], (uint64_t *)&v96, a8.n128_f32[0], v33, v34, v35, v36, v37, v38);
      v39 = *(unint64_t **)a3;
    }
    while (v40 < ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) - 1);
  }
  std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::vector(__p, a6);
  re::pathprocessing::createCapTriangles((uint64_t *)&v96, a2, (char **)a5, __p, a7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v42 = a9;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  std::vector<unsigned long>::__vallocate[abi:nn180100](&v102, v42);
  v43 = v103;
  bzero(v103, 8 * v42);
  v103 = &v43[v42];
  *v102 = (__float2)0x3F80000000000000;
  if (v42 >= 2)
  {
    for (i = 1; i != v42; ++i)
    {
      v45 = 1.57079633 / (double)v42;
      v47 = __sincosf_stret(v45 * (float)i);
      v102[i] = v47;
    }
  }
  v48 = v97;
  if (v97 != v96)
  {
    v49 = 0;
    v93 = (v42 + 1);
    v86 = 16 * v93;
    *((_QWORD *)&v50 + 1) = a8.n128_u64[1];
    v88 = -a8.n128_f32[0];
    v51.i64[0] = 0;
    v51.i64[1] = a8.n128_u32[0];
    v85 = v51;
    v48 = v96;
    v81 = v13;
    do
    {
      v52 = 0;
      v82 = *(char **)a5;
      v83 = *(_QWORD *)(a5 + 8);
      v53 = (float32x2_t *)(*v13 + 24 * v49);
      v84 = v49;
      if (*(_DWORD *)(*a2 + 4 * v49) == 3)
        v54 = 6;
      else
        v54 = 1;
      v87 = (float32x2_t *)&v48[24 * v49];
      do
      {
        v55 = (float)v52 / (float)v54;
        v56 = (float)(1.0 - v55) * (float)(1.0 - v55);
        *(float *)&v50 = (float)(v55 + v55) * (float)(1.0 - v55);
        *(float32x2_t *)v44.f32 = vadd_f32(vmul_n_f32(v87[2], v55 * v55), vadd_f32(vmul_n_f32(*v87, v56), vmul_n_f32(v87[1], *(float *)&v50)));
        v92 = v44;
        *(float32x2_t *)&v50 = vadd_f32(vmul_n_f32(v53[2], v55 * v55), vadd_f32(vmul_n_f32(*v53, v56), vmul_n_f32(v53[1], *(float *)&v50)));
        v90 = v50;
        re::pathprocessing::Bezier2::tangentAt(v53, 0, v55);
        v58.i32[0] = v57 ^ 0x80000000;
        v58.i32[1] = v59;
        v89 = vnegq_f32(v58);
        __src = 0;
        v109 = 0;
        v110 = 0;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&__src, v93);
        v60 = v109;
        bzero(v109, v86);
        v109 = &v60[v86];
        v105 = 0;
        v106 = 0;
        v107 = 0;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v105, v93);
        v61 = v106;
        bzero(v106, v86);
        v62 = v92;
        v106 = &v61[v86];
        v63 = v92;
        v63.i32[2] = 0;
        *(float32x4_t *)__src = v63;
        v64 = v90;
        *((float *)&v64 + 2) = v88;
        *(_OWORD *)&__src[16 * v42] = v64;
        *(_OWORD *)v105 = xmmword_2260E5F40;
        v65 = v89;
        v65.i32[2] = 0;
        v66 = (int32x4_t)vmulq_f32(v65, v65);
        v67 = v65;
        v66.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
        *(float32x2_t *)v65.f32 = vrsqrte_f32((float32x2_t)v66.u32[0]);
        *(float32x2_t *)v65.f32 = vmul_f32(*(float32x2_t *)v65.f32, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32)));
        v68 = vmulq_n_f32(v67, vmul_f32(*(float32x2_t *)v65.f32, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32))).f32[0]);
        *(float32x4_t *)&v105[16 * v42] = v68;
        if (v42 >= 2)
        {
          v69 = 0;
          *(float32x2_t *)v68.f32 = vsub_f32(*(float32x2_t *)&v90, *(float32x2_t *)v92.f32);
          v62.f32[2] = v88;
          v70 = 16;
          do
          {
            v71 = vaddq_f32(vmulq_n_f32(v68, v102[v69 + 1].__sinval), vmulq_n_f32(v85, v102[v69 + 1].__cosval));
            v72 = (int32x4_t)vmulq_f32(v71, v71);
            v72.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2), vadd_f32(*(float32x2_t *)v72.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1))).u32[0];
            v73 = vrsqrte_f32((float32x2_t)v72.u32[0]);
            *(float32x4_t *)&__src[v70] = vaddq_f32(v62, v71);
            v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v73, v73)));
            *(float32x4_t *)&v105[v70] = vmulq_n_f32(v71, vmul_f32(v74, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v74, v74))).f32[0]);
            v70 += 16;
            ++v69;
          }
          while (16 * v42 != v70);
        }
        std::vector<re::Vector3<float>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<re::Vector3<float>*>,std::__wrap_iter<re::Vector3<float>*>>(a5, *(char **)(a5 + 8), __src, v109, (v109 - __src) >> 4);
        std::vector<re::Vector3<float>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<re::Vector3<float>*>,std::__wrap_iter<re::Vector3<float>*>>(a5 + 24, *(char **)(a5 + 32), v105, v106, (v106 - v105) >> 4);
        if (v105)
        {
          v106 = v105;
          operator delete(v105);
        }
        if (__src)
        {
          v109 = __src;
          operator delete(__src);
        }
      }
      while (v52++ != v54);
      v76 = 0;
      v77 = ((unint64_t)(v83 - (_QWORD)v82) >> 4) + 1;
      do
      {
        v78 = v77;
        v79 = v42;
        do
        {
          LODWORD(__src) = v78 - 1;
          HIDWORD(__src) = v78;
          LODWORD(v109) = v42 + v78;
          HIDWORD(v109) = v78;
          LODWORD(v110) = v42 + v78 + 1;
          HIDWORD(v110) = v42 + v78;
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int *,unsigned int *>((std::vector<unsigned int> *)(a5 + 48), *(unsigned int **)(a5 + 56), (char *)&__src, v111);
          ++v78;
          --v79;
        }
        while (v79);
        ++v76;
        v77 += v93;
      }
      while (v76 != v54);
      v49 = v84 + 1;
      v48 = v96;
      v13 = v81;
    }
    while (v84 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
  }
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
    v48 = v96;
  }
  if (v48)
  {
    v97 = v48;
    operator delete(v48);
  }
  v80 = v99;
  if (v99)
  {
    v100 = v99;
LABEL_45:
    operator delete(v80);
  }
}

unint64_t re::pathprocessing::convertCapToBottom(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, _QWORD *a7, float a8)
{
  unint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;

  v8 = a2 - result;
  if (a2 > result)
  {
    v9 = -a8;
    v10 = (16 * result) | 8;
    do
    {
      *(float *)(*a7 + v10) = v9 - *(float *)(*a7 + v10);
      v10 += 16;
      --v8;
    }
    while (v8);
  }
  v11 = a4 - a3;
  if (a4 > a3)
  {
    v12 = (16 * a3) | 8;
    do
    {
      *(float *)(a7[3] + v12) = -*(float *)(a7[3] + v12);
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  if (a5 < a6)
  {
    v13 = a7[6];
    do
    {
      v14 = (int *)(v13 + 4 * a5);
      v15 = *v14;
      *v14 = v14[2];
      v14[2] = v15;
      a5 += 3;
    }
    while (a5 < a6);
  }
  return result;
}

void std::vector<re::Vector3<float>>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 4)
  {
    bzero(v4, 16 * v6);
    v19 = &v4[16 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 60)
    abort();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 3;
  if (v9 >> 3 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v11);
  v13 = &v12[16 * v5];
  v15 = &v12[16 * v14];
  bzero(v13, 16 * v6);
  v16 = &v13[16 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v17 - 1);
      v13 -= 16;
      v17 -= 16;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

void re::pathprocessing::simpleExtrudeMesh(float32x2_t **a1@<X0>, int a2@<W1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, unint64_t SplineIndexForParameter@<X8>)
{
  unint64_t i;
  uint64_t v6;
  float32x2_t *v8;
  BOOL v11;
  int v12;
  _anonymous_namespace_ *v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  uint64_t *v25;
  BOOL v26;
  int32x2_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  re *v39;
  char *v40;
  float32x2_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  float32x2_t v46;
  _BOOL4 isLine;
  float32x2_t v48;
  __int128 v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  re *v54;
  __n128 v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  void (***v59)(_QWORD);
  uint64_t v60;
  unsigned __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int16 v66;
  __int16 v67;
  unsigned __int16 v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  float v78;
  int v79;
  int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  int32x4_t v85;
  double v86;
  double v87;
  double v88;
  int32x4_t v89;
  unsigned int v90;
  int v91;
  unsigned __int16 v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  int v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  int64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  char *v122;
  float v123;
  size_t v124;
  char *v125;
  uint64_t v126;
  __n128 v127;
  float32x2_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  int64_t v132;
  char *v133;
  float v134;
  size_t v135;
  char *v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  int *v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char v163;
  size_t v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  unsigned int v169;
  uint64_t v170;
  float v171;
  float v172;
  re::pathprocessing::Bezier2 *v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  float v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  float32x2_t v181;
  __int128 v182;
  uint64_t v183;
  float v184;
  uint64_t v185;
  unint64_t v186;
  _OWORD *v187;
  __int128 v188;
  _OWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  __int128 v196;
  char *v197;
  char *v198;
  unint64_t v199;
  _OWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  unsigned int v209;
  unsigned int v210;
  unint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  unint64_t v222;
  _OWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  int32x2_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t j;
  void (***v240)(_QWORD);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  unint64_t v257;
  BOOL v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t *v266;
  unint64_t v267;
  char v268;
  uint64_t *v269;
  uint64_t v270;
  float v271;
  float v272;
  float32x2_t v273;
  uint64_t v274;
  int32x2_t v275;
  uint64_t v276;
  unint64_t v277;
  float32x2_t *v278;
  float v279;
  uint64_t *v280;
  unsigned __int32 v281;
  char *v282;
  uint64_t v283;
  std::vector<int> *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t *__p;
  uint64_t *__pa;
  unsigned int v289;
  uint64_t *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  float v296;
  char **v297;
  float v298;
  uint64_t v299;
  _DWORD **v300;
  uint64_t v301;
  unsigned int v302;
  unint64_t v303;
  _DWORD **v304;
  uint64_t v305;
  unint64_t v306;
  __int128 v307;
  __int128 v308;
  unsigned int v309;
  uint64_t v310;
  char *v311;
  char *v312;
  char *v313;
  void *v314;
  void *v315;
  uint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  void *v320;
  void *__dst;
  uint64_t v322;
  __int128 v323;
  float32x2_t v324;
  void *v325;
  char *v326;
  char *v327;
  void *v328;
  _BYTE *v329;
  void *v330;
  _BYTE *v331;
  uint64_t v332;
  char v333[8];
  __int128 v334;
  uint64_t v335;
  float32x2_t v336[2];
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  _QWORD *v341[3];
  uint64_t v342;
  char v343;
  __int16 v344;
  char v345;
  uint64_t v346;
  __int16 v347;
  char v348;
  uint64_t v349;
  _OWORD __src[7];
  int v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  unsigned __int16 v355;
  _BYTE v356[12];
  __int16 v357;
  int v358;
  __int16 v359;
  unint64_t v360;
  __int16 v361;
  unint64_t v362;
  _OWORD v363[3];
  __int128 v364;
  __int128 v365;
  uint64_t v366;

  v8 = a3;
  v366 = *MEMORY[0x24BDAC8D0];
  v282 = *(char **)a4;
  v283 = *(_QWORD *)(a4 + 8);
  v11 = a3->f32[1] <= 0.0 || a3[1].i32[0] == 0;
  v12 = !v11;
  v13 = re::pathprocessing::IndexedMesh::IndexedMesh((uint64_t)v336, a1, 1);
  if (v340 == v339)
  {
    v260 = __src[0];
    v261 = __src[1];
    *(_BYTE *)SplineIndexForParameter = 0;
    *(_QWORD *)(SplineIndexForParameter + 8) = 0;
    *(_QWORD *)(SplineIndexForParameter + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
    *(_OWORD *)(SplineIndexForParameter + 24) = v260;
    *(_OWORD *)(SplineIndexForParameter + 40) = v261;
  }
  else
  {
    if ((v8[3].i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v8[3].i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v8[4].i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v8[4].i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v14 = v336[0];
      v15 = v336[1];
      v273 = v336[0];
    }
    else
    {
      v14 = v8[3];
      v15 = v8[4];
      v273 = vsub_f32(v336[0], v14);
    }
    v16 = vsub_f32(v15, v14);
    v17 = fmaxf(v16.f32[0], v16.f32[1]);
    v18 = v8->f32[0];
    if (v12)
      v19 = v8->f32[1];
    else
      v19 = 0.0;
    v271 = v17;
    if (v8[1].i8[4])
      v20 = v17;
    else
      v20 = 1.0;
    v21 = v18 * v20;
    v22 = -(float)(v18 * v20);
    v279 = v21;
    *(float *)&v281 = v19 * v20;
    v23 = (float)(v19 * v20) - v21;
    if ((*(_QWORD *)&v8[2] & 4) != 0)
      v22 = v23;
    v298 = v22;
    v24 = v8[5].i32[0];
    re::pathprocessing::getBezierIslands(v336, a2, (uint64_t)v333);
    if (v333[0])
    {
      v25 = (uint64_t *)v334;
      if ((_QWORD)v334 != *((_QWORD *)&v334 + 1))
      {
        v296 = -(float)(v19 * v20);
        v297 = (char **)(a4 + 24);
        v284 = (std::vector<int> *)(a4 + 48);
        v26 = *(float *)&v281 >= v279;
        if (!v12)
          v26 = v279 <= 0.0;
        v268 = v26;
        v272 = (float)v24;
        v293 = a4 + 40;
        v294 = a4 + 16;
        v27 = (int32x2_t)0x300000001;
        v28 = 1.0;
        v29 = 0x3F80000000000000;
        v278 = v8;
        v264 = v12;
        v265 = v24;
        v266 = (uint64_t *)*((_QWORD *)&v334 + 1);
        v267 = SplineIndexForParameter;
        do
        {
          v331 = 0;
          v330 = 0;
          v332 = 0;
          v269 = v25;
          re::pathprocessing::subdivideBezierOnSelfIntersection(v25, v25 + 3, &v330, (char **)&v328);
          v326 = 0;
          v325 = 0;
          v327 = 0;
          if (v329 != v328)
          {
            v32 = (v329 - (_BYTE *)v328) / 24;
            if (!(v32 >> 62))
            {
              v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v327, (v329 - (_BYTE *)v328) / 24);
              v325 = v33;
              v327 = &v33[4 * v34];
              bzero(v33, 4 * v32);
              v35 = 0;
              v36 = 0;
              v277 = 0;
              v37 = 0;
              v326 = &v33[4 * v32];
              if (v32 <= 1)
                v38 = 1;
              else
                v38 = v32;
              v270 = v38;
              v274 = v29;
              v275 = v27;
              while (1)
              {
                v280 = v36;
                __p = v35;
                v39 = (re *)re::pathprocessing::Bezier2::geometryType((re::pathprocessing::Bezier2 *)((char *)v328 + 24 * v37));
                v276 = v37;
                *((_DWORD *)v325 + v37) = (_DWORD)v39;
                v40 = (char *)v328 + 24 * v37;
                v41 = *(float32x2_t *)(v40 + 16);
                v323 = *(_OWORD *)v40;
                v324 = v41;
                v42 = re::globalAllocators(v39);
                v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[2] + 32))(v42[2], 576, 8);
                *(_WORD *)v43 = 256;
                *(_DWORD *)(v43 + 4) = 4;
                *(_QWORD *)(v43 + 8) = 0;
                *(_QWORD *)(v43 + 16) = 0;
                *(_QWORD *)(v43 + 24) = 0;
                *(_DWORD *)(v43 + 32) = 0;
                *(_QWORD *)(v43 + 224) = 0;
                *(_QWORD *)(v43 + 232) = 0;
                *(_DWORD *)(v43 + 240) = 0;
                *(_QWORD *)(v43 + 216) = 0;
                *(_QWORD *)(v43 + 328) = 0;
                *(_DWORD *)(v43 + 280) = 0;
                *(_OWORD *)(v43 + 264) = 0u;
                *(_OWORD *)(v43 + 248) = 0u;
                v304 = (_DWORD **)(v43 + 248);
                *(_DWORD *)(v43 + 320) = 0;
                *(_OWORD *)(v43 + 288) = 0u;
                *(_OWORD *)(v43 + 304) = 0u;
                *(_OWORD *)(v43 + 40) = 0u;
                v44 = v43 + 40;
                *(_OWORD *)(v43 + 80) = 0u;
                *(_OWORD *)(v43 + 160) = 0u;
                v291 = v43 + 160;
                *(_DWORD *)(v43 + 72) = 0;
                *(_OWORD *)(v43 + 56) = 0u;
                *(_OWORD *)(v43 + 96) = 0u;
                *(_DWORD *)(v43 + 112) = 0;
                *(_OWORD *)(v43 + 120) = 0u;
                *(_OWORD *)(v43 + 136) = 0u;
                *(_DWORD *)(v43 + 152) = 0;
                *(_OWORD *)(v43 + 176) = 0u;
                *(_DWORD *)(v43 + 192) = 0;
                *(_QWORD *)(v43 + 336) = v29;
                *(_BYTE *)(v43 + 344) = 1;
                *(_QWORD *)(v43 + 200) = 0;
                *(_QWORD *)(v43 + 208) = &off_24ED89F88;
                *(_QWORD *)(v43 + 368) = 0;
                *(_QWORD *)(v43 + 376) = 0;
                *(_DWORD *)(v43 + 384) = 0;
                *(_QWORD *)(v43 + 360) = 0;
                *(_QWORD *)(v43 + 552) = 0;
                *(_DWORD *)(v43 + 424) = 0;
                *(_OWORD *)(v43 + 392) = 0u;
                *(_OWORD *)(v43 + 408) = 0u;
                *(_DWORD *)(v43 + 464) = 0;
                *(_OWORD *)(v43 + 432) = 0u;
                *(_OWORD *)(v43 + 448) = 0u;
                *(_DWORD *)(v43 + 504) = 0;
                *(_OWORD *)(v43 + 472) = 0u;
                *(_OWORD *)(v43 + 488) = 0u;
                *(_DWORD *)(v43 + 544) = 0;
                *(_OWORD *)(v43 + 512) = 0u;
                *(_OWORD *)(v43 + 528) = 0u;
                *(_QWORD *)(v43 + 560) = 1056964608;
                *(_QWORD *)(v43 + 568) = 0;
                v45 = v323;
                v46 = v324;
                isLine = re::pathprocessing::Bezier2::isLine((float32x2_t *)&v323);
                v49 = v323;
                v48 = v324;
                if (isLine)
                {
                  v50 = vsub_f32(v324, *(float32x2_t *)&v323);
                }
                else
                {
                  v51 = vsub_f32(*(float32x2_t *)((char *)&v323 + 8), *(float32x2_t *)&v323);
                  v50 = vadd_f32(vadd_f32(v51, v51), vmul_f32(vsub_f32(v324, *(float32x2_t *)((char *)&v323 + 8)), 0));
                }
                v285 = v43 + 208;
                v299 = v43 + 8;
                if (re::pathprocessing::Bezier2::isLine((float32x2_t *)&v323))
                {
                  v52 = vsub_f32(v324, *(float32x2_t *)&v323);
                }
                else
                {
                  v53 = vsub_f32(v324, *(float32x2_t *)((char *)&v323 + 8));
                  v52 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v323 + 8), *(float32x2_t *)&v323), 0), vadd_f32(v53, v53));
                }
                *(_QWORD *)&__src[0] = 1;
                *((float32x2_t *)&__src[0] + 1) = vadd_f32(vadd_f32(*(float32x2_t *)&v45, vmul_f32(*(float32x2_t *)((char *)&v45 + 8), 0)), vmul_f32(v46, 0));
                *(float32x2_t *)&__src[1] = v50;
                *((float32x2_t *)&__src[1] + 1) = v50;
                re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(v43 + 128, (uint64_t)__src);
                *(_QWORD *)&__src[0] = 0x3F80000000000001;
                *((float32x2_t *)&__src[0] + 1) = vadd_f32(v48, vadd_f32(vmul_f32(*(float32x2_t *)&v49, 0), vmul_f32(*(float32x2_t *)((char *)&v49 + 8), 0)));
                *(float32x2_t *)&__src[1] = v52;
                *((float32x2_t *)&__src[1] + 1) = v52;
                v55 = re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(v43 + 128, (uint64_t)__src);
                v56 = *(_DWORD *)(v43 + 144);
                *(_BYTE *)v43 = 0;
                v57 = *(_QWORD *)(v43 + 184);
                v29 = v274;
                v27 = v275;
                v28 = 1.0;
                if (v57)
                {
                  v58 = 0;
                  for (i = 0; i < v57; ++i)
                  {
                    v59 = *(void (****)(_QWORD))(*(_QWORD *)(v43 + 200) + v58);
                    if (v59)
                    {
                      v60 = re::globalAllocators(v54)[2];
                      (**v59)(v59);
                      v54 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v60 + 40))(v60, v59);
                      v57 = *(_QWORD *)(v43 + 184);
                    }
                    v58 += 24;
                  }
                }
                *(_QWORD *)(v43 + 184) = 0;
                ++*(_DWORD *)(v43 + 192);
                (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)(v43 + 208) + 16))(v285, 0, v55);
                *(_QWORD *)(v43 + 104) = 0;
                ++*(_DWORD *)(v43 + 112);
                *(_QWORD *)(v43 + 24) = 0;
                ++*(_DWORD *)(v43 + 32);
                *(_QWORD *)(v43 + 64) = 0;
                ++*(_DWORD *)(v43 + 72);
                if ((unsigned __int16)v56 >= 2u)
                {
                  v61 = 0;
                  v62 = 1;
                  v63 = -1;
                  v64 = 1;
                  while (1)
                  {
                    SplineIndexForParameter = v62 - 1;
                    v65 = *(_QWORD *)(v43 + 144);
                    if (v65 <= SplineIndexForParameter)
                      goto LABEL_381;
                    i = (__int16)v64;
                    if (v65 <= (__int16)v64)
                      goto LABEL_382;
                    v6 = (__int16)v61;
                    if (v65 <= (__int16)v61)
                      goto LABEL_383;
                    if (*(_DWORD *)(*(_QWORD *)v291 + 32 * (__int16)v64) != *(_DWORD *)(*(_QWORD *)v291
                                                                                         + 32 * (__int16)v61))
                    {
                      re::SpatialCurve<re::Vector2<float>>::addSpline((re *)v43, v61, (unsigned __int16)(v62 - 1));
                      v63 = SplineIndexForParameter;
                      v61 = v64;
                    }
                    v64 = (v64 + 1);
                    v62 = (__int16)v64;
                    if ((unsigned __int16)v56 <= (__int16)v64)
                      goto LABEL_54;
                  }
                }
                v61 = 0;
                v63 = -1;
LABEL_54:
                if ((unsigned __int16)v56 - 1 != v63)
                  re::SpatialCurve<re::Vector2<float>>::addSpline((re *)v43, v61, (unsigned __int16)(v56 - 1));
                v65 = *(_QWORD *)(v43 + 184);
                re::DynamicArray<unsigned short>::resize(v43 + 48, v65);
                if (v65)
                  break;
                re::DynamicArray<unsigned short>::resize(v299, 0);
LABEL_70:
                v73 = *(_QWORD *)(v43 + 144);
                if (!v73)
                  goto LABEL_387;
                v74 = *(_QWORD *)(v43 + 160);
                *(_DWORD *)(v43 + 352) = *(_DWORD *)(v74 + 4);
                *(_DWORD *)(v43 + 356) = *(_DWORD *)(v74 + 32 * v73 - 28);
                *(_BYTE *)(v43 + 1) = 0;
                memset((char *)__src + 8, 0, 28);
                memset((char *)&__src[2] + 8, 0, 36);
                memset(&__src[5], 0, 32);
                v351 = 0;
                v353 = v274;
                v354 = 1;
                v352 = 0;
                *(_QWORD *)&__src[0] = &off_24ED89F88;
                v346 = v43;
                v75 = v43 + 208;
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v43 + 208) + 16))(v285, 0);
                *(_BYTE *)(v43 + 344) = 0;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v43 + 208) + 40))(v285))
                {
                  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 + 208) + 40))(v285);
                  re::DynamicArray<float>::resize(v43 + 256, v76 + 1);
                }
                else
                {
                  *(_QWORD *)(v43 + 272) = 0;
                  ++*(_DWORD *)(v43 + 280);
                }
                SplineIndexForParameter = *(_QWORD *)(v43 + 144);
                if (!SplineIndexForParameter)
                {
                  *(_BYTE *)v43 = 1;
                  v342 = 0;
                  v364 = 0u;
                  v365 = 0u;
                  memset(v363, 0, sizeof(v363));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v356 = 136315906;
                  *(_QWORD *)&v356[4] = "operator[]";
                  v357 = 1024;
                  v358 = 789;
                  v359 = 2048;
                  v360 = 0;
                  v361 = 2048;
                  v362 = 0;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  return;
                }
                v77 = *(_QWORD *)v291;
                v78 = *(float *)(*(_QWORD *)v291 + 4);
                *(_DWORD *)(*(_QWORD *)v291 + 4) = 0;
                if (SplineIndexForParameter == 1)
                {
                  v79 = 0;
                }
                else
                {
                  v300 = (_DWORD **)(v43 + 288);
                  v44 = 1;
                  do
                  {
                    v65 = (v44 - 1);
                    if (SplineIndexForParameter <= v65)
                      goto LABEL_385;
                    v80 = *(_DWORD *)(v77 + 32 * v44);
                    if (v80 == *(_DWORD *)(v77 + 32 * v65))
                    {
                      v81 = *(float *)(v77 + 32 * v44 + 4);
                      LOWORD(v342) = v80 != 0;
                      WORD1(v342) = 2;
                      HIDWORD(v342) = 981668463;
                      v343 = 1;
                      v344 = v347;
                      v345 = v348;
                      (*(void (**)(uint64_t, unsigned int))(*(_QWORD *)&__src[0] + 16))((uint64_t)__src, 0);
                      (*(void (**)(uint64_t))(*(_QWORD *)&__src[0] + 88))((uint64_t)__src);
                      v82 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v346, v78);
                      v83 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v346, (float)(v81 + (float)(v78 * 2.0)) * 0.33333);
                      v84 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v346, (float)(v78 + (float)(v81 * 2.0)) * 0.33333);
                      *(float *)v85.i32 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v346, v81);
                      *(_QWORD *)&v363[0] = __PAIR64__(LODWORD(v81), LODWORD(v78));
                      *((_QWORD *)&v363[0] + 1) = __PAIR64__(LODWORD(v83), LODWORD(v82));
                      *(_QWORD *)&v363[1] = __PAIR64__(v85.u32[0], LODWORD(v84));
                      BYTE8(v363[1]) = 0;
                      re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>((float *)&v342, &v346, (uint64_t)v363, (uint64_t)__src, v85, v86, v87, v88, v89);
                      v90 = v355;
                      v91 = *(unsigned __int16 *)(v43 + 232);
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v43 + 208) + 40))(v75))
                        v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75) + 1;
                      else
                        v92 = 0;
                      v286 = v44;
                      v93 = *(unsigned __int16 *)(v43 + 346);
                      v65 = v93 + v90;
                      if ((_WORD)v93 + (_WORD)v90)
                      {
                        re::DynamicArray<float>::resize(v43 + 216, (unsigned __int16)(3 * (v93 + v90) + 1));
                        *(_WORD *)(v43 + 346) = v65;
                        if (!*(_BYTE *)(v43 + 344))
                          re::DynamicArray<float>::resize(v43 + 256, (unsigned __int16)v65 + 1);
                      }
                      else
                      {
                        *(_QWORD *)(v43 + 232) = 0;
                        ++*(_DWORD *)(v43 + 240);
                        *(_WORD *)(v43 + 346) = 0;
                        if (!*(_BYTE *)(v43 + 344))
                        {
                          *(_QWORD *)(v43 + 272) = 0;
                          ++*(_DWORD *)(v43 + 280);
                        }
                      }
                      v289 = v90;
                      if (v90)
                      {
                        v6 = 0;
                        v64 = v92;
                        SplineIndexForParameter = 1;
                        while (1)
                        {
                          if (!v91)
                          {
                            re::Spline<float>::knotAtIndex((uint64_t)__src, 0);
                            if (!*(_QWORD *)(v43 + 272))
                              goto LABEL_376;
                            **v300 = v94;
                            if (!*((_QWORD *)&__src[1] + 1))
                              goto LABEL_377;
                            if (!*(_QWORD *)(v43 + 232))
                              goto LABEL_378;
                            **v304 = **((_DWORD **)&__src[2] + 1);
                            v64 = (v64 + 1);
                            v91 = 1;
                          }
                          re::Spline<float>::knotAtIndex((uint64_t)__src, (unsigned __int16)SplineIndexForParameter);
                          v65 = v64;
                          v44 = *(_QWORD *)(v43 + 272);
                          if (v44 <= v64)
                            break;
                          (*v300)[v64] = v95;
                          v44 = (unsigned __int16)(v6 + 1);
                          i = *((_QWORD *)&__src[1] + 1);
                          if (*((_QWORD *)&__src[1] + 1) <= v44)
                            goto LABEL_368;
                          v96 = (unsigned __int16)v91;
                          v64 = *(_QWORD *)(v43 + 232);
                          if (v64 <= (unsigned __int16)v91)
                            goto LABEL_369;
                          v97 = *((_QWORD *)&__src[2] + 1);
                          v98 = *v304;
                          (*v304)[(unsigned __int16)v91] = *(_DWORD *)(*((_QWORD *)&__src[2] + 1) + 4 * v44);
                          v44 = (unsigned __int16)(v6 + 2);
                          if (i <= v44)
                            goto LABEL_370;
                          v99 = (unsigned __int16)(v91 + 1);
                          if (v64 <= v99)
                            goto LABEL_371;
                          v98[v99] = *(_DWORD *)(v97 + 4 * v44);
                          v6 = (v6 + 3);
                          v44 = (unsigned __int16)v6;
                          if (i <= (unsigned __int16)v6)
                            goto LABEL_372;
                          i = (unsigned __int16)(v91 + 2);
                          if (v64 <= i)
                            goto LABEL_373;
                          v98[i] = *(_DWORD *)(v97 + 4 * (unsigned __int16)v6);
                          v64 = (v65 + 1);
                          v91 += 3;
                          SplineIndexForParameter = (SplineIndexForParameter + 1);
                          if (3 * v289 == (_DWORD)v6)
                            goto LABEL_104;
                        }
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 789;
                        v359 = 2048;
                        v360 = v64;
                        v361 = 2048;
                        v362 = v44;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_368:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        v96 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 797;
                        v359 = 2048;
                        v360 = v44;
                        v361 = 2048;
                        v362 = i;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_369:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 789;
                        v359 = 2048;
                        v360 = v96;
                        v361 = 2048;
                        v362 = v64;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_370:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        v99 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 797;
                        v359 = 2048;
                        v360 = v44;
                        v361 = 2048;
                        v362 = i;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_371:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 789;
                        v359 = 2048;
                        v360 = v99;
                        v361 = 2048;
                        v362 = v64;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_372:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 797;
                        v359 = 2048;
                        v360 = v44;
                        v361 = 2048;
                        v362 = i;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_373:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 789;
                        v359 = 2048;
                        v360 = i;
                        v361 = 2048;
                        v362 = v64;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_374:
                        *(_QWORD *)v356 = 0;
                        memset(__src, 0, 80);
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v363[0]) = 136315906;
                        *(_QWORD *)((char *)v363 + 4) = "operator[]";
                        WORD6(v363[0]) = 1024;
                        *(_DWORD *)((char *)v363 + 14) = 797;
                        WORD1(v363[1]) = 2048;
                        *(_QWORD *)((char *)&v363[1] + 4) = SplineIndexForParameter;
                        WORD6(v363[1]) = 2048;
                        *(_QWORD *)((char *)&v363[1] + 14) = v64;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_375:
                        *(_QWORD *)v356 = 0;
                        memset(__src, 0, 80);
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v363[0]) = 136315906;
                        *(_QWORD *)((char *)v363 + 4) = "operator[]";
                        WORD6(v363[0]) = 1024;
                        *(_DWORD *)((char *)v363 + 14) = 797;
                        WORD1(v363[1]) = 2048;
                        *(_QWORD *)((char *)&v363[1] + 4) = SplineIndexForParameter;
                        WORD6(v363[1]) = 2048;
                        *(_QWORD *)((char *)&v363[1] + 14) = v64;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_376:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 789;
                        v359 = 2048;
                        v360 = 0;
                        v361 = 2048;
                        v362 = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_377:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 797;
                        v359 = 2048;
                        v360 = 0;
                        v361 = 2048;
                        v362 = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_378:
                        v349 = 0;
                        v364 = 0u;
                        v365 = 0u;
                        memset(v363, 0, sizeof(v363));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v356 = 136315906;
                        *(_QWORD *)&v356[4] = "operator[]";
                        v357 = 1024;
                        v358 = 789;
                        v359 = 2048;
                        v360 = 0;
                        v361 = 2048;
                        v362 = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_379:
                        *(_QWORD *)v356 = 0;
                        memset(__src, 0, 80);
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v363[0]) = 136315906;
                        *(_QWORD *)((char *)v363 + 4) = "operator[]";
                        WORD6(v363[0]) = 1024;
                        *(_DWORD *)((char *)v363 + 14) = 789;
                        WORD1(v363[1]) = 2048;
                        *(_QWORD *)((char *)&v363[1] + 4) = SplineIndexForParameter;
                        WORD6(v363[1]) = 2048;
                        *(_QWORD *)((char *)&v363[1] + 14) = i;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                        goto LABEL_380;
                      }
LABEL_104:
                      re::Spline<float>::knotAtIndex((uint64_t)__src, v289);
                      SplineIndexForParameter = *(_QWORD *)(v43 + 144);
                      v44 = v286;
                      if (SplineIndexForParameter <= v286)
                        goto LABEL_386;
                      v77 = *(_QWORD *)v291;
                      *(_DWORD *)(*(_QWORD *)v291 + 32 * v286 + 4) = v100;
                      v78 = v81;
                      v75 = v43 + 208;
                    }
                    else
                    {
                      *(_DWORD *)(v77 + 32 * v44 + 4) = *(_DWORD *)(v77 + 32 * v65 + 4);
                    }
                    v44 = (v44 + 1);
                  }
                  while (SplineIndexForParameter > v44);
                  v79 = *(_DWORD *)(v77 + 4);
                }
                *(_BYTE *)v43 = 1;
                *(_DWORD *)(v43 + 352) = v79;
                *(_DWORD *)(v43 + 356) = *(_DWORD *)(v77 + 32 * SplineIndexForParameter - 28);
                v30 = re::Spline<float>::~Spline((uint64_t)__src);
                v101 = v280;
                if ((unint64_t)v280 >= v277)
                {
                  v104 = v280 - __p;
                  v105 = v104 + 1;
                  if ((unint64_t)(v104 + 1) >> 61)
                    goto LABEL_388;
                  if ((uint64_t)(v277 - (_QWORD)__p) >> 2 > v105)
                    v105 = (uint64_t)(v277 - (_QWORD)__p) >> 2;
                  if (v277 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
                    v30 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v30 = v105;
                  if (v30)
                  {
                    v30 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v30);
                    v101 = v280;
                  }
                  else
                  {
                    v106 = 0;
                  }
                  v107 = (uint64_t *)(v30 + 8 * v104);
                  *v107 = v43;
                  v102 = v107 + 1;
                  if (v101 == __p)
                  {
                    v103 = v276;
                  }
                  else
                  {
                    v103 = v276;
                    do
                    {
                      v108 = *--v101;
                      *--v107 = v108;
                    }
                    while (v101 != __p);
                  }
                  v277 = v30 + 8 * v106;
                  if (__p)
                    operator delete(__p);
                  v35 = v107;
                }
                else
                {
                  *v280 = v43;
                  v102 = v280 + 1;
                  v35 = __p;
                  v103 = v276;
                }
                v37 = v103 + 1;
                v36 = v102;
                if (v37 == v270)
                  goto LABEL_130;
              }
              v64 = 0;
              SplineIndexForParameter = 0;
              v66 = 0;
              while (1)
              {
                i = *(_QWORD *)(v43 + 184);
                if (i <= SplineIndexForParameter)
                  goto LABEL_379;
                v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v43 + 200) + v64) + 40))(*(_QWORD *)(*(_QWORD *)(v43 + 200) + v64));
                i = *(_QWORD *)(v43 + 64);
                if (i <= SplineIndexForParameter)
                  break;
                *(_WORD *)(*(_QWORD *)(v43 + 80) + 2 * SplineIndexForParameter) = v66;
                v66 += v67;
                ++SplineIndexForParameter;
                v64 += 24;
                if (v65 == SplineIndexForParameter)
                {
                  re::DynamicArray<unsigned short>::resize(v299, v66);
                  SplineIndexForParameter = 0;
                  v68 = 0;
                  while (1)
                  {
                    v64 = *(_QWORD *)(v43 + 184);
                    if (v64 <= SplineIndexForParameter)
                      goto LABEL_384;
                    v69 = *(_QWORD *)(*(_QWORD *)(v43 + 200) + 24 * SplineIndexForParameter);
                    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
                    if (v70)
                      break;
LABEL_67:
                    if (++SplineIndexForParameter == v65)
                      goto LABEL_70;
                  }
                  v71 = *(_QWORD *)(v43 + 24);
                  while (1)
                  {
                    v72 = v68;
                    if (v71 <= v68)
                      break;
                    ++v68;
                    *(_WORD *)(*(_QWORD *)v44 + 2 * v72) = SplineIndexForParameter;
                    if (!--v70)
                      goto LABEL_67;
                  }
                  *(_QWORD *)v356 = 0;
                  memset(__src, 0, 80);
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v363[0]) = 136315906;
                  *(_QWORD *)((char *)v363 + 4) = "operator[]";
                  WORD6(v363[0]) = 1024;
                  *(_DWORD *)((char *)v363 + 14) = 789;
                  WORD1(v363[1]) = 2048;
                  *(_QWORD *)((char *)&v363[1] + 4) = v68;
                  WORD6(v363[1]) = 2048;
                  *(_QWORD *)((char *)&v363[1] + 14) = v71;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_357:
                  if (!v258)
                  {
                    v263 = 16 * v255;
                    do
                    {
                      *(float32x2_t *)&v256[v263] = vadd_f32(v273, *(float32x2_t *)&v256[v263]);
                      ++v255;
                      v256 = *(char **)a4;
                      v263 += 16;
                    }
                    while (v255 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
                  }
                  goto LABEL_360;
                }
              }
LABEL_380:
              *(_QWORD *)v356 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v363[0]) = 136315906;
              *(_QWORD *)((char *)v363 + 4) = "operator[]";
              WORD6(v363[0]) = 1024;
              *(_DWORD *)((char *)v363 + 14) = 789;
              WORD1(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 4) = SplineIndexForParameter;
              WORD6(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 14) = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_381:
              *(_QWORD *)v356 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v363[0]) = 136315906;
              *(_QWORD *)((char *)v363 + 4) = "operator[]";
              WORD6(v363[0]) = 1024;
              *(_DWORD *)((char *)v363 + 14) = 789;
              WORD1(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 4) = SplineIndexForParameter;
              WORD6(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 14) = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_382:
              *(_QWORD *)v356 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v363[0]) = 136315906;
              *(_QWORD *)((char *)v363 + 4) = "operator[]";
              WORD6(v363[0]) = 1024;
              *(_DWORD *)((char *)v363 + 14) = 789;
              WORD1(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 4) = i;
              WORD6(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 14) = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_383:
              *(_QWORD *)v356 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v363[0]) = 136315906;
              *(_QWORD *)((char *)v363 + 4) = "operator[]";
              WORD6(v363[0]) = 1024;
              *(_DWORD *)((char *)v363 + 14) = 789;
              WORD1(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 4) = v6;
              WORD6(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 14) = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_384:
              *(_QWORD *)v356 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v363[0]) = 136315906;
              *(_QWORD *)((char *)v363 + 4) = "operator[]";
              WORD6(v363[0]) = 1024;
              *(_DWORD *)((char *)v363 + 14) = 789;
              WORD1(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 4) = SplineIndexForParameter;
              WORD6(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 14) = v64;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_385:
              v342 = 0;
              v364 = 0u;
              v365 = 0u;
              memset(v363, 0, sizeof(v363));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v356 = 136315906;
              *(_QWORD *)&v356[4] = "operator[]";
              v357 = 1024;
              v358 = 789;
              v359 = 2048;
              v360 = v65;
              v361 = 2048;
              v362 = SplineIndexForParameter;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_386:
              v349 = 0;
              v364 = 0u;
              v365 = 0u;
              memset(v363, 0, sizeof(v363));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v356 = 136315906;
              *(_QWORD *)&v356[4] = "operator[]";
              v357 = 1024;
              v358 = 789;
              v359 = 2048;
              v360 = v44;
              v361 = 2048;
              v362 = SplineIndexForParameter;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_387:
              *(_QWORD *)v356 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v363[0]) = 136315906;
              *(_QWORD *)((char *)v363 + 4) = "operator[]";
              WORD6(v363[0]) = 1024;
              *(_DWORD *)((char *)v363 + 14) = 789;
              WORD1(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 4) = 0;
              WORD6(v363[1]) = 2048;
              *(_QWORD *)((char *)&v363[1] + 14) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
LABEL_388:
            abort();
          }
          v35 = 0;
          v102 = 0;
LABEL_130:
          v110 = *(char **)a4;
          v109 = *(_QWORD *)(a4 + 8);
          i = *(_QWORD *)(a4 + 24);
          v111 = *(_QWORD *)(a4 + 32);
          v6 = *(_QWORD *)(a4 + 48);
          v112 = *(_QWORD *)(a4 + 56);
          __pa = v35;
          if ((v278[2].i8[0] & 1) != 0)
          {
            v320 = 0;
            __dst = 0;
            v322 = 0;
            v113 = v330;
            v114 = v331 - (_BYTE *)v330;
            if (v331 != v330)
            {
              std::vector<unsigned long>::__vallocate[abi:nn180100](&v320, v114 >> 3);
              v305 = v6;
              v115 = i;
              v116 = v110;
              v117 = v112;
              v118 = v111;
              v119 = v109;
              v120 = v102;
              v121 = (char *)__dst;
              memmove(__dst, v113, v114);
              v35 = __pa;
              v122 = &v121[v114];
              v102 = v120;
              v109 = v119;
              v111 = v118;
              v112 = v117;
              v110 = v116;
              i = v115;
              v6 = v305;
              __dst = v122;
            }
            v123 = (float)v278[1].u32[0];
            v318 = 0;
            v319 = 0;
            v317 = 0;
            v124 = (char *)v102 - (char *)v35;
            if (v102 == v35)
            {
              v31.n128_u32[0] = v281;
              re::pathprocessing::generateCapAndBevel((uint64_t *)&v328, &v325, (uint64_t)&v320, v264, a4, (uint64_t)&v317, v265, v31, v123);
            }
            else
            {
              if ((char *)v102 - (char *)v35 < 0)
                goto LABEL_388;
              v125 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v124 >> 3);
              v317 = v125;
              v318 = v125;
              v319 = &v125[8 * v126];
              memmove(v125, __pa, v124);
              v318 = &v125[v124];
              v127.n128_u32[0] = v281;
              re::pathprocessing::generateCapAndBevel((uint64_t *)&v328, &v325, (uint64_t)&v320, v264, a4, (uint64_t)&v317, v265, v127, v123);
              if (v125)
              {
                v318 = v125;
                operator delete(v125);
              }
            }
            v30 = (uint64_t)v320;
            v35 = __pa;
            if (v320)
            {
              __dst = v320;
              operator delete(v320);
              v35 = __pa;
            }
          }
          v128 = v278[2];
          v290 = v102;
          if ((v128.i8[0] & 4) != 0)
          {
            v129 = (v109 - (uint64_t)v110) >> 4;
            v130 = (uint64_t)(v111 - i) >> 4;
            v6 = (v112 - v6) >> 2;
            if ((v128.i8[0] & 1) != 0)
            {
              v139 = (uint64_t)(v111 - i) >> 4;
              v140 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
              v142 = *(_QWORD *)(a4 + 24);
              v141 = *(_QWORD *)(a4 + 32);
              v143 = *(_QWORD *)(a4 + 48);
              v301 = *(_QWORD *)(a4 + 56);
              v144 = v140 - v129;
              v145 = (v140 - v129);
              v306 = v140 + v145;
              std::vector<re::Vector3<float>>::resize((_QWORD *)a4, v140 + v145);
              if ((_DWORD)v140 != (_DWORD)v129)
              {
                v146 = 16 * v140;
                v147 = 16 * v129;
                do
                {
                  *(_OWORD *)(*(_QWORD *)a4 + v146) = *(_OWORD *)(*(_QWORD *)a4 + v147);
                  v146 += 16;
                  v147 += 16;
                  --v145;
                }
                while (v145);
              }
              v148 = (v141 - v142) >> 4;
              v149 = v148 - v139;
              i = v148 - v139 + v148;
              std::vector<re::Vector3<float>>::resize(v297, i);
              if (v148 != v139)
              {
                v150 = 16 * v148;
                v151 = 16 * v139;
                do
                {
                  *(_OWORD *)&(*v297)[v150] = *(_OWORD *)&(*v297)[v151];
                  v150 += 16;
                  v151 += 16;
                  --v149;
                }
                while (v149);
              }
              v152 = (v301 - v143) >> 2;
              v153 = v152 - v6;
              std::vector<unsigned int>::resize(v284, v152 - v6 + v152);
              if (v152 != v6)
              {
                v154 = &v284->__begin_[v152];
                v155 = &v284->__begin_[v6];
                do
                {
                  v156 = *v155++;
                  *v154++ = v156 + v144;
                  --v153;
                }
                while (v153);
              }
              v157 = v140;
              v158 = v306;
              v159 = v148;
              v160 = v148 - v139 + v148;
              v161 = v152;
              v162 = v152 - v6 + v152;
            }
            else
            {
              v314 = 0;
              v315 = 0;
              v316 = 0;
              v131 = v330;
              v132 = v331 - (_BYTE *)v330;
              if (v331 != v330)
              {
                std::vector<unsigned long>::__vallocate[abi:nn180100](&v314, v132 >> 3);
                v133 = (char *)v315;
                memmove(v315, v131, v132);
                v315 = &v133[v132];
              }
              v134 = (float)v278[1].u32[0];
              v312 = 0;
              v313 = 0;
              v311 = 0;
              v135 = (char *)v290 - (char *)__pa;
              if (v290 == __pa)
              {
                v31.n128_u32[0] = v281;
                re::pathprocessing::generateCapAndBevel((uint64_t *)&v328, &v325, (uint64_t)&v314, v264, a4, (uint64_t)&v311, v265, v31, v134);
              }
              else
              {
                if ((char *)v290 - (char *)__pa < 0)
                  goto LABEL_388;
                v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v135 >> 3);
                v311 = v136;
                v312 = v136;
                v313 = &v136[8 * v137];
                memmove(v136, __pa, v135);
                v312 = &v136[v135];
                v138.n128_u32[0] = v281;
                re::pathprocessing::generateCapAndBevel((uint64_t *)&v328, &v325, (uint64_t)&v314, v264, a4, (uint64_t)&v311, v265, v138, v134);
                if (v136)
                {
                  v312 = v136;
                  operator delete(v136);
                }
              }
              if (v314)
              {
                v315 = v314;
                operator delete(v314);
              }
              v158 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
              v160 = (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 4;
              v162 = (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 2;
              v157 = v129;
              v159 = v130;
              v161 = v6;
            }
            v30 = re::pathprocessing::convertCapToBottom(v157, v158, v159, v160, v161, v162, (_QWORD *)a4, v279);
            v35 = __pa;
            v102 = v290;
          }
          v163 = v268;
          if ((v278[2].i8[0] & 2) == 0)
            v163 = 1;
          if ((v163 & 1) == 0)
          {
            v164 = (char *)v102 - (char *)v35;
            if (v102 == v35)
            {
              v165 = 0;
            }
            else
            {
              if ((char *)v102 - (char *)v35 < 0)
                goto LABEL_388;
              v165 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v164 >> 3);
              v30 = (uint64_t)memmove(v165, __pa, v164);
            }
            if (v329 != v328)
            {
              i = 0;
              v166 = (v329 - (_BYTE *)v328) / 24;
              if (v166 <= 1)
                v166 = 1;
              v292 = v166;
              v295 = v165;
              do
              {
                v168 = *(char **)a4;
                v167 = *(_QWORD *)(a4 + 8);
                v65 = *((_QWORD *)v165 + i);
                if (*(_BYTE *)v65)
                {
                  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)(v65 + 208) + 40))(v65 + 208))
                    v169 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v65 + 208) + 40))(v65 + 208);
                  else
                    v169 = 0xFFFF;
                  re::Spline<float>::knotAtIndex(v65 + 208, v169);
                  v171 = v172;
                }
                else
                {
                  v170 = *(_QWORD *)(v65 + 184);
                  if (v170)
                    v171 = *(float *)(*(_QWORD *)(v65 + 200) + 24 * v170 - 8);
                  else
                    v171 = 0.0;
                }
                v173 = (re::pathprocessing::Bezier2 *)((char *)v328 + 24 * i);
                if (re::pathprocessing::Bezier2::isLine((float32x2_t *)v173))
                {
                  v6 = 1;
                }
                else
                {
                  v174 = (int)(float)(v171 * v272);
                  if (v174 <= 1)
                    v175 = 1;
                  else
                    v175 = v174;
                  if (re::pathprocessing::Bezier2::isPoint(v173))
                    v6 = 1;
                  else
                    v6 = v175;
                }
                v44 = 0;
                v176 = (unint64_t)(v167 - (_QWORD)v168) >> 4;
                v177 = (float)(unint64_t)v6;
                do
                {
                  v178 = re::SpatialCurve<re::Vector2<float>>::evaluateAt(v65, v171 * (float)((float)v44 / v177));
                  if (*(_BYTE *)v65)
                  {
                    v179 = re::BezierSpline<float>::evaluateAt(v65 + 208, v171 * (float)((float)v44 / v177));
                    SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(v65, v179);
                    v64 = *(_QWORD *)(v65 + 184);
                    if (v64 <= SplineIndexForParameter)
                      goto LABEL_374;
                    v180 = *(_QWORD *)(*(_QWORD *)(v65 + 200) + 24 * SplineIndexForParameter);
                    v181 = (float32x2_t)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v180 + 128))(v180, 1, v179);
                    v183 = (uint64_t)v181;
                    v184 = sqrtf(vaddv_f32(vmul_f32(v181, v181)));
                    if (v184 > 0.0)
                      v183 = (uint64_t)vmul_n_f32(v181, v28 / v184);
                  }
                  else
                  {
                    SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(v65, v171 * (float)((float)v44 / v177));
                    v64 = *(_QWORD *)(v65 + 184);
                    if (v64 <= SplineIndexForParameter)
                      goto LABEL_375;
                    v185 = *(_QWORD *)(*(_QWORD *)(v65 + 200) + 24 * SplineIndexForParameter);
                    v183 = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v185 + 128))(v185, 1, v171 * (float)((float)v44 / v177));
                  }
                  *(_QWORD *)&v182 = v178;
                  v187 = *(_OWORD **)(a4 + 8);
                  v186 = *(_QWORD *)(a4 + 16);
                  if ((unint64_t)v187 >= v186)
                  {
                    v190 = ((uint64_t)v187 - *(_QWORD *)a4) >> 4;
                    if ((unint64_t)(v190 + 1) >> 60)
                      goto LABEL_388;
                    v191 = v186 - *(_QWORD *)a4;
                    v192 = v191 >> 3;
                    if (v191 >> 3 <= (unint64_t)(v190 + 1))
                      v192 = v190 + 1;
                    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF0)
                      v193 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v193 = v192;
                    v307 = v182;
                    if (v193)
                    {
                      v194 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v294, v193);
                      v182 = v307;
                    }
                    else
                    {
                      v194 = 0;
                    }
                    v195 = &v194[16 * v190];
                    v196 = v182;
                    *((float *)&v196 + 2) = v296;
                    *(_OWORD *)v195 = v196;
                    v189 = v195 + 16;
                    v198 = *(char **)a4;
                    v197 = *(char **)(a4 + 8);
                    if (v197 != *(char **)a4)
                    {
                      do
                      {
                        *((_OWORD *)v195 - 1) = *((_OWORD *)v197 - 1);
                        v195 -= 16;
                        v197 -= 16;
                      }
                      while (v197 != v198);
                      v197 = *(char **)a4;
                    }
                    *(_QWORD *)a4 = v195;
                    *(_QWORD *)(a4 + 8) = v189;
                    *(_QWORD *)(a4 + 16) = &v194[16 * v193];
                    if (v197)
                    {
                      operator delete(v197);
                      v182 = v307;
                    }
                  }
                  else
                  {
                    v188 = v182;
                    *((float *)&v188 + 2) = v296;
                    *v187 = v188;
                    v189 = v187 + 1;
                  }
                  *(_QWORD *)(a4 + 8) = v189;
                  v199 = *(_QWORD *)(a4 + 16);
                  if ((unint64_t)v189 >= v199)
                  {
                    v201 = ((uint64_t)v189 - *(_QWORD *)a4) >> 4;
                    if ((unint64_t)(v201 + 1) >> 60)
                      goto LABEL_388;
                    v202 = v199 - *(_QWORD *)a4;
                    v203 = v202 >> 3;
                    if (v202 >> 3 <= (unint64_t)(v201 + 1))
                      v203 = v201 + 1;
                    if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF0)
                      v204 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v204 = v203;
                    if (v204)
                    {
                      v308 = v182;
                      v205 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v294, v204);
                      v182 = v308;
                    }
                    else
                    {
                      v205 = 0;
                    }
                    v206 = &v205[16 * v201];
                    *((float *)&v182 + 2) = v298;
                    *(_OWORD *)v206 = v182;
                    v200 = v206 + 16;
                    v208 = *(char **)a4;
                    v207 = *(char **)(a4 + 8);
                    if (v207 != *(char **)a4)
                    {
                      do
                      {
                        *((_OWORD *)v206 - 1) = *((_OWORD *)v207 - 1);
                        v206 -= 16;
                        v207 -= 16;
                      }
                      while (v207 != v208);
                      v207 = *(char **)a4;
                    }
                    *(_QWORD *)a4 = v206;
                    *(_QWORD *)(a4 + 8) = v200;
                    *(_QWORD *)(a4 + 16) = &v205[16 * v204];
                    if (v207)
                      operator delete(v207);
                  }
                  else
                  {
                    *((float *)&v182 + 2) = v298;
                    *v189 = v182;
                    v200 = v189 + 1;
                  }
                  v209 = HIDWORD(v183) ^ 0x80000000;
                  v210 = v183;
                  *(_QWORD *)(a4 + 8) = v200;
                  v212 = *(_OWORD **)(a4 + 32);
                  v211 = *(_QWORD *)(a4 + 40);
                  if ((unint64_t)v212 >= v211)
                  {
                    v214 = ((char *)v212 - *v297) >> 4;
                    if ((unint64_t)(v214 + 1) >> 60)
                      goto LABEL_388;
                    v215 = v211 - (_QWORD)*v297;
                    v216 = v215 >> 3;
                    if (v215 >> 3 <= (unint64_t)(v214 + 1))
                      v216 = v214 + 1;
                    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF0)
                      v217 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v217 = v216;
                    if (v217)
                    {
                      v218 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v293, v217);
                      v209 = HIDWORD(v183) ^ 0x80000000;
                      v210 = v183;
                    }
                    else
                    {
                      v218 = 0;
                    }
                    v219 = &v218[16 * v214];
                    *(_OWORD *)v219 = __PAIR64__(v210, v209);
                    v213 = v219 + 16;
                    v221 = *(char **)(a4 + 24);
                    v220 = *(char **)(a4 + 32);
                    if (v220 != v221)
                    {
                      do
                      {
                        *((_OWORD *)v219 - 1) = *((_OWORD *)v220 - 1);
                        v219 -= 16;
                        v220 -= 16;
                      }
                      while (v220 != v221);
                      v220 = *v297;
                    }
                    *(_QWORD *)(a4 + 24) = v219;
                    *(_QWORD *)(a4 + 32) = v213;
                    *(_QWORD *)(a4 + 40) = &v218[16 * v217];
                    if (v220)
                    {
                      operator delete(v220);
                      v209 = HIDWORD(v183) ^ 0x80000000;
                      v210 = v183;
                    }
                  }
                  else
                  {
                    *v212 = __PAIR64__(v183, v209);
                    v213 = v212 + 1;
                  }
                  *(_QWORD *)(a4 + 32) = v213;
                  v222 = *(_QWORD *)(a4 + 40);
                  if ((unint64_t)v213 >= v222)
                  {
                    v224 = ((char *)v213 - *v297) >> 4;
                    if ((unint64_t)(v224 + 1) >> 60)
                      goto LABEL_388;
                    v225 = v222 - (_QWORD)*v297;
                    v226 = v225 >> 3;
                    if (v225 >> 3 <= (unint64_t)(v224 + 1))
                      v226 = v224 + 1;
                    if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0)
                      v227 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v227 = v226;
                    if (v227)
                    {
                      v302 = v209;
                      v309 = v210;
                      v228 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v293, v227);
                      v209 = v302;
                      v210 = v309;
                    }
                    else
                    {
                      v228 = 0;
                    }
                    v229 = &v228[16 * v224];
                    *(_OWORD *)v229 = __PAIR64__(v210, v209);
                    v223 = v229 + 16;
                    v231 = *(char **)(a4 + 24);
                    v230 = *(char **)(a4 + 32);
                    if (v230 != v231)
                    {
                      do
                      {
                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                        v229 -= 16;
                        v230 -= 16;
                      }
                      while (v230 != v231);
                      v230 = *v297;
                    }
                    *(_QWORD *)(a4 + 24) = v229;
                    *(_QWORD *)(a4 + 32) = v223;
                    *(_QWORD *)(a4 + 40) = &v228[16 * v227];
                    if (v230)
                      operator delete(v230);
                  }
                  else
                  {
                    *v213 = __PAIR64__(v210, v209);
                    v223 = v213 + 1;
                  }
                  *(_QWORD *)(a4 + 32) = v223;
                  v11 = v44++ == v6;
                }
                while (!v11);
                do
                {
                  LODWORD(__src[0]) = v176;
                  v232 = vadd_s32(vdup_n_s32(v176), v27);
                  DWORD1(__src[0]) = v232.i32[0];
                  *(int32x2_t *)((char *)__src + 12) = v232;
                  DWORD2(__src[0]) = v176 + 2;
                  DWORD1(__src[1]) = v176 + 2;
                  std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int *,unsigned int *>((std::vector<unsigned int> *)v284, *(unsigned int **)(a4 + 56), (char *)__src, (char *)&__src[1] + 8);
                  LODWORD(v176) = v176 + 2;
                  --v6;
                }
                while (v6);
                ++i;
                v165 = v295;
              }
              while (i != v292);
            }
            v35 = __pa;
            v102 = v290;
            if (v165)
            {
              operator delete(v165);
              v35 = __pa;
            }
          }
          if (v102 != v35)
          {
            v233 = 0;
            v234 = v102 - v35;
            if (v234 <= 1)
              v234 = 1;
            v303 = v234;
            do
            {
              v235 = v35[v233];
              if (v235)
              {
                v236 = re::globalAllocators((re *)v30);
                v310 = v236[2];
                v237 = *(_QWORD *)(v235 + 184);
                if (v237)
                {
                  v238 = 0;
                  for (j = 0; j < v237; ++j)
                  {
                    v240 = *(void (****)(_QWORD))(*(_QWORD *)(v235 + 200) + v238);
                    if (v240)
                    {
                      v241 = re::globalAllocators((re *)v236)[2];
                      (**v240)(v240);
                      v236 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v241 + 40))(v241, v240);
                      v237 = *(_QWORD *)(v235 + 184);
                    }
                    v238 += 24;
                  }
                }
                *(_QWORD *)(v235 + 184) = 0;
                ++*(_DWORD *)(v235 + 192);
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v235 + 208) + 16))(v235 + 208, 0);
                i = v235 + 168;
                v242 = *(_QWORD *)(v235 + 168);
                *(_QWORD *)(v235 + 104) = 0;
                ++*(_DWORD *)(v235 + 112);
                *(_QWORD *)(v235 + 24) = 0;
                ++*(_DWORD *)(v235 + 32);
                *(_QWORD *)(v235 + 64) = 0;
                ++*(_DWORD *)(v235 + 72);
                if (v242)
                {
                  if (*(_QWORD *)(v235 + 200))
                    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 40))(v242);
                  *(_QWORD *)(v235 + 200) = 0;
                  *(_QWORD *)(v235 + 176) = 0;
                  *(_QWORD *)(v235 + 184) = 0;
                  *(_QWORD *)i = 0;
                  ++*(_DWORD *)(v235 + 192);
                }
                v6 = v235 + 128;
                v243 = *(_QWORD *)(v235 + 128);
                if (v243)
                {
                  if (*(_QWORD *)(v235 + 160))
                    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 40))(v243);
                  *(_QWORD *)(v235 + 160) = 0;
                  *(_QWORD *)(v235 + 136) = 0;
                  *(_QWORD *)(v235 + 144) = 0;
                  *(_QWORD *)v6 = 0;
                  ++*(_DWORD *)(v235 + 152);
                }
                v245 = (_QWORD *)(v235 + 88);
                v244 = *(_QWORD *)(v235 + 88);
                if (v244)
                {
                  if (*(_QWORD *)(v235 + 120))
                    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 40))(v244);
                  *(_QWORD *)(v235 + 120) = 0;
                  *(_QWORD *)(v235 + 96) = 0;
                  *(_QWORD *)(v235 + 104) = 0;
                  *v245 = 0;
                  ++*(_DWORD *)(v235 + 112);
                }
                v247 = (_QWORD *)(v235 + 8);
                v246 = *(_QWORD *)(v235 + 8);
                if (v246)
                {
                  if (*(_QWORD *)(v235 + 40))
                    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 40))(v246);
                  *(_QWORD *)(v235 + 40) = 0;
                  *(_QWORD *)(v235 + 16) = 0;
                  *(_QWORD *)(v235 + 24) = 0;
                  *v247 = 0;
                  ++*(_DWORD *)(v235 + 32);
                }
                v249 = (_QWORD *)(v235 + 48);
                v248 = *(_QWORD *)(v235 + 48);
                if (v248)
                {
                  if (*(_QWORD *)(v235 + 80))
                    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 40))(v248);
                  *(_QWORD *)(v235 + 80) = 0;
                  *(_QWORD *)(v235 + 56) = 0;
                  *(_QWORD *)(v235 + 64) = 0;
                  *v249 = 0;
                  ++*(_DWORD *)(v235 + 72);
                }
                v250 = *(_QWORD *)(v235 + 520);
                if (v250)
                {
                  if (*(_QWORD *)(v235 + 552))
                    (*(void (**)(uint64_t))(*(_QWORD *)v250 + 40))(v250);
                  *(_QWORD *)(v235 + 552) = 0;
                  *(_QWORD *)(v235 + 528) = 0;
                  *(_QWORD *)(v235 + 536) = 0;
                  *(_QWORD *)(v235 + 520) = 0;
                  ++*(_DWORD *)(v235 + 544);
                }
                v251 = *(_QWORD *)(v235 + 480);
                if (v251)
                {
                  if (*(_QWORD *)(v235 + 512))
                    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 40))(v251);
                  *(_QWORD *)(v235 + 512) = 0;
                  *(_QWORD *)(v235 + 488) = 0;
                  *(_QWORD *)(v235 + 496) = 0;
                  *(_QWORD *)(v235 + 480) = 0;
                  ++*(_DWORD *)(v235 + 504);
                }
                v252 = *(_QWORD *)(v235 + 440);
                if (v252)
                {
                  if (*(_QWORD *)(v235 + 472))
                    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 40))(v252);
                  *(_QWORD *)(v235 + 472) = 0;
                  *(_QWORD *)(v235 + 448) = 0;
                  *(_QWORD *)(v235 + 456) = 0;
                  *(_QWORD *)(v235 + 440) = 0;
                  ++*(_DWORD *)(v235 + 464);
                }
                v253 = *(_QWORD *)(v235 + 400);
                if (v253)
                {
                  if (*(_QWORD *)(v235 + 432))
                    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 40))(v253);
                  *(_QWORD *)(v235 + 432) = 0;
                  *(_QWORD *)(v235 + 408) = 0;
                  *(_QWORD *)(v235 + 416) = 0;
                  *(_QWORD *)(v235 + 400) = 0;
                  ++*(_DWORD *)(v235 + 424);
                }
                v254 = *(_QWORD *)(v235 + 360);
                if (v254)
                {
                  if (*(_QWORD *)(v235 + 392))
                    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 40))(v254);
                  *(_QWORD *)(v235 + 392) = 0;
                  *(_QWORD *)(v235 + 368) = 0;
                  *(_QWORD *)(v235 + 376) = 0;
                  *(_QWORD *)(v235 + 360) = 0;
                  ++*(_DWORD *)(v235 + 384);
                }
                re::Spline<float>::~Spline(v235 + 208);
                if (*(_QWORD *)i)
                {
                  if (*(_QWORD *)(v235 + 200))
                    (*(void (**)(_QWORD))(**(_QWORD **)i + 40))(*(_QWORD *)i);
                  *(_QWORD *)(v235 + 200) = 0;
                  *(_QWORD *)(v235 + 176) = 0;
                  *(_QWORD *)(v235 + 184) = 0;
                  *(_QWORD *)i = 0;
                  ++*(_DWORD *)(v235 + 192);
                }
                if (*(_QWORD *)v6)
                {
                  if (*(_QWORD *)(v235 + 160))
                    (*(void (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6);
                  *(_QWORD *)(v235 + 160) = 0;
                  *(_QWORD *)(v235 + 136) = 0;
                  *(_QWORD *)(v235 + 144) = 0;
                  *(_QWORD *)v6 = 0;
                  ++*(_DWORD *)(v235 + 152);
                }
                if (*v245)
                {
                  if (*(_QWORD *)(v235 + 120))
                    (*(void (**)(_QWORD))(*(_QWORD *)*v245 + 40))(*v245);
                  *(_QWORD *)(v235 + 120) = 0;
                  *(_QWORD *)(v235 + 96) = 0;
                  *(_QWORD *)(v235 + 104) = 0;
                  *v245 = 0;
                  ++*(_DWORD *)(v235 + 112);
                }
                if (*v249)
                {
                  if (*(_QWORD *)(v235 + 80))
                    (*(void (**)(_QWORD))(*(_QWORD *)*v249 + 40))(*v249);
                  *(_QWORD *)(v235 + 80) = 0;
                  *(_QWORD *)(v235 + 56) = 0;
                  *(_QWORD *)(v235 + 64) = 0;
                  *v249 = 0;
                  ++*(_DWORD *)(v235 + 72);
                }
                if (*v247)
                {
                  if (*(_QWORD *)(v235 + 40))
                    (*(void (**)(_QWORD))(*(_QWORD *)*v247 + 40))(*v247);
                  *(_QWORD *)(v235 + 40) = 0;
                  *(_QWORD *)(v235 + 16) = 0;
                  *(_QWORD *)(v235 + 24) = 0;
                  *v247 = 0;
                  ++*(_DWORD *)(v235 + 32);
                }
                v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v310 + 40))(v310, v235);
                v35 = __pa;
              }
              ++v233;
            }
            while (v233 != v303);
          }
          if (v35)
            operator delete(v35);
          SplineIndexForParameter = v267;
          if (v325)
          {
            v326 = (char *)v325;
            operator delete(v325);
          }
          v8 = v278;
          if (v328)
          {
            v329 = v328;
            operator delete(v328);
          }
          if (v330)
          {
            v331 = v330;
            operator delete(v330);
          }
          v25 = v269 + 6;
        }
        while (v269 + 6 != v266);
      }
      v255 = (v283 - (uint64_t)v282) >> 4;
      v256 = *(char **)a4;
      v257 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
      v258 = v255 >= v257;
      if (!v8[1].i8[4])
        goto LABEL_357;
      if (v255 < v257)
      {
        v259 = 16 * v255;
        do
        {
          *(float32x2_t *)&v256[v259] = vadd_f32(v273, *(float32x2_t *)&v256[v259]);
          *(float32x4_t *)&v256[v259] = vmulq_n_f32(*(float32x4_t *)&v256[v259], 1.0 / v271);
          ++v255;
          v256 = *(char **)a4;
          v259 += 16;
        }
        while (v255 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
      }
LABEL_360:
      *(_BYTE *)SplineIndexForParameter = 1;
    }
    else
    {
      __src[0] = v334;
      re::DynamicString::DynamicString((re::DynamicString *)&__src[1], (const re::DynamicString *)&v335);
      *(_BYTE *)SplineIndexForParameter = 0;
      *(_OWORD *)(SplineIndexForParameter + 8) = __src[0];
      v262 = *((_QWORD *)&__src[2] + 1);
      *(_QWORD *)(SplineIndexForParameter + 24) = *(_QWORD *)&__src[1];
      *(_QWORD *)(SplineIndexForParameter + 48) = v262;
      *(_OWORD *)(SplineIndexForParameter + 32) = *(_OWORD *)((char *)&__src[1] + 8);
    }
    re::Result<std::vector<re::pathprocessing::BezierIslandInfo>,re::DetailedError>::~Result((uint64_t)v333);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)v341, v341[1]);
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v337)
  {
    v338 = v337;
    operator delete(v337);
  }
}

void re::BezierSpline<float>::~BezierSpline(uint64_t a1)
{
  re::Spline<float>::~Spline(a1);
  JUMPOUT(0x2276933B8);
}

void re::BezierSpline<float>::resizeSpans(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    re::DynamicArray<float>::resize(a1 + 8, (unsigned __int16)(3 * a2 + 1));
    *(_WORD *)(a1 + 138) = a2;
    if (!*(_BYTE *)(a1 + 136))
      re::DynamicArray<float>::resize(a1 + 48, a2 + 1);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    ++*(_DWORD *)(a1 + 32);
    *(_WORD *)(a1 + 138) = 0;
    if (!*(_BYTE *)(a1 + 136))
    {
      *(_QWORD *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
  }
}

_QWORD *re::BezierSpline<float>::reserveSpans(_QWORD *result, int a2)
{
  unsigned __int16 v2;

  if (a2)
    v2 = 3 * a2 + 1;
  else
    v2 = 0;
  if (result[2] < (unint64_t)v2)
    return re::DynamicArray<int>::setCapacity(result + 1, v2);
  return result;
}

uint64_t re::BezierSpline<float>::degree()
{
  return 3;
}

uint64_t re::BezierSpline<float>::spanCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t re::Spline<float>::knotCount(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
    return (unsigned __int16)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 1);
  else
    return 0;
}

uint64_t re::Spline<float>::knotAtIndex(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if (*(_BYTE *)(result + 136))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if ((_DWORD)result != a2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  else if (*(_QWORD *)(result + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::BezierSpline<float>::findSpanIndex(uint64_t a1, float a2)
{
  float v2;
  unsigned int v3;
  float v4;
  uint64_t result;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(float *)(a1 + 128);
    if (v2 >= a2)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      v3 = *(unsigned __int16 *)(a1 + 138);
      v4 = *(float *)(a1 + 132);
      if (v4 <= a2)
        LOWORD(v3) = v3 - 1;
      else
        v3 = (int)(float)((float)((float)(a2 - v2) / (float)(v4 - v2)) * (float)v3);
    }
    LOWORD(result) = v3;
  }
  else
  {
    LOWORD(result) = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  return (unsigned __int16)result;
}

BOOL re::Spline<float>::areKnotsNormalized(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  float v3;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = *(float **)(a1 + 80);
    if (fabsf(*v2) < 0.00001)
    {
      v3 = v2[v1 - 1];
      return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
    }
    return 0;
  }
  if (fabsf(*(float *)(a1 + 128)) >= 0.00001)
    return 0;
  v3 = *(float *)(a1 + 132);
  return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
}

uint64_t re::Spline<float>::normalizeKnots(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  float *v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float *v8;

  v1 = *(_QWORD *)(result + 64);
  v2 = v1 - 2;
  if (v1 >= 2)
  {
    v3 = *(float **)(result + 80);
    v4 = *v3;
    v5 = v1 - 1;
    v6 = v3[v5];
    *v3 = 0.0;
    if (v5 >= 2)
    {
      v7 = v6 - v4;
      v8 = v3 + 1;
      do
      {
        *v8 = (float)(*v8 - v4) / v7;
        ++v8;
        --v2;
      }
      while (v2);
    }
    v3[v5] = 1.0;
  }
  return result;
}

uint64_t re::Spline<float>::setNonUniformKnots(uint64_t a1)
{
  unsigned int v2;

  *(_BYTE *)(a1 + 136) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::DynamicArray<float>::resize(a1 + 48, v2 + 1);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  return 1;
}

uint64_t re::Spline<float>::setNonUniformKnots(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;

  *(_BYTE *)(a1 + 136) = 0;
  re::DynamicArray<float>::operator=(a1 + 48, a2);
  v4 = a2[2];
  if (!v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = (_DWORD *)a2[4];
  *(_DWORD *)(a1 + 128) = *v5;
  *(_DWORD *)(a1 + 132) = v5[v4 - 1];
  return 1;
}

uint64_t re::Spline<float>::setNonUniformKnotAtIndex(uint64_t a1, unsigned int a2, float a3)
{
  if (*(_QWORD *)(a1 + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(_QWORD *)(a1 + 80) + 4 * a2) = a3;
  return 1;
}

uint64_t re::Spline<float>::setUniformKnots(uint64_t result, float a2, float a3)
{
  *(_BYTE *)(result + 136) = 1;
  *(_QWORD *)(result + 64) = 0;
  ++*(_DWORD *)(result + 72);
  *(float *)(result + 128) = a2;
  *(float *)(result + 132) = a3;
  return result;
}

float re::BezierSpline<float>::evaluateAt(uint64_t a1, float a2)
{
  float v3;
  unsigned int v4;
  float v5;
  float v6;
  unint64_t v7;
  unint64_t NonUniformSpan;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      v7 = 0;
    }
    else
    {
      v4 = *(unsigned __int16 *)(a1 + 138);
      v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        v7 = 0x3F80000000000000;
      }
      else
      {
        v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        v4 = (int)v6;
        v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpan = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  v9 = (unsigned __int16)(3 * NonUniformSpan);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 <= v9)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v11 = (v9 + 1);
  if (v10 <= v11)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v12 = (v9 + 2);
  if (v10 <= v12)
  {
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = (v9 + 3);
  if (v10 <= v13)
    goto LABEL_17;
  v14 = *(_QWORD *)(a1 + 40);
  return (float)((float)((float)((float)((float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                                       * (float)(1.0 - *((float *)&NonUniformSpan + 1)))
                                               * 3.0)
                                       * *((float *)&NonUniformSpan + 1))
                               * *(float *)(v14 + 4 * v11))
                       + (float)(*(float *)(v14 + 4 * v9)
                               * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                       * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                               * (float)(1.0 - *((float *)&NonUniformSpan + 1))))))
               + (float)(*(float *)(v14 + 4 * v12)
                       * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                               * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))))
       + (float)(*(float *)(v14 + 4 * v13)
               * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                       * *((float *)&NonUniformSpan + 1)));
}

float re::BezierSpline<float>::evaluateDerivativeAt(uint64_t a1, int a2, float a3)
{
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unint64_t v10;
  unint64_t NonUniformSpan;
  float v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  unint64_t v34;

  if (*(_BYTE *)(a1 + 136))
  {
    v5 = *(unsigned __int16 *)(a1 + 138);
    v6 = *(float *)(a1 + 128);
    v7 = *(float *)(a1 + 132);
    if (v6 >= a3)
    {
      LOWORD(v9) = 0;
      v10 = 0;
    }
    else if (v7 <= a3)
    {
      LOWORD(v9) = v5 - 1;
      v10 = 0x3F80000000000000;
    }
    else
    {
      v8 = (float)((float)(a3 - v6) / (float)(v7 - v6)) * (float)v5;
      v9 = (int)v8;
      v10 = (unint64_t)COERCE_UNSIGNED_INT(v8 - (float)(int)v8) << 32;
    }
    v12 = (float)v5 / (float)(v7 - v6);
    NonUniformSpan = v10 | (unsigned __int16)v9;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a3);
  }
  switch(a2)
  {
    case 0:
      v13 = *(_QWORD *)(a1 + 24);
      if (v13 <= (unsigned __int16)(3 * NonUniformSpan))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_31;
      }
      v14 = (unsigned __int16)(3 * NonUniformSpan);
      v15 = (v14 + 1);
      if (v13 <= v15)
      {
LABEL_31:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_32;
      }
      v16 = (v14 + 2);
      if (v13 <= v16)
      {
LABEL_32:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v17 = (v14 + 3);
      if (v13 <= v17)
        goto LABEL_33;
      v18 = *(_QWORD *)(a1 + 40);
      return (float)((float)((float)((float)((float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                                           * (float)(1.0 - *((float *)&NonUniformSpan + 1)))
                                                   * 3.0)
                                           * *((float *)&NonUniformSpan + 1))
                                   * *(float *)(v18 + 4 * v15))
                           + (float)(*(float *)(v18 + 4 * (unsigned __int16)(3 * NonUniformSpan))
                                   * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                           * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                                   * (float)(1.0 - *((float *)&NonUniformSpan + 1))))))
                   + (float)(*(float *)(v18 + 4 * v16)
                           * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                                   * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))))
           + (float)(*(float *)(v18 + 4 * v17)
                   * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                           * *((float *)&NonUniformSpan + 1)));
    case 1:
      v20 = (unsigned __int16)(3 * NonUniformSpan);
      v21 = (v20 + 1);
      v22 = *(_QWORD *)(a1 + 24);
      if (v22 <= v21)
        goto LABEL_28;
      v23 = (v20 + 2);
      if (v22 <= v23)
        goto LABEL_34;
      v24 = (v20 + 3);
      if (v22 <= v24)
        goto LABEL_35;
      v25 = *(_QWORD *)(a1 + 40);
      v26 = v12 * 3.0;
      v27 = (float)((float)((float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                          + (float)(1.0 - *((float *)&NonUniformSpan + 1)))
                                  * *((float *)&NonUniformSpan + 1))
                          * (float)(*(float *)(v25 + 4 * v23) - *(float *)(v25 + 4 * v21)))
                  + (float)((float)(*(float *)(v25 + 4 * v21)
                                  - *(float *)(v25 + 4 * (unsigned __int16)(3 * NonUniformSpan)))
                          * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                  * (float)(1.0 - *((float *)&NonUniformSpan + 1)))))
          + (float)((float)(*(float *)(v25 + 4 * v24) - *(float *)(v25 + 4 * v23))
                  * (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1)));
      return v26 * v27;
    case 2:
      v28 = (unsigned __int16)(3 * NonUniformSpan);
      v29 = (v28 + 2);
      v30 = *(_QWORD *)(a1 + 24);
      if (v30 <= v29)
        goto LABEL_29;
      v31 = (v28 + 3);
      if (v30 <= v31)
        goto LABEL_36;
      v26 = (float)(v12 * 6.0) * v12;
      v32 = *(_QWORD *)(a1 + 40);
      v33 = *(float *)(v32 + 4 * (v28 + 1));
      v27 = (float)((float)(v33 + (float)(*(float *)(v32 + 4 * v31) + (float)(*(float *)(v32 + 4 * v29) * -2.0)))
                  * *((float *)&NonUniformSpan + 1))
          + (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                  * (float)((float)(*(float *)(v32 + 4 * v29) + (float)(v33 * -2.0))
                          + *(float *)(v32 + 4 * (unsigned __int16)(3 * NonUniformSpan))));
      return v26 * v27;
    case 3:
      v34 = (unsigned __int16)(3 * NonUniformSpan) + 3;
      if (*(_QWORD *)(a1 + 24) <= v34)
        goto LABEL_30;
      return (float)((float)((float)(v12 * 6.0) * v12) * v12)
           * (float)((float)((float)(*(float *)(*(_QWORD *)(a1 + 40) + 4 * v34)
                                   + (float)(*(float *)(*(_QWORD *)(a1 + 40)
                                                      + 4 * ((unsigned __int16)(3 * NonUniformSpan) + 2))
                                           * -3.0))
                           + (float)(*(float *)(*(_QWORD *)(a1 + 40)
                                              + 4 * ((unsigned __int16)(3 * NonUniformSpan) + 1))
                                   * 3.0))
                   - *(float *)(*(_QWORD *)(a1 + 40) + 4 * (unsigned __int16)(3 * NonUniformSpan)));
    default:
      return 0.0;
  }
}

float re::BezierSpline<float>::evaluateLengthAt(uint64_t a1, float a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned __int16 NonUniformSpan;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;

  if (*(_BYTE *)(a1 + 136))
  {
    v4 = *(float *)(a1 + 128);
    if (v4 >= a2)
    {
      LOWORD(v5) = 0;
    }
    else
    {
      v5 = *(unsigned __int16 *)(a1 + 138);
      v6 = *(float *)(a1 + 132);
      if (v6 <= a2)
        LOWORD(v5) = v5 - 1;
      else
        v5 = (int)(float)((float)((float)(a2 - v4) / (float)(v6 - v4)) * (float)v5);
    }
    NonUniformSpan = v5;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  v8 = *(_QWORD *)(a1 + 104);
  if (!v8)
  {
    if (NonUniformSpan)
    {
      v11 = 0;
      v10 = 0.0;
      do
      {
        v10 = v10 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v11);
        v11 = (v11 + 1);
      }
      while (NonUniformSpan != (_DWORD)v11);
      goto LABEL_18;
    }
LABEL_17:
    v10 = 0.0;
    goto LABEL_18;
  }
  if (!NonUniformSpan)
    goto LABEL_17;
  v9 = NonUniformSpan - 1;
  if (v8 <= v9)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(float *)(*(_QWORD *)(a1 + 120) + 4 * v9);
LABEL_18:
  v12 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, NonUniformSpan);
  v13 = 0;
  v14 = qword_255803708;
  v15 = (float)(v12 + a2) * 0.5;
  v16 = (float)(a2 - v12) * 0.5;
  v17 = 0.0;
  do
  {
    v17 = v17
        + (float)(*(float *)(v14 + v13 + 4)
                * fabsf((*(float (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 128))(a1, 1, v15 + (float)(v16 * *(float *)(v14 + v13)))));
    v13 += 8;
  }
  while (v13 != 128);
  return v10 + (float)(v16 * v17);
}

uint64_t re::BezierSpline<float>::calculateMonomialBasisForSpan(uint64_t a1, __int16 a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = (unsigned __int16)(3 * a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  v5 = (unsigned __int16)(3 * a2);
  v6 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)a3 = *(_DWORD *)(v6 + 4 * v3);
  v7 = (v5 + 1);
  if (v4 <= v7)
  {
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  *(float *)(a3 + 4) = (float)(*(float *)(v6 + 4 * v7) - *(float *)(v6 + 4 * v3)) * 3.0;
  v8 = (v5 + 2);
  if (v4 <= v8)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(a3 + 8) = (float)((float)(*(float *)(v6 + 4 * v3) + (float)(*(float *)(v6 + 4 * v7) * -2.0))
                             + *(float *)(v6 + 4 * v8))
                     * 3.0;
  v9 = (v5 + 3);
  if (v4 <= v9)
    goto LABEL_9;
  *(float *)(a3 + 12) = (float)(*(float *)(v6 + 4 * v9)
                              + (float)((float)(*(float *)(v6 + 4 * v7) - *(float *)(v6 + 4 * v8)) * 3.0))
                      - *(float *)(v6 + 4 * v3);
  return 4;
}

float re::BezierSpline<float>::evaluateSpanLength(uint64_t a1, unsigned __int16 a2)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;

  v4 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2);
  v5 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, (unsigned __int16)(a2 + 1));
  v6 = 0;
  v7 = qword_255803708;
  v8 = (float)(v4 + v5) * 0.5;
  v9 = (float)(v5 - v4) * 0.5;
  v10 = 0.0;
  do
  {
    v10 = v10
        + (float)(*(float *)(v7 + v6 + 4)
                * fabsf((*(float (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 128))(a1, 1, v8 + (float)(v9 * *(float *)(v7 + v6)))));
    v6 += 8;
  }
  while (v6 != 128);
  return v9 * v10;
}

uint64_t re::Spline<float>::~Spline(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8A060;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::SpatialCurve<re::Vector2<float>>::addSpline(re *a1, uint64_t a2, unsigned int a3)
{
  re *v3;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  char *v23;
  unsigned __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t *v43;
  float v44;
  float *v45;
  float v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t *v49;
  float32x2_t v50;
  float32x2_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  int v69;
  int v70;
  unsigned __int16 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 v75;
  uint64_t v76;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  uint64_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float v92;
  unsigned int v93;
  unint64_t v94;
  float v95;
  float v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  __int16 v101;
  _anonymous_namespace_ *v102;
  float v103;
  unint64_t v104;
  float v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v114;
  uint64_t v115;
  float v116;
  re *v117;

  if (*((_QWORD *)a1 + 18) <= (unint64_t)a2)
  {
LABEL_112:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
  v3 = a1;
  v5 = a2;
  v112 = a2;
  v6 = (uint64_t)a1 + 128;
  switch(*(_DWORD *)(*((_QWORD *)a1 + 20) + 32 * a2))
  {
    case 0:
      v7 = re::globalAllocators(a1);
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 144, 8);
      *(_OWORD *)(v8 + 1) = 0u;
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + 9) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + 13) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((_BYTE *)v8 + 136) = 1;
      *v8 = &off_24ED8A110;
      v9 = a3 - v5;
      if (v9)
      {
        v10 = (unsigned __int16)v9 + 1;
        re::DynamicArray<unsigned long>::resize((uint64_t)(v8 + 1), v10);
        *((_WORD *)v8 + 69) = v9;
        if (!*((_BYTE *)v8 + 136))
          re::DynamicArray<float>::resize((uint64_t)(v8 + 6), (unsigned __int16)v9 + 1);
      }
      else
      {
        *((_DWORD *)v8 + 8) = 1;
        *((_WORD *)v8 + 69) = 0;
        v10 = 1;
      }
      v23 = (char *)v3 + 88;
      re::DynamicArray<float>::resize((uint64_t)v3 + 88, v10);
      v24 = 0;
      while (1)
      {
        v25 = v112 + v24;
        if (*((_QWORD *)v3 + 18) <= v25)
          goto LABEL_92;
        v26 = v24;
        if (v8[3] <= (unint64_t)v24)
          goto LABEL_93;
        v27 = *((_QWORD *)v3 + 20) + 32 * v25;
        *(_QWORD *)(v8[5] + 8 * v26) = *(_QWORD *)(v27 + 8);
        if (*((_QWORD *)v3 + 13) <= v26)
          goto LABEL_94;
        *(_DWORD *)(*((_QWORD *)v3 + 15) + 4 * v26) = *(_DWORD *)(v27 + 4);
        v24 = v26 + 1;
        if ((unsigned __int16)(v26 + 1) > (unsigned __int16)v9)
          goto LABEL_41;
      }
    case 1:
      v20 = re::globalAllocators(a1);
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 144, 8);
      *(_OWORD *)(v8 + 1) = 0u;
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + 9) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + 13) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((_BYTE *)v8 + 136) = 1;
      *v8 = &off_24ED8A298;
      v21 = a3 - v5;
      if (v21)
      {
        re::DynamicArray<unsigned long>::resize((uint64_t)(v8 + 1), (unsigned __int16)(3 * v21 + 1));
        *((_WORD *)v8 + 69) = v21;
        if (!*((_BYTE *)v8 + 136))
          re::DynamicArray<float>::resize((uint64_t)(v8 + 6), (unsigned __int16)v21 + 1);
      }
      else
      {
        *((_DWORD *)v8 + 8) = 1;
        *((_WORD *)v8 + 69) = 0;
      }
      v23 = (char *)v3 + 88;
      re::DynamicArray<float>::resize((uint64_t)v3 + 88, (unsigned __int16)v21 + 1);
      v28 = *((_QWORD *)v3 + 18);
      if (v28 <= v112)
        goto LABEL_116;
      if (!*((_QWORD *)v3 + 13))
        goto LABEL_118;
      **((_DWORD **)v3 + 15) = *(_DWORD *)(*((_QWORD *)v3 + 20) + 32 * v112 + 4);
      if (a3 == v5)
      {
        v29 = 0;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        __asm
        {
          FMOV            V0.2S, #3.0
          FMOV            V1.2S, #-3.0
        }
        do
        {
          v38 = (unsigned __int16)(v30 + v5);
          v39 = *((_QWORD *)v3 + 18);
          if (v39 <= v38)
            goto LABEL_99;
          v40 = v38 + 1;
          if (v39 <= v38 + 1)
            goto LABEL_100;
          v41 = v30 + 1;
          if (*((_QWORD *)v3 + 13) <= (unint64_t)(v30 + 1))
            goto LABEL_101;
          v42 = *((_QWORD *)v3 + 20);
          v43 = (float32x2_t *)(v42 + 32 * v40);
          v44 = v43->f32[1];
          v45 = (float *)(*((_QWORD *)v3 + 15) + 4 * v30);
          v45[1] = v44;
          v46 = v44 - *v45;
          if (v8[3] <= (unint64_t)v31)
            goto LABEL_102;
          v47 = v43[2];
          v48 = (float32x2_t *)(v42 + 32 * v38);
          v50 = v48[1];
          v49 = v48 + 1;
          v51 = v49[2];
          *(float32x2_t *)(v8[5] + 8 * v31) = v50;
          if (v8[3] <= (unint64_t)(unsigned __int16)(v31 + 1))
            goto LABEL_103;
          *(float32x2_t *)(v8[5] + 8 * (unsigned __int16)(v31 + 1)) = vadd_f32(vdiv_f32(vmul_n_f32(v51, v46), _D0), *v49);
          v52 = (unsigned __int16)(v31 + 2);
          if (v8[3] <= v52)
            goto LABEL_104;
          v31 += 3;
          *(float32x2_t *)(v8[5] + 8 * v52) = vadd_f32(*(float32x2_t *)(v42 + 32 * v40 + 8), vdiv_f32(vmul_n_f32(v47, v46), _D1));
          v30 = v41;
        }
        while ((unsigned __int16)v21 != v41);
        v28 = *((_QWORD *)v3 + 18);
        v29 = v31;
      }
      if (v28 <= a3)
        goto LABEL_129;
      if (v8[3] <= v29)
        goto LABEL_130;
      *(_QWORD *)(v8[5] + 8 * v29) = *(_QWORD *)(*((_QWORD *)v3 + 20) + 32 * a3 + 8);
LABEL_41:
      (*(void (**)(_QWORD *, char *))(*v8 + 96))(v8, v23);
      goto LABEL_70;
    case 2:
      v11 = re::globalAllocators(a1);
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 144, 8);
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 13) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + 9) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 1) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((_BYTE *)v8 + 136) = 1;
      *v8 = &off_24ED8A298;
      *((_WORD *)v3 + 282) = v5;
      v12 = (uint64_t)v3 + 520;
      *((_QWORD *)v3 + 71) = v6;
      v13 = a3 - v5;
      v14 = a3 - v5 + 3;
      *((_WORD *)v3 + 283) = a3;
      v114 = (uint64_t)v3 + 360;
      re::DynamicArray<unsigned long>::resize((uint64_t)v3 + 360, v14);
      re::DynamicArray<float>::resize((uint64_t)v3 + 520, v14);
      v15 = *((_QWORD *)v3 + 71);
      v16 = *((unsigned __int16 *)v3 + 282);
      v17 = *(_QWORD *)(v15 + 16);
      if (v17 <= v16)
        goto LABEL_115;
      if (v17 <= v16 + 1)
        goto LABEL_117;
      if (!*((_QWORD *)v3 + 47))
        goto LABEL_119;
      **((float32x2_t **)v3 + 49) = vsub_f32(vadd_f32(*(float32x2_t *)(*(_QWORD *)(v15 + 32) + 32 * v16 + 8), *(float32x2_t *)(*(_QWORD *)(v15 + 32) + 32 * v16 + 8)), *(float32x2_t *)(*(_QWORD *)(v15 + 32) + 32 * (v16 + 1) + 8));
      if (!*((_QWORD *)v3 + 67))
        goto LABEL_120;
      **((_DWORD **)v3 + 69) = 0;
      v18 = re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(v114, 0);
      if (*((_QWORD *)v3 + 67) <= 1uLL)
        goto LABEL_121;
      *(float *)(*((_QWORD *)v3 + 69) + 4) = v18;
      if (a3 != v5)
      {
        v53 = 0;
        v19 = v13;
        while (1)
        {
          v54 = *((_QWORD *)v3 + 71);
          v55 = v53 + *((unsigned __int16 *)v3 + 282);
          if (*(_QWORD *)(v54 + 16) <= v55)
            goto LABEL_95;
          v56 = v53 + 1;
          v57 = (v53 + 1);
          if (*((_QWORD *)v3 + 47) <= v57)
            goto LABEL_96;
          *(_QWORD *)(*((_QWORD *)v3 + 49) + 8 * v57) = *(_QWORD *)(*(_QWORD *)(v54 + 32) + 32 * v55 + 8);
          if (*((_QWORD *)v3 + 67) <= v57)
            goto LABEL_97;
          v58 = *(float *)(*((_QWORD *)v3 + 69) + 4 * v57);
          v59 = re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(v114, (unsigned __int16)v53);
          v60 = (v53 + 2);
          if (*((_QWORD *)v3 + 67) <= v60)
            goto LABEL_98;
          *(float *)(*((_QWORD *)v3 + 69) + 4 * v60) = v58 + v59;
          ++v53;
          if (v13 == v56)
            goto LABEL_48;
        }
      }
      v19 = 0;
LABEL_48:
      v61 = *((_QWORD *)v3 + 71);
      v62 = v19 + *((unsigned __int16 *)v3 + 282);
      if (*(_QWORD *)(v61 + 16) <= v62)
        goto LABEL_122;
      v63 = v14 - 2;
      if (*((_QWORD *)v3 + 47) <= v63)
      {
LABEL_123:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_124;
      }
      *(_QWORD *)(*((_QWORD *)v3 + 49) + 8 * v63) = *(_QWORD *)(*(_QWORD *)(v61 + 32) + 32 * v62 + 8);
      v64 = *((_QWORD *)v3 + 47);
      if (v64 <= v63)
      {
LABEL_124:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_125;
      }
      v65 = v14 - 3;
      if (v64 <= v65)
      {
LABEL_125:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_126;
      }
      v66 = v14 - 1;
      if (v64 <= v66)
      {
LABEL_126:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_127;
      }
      *(float32x2_t *)(*((_QWORD *)v3 + 49) + 8 * v66) = vsub_f32(vadd_f32(*(float32x2_t *)(*((_QWORD *)v3 + 49) + 8 * v63), *(float32x2_t *)(*((_QWORD *)v3 + 49) + 8 * v63)), *(float32x2_t *)(*((_QWORD *)v3 + 49) + 8 * v65));
      if (*((_QWORD *)v3 + 67) <= v63)
      {
LABEL_127:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_128;
      }
      v67 = *(float *)(*((_QWORD *)v3 + 69) + 4 * v63);
      v68 = re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(v114, (unsigned __int16)(v13 - 1));
      if (*((_QWORD *)v3 + 67) <= v66)
      {
LABEL_128:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_129:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_130:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_131:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_132:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(float *)(*((_QWORD *)v3 + 69) + 4 * v66) = v67 + v68;
      v69 = *((unsigned __int16 *)v3 + 283);
      v117 = v3;
      v70 = *((unsigned __int16 *)v3 + 282);
      (*(void (**)(_QWORD *, _QWORD))(*v8 + 16))(v8, (unsigned __int16)(v69 - v70));
      v71 = v69 - v70;
      if (v69 == v70)
      {
        v72 = 0;
        v73 = v71;
      }
      else
      {
        v111 = (uint64_t)v3 + 520;
        v74 = 0;
        v75 = 0;
        v73 = (unsigned __int16)(v69 - v70);
        v76 = 8;
        __asm
        {
          FMOV            V9.2S, #3.0
          FMOV            V10.2S, #-3.0
        }
        do
        {
          v79 = *((_QWORD *)v117 + 67);
          if (v79 <= v74 + 1)
            goto LABEL_105;
          if (v79 <= v74 + 2)
            goto LABEL_106;
          v80 = *((_QWORD *)v117 + 47);
          if (v80 <= v74 + 1)
            goto LABEL_107;
          if (v80 <= v74 + 2)
            goto LABEL_108;
          v115 = v74 + 1;
          v81 = *((_QWORD *)v117 + 69);
          v82 = v81 + 4 * v74;
          v83 = *(float *)(v82 + 4);
          v84 = *(float *)(v82 + 8);
          v85 = *((_QWORD *)v117 + 49);
          v116 = v84 - v83;
          re::internal::CubicInterpolant<re::Vector2<float>>::evaluateCatmullRomDerivative(v79, v81, v80, v85, (unsigned __int16)v74, v83);
          v87 = v86;
          re::internal::CubicInterpolant<re::Vector2<float>>::evaluateCatmullRomDerivative(*((_QWORD *)v117 + 67), *((_QWORD *)v117 + 69), *((_QWORD *)v117 + 47), *((_QWORD *)v117 + 49), (unsigned __int16)v74, v84);
          if (v8[3] <= (unint64_t)v75)
            goto LABEL_109;
          *(_QWORD *)(v8[5] + 8 * v75) = *(_QWORD *)(v85 + v76);
          if (v8[3] <= (unint64_t)(unsigned __int16)(v75 + 1))
            goto LABEL_110;
          *(float32x2_t *)(v8[5] + 8 * (unsigned __int16)(v75 + 1)) = vadd_f32(vdiv_f32(vmul_n_f32(v87, v116), _D9), *(float32x2_t *)(v85 + v76));
          v89 = (unsigned __int16)(v75 + 2);
          if (v8[3] <= v89)
            goto LABEL_111;
          v75 += 3;
          *(float32x2_t *)(v8[5] + 8 * v89) = vadd_f32(*(float32x2_t *)(v85 + 8 * v74 + 16), vdiv_f32(vmul_n_f32(v88, v116), _D10));
          v76 += 8;
          ++v74;
        }
        while (v73 != v115);
        v72 = v75;
        v12 = v111;
      }
      v90 = *((_QWORD *)v117 + 71);
      v91 = v73 + *((unsigned __int16 *)v117 + 282);
      if (*(_QWORD *)(v90 + 16) <= v91)
        goto LABEL_131;
      if (v8[3] <= v72)
        goto LABEL_132;
      *(_QWORD *)(v8[5] + 8 * v72) = *(_QWORD *)(*(_QWORD *)(v90 + 32) + 32 * v91 + 8);
      v92 = re::internal::CubicInterpolant<re::Vector2<float>>::setKnotsToKeyKnots(v114, v12);
      (*(void (**)(_QWORD *, uint64_t, float))(*v8 + 96))(v8, v12, v92);
      v3 = v117;
LABEL_70:
      v93 = (*(uint64_t (**)(_QWORD *))(*v8 + 40))(v8);
      re::DynamicArray<float>::resize((uint64_t)(v8 + 11), v93);
      if (v93)
      {
        v94 = 0;
        v95 = 0.0;
        while (1)
        {
          (*(void (**)(_QWORD *, unint64_t))(*v8 + 152))(v8, v94);
          if (v8[13] <= v94)
            break;
          v95 = v95 + v96;
          *(float *)(v8[15] + 4 * v94++) = v95;
          if (v93 == v94)
            goto LABEL_74;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_92:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_93:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_94:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_95:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_96:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_97:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_98:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_99:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_100:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_101:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_102:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_103:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_104:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_106:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_107:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_110:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_111:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_112;
      }
LABEL_74:
      v97 = *((_QWORD *)v3 + 18);
      if (v97 <= v112)
      {
LABEL_113:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_114:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_115:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_116:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_123;
      }
      if (v97 <= a3)
        goto LABEL_114;
      v98 = *((_QWORD *)v3 + 20);
      v99 = *(_DWORD *)(v98 + 32 * v112 + 4);
      v100 = *(_DWORD *)(v98 + 32 * a3 + 4);
      v101 = (*(uint64_t (**)(_QWORD *))(*v8 + 48))(v8);
      (*(void (**)(_QWORD *, _QWORD))(*v8 + 56))(v8, (unsigned __int16)(v101 - 1));
      v103 = (*(float (**)(_QWORD *))(*v8 + 136))(v8);
      v104 = *((_QWORD *)v3 + 23);
      if (v104)
        v105 = *(float *)(*((_QWORD *)v3 + 25) + 24 * v104 - 8);
      else
        v105 = 0.0;
      v106 = *((_QWORD *)v3 + 22);
      if (v104 >= v106)
      {
        v107 = v104 + 1;
        if (v106 < v104 + 1)
        {
          if (*((_QWORD *)v3 + 21))
          {
            v108 = 2 * v106;
            if (!v106)
              v108 = 8;
            if (v108 <= v107)
              v109 = v107;
            else
              v109 = v108;
            re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3 + 21, v109);
          }
          else
          {
            re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)v3 + 21, v107);
            ++*((_DWORD *)v3 + 48);
          }
        }
        v104 = *((_QWORD *)v3 + 23);
      }
      v110 = *((_QWORD *)v3 + 25) + 24 * v104;
      *(_QWORD *)v110 = v8;
      *(_DWORD *)(v110 + 8) = v99;
      *(_DWORD *)(v110 + 12) = v100;
      *(float *)(v110 + 16) = v103 + v105;
      *((_QWORD *)v3 + 23) = v104 + 1;
      ++*((_DWORD *)v3 + 48);
      return;
    case 3:
      v22 = re::globalAllocators(a1);
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[2] + 32))(v22[2], 144, 8);
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 1) = 0u;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + 9) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((_BYTE *)v8 + 136) = 1;
      *v8 = &off_24ED8A298;
      *(_OWORD *)(v8 + 13) = 0u;
      re::internal::CubicInterpolant<re::Vector2<float>>::interpolateNaturalSpline((uint64_t)v3 + 360, v6, v5, a3, v8);
      goto LABEL_70;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unrecognized key type.", "!\"Unreachable code\"", "addSpline", 341);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225D5C8ACLL);
  }
}

void re::LinearSpline<re::Vector2<float>>::~LinearSpline(uint64_t a1)
{
  re::Spline<re::Vector2<float>>::~Spline(a1);
  JUMPOUT(0x2276933B8);
}

void re::LinearSpline<re::Vector2<float>>::resizeSpans(uint64_t a1, unsigned int a2)
{
  __int16 v3;
  unint64_t v4;

  if (a2)
  {
    v3 = a2;
    v4 = a2 + 1;
    re::DynamicArray<unsigned long>::resize(a1 + 8, v4);
    *(_WORD *)(a1 + 138) = v3;
    if (!*(_BYTE *)(a1 + 136))
      re::DynamicArray<float>::resize(a1 + 48, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    ++*(_DWORD *)(a1 + 32);
    *(_WORD *)(a1 + 138) = 0;
    if (!*(_BYTE *)(a1 + 136))
    {
      *(_QWORD *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
  }
}

_QWORD *re::LinearSpline<re::Vector2<float>>::reserveSpans(_QWORD *result, unsigned int a2)
{
  if (result[2] <= (unint64_t)a2)
    return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 1, a2 + 1);
  return result;
}

uint64_t re::LinearSpline<re::Vector2<float>>::degree()
{
  return 1;
}

uint64_t re::LinearSpline<re::Vector2<float>>::spanCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t re::Spline<re::Vector2<float>>::knotCount(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
    return (unsigned __int16)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 1);
  else
    return 0;
}

uint64_t re::Spline<re::Vector2<float>>::knotAtIndex(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if (*(_BYTE *)(result + 136))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if ((_DWORD)result != a2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  else if (*(_QWORD *)(result + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::LinearSpline<re::Vector2<float>>::findSpanIndex(uint64_t a1, float a2)
{
  float v2;
  unsigned int v3;
  float v4;
  uint64_t result;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(float *)(a1 + 128);
    if (v2 >= a2)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      v3 = *(unsigned __int16 *)(a1 + 138);
      v4 = *(float *)(a1 + 132);
      if (v4 <= a2)
        LOWORD(v3) = v3 - 1;
      else
        v3 = (int)(float)((float)((float)(a2 - v2) / (float)(v4 - v2)) * (float)v3);
    }
    LOWORD(result) = v3;
  }
  else
  {
    LOWORD(result) = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  return (unsigned __int16)result;
}

BOOL re::Spline<re::Vector2<float>>::areKnotsNormalized(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  float v3;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = *(float **)(a1 + 80);
    if (fabsf(*v2) < 0.00001)
    {
      v3 = v2[v1 - 1];
      return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
    }
    return 0;
  }
  if (fabsf(*(float *)(a1 + 128)) >= 0.00001)
    return 0;
  v3 = *(float *)(a1 + 132);
  return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
}

uint64_t re::Spline<re::Vector2<float>>::normalizeKnots(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  float *v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float *v8;

  v1 = *(_QWORD *)(result + 64);
  v2 = v1 - 2;
  if (v1 >= 2)
  {
    v3 = *(float **)(result + 80);
    v4 = *v3;
    v5 = v1 - 1;
    v6 = v3[v5];
    *v3 = 0.0;
    if (v5 >= 2)
    {
      v7 = v6 - v4;
      v8 = v3 + 1;
      do
      {
        *v8 = (float)(*v8 - v4) / v7;
        ++v8;
        --v2;
      }
      while (v2);
    }
    v3[v5] = 1.0;
  }
  return result;
}

uint64_t re::Spline<re::Vector2<float>>::setNonUniformKnots(uint64_t a1)
{
  unsigned int v2;

  *(_BYTE *)(a1 + 136) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::DynamicArray<float>::resize(a1 + 48, v2 + 1);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  return 1;
}

uint64_t re::Spline<re::Vector2<float>>::setNonUniformKnots(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;

  *(_BYTE *)(a1 + 136) = 0;
  re::DynamicArray<float>::operator=(a1 + 48, a2);
  v4 = a2[2];
  if (!v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = (_DWORD *)a2[4];
  *(_DWORD *)(a1 + 128) = *v5;
  *(_DWORD *)(a1 + 132) = v5[v4 - 1];
  return 1;
}

uint64_t re::Spline<re::Vector2<float>>::setNonUniformKnotAtIndex(uint64_t a1, unsigned int a2, float a3)
{
  if (*(_QWORD *)(a1 + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(_QWORD *)(a1 + 80) + 4 * a2) = a3;
  return 1;
}

uint64_t re::Spline<re::Vector2<float>>::setUniformKnots(uint64_t result, float a2, float a3)
{
  *(_BYTE *)(result + 136) = 1;
  *(_QWORD *)(result + 64) = 0;
  ++*(_DWORD *)(result + 72);
  *(float *)(result + 128) = a2;
  *(float *)(result + 132) = a3;
  return result;
}

float32x2_t re::LinearSpline<re::Vector2<float>>::evaluateAt(uint64_t a1, float a2)
{
  float v3;
  unsigned int v4;
  float v5;
  float v6;
  unint64_t v7;
  unint64_t NonUniformSpan;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      v7 = 0;
    }
    else
    {
      v4 = *(unsigned __int16 *)(a1 + 138);
      v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        v7 = 0x3F80000000000000;
      }
      else
      {
        v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        v4 = (int)v6;
        v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpan = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 <= (unsigned __int16)NonUniformSpan)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v9 <= (unint64_t)(unsigned __int16)NonUniformSpan + 1)
    goto LABEL_13;
  return vadd_f32(vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * (unsigned __int16)NonUniformSpan), 1.0 - *((float *)&NonUniformSpan + 1)), vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * ((unsigned __int16)NonUniformSpan + 1)), *((float *)&NonUniformSpan + 1)));
}

float32x2_t re::LinearSpline<re::Vector2<float>>::evaluateDerivativeAt(uint64_t a1, int a2, float a3)
{
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unint64_t v10;
  unint64_t NonUniformSpan;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float32x2_t result;

  if (*(_BYTE *)(a1 + 136))
  {
    v5 = *(unsigned __int16 *)(a1 + 138);
    v6 = *(float *)(a1 + 128);
    v7 = *(float *)(a1 + 132);
    if (v6 >= a3)
    {
      LOWORD(v9) = 0;
      v10 = 0;
    }
    else if (v7 <= a3)
    {
      LOWORD(v9) = v5 - 1;
      v10 = 0x3F80000000000000;
    }
    else
    {
      v8 = (float)((float)(a3 - v6) / (float)(v7 - v6)) * (float)v5;
      v9 = (int)v8;
      v10 = (unint64_t)COERCE_UNSIGNED_INT(v8 - (float)(int)v8) << 32;
    }
    v12 = (float)v5 / (float)(v7 - v6);
    NonUniformSpan = v10 | (unsigned __int16)v9;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a3);
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v13 <= (unsigned __int16)NonUniformSpan)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = (unsigned __int16)NonUniformSpan + 1;
  if (v13 <= v14)
    goto LABEL_17;
  v15 = *(_QWORD *)(a1 + 40);
  if (a2 == 1)
  {
    return vmul_n_f32(vsub_f32(*(float32x2_t *)(v15 + 8 * v14), *(float32x2_t *)(v15 + 8 * (unsigned __int16)NonUniformSpan)), v12);
  }
  else
  {
    result = 0;
    if (!a2)
      return vadd_f32(vmul_n_f32(*(float32x2_t *)(v15 + 8 * (unsigned __int16)NonUniformSpan), 1.0 - *((float *)&NonUniformSpan + 1)), vmul_n_f32(*(float32x2_t *)(v15 + 8 * v14), *((float *)&NonUniformSpan + 1)));
  }
  return result;
}

float re::LinearSpline<re::Vector2<float>>::evaluateLengthAt(uint64_t a1, float a2)
{
  float v3;
  unsigned int v4;
  float v5;
  float v6;
  unint64_t v7;
  unint64_t NonUniformSpan;
  unint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  float32x2_t v14;

  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      v7 = 0;
    }
    else
    {
      v4 = *(unsigned __int16 *)(a1 + 138);
      v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        v7 = 0x3F80000000000000;
      }
      else
      {
        v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        v4 = (int)v6;
        v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpan = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    if ((_WORD)NonUniformSpan)
    {
      v12 = 0;
      v11 = 0.0;
      do
      {
        v11 = v11 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v12);
        v12 = (v12 + 1);
      }
      while ((unsigned __int16)NonUniformSpan != (_DWORD)v12);
      goto LABEL_18;
    }
LABEL_17:
    v11 = 0.0;
    goto LABEL_18;
  }
  if (!(_WORD)NonUniformSpan)
    goto LABEL_17;
  v10 = (unsigned __int16)NonUniformSpan - 1;
  if (v9 <= v10)
    goto LABEL_21;
  v11 = *(float *)(*(_QWORD *)(a1 + 120) + 4 * v10);
LABEL_18:
  v13 = (unsigned __int16)NonUniformSpan + 1;
  if (*(_QWORD *)(a1 + 24) <= v13)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * (unsigned __int16)NonUniformSpan), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v13));
  return v11 + (float)(*((float *)&NonUniformSpan + 1) * sqrtf(vaddv_f32(vmul_f32(v14, v14))));
}

uint64_t re::LinearSpline<re::Vector2<float>>::calculateMonomialBasisForSpan(uint64_t a1, unsigned int a2, float32x2_t *a3)
{
  float32x2_t v3;
  unint64_t v4;

  if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * a2);
  *a3 = v3;
  v4 = a2 + 1;
  if (*(_QWORD *)(a1 + 24) <= v4)
    goto LABEL_5;
  a3[1] = vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v4), v3);
  a3[2] = 0;
  a3[3] = 0;
  return 2;
}

float re::LinearSpline<re::Vector2<float>>::evaluateSpanLength(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  float32x2_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = a2 + 1;
  if (v2 <= v3)
    goto LABEL_5;
  v4 = vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v3), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * a2));
  return sqrtf(vaddv_f32(vmul_f32(v4, v4)));
}

uint64_t re::Spline<re::Vector2<float>>::~Spline(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8A1E8;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::BezierSpline<re::Vector2<float>>::~BezierSpline(uint64_t a1)
{
  re::Spline<re::Vector2<float>>::~Spline(a1);
  JUMPOUT(0x2276933B8);
}

void re::BezierSpline<re::Vector2<float>>::resizeSpans(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    re::DynamicArray<unsigned long>::resize(a1 + 8, (unsigned __int16)(3 * a2 + 1));
    *(_WORD *)(a1 + 138) = a2;
    if (!*(_BYTE *)(a1 + 136))
      re::DynamicArray<float>::resize(a1 + 48, a2 + 1);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    ++*(_DWORD *)(a1 + 32);
    *(_WORD *)(a1 + 138) = 0;
    if (!*(_BYTE *)(a1 + 136))
    {
      *(_QWORD *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
  }
}

_QWORD *re::BezierSpline<re::Vector2<float>>::reserveSpans(_QWORD *result, int a2)
{
  unsigned __int16 v2;

  if (a2)
    v2 = 3 * a2 + 1;
  else
    v2 = 0;
  if (result[2] < (unint64_t)v2)
    return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 1, v2);
  return result;
}

uint64_t re::BezierSpline<re::Vector2<float>>::degree()
{
  return 3;
}

uint64_t re::BezierSpline<re::Vector2<float>>::spanCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t re::BezierSpline<re::Vector2<float>>::findSpanIndex(uint64_t a1, float a2)
{
  float v2;
  unsigned int v3;
  float v4;
  uint64_t result;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(float *)(a1 + 128);
    if (v2 >= a2)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      v3 = *(unsigned __int16 *)(a1 + 138);
      v4 = *(float *)(a1 + 132);
      if (v4 <= a2)
        LOWORD(v3) = v3 - 1;
      else
        v3 = (int)(float)((float)((float)(a2 - v2) / (float)(v4 - v2)) * (float)v3);
    }
    LOWORD(result) = v3;
  }
  else
  {
    LOWORD(result) = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  return (unsigned __int16)result;
}

float32x2_t re::BezierSpline<re::Vector2<float>>::evaluateAt(uint64_t a1, float a2)
{
  float v3;
  unsigned int v4;
  float v5;
  float v6;
  unint64_t v7;
  unint64_t NonUniformSpan;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      v7 = 0;
    }
    else
    {
      v4 = *(unsigned __int16 *)(a1 + 138);
      v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        v7 = 0x3F80000000000000;
      }
      else
      {
        v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        v4 = (int)v6;
        v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpan = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  v9 = (unsigned __int16)(3 * NonUniformSpan);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 <= v9)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v11 = (v9 + 1);
  if (v10 <= v11)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v12 = (v9 + 2);
  if (v10 <= v12)
  {
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = (v9 + 3);
  if (v10 <= v13)
    goto LABEL_17;
  v14 = *(_QWORD *)(a1 + 40);
  return vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v14 + 8 * v9), (float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * (float)(1.0 - *((float *)&NonUniformSpan + 1)))), vmul_n_f32(*(float32x2_t *)(v14 + 8 * v11), (float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)(1.0 - *((float *)&NonUniformSpan + 1)))* 3.0)* *((float *)&NonUniformSpan + 1))), vmul_n_f32(*(float32x2_t *)(v14 + 8 * v12), (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))), vmul_n_f32(*(float32x2_t *)(v14 + 8 * v13), (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
           * *((float *)&NonUniformSpan + 1)));
}

float32x2_t re::BezierSpline<re::Vector2<float>>::evaluateDerivativeAt(uint64_t a1, int a2, float a3)
{
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unint64_t v10;
  unint64_t NonUniformSpan;
  float v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  float32x2_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float32x2_t v34;
  unint64_t v35;

  if (*(_BYTE *)(a1 + 136))
  {
    v5 = *(unsigned __int16 *)(a1 + 138);
    v6 = *(float *)(a1 + 128);
    v7 = *(float *)(a1 + 132);
    if (v6 >= a3)
    {
      LOWORD(v9) = 0;
      v10 = 0;
    }
    else if (v7 <= a3)
    {
      LOWORD(v9) = v5 - 1;
      v10 = 0x3F80000000000000;
    }
    else
    {
      v8 = (float)((float)(a3 - v6) / (float)(v7 - v6)) * (float)v5;
      v9 = (int)v8;
      v10 = (unint64_t)COERCE_UNSIGNED_INT(v8 - (float)(int)v8) << 32;
    }
    v12 = (float)v5 / (float)(v7 - v6);
    NonUniformSpan = v10 | (unsigned __int16)v9;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a3);
  }
  switch(a2)
  {
    case 0:
      v13 = *(_QWORD *)(a1 + 24);
      if (v13 <= (unsigned __int16)(3 * NonUniformSpan))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_31;
      }
      v14 = (unsigned __int16)(3 * NonUniformSpan);
      v15 = (v14 + 1);
      if (v13 <= v15)
      {
LABEL_31:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_32;
      }
      v16 = (v14 + 2);
      if (v13 <= v16)
      {
LABEL_32:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v17 = (v14 + 3);
      if (v13 <= v17)
        goto LABEL_33;
      v18 = *(_QWORD *)(a1 + 40);
      return vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v18 + 8 * (unsigned __int16)(3 * NonUniformSpan)), (float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)(1.0 - *((float *)&NonUniformSpan + 1)))), vmul_n_f32(*(float32x2_t *)(v18 + 8 * v15), (float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)(1.0 - *((float *)&NonUniformSpan + 1)))* 3.0)* *((float *)&NonUniformSpan + 1))), vmul_n_f32(*(float32x2_t *)(v18 + 8 * v16), (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))), vmul_n_f32(*(float32x2_t *)(v18 + 8 * v17),
                 (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
               * *((float *)&NonUniformSpan + 1)));
    case 1:
      v20 = (unsigned __int16)(3 * NonUniformSpan);
      v21 = (v20 + 1);
      v22 = *(_QWORD *)(a1 + 24);
      if (v22 <= v21)
        goto LABEL_28;
      v23 = (v20 + 2);
      if (v22 <= v23)
        goto LABEL_34;
      v24 = (v20 + 3);
      if (v22 <= v24)
        goto LABEL_35;
      v25 = v12 * 3.0;
      v26 = *(_QWORD *)(a1 + 40);
      v27 = 1.0 - *((float *)&NonUniformSpan + 1);
      v28 = vadd_f32(vadd_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 8 * v21), *(float32x2_t *)(v26 + 8 * (unsigned __int16)(3 * NonUniformSpan))), v27 * v27), vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 8 * v23), *(float32x2_t *)(v26 + 8 * v21)), (float)(v27 + v27) * *((float *)&NonUniformSpan + 1))), vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 8 * v24), *(float32x2_t *)(v26 + 8 * v23)), *((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1)));
      return vmul_n_f32(v28, v25);
    case 2:
      v29 = (unsigned __int16)(3 * NonUniformSpan);
      v30 = (v29 + 2);
      v31 = *(_QWORD *)(a1 + 24);
      if (v31 <= v30)
        goto LABEL_29;
      v32 = (v29 + 3);
      if (v31 <= v32)
        goto LABEL_36;
      v25 = (float)(v12 * 6.0) * v12;
      v33 = *(_QWORD *)(a1 + 40);
      v34 = *(float32x2_t *)(v33 + 8 * (v29 + 1));
      v28 = vadd_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v33 + 8 * (unsigned __int16)(3 * NonUniformSpan)), vsub_f32(*(float32x2_t *)(v33 + 8 * v30), vadd_f32(v34, v34))), 1.0 - *((float *)&NonUniformSpan + 1)), vmul_n_f32(vadd_f32(v34, vsub_f32(*(float32x2_t *)(v33 + 8 * v32), vadd_f32(*(float32x2_t *)(v33 + 8 * v30), *(float32x2_t *)(v33 + 8 * v30)))), *((float *)&NonUniformSpan + 1)));
      return vmul_n_f32(v28, v25);
    case 3:
      v35 = (unsigned __int16)(3 * NonUniformSpan) + 3;
      if (*(_QWORD *)(a1 + 24) <= v35)
        goto LABEL_30;
      __asm { FMOV            V3.2S, #3.0 }
      return vmul_n_f32(vsub_f32(vadd_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v35), vmul_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40)+ 8 * ((unsigned __int16)(3 * NonUniformSpan) + 2)), _D3)), vmul_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40)+ 8 * ((unsigned __int16)(3 * NonUniformSpan) + 1)), _D3)), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * (unsigned __int16)(3 * NonUniformSpan))), (float)((float)(v12 * 6.0) * v12) * v12);
    default:
      return 0;
  }
}

float re::BezierSpline<re::Vector2<float>>::evaluateLengthAt(uint64_t a1, float a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned __int16 NonUniformSpan;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;

  if (*(_BYTE *)(a1 + 136))
  {
    v4 = *(float *)(a1 + 128);
    if (v4 >= a2)
    {
      LOWORD(v5) = 0;
    }
    else
    {
      v5 = *(unsigned __int16 *)(a1 + 138);
      v6 = *(float *)(a1 + 132);
      if (v6 <= a2)
        LOWORD(v5) = v5 - 1;
      else
        v5 = (int)(float)((float)((float)(a2 - v4) / (float)(v6 - v4)) * (float)v5);
    }
    NonUniformSpan = v5;
  }
  else
  {
    NonUniformSpan = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  v8 = *(_QWORD *)(a1 + 104);
  if (!v8)
  {
    if (NonUniformSpan)
    {
      v11 = 0;
      v10 = 0.0;
      do
      {
        v10 = v10 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v11);
        v11 = (v11 + 1);
      }
      while (NonUniformSpan != (_DWORD)v11);
      goto LABEL_18;
    }
LABEL_17:
    v10 = 0.0;
    goto LABEL_18;
  }
  if (!NonUniformSpan)
    goto LABEL_17;
  v9 = NonUniformSpan - 1;
  if (v8 <= v9)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(float *)(*(_QWORD *)(a1 + 120) + 4 * v9);
LABEL_18:
  v12 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, NonUniformSpan);
  v13 = 0;
  v14 = qword_255803708;
  v15 = (float)(v12 + a2) * 0.5;
  v16 = (float)(a2 - v12) * 0.5;
  v17 = 0.0;
  do
  {
    v18 = *(float *)(v14 + v13 + 4);
    v19 = (float32x2_t)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 128))(a1, 1, v15 + (float)(v16 * *(float *)(v14 + v13)));
    v17 = v17 + (float)(v18 * sqrtf(vaddv_f32(vmul_f32(v19, v19))));
    v13 += 8;
  }
  while (v13 != 128);
  return v10 + (float)(v16 * v17);
}

uint64_t re::BezierSpline<re::Vector2<float>>::calculateMonomialBasisForSpan(uint64_t a1, __int16 a2, float32x2_t *a3)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = (unsigned __int16)(3 * a2);
  if (*(_QWORD *)(a1 + 24) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  v4 = (unsigned __int16)(3 * a2);
  *a3 = *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v3);
  v5 = (v4 + 1);
  if (*(_QWORD *)(a1 + 24) <= v5)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  __asm { FMOV            V0.2S, #3.0 }
  a3[1] = vmul_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v5), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v3)), _D0);
  v11 = *(_QWORD *)(a1 + 24);
  if (v11 <= v3)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  if (v11 <= v5)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v12 = (v4 + 2);
  if (v11 <= v12)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a3[2] = vmul_f32(vadd_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v12), vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v3), vadd_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v5), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v5)))), _D0);
  v13 = (v4 + 3);
  if (*(_QWORD *)(a1 + 24) <= v13)
    goto LABEL_13;
  a3[3] = vsub_f32(vadd_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v13), vmul_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v5), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v12)), _D0)), *(float32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v3));
  return 4;
}

float re::BezierSpline<re::Vector2<float>>::evaluateSpanLength(uint64_t a1, unsigned __int16 a2)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float32x2_t v12;

  v4 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2);
  v5 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, (unsigned __int16)(a2 + 1));
  v6 = 0;
  v7 = qword_255803708;
  v8 = (float)(v4 + v5) * 0.5;
  v9 = (float)(v5 - v4) * 0.5;
  v10 = 0.0;
  do
  {
    v11 = *(float *)(v7 + v6 + 4);
    v12 = (float32x2_t)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 128))(a1, 1, v8 + (float)(v9 * *(float *)(v7 + v6)));
    v10 = v10 + (float)(v11 * sqrtf(vaddv_f32(vmul_f32(v12, v12))));
    v6 += 8;
  }
  while (v6 != 128);
  return v9 * v10;
}

float32x2_t re::internal::CubicInterpolant<re::Vector2<float>>::evaluateCatmullRomDerivative(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, float a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;

  if (a5 >= a1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v6 = a5 + 1;
  if (v6 >= a1)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v7 = a5 + 2;
  if (v7 >= a1)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v8 = a5 + 3;
  if (v8 >= a1)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  if (a5 >= a3)
  {
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  if (v6 >= a3)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (v7 >= a3)
  {
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v8 >= a3)
    goto LABEL_17;
  v9 = *(float *)(a2 + 4 * a5);
  v10 = *(float *)(a2 + 4 * v6);
  v11 = *(float *)(a2 + 4 * v7);
  v12 = *(float *)(a2 + 4 * v8);
  v13 = *(float32x2_t *)(a4 + 8 * a5);
  v14 = *(float32x2_t *)(a4 + 8 * v6);
  v15 = *(float32x2_t *)(a4 + 8 * v7);
  v16 = *(float32x2_t *)(a4 + 8 * v8);
  v17 = v12 - a6;
  v18 = v11 - a6;
  v19 = v10 - a6;
  v20 = v9 - a6;
  v21 = 1.0 / (float)(v12 - v11);
  v22 = 1.0 / (float)(v12 - v10);
  v23 = 1.0 / (float)(v11 - v10);
  v24 = 1.0 / (float)(v11 - v9);
  v25 = 1.0 / (float)(v10 - v9);
  v26 = vmul_n_f32(vsub_f32(vmul_n_f32(v13, v19), vmul_n_f32(v14, v20)), v25);
  v27 = vmul_n_f32(vsub_f32(vmul_n_f32(v14, v18), vmul_n_f32(v15, v19)), v23);
  v28 = vmul_n_f32(vsub_f32(vmul_n_f32(v15, v17), vmul_n_f32(v16, v18)), v21);
  v29 = vmul_n_f32(vsub_f32(v14, v13), v25);
  v30 = vmul_n_f32(vsub_f32(v15, v14), v23);
  return vmul_n_f32(vsub_f32(vadd_f32(vsub_f32(vmul_n_f32(vsub_f32(vmul_n_f32(v27, v17), vmul_n_f32(v28, v19)), v22), vmul_n_f32(vsub_f32(vmul_n_f32(v26, v18), vmul_n_f32(v27, v20)), v24)), vmul_n_f32(vmul_n_f32(vsub_f32(vadd_f32(vmul_n_f32(v29, v18), vsub_f32(v27, v26)), vmul_n_f32(v30, v20)), v24), v18)), vmul_n_f32(vmul_n_f32(vsub_f32(vadd_f32(vmul_n_f32(v30, v17), vsub_f32(v28, v27)), vmul_n_f32(vmul_n_f32(vsub_f32(v16, v15), v21), v19)), v22), v19)), v23);
}

float re::internal::CubicInterpolant<re::Vector2<float>>::setKnotsToKeyKnots(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(unsigned __int16 *)(a1 + 204);
  v5 = *(_WORD *)(a1 + 206) + 1;
  v6 = v5 - v4;
  re::DynamicArray<float>::resize(a2, (unsigned __int16)(v5 - v4));
  if (v4 != v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(unsigned __int16 *)(a1 + 204);
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 32);
    v14 = v11 - v10;
    if (v11 < v10)
      v14 = 0;
    if ((v6 & 0xFFFE) != 0)
      v15 = v6;
    else
      v15 = 1;
    v16 = (32 * v10) | 4;
    do
    {
      if (v14 == v8)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v12 == v8)
        goto LABEL_13;
      result = *(float *)(*(_QWORD *)(v9 + 32) + v16);
      *(float *)(v13 + 4 * v8++) = result;
      v16 += 32;
    }
    while (v15 != v8);
  }
  return result;
}

float re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float32x2_t v7;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(unsigned __int16 *)(a1 + 204);
  v4 = v3 + (unsigned __int16)(a2 + 1);
  v5 = *(_QWORD *)(v2 + 16);
  if (v5 <= v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = v3 + a2;
  if (v5 <= v6)
    goto LABEL_5;
  v7 = vsub_f32(*(float32x2_t *)(*(_QWORD *)(v2 + 32) + 32 * v4 + 8), *(float32x2_t *)(*(_QWORD *)(v2 + 32) + 32 * v6 + 8));
  return powf(sqrtf(vaddv_f32(vmul_f32(v7, v7))), *(float *)(a1 + 200));
}

uint64_t re::internal::CubicInterpolant<re::Vector2<float>>::interpolateNaturalSpline(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, _QWORD *a5)
{
  uint64_t v7;
  unint64_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float32x2_t v33;
  unint64_t v34;
  unint64_t v35;
  float32x2_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float v50;
  int v51;
  int v52;
  unsigned __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 v56;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  float v82;

  *(_WORD *)(a1 + 204) = a3;
  *(_WORD *)(a1 + 206) = a4;
  *(_QWORD *)(a1 + 208) = a2;
  v7 = a1 + 160;
  re::internal::CubicInterpolant<re::Vector2<float>>::setKnotsToKeyKnots(a1, a1 + 160);
  v8 = (unsigned __int16)(*(_WORD *)(a1 + 206) - *(_WORD *)(a1 + 204) + 1);
  re::DynamicArray<unsigned long>::resize(a1, v8);
  re::DynamicArray<unsigned long>::resize(a1 + 40, v8);
  re::DynamicArray<unsigned long>::resize(a1 + 80, v8);
  re::DynamicArray<unsigned long>::resize(a1 + 120, v8);
  v12 = v8 - 1;
  if (*(_QWORD *)(a1 + 16) <= v8 - 1)
  {
LABEL_108:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_109;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12) = 0;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_109:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_110;
  }
  **(_QWORD **)(a1 + 32) = 0;
  if (*(_QWORD *)(a1 + 136) <= v12)
  {
LABEL_110:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_111;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v12) = 0x3F8000003F800000;
  if (!*(_QWORD *)(a1 + 136))
  {
LABEL_111:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_112;
  }
  **(_QWORD **)(a1 + 152) = 0x3F8000003F800000;
  if (*(_QWORD *)(a1 + 56) <= v12)
  {
LABEL_112:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v12) = 0;
  if (!*(_QWORD *)(a1 + 56))
  {
LABEL_113:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_114;
  }
  **(_QWORD **)(a1 + 72) = 0;
  if (*(_QWORD *)(a1 + 96) <= v12)
  {
LABEL_114:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_115;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v12) = 0;
  if (!*(_QWORD *)(a1 + 96))
  {
LABEL_115:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_116;
  }
  **(_QWORD **)(a1 + 112) = 0;
  if (v12 >= 2)
  {
    v13 = 2 - v8;
    v14 = 1;
    v15 = 8;
    do
    {
      v16 = *(_QWORD *)(a1 + 176);
      if (v16 <= v14)
        goto LABEL_84;
      v17 = v14 + 1;
      if (v16 <= v14 + 1)
        goto LABEL_85;
      if (*(_QWORD *)(a1 + 16) <= v14)
        goto LABEL_86;
      v18 = *(_QWORD *)(a1 + 192);
      v19 = *(float *)(v18 + 4 * v14);
      *(float *)v9.i32 = v19 - *(float *)(v18 + v15 - 8);
      v11.i32[0] = *(_DWORD *)(v18 + v15);
      *(int32x2_t *)(*(_QWORD *)(a1 + 32) + 8 * v14) = vdup_lane_s32(v9, 0);
      if (*(_QWORD *)(a1 + 136) <= v14)
        goto LABEL_87;
      v10.f32[0] = v11.f32[0] - v19;
      v11.f32[0] = (float)(*(float *)v9.i32 + v10.f32[0]) + (float)(*(float *)v9.i32 + v10.f32[0]);
      *(int32x2_t *)(*(_QWORD *)(a1 + 152) + 8 * v14) = vdup_lane_s32((int32x2_t)v11, 0);
      if (*(_QWORD *)(a1 + 56) <= v14)
        goto LABEL_88;
      *(int32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v14) = vdup_lane_s32((int32x2_t)v10, 0);
      v20 = *(_QWORD *)(a1 + 208);
      v21 = *(unsigned __int16 *)(a1 + 204);
      v22 = v21 + (unsigned __int16)v17;
      v23 = *(_QWORD *)(v20 + 16);
      if (v23 <= v22)
        goto LABEL_89;
      v24 = v21 + (unsigned __int16)v14;
      if (v23 <= v24)
        goto LABEL_90;
      v25 = v21 + (unsigned __int16)(v14 - 1);
      if (v23 <= v25)
        goto LABEL_91;
      if (*(_QWORD *)(a1 + 96) <= v14)
        goto LABEL_92;
      v26 = *(_QWORD *)(v20 + 32);
      v27 = *(float32x2_t *)(v26 + 32 * v24 + 8);
      v10 = vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 32 * v22 + 8), v27), 3.0 / v10.f32[0]);
      v11 = vsub_f32(v27, *(float32x2_t *)(v26 + 32 * v25 + 8));
      v9 = (int32x2_t)vsub_f32(v10, vmul_n_f32(v11, 3.0 / *(float *)v9.i32));
      *(int32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v14) = v9;
      v15 += 4;
      ++v14;
    }
    while (v13 + v17 != 1);
  }
  v28 = *(_QWORD *)(a1 + 136);
  if (!v28)
  {
LABEL_116:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
  if (!*(_QWORD *)(a1 + 56))
  {
LABEL_117:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_118;
  }
  **(float32x2_t **)(a1 + 72) = vdiv_f32(**(float32x2_t **)(a1 + 72), **(float32x2_t **)(a1 + 152));
  if (!*(_QWORD *)(a1 + 136))
  {
LABEL_118:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_119;
  }
  if (!*(_QWORD *)(a1 + 96))
  {
LABEL_119:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_120;
  }
  v29 = (v28 - 1);
  **(float32x2_t **)(a1 + 112) = vdiv_f32(**(float32x2_t **)(a1 + 112), **(float32x2_t **)(a1 + 152));
  if ((int)v29 >= 2)
  {
    v30 = 1;
    while (*(_QWORD *)(a1 + 136) > v30)
    {
      if (*(_QWORD *)(a1 + 16) <= v30)
        goto LABEL_94;
      v31 = v30 - 1;
      v32 = *(_QWORD *)(a1 + 56);
      if (v32 <= v30 - 1)
        goto LABEL_95;
      if (v32 <= v30)
        goto LABEL_96;
      *(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v30) = vdiv_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v30), vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 152) + 8 * v30), vmul_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 32) + 8 * v30), *(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v31))));
      if (*(_QWORD *)(a1 + 96) <= v30)
        goto LABEL_97;
      if (*(_QWORD *)(a1 + 16) <= v30)
        goto LABEL_98;
      if (*(_QWORD *)(a1 + 136) <= v30)
        goto LABEL_99;
      if (*(_QWORD *)(a1 + 56) <= v31)
        goto LABEL_100;
      v33 = *(float32x2_t *)(*(_QWORD *)(a1 + 32) + 8 * v30);
      *(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v30) = vdiv_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v30), vmul_f32(v33, *(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v31))), vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 152) + 8 * v30), vmul_f32(v33, *(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v31))));
      if (++v30 == v29)
        goto LABEL_36;
    }
LABEL_93:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_97:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_98:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_99:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_100:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_108;
  }
LABEL_36:
  v34 = *(_QWORD *)(a1 + 96);
  if (v34 <= (int)v29)
  {
LABEL_120:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_121;
  }
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)(int)v29)
  {
LABEL_121:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_122;
  }
  v35 = (int)v28 - 2;
  if (v34 <= v35)
  {
LABEL_122:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_123;
  }
  if (*(_QWORD *)(a1 + 136) <= (unint64_t)(int)v29)
  {
LABEL_123:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_124;
  }
  if (*(_QWORD *)(a1 + 56) <= v35)
  {
LABEL_124:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_125:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_126:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v36 = *(float32x2_t *)(*(_QWORD *)(a1 + 32) + 8 * (int)v29);
  *(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * (int)v29) = vdiv_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * (int)v29), vmul_f32(v36, *(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v35))), vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 152) + 8 * (int)v29), vmul_f32(v36, *(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v35))));
  if ((int)v29 >= 1)
  {
    LODWORD(v37) = v28;
    while (1)
    {
      v38 = (v37 - 2);
      if (*(_QWORD *)(a1 + 56) <= v38)
        break;
      v37 = (v37 - 1);
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 <= v37)
        goto LABEL_74;
      if (v39 <= v38)
        goto LABEL_75;
      *(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v38) = vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v38), vmul_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v38), *(float32x2_t *)(*(_QWORD *)(a1 + 112) + 8 * v37)));
      if (v37 <= 1)
        goto LABEL_47;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_75:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
LABEL_47:
  if (v12)
  {
    v40 = 0;
    v41 = 4;
    v42 = 8;
    while (1)
    {
      v43 = v40 + 1;
      if (*(_QWORD *)(a1 + 176) <= v40 + 1)
        break;
      v44 = *(_QWORD *)(a1 + 208);
      v45 = *(unsigned __int16 *)(a1 + 204);
      v46 = v45 + (unsigned __int16)v43;
      v47 = *(_QWORD *)(v44 + 16);
      if (v47 <= v46)
        goto LABEL_77;
      v48 = v45 + (unsigned __int16)v40;
      if (v47 <= v48)
        goto LABEL_78;
      v49 = *(_QWORD *)(a1 + 96);
      if (v49 <= v40)
        goto LABEL_79;
      if (v49 <= v43)
        goto LABEL_80;
      if (*(_QWORD *)(a1 + 56) <= v40)
        goto LABEL_81;
      v50 = *(float *)(*(_QWORD *)(a1 + 192) + v41) - *(float *)(*(_QWORD *)(a1 + 192) + v41 - 4);
      *(float32x2_t *)(*(_QWORD *)(a1 + 72) + 8 * v40) = vsub_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(v44 + 32) + 32 * v46 + 8), *(float32x2_t *)(*(_QWORD *)(v44 + 32) + 32 * v48 + 8)), 1.0 / v50), vmul_n_f32(vadd_f32(vadd_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 112) + v42 - 8), *(float32x2_t *)(*(_QWORD *)(a1 + 112) + v42 - 8)), *(float32x2_t *)(*(_QWORD *)(a1 + 112) + v42)), v50 / 3.0));
      if (*(_QWORD *)(a1 + 96) <= v43)
        goto LABEL_82;
      if (*(_QWORD *)(a1 + 136) <= v40)
        goto LABEL_83;
      *(float32x2_t *)(*(_QWORD *)(a1 + 152) + 8 * v40) = vmul_n_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 112) + v42), *(float32x2_t *)(*(_QWORD *)(a1 + 112) + v42 - 8)), 1.0 / (float)(v50 * 3.0));
      v41 += 4;
      v42 += 8;
      ++v40;
      if (v12 == v43)
        goto LABEL_58;
    }
LABEL_76:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_78:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_90:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_92:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_93;
  }
LABEL_58:
  v51 = *(unsigned __int16 *)(a1 + 206);
  v52 = *(unsigned __int16 *)(a1 + 204);
  (*(void (**)(_QWORD *, _QWORD))(*a5 + 16))(a5, (unsigned __int16)(v51 - v52));
  v53 = v51 - v52;
  if (v51 == v52)
  {
    v54 = 0;
  }
  else
  {
    v55 = 0;
    v56 = 0;
    __asm
    {
      FMOV            V9.2S, #3.0
      FMOV            V10.2S, #-3.0
    }
    do
    {
      v63 = *(_QWORD *)(a1 + 176);
      if (v63 <= v55)
        goto LABEL_101;
      if (v63 <= (v55 + 1))
        goto LABEL_102;
      v64 = *(_QWORD *)(a1 + 208);
      v65 = *(unsigned __int16 *)(a1 + 204);
      v66 = v55 + v65;
      v67 = *(_QWORD *)(v64 + 16);
      if (v67 <= v55 + v65)
        goto LABEL_103;
      v68 = v65 + (unsigned __int16)(v55 + 1);
      if (v67 <= v68)
        goto LABEL_104;
      v69 = *(_QWORD *)(a1 + 192);
      v70 = *(float *)(v69 + 4 * v55);
      v71 = *(float *)(v69 + 4 * (v55 + 1));
      v72 = *(_QWORD *)(v64 + 32);
      v73 = *(float32x2_t *)(v72 + 32 * v66 + 8);
      v74 = *(float32x2_t *)(v72 + 32 * v68 + 8);
      v82 = v71 - v70;
      re::internal::CubicInterpolant<re::Vector2<float>>::evaluateNaturalSplineDerivative(v63, v69, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 152), v70, v55);
      v76 = v75;
      re::internal::CubicInterpolant<re::Vector2<float>>::evaluateNaturalSplineDerivative(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 152), v71, v55);
      if (a5[3] <= (unint64_t)v56)
        goto LABEL_105;
      *(float32x2_t *)(a5[5] + 8 * v56) = v73;
      if (a5[3] <= (unint64_t)(unsigned __int16)(v56 + 1))
        goto LABEL_106;
      *(float32x2_t *)(a5[5] + 8 * (unsigned __int16)(v56 + 1)) = vadd_f32(vdiv_f32(vmul_n_f32(v76, v82), _D9), v73);
      v78 = (unsigned __int16)(v56 + 2);
      if (a5[3] <= v78)
        goto LABEL_107;
      v56 += 3;
      *(float32x2_t *)(a5[5] + 8 * v78) = vadd_f32(v74, vdiv_f32(vmul_n_f32(v77, v82), _D10));
      ++v55;
    }
    while (v53 != (unsigned __int16)v55);
    v54 = v56;
  }
  v79 = *(_QWORD *)(a1 + 208);
  v80 = *(unsigned __int16 *)(a1 + 204) + (unint64_t)v53;
  if (*(_QWORD *)(v79 + 16) <= v80)
    goto LABEL_125;
  if (a5[3] <= v54)
    goto LABEL_126;
  *(_QWORD *)(a5[5] + 8 * v54) = *(_QWORD *)(*(_QWORD *)(v79 + 32) + 32 * v80 + 8);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a5 + 96))(a5, v7);
}

float32x2_t re::internal::CubicInterpolant<re::Vector2<float>>::evaluateNaturalSplineDerivative(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, float a9, unsigned __int16 a10)
{
  float v10;

  if (a10 >= a1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  if (a10 >= a3)
  {
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  if (a10 >= a5)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a10 >= a7)
    goto LABEL_9;
  v10 = a9 - *(float *)(a2 + 4 * a10);
  return vadd_f32(*(float32x2_t *)(a4 + 8 * a10), vmul_n_f32(vadd_f32(vadd_f32(*(float32x2_t *)(a6 + 8 * a10), *(float32x2_t *)(a6 + 8 * a10)), vmul_n_f32(*(float32x2_t *)(a8 + 8 * a10), v10 * 3.0)), v10));
}

uint64_t re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int32x4_t a5, double a6, double a7, double a8, int32x4_t a9)
{
  int32x4_t v9;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  int32x2_t v27;
  int32x2_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v39;
  float v40;
  float v41;
  float32x4_t v42;
  int8x16_t v43;
  float v44;
  int8x16_t v45;
  float v46;
  int8x16_t v47;
  float v48;
  int v49;
  float v50;
  int32x4_t v51;
  float v52;
  int32x4_t v53;
  __int32 v54;
  float v55;
  float v56[6];
  char v57;
  float v58;
  float v59;
  __int32 v60;
  float v61;
  int v62;
  float v63;
  char v64;

  v9.i32[0] = *(_DWORD *)(a3 + 8);
  v13 = *(float *)(a3 + 12);
  v15 = *(float *)(a3 + 16);
  v14 = *(float *)(a3 + 20);
  v17 = *(float *)a3;
  v16 = *(float *)(a3 + 4);
  if (!*((_BYTE *)a1 + 8))
  {
    *(float32x2_t *)a9.i8 = vmul_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)0x40000000C0A00000, v14), (float32x2_t)0xC0A0000040000000, *(float *)v9.i32), (float32x2_t)0x41900000C1100000, v13), (float32x2_t)0xC110000041900000, v15), (float32x2_t)vdup_n_s32(0x3E2AAAABu));
    v29 = *(unsigned __int8 *)(a3 + 24);
    if (*((unsigned __int16 *)a1 + 1) <= v29)
    {
      v36 = *(float *)(a3 + 20);
      v37 = *(float *)(a3 + 8);
      goto LABEL_15;
    }
    v49 = *(_DWORD *)(a3 + 12);
    v50 = *(float *)(a3 + 16);
    v54 = *(_DWORD *)(a3 + 8);
    v55 = *(float *)(a3 + 20);
    v52 = v55;
    v53 = a9;
    v51 = v9;
LABEL_6:
    v30 = (float)(v16 + (float)(v17 * 5.0)) * 0.16667;
    v31 = (float)(v17 + v16) * 0.5;
    v32 = (float)(v17 + (float)(v16 * 5.0)) * 0.16667;
    v33 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(*a2, v30);
    v34 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(*a2, v31);
    v35 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(*a2, v32);
    v9.i32[0] = v54;
    v14 = v55;
    v36 = v52;
    a9.i64[0] = v53.i64[0];
    v37 = *(float *)v51.i32;
    if (*(unsigned __int16 *)a1 > v29)
    {
LABEL_7:
      v58 = v17;
      v59 = (float)(v17 + v16) * 0.5;
      v60 = v54;
      v61 = v33;
      v62 = v49;
      v63 = v34;
      v64 = v29 + 1;
      v56[0] = v59;
      v56[1] = v16;
      v56[2] = v34;
      v56[3] = v50;
      v56[4] = v35;
      v56[5] = v55;
      v57 = v29 + 1;
      re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>(a1, a2, &v58, a4);
      return re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>(a1, a2, v56, a4);
    }
    v42 = (float32x4_t)vuzp1q_s32(v51, v53);
    v42.i32[1] = v53.i32[1];
    v42.f32[3] = v52;
    v43 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_22619D660);
    v44 = vaddv_f32(vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
    v45 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_22619D670);
    v46 = vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)));
    v47 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_22619D680);
    v48 = vaddv_f32(vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
    if (*((_BYTE *)a1 + 8))
    {
      if (fabsf(v30) >= 0.00001)
      {
        if (fabsf((float)(v30 - v44) / v30) > a1[1])
          goto LABEL_7;
      }
      else if (fabsf(v44) >= 0.00001)
      {
        goto LABEL_7;
      }
      if (fabsf(v31) >= 0.00001)
      {
        if (fabsf((float)(v31 - v46) / v31) > a1[1])
          goto LABEL_7;
      }
      else if (fabsf(v46) >= 0.00001)
      {
        goto LABEL_7;
      }
      if (fabsf(v32) >= 0.00001)
      {
        if (fabsf((float)(v32 - v48) / v32) > a1[1])
          goto LABEL_7;
      }
      else if (fabsf(v48) >= 0.00001)
      {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
    if (fabsf(v33) >= 0.00001)
    {
      if (fabsf((float)(v33 - v44) / v33) > a1[1])
        goto LABEL_7;
    }
    else if (fabsf(v44) >= 0.00001)
    {
      goto LABEL_7;
    }
    if (fabsf(v34) >= 0.00001)
    {
      if (fabsf((float)(v34 - v46) / v34) > a1[1])
        goto LABEL_7;
    }
    else if (fabsf(v46) >= 0.00001)
    {
      goto LABEL_7;
    }
    if (fabsf(v35) >= 0.00001)
    {
      if (fabsf((float)(v35 - v48) / v35) > a1[1])
        goto LABEL_7;
    }
    else if (fabsf(v48) >= 0.00001)
    {
      goto LABEL_7;
    }
LABEL_15:
    v39 = *(float *)&a9.i32[1];
    v40 = v17;
    v41 = v16;
    return re::internal::FunctionFitter::addSpanToBezierSpline(a4, v40, v41, v37, v39, *(float *)a9.i32, v36);
  }
  v18 = (float)(v13 - *(float *)v9.i32) / (float)(v14 - *(float *)v9.i32);
  v19 = (float)(v15 - *(float *)v9.i32) / (float)(v14 - *(float *)v9.i32);
  v20 = 1.0 - v18;
  v21 = 1.0 - v19;
  v22 = -(float)(v18 * v18);
  v23.f32[0] = (float)((float)((float)(v16 + (float)(v17 * 2.0)) * 0.33333)
                     + (float)((float)-(float)((float)(v20 * v20) * v20) * v17))
             + (float)((float)(v18 * v22) * v16);
  v23.f32[1] = (float)((float)((float)(v17 + (float)(v16 * 2.0)) * 0.33333)
                     + (float)((float)(v21 * (float)-(float)(v21 * v21)) * v17))
             + (float)((float)-(float)((float)(v19 * v19) * v19) * v16);
  v24.f32[0] = (float)(v19 * v19) * (float)(1.0 - v19);
  v24.f32[1] = v22 * (float)(1.0 - v18);
  v25.f32[0] = (float)(1.0 - v19) * (float)-(float)(v19 * (float)(1.0 - v19));
  v26 = v18 * (float)(1.0 - v18);
  v25.f32[1] = (float)(1.0 - v18) * v26;
  v27 = (int32x2_t)vmul_f32(v24, v23);
  v28 = (int32x2_t)vmul_f32(v25, v23);
  *(float32x2_t *)a5.i8 = vadd_f32((float32x2_t)vzip1_s32(v28, v27), (float32x2_t)vzip2_s32(v28, v27));
  *(float32x2_t *)a9.i8 = vmul_n_f32(*(float32x2_t *)a5.i8, 1.0/ (float)((float)((float)(v18 * 3.0) * v19)* (float)((float)(v21 * (float)-(float)(v26 * v21))+ (float)((float)(v19 * (float)(v20 * v20)) * v21))));
  v29 = *(unsigned __int8 *)(a3 + 24);
  if (*((unsigned __int16 *)a1 + 1) > v29)
  {
    v53 = a9;
    v54 = *(_DWORD *)(a3 + 8);
    v49 = *(_DWORD *)(a3 + 12);
    v50 = *(float *)(a3 + 16);
    v55 = *(float *)(a3 + 20);
    v52 = *(float *)(a3 + 4);
    a5.i32[0] = *(_DWORD *)a3;
    v51 = a5;
    goto LABEL_6;
  }
  v36 = *(float *)(a3 + 4);
  v37 = *(float *)a3;
LABEL_9:
  v39 = *(float *)&a9.i32[1];
  v40 = *(float *)v9.i32;
  v41 = v14;
  return re::internal::FunctionFitter::addSpanToBezierSpline(a4, v40, v41, v37, v39, *(float *)a9.i32, v36);
}

float re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(uint64_t a1, float a2)
{
  float v2;
  unint64_t SplineIndexForParameter;
  uint64_t v5;
  float v6;
  unint64_t v7;
  float v8;

  v2 = a2;
  if (!*(_BYTE *)a1)
  {
    SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(a1, a2);
    if (*(_QWORD *)(a1 + 184) <= SplineIndexForParameter)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * SplineIndexForParameter);
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 136))(v5, v2);
      if (!(_DWORD)SplineIndexForParameter)
      {
        v8 = 0.0;
        return v6 + v8;
      }
      v7 = (SplineIndexForParameter - 1);
      if (*(_QWORD *)(a1 + 184) > v7)
      {
        v8 = *(float *)(*(_QWORD *)(a1 + 200) + 24 * v7 + 16);
        return v6 + v8;
      }
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v2;
}

uint64_t re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(uint64_t a1, float a2)
{
  unint64_t v2;
  unsigned __int16 v3;
  unint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 184);
  if ((v2 & 0xFFFE) == 0 || *(float *)(a1 + 352) >= a2)
    return 0;
  v3 = v2 - 1;
  if (*(float *)(a1 + 356) > a2)
  {
    v4 = v3 >> 1;
    if (v2 > v4)
    {
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 200);
      do
      {
        if (*(float *)(v6 + 24 * v4 + 8) <= a2)
        {
          if (*(float *)(v6 + 24 * v4 + 12) > a2)
            return (unsigned __int16)v4;
          v5 = v4 + 1;
        }
        else
        {
          v3 = v4 - 1;
        }
        v4 = (v3 + v5) >> 1;
      }
      while (v2 > v4);
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    return 0;
  }
  return v3;
}

uint64_t re::internal::FunctionFitter::addSpanToBezierSpline(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v15 = (v14 + 1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, (unsigned __int16)(v14 + 1));
  if (!v14)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_11;
    **(float **)(a1 + 40) = a4;
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)a1 + 104))(a1, 0, a2);
  }
  v16 = 3 * v14;
  v17 = (unsigned __int16)(3 * v14 + 1);
  v18 = *(_QWORD *)(a1 + 24);
  if (v18 <= (unsigned __int16)(v16 + 1))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  v19 = *(_QWORD *)(a1 + 40);
  *(float *)(v19 + 4 * v17) = a5;
  if (v18 <= (unsigned __int16)(v16 + 2))
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  *(float *)(v19 + 4 * (unsigned __int16)(v16 + 2)) = a6;
  v20 = v16 + 3;
  if (v18 <= v20)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(v19 + 4 * v20) = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 104))(a1, v15, a3);
}

void std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int *,unsigned int *>(std::vector<unsigned int> *a1, unsigned int *__dst, char *__src, char *a4)
{
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v8;
  unsigned int *value;
  unint64_t end;
  std::vector<unsigned int>::pointer begin;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  std::vector<unsigned int>::pointer v21;
  char *v22;
  std::vector<unsigned int>::pointer v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  std::__split_buffer<unsigned int> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v8 = value;
  end = (unint64_t)a1->__end_;
  if ((uint64_t)((uint64_t)value - end) < 24)
  {
    begin = a1->__begin_;
    v12 = ((uint64_t)(end - (unint64_t)a1->__begin_) >> 2) + 6;
    if (v12 >> 62)
      abort();
    v13 = __dst - begin;
    v14 = (char *)v8 - (char *)begin;
    v15 = v14 >> 1;
    if (v14 >> 1 <= v12)
      v15 = ((uint64_t)(end - (unint64_t)a1->__begin_) >> 2) + 6;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16)
      v17 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v16);
    else
      v17 = 0;
    v26 = 0;
    v27 = &v17[v13];
    __v.__first_ = v17;
    __v.__begin_ = v27;
    __v.__end_cap_.__value_ = &v17[v16];
    do
    {
      v27[v26] = *(_DWORD *)&__src[v26 * 4];
      ++v26;
    }
    while (v26 != 6);
    __v.__end_ = v27 + 6;
    std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return;
  }
  v18 = end - (_QWORD)__dst;
  if ((uint64_t)(end - (_QWORD)__dst) > 23)
  {
    v19 = __src + 24;
    v21 = a1->__end_;
LABEL_16:
    v22 = (char *)(__dst + 6);
    v23 = v21 - 6;
    v24 = v21;
    if ((unint64_t)(v21 - 6) < end)
    {
      v24 = v21;
      do
      {
        v25 = *v23++;
        *v24++ = v25;
      }
      while ((unint64_t)v23 < end);
    }
    a1->__end_ = v24;
    if (v21 != (std::vector<unsigned int>::pointer)v22)
      memmove(&v21[-(((char *)v21 - v22) >> 2)], __dst, (char *)v21 - v22);
    if (v19 != __src)
      memmove(__dst, __src, v19 - __src);
    return;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(a1->__end_, &__src[v18], a4 - &__src[v18]);
  v21 = (std::vector<unsigned int>::pointer)(end + v20);
  a1->__end_ = (std::vector<unsigned int>::pointer)(end + v20);
  if (v18 >= 1)
    goto LABEL_16;
}

void std::vector<re::Vector3<float>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<re::Vector3<float>*>,std::__wrap_iter<re::Vector3<float>*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  void *__p[5];

  if (a5 < 1)
    return;
  v6 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(a1 + 16);
  v10 = v11;
  v12 = *(v9 - 1);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 >> 60)
      abort();
    v15 = (__dst - v13) >> 4;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __p[4] = v9;
    if (v17)
      v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v9, v17);
    else
      v18 = 0;
    v28 = &v18[16 * v15];
    __p[0] = v18;
    __p[1] = v28;
    __p[3] = &v18[16 * v17];
    v29 = 16 * a5;
    v30 = &v28[16 * a5];
    do
    {
      v31 = *(_OWORD *)v6;
      v6 += 16;
      *(_OWORD *)v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    __p[2] = v30;
    std::vector<re::Vector3<float>>::__swap_out_circular_buffer((void **)a1, (uint64_t)__p, __dst);
    if (__p[0])
      operator delete(__p[0]);
    return;
  }
  v19 = v12 - (_QWORD)__dst;
  v20 = (uint64_t)(v12 - (_QWORD)__dst) >> 4;
  if (v20 >= a5)
  {
    v21 = &__src[16 * a5];
    v23 = (char *)*(v9 - 1);
LABEL_17:
    v24 = &__dst[16 * a5];
    v25 = &v23[-16 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-16 * ((v23 - v24) >> 4)], __dst, v23 - v24);
    if (v21 != v6)
      memmove(__dst, v6, v21 - v6);
    return;
  }
  v21 = &__src[16 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove((void *)*(v9 - 1), &__src[16 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
}

void *std::vector<re::Vector3<float>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t re::Result<std::vector<re::pathprocessing::BezierIslandInfo>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  void **v5;

  if (*(_BYTE *)a1)
  {
    v5 = (void **)(a1 + 8);
    std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void re::pathprocessing::subdivideBezierOnSelfIntersection(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  unint64_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  char *v35;
  void **v36;
  __int128 v37;
  __int128 v38;
  float32x2_t *v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  char **v43;
  __int128 *v44;
  void **v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  float *v53;
  float *v54;
  __int128 *v55;
  char *v56;
  float *v57;
  float *v58;
  float v59;
  char *v60;
  float *v61;
  float **v62;
  unint64_t v63;
  _QWORD *v64;
  float *v65;
  float *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  float *v72;
  int v73;
  float v74;
  float *v75;
  float *v76;
  char *v77;
  float v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void **v94;
  void **v95;
  void **v96;
  void **v97;
  void **v98;
  __int128 v99;
  __int128 v100;
  float32x2_t *v101;
  float32x2_t *v102;
  unsigned int v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  __int128 v113;
  __int128 v114;
  void **v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void **v119;
  void **v120;
  void **v121;
  void **v122;
  void **v123;
  __int128 v124;
  __int128 v125;
  float32x2_t *v126;
  float v127;
  char *v128;
  float *v129;
  float **v130;
  unint64_t v131;
  _QWORD *v132;
  float *v133;
  float *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  float *v140;
  int v141;
  float v142;
  float *v143;
  float *v144;
  float v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  void **v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  void **v160;
  void **v161;
  void **v162;
  void **v163;
  void **v164;
  __int128 v165;
  __int128 v166;
  void **v167;
  float32x2_t *v168;
  float v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  float32x2_t *v185;
  float v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x2_t v195;
  float32x2_t v196;
  void **v197;
  void **v198;
  float32x2_t *v199;
  char *v200;
  void **v201;
  __int128 v202;
  __int128 v203;
  float32x2_t *v204;
  unint64_t v205;
  uint64_t *v206;
  float **v207;
  float *v208;
  float *v209;
  float *v210;
  float v211;
  float v212;
  float *v213;
  float v214;
  float *v215;
  int64_t v216;
  float *v217;
  float v218;
  float v219;
  char *v220;
  int64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  unint64_t v234;
  char *v235;
  __int128 v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  __int128 v242;
  char *v243;
  char *v244;
  __int128 v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  char *v263;
  void *v264;
  void *v265;
  char *v268;
  _QWORD *v270;
  char *v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  _OWORD v275[2];
  __int128 v276;
  void *__p[2];
  __int128 v278;
  __int128 v279;
  void *v280;
  float *v281;
  uint64_t v282;
  void *v283;
  float *v284;
  uint64_t v285;
  void **v286;
  void **v287;
  float32x2_t *v288;
  void **v289;
  void **v290;
  void **v291;
  float32x2_t *v292;

  v286 = 0;
  v287 = 0;
  v288 = 0;
  v5 = *a1;
  v6 = a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
  if (v6 != *a1)
  {
    if (v7 > 0x555555555555555)
      goto LABEL_252;
    v8 = (v6 - *a1) >> 3;
    v9 = (float32x2_t *)operator new(16 * v8);
    v10 = 0;
    v286 = (void **)v9;
    v287 = (void **)v9;
    v288 = &v9[2 * v8];
    do
    {
      v11 = (float32x2_t *)(v5 + 24 * v10);
      v12 = v11[1];
      v13 = vmul_f32(v12, 0);
      v14 = v11[2];
      v15 = vmul_f32(v14, 0);
      v16 = vadd_f32(vadd_f32(*v11, v13), v15);
      v17 = vadd_f32(vadd_f32(v12, v15), vmul_f32(v16, 0));
      v18 = vadd_f32(v14, vadd_f32(vmul_f32(*v11, 0), v13));
      v19 = vsub_f32(v16, v17);
      v20 = vmul_f32(v19, v19);
      v20.i32[0] = vadd_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).u32[0];
      v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
      v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
      v23 = vmul_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).f32[0]);
      v24 = vsub_f32(v18, v17);
      v25 = vmul_f32(v24, v24);
      v25.i32[0] = vadd_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)).u32[0];
      v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
      v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
      v28 = (float)(vaddv_f32(vmul_f32(v23, vmul_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0])))* 0.5)+ 0.5;
      if (v9 >= v288)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v286) >> 4);
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) > 0x555555555555555)
          goto LABEL_252;
        if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v30)
          v30 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v31 = 0x555555555555555;
        else
          v31 = v30;
        std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(__p, v31, v29, (uint64_t)&v288);
        v32 = v278;
        *(_QWORD *)v278 = v10;
        *(float32x2_t *)(v32 + 8) = v16;
        *(float32x2_t *)(v32 + 16) = v17;
        *(float32x2_t *)(v32 + 24) = v18;
        *(float *)(v32 + 32) = v28;
        *(_QWORD *)(v32 + 36) = 0x3F80000000000000;
        v33 = v286;
        v34 = v287;
        v35 = (char *)__p[1];
        if (v287 == v286)
        {
          v33 = v287;
        }
        else
        {
          v36 = v287;
          do
          {
            v37 = *((_OWORD *)v36 - 3);
            v38 = *((_OWORD *)v36 - 2);
            *(_OWORD *)(v35 - 20) = *(_OWORD *)((char *)v36 - 20);
            *((_OWORD *)v35 - 3) = v37;
            *((_OWORD *)v35 - 2) = v38;
            v35 -= 48;
            v36 -= 6;
          }
          while (v36 != v33);
        }
        v9 = (float32x2_t *)(v32 + 48);
        v286 = (void **)v35;
        v287 = (void **)(v32 + 48);
        v39 = v288;
        v288 = (float32x2_t *)*((_QWORD *)&v278 + 1);
        *(_QWORD *)&v278 = v34;
        *((_QWORD *)&v278 + 1) = v39;
        __p[0] = v33;
        __p[1] = v33;
        if (v34 != v33)
          *(_QWORD *)&v278 = (char *)v34 - 48 - 48 * (((char *)v34 - (char *)v33 - 48) / 0x30uLL);
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v9 = (float32x2_t)v10;
        v9[1] = v16;
        v9[2] = v17;
        v9[3] = v18;
        v9[4].f32[0] = v28;
        *(float32x2_t *)((char *)&v9[4] + 4) = (float32x2_t)0x3F80000000000000;
        v9 += 6;
      }
      v287 = (void **)v9;
      ++v10;
      v5 = *a1;
      v6 = a1[1];
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    }
    while (v10 < v7);
    if (v7)
      goto LABEL_23;
LABEL_26:
    v41 = 0;
    v268 = 0;
    goto LABEL_27;
  }
  v9 = 0;
  if (!v7)
    goto LABEL_26;
LABEL_23:
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_252;
  v40 = 24 * v7;
  v41 = (char *)operator new(24 * v7);
  v42 = 24 * ((v40 - 24) / 0x18uLL) + 24;
  bzero(v41, v42);
  v268 = &v41[v42];
LABEL_27:
  v43 = a4;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v280 = 0;
  v281 = 0;
  v282 = 0;
  v44 = (__int128 *)v286;
  if (v286 == (void **)v9)
  {
LABEL_164:
    *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    std::vector<re::pathprocessing::Bezier2>::reserve((void **)v43, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
    if (a1[1] != *a1)
    {
      v205 = 0;
      v270 = v43 + 2;
      v271 = v41;
      do
      {
        v206 = (uint64_t *)&v41[24 * v205];
        v207 = (float **)(v206 + 1);
        std::__sort<std::__less<float,float> &,float *>();
        v208 = (float *)*v206;
        v209 = (float *)v206[1];
        if ((float *)*v206 != v209)
        {
          v210 = v208 + 1;
          while (v210 != v209)
          {
            v211 = *(v210 - 1);
            v212 = *v210++;
            if (v211 == v212)
            {
              v213 = v210 - 2;
              while (v210 != v209)
              {
                v214 = *v210;
                if (v211 != *v210)
                {
                  v213[1] = v214;
                  ++v213;
                  v211 = v214;
                }
                ++v210;
              }
              v215 = v213 + 1;
              goto LABEL_177;
            }
          }
        }
        v215 = *v207;
LABEL_177:
        if (v209 != v215)
        {
          v209 = v215;
          *v207 = v215;
        }
        if (v209 != v208)
        {
          if (fabsf(*v208) < 0.0001)
          {
            v216 = (char *)v209 - (char *)(v208 + 1);
            if (v209 != v208 + 1)
              memmove(v208, v208 + 1, (char *)v209 - (char *)(v208 + 1));
            v209 = (float *)((char *)v208 + v216);
            *v207 = (float *)((char *)v208 + v216);
          }
          v218 = *(v209 - 1);
          v217 = v209 - 1;
          v219 = v218;
          if (v218 == 1.0 || fabsf(v219 + -1.0) <= 0.0001)
            *v207 = v217;
        }
        re::pathprocessing::Bezier2::split((__n128 *)(*a1 + 24 * v205), v206, (__n128 **)__p);
        v220 = (char *)__p[0];
        v221 = (char *)__p[1] - (char *)__p[0];
        if ((char *)__p[1] - (char *)__p[0] < 1)
          goto LABEL_222;
        v222 = v221 / 24;
        v223 = (uint64_t)v43[1];
        v224 = (v223 - (uint64_t)*v43) / 24;
        v225 = &(*v43)[24 * v224];
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((*v270 - v223) >> 3)) < v221 / 24)
        {
          v226 = v224 + v222;
          if ((unint64_t)(v224 + v222) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_252;
          if (0x5555555555555556 * ((uint64_t)(*v270 - (_QWORD)*v43) >> 3) > v226)
            v226 = 0x5555555555555556 * ((uint64_t)(*v270 - (_QWORD)*v43) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v270 - (_QWORD)*v43) >> 3) >= 0x555555555555555)
            v227 = 0xAAAAAAAAAAAAAAALL;
          else
            v227 = v226;
          if (v227)
          {
            v228 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v270, v227);
            v230 = v229;
          }
          else
          {
            v228 = 0;
            v230 = 0;
          }
          v238 = &v228[24 * v224];
          v239 = &v238[24 * v222];
          v240 = 24 * v222;
          v241 = v238;
          do
          {
            v242 = *(_OWORD *)v220;
            *((_QWORD *)v241 + 2) = *((_QWORD *)v220 + 2);
            *(_OWORD *)v241 = v242;
            v241 += 24;
            v220 += 24;
            v240 -= 24;
          }
          while (v240);
          v243 = *v43;
          if (*v43 == v225)
          {
            v246 = v238;
          }
          else
          {
            v244 = v225;
            do
            {
              v245 = *(_OWORD *)(v244 - 24);
              v246 = v238 - 24;
              *((_QWORD *)v238 - 1) = *((_QWORD *)v244 - 1);
              *(_OWORD *)(v238 - 24) = v245;
              v244 -= 24;
              v238 -= 24;
            }
            while (v244 != v243);
          }
          v247 = v43[1];
          v248 = v247 - v225;
          if (v247 != v225)
            memmove(v239, v225, v247 - v225);
          v249 = *v43;
          *v43 = v246;
          v43[1] = &v239[v248];
          v43[2] = &v228[24 * v230];
          if (v249)
            operator delete(v249);
          goto LABEL_222;
        }
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v223 - (uint64_t)v225) >> 3)) >= v222)
        {
          v231 = (char *)__p[0] + 24 * v222;
          v233 = v43[1];
          v43 = a4;
        }
        else
        {
          v231 = (char *)__p[0] + 8 * ((v223 - (uint64_t)v225) >> 3);
          v232 = (char *)((char *)__p[1] - (char *)v231);
          if (__p[1] != v231)
            memmove((void *)v223, (char *)__p[0] + 8 * ((v223 - (uint64_t)v225) >> 3), (char *)__p[1] - (char *)v231);
          v233 = &v232[v223];
          a4[1] = &v232[v223];
          v43 = a4;
          if (v223 - (uint64_t)v225 < 1)
            goto LABEL_222;
        }
        v234 = (unint64_t)&v233[-24 * v222];
        v235 = v233;
        while (v234 < v223)
        {
          v236 = *(_OWORD *)v234;
          *((_QWORD *)v235 + 2) = *(_QWORD *)(v234 + 16);
          *(_OWORD *)v235 = v236;
          v235 += 24;
          v234 += 24;
        }
        v237 = &v225[24 * v222];
        v43[1] = v235;
        if (v233 != v237)
          memmove(&v225[24 * v222], v225, v233 - v237);
        if (v231 != v220)
          memmove(v225, v220, v231 - v220);
LABEL_222:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v205;
        v41 = v271;
      }
      while (v205 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
    if (!a2)
      goto LABEL_238;
    v251 = *a2;
    v250 = a2[1];
    v252 = (v250 - *a2) >> 3;
    std::vector<unsigned long>::resize((uint64_t)a3, v252);
    if (v250 == v251)
      goto LABEL_238;
    v253 = 0;
    v254 = 0;
    v255 = 0;
    v256 = *a2;
    v257 = (a2[1] - *a2) >> 3;
    if (v252 <= 1)
      v258 = 1;
    else
      v258 = v252;
    while (v253 != v257)
    {
      v259 = *(_QWORD *)(v256 + 8 * v253);
      v260 = v259 - v254;
      if (v259 > v254)
      {
        v261 = &v41[24 * v254 + 8];
        do
        {
          v255 += ((uint64_t)(*(_QWORD *)v261 - *((_QWORD *)v261 - 1)) >> 2) + 1;
          v261 += 24;
          --v260;
        }
        while (v260);
      }
      if (v253 >= (uint64_t)(a3[1] - *a3) >> 3)
        break;
      *(_QWORD *)(*a3 + 8 * v253++) = v255;
      v254 = v259;
      if (v253 == v258)
        goto LABEL_238;
    }
LABEL_252:
    abort();
  }
  while (1)
  {
    std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *,false>(v44, (__int128 *)v9, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v44) >> 4)), 1);
    v46 = (__int128 *)v286;
    v45 = v287;
    v44 = (__int128 *)(v287 - 6);
    v48 = *((_OWORD *)v287 - 2);
    v47 = *((_OWORD *)v287 - 1);
    *(_OWORD *)__p = *((_OWORD *)v287 - 3);
    v278 = v48;
    v279 = v47;
    if (v287 - 6 != v286)
      break;
LABEL_83:
    v9 = (float32x2_t *)(v45 - 6);
    v287 = v45 - 6;
LABEL_162:
    if (v44 == (__int128 *)v9)
    {
      v5 = *a1;
      v6 = a1[1];
      v43 = a4;
      goto LABEL_164;
    }
  }
  v49 = (__int128 *)(v287 - 6);
  while (1)
  {
    v50 = (void *)*((_QWORD *)v49 - 6);
    v49 -= 3;
    if (__p[0] != v50
      && re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&__p[1], (float32x2_t *)v44 - 5))
    {
      break;
    }
    v44 = v49;
    if (v49 == v46)
    {
      v44 = v46;
      break;
    }
  }
  if (v44 == (__int128 *)v286)
  {
    v45 = v287;
    goto LABEL_83;
  }
  v51 = *(v44 - 3);
  v52 = *(v44 - 1);
  v275[1] = *(v44 - 2);
  v276 = v52;
  v275[0] = v51;
  re::pathprocessing::Bezier2::removeOverlaps((__int128 *)&__p[1], (_OWORD *)((char *)v275 + 8), &v283, (char **)&v280);
  v53 = (float *)v283;
  v54 = v284;
  if (v283 == v284 && v280 == v281)
    goto LABEL_237;
  if (v280 != v281)
  {
    v55 = v44 - 3;
    v56 = (char *)((char *)v287 - (char *)(v55 + 3));
    if (v287 != (void **)(v55 + 3))
    {
      memmove(v55, v55 + 3, (size_t)(v56 - 4));
      v53 = (float *)v283;
      v54 = v284;
    }
    v287 = (void **)&v56[(_QWORD)v55];
  }
  if (v53 != v54)
    v287 -= 6;
  v58 = (float *)v280;
  v57 = v281;
  if (v280 != v281)
  {
    do
    {
      v59 = (float)(*((float *)&v276 + 2) * *v58) + (float)(*((float *)&v276 + 1) * (float)(1.0 - *v58));
      *v58 = v59;
      v60 = &v41[24 * *(_QWORD *)&v275[0]];
      v62 = (float **)(v60 + 8);
      v61 = (float *)*((_QWORD *)v60 + 1);
      v64 = v60 + 16;
      v63 = *((_QWORD *)v60 + 2);
      if ((unint64_t)v61 >= v63)
      {
        v66 = *(float **)v60;
        v67 = ((uint64_t)v61 - *(_QWORD *)v60) >> 2;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 62)
          goto LABEL_252;
        v69 = v63 - (_QWORD)v66;
        if (v69 >> 1 > v68)
          v68 = v69 >> 1;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v64, v70);
          v61 = *v62;
          v66 = *(float **)v60;
          v59 = *v58;
        }
        else
        {
          v71 = 0;
        }
        v72 = (float *)&v71[4 * v67];
        *v72 = v59;
        v65 = v72 + 1;
        while (v61 != v66)
        {
          v73 = *((_DWORD *)v61-- - 1);
          *((_DWORD *)v72-- - 1) = v73;
        }
        *(_QWORD *)v60 = v72;
        *v62 = v65;
        *v64 = &v71[4 * v70];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *v61 = v59;
        v65 = v61 + 1;
      }
      *v62 = v65;
      ++v58;
    }
    while (v58 != v57);
    v74 = *((float *)&v276 + 1);
    v75 = (float *)v280;
    v76 = v281;
    v77 = (char *)v287;
    if (v280 != v281)
    {
      do
      {
        v78 = v74;
        v74 = *v75;
        v79 = (float32x2_t *)(*a1 + 24 * *(_QWORD *)&v275[0]);
        *(_QWORD *)&v272 = *(_QWORD *)&v275[0];
        re::pathprocessing::Bezier2::curveBetween(v79, v78, v74, (float32x2_t *)&v272 + 1);
        v80 = vsub_f32(*(float32x2_t *)((char *)&v272 + 8), *(float32x2_t *)&v273);
        v81 = vmul_f32(v80, v80);
        v81.i32[0] = vadd_f32(v81, (float32x2_t)vdup_lane_s32((int32x2_t)v81, 1)).u32[0];
        v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        v84 = vmul_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        v85 = vsub_f32(*(float32x2_t *)((char *)&v273 + 8), *(float32x2_t *)&v273);
        v86 = vmul_f32(v85, v85);
        v86.i32[0] = vadd_f32(v86, (float32x2_t)vdup_lane_s32((int32x2_t)v86, 1)).u32[0];
        v87 = vrsqrte_f32((float32x2_t)v86.u32[0]);
        v88 = vmul_f32(v87, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v87, v87)));
        *(_QWORD *)((char *)&v274 + 4) = __PAIR64__(LODWORD(v74), LODWORD(v78));
        *(float *)&v274 = (float)(vaddv_f32(vmul_f32(v84, vmul_n_f32(v85, vmul_f32(v88, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v88, v88))).f32[0])))* 0.5)+ 0.5;
        if (v77 >= (char *)v288)
        {
          v91 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (char *)v286) >> 4);
          v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) > 0x555555555555555)
            goto LABEL_252;
          if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v92)
            v92 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v93 = 0x555555555555555;
          else
            v93 = v92;
          std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v289, v93, v91, (uint64_t)&v288);
          v94 = v291;
          *(_OWORD *)v291 = v272;
          *((_OWORD *)v94 + 1) = v273;
          *((_OWORD *)v94 + 2) = v274;
          v95 = v286;
          v96 = v287;
          v97 = v290;
          if (v287 == v286)
          {
            v95 = v287;
          }
          else
          {
            v98 = v287;
            do
            {
              v99 = *((_OWORD *)v98 - 3);
              v100 = *((_OWORD *)v98 - 2);
              *(_OWORD *)((char *)v97 - 20) = *(_OWORD *)((char *)v98 - 20);
              *((_OWORD *)v97 - 3) = v99;
              *((_OWORD *)v97 - 2) = v100;
              v97 -= 6;
              v98 -= 6;
            }
            while (v98 != v95);
          }
          v77 = (char *)(v94 + 6);
          v286 = v97;
          v287 = v94 + 6;
          v101 = v288;
          v288 = v292;
          v289 = v95;
          v291 = v96;
          v292 = v101;
          v290 = v95;
          if (v96 != v95)
            v291 = (void **)((char *)v96 - 48 - 48 * (((char *)v96 - (char *)v95 - 48) / 0x30uLL));
          if (v95)
            operator delete(v95);
        }
        else
        {
          v89 = v272;
          v90 = v274;
          *((_OWORD *)v77 + 1) = v273;
          *((_OWORD *)v77 + 2) = v90;
          *(_OWORD *)v77 = v89;
          v77 += 48;
        }
        v287 = (void **)v77;
        ++v75;
      }
      while (v75 != v76);
    }
    v102 = (float32x2_t *)(*a1 + 24 * *(_QWORD *)&v275[0]);
    v103 = DWORD2(v276);
    *(_QWORD *)&v272 = *(_QWORD *)&v275[0];
    re::pathprocessing::Bezier2::curveBetween(v102, v74, *((float *)&v276 + 2), (float32x2_t *)&v272 + 1);
    v104 = vsub_f32(*(float32x2_t *)((char *)&v272 + 8), *(float32x2_t *)&v273);
    v105 = vmul_f32(v104, v104);
    v105.i32[0] = vadd_f32(v105, (float32x2_t)vdup_lane_s32((int32x2_t)v105, 1)).u32[0];
    v106 = vrsqrte_f32((float32x2_t)v105.u32[0]);
    v107 = vmul_f32(v106, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v106, v106)));
    v108 = vmul_n_f32(v104, vmul_f32(v107, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v107, v107))).f32[0]);
    v109 = vsub_f32(*(float32x2_t *)((char *)&v273 + 8), *(float32x2_t *)&v273);
    v110 = vmul_f32(v109, v109);
    v110.i32[0] = vadd_f32(v110, (float32x2_t)vdup_lane_s32((int32x2_t)v110, 1)).u32[0];
    v111 = vrsqrte_f32((float32x2_t)v110.u32[0]);
    v112 = vmul_f32(v111, vrsqrts_f32((float32x2_t)v110.u32[0], vmul_f32(v111, v111)));
    *(float *)&v274 = (float)(vaddv_f32(vmul_f32(v108, vmul_n_f32(v109, vmul_f32(v112, vrsqrts_f32((float32x2_t)v110.u32[0], vmul_f32(v112, v112))).f32[0])))* 0.5)+ 0.5;
    *(_QWORD *)((char *)&v274 + 4) = __PAIR64__(v103, LODWORD(v74));
    if (v77 >= (char *)v288)
    {
      v116 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (char *)v286) >> 4);
      v117 = v116 + 1;
      if ((unint64_t)(v116 + 1) > 0x555555555555555)
        goto LABEL_252;
      if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v117)
        v117 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v118 = 0x555555555555555;
      else
        v118 = v117;
      std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v289, v118, v116, (uint64_t)&v288);
      v119 = v291;
      *(_OWORD *)v291 = v272;
      *((_OWORD *)v119 + 1) = v273;
      *((_OWORD *)v119 + 2) = v274;
      v120 = v286;
      v121 = v287;
      v122 = v290;
      if (v287 == v286)
      {
        v120 = v287;
      }
      else
      {
        v123 = v287;
        do
        {
          v124 = *((_OWORD *)v123 - 3);
          v125 = *((_OWORD *)v123 - 2);
          *(_OWORD *)((char *)v122 - 20) = *(_OWORD *)((char *)v123 - 20);
          *((_OWORD *)v122 - 3) = v124;
          *((_OWORD *)v122 - 2) = v125;
          v122 -= 6;
          v123 -= 6;
        }
        while (v123 != v120);
      }
      v115 = v119 + 6;
      v286 = v122;
      v287 = v119 + 6;
      v126 = v288;
      v288 = v292;
      v289 = v120;
      v291 = v121;
      v292 = v126;
      v290 = v120;
      if (v121 != v120)
        v291 = (void **)((char *)v121 - 48 - 48 * (((char *)v121 - (char *)v120 - 48) / 0x30uLL));
      if (v120)
        operator delete(v120);
    }
    else
    {
      v113 = v272;
      v114 = v274;
      *((_OWORD *)v77 + 1) = v273;
      *((_OWORD *)v77 + 2) = v114;
      *(_OWORD *)v77 = v113;
      v115 = (void **)(v77 + 48);
    }
    v287 = v115;
    v53 = (float *)v283;
    v54 = v284;
  }
  if (v53 == v54)
  {
    v9 = (float32x2_t *)v287;
LABEL_161:
    v44 = (__int128 *)v286;
    goto LABEL_162;
  }
  do
  {
    v127 = (float)(*((float *)&v279 + 2) * *v53) + (float)(*((float *)&v279 + 1) * (float)(1.0 - *v53));
    *v53 = v127;
    v128 = &v41[24 * (uint64_t)__p[0]];
    v130 = (float **)(v128 + 8);
    v129 = (float *)*((_QWORD *)v128 + 1);
    v132 = v128 + 16;
    v131 = *((_QWORD *)v128 + 2);
    if ((unint64_t)v129 >= v131)
    {
      v134 = *(float **)v128;
      v135 = ((uint64_t)v129 - *(_QWORD *)v128) >> 2;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 62)
        goto LABEL_252;
      v137 = v131 - (_QWORD)v134;
      if (v137 >> 1 > v136)
        v136 = v137 >> 1;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
        v138 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        v139 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v132, v138);
        v129 = *v130;
        v134 = *(float **)v128;
        v127 = *v53;
      }
      else
      {
        v139 = 0;
      }
      v140 = (float *)&v139[4 * v135];
      *v140 = v127;
      v133 = v140 + 1;
      while (v129 != v134)
      {
        v141 = *((_DWORD *)v129-- - 1);
        *((_DWORD *)v140-- - 1) = v141;
      }
      *(_QWORD *)v128 = v140;
      *v130 = v133;
      *v132 = &v139[4 * v138];
      if (v134)
        operator delete(v134);
    }
    else
    {
      *v129 = v127;
      v133 = v129 + 1;
    }
    *v130 = v133;
    ++v53;
  }
  while (v53 != v54);
  v142 = *((float *)&v279 + 1);
  v143 = (float *)v283;
  v144 = v284;
  if (v283 == v284)
  {
    v145 = *((float *)&v279 + 1);
LABEL_142:
    v169 = *((float *)&v279 + 2);
    if (v145 >= *((float *)&v279 + 2))
      goto LABEL_237;
    v170 = (float32x2_t *)(*a1 + 24 * (uint64_t)__p[0]);
    v171 = (float32x2_t *)v287;
    if (v287 >= (void **)v288)
    {
      v182 = 0xAAAAAAAAAAAAAAABLL * (((char *)v287 - (char *)v286) >> 4);
      v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) > 0x555555555555555)
        goto LABEL_252;
      if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v183)
        v183 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v184 = 0x555555555555555;
      else
        v184 = v183;
      std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v272, v184, v182, (uint64_t)&v288);
      v185 = (float32x2_t *)v273;
      v186 = *((float *)&v279 + 2);
      *(void **)v273 = __p[0];
      re::pathprocessing::Bezier2::curveBetween(v170, v145, v186, v185 + 1);
      v185[5].f32[0] = v186;
      v187 = v185[2];
      v188 = vsub_f32(v185[1], v187);
      v189 = vmul_f32(v188, v188);
      v189.i32[0] = vadd_f32(v189, (float32x2_t)vdup_lane_s32((int32x2_t)v189, 1)).u32[0];
      v190 = vrsqrte_f32((float32x2_t)v189.u32[0]);
      v191 = vmul_f32(v190, vrsqrts_f32((float32x2_t)v189.u32[0], vmul_f32(v190, v190)));
      v192 = vmul_n_f32(v188, vmul_f32(v191, vrsqrts_f32((float32x2_t)v189.u32[0], vmul_f32(v191, v191))).f32[0]);
      v193 = vsub_f32(v185[3], v187);
      v194 = vmul_f32(v193, v193);
      v194.i32[0] = vadd_f32(v194, (float32x2_t)vdup_lane_s32((int32x2_t)v194, 1)).u32[0];
      v195 = vrsqrte_f32((float32x2_t)v194.u32[0]);
      v196 = vmul_f32(v195, vrsqrts_f32((float32x2_t)v194.u32[0], vmul_f32(v195, v195)));
      v185[4].f32[0] = (float)(vaddv_f32(vmul_f32(v192, vmul_n_f32(v193, vmul_f32(v196, vrsqrts_f32((float32x2_t)v194.u32[0], vmul_f32(v196, v196))).f32[0])))* 0.5)+ 0.5;
      v185[4].f32[1] = v145;
      v197 = v286;
      v198 = v287;
      v200 = (char *)*((_QWORD *)&v272 + 1);
      v199 = (float32x2_t *)v273;
      if (v287 == v286)
      {
        v197 = v287;
      }
      else
      {
        v201 = v287;
        do
        {
          v202 = *((_OWORD *)v201 - 3);
          v203 = *((_OWORD *)v201 - 2);
          *(_OWORD *)(v200 - 20) = *(_OWORD *)((char *)v201 - 20);
          *((_OWORD *)v200 - 3) = v202;
          *((_OWORD *)v200 - 2) = v203;
          v200 -= 48;
          v201 -= 6;
        }
        while (v201 != v197);
      }
      v9 = v199 + 6;
      v286 = (void **)v200;
      v287 = (void **)&v199[6];
      v204 = v288;
      v288 = (float32x2_t *)*((_QWORD *)&v273 + 1);
      *(_QWORD *)&v273 = v198;
      *((_QWORD *)&v273 + 1) = v204;
      *(_QWORD *)&v272 = v197;
      *((_QWORD *)&v272 + 1) = v197;
      if (v198 != v197)
        *(_QWORD *)&v273 = (char *)v198 - 48 - 48 * (((char *)v198 - (char *)v197 - 48) / 0x30uLL);
      if (v197)
        operator delete(v197);
    }
    else
    {
      *v287 = __p[0];
      re::pathprocessing::Bezier2::curveBetween(v170, v145, v169, v171 + 1);
      v171[5].f32[0] = v169;
      v172 = v171[2];
      v173 = vsub_f32(v171[1], v172);
      v174 = vmul_f32(v173, v173);
      v174.i32[0] = vadd_f32(v174, (float32x2_t)vdup_lane_s32((int32x2_t)v174, 1)).u32[0];
      v175 = vrsqrte_f32((float32x2_t)v174.u32[0]);
      v176 = vmul_f32(v175, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v175, v175)));
      v174.i32[0] = vmul_f32(v176, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v176, v176))).u32[0];
      v177 = vsub_f32(v171[3], v172);
      v178 = vmul_f32(v177, v177);
      v179 = vmul_n_f32(v173, v174.f32[0]);
      v174.i32[0] = vadd_f32(v178, (float32x2_t)vdup_lane_s32((int32x2_t)v178, 1)).u32[0];
      v180 = vrsqrte_f32((float32x2_t)v174.u32[0]);
      v181 = vmul_f32(v180, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v180, v180)));
      v171[4].f32[0] = (float)(vaddv_f32(vmul_f32(v179, vmul_n_f32(v177, vmul_f32(v181, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v181, v181))).f32[0])))* 0.5)+ 0.5;
      v171[4].f32[1] = v145;
      v9 = v171 + 6;
    }
    v287 = (void **)v9;
    goto LABEL_161;
  }
  while (1)
  {
    v145 = *v143;
    if (*v143 <= v142)
      break;
    v146 = (float32x2_t *)(*a1 + 24 * (uint64_t)__p[0]);
    *(void **)&v272 = __p[0];
    re::pathprocessing::Bezier2::curveBetween(v146, v142, v145, (float32x2_t *)&v272 + 1);
    v147 = vsub_f32(*(float32x2_t *)((char *)&v272 + 8), *(float32x2_t *)&v273);
    v148 = vmul_f32(v147, v147);
    v148.i32[0] = vadd_f32(v148, (float32x2_t)vdup_lane_s32((int32x2_t)v148, 1)).u32[0];
    v149 = vrsqrte_f32((float32x2_t)v148.u32[0]);
    v150 = vmul_f32(v149, vrsqrts_f32((float32x2_t)v148.u32[0], vmul_f32(v149, v149)));
    v148.i32[0] = vmul_f32(v150, vrsqrts_f32((float32x2_t)v148.u32[0], vmul_f32(v150, v150))).u32[0];
    v151 = vsub_f32(*(float32x2_t *)((char *)&v273 + 8), *(float32x2_t *)&v273);
    v152 = vmul_f32(v151, v151);
    v152.i32[0] = vadd_f32(v152, (float32x2_t)vdup_lane_s32((int32x2_t)v152, 1)).u32[0];
    v153 = vmul_n_f32(v147, v148.f32[0]);
    v154 = vrsqrte_f32((float32x2_t)v152.u32[0]);
    v155 = vmul_f32(v154, vrsqrts_f32((float32x2_t)v152.u32[0], vmul_f32(v154, v154)));
    *(_QWORD *)((char *)&v274 + 4) = __PAIR64__(LODWORD(v145), LODWORD(v142));
    *(float *)&v274 = (float)(vaddv_f32(vmul_f32(v153, vmul_n_f32(v151, vmul_f32(v155, vrsqrts_f32((float32x2_t)v152.u32[0], vmul_f32(v155, v155))).f32[0])))* 0.5)+ 0.5;
    v156 = v287;
    if (v287 >= (void **)v288)
    {
      v157 = 0xAAAAAAAAAAAAAAABLL * (((char *)v287 - (char *)v286) >> 4);
      v158 = v157 + 1;
      if ((unint64_t)(v157 + 1) > 0x555555555555555)
        goto LABEL_252;
      if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v158)
        v158 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v159 = 0x555555555555555;
      else
        v159 = v158;
      std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v289, v159, v157, (uint64_t)&v288);
      v160 = v291;
      *(_OWORD *)v291 = v272;
      *((_OWORD *)v160 + 1) = v273;
      *((_OWORD *)v160 + 2) = v274;
      v161 = v286;
      v162 = v287;
      v163 = v290;
      if (v287 == v286)
      {
        v161 = v287;
      }
      else
      {
        v164 = v287;
        do
        {
          v165 = *((_OWORD *)v164 - 3);
          v166 = *((_OWORD *)v164 - 2);
          *(_OWORD *)((char *)v163 - 20) = *(_OWORD *)((char *)v164 - 20);
          *((_OWORD *)v163 - 3) = v165;
          *((_OWORD *)v163 - 2) = v166;
          v163 -= 6;
          v164 -= 6;
        }
        while (v164 != v161);
      }
      v167 = v160 + 6;
      v286 = v163;
      v287 = v160 + 6;
      v168 = v288;
      v288 = v292;
      v289 = v161;
      v291 = v162;
      v292 = v168;
      v290 = v161;
      if (v162 != v161)
        v291 = (void **)((char *)v162 - 48 - 48 * (((char *)v162 - (char *)v161 - 48) / 0x30uLL));
      if (v161)
        operator delete(v161);
      v287 = v167;
    }
    else
    {
      *(_OWORD *)v287 = v272;
      *((_OWORD *)v156 + 1) = v273;
      *((_OWORD *)v156 + 2) = v274;
      v287 = v156 + 6;
    }
    ++v143;
    v142 = v145;
    if (v143 == v144)
      goto LABEL_142;
  }
LABEL_237:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_238:
  if (v280)
  {
    v281 = (float *)v280;
    operator delete(v280);
  }
  if (v283)
  {
    v284 = (float *)v283;
    operator delete(v283);
  }
  if (v41)
  {
    v262 = v268;
    if (v268 != v41)
    {
      v263 = v268;
      do
      {
        v265 = (void *)*((_QWORD *)v263 - 3);
        v263 -= 24;
        v264 = v265;
        if (v265)
        {
          *((_QWORD *)v262 - 2) = v264;
          operator delete(v264);
        }
        v262 = v263;
      }
      while (v263 != v41);
    }
    operator delete(v41);
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
}

void re::pathprocessing::getBezierIslands(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[8];
  __int128 v17;
  _QWORD v18[4];
  std::vector<int> v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void **v23;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v19, 0, sizeof(v19));
  re::pathprocessing::IndexedMesh::flatten(a1, (uint64_t *)&v20, &v19);
  re::pathprocessing::PathTopologyGenerator::getLoops((uint64_t *)&v20, (uint64_t *)&v19, a2, (uint64_t)v16);
  if (v16[0])
  {
    v6 = v17;
    if ((_QWORD)v17 == *((_QWORD *)&v17 + 1))
    {
LABEL_6:
      v8 = v18[0];
      v17 = 0uLL;
      v18[0] = 0;
      *(_BYTE *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v6;
      *(_QWORD *)(a3 + 24) = v8;
      v13 = 0;
      v12 = 0uLL;
      v23 = (void **)&v12;
      std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100](&v23);
    }
    else
    {
      v7 = (_QWORD *)v17;
      while (*v7 != v7[1])
      {
        v7 += 6;
        if (v7 == *((_QWORD **)&v17 + 1))
          goto LABEL_6;
      }
      v9 = v12;
      v10 = v13;
      v11 = v14;
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 4;
      *(_QWORD *)(a3 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
      *(_OWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 40) = v10;
      *(_QWORD *)(a3 + 48) = v11;
    }
  }
  else
  {
    v12 = v17;
    re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)v18);
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 32) = v14;
  }
  re::Result<std::vector<re::pathprocessing::BezierIslandInfo>,re::DetailedError>::~Result((uint64_t)v16);
  if (v19.__begin_)
  {
    v19.__end_ = v19.__begin_;
    operator delete(v19.__begin_);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

_QWORD *std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[48 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *,false>(__int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  __int128 *v22;
  float *v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  BOOL v36;
  __int128 *v37;
  float v38;
  __int128 *v39;
  float v40;
  __int128 *v41;
  float *v42;
  float v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  float v47;
  float v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  BOOL v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  __int128 *v81;
  float v82;
  __int128 *v83;
  uint64_t v84;
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  __int128 *v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  float v103;
  uint64_t v104;
  __int128 *v105;
  __int128 v106;
  __int128 v107;
  __int128 *v109;
  float v110;
  uint64_t v111;
  __int128 v112;
  float v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[32];
  _BYTE v130[32];
  _BYTE v131[32];
  _BYTE v132[32];
  _BYTE v133[32];
  _BYTE v134[32];
  _BYTE v135[32];
  _BYTE v136[32];
  __int128 v137;
  __int128 v138;
  _BYTE v139[32];
  __int128 v140;

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(_OWORD *a1, __int128 *a2, __int128 *a3)
{
  __n128 result;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE v23[20];

  result.n128_u32[0] = *((_DWORD *)a2 + 8);
  v4 = *((float *)a3 + 8);
  if (result.n128_f32[0] >= *((float *)a1 + 8))
  {
    if (v4 < result.n128_f32[0])
    {
      v9 = *a2;
      *(_OWORD *)v20 = a2[1];
      *(_OWORD *)&v20[16] = a2[2];
      v10 = *(__int128 *)((char *)a3 + 28);
      v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(__int128 *)((char *)a2 + 28) = v10;
      *a3 = v9;
      a3[1] = *(_OWORD *)v20;
      result = *(__n128 *)&v20[12];
      *(__int128 *)((char *)a3 + 28) = *(_OWORD *)&v20[12];
      result.n128_u32[0] = *((_DWORD *)a2 + 8);
      if (result.n128_f32[0] < *((float *)a1 + 8))
      {
        v12 = *a1;
        *(_OWORD *)v21 = a1[1];
        *(_OWORD *)&v21[16] = a1[2];
        v13 = *(__int128 *)((char *)a2 + 28);
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *(_OWORD *)((char *)a1 + 28) = v13;
        *a2 = v12;
        a2[1] = *(_OWORD *)v21;
        result = *(__n128 *)&v21[12];
        *(__int128 *)((char *)a2 + 28) = *(_OWORD *)&v21[12];
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f32[0])
    {
      v15 = *a1;
      *(_OWORD *)v22 = a1[1];
      *(_OWORD *)&v22[16] = a1[2];
      v16 = *(__int128 *)((char *)a2 + 28);
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      *(_OWORD *)((char *)a1 + 28) = v16;
      *a2 = v15;
      a2[1] = *(_OWORD *)v22;
      result = *(__n128 *)&v22[12];
      *(__int128 *)((char *)a2 + 28) = *(_OWORD *)&v22[12];
      result.n128_u32[0] = *((_DWORD *)a3 + 8);
      if (result.n128_f32[0] >= *((float *)a2 + 8))
        return result;
      v5 = a2[1];
      v6 = *a2;
      *(_DWORD *)v23 = HIDWORD(v5);
      *(_OWORD *)&v23[4] = a2[2];
      v18 = *(__int128 *)((char *)a3 + 28);
      v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *(__int128 *)((char *)a2 + 28) = v18;
    }
    else
    {
      v5 = a1[1];
      v6 = *a1;
      *(_DWORD *)v23 = HIDWORD(v5);
      *(_OWORD *)&v23[4] = a1[2];
      v7 = *(__int128 *)((char *)a3 + 28);
      v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
      *(_OWORD *)((char *)a1 + 28) = v7;
    }
    *a3 = v6;
    a3[1] = v5;
    result = *(__n128 *)v23;
    *(__int128 *)((char *)a3 + 28) = *(_OWORD *)v23;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(__int128 *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[32];
  _BYTE v37[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 4) < *((float *)a1 + 8))
      {
        v6 = *a1;
        *(_OWORD *)v32 = a1[1];
        *(_OWORD *)&v32[16] = a1[2];
        v7 = *(_OWORD *)(a2 - 5);
        v8 = *((_OWORD *)a2 - 2);
        *a1 = *((_OWORD *)a2 - 3);
        a1[1] = v8;
        *(__int128 *)((char *)a1 + 28) = v7;
        *((_OWORD *)a2 - 3) = v6;
        *((_OWORD *)a2 - 2) = *(_OWORD *)v32;
        *(_OWORD *)(a2 - 5) = *(_OWORD *)&v32[12];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, (__int128 *)a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, a1 + 6, (uint64_t)(a2 - 12));
      return 1;
    case 5uLL:
      v19 = a1 + 3;
      v20 = a1 + 6;
      v21 = a1 + 9;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, a1 + 6, (uint64_t)(a1 + 9));
      if (*(a2 - 4) < *((float *)a1 + 44))
      {
        v22 = *v21;
        *(_OWORD *)v34 = a1[10];
        *(_OWORD *)&v34[16] = a1[11];
        v23 = *(_OWORD *)(a2 - 5);
        v24 = *((_OWORD *)a2 - 2);
        *v21 = *((_OWORD *)a2 - 3);
        a1[10] = v24;
        *(__int128 *)((char *)a1 + 172) = v23;
        *((_OWORD *)a2 - 3) = v22;
        *((_OWORD *)a2 - 2) = *(_OWORD *)v34;
        *(_OWORD *)(a2 - 5) = *(_OWORD *)&v34[12];
        if (*((float *)a1 + 44) < *((float *)a1 + 32))
        {
          v25 = *v20;
          *(_OWORD *)v35 = a1[7];
          *(_OWORD *)&v35[16] = a1[8];
          v26 = a1[10];
          *v20 = *v21;
          a1[7] = v26;
          *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)a1 + 172);
          *v21 = v25;
          a1[10] = *(_OWORD *)v35;
          *(__int128 *)((char *)a1 + 172) = *(_OWORD *)&v35[12];
          if (*((float *)a1 + 32) < *((float *)a1 + 20))
          {
            v27 = *v19;
            *(_OWORD *)v36 = a1[4];
            *(_OWORD *)&v36[16] = a1[5];
            v28 = a1[7];
            *v19 = *v20;
            a1[4] = v28;
            *(__int128 *)((char *)a1 + 76) = *(__int128 *)((char *)a1 + 124);
            *v20 = v27;
            a1[7] = *(_OWORD *)v36;
            *(__int128 *)((char *)a1 + 124) = *(_OWORD *)&v36[12];
            if (*((float *)a1 + 20) < *((float *)a1 + 8))
            {
              v29 = *a1;
              *(_OWORD *)v37 = a1[1];
              *(_OWORD *)&v37[16] = a1[2];
              v30 = a1[4];
              *a1 = *v19;
              a1[1] = v30;
              *(__int128 *)((char *)a1 + 28) = *(__int128 *)((char *)a1 + 76);
              *v19 = v29;
              a1[4] = *(_OWORD *)v37;
              *(__int128 *)((char *)a1 + 76) = *(_OWORD *)&v37[12];
            }
          }
        }
      }
      return 1;
    default:
      v9 = (float *)(a1 + 6);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, a1 + 6);
      v10 = (float *)(a1 + 9);
      if (a1 + 9 == (__int128 *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[8];
    if (v13 < v9[8])
    {
      v31 = *(_OWORD *)v10;
      v33 = *((_OWORD *)v10 + 1);
      v14 = *(_QWORD *)(v10 + 9);
      v15 = v11;
      while (1)
      {
        v16 = (char *)a1 + v15;
        v17 = *(__int128 *)((char *)a1 + v15 + 112);
        *((_OWORD *)v16 + 9) = *(__int128 *)((char *)a1 + v15 + 96);
        *((_OWORD *)v16 + 10) = v17;
        *(_OWORD *)(v16 + 172) = *(__int128 *)((char *)a1 + v15 + 124);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *((float *)v16 + 20))
        {
          v18 = (uint64_t)a1 + v15 + 144;
          goto LABEL_13;
        }
      }
      v18 = (uint64_t)a1;
LABEL_13:
      *(_OWORD *)v18 = v31;
      *(_OWORD *)(v18 + 16) = v33;
      *(float *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 36) = v14;
      if (++v12 == 8)
        return v10 + 12 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 12;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[32];

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a2, a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 32);
  if (result.n128_f32[0] < *((float *)a3 + 8))
  {
    v9 = *a3;
    *(_OWORD *)v18 = a3[1];
    *(_OWORD *)&v18[16] = a3[2];
    v10 = *(_OWORD *)(a4 + 28);
    v11 = *(_OWORD *)(a4 + 16);
    *a3 = *(_OWORD *)a4;
    a3[1] = v11;
    *(__int128 *)((char *)a3 + 28) = v10;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v18;
    result = *(__n128 *)&v18[12];
    *(_OWORD *)(a4 + 28) = *(_OWORD *)&v18[12];
    result.n128_u32[0] = *((_DWORD *)a3 + 8);
    if (result.n128_f32[0] < *((float *)a2 + 8))
    {
      v12 = *a2;
      *(_OWORD *)v19 = a2[1];
      *(_OWORD *)&v19[16] = a2[2];
      v13 = *(__int128 *)((char *)a3 + 28);
      v14 = a3[1];
      *a2 = *a3;
      a2[1] = v14;
      *(__int128 *)((char *)a2 + 28) = v13;
      *a3 = v12;
      a3[1] = *(_OWORD *)v19;
      result = *(__n128 *)&v19[12];
      *(__int128 *)((char *)a3 + 28) = *(_OWORD *)&v19[12];
      result.n128_u32[0] = *((_DWORD *)a2 + 8);
      if (result.n128_f32[0] < *((float *)a1 + 8))
      {
        v15 = *a1;
        *(_OWORD *)v20 = a1[1];
        *(_OWORD *)&v20[16] = a1[2];
        v16 = *(__int128 *)((char *)a2 + 28);
        v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        *(__int128 *)((char *)a1 + 28) = v16;
        *a2 = v15;
        a2[1] = *(_OWORD *)v20;
        result = *(__n128 *)&v20[12];
        *(__int128 *)((char *)a2 + 28) = *(_OWORD *)&v20[12];
      }
    }
  }
  return result;
}

void re::pathprocessing::PathProcessingErrorCategoryImpl::~PathProcessingErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2276933B8);
}

const char *re::pathprocessing::PathProcessingErrorCategoryImpl::name(re::pathprocessing::PathProcessingErrorCategoryImpl *this)
{
  return "PathProcessing error";
}

_QWORD *re::pathprocessing::PathProcessingErrorCategoryImpl::message@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if (a1 > 6)
    v3 = "Unknown PathProcessing error";
  else
    v3 = off_24ED8A3B0[a1];
  return std::string::basic_string[abi:nn180100]<0>(a2, v3);
}

BOOL re::pathprocessing::MathUtils::lexicographicalApproxLess(float *a1, float *a2)
{
  float v2;
  float v3;
  _BOOL8 v4;
  float v5;
  float v6;

  v2 = *a1;
  v3 = *a2;
  if (*a1 != *a2 && vabds_f32(v2, v3) > 0.0001
    || (v4 = 0, v5 = a1[1], v6 = a2[1], v5 != v6) && vabds_f32(v5, v6) > 0.0001)
  {
    v4 = v2 < v3;
    if (v2 == v3)
      return a1[1] < a2[1];
  }
  return v4;
}

void re::pathprocessing::convertPolylineToGeoMath(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v8 = *a1;
  v7 = a1[1];
  v9 = (v7 - *a1) >> 3;
  std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)a2, v6 + v9);
  std::vector<std::vector<unsigned long>>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) + 1);
  v10 = a3[1];
  std::vector<unsigned long>::resize(v10 - 24, v9 + 1);
  if (v7 != v8)
  {
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    v13 = 24 * v6;
    do
    {
      v14 = *a2 + v13;
      *(float64x2_t *)v14 = vcvtq_f64_f32(*(float32x2_t *)(*a1 + 8 * v11));
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(*(_QWORD *)(v10 - 24) + 8 * v11) = v6 + v11;
      ++v11;
      v13 += 24;
    }
    while (v12 != v11);
  }
  *(_QWORD *)(*(_QWORD *)(v10 - 16) - 8) = v6;
}

void re::pathprocessing::triangulateIndexed(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  void *__p[2];
  __int128 v42;
  void **v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61[16];
  int v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  char *v70;
  _BYTE *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LOBYTE(v43) = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v54 = 1065353216;
  v60 = 1065353216;
  memset(v61, 0, sizeof(v61));
  v62 = 1065353216;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(&v43, (uint64_t)&__p[1]);
  if (__p[1])
  {
    *(void **)&v42 = __p[1];
    operator delete(__p[1]);
  }
  re::pathprocessing::convertPolylineToGeoMath(*(uint64_t **)a1, &v67, &v64);
  v4 = *(uint64_t **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) >= 2)
  {
    v5 = 1;
    v6 = 3;
    do
    {
      re::pathprocessing::convertPolylineToGeoMath(&v4[v6], &v67, &v64);
      ++v5;
      v4 = *(uint64_t **)a1;
      v6 += 3;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  }
  if (v67 != v68)
  {
    LOBYTE(v43) = 0;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(&v43, (uint64_t)&v67);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v61[3], v64, v65, 0xAAAAAAAAAAAAAAABLL * ((v65 - v64) >> 3));
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v61, 0, 0, 0);
    if (geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43)
      && geo::math::ConstrainedDelaunayTriangulationMesherDetails::GenerateConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43))
    {
      if (geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeConstrainedDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43, 1))
      {
        geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetMesh((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43, &v73, (uint64_t)&v70);
        v7 = v70;
        if (v71 != v70)
        {
          v8 = 0;
          v9 = (char **)(a2 + 2);
          v10 = (char *)a2[1];
          do
          {
            v11 = &v7[12 * v8];
            v12 = *v9;
            if (v10 >= *v9)
            {
              v14 = (char *)*a2;
              v15 = (uint64_t)&v10[-*a2] >> 2;
              v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 62)
                goto LABEL_68;
              v17 = v12 - v14;
              if (v17 >> 1 > v16)
                v16 = v17 >> 1;
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
                v18 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v18 = v16;
              if (v18)
              {
                v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v18);
                v14 = (char *)*a2;
                v10 = (char *)a2[1];
              }
              else
              {
                v19 = 0;
              }
              v20 = &v19[4 * v15];
              *(_DWORD *)v20 = *(_DWORD *)v11;
              v13 = v20 + 4;
              while (v10 != v14)
              {
                v21 = *((_DWORD *)v10 - 1);
                v10 -= 4;
                *((_DWORD *)v20 - 1) = v21;
                v20 -= 4;
              }
              v12 = &v19[4 * v18];
              *a2 = v20;
              a2[1] = v13;
              a2[2] = v12;
              if (v14)
              {
                operator delete(v14);
                v12 = *v9;
              }
            }
            else
            {
              *(_DWORD *)v10 = *(_DWORD *)v11;
              v13 = v10 + 4;
            }
            a2[1] = v13;
            v22 = &v70[12 * v8 + 4];
            if (v13 >= v12)
            {
              v24 = (char *)*a2;
              v25 = (uint64_t)&v13[-*a2] >> 2;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 62)
                goto LABEL_68;
              v27 = v12 - v24;
              if (v27 >> 1 > v26)
                v26 = v27 >> 1;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
                v28 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
              {
                v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v28);
                v24 = (char *)*a2;
                v13 = (char *)a2[1];
              }
              else
              {
                v29 = 0;
              }
              v30 = &v29[4 * v25];
              *(_DWORD *)v30 = *(_DWORD *)v22;
              v23 = v30 + 4;
              while (v13 != v24)
              {
                v31 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v30 - 1) = v31;
                v30 -= 4;
              }
              v12 = &v29[4 * v28];
              *a2 = v30;
              a2[1] = v23;
              a2[2] = v12;
              if (v24)
              {
                operator delete(v24);
                v12 = *v9;
              }
            }
            else
            {
              *(_DWORD *)v13 = *(_DWORD *)v22;
              v23 = v13 + 4;
            }
            a2[1] = v23;
            v32 = &v70[12 * v8 + 8];
            if (v23 >= v12)
            {
              v33 = (char *)*a2;
              v34 = (uint64_t)&v23[-*a2] >> 2;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
LABEL_68:
                abort();
              v36 = v12 - v33;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v37);
                v33 = (char *)*a2;
                v23 = (char *)a2[1];
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[4 * v34];
              *(_DWORD *)v39 = *(_DWORD *)v32;
              v10 = v39 + 4;
              while (v23 != v33)
              {
                v40 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *a2 = v39;
              a2[1] = v10;
              a2[2] = &v38[4 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_DWORD *)v23 = *(_DWORD *)v32;
              v10 = v23 + 4;
            }
            a2[1] = v10;
            ++v8;
            v7 = v70;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 2) > v8);
        }
      }
    }
  }
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::~ConstrainedDelaunayTriangulationMesherDetails((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43);
  v43 = (void **)v63;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v43);
  v43 = (void **)&v64;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v43);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

uint64_t re::pathprocessing::LineSegment::rangeOverlaps(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  float v12;
  float v13;
  uint64_t result;
  float v15;
  float v16;
  float v17;
  uint64_t v19;
  float v20;
  float v22;
  float v23;
  float v24;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v30;
  float v31;
  uint64_t v33;
  float v34;
  float v36;
  int v37;
  float v38;
  int v39;
  float v40;
  int v41;
  float v42;
  int v43;
  uint64_t v44;

  v37 = 0;
  v39 = 0;
  v36 = a3;
  v38 = a4;
  v40 = a5;
  v41 = 1;
  v43 = 1;
  v42 = a6;
  std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *,false>(&v36, (float *)&v44, 4, 1);
  v12 = v38;
  v13 = v40;
  if (v39 == v41)
  {
LABEL_6:
    if (a1)
    {
      v15 = 0.0;
      v16 = 0.0;
      if (v38 != a3)
      {
        v16 = 0.0;
        if (vabds_f32(a3, v38) > 0.0001)
        {
          v16 = 1.0;
          if (v38 != a4 && vabds_f32(a4, v38) > 0.0001)
          {
            v17 = (float)(v38 - a3) / (float)(a4 - a3);
            v16 = 0.0;
            if (fabsf(v17) >= 0.0001)
            {
              if (fabsf(v17 + -1.0) <= 0.0001 || v17 == 1.0)
                v16 = 1.0;
              else
                v16 = (float)(v38 - a3) / (float)(a4 - a3);
            }
          }
        }
      }
      v19 = *(_QWORD *)(a1 + 8);
      *(float *)(a1 + 4 * v19) = v16;
      if (v13 != a3 && vabds_f32(a3, v13) > 0.0001)
      {
        v15 = 1.0;
        if (v13 != a4 && vabds_f32(a4, v13) > 0.0001)
        {
          v20 = (float)(v13 - a3) / (float)(a4 - a3);
          v15 = 0.0;
          if (fabsf(v20) >= 0.0001)
          {
            v15 = 1.0;
            if (fabsf(v20 + -1.0) > 0.0001 && v20 != 1.0)
              v15 = (float)(v13 - a3) / (float)(a4 - a3);
          }
        }
      }
      *(_QWORD *)(a1 + 8) = v19 + 2;
      *(float *)(a1 + 4 * (v19 + 1)) = v15;
    }
    if (!a2)
      return 1;
    v22 = 0.0;
    v23 = 0.0;
    if (v12 != a5)
    {
      v23 = 0.0;
      if (vabds_f32(a5, v12) > 0.0001)
      {
        v23 = 1.0;
        if (v12 != a6 && vabds_f32(a6, v12) > 0.0001)
        {
          v24 = (float)(v12 - a5) / (float)(a6 - a5);
          v23 = 0.0;
          if (fabsf(v24) >= 0.0001)
          {
            if (fabsf(v24 + -1.0) <= 0.0001 || v24 == 1.0)
              v23 = 1.0;
            else
              v23 = v24;
          }
        }
      }
    }
    v26 = *(_QWORD *)(a2 + 8);
    v27 = v26 + 1;
    *(float *)(a2 + 4 * v26) = v23;
    result = 1;
    if (v13 != a5 && vabds_f32(a5, v13) > 0.0001)
    {
      if (v13 == a6 || vabds_f32(a6, v13) <= 0.0001)
      {
        v22 = 1.0;
      }
      else
      {
        v28 = (float)(v13 - a5) / (float)(a6 - a5);
        if (fabsf(v28) >= 0.0001)
        {
          if (fabsf(v28 + -1.0) <= 0.0001 || v28 == 1.0)
            v22 = 1.0;
          else
            v22 = v28;
        }
      }
    }
    goto LABEL_79;
  }
  if (v38 != v40 && vabds_f32(v38, v40) > 0.0001)
  {
    if (v37 == v39)
      return 0;
    goto LABEL_6;
  }
  if (a1)
  {
    v30 = 0.0;
    if (v38 != a3 && vabds_f32(a3, v38) > 0.0001)
    {
      v30 = 1.0;
      if (v38 != a4 && vabds_f32(a4, v38) > 0.0001)
      {
        v31 = (float)(v38 - a3) / (float)(a4 - a3);
        v30 = 0.0;
        if (fabsf(v31) >= 0.0001)
        {
          v30 = 1.0;
          if (fabsf(v31 + -1.0) > 0.0001 && v31 != 1.0)
            v30 = (float)(v38 - a3) / (float)(a4 - a3);
        }
      }
    }
    v33 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v33 + 1;
    *(float *)(a1 + 4 * v33) = v30;
  }
  if (a2)
  {
    v22 = 0.0;
    if (v12 != a5 && vabds_f32(a5, v12) > 0.0001)
    {
      v22 = 1.0;
      if (v12 != a6 && vabds_f32(a6, v12) > 0.0001)
      {
        v34 = (float)(v12 - a5) / (float)(a6 - a5);
        v22 = 0.0;
        if (fabsf(v34) >= 0.0001)
        {
          if (fabsf(v34 + -1.0) <= 0.0001 || v34 == 1.0)
            v22 = 1.0;
          else
            v22 = v34;
        }
      }
    }
    v27 = *(_QWORD *)(a2 + 8);
    result = 2;
LABEL_79:
    *(_QWORD *)(a2 + 8) = v27 + 1;
    *(float *)(a2 + 4 * v27) = v22;
    return result;
  }
  return 2;
}

uint64_t re::pathprocessing::LineSegment::intersect(float32x2_t *a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  float32x2_t *v4;
  float32x2_t v5;
  float32x2_t v6;
  int32x2_t v7;
  float32x2_t *v8;
  int32x2_t v9;
  float32x2_t v10;
  unsigned __int8 v11;
  const float *v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  float v16;
  float v17;
  uint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  _BOOL4 v23;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t v29;

  v4 = a1 + 1;
  v5 = a1[1];
  v6 = *a1;
  v29 = vsub_f32(v5, *a1);
  v7 = (int32x2_t)vsub_f32(*a2, v6);
  v8 = a2 + 1;
  v9 = (int32x2_t)vsub_f32(a2[1], v6);
  v10 = vabd_f32(v5, v6);
  v11 = vmvn_s8((int8x8_t)vcge_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1))).u8[0];
  v12 = (const float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  v13 = vld1_dup_f32(v12);
  v14 = vdiv_f32(v29, v13);
  v15 = (int32x2_t)vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32(v7, v9), -v14.f32[1]), (float32x2_t)vzip2_s32(v7, v9), v14.f32[0]);
  v16 = fabsf(*(float *)v15.i32);
  v17 = fabsf(*(float *)&v15.i32[1]);
  if (v17 >= 0.0001
    && v16 >= 0.0001
    && (veor_s8((int8x8_t)vdup_lane_s32(v15, 1), (int8x8_t)v15).u32[0] & 0x80000000) == 0)
  {
    return 0;
  }
  v19 = v11 & 1;
  if (v16 < 0.0001 && v17 < 0.0001)
    return re::pathprocessing::LineSegment::rangeOverlaps(a3, a4, a1->f32[v19], v4->f32[v19], a2->f32[v19], v8->f32[v19]);
  v20 = v16 < 0.0001;
  v21 = 0.0;
  if (!v20)
  {
    v21 = 1.0;
    if (v17 >= 0.0001)
      v21 = *(float *)v15.i32 / (float)(*(float *)v15.i32 - *(float *)&v15.i32[1]);
  }
  v22 = (float)((float)((float)(v21 * v8->f32[v19]) + (float)(a2->f32[v19] * (float)(1.0 - v21))) - a1->f32[v19])
      / (float)(v4->f32[v19] - a1->f32[v19]);
  if (v22 < -0.0001)
    return 0;
  v23 = v22 == 1.0;
  if (fabsf(v22 + -1.0) <= 0.0001)
    v23 = 1;
  if (v22 > 1.0 && !v23)
    return 0;
  if (a3)
  {
    v25 = fabsf(v22);
    if (v23)
      v22 = 1.0;
    v26 = 0.0;
    if (v25 >= 0.0001)
      v26 = v22;
    v27 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v27 + 1;
    *(float *)(a3 + 4 * v27) = v26;
  }
  if (a4)
  {
    v28 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v28 + 1;
    *(float *)(a4 + 4 * v28) = v21;
  }
  return 2;
}

float *std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  float v17;
  unint64_t v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  unint64_t v28;
  float *v29;
  float v30;
  int v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  float *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  float v49;
  int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float v60;
  int v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  float *v74;
  float v75;
  int v76;
  float *v77;
  uint64_t v79;
  float v80;
  int v81;
  float *v82;
  uint64_t v83;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v8)
        {
          v35 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v35;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v8, (float *)(v8 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        v36 = (float *)(v8 + 16);
        v37 = (uint64_t *)(v8 + 24);
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (_QWORD *)(v8 + 24));
        if (*(a2 - 2) < *(float *)(v8 + 24))
        {
          v38 = *v37;
          *v37 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v38;
          if (*(float *)v37 < *v36)
          {
            v39 = *(_QWORD *)v36;
            v40 = *v37;
            *(_QWORD *)v36 = *v37;
            *v37 = v39;
            if (*(float *)(v8 + 8) > *(float *)&v40)
            {
              v41 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v40;
              *(_QWORD *)(v8 + 16) = v41;
              if (*(float *)v8 > *(float *)&v40)
              {
                v42 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v40;
                *(_QWORD *)(v8 + 8) = v42;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v43 = (float *)(v8 + 8);
          v45 = (float *)v8 == a2 || v43 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = v8;
              do
              {
                v48 = v43;
                v49 = *(float *)(v47 + 8);
                if (v49 < *(float *)v47)
                {
                  v50 = *(_DWORD *)(v47 + 12);
                  v51 = v46;
                  while (1)
                  {
                    *(_QWORD *)(v8 + v51 + 8) = *(_QWORD *)(v8 + v51);
                    if (!v51)
                      break;
                    v52 = *(float *)(v8 + v51 - 8);
                    v51 -= 8;
                    if (v52 <= v49)
                    {
                      v53 = v8 + v51 + 8;
                      goto LABEL_78;
                    }
                  }
                  v53 = v8;
LABEL_78:
                  *(float *)v53 = v49;
                  *(_DWORD *)(v53 + 4) = v50;
                }
                v43 = v48 + 2;
                v46 += 8;
                v47 = (unint64_t)v48;
              }
              while (v48 + 2 != a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v79 = (uint64_t)v43;
              v80 = *(float *)(v7 + 8);
              if (v80 < *(float *)v7)
              {
                v81 = *(_DWORD *)(v7 + 12);
                do
                {
                  v82 = v43;
                  v83 = *((_QWORD *)v43 - 1);
                  v43 -= 2;
                  *(_QWORD *)v82 = v83;
                }
                while (*(v82 - 4) > v80);
                *v43 = v80;
                *((_DWORD *)v43 + 1) = v81;
              }
              v43 = (float *)(v79 + 8);
              v7 = v79;
            }
            while ((float *)(v79 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v54 = (v10 - 2) >> 1;
            v55 = v54;
            do
            {
              v56 = v55;
              if (v54 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = (float *)(v8 + 8 * v57);
                if (2 * v56 + 2 < (uint64_t)v10 && *v58 < v58[2])
                {
                  v58 += 2;
                  v57 = 2 * v56 + 2;
                }
                v59 = (float *)(v8 + 8 * v56);
                v60 = *v59;
                if (*v58 >= *v59)
                {
                  v61 = *((_DWORD *)v59 + 1);
                  do
                  {
                    v62 = v59;
                    v59 = v58;
                    *(_QWORD *)v62 = *(_QWORD *)v58;
                    if (v54 < v57)
                      break;
                    v63 = 2 * v57;
                    v57 = (2 * v57) | 1;
                    v58 = (float *)(v8 + 8 * v57);
                    v64 = v63 + 2;
                    if (v64 < (uint64_t)v10 && *v58 < v58[2])
                    {
                      v58 += 2;
                      v57 = v64;
                    }
                  }
                  while (*v58 >= v60);
                  *v59 = v60;
                  *((_DWORD *)v59 + 1) = v61;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            v65 = (unint64_t)v9 >> 3;
            do
            {
              v66 = 0;
              v67 = *(_QWORD *)v8;
              v68 = (float *)v8;
              do
              {
                v69 = v68;
                v68 += 2 * v66 + 2;
                v70 = 2 * v66;
                v66 = (2 * v66) | 1;
                v71 = v70 + 2;
                if (v71 < v65 && *v68 < v68[2])
                {
                  v68 += 2;
                  v66 = v71;
                }
                *(_QWORD *)v69 = *(_QWORD *)v68;
              }
              while (v66 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_QWORD *)v68 = v67;
              }
              else
              {
                *(_QWORD *)v68 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v67;
                v72 = (uint64_t)v68 - v8 + 8;
                if (v72 >= 9)
                {
                  v73 = (((unint64_t)v72 >> 3) - 2) >> 1;
                  v74 = (float *)(v8 + 8 * v73);
                  v75 = *v68;
                  if (*v74 < *v68)
                  {
                    v76 = *((_DWORD *)v68 + 1);
                    do
                    {
                      v77 = v68;
                      v68 = v74;
                      *(_QWORD *)v77 = *(_QWORD *)v74;
                      if (!v73)
                        break;
                      v73 = (v73 - 1) >> 1;
                      v74 = (float *)(v8 + 8 * v73);
                    }
                    while (*v74 < v75);
                    *v68 = v75;
                    *((_DWORD *)v68 + 1) = v76;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)(v7 + 8 * (v10 >> 1)), (float *)v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v7, (float *)(v7 + 8 * (v10 >> 1)), a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)(v7 + 8), v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)(v7 + 16), (float *)(v7 + 8 + 8 * v11), a2 - 6);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(v12 - 2, v12, (float *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(float *)v7;
          if (*(float *)(v7 - 8) < *(float *)v7)
            goto LABEL_12;
          if (*(a2 - 2) <= v14)
          {
            v28 = v7 + 8;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 8;
            }
            while (*(float *)v8 <= v14);
          }
          else
          {
            v8 = v7;
            do
            {
              v27 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v27 <= v14);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v30 > v14);
          }
          v31 = *(_DWORD *)(v7 + 4);
          while (v8 < (unint64_t)v29)
          {
            v32 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v29;
            *(_QWORD *)v29 = v32;
            do
            {
              v33 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v33 <= v14);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v34 > v14);
          }
          if (v8 - 8 != v7)
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
          a4 = 0;
          *(float *)(v8 - 8) = v14;
          *(_DWORD *)(v8 - 4) = v31;
          continue;
        }
        v14 = *(float *)v7;
LABEL_12:
        v15 = 0;
        v16 = *(_DWORD *)(v7 + 4);
        do
        {
          v17 = *(float *)(v7 + v15 + 8);
          v15 += 8;
        }
        while (v17 < v14);
        v18 = v7 + v15;
        v19 = a2;
        if (v15 == 8)
        {
          v19 = a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (v20 >= v14);
        }
        v8 = v7 + v15;
        if (v18 < (unint64_t)v19)
        {
          v22 = v19;
          do
          {
            v23 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v22;
            *(_QWORD *)v22 = v23;
            do
            {
              v24 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v24 < v14);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (v25 >= v14);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 8 != v7)
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
        *(float *)(v8 - 8) = v14;
        *(_DWORD *)(v8 - 4) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_31:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *,false>(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(v7, v8 - 8);
        result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_31;
        }
        a2 = (float *)(v8 - 8);
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)result;
    if (v4 >= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (*a3 >= *(float *)&v5)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      v16 = (float *)(a1 + 16);
      v17 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a1 + 24));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        v18 = *v17;
        *v17 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v18;
        if (*(float *)v17 < *v16)
        {
          v19 = *(_QWORD *)v16;
          v20 = *v17;
          *(_QWORD *)v16 = *v17;
          *v17 = v19;
          if (*(float *)(a1 + 8) > *(float *)&v20)
          {
            v21 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;
            *(_QWORD *)(a1 + 16) = v21;
            if (*(float *)a1 > *(float *)&v20)
            {
              v22 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v20;
              *(_QWORD *)(a1 + 8) = v22;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(float *a1, float *a2, float *a3, _QWORD *a4)
{
  float *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

void CGImageDecoderFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
}

const void *CGPerspectiveCommandsDecode(const __CFData *a1)
{
  const void *v2;

  if (!a1)
    return 0;
  v2 = (const void *)CGPerspectiveCommandsCreate();
  if ((CGPerspectiveCommandsDecodeFromData((uint64_t)v2, a1, 0) & 1) == 0 && v2)
  {
    CFRelease(v2);
    return 0;
  }
  return v2;
}

void CGPerspectiveColorCacheRelease(CFTypeRef *a1)
{
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
  free(a1);
}

uint64_t CGPerspectiveColorCacheDecodeCGColor(uint64_t a1, CGColorRef *a2)
{
  uint64_t result;
  __CFDictionary **v5;
  const __CFDictionary *v6;
  CFNumberRef v7;
  CGColorRef *Value;
  NSObject *v9;
  const char *v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int a_low;
  CGPattern *v16;
  CGColorSpace *v17;
  CGColorRef v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  CGAffineTransform *p_matrix;
  NSObject *v26;
  uint32_t v27;
  unint64_t v28;
  CGColorSpaceRef space;
  CGFloat v30;
  CFTypeRef cf;
  CGFloat v32;
  CGFloat v33;
  CGRect image;
  CGPatternTiling tiling;
  CGAffineTransform matrix;
  CGAffineTransform valuePtr;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v30 = NAN;
  result = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v30, 8uLL);
  if (!(_DWORD)result)
    return result;
  v5 = *(__CFDictionary ***)(a1 + 48);
  v6 = *v5;
  valuePtr.a = v30;
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberCFIndexType, &valuePtr);
  Value = (CGColorRef *)CFDictionaryGetValue(v6, v7);
  CFRelease(v7);
  if (Value)
  {
    *a2 = CGColorRetain(Value[3]);
    return 1;
  }
  space = 0;
  result = DecodeCGColorSpace(a1, &space);
  if (!(_DWORD)result)
    return result;
  v28 = 0;
  result = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v28, 8uLL);
  if (!(_DWORD)result)
    return result;
  if (v28 < 0x101)
  {
    v11 = 8 * v28;
    v12 = malloc_type_calloc(8 * v28, 1uLL, 0xF5ACDC3uLL);
    result = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), v12, v11);
    if (!(_DWORD)result)
      return result;
    v13 = *(_QWORD *)(a1 + 16);
    LOBYTE(valuePtr.a) = 0;
    if (!CGPerspectiveDataDecode_bytes(v13, &valuePtr, 1uLL))
      return 0;
    if (!LOBYTE(valuePtr.a))
    {
      v17 = space;
      v18 = CGColorCreate(space, (const CGFloat *)v12);
      goto LABEL_29;
    }
    v14 = *(_QWORD *)(a1 + 16);
    LOBYTE(valuePtr.a) = 0;
    if (CGPerspectiveDataDecode_bytes(v14, &valuePtr, 1uLL))
    {
      a_low = LOBYTE(valuePtr.a);
      tiling = kCGPatternTilingNoDistortion;
      v16 = 0;
      if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &tiling, 4uLL)
        || tiling > kCGPatternTilingConstantSpacing)
      {
        goto LABEL_28;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      if (CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &valuePtr, 0x30uLL))
      {
        if (a_low)
        {
          image.origin.x = 0.0;
          if ((DecodeCGImage(a1, (CGImageRef *)&image) & 1) != 0)
          {
            if (*(_QWORD *)&image.origin.x)
            {
              matrix = valuePtr;
              v16 = (CGPattern *)CGPatternCreateWithImage2();
              CGImageRelease(*(CGImageRef *)&image.origin.x);
LABEL_28:
              v17 = space;
              v18 = CGColorCreateWithPattern(space, v16, (const CGFloat *)v12);
              CGPatternRelease(v16);
LABEL_29:
              free(v12);
              CGColorSpaceRelease(v17);
              if (v18)
              {
                SetDecodeCacheEntry(*v5, *(uint64_t *)&v30, v18);
                *a2 = v18;
                return 1;
              }
              if (__CGPerspectiveOSLog_onceToken == -1)
              {
                v9 = __CGPerspectiveOSLog_log;
                result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!(_DWORD)result)
                  return result;
              }
              else
              {
                dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                v9 = __CGPerspectiveOSLog_log;
                result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!(_DWORD)result)
                  return result;
              }
              LOWORD(valuePtr.a) = 0;
              v10 = "Fatal: Failed to create color";
              goto LABEL_11;
            }
            if (__CGPerspectiveOSLog_onceToken != -1)
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              v23 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_27;
              goto LABEL_42;
            }
            v23 = __CGPerspectiveOSLog_log;
            if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            {
LABEL_42:
              LOWORD(matrix.a) = 0;
              v24 = "Expected image was missing";
LABEL_50:
              p_matrix = &matrix;
              v26 = v23;
              v27 = 2;
LABEL_58:
              _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, v24, (uint8_t *)p_matrix, v27);
            }
LABEL_27:
            v16 = 0;
            goto LABEL_28;
          }
          if (__CGPerspectiveOSLog_onceToken == -1)
          {
            v19 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
          }
          else
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v19 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
          }
          LODWORD(matrix.a) = 136315650;
          *(_QWORD *)((char *)&matrix.a + 4) = "Failed to decode image";
          WORD2(matrix.b) = 2080;
          *(_QWORD *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveConte"
                                               "xt/CGPerspectiveContext/CGPerspectiveColorCache.c";
          HIWORD(matrix.c) = 1024;
          LODWORD(matrix.d) = 767;
          v24 = "%s in file %s (line %i)";
        }
        else
        {
          memset(&image, 0, sizeof(image));
          if (CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &image, 0x20uLL))
          {
            v32 = 0.0;
            v33 = 0.0;
            if (CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v32, 0x10uLL))
            {
              v20 = *(_QWORD *)(a1 + 16);
              LOBYTE(matrix.a) = 0;
              if (CGPerspectiveDataDecode_bytes(v20, &matrix, 1uLL))
              {
                v21 = LOBYTE(matrix.a);
                cf = 0;
                if (CGPerspectiveDataDecode_CFData(*(_QWORD *)(a1 + 16), (__CFData **)&cf))
                {
                  v22 = (void *)CGPerspectiveCommandsDecode(cf);
                  CFRelease(cf);
                  if (v22)
                  {
                    matrix = valuePtr;
                    v16 = CGPatternCreate(v22, image, &matrix, v32, v33, tiling, v21 != 0, &DecodeCGPattern_callbacks);
                    goto LABEL_28;
                  }
                  if (__CGPerspectiveOSLog_onceToken == -1)
                  {
                    v23 = __CGPerspectiveOSLog_log;
                    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                      goto LABEL_27;
                  }
                  else
                  {
                    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                    v23 = __CGPerspectiveOSLog_log;
                    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                      goto LABEL_27;
                  }
                  LOWORD(matrix.a) = 0;
                  v24 = "Invalid embedded commands";
                  goto LABEL_50;
                }
                if (__CGPerspectiveOSLog_onceToken == -1)
                {
                  v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                }
                else
                {
                  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                  v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                }
                LODWORD(matrix.a) = 136315650;
                *(_QWORD *)((char *)&matrix.a + 4) = "Invalid embedded commands";
                WORD2(matrix.b) = 2080;
                *(_QWORD *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiv"
                                                     "eContext/CGPerspectiveContext/CGPerspectiveColorCache.c";
                HIWORD(matrix.c) = 1024;
                LODWORD(matrix.d) = 789;
                v24 = "%s in file %s (line %i)";
              }
              else
              {
                if (__CGPerspectiveOSLog_onceToken == -1)
                {
                  v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                }
                else
                {
                  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                  v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                }
                LODWORD(matrix.a) = 136315650;
                *(_QWORD *)((char *)&matrix.a + 4) = "Invalid BOOL";
                WORD2(matrix.b) = 2080;
                *(_QWORD *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiv"
                                                     "eContext/CGPerspectiveContext/CGPerspectiveColorCache.c";
                HIWORD(matrix.c) = 1024;
                LODWORD(matrix.d) = 786;
                v24 = "%s in file %s (line %i)";
              }
            }
            else
            {
              if (__CGPerspectiveOSLog_onceToken == -1)
              {
                v19 = __CGPerspectiveOSLog_log;
                if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                  goto LABEL_27;
              }
              else
              {
                dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                v19 = __CGPerspectiveOSLog_log;
                if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                  goto LABEL_27;
              }
              LODWORD(matrix.a) = 136315650;
              *(_QWORD *)((char *)&matrix.a + 4) = "Invalid step";
              WORD2(matrix.b) = 2080;
              *(_QWORD *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveC"
                                                   "ontext/CGPerspectiveContext/CGPerspectiveColorCache.c";
              HIWORD(matrix.c) = 1024;
              LODWORD(matrix.d) = 783;
              v24 = "%s in file %s (line %i)";
            }
          }
          else
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v19 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_27;
            }
            else
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              v19 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_27;
            }
            LODWORD(matrix.a) = 136315650;
            *(_QWORD *)((char *)&matrix.a + 4) = "Invalid bounds";
            WORD2(matrix.b) = 2080;
            *(_QWORD *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveCon"
                                                 "text/CGPerspectiveContext/CGPerspectiveColorCache.c";
            HIWORD(matrix.c) = 1024;
            LODWORD(matrix.d) = 780;
            v24 = "%s in file %s (line %i)";
          }
        }
      }
      else
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v19 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_27;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v19 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_27;
        }
        LODWORD(matrix.a) = 136315650;
        *(_QWORD *)((char *)&matrix.a + 4) = "Invalid transform";
        WORD2(matrix.b) = 2080;
        *(_QWORD *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext"
                                             "/CGPerspectiveContext/CGPerspectiveColorCache.c";
        HIWORD(matrix.c) = 1024;
        LODWORD(matrix.d) = 763;
        v24 = "%s in file %s (line %i)";
      }
      p_matrix = &matrix;
    }
    else
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v19 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v19 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
      }
      LODWORD(valuePtr.a) = 136315650;
      *(_QWORD *)((char *)&valuePtr.a + 4) = "Invalid flag";
      WORD2(valuePtr.b) = 2080;
      *(_QWORD *)((char *)&valuePtr.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext"
                                             "/CGPerspectiveContext/CGPerspectiveColorCache.c";
      HIWORD(valuePtr.c) = 1024;
      LODWORD(valuePtr.d) = 757;
      v24 = "%s in file %s (line %i)";
      p_matrix = &valuePtr;
    }
    v26 = v19;
    v27 = 28;
    goto LABEL_58;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v9 = __CGPerspectiveOSLog_log;
    result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
LABEL_10:
      LOWORD(valuePtr.a) = 0;
      v10 = "Negative or large color component count";
LABEL_11:
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&valuePtr, 2u);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v9 = __CGPerspectiveOSLog_log;
    result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  return result;
}

uint64_t DecodeCGColorSpace(uint64_t a1, CGColorSpaceRef *a2)
{
  uint64_t result;
  uint64_t v5;
  const __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CGColorSpaceRef *Value;
  _BOOL4 v10;
  const __CFString **v11;
  NSObject *v12;
  const char *v13;
  uint8_t *p_data;
  uint64_t v15;
  int v16;
  CGColorSpace *v17;
  uint64_t v18;
  CFPropertyListRef v19;
  CGColorSpaceRef Pattern;
  const __CFString *v21;
  CGColorSpaceRef v22;
  CGColorSpace *v23;
  unsigned int NumberOfComponents;
  NSObject *v25;
  size_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint8_t v29[12];
  unsigned int v30;
  CFDataRef data;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t valuePtr;

  v34 = -1;
  result = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v34, 8uLL);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(const __CFDictionary **)(v5 + 8);
    valuePtr = v34;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberCFIndexType, &valuePtr);
    Value = (CGColorSpaceRef *)CFDictionaryGetValue(v6, v8);
    CFRelease(v8);
    if (Value)
    {
      *a2 = CGColorSpaceRetain(Value[3]);
      return 1;
    }
    v33 = 0;
    v10 = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v33, 1uLL);
    result = 0;
    if (v10)
    {
      if (v33 != -1)
      {
        switch(v33)
        {
          case 0:
            v11 = (const __CFString **)MEMORY[0x24BDBF288];
            goto LABEL_64;
          case 1:
            v11 = (const __CFString **)MEMORY[0x24BDBF2A0];
            goto LABEL_64;
          case 2:
            v11 = (const __CFString **)MEMORY[0x24BDBF280];
            goto LABEL_64;
          case 3:
            v11 = (const __CFString **)MEMORY[0x24BDBF228];
            goto LABEL_64;
          case 4:
            v11 = (const __CFString **)MEMORY[0x24BDBF2A8];
            goto LABEL_64;
          case 5:
            v11 = (const __CFString **)MEMORY[0x24BDBF218];
            goto LABEL_64;
          case 6:
            v11 = (const __CFString **)MEMORY[0x24BDBF318];
            goto LABEL_64;
          case 7:
            v11 = (const __CFString **)MEMORY[0x24BDBF290];
            goto LABEL_64;
          case 8:
            v11 = (const __CFString **)MEMORY[0x24BDBF2B0];
            goto LABEL_64;
          case 9:
            v11 = (const __CFString **)MEMORY[0x24BDBF298];
            goto LABEL_64;
          case 10:
            v11 = (const __CFString **)MEMORY[0x24BDBF210];
            goto LABEL_64;
          case 11:
            v11 = (const __CFString **)MEMORY[0x24BDBF2D8];
            goto LABEL_64;
          case 12:
            v11 = (const __CFString **)MEMORY[0x24BDBF2E8];
            goto LABEL_64;
          case 13:
            v11 = (const __CFString **)MEMORY[0x24BDBF2E0];
            goto LABEL_64;
          case 14:
            v11 = (const __CFString **)MEMORY[0x24BDBF2B8];
            goto LABEL_64;
          case 15:
            v11 = (const __CFString **)MEMORY[0x24BDBF2C0];
            goto LABEL_64;
          case 16:
            v11 = (const __CFString **)MEMORY[0x24BDBF310];
            goto LABEL_64;
          case 17:
            v11 = (const __CFString **)MEMORY[0x24BDBF220];
            goto LABEL_64;
          case 18:
            v11 = (const __CFString **)MEMORY[0x24BDBF250];
            goto LABEL_64;
          case 19:
            v11 = (const __CFString **)MEMORY[0x24BDBF268];
            goto LABEL_64;
          case 20:
            v11 = (const __CFString **)MEMORY[0x24BDBF240];
            goto LABEL_64;
          case 21:
            v11 = (const __CFString **)MEMORY[0x24BDBF258];
            goto LABEL_64;
          case 22:
            v11 = (const __CFString **)MEMORY[0x24BDBF2D0];
            goto LABEL_64;
          case 23:
            v11 = (const __CFString **)MEMORY[0x24BDBF2C8];
            goto LABEL_64;
          case 24:
            v11 = (const __CFString **)MEMORY[0x24BDBF238];
            goto LABEL_64;
          case 25:
            v11 = (const __CFString **)MEMORY[0x24BDBF230];
            goto LABEL_64;
          case 26:
            v11 = (const __CFString **)MEMORY[0x24BDBF278];
            goto LABEL_64;
          case 27:
            v11 = (const __CFString **)MEMORY[0x24BDBF308];
            goto LABEL_64;
          case 28:
            v11 = (const __CFString **)MEMORY[0x24BDBF270];
            goto LABEL_64;
          case 29:
            v11 = (const __CFString **)MEMORY[0x24BDBF248];
            goto LABEL_64;
          case 30:
            v11 = (const __CFString **)MEMORY[0x24BDBF2F8];
            goto LABEL_64;
          case 31:
            v11 = (const __CFString **)MEMORY[0x24BDBF260];
LABEL_64:
            v21 = *v11;
            break;
          default:
            v21 = 0;
            break;
        }
        v22 = CGColorSpaceCreateWithName(v21);
        *a2 = v22;
        SetDecodeCacheEntry(*(__CFDictionary **)(v5 + 8), v34, v22);
        return 1;
      }
      v32 = -1;
      CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v32, 4uLL);
      valuePtr = 0;
      if (v32 == 6)
      {
        v15 = *(_QWORD *)(a1 + 16);
        LOBYTE(data) = 0;
        if (!CGPerspectiveDataDecode_bytes(v15, &data, 1uLL))
          return 0;
        v16 = data;
        data = 0;
        if (v16)
        {
          result = DecodeCGColorSpace(a1, &data);
          if (!(_DWORD)result)
            return result;
          v17 = data;
        }
        else
        {
          v17 = 0;
        }
        Pattern = CGColorSpaceCreatePattern(v17);
        valuePtr = (uint64_t)Pattern;
        CGColorSpaceRelease(v17);
      }
      else if (v32 == 5)
      {
        data = 0;
        if ((DecodeCGColorSpace(a1, &data) & 1) == 0)
          return 0;
        v30 = 0;
        if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v30, 4uLL))
          return 0;
        if (v30 >= 0x101)
        {
          if (__CGPerspectiveOSLog_onceToken != -1)
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v12 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              return 0;
            goto LABEL_17;
          }
          v12 = __CGPerspectiveOSLog_log;
          if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          {
LABEL_17:
            *(_WORD *)v29 = 0;
            v13 = "Out of bounds color count";
LABEL_18:
            p_data = v29;
LABEL_79:
            _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, v13, p_data, 2u);
          }
          return 0;
        }
        v23 = data;
        NumberOfComponents = CGColorSpaceGetNumberOfComponents(data);
        if (NumberOfComponents >= 0x101uLL)
        {
          if (__CGPerspectiveOSLog_onceToken == -1)
          {
            v25 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            {
LABEL_69:
              CGColorSpaceRelease(v23);
              return 0;
            }
          }
          else
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v25 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_69;
          }
          *(_WORD *)v29 = 0;
          _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Negative or large color component count", v29, 2u);
          goto LABEL_69;
        }
        v26 = v30 * NumberOfComponents;
        v27 = (unsigned __int8 *)malloc_type_calloc(v26, 1uLL, 0xB0CA1E17uLL);
        if (!v27)
        {
          if (__CGPerspectiveOSLog_onceToken == -1)
          {
            v12 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              return 0;
          }
          else
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v12 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              return 0;
          }
          *(_WORD *)v29 = 0;
          v13 = "Failed to allocate buffer for color table.";
          goto LABEL_18;
        }
        v28 = v27;
        if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), v27, v26))
          return 0;
        Pattern = CGColorSpaceCreateIndexed(v23, v30 - 1, v28);
        valuePtr = (uint64_t)Pattern;
        CGColorSpaceRelease(v23);
        free(v28);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 16);
        LOBYTE(data) = 0;
        if (!CGPerspectiveDataDecode_bytes(v18, &data, 1uLL))
          return 0;
        if ((_BYTE)data)
        {
          data = 0;
          result = CGPerspectiveDataDecode_CFData(*(_QWORD *)(a1 + 16), &data);
          if (!(_DWORD)result)
            return result;
          v19 = CFPropertyListCreateWithData(v7, data, 0, 0, 0);
          CFRelease(data);
          if (v19)
          {
            Pattern = CGColorSpaceCreateWithPropertyList(v19);
            valuePtr = (uint64_t)Pattern;
            CFRelease(v19);
          }
          else
          {
            Pattern = 0;
          }
        }
        else
        {
          result = DecodeCGColorSpace(a1, &valuePtr);
          if (!(_DWORD)result)
            return result;
          Pattern = (CGColorSpaceRef)valuePtr;
        }
      }
      if (Pattern)
      {
        SetDecodeCacheEntry(*(__CFDictionary **)(v5 + 8), v34, Pattern);
        *a2 = Pattern;
        return 1;
      }
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v12 = __CGPerspectiveOSLog_log;
        result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
LABEL_78:
          LOWORD(data) = 0;
          v13 = "Failed to decode color space";
          p_data = (uint8_t *)&data;
          goto LABEL_79;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v12 = __CGPerspectiveOSLog_log;
        result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
          goto LABEL_78;
      }
    }
  }
  return result;
}

void CacheEntryFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

void SetDecodeCacheEntry(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  CFNumberRef v5;
  uint64_t v6;
  _QWORD *Instance;
  uint64_t valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberCFIndexType, &valuePtr);
  v6 = valuePtr;
  if (qword_254123A00 != -1)
    dispatch_once(&qword_254123A00, &__block_literal_global_52);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  Instance[2] = v6;
  Instance[3] = CFRetain(a3);
  CFDictionarySetValue(a1, v5, Instance);
  CFRelease(Instance);
  CFRelease(v5);
}

void _drawPatternCallback(uint64_t a1, CGContext *a2)
{
  DrawPerspectiveCommands(a2, a1, 0);
}

void _releaseInfoCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

__CFString *CGPerspectiveCommandsCreateDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  CGPerspectiveCommandsAppendDebugDesc(Mutable, a1);
  return Mutable;
}

void CGPerspectiveCommandsAppendDebugDesc(__CFString *a1, uint64_t a2)
{
  uint64_t v2;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  CGColorSpaceRef v7;
  CFStringRef v8;
  int v9;
  const __CFString *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const __CFArray *Copy;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v21;
  const char *v22;
  const char *v23;
  const char *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  const char *v28;
  CFStringRef v29;
  const __CFString *v30;
  unsigned int v31;
  const char *v32;
  _QWORD *v33;
  CFStringRef v34;
  const __CFString *v35;
  uint64_t v36;
  int v37;
  const char *v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  CFStringRef v43;
  const __CFString *v44;
  CFStringRef v45;
  const __CFString *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  CFIndex Count;
  char __str[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v2 = a2;
  v87 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 72));
  v4 = CFArrayGetCount(*(CFArrayRef *)(v2 + 64));
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = CGColorSpaceRetain(*(CGColorSpaceRef *)(v2 + 48));
  v8 = CFCopyDescription(v7);
  CGColorSpaceRelease(v7);
  v9 = *(_DWORD *)(v2 + 80);
  if (v8)
    v10 = v8;
  else
    v10 = CFSTR("none");
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  if ((v9 & 1) != 0)
    v11 = "has deep color content";
  else
    v11 = "no deep color content";
  v81 = 0uLL;
  v82 = 0uLL;
  v79 = 0uLL;
  v80 = 0uLL;
  v77 = 0uLL;
  v78 = 0uLL;
  v75 = 0uLL;
  v76 = 0uLL;
  v73 = 0uLL;
  v74 = 0uLL;
  v71 = 0uLL;
  v72 = 0uLL;
  v69 = 0uLL;
  v70 = 0uLL;
  v67 = 0uLL;
  v68 = 0uLL;
  v65 = 0uLL;
  v66 = 0uLL;
  v63 = 0uLL;
  v64 = 0uLL;
  v61 = 0uLL;
  v62 = 0uLL;
  v59 = 0uLL;
  v60 = 0uLL;
  v57 = 0uLL;
  v58 = 0uLL;
  memset(__str, 0, sizeof(__str));
  if ((v9 & 8) != 0)
  {
    snprintf(__str, 0x200uLL, "has pixel format %d", *(_DWORD *)(v2 + 56));
    v9 = *(_DWORD *)(v2 + 80);
  }
  else
  {
    strcpy(__str, "has no explicit pixel format");
  }
  v12 = "alpha-only image";
  if ((v9 & 0x10) == 0)
    v12 = "not alpha-only";
  v13 = "has unsupported content";
  if ((v9 & 2) == 0)
    v13 = "has fully supported content";
  if ((v9 & 4) != 0)
    v14 = "has visible vector content";
  else
    v14 = "no visible vector content";
  CFStringAppendFormat(a1, 0, CFSTR("CGPerspectiveCommandsRef %p: %ld commands, %ld resources, canvas size %.2f x %.2f, color space <%@>, %s, %s, %s, %s, %s\n"), v2, Count, v4, v5, v6, v10, v11, __str, v12, v13, v14);
  CFRelease(v10);
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFArrayRef *)(v2 + 88));
  if (Copy)
  {
    v16 = Copy;
    v17 = CFArrayGetCount(Copy);
    if (v17 >= 1)
    {
      v18 = v17;
      CFStringAppendFormat(a1, 0, CFSTR("Errors: (%ld)\n"), v17);
      for (i = 0; i != v18; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, i);
        CFStringAppendFormat(a1, 0, CFSTR("%zu: \"%@\"\n"), i, ValueAtIndex);
      }
    }
    CFRelease(v16);
  }
  CFStringAppendFormat(a1, 0, CFSTR("Commands: %d total\n\n"), Count);
  if (Count >= 1)
  {
    v21 = 0;
    v54 = v2;
    do
    {
      v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 72), v21);
      v26 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 64), *v25);
      CFStringAppendFormat(a1, 0, CFSTR("Command %ld (resource %ld):\n"), v21, *v25);
      v27 = *v26;
      v28 = "<unknown>";
      if (v27 <= 5)
        v28 = off_24ED8A5F0[v27];
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", v28);
      PrintCGRect(a1, (uint64_t)"Frame", (CGRect *)(v25 + 1));
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f %.2f %.2f %.2f %.2f\n"), "Transform", v25[5], v25[6], v25[7], v25[8], v25[9], v25[10]);
      v29 = CFCopyDescription((CFTypeRef)v25[11]);
      if (v29)
        v30 = v29;
      else
        v30 = CFSTR("none");
      CFStringAppendFormat(a1, 0, CFSTR("%s: %@\n"), "FillColor", v30);
      CFRelease(v30);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "DrawingMode", PrintCGPathDrawingMode_kCGPathDrawingModeNames[*((int *)v25 + 24)]);
      PrintCGRect(a1, (uint64_t)"ImageRect", (CGRect *)(v25 + 13));
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f %.2f %.2f %.2f %.2f\n"), "BaseTransform", v25[17], v25[18], v25[19], v25[20], v25[21], v25[22]);
      v31 = *((_DWORD *)v25 + 46) + 1;
      v32 = "<unknown>";
      if (v31 <= 0x1C)
        v32 = off_24ED8A620[v31];
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "BlendMode", v32);
      v33 = (_QWORD *)v25[24];
      if (v33)
      {
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ShadowStyle.elevation", v33[1]);
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ShadowStyle.azimuth", v33[2]);
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ShadowStyle.ambient", v33[3]);
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ShadowStyle.height", v33[4]);
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ShadowStyle.radius", v33[5]);
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ShadowStyle.saturation", v33[6]);
      }
      else
      {
        CFStringAppend(a1, CFSTR("ShadowStyle: none\n"));
      }
      v34 = CFCopyDescription((CFTypeRef)v25[25]);
      if (v34)
        v35 = v34;
      else
        v35 = CFSTR("none");
      CFStringAppendFormat(a1, 0, CFSTR("%s: %@\n"), "ShadowColor", v35);
      CFRelease(v35);
      v36 = v25[26];
      if (v36)
      {
        v37 = *(_DWORD *)(v36 + 4);
        v38 = "kCGFocusRingTintGraphite";
        if (v37 != 1)
          v38 = "<unknown>";
        v39 = v37 == 0;
        v40 = "kCGFocusRingTintBlue";
        if (!v39)
          v40 = v38;
        CFStringAppendFormat(a1, 0, CFSTR("FocusStyle.tint: %s\n"), v40);
        v41 = *(int *)(v36 + 8);
        v42 = "<unknown>";
        if (v41 <= 2)
          v42 = off_24ED8A708[v41];
        CFStringAppendFormat(a1, 0, CFSTR("FocusStyle.ordering: %s\n"), v42);
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "FocusStyle.alpha", *(_QWORD *)(v36 + 16));
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "FocusStyle.radius", *(_QWORD *)(v36 + 24));
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "FocusStyle.threshold", *(_QWORD *)(v36 + 32));
        PrintCGRect(a1, (uint64_t)"FocusStyle.bounds", (CGRect *)(v36 + 40));
        CFStringAppendFormat(a1, 0, CFSTR("FocusStyle.accumulate: %d\n"), *(unsigned int *)(v36 + 72));
      }
      else
      {
        CFStringAppend(a1, CFSTR("FocusStyle: none\n"));
      }
      v43 = CFCopyDescription((CFTypeRef)v25[27]);
      if (v43)
        v44 = v43;
      else
        v44 = CFSTR("none");
      CFStringAppendFormat(a1, 0, CFSTR("%s: %@\n"), "FocusColor", v44);
      CFRelease(v44);
      v45 = CFCopyDescription((CFTypeRef)v25[28]);
      if (v45)
        v46 = v45;
      else
        v46 = CFSTR("none");
      CFStringAppendFormat(a1, 0, CFSTR("%s: %@\n"), "StrokeColor", v46);
      CFRelease(v46);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "LineWidth", v25[29]);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "LineWidthThreshold", v25[30]);
      v47 = *((int *)v25 + 62);
      v48 = "<unknown>";
      if (v47 <= 2)
        v48 = off_24ED8A720[v47];
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "LineJoin", v48);
      v49 = *((int *)v25 + 63);
      v50 = "<unknown>";
      if (v49 <= 2)
        v50 = off_24ED8A738[v49];
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "LineCap", v50);
      v52 = (uint64_t *)v25[32];
      v51 = v25[33];
      CFStringAppendFormat(a1, 0, CFSTR("%s (%zu): "), "LineDashValues", v51);
      for (; v51; --v51)
      {
        v53 = *v52++;
        CFStringAppendFormat(a1, 0, CFSTR("%.2f "), v53);
      }
      CFStringAppend(a1, CFSTR("\n"));
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "LineDashPhase", v25[34]);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "MiterLimit", v25[35]);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "ContextAlpha", v25[36]);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f\n"), "PatternPhase", v25[37], v25[38]);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "Flatness", v25[39]);
      if (*((_BYTE *)v25 + 320))
        v22 = "true";
      else
        v22 = "false";
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "StrokeAdjust", v22);
      if (*((_BYTE *)v25 + 321))
        v23 = "true";
      else
        v23 = "false";
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ShouldAntialias", v23);
      if (*((_BYTE *)v25 + 322))
        v24 = "true";
      else
        v24 = "false";
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ShouldDrawBitmapRuns", v24);
      CFStringAppend(a1, CFSTR("Resource:\n\n"));
      v2 = v54;
      PrintCGPerspectiveResource(a1, v54, (uint64_t)v26);
      CFStringAppend(a1, CFSTR("\n"));
      ++v21;
    }
    while (v21 != Count);
  }
}

void PrintCGRect(__CFString *a1, uint64_t a2, CGRect *a3)
{
  if (CGRectIsInfinite(*a3))
  {
    CFStringAppendFormat(a1, 0, CFSTR("%s: Is Infinite\n"), a2);
  }
  else if (CGRectIsNull(*a3))
  {
    CFStringAppendFormat(a1, 0, CFSTR("%s: Is Null\n"), a2);
  }
  else
  {
    CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f %.2f %.2f\n"), a2, *(_QWORD *)&a3->origin.x, *(_QWORD *)&a3->origin.y, *(_QWORD *)&a3->size.width, *(_QWORD *)&a3->size.height);
  }
}

void PrintCGPerspectiveResource(__CFString *a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5;
  const char *v6;
  unint64_t v7;
  const char *v8;
  CFTypeRef *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  CFIndex Count;
  CFIndex v23;
  uint64_t v24;
  CFIndex v25;
  const void *ValueAtIndex;
  int v27;
  const void *v28;
  CFStringRef v29;
  CFStringRef v30;
  CFTypeRef v31;
  CFStringRef v32;
  const __CFString *v33;
  CFIndex Length;
  const char *v35;
  const char *v36;
  const char *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFRange v43;

  switch(*(_DWORD *)a3)
  {
    case 0:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "kCGPerspectiveResourceTypePath");
      v5 = CFCopyDescription(*(CFTypeRef *)(a3 + 8));
      CFStringAppendFormat(a1, 0, CFSTR("CGPathRef: %@\n"), v5);
      goto LABEL_10;
    case 1:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "kCGPerspectiveResourceTypeClip");
      if (*(_BYTE *)(a3 + 9) == 1)
        v6 = "Pop";
      else
        v6 = "Push";
      CFStringAppendFormat(a1, 0, CFSTR("CGPerspectiveClipData (%s)\n"), v6);
      v7 = *(char *)(a3 + 8);
      if (v7 >= 3)
        v8 = "<Unknown>";
      else
        v8 = off_24ED8A750[v7];
      CFStringAppendFormat(a1, 0, CFSTR("CGPerspectiveClipType: %s\n"), v8);
      v27 = *(unsigned __int8 *)(a3 + 8);
      if (v27 == 2)
      {
        PrintCGRect(a1, (uint64_t)"Bounds", (CGRect *)(a3 + 72));
        CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f %.2f %.2f %.2f %.2f\n"), "Matrix", *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 64));
        v32 = CFCopyDescription(*(CFTypeRef *)(a3 + 104));
        if (v32)
          v33 = v32;
        else
          v33 = CFSTR("none");
        CFStringAppendFormat(a1, 0, CFSTR("%s: %@\n"), "BackgroundColor", v33);
        CFRelease(v33);
        Length = CFStringGetLength(a1);
        CFStringAppend(a1, CFSTR("Soft mask drawing commands:\n"));
        CGPerspectiveCommandsAppendDebugDesc(a1, *(_QWORD *)(a3 + 16));
        v43.length = CFStringGetLength(a1) + ~Length;
        v43.location = Length;
        CFStringFindAndReplace(a1, CFSTR("\n"), CFSTR("\n    "), v43, 0);
      }
      else
      {
        if (v27 == 1)
        {
          v29 = CFCopyDescription(*(CFTypeRef *)(a3 + 16));
          CFStringAppendFormat(a1, 0, CFSTR("CGImageRef (mask): %@\n"), v29, v39);
          goto LABEL_81;
        }
        if (*(_BYTE *)(a3 + 8))
          goto LABEL_82;
        v28 = *(const void **)(a3 + 16);
        if (v28)
        {
          v29 = CFCopyDescription(v28);
          CFStringAppendFormat(a1, 0, CFSTR("CGPathRef %p: %@\n"), *(_QWORD *)(a3 + 16), v29);
LABEL_81:
          CFRelease(v29);
          goto LABEL_82;
        }
        CFStringAppend(a1, CFSTR("CGPathRef: <Empty Clip Shape>\n"));
      }
LABEL_82:
      v35 = "<unknown>";
      v36 = "kCGPerspectiveClipStatePop";
      if (*(_BYTE *)(a3 + 9) != 1)
        v36 = "<unknown>";
      if (*(_BYTE *)(a3 + 9))
        v37 = v36;
      else
        v37 = "kCGPerspectiveClipStatePush";
      CFStringAppendFormat(a1, 0, CFSTR("CGPerspectiveClipState: %s\n"), v37);
      v38 = *(_DWORD *)(a3 + 12) + 1;
      if (v38 <= 3)
        v35 = off_24ED8A780[v38];
      CFStringAppendFormat(a1, 0, CFSTR("CGClipMode: %s\n"), v35, v39);
      return;
    case 2:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "kCGPerspectiveResourceTypeImage");
      v5 = CFCopyDescription(*(CFTypeRef *)(a3 + 8));
      CFStringAppendFormat(a1, 0, CFSTR("CGImageRef: %@\n"), v5);
LABEL_10:
      CFRelease(v5);
      return;
    case 3:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "kCGPerspectiveResourceTypeGradient");
      v9 = *(CFTypeRef **)(a3 + 8);
      CFStringAppendFormat(a1, 0, CFSTR("CGPerspectiveGradient %p\n"), v9);
      v10 = *(int *)v9;
      if (v10 >= 3)
        v11 = "<unknown>";
      else
        v11 = off_24ED8A768[v10];
      CFStringAppendFormat(a1, 0, CFSTR("CGPerspectiveGradientType: %s\n"), v11);
      v30 = CFCopyDescription(v9[1]);
      CFStringAppendFormat(a1, 0, CFSTR("CGGradientRef: %@\n"), v30);
      CFRelease(v30);
      v31 = v9[3];
      if (*(_DWORD *)v9 > 1u)
      {
        CFStringAppendFormat(a1, 0, CFSTR("Origin: (%.2f, %.2f)\n"), v9[2], v31);
        CFStringAppendFormat(a1, 0, CFSTR("Angle: %.2f\n"), v9[4], v42);
      }
      else
      {
        CFStringAppendFormat(a1, 0, CFSTR("Start Point: (%.2f, %.2f)\n"), v9[2], v31);
        CFStringAppendFormat(a1, 0, CFSTR("End Point: (%.2f, %.2f)\n"), v9[4], v9[5]);
        CFStringAppendFormat(a1, 0, CFSTR("Start Radius: %.2f\n"), v9[6]);
        CFStringAppendFormat(a1, 0, CFSTR("End Radius: %.2f\n"), v9[7]);
        CFStringAppendFormat(a1, 0, CFSTR("CGGradientDrawingOptions Bits: %04x\n"), *((unsigned int *)v9 + 16), v41);
      }
      return;
    case 4:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "kCGPerspectiveResourceTypeSubcommands");
      v12 = *(_QWORD *)(a3 + 16);
      CFStringAppendFormat(a1, 0, CFSTR("Subcommands.range.location: %zu\n"), *(_QWORD *)(a3 + 8));
      CFStringAppendFormat(a1, 0, CFSTR("Subcommands.range.length: %zu\n"), v12, v40);
      return;
    case 5:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "kCGPerspectiveResourceTypeGlyphs");
      v14 = *(_QWORD *)(a3 + 8);
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f %.2f %.2f %.2f %.2f\n"), "Glyphs.transform", *(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
      CFStringAppendFormat(a1, 0, CFSTR("%s: %zu\n"), "Glyphs.count", *(_QWORD *)(v14 + 48));
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(uint64_t **)(v14 + 56);
      CFStringAppendFormat(a1, 0, CFSTR("%s (%zu): "), "Glyphs.resourceIndices", v16);
      for (; v16; --v16)
      {
        v17 = *v15++;
        CFStringAppendFormat(a1, 0, CFSTR("%zu "), v17);
      }
      CFStringAppend(a1, CFSTR("\n"));
      v18 = *(_QWORD *)(v14 + 64);
      v19 = *(_QWORD *)(v14 + 48);
      CFStringAppendFormat(a1, 0, CFSTR("%s (%zu): "), "Glyphs.positions", v19);
      if (v19)
      {
        v20 = (_QWORD *)(v18 + 8);
        do
        {
          CFStringAppendFormat(a1, 0, CFSTR("(%.2f %.2f) "), *(v20 - 1), *v20);
          v20 += 2;
          --v19;
        }
        while (v19);
      }
      CFStringAppend(a1, CFSTR("\n"));
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f %.2f\n"), "Glyphs.subpixelQuantum", *(_QWORD *)(v14 + 72), *(_QWORD *)(v14 + 80));
      CFStringAppendFormat(a1, 0, CFSTR("%s: %.2f\n"), "Glyphs.size", *(_QWORD *)(v14 + 88));
      v21 = *(_DWORD *)(v14 + 96);
      CFStringAppendFormat(a1, 0, CFSTR("%s: 0x%08x"), "Glyphs.style", v21);
      if ((v21 & 1) != 0)
      {
        CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontRenderingStyleAntialiasing");
        if ((v21 & 2) == 0)
        {
LABEL_21:
          if ((v21 & 4) == 0)
            goto LABEL_22;
          goto LABEL_60;
        }
      }
      else if ((v21 & 2) == 0)
      {
        goto LABEL_21;
      }
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontRenderingStyleSmoothing");
      if ((v21 & 4) == 0)
      {
LABEL_22:
        if ((v21 & 8) == 0)
          goto LABEL_23;
        goto LABEL_61;
      }
LABEL_60:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontRenderingStyleSubpixelPositioning");
      if ((v21 & 8) == 0)
      {
LABEL_23:
        if ((v21 & 0x200) == 0)
          goto LABEL_24;
        goto LABEL_62;
      }
LABEL_61:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontRenderingStyleSubpixelQuantization");
      if ((v21 & 0x200) == 0)
      {
LABEL_24:
        if ((v21 & 0x10) == 0)
          goto LABEL_25;
        goto LABEL_63;
      }
LABEL_62:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontRenderingStylePlatformNative");
      if ((v21 & 0x10) == 0)
      {
LABEL_25:
        if ((~v21 & 0x50) != 0)
          goto LABEL_26;
        goto LABEL_64;
      }
LABEL_63:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleMinimum");
      if ((~v21 & 0x50) != 0)
      {
LABEL_26:
        if ((v21 & 0x20) == 0)
          goto LABEL_27;
        goto LABEL_65;
      }
LABEL_64:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleExtraLight");
      if ((v21 & 0x20) == 0)
      {
LABEL_27:
        if ((~v21 & 0x30) != 0)
          goto LABEL_28;
        goto LABEL_66;
      }
LABEL_65:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleLight");
      if ((~v21 & 0x30) != 0)
      {
LABEL_28:
        if ((v21 & 0x40) == 0)
          goto LABEL_29;
        goto LABEL_67;
      }
LABEL_66:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleMedium");
      if ((v21 & 0x40) == 0)
      {
LABEL_29:
        if ((~v21 & 0x60) != 0)
          goto LABEL_30;
        goto LABEL_68;
      }
LABEL_67:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleHeavy");
      if ((~v21 & 0x60) != 0)
      {
LABEL_30:
        if ((~v21 & 0x70) != 0)
          goto LABEL_32;
        goto LABEL_31;
      }
LABEL_68:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleProRegular");
      if ((~v21 & 0x70) == 0)
LABEL_31:
        CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSmoothingStyleCustomDilation");
LABEL_32:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontAntialiasingStyleUnfiltered");
      if ((v21 & 0x80) != 0)
      {
        CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontAntialiasingStyleFilterLight");
        if ((v21 & 0x100) == 0)
        {
LABEL_34:
          if ((~v21 & 0x180) != 0)
            goto LABEL_35;
          goto LABEL_72;
        }
      }
      else if ((v21 & 0x100) == 0)
      {
        goto LABEL_34;
      }
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontAntialiasingStyleFilterMedium");
      if ((~v21 & 0x180) != 0)
      {
LABEL_35:
        if ((~v21 & 0x480) != 0)
          goto LABEL_36;
        goto LABEL_73;
      }
LABEL_72:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontAntialiasingStyleFilterHeavy");
      if ((~v21 & 0x480) != 0)
      {
LABEL_36:
        if ((v21 & 0x400) == 0)
          goto LABEL_38;
        goto LABEL_37;
      }
LABEL_73:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontAntialiasingStyleFilteredCustomDilation");
      if ((v21 & 0x400) != 0)
LABEL_37:
        CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontAntialiasingStyleUnfilteredCustomDilation");
LABEL_38:
      CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSubpixelQuantizationStyleDefault");
      if ((v21 & 0x1000) != 0)
        CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSubpixelQuantizationStyleCustom");
      if ((~v21 & 0x3000) == 0)
        CFStringAppendFormat(a1, 0, CFSTR(", %s"), "kCGFontSubpixelQuantizationStyleMask");
      CFStringAppend(a1, CFSTR("\n"));
      CFStringAppend(a1, CFSTR("Glyphs:\n\n"));
      Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
      if (*(uint64_t *)(v14 + 48) >= 1)
      {
        v23 = Count;
        v24 = 0;
        do
        {
          while (1)
          {
            v25 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v24);
            CFStringAppendFormat(a1, 0, CFSTR("Glyph index %zu:\n"), v25);
            if ((v25 & 0x8000000000000000) == 0 && v25 < v23)
              break;
            CFStringAppend(a1, CFSTR("Out of bounds glyph index\n\n"));
            if (*(_QWORD *)(v14 + 48) <= ++v24)
              return;
          }
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), v25);
          PrintCGPerspectiveResource(a1, a2, ValueAtIndex);
          ++v24;
        }
        while (*(_QWORD *)(v14 + 48) > v24);
      }
      return;
    default:
      CFStringAppendFormat(a1, 0, CFSTR("%s: %s\n"), "ResourceType", "<unknown>");
      return;
  }
}

uint64_t CGPerspectiveCommandsCreate()
{
  const __CFAllocator *v0;
  uint64_t Instance;
  __int128 v2;

  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (CGPerspectiveCommandsTypeID_onceToken != -1)
    dispatch_once(&CGPerspectiveCommandsTypeID_onceToken, &__block_literal_global_54);
  Instance = _CFRuntimeCreateInstance();
  v2 = *(_OWORD *)(MEMORY[0x24BDBF090] + 16);
  *(_OWORD *)(Instance + 16) = *MEMORY[0x24BDBF090];
  *(_OWORD *)(Instance + 32) = v2;
  *(_QWORD *)(Instance + 64) = CFArrayCreateMutable(v0, 0, 0);
  *(_QWORD *)(Instance + 72) = CFArrayCreateMutable(v0, 0, 0);
  *(_DWORD *)(Instance + 80) = 0;
  *(_QWORD *)(Instance + 88) = CFArrayCreateMutable(v0, 0, MEMORY[0x24BDBD690]);
  return Instance;
}

char *CGPerspectiveCommandCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v6 = (char *)malloc_type_calloc(1uLL, 0x148uLL, 0xB4DCF097uLL);
  v7 = MEMORY[0x24BDBD8B8];
  v8 = *MEMORY[0x24BDBD8B8];
  v9 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
  *(_OWORD *)(v6 + 40) = *MEMORY[0x24BDBD8B8];
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v6 + 72) = v10;
  *((_QWORD *)v6 + 35) = 0x4024000000000000;
  *((_QWORD *)v6 + 36) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 296) = *MEMORY[0x24BDBF148];
  *((_QWORD *)v6 + 39) = 0;
  *((_WORD *)v6 + 160) = 256;
  v6[322] = 0;
  *(_OWORD *)(v6 + 136) = v8;
  *(_OWORD *)(v6 + 152) = v9;
  *(_OWORD *)(v6 + 168) = v10;
  *(_OWORD *)(v6 + 232) = xmmword_22619D780;
  CGPerspectiveCommandUpdateWithStates((__int128 *)a1, (uint64_t)v6, a2, a3);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), v6);
  return v6;
}

__int128 *CGPerspectiveCommandUpdateWithStates(__int128 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 *CTM;
  __int128 v9;
  __int128 v10;
  int Type;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CGColor *v24;
  CGColor *v25;
  CGColorSpace *v26;
  void *v27;
  _OWORD *Data;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGColor *Color;
  CGColor *v34;
  CGColorSpace *ColorSpace;
  CGColor *FillColor;
  CGColorSpace *v37;
  CGColor *v38;
  CGColor *StrokeColor;
  CGColorSpace *v40;
  CGColor *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  CGColorSpace *v48;
  __int128 *v49;

  if (!a4)
    goto LABEL_30;
  v7 = (uint64_t)result;
  CTM = (__int128 *)CGGStateGetCTM();
  if (CTM)
  {
    v9 = *CTM;
    v10 = CTM[1];
    *(_OWORD *)(a2 + 72) = CTM[2];
    *(_OWORD *)(a2 + 56) = v10;
    *(_OWORD *)(a2 + 40) = v9;
  }
  *(_DWORD *)(a2 + 184) = CGGStateGetCompositeOperation();
  if (!CGGStateGetStyle())
    goto LABEL_15;
  Type = CGStyleGetType();
  if (Type == 2)
  {
    v27 = *(void **)(a2 + 208);
    if (v27)
    {
      free(v27);
      *(_QWORD *)(a2 + 208) = 0;
      CGColorRelease(*(CGColorRef *)(a2 + 216));
      *(_QWORD *)(a2 + 216) = 0;
    }
    Data = (_OWORD *)CGStyleGetData();
    v29 = malloc_type_malloc(0x50uLL, 0x1000040CA4B9025uLL);
    *(_QWORD *)(a2 + 208) = v29;
    *v29 = *Data;
    v30 = Data[4];
    v32 = Data[1];
    v31 = Data[2];
    v29[3] = Data[3];
    v29[4] = v30;
    v29[1] = v32;
    v29[2] = v31;
    Color = (CGColor *)CGStyleGetColor();
    v34 = CGColorRetain(Color);
    *(_QWORD *)(a2 + 216) = v34;
    ColorSpace = CGColorGetColorSpace(v34);
    if (CGColorSpaceIsWideGamutRGB(ColorSpace))
      goto LABEL_14;
LABEL_15:
    FillColor = (CGColor *)CGGStateGetFillColor();
    v37 = CGColorGetColorSpace(FillColor);
    if (!CGColorSpaceIsWideGamutRGB(v37))
      goto LABEL_17;
    goto LABEL_16;
  }
  if (Type == 1)
  {
    v18 = *(void **)(a2 + 192);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(a2 + 192) = 0;
      CGColorRelease(*(CGColorRef *)(a2 + 200));
      *(_QWORD *)(a2 + 200) = 0;
    }
    v19 = CGStyleGetData();
    v20 = malloc_type_malloc(0x38uLL, 0x1000040577F94FBuLL);
    *(_QWORD *)(a2 + 192) = v20;
    v22 = *(_OWORD *)(v19 + 16);
    v21 = *(_OWORD *)(v19 + 32);
    v23 = *(_OWORD *)v19;
    v20[6] = *(_QWORD *)(v19 + 48);
    *((_OWORD *)v20 + 1) = v22;
    *((_OWORD *)v20 + 2) = v21;
    *(_OWORD *)v20 = v23;
    v24 = (CGColor *)CGStyleGetColor();
    v25 = CGColorRetain(v24);
    *(_QWORD *)(a2 + 200) = v25;
    v26 = CGColorGetColorSpace(v25);
    if (!CGColorSpaceIsWideGamutRGB(v26))
      goto LABEL_15;
LABEL_14:
    *(_DWORD *)(v7 + 80) |= 1u;
    goto LABEL_15;
  }
  CGPerspectiveCommandsLogError(v7, "Unsupported CGStyleType given: %d", v12, v13, v14, v15, v16, v17, Type);
  FillColor = (CGColor *)CGGStateGetFillColor();
  v48 = CGColorGetColorSpace(FillColor);
  if (CGColorSpaceIsWideGamutRGB(v48))
LABEL_16:
    *(_DWORD *)(v7 + 80) |= 1u;
LABEL_17:
  v38 = *(CGColor **)(a2 + 88);
  if (v38 != FillColor)
  {
    if (v38)
    {
      CFRelease(v38);
      *(_QWORD *)(a2 + 88) = 0;
    }
    *(_QWORD *)(a2 + 88) = CGColorRetain(FillColor);
  }
  StrokeColor = (CGColor *)CGGStateGetStrokeColor();
  v40 = CGColorGetColorSpace(StrokeColor);
  if (CGColorSpaceIsWideGamutRGB(v40))
    *(_DWORD *)(v7 + 80) |= 1u;
  v41 = *(CGColor **)(a2 + 224);
  if (v41 != StrokeColor)
  {
    if (v41)
    {
      CFRelease(v41);
      *(_QWORD *)(a2 + 224) = 0;
    }
    *(_QWORD *)(a2 + 224) = CGColorRetain(StrokeColor);
  }
  CGGStateGetAlpha();
  *(_QWORD *)(a2 + 288) = v42;
  CGGStateGetPatternPhase();
  *(_QWORD *)(a2 + 296) = v43;
  *(_QWORD *)(a2 + 304) = v44;
  CGGStateGetFlatness();
  *(_QWORD *)(a2 + 312) = v45;
  *(_BYTE *)(a2 + 320) = CGGStateGetStrokeAdjust();
  *(_BYTE *)(a2 + 321) = CGGStateGetShouldAntialias();
  *(_BYTE *)(a2 + 322) = CGGStateGetShouldDrawBitmapRuns();
  v49 = 0;
  __CGGStateGetStrokeParameters(a4, (_QWORD *)(a2 + 232), (_QWORD *)(a2 + 240), (_QWORD *)(a2 + 280), (uint64_t *)&v49, (_DWORD *)(a2 + 252), (_DWORD *)(a2 + 248));
  result = v49;
  if (v49)
  {
    result = (__int128 *)CGDashGetPattern();
    if (!result)
    {
      *(_QWORD *)(a2 + 256) = 0;
      *(_QWORD *)(a2 + 264) = 0;
      return result;
    }
    *(_QWORD *)(a2 + 264) = 0;
    result = (__int128 *)malloc_type_malloc(0, 0xF95493D9uLL);
    *(_QWORD *)(a2 + 256) = result;
  }
LABEL_30:
  if (a3)
  {
    result = (__int128 *)CGRenderingStateGetBaseCTM();
    if (result)
    {
      v46 = *result;
      v47 = result[1];
      *(_OWORD *)(a2 + 168) = result[2];
      *(_OWORD *)(a2 + 152) = v47;
      *(_OWORD *)(a2 + 136) = v46;
    }
  }
  return result;
}

void CGPerspectiveCommandsLogError(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const __CFAllocator *v10;
  const __CFString *v11;
  const __CFString *v12;
  NSObject *v13;
  const char *CStringPtr;
  const char *v15;
  __int128 buf;
  xpc_object_t (*v17)(uint64_t);
  void *v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, 0x8000100u);
  v12 = CFStringCreateWithFormatAndArguments(v10, 0, v11, &a9);
  CFRelease(v11);
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v13 = __CGPerspectiveOSLog_log;
    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v13 = __CGPerspectiveOSLog_log;
    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = CFStringGetCStringPtr(v12, 0x8000100u);
  _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "CG command serialization failed: %s", (uint8_t *)&buf, 0xCu);
LABEL_3:
  *(_DWORD *)(a1 + 80) |= 2u;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 88), v12);
  if (qword_254123A10 == -1)
  {
    if (CFSetContainsValue(*(CFSetRef *)_MergedGlobals_496, v12))
      goto LABEL_10;
  }
  else
  {
    dispatch_once(&qword_254123A10, &__block_literal_global_9_1);
    if (CFSetContainsValue(*(CFSetRef *)_MergedGlobals_496, v12))
      goto LABEL_10;
  }
  if (qword_254123A10 != -1)
    dispatch_once(&qword_254123A10, &__block_literal_global_9_1);
  CFSetAddValue(*(CFMutableSetRef *)_MergedGlobals_496, v12);
  CStringPtr = CFStringGetCStringPtr(v12, 0x8000100u);
  v15 = "Error";
  if (CStringPtr)
    v15 = CStringPtr;
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v17 = __CGPerspectiveCommandsReportMissingFeature_block_invoke;
  v18 = &__block_descriptor_tmp_7_3;
  v19 = v15;
  analytics_send_event_lazy();
LABEL_10:
  CFRelease(v12);
}

void *CGPerspectiveResourceCreate(uint64_t a1)
{
  void *v2;

  v2 = malloc_type_calloc(1uLL, 0x70uLL, 0xC66BD634uLL);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), v2);
  return v2;
}

void CGPerspectiveCommandsFinalize(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  CGPathRef *ValueAtIndex;
  CGPathRef *v6;
  int v7;
  CGPathRef v8;
  const void *v9;
  CGColorSpace *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex j;
  void *v14;
  const void *v15;
  const void *v16;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = (CGPathRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
      v6 = ValueAtIndex;
      switch(*(_DWORD *)ValueAtIndex)
      {
        case 0:
          CGPathRelease(ValueAtIndex[1]);
          break;
        case 1:
          v7 = *((unsigned __int8 *)ValueAtIndex + 8);
          if (v7 == 2)
          {
            v8 = ValueAtIndex[2];
            if (v8)
              CFRelease(v8);
            CGColorRelease(v6[13]);
          }
          else if (v7 == 1)
          {
            CGImageRelease(ValueAtIndex[2]);
          }
          else if (!*((_BYTE *)ValueAtIndex + 8))
          {
            CGPathRelease(ValueAtIndex[2]);
          }
          break;
        case 2:
          CGImageRelease(ValueAtIndex[1]);
          break;
        case 3:
          CGGradientRelease(*((CGGradientRef *)ValueAtIndex[1] + 1));
          goto LABEL_4;
        case 5:
          free(*((void **)ValueAtIndex[1] + 7));
          free(*((void **)v6[1] + 8));
LABEL_4:
          free(v6[1]);
          break;
        default:
          break;
      }
      free(v6);
    }
  }
  v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(CGColorSpace **)(a1 + 48);
  if (v10)
  {
    CGColorSpaceRelease(v10);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v11 = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (v11 >= 1)
  {
    v12 = v11;
    for (j = 0; j != v12; ++j)
    {
      v14 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), j);
      CGColorRelease(*((CGColorRef *)v14 + 11));
      CGColorRelease(*((CGColorRef *)v14 + 28));
      free(*((void **)v14 + 24));
      CGColorRelease(*((CGColorRef *)v14 + 25));
      free(*((void **)v14 + 26));
      CGColorRelease(*((CGColorRef *)v14 + 27));
      free(*((void **)v14 + 32));
      free(v14);
    }
  }
  v15 = *(const void **)(a1 + 72);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v16 = *(const void **)(a1 + 88);
  if (v16)
    CFRelease(v16);
}

BOOL CGPerspectiveDataDecode_bytes(uint64_t a1, void *a2, size_t a3)
{
  CFIndex Length;
  CFRange v7;
  size_t v8;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  size_t v15;
  __int16 v16;
  size_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  Length = CFDataGetLength(*(CFDataRef *)a1);
  v7.location = *(_QWORD *)(a1 + 8);
  v8 = Length - v7.location;
  if (Length - v7.location < a3)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v10 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      {
LABEL_6:
        bzero(a2, a3);
        return v8 >= a3;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v10 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_6;
    }
    v11 = *(_QWORD *)(a1 + 8);
    v12 = 134218496;
    v13 = v11;
    v14 = 2048;
    v15 = a3;
    v16 = 2048;
    v17 = v8;
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Out of bounds read, for position %ld; needs %ld but has %ld left",
      (uint8_t *)&v12,
      0x20u);
    goto LABEL_6;
  }
  v7.length = a3;
  CFDataGetBytes(*(CFDataRef *)a1, v7, (UInt8 *)a2);
  *(_QWORD *)(a1 + 8) += a3;
  return v8 >= a3;
}

BOOL CGPerspectiveDataDecode_CFData(uint64_t a1, __CFData **a2)
{
  _BOOL8 result;
  uint64_t v5;
  CFIndex v6;
  char v7;
  CFIndex Length;
  CFMutableDataRef Mutable;
  __CFData *v10;
  const UInt8 *BytePtr;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  __int16 v15;
  uint8_t buf[2];
  CFIndex capacity;

  *a2 = 0;
  capacity = 0;
  result = CGPerspectiveDataDecode_bytes(a1, &capacity, 8uLL);
  if (result)
  {
    if (capacity < 0
      || ((v5 = *(_QWORD *)(a1 + 8), v6 = v5 + capacity, !__OFADD__(v5, capacity)) ? (v7 = 0) : (v7 = 1),
          (Length = CFDataGetLength(*(CFDataRef *)a1), (v7 & 1) != 0) || v6 > Length))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v12 = __CGPerspectiveOSLog_log;
        result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v12 = __CGPerspectiveOSLog_log;
        result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
      }
      *(_WORD *)buf = 0;
      v13 = "Failed to decode CFData blob: out of bounds read";
      v14 = buf;
LABEL_14:
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, v13, v14, 2u);
      return 0;
    }
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], capacity);
    if (Mutable)
    {
      v10 = Mutable;
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)a1);
      CFDataAppendBytes(v10, &BytePtr[*(_QWORD *)(a1 + 8)], capacity);
      *a2 = v10;
      *(_QWORD *)(a1 + 8) += capacity;
      return 1;
    }
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v12 = __CGPerspectiveOSLog_log;
      result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
LABEL_17:
        v15 = 0;
        v13 = "Failed to allocate CFMutableDataRef";
        v14 = (uint8_t *)&v15;
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v12 = __CGPerspectiveOSLog_log;
      result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result)
        goto LABEL_17;
    }
  }
  return result;
}

void DrawPerspectiveCommands(CGContext *a1, uint64_t a2, CFDictionaryRef theDict)
{
  const __CFBoolean *Value;
  const __CFBoolean *v7;
  CFTypeID v8;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  const __CFBoolean *v12;
  const __CFBoolean *v13;
  CFTypeID v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFTypeID v20;
  const __CFBoolean *v21;
  const __CFBoolean *v22;
  CFTypeID v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  CFTypeID v26;
  const void *v27;
  const void *v28;
  CFTypeID v29;
  CFTypeID v30;
  CFIndex Count;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  CFTypeRef cf[2];

  v35 = 0;
  cf[1] = 0;
  v32 = 0u;
  v33 = 0;
  v34 = xmmword_22619D7B0;
  cf[0] = (CFTypeRef)0x3FF0000000000000;
  if (theDict)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("OptionOutlineCommands"));
    if (Value)
    {
      v7 = Value;
      v8 = CFGetTypeID(Value);
      if (v8 == CFBooleanGetTypeID())
        LOBYTE(v32) = CFBooleanGetValue(v7) != 0;
    }
    v9 = CFDictionaryGetValue(theDict, CFSTR("OptionOutlineColor"));
    if (v9)
    {
      v10 = v9;
      v11 = CFGetTypeID(v9);
      if (v11 == CGColorGetTypeID())
        *((_QWORD *)&v32 + 1) = v10;
    }
    v12 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("OptionHighlightCommands"));
    if (v12)
    {
      v13 = v12;
      v14 = CFGetTypeID(v12);
      if (v14 == CFBooleanGetTypeID())
        LOBYTE(v33) = CFBooleanGetValue(v13) != 0;
    }
    v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("OptionContextScale"));
    if (v15)
    {
      v16 = v15;
      v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID())
        CFNumberGetValue(v16, kCFNumberCGFloatType, &v34);
    }
    v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("OptionContentsScale"));
    if (v18)
    {
      v19 = v18;
      v20 = CFGetTypeID(v18);
      if (v20 == CFNumberGetTypeID())
        CFNumberGetValue(v19, kCFNumberCGFloatType, (char *)&v34 + 8);
    }
    v21 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("OptionEnableBifurcation"));
    if (v21)
    {
      v22 = v21;
      v23 = CFGetTypeID(v21);
      if (v23 == CFBooleanGetTypeID())
        LOBYTE(v35) = CFBooleanGetValue(v22) != 0;
    }
    v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("OptionBifurcationScale"));
    if (v24)
    {
      v25 = v24;
      v26 = CFGetTypeID(v24);
      if (v26 == CFNumberGetTypeID())
        CFNumberGetValue(v25, kCFNumberCGFloatType, cf);
    }
    v27 = CFDictionaryGetValue(theDict, CFSTR("OptionSignaler"));
    if (v27)
    {
      v28 = v27;
      v29 = CFGetTypeID(v27);
      v30 = v29;
      if (CGPerspectiveSignalerTypeID_onceToken == -1)
      {
        if (v29 != CGPerspectiveSignalerTypeID_id)
          goto LABEL_27;
        goto LABEL_26;
      }
      dispatch_once(&CGPerspectiveSignalerTypeID_onceToken, &__block_literal_global_56);
      if (v30 == CGPerspectiveSignalerTypeID_id)
      {
LABEL_26:
        cf[1] = v28;
        CFRetain(v28);
      }
    }
  }
LABEL_27:
  CGContextGetBaseCTM();
  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 72));
  DrawPerspectiveSubcommands(a1, a2, 0, Count, (uint64_t)&v32);
  CGContextSetBaseCTM();
  if (cf[1])
    CFRelease(cf[1]);
}

void DrawPerspectiveSubcommands(CGContext *a1, uint64_t a2, CFIndex a3, uint64_t a4, uint64_t a5)
{
  CFIndex Count;
  int v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int v14;
  CFIndex *ValueAtIndex;
  CFIndex v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;
  BOOL v21;
  __int128 v22;
  CGFloat v23;
  __int128 v24;
  CGColor *v25;
  CGColor *v26;
  CGColor *v27;
  CGColor *v28;
  uint64_t v29;
  double v30;
  uint64_t Data;
  double *v32;
  float v33;
  double v34;
  float v35;
  __float2 v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  CGImage *v49;
  double Width;
  double Height;
  __int128 *CTM;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  double v56;
  int *v58;
  CGGradient *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  CFIndex v64;
  double v65;
  double v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  uint64_t QuantizationLevelWithStyle;
  double v71;
  unint64_t v72;
  unint64_t v73;
  double a;
  double b;
  double c;
  double d;
  __int128 v78;
  void (*v79)(unint64_t, unint64_t, CGAffineTransform *, double *);
  const void *v80;
  __int128 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  __int128 v86;
  __int128 v87;
  CGImage *v88;
  void (*v89)(CGContext *, CGImage *, CGAffineTransform *, double, double, double, double);
  uint64_t v90;
  int v91;
  uint64_t GState;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  double v94;
  double v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v101;
  BOOL v102;
  uint64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  unint64_t v106;
  const double *v107;
  double *v108;
  unint64_t v109;
  uint64_t v110;
  double *v111;
  double *v112;
  double v113;
  double v114;
  uint64_t v115;
  CGFloat y;
  CGFloat x;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double *v122;
  double v123;
  CFIndex v124;
  CGPathRef *v125;
  CGPathRef *v126;
  double v127;
  double v128;
  double v129;
  CGFloat v130;
  CGFloat v131;
  BOOL IsEmpty;
  CGFloat v133;
  CGFloat v134;
  double v135;
  double v136;
  NSObject *v137;
  CGColor *v138;
  NSObject *v139;
  const char *v140;
  CFIndex v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double *v147;
  CGFloat path1a;
  const CGPath *path1;
  CGFloat v150;
  double v151;
  CFIndex v152;
  CGFloat r1a;
  CGFloat r1;
  CGFloat v155;
  CGFloat v156;
  CFIndex v157;
  uint64_t v158;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v161;
  CGAffineTransform transform;
  uint64_t v163;
  float64x2x2_t v164;
  float64x2x2_t v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect BoundingBox;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;

  v163 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 72));
  v158 = a2;
  v157 = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
  if (a4 == -1 || (v152 = a3 + a4, a3 + a4 > Count))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v139 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v139 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(transform.a) = 0;
    v140 = "Given range was out of bounds";
    goto LABEL_160;
  }
  v141 = Count;
  if (a4 < 1)
    return;
  v11 = 0;
  v144 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v145 = *MEMORY[0x24BDBF070];
  v142 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v143 = *(double *)(MEMORY[0x24BDBF070] + 16);
  while (2)
  {
    v12 = *(_QWORD *)(a5 + 56);
    if (v12)
    {
      v13 = (os_unfair_lock_s *)(v12 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 16));
      v14 = *(unsigned __int8 *)(v12 + 20);
      os_unfair_lock_unlock(v13);
      if (v14)
        return;
    }
    ValueAtIndex = (CFIndex *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v158 + 72), a3);
    v16 = *ValueAtIndex;
    if (*ValueAtIndex < 0 || v16 >= v157)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return;
      }
      LOWORD(transform.a) = 0;
      v140 = "Out of bounds resources access";
      goto LABEL_160;
    }
    v17 = (uint64_t)ValueAtIndex;
    v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v158 + 64), v16);
    v19 = v18;
    v20 = *(_DWORD *)v18;
    if (*(_DWORD *)v18 != 1)
    {
      CGContextSaveGState(a1);
      if (v20 == 4)
        goto LABEL_18;
      goto LABEL_17;
    }
    if (v18[9])
    {
      CGContextRestoreGState(a1);
      v21 = __OFSUB__(v11--, 1);
      if (!v21)
        goto LABEL_15;
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return;
      }
      LOWORD(transform.a) = 0;
LABEL_160:
      _os_log_error_impl(&dword_224FE9000, v139, OS_LOG_TYPE_ERROR, v140, (uint8_t *)&transform, 2u);
      return;
    }
    CGContextSaveGState(a1);
    v21 = __OFADD__(v11++, 1);
    if (v21)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return;
      }
      LOWORD(transform.a) = 0;
      goto LABEL_160;
    }
    v43 = v19[8];
    if (v43 == 2)
    {
      v80 = (const void *)*((_QWORD *)v19 + 2);
      memset(&transform, 0, sizeof(transform));
      CGContextGetCTM(&transform, a1);
      memset(&v161, 0, sizeof(v161));
      v81 = *(_OWORD *)(v19 + 40);
      *(_OWORD *)&t2.a = *(_OWORD *)(v19 + 24);
      *(_OWORD *)&t2.c = v81;
      *(_OWORD *)&t2.tx = *(_OWORD *)(v19 + 56);
      t1 = transform;
      CGAffineTransformConcat(&v161, &t2, &t1);
      t2 = v161;
      if (CGSoftMaskCreate())
      {
        if (v80)
          CFRetain(v80);
        CGContextSetSoftMask();
        CGSoftMaskRelease();
      }
      goto LABEL_15;
    }
    if (v43 == 1)
    {
      v83 = *(double *)(v17 + 8);
      v82 = *(double *)(v17 + 16);
      v85 = *(double *)(v17 + 24);
      v84 = *(double *)(v17 + 32);
      v86 = *(_OWORD *)(v19 + 24);
      v87 = *(_OWORD *)(v19 + 56);
      *(_OWORD *)&transform.c = *(_OWORD *)(v19 + 40);
      *(_OWORD *)&transform.tx = v87;
      *(_OWORD *)&transform.a = v86;
      v88 = (CGImage *)*((_QWORD *)v19 + 2);
      if (CGVersionLoad_onceToken == -1)
      {
        v89 = (void (*)(CGContext *, CGImage *, CGAffineTransform *, double, double, double, double))__CGContextClipToMaskWithTransformFunc;
        if (__CGContextClipToMaskWithTransformFunc)
        {
LABEL_75:
          v89(a1, v88, &transform, v83, v82, v85, v84);
          goto LABEL_15;
        }
      }
      else
      {
        dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
        v89 = (void (*)(CGContext *, CGImage *, CGAffineTransform *, double, double, double, double))__CGContextClipToMaskWithTransformFunc;
        if (__CGContextClipToMaskWithTransformFunc)
          goto LABEL_75;
      }
      v174.origin.x = v83;
      v174.origin.y = v82;
      v174.size.width = v85;
      v174.size.height = v84;
      CGContextClipToMask(a1, v174, v88);
      goto LABEL_15;
    }
    if (!v19[8])
    {
      if (*((_QWORD *)v19 + 2))
      {
        UpdateGState(a1, v17);
        v44 = *((_QWORD *)v19 + 2);
        v45 = *((_DWORD *)v19 + 3);
        if (v45 != 2)
        {
          if (v45 == 1)
          {
            CGContextAddPath(a1, *((CGPathRef *)v19 + 2));
            CGContextEOClip(a1);
          }
          else if (!v45)
          {
            CGContextAddPath(a1, *((CGPathRef *)v19 + 2));
            CGContextClip(a1);
          }
          goto LABEL_15;
        }
        GState = CGContextGetGState();
        if (CGVersionLoad_onceToken == -1)
        {
          v93 = (void (*)(uint64_t, uint64_t, uint64_t))__CGGStateClipToPathFunc;
          if (!__CGGStateClipToPathFunc)
            goto LABEL_15;
        }
        else
        {
          dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
          v93 = (void (*)(uint64_t, uint64_t, uint64_t))__CGGStateClipToPathFunc;
          if (!__CGGStateClipToPathFunc)
            goto LABEL_15;
        }
        v93(GState, v44, 2);
        goto LABEL_15;
      }
      v170.origin.x = 0.0;
      v170.origin.y = 0.0;
      v170.size.width = 0.0;
      v170.size.height = 0.0;
      CGContextClipToRect(a1, v170);
    }
LABEL_15:
    CGContextSaveGState(a1);
LABEL_17:
    v22 = *(_OWORD *)(v17 + 56);
    *(_OWORD *)&transform.a = *(_OWORD *)(v17 + 40);
    *(_OWORD *)&transform.c = v22;
    *(_OWORD *)&transform.tx = *(_OWORD *)(v17 + 72);
    CGContextConcatCTM(a1, &transform);
LABEL_18:
    v23 = *(double *)(a5 + 24);
    v24 = *(_OWORD *)(v17 + 152);
    *(_OWORD *)&transform.a = *(_OWORD *)(v17 + 136);
    *(_OWORD *)&transform.c = v24;
    *(_OWORD *)&transform.tx = *(_OWORD *)(v17 + 168);
    CGContextSetBaseCTM();
    v25 = *(CGColor **)(v17 + 88);
    if (v25 && CGColorGetPattern(v25)
      || (v26 = *(CGColor **)(v17 + 224)) != 0 && CGColorGetPattern(v26)
      || (v27 = *(CGColor **)(v17 + 200)) != 0 && CGColorGetPattern(v27)
      || (v28 = *(CGColor **)(v17 + 216)) != 0 && CGColorGetPattern(v28))
    {
      memset(&transform, 0, sizeof(transform));
      CGContextGetBaseCTM();
      CGAffineTransformMakeScale(&t2, v23, v23);
      t1 = transform;
      CGAffineTransformConcat(&v161, &t1, &t2);
      transform = v161;
      CGContextSetBaseCTM();
    }
    CGContextSetCompositeOperation();
    v29 = *(_QWORD *)(v17 + 192);
    if (v29)
    {
      v30 = *(double *)(a5 + 24);
      CGStyleCreateShadow();
      Data = CGStyleGetData();
      if (Data)
      {
        v32 = (double *)Data;
        v33 = v30;
        v34 = *(double *)(v29 + 32);
        v35 = *(double *)(v29 + 16);
        v36 = __sincosf_stret(v35 * 0.017453);
        v37 = v34 * v36.__cosval;
        v38 = v34 * v36.__sinval;
        *(float *)&v34 = v37 * v33;
        v39 = v38 * v33;
        v32[5] = v32[5] * v33;
        v40 = atan2((float)(v38 * v33), (float)(v37 * v33));
        v32[2] = (float)(v40 * 57.296);
        v32[4] = sqrtf((float)(v39 * v39) + (float)(*(float *)&v34 * *(float *)&v34));
      }
      CGStyleGetData();
      CGStyleCreateShadowWithColor();
      CGContextSetStyle();
      CGStyleRelease();
      CGStyleRelease();
    }
    if (*(_QWORD *)(v17 + 208))
    {
      v41 = *(double *)(a5 + 24);
      CGStyleCreateFocusRing();
      v42 = CGStyleGetData();
      *(double *)(v42 + 24) = *(double *)(v42 + 24) * v41;
      CGStyleGetData();
      CGStyleCreateFocusRingWithColor();
      CGContextSetStyle();
      CGStyleRelease();
      CGStyleRelease();
    }
    CGContextSetAlpha(a1, *(CGFloat *)(v17 + 288));
    switch(v20)
    {
      case 0:
        DrawPath(a1, v17, *((const CGPath **)v19 + 1));
        goto LABEL_127;
      case 2:
        UpdateGState(a1, v17);
        v49 = (CGImage *)*((_QWORD *)v19 + 1);
        CGContextDrawImage(a1, *(CGRect *)(v17 + 104), v49);
        if (*(_BYTE *)(a5 + 16))
        {
          CGContextGetGState();
          Width = (double)CGImageGetWidth(v49);
          Height = (double)CGImageGetHeight(v49);
          CTM = (__int128 *)CGGStateGetCTM();
          v53 = *CTM;
          v54 = CTM[2];
          *(_OWORD *)&transform.c = CTM[1];
          *(_OWORD *)&transform.tx = v54;
          *(_OWORD *)&transform.a = v53;
          *(_QWORD *)&v53 = 0;
          v55 = 0;
          *(double *)&v54 = Width;
          v56 = Height;
          v166 = CGRectApplyAffineTransform(*(CGRect *)&v53, &transform);
          if (v166.size.width > Width || v166.size.height > Height)
          {
            CGContextSetRGBFillColor(a1, 1.0, 0.0, 0.0, 0.9);
            v167.origin.x = 0.0;
            v167.origin.y = 0.0;
            v167.size.width = Width;
            v167.size.height = Height;
            CGContextFillRect(a1, v167);
          }
        }
        goto LABEL_127;
      case 3:
        v58 = (int *)*((_QWORD *)v19 + 1);
        v59 = (CGGradient *)*((_QWORD *)v58 + 1);
        v60 = *v58;
        if (*v58 == 2)
        {
          CGContextDrawConicGradient(a1, v59, *((CGPoint *)v58 + 1), *((CGFloat *)v58 + 4));
          goto LABEL_127;
        }
        if (v60 == 1)
        {
          CGContextDrawRadialGradient(a1, v59, *((CGPoint *)v58 + 1), *((CGFloat *)v58 + 6), *((CGPoint *)v58 + 2), *((CGFloat *)v58 + 7), v58[16]);
          goto LABEL_127;
        }
        if (!v60)
        {
          CGContextDrawLinearGradient(a1, v59, *((CGPoint *)v58 + 1), *((CGPoint *)v58 + 2), v58[16]);
          goto LABEL_127;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v90 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
            goto LABEL_127;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v90 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
            goto LABEL_127;
        }
        v91 = *v58;
        LODWORD(transform.a) = 67109120;
        HIDWORD(transform.a) = v91;
        v47 = v90;
        v48 = "Unsupported drawing of gradient type %d";
        goto LABEL_81;
      case 4:
        v61 = *((_QWORD *)v19 + 2);
        if ((v61 & 0x8000000000000000) == 0)
        {
          v62 = *((_QWORD *)v19 + 1);
          if (v61 + v62 <= v141)
          {
            v168 = *(CGRect *)(v17 + 8);
            v63 = *(_OWORD *)(v17 + 56);
            *(_OWORD *)&transform.a = *(_OWORD *)(v17 + 40);
            *(_OWORD *)&transform.c = v63;
            *(_OWORD *)&transform.tx = *(_OWORD *)(v17 + 72);
            v169 = CGRectApplyAffineTransform(v168, &transform);
            CGContextBeginTransparencyLayerWithRect(a1, v169, 0);
            DrawPerspectiveSubcommands(a1, v158, v62, v61, a5);
            CGContextEndTransparencyLayer(a1);
            a3 += v61;
            goto LABEL_127;
          }
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v139 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return;
          goto LABEL_151;
        }
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v139 = __CGPerspectiveOSLog_log;
        if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        {
LABEL_151:
          LOWORD(transform.a) = 0;
          v140 = "Internal inconsistency: out of bounds subcommands end index";
          goto LABEL_160;
        }
        break;
      case 5:
        v64 = CFArrayGetCount(*(CFArrayRef *)(v158 + 64));
        if (*(_BYTE *)(a5 + 40))
        {
          v65 = *(double *)(a5 + 32);
          if (v65 == 0.0)
            v65 = 2.0;
          v66 = v65 / *(double *)(a5 + 48);
        }
        else
        {
          v66 = 1.0;
        }
        v146 = v66;
        v67 = (__int128 *)*((_QWORD *)v19 + 1);
        memset(&v161, 0, sizeof(v161));
        v68 = *v67;
        v69 = v67[2];
        *(_OWORD *)&transform.c = v67[1];
        *(_OWORD *)&transform.tx = v69;
        *(_OWORD *)&transform.a = v68;
        CGAffineTransformScale(&v161, &transform, v66, v66);
        *(float64x2_t *)&v161.tx = vmulq_n_f64(*(float64x2_t *)&v161.tx, v146);
        QuantizationLevelWithStyle = CGFontGetQuantizationLevelWithStyle();
        v71 = *((double *)v67 + 11);
        t2 = v161;
        CGAffineTransformScale(&transform, &t2, 1.0 / v71, 1.0 / v71);
        v161 = transform;
        v147 = (double *)malloc_type_malloc(16 * *((_QWORD *)v67 + 6), 0x1000040451B5BE8uLL);
        v72 = *((_QWORD *)v67 + 8);
        v73 = *((_QWORD *)v67 + 6);
        b = v161.b;
        a = v161.a;
        c = v161.c;
        d = v161.d;
        v78 = *(_OWORD *)&v161.tx;
        if (CGVersionLoad_onceToken == -1)
        {
          v79 = (void (*)(unint64_t, unint64_t, CGAffineTransform *, double *))__CGFontGetGlyphPositionsFunc;
          if (__CGFontGetGlyphPositionsFunc)
            goto LABEL_68;
        }
        else
        {
          r1a = v161.c;
          v155 = v161.a;
          path1a = v161.d;
          v150 = v161.b;
          dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
          d = path1a;
          b = v150;
          c = r1a;
          a = v155;
          v79 = (void (*)(unint64_t, unint64_t, CGAffineTransform *, double *))__CGFontGetGlyphPositionsFunc;
          if (__CGFontGetGlyphPositionsFunc)
          {
LABEL_68:
            transform.a = a;
            transform.b = b;
            transform.c = c;
            transform.d = d;
            *(_OWORD *)&transform.tx = v78;
            v79(v72, v73, &transform, v147);
            goto LABEL_109;
          }
        }
        if (v73)
        {
          v94 = *(double *)&v78 + 0.001;
          v95 = *((double *)&v78 + 1) + 0.001;
          if (v73 >= 5)
          {
            v96 = 0;
            v97 = (unint64_t)&v147[2 * v73];
            v98 = v72 + 16 * v73;
            v99 = v98 - 8;
            v101 = (unint64_t)(v147 + 1) < v98 && v72 + 8 < v97;
            v102 = v72 >= v97 - 8 || (unint64_t)v147 >= v99;
            if (v102 && !v101)
            {
              v103 = v73 & 1;
              if ((v73 & 1) == 0)
                v103 = 2;
              v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v94, 0);
              v96 = v73 - v103;
              v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v95, 0);
              v106 = v96;
              v107 = (const double *)v72;
              v108 = v147;
              do
              {
                v164 = vld2q_f64(v107);
                v107 += 4;
                v165.val[0] = vmlaq_n_f64(vmlaq_n_f64(v104, v164.val[0], a), v164.val[1], c);
                v165.val[1] = vmlaq_n_f64(vmlaq_n_f64(v105, v164.val[1], d), v164.val[0], b);
                vst2q_f64(v108, v165);
                v108 += 4;
                v106 -= 2;
              }
              while (v106);
            }
          }
          else
          {
            v96 = 0;
          }
          v109 = v73 - v96;
          v110 = 16 * v96;
          v111 = &v147[2 * v96 + 1];
          v112 = (double *)(v72 + v110);
          do
          {
            v113 = v112[1];
            *(v111 - 1) = v94 + *v112 * a + v113 * c;
            v114 = *v112;
            v112 += 2;
            *v111 = v95 + v113 * d + v114 * b;
            v111 += 2;
            --v109;
          }
          while (v109);
        }
LABEL_109:
        path1 = CGPathCreateMutable();
        r1 = v142;
        v115 = *((_QWORD *)v67 + 6);
        y = v144;
        v156 = v143;
        x = v145;
        if (v115 < 1)
        {
LABEL_119:
          if (*(_BYTE *)(v17 + 322))
          {
            IsEmpty = CGPathIsEmpty(path1);
            v133 = v156;
            v134 = r1;
            if (!IsEmpty)
            {
              DrawPath(a1, v17, path1);
              *(CGRect *)(&v133 - 2) = CGPathGetBoundingBox(path1);
              x = v135;
              y = v136;
            }
          }
          else
          {
            v133 = v156;
            v134 = r1;
          }
          *(CGFloat *)(v17 + 8) = x;
          *(CGFloat *)(v17 + 16) = y;
          *(CGFloat *)(v17 + 24) = v133;
          *(CGFloat *)(v17 + 32) = v134;
          goto LABEL_126;
        }
        v118 = 0;
        v119 = (double)(int)QuantizationLevelWithStyle;
        v120 = (double)SHIDWORD(QuantizationLevelWithStyle);
        v151 = 1.0 / (double)(int)QuantizationLevelWithStyle;
        v121 = 1.0 / (double)SHIDWORD(QuantizationLevelWithStyle);
        v122 = v147 + 1;
        y = v144;
        x = v145;
        v156 = v143;
        r1 = v142;
        v123 = 1.0 / v146;
        while (2)
        {
          v124 = *(_QWORD *)(*((_QWORD *)v67 + 7) + 8 * v118);
          if (v124 < 0 || v124 >= v64)
            goto LABEL_113;
          v125 = (CGPathRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v158 + 64), v124);
          if (!*(_DWORD *)v125)
          {
            v126 = v125;
            v127 = *(v122 - 1);
            v128 = floor(v127);
            v129 = floor(*v122);
            v130 = (v128 + (double)(int)((v127 - v128) * v119) * v151) * v123;
            v131 = (v129 + (double)(int)((*v122 - v129) * v120) * v121) * v123;
            CGContextSaveGState(a1);
            memset(&transform, 0, sizeof(transform));
            CGAffineTransformMakeTranslation(&transform, v130, v131);
            t2 = transform;
            CGContextConcatCTM(a1, &t2);
            if (*(_BYTE *)(v17 + 322))
            {
              CGPathAddPath(path1, &transform, v126[1]);
            }
            else
            {
              DrawPath(a1, v17, v126[1]);
              BoundingBox = CGPathGetBoundingBox(v126[1]);
              t2 = transform;
              v175 = CGRectApplyAffineTransform(BoundingBox, &t2);
              v172.origin.x = x;
              v172.origin.y = y;
              v172.size.width = v156;
              v172.size.height = r1;
              v173 = CGRectUnion(v172, v175);
              x = v173.origin.x;
              y = v173.origin.y;
              v156 = v173.size.width;
              r1 = v173.size.height;
            }
            CGContextRestoreGState(a1);
            v115 = *((_QWORD *)v67 + 6);
LABEL_113:
            ++v118;
            v122 += 2;
            if (v118 >= v115)
              goto LABEL_119;
            continue;
          }
          break;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v137 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_126;
LABEL_137:
          LOWORD(transform.a) = 0;
          _os_log_error_impl(&dword_224FE9000, v137, OS_LOG_TYPE_ERROR, "Expected path type", (uint8_t *)&transform, 2u);
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v137 = __CGPerspectiveOSLog_log;
          if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_137;
        }
LABEL_126:
        CGPathRelease(path1);
        free(v147);
LABEL_127:
        CGContextRestoreGState(a1);
        if (*(_BYTE *)a5)
        {
          CGContextSaveGState(a1);
          v138 = *(CGColor **)(a5 + 8);
          if (v138)
            CGContextSetStrokeColorWithColor(a1, v138);
          else
            CGContextSetRGBStrokeColor(a1, 0.0, 0.0, 1.0, 1.0);
          CGContextSetLineWidth(a1, 1.0);
          CGContextSetLineDash(a1, 0.0, 0, 0);
          CGContextStrokeRect(a1, *(CGRect *)(v17 + 8));
          CGContextRestoreGState(a1);
        }
        if (++a3 < v152)
          continue;
        if (v11 >= 1)
        {
          do
          {
            CGContextRestoreGState(a1);
            --v11;
          }
          while (v11);
        }
        return;
      default:
        if (v20 == 1)
          goto LABEL_127;
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v46 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
            goto LABEL_127;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v46 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
            goto LABEL_127;
        }
        LODWORD(transform.a) = 67109120;
        HIDWORD(transform.a) = v20;
        v47 = v46;
        v48 = "Unsupported drawing of resource type %d";
LABEL_81:
        _os_log_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEFAULT, v48, (uint8_t *)&transform, 8u);
        goto LABEL_127;
    }
    break;
  }
}

void UpdateGState(CGContext *a1, uint64_t a2)
{
  CGContextSetLineWidth(a1, *(CGFloat *)(a2 + 232));
  CGContextSetLineWidthThreshold();
  CGContextSetLineCap(a1, *(CGLineCap *)(a2 + 252));
  CGContextSetLineJoin(a1, *(CGLineJoin *)(a2 + 248));
  CGContextSetMiterLimit(a1, *(CGFloat *)(a2 + 280));
  CGContextSetStrokeColorWithColor(a1, *(CGColorRef *)(a2 + 224));
  CGContextSetFillColorWithColor(a1, *(CGColorRef *)(a2 + 88));
  CGContextSetPatternPhase(a1, *(CGSize *)(a2 + 296));
  CGContextSetStrokeAdjust();
  CGContextSetShouldAntialias(a1, *(_BYTE *)(a2 + 321));
  CGContextSetFlatness(a1, *(CGFloat *)(a2 + 312));
}

uint64_t DrawSoftMaskCommands(uint64_t result, CGContext *a2)
{
  uint64_t v3;
  CFIndex Count;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[24];
  __int128 v8;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      *(_OWORD *)&v7[8] = 0u;
      v8 = 0u;
      v5 = 0u;
      v6 = 0;
      *(_OWORD *)v7 = xmmword_22619D7B0;
      *(_QWORD *)&v8 = 0x3FF0000000000000;
      CGContextGetBaseCTM();
      Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 72));
      DrawPerspectiveSubcommands(a2, v3, 0, Count, (uint64_t)&v5);
      return CGContextSetBaseCTM();
    }
  }
  return result;
}

void ReleaseSoftMaskInfo(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void DrawPath(CGContext *a1, uint64_t a2, const CGPath *a3)
{
  const CGFloat *v6;
  unsigned int v7;

  UpdateGState(a1, a2);
  v6 = *(const CGFloat **)(a2 + 256);
  if (v6)
  {
    CGContextSetLineDash(a1, *(CGFloat *)(a2 + 272), v6, *(_QWORD *)(a2 + 264));
    v7 = *(_DWORD *)(a2 + 96);
  }
  else
  {
    CGContextSetLineDash(a1, 0.0, 0, 0);
    v7 = *(_DWORD *)(a2 + 96);
    if (v7 > 4)
      return;
  }
  switch(v7)
  {
    case 0u:
      CGContextAddPath(a1, a3);
      CGContextFillPath(a1);
      return;
    case 1u:
      CGContextAddPath(a1, a3);
      CGContextEOFillPath(a1);
      return;
    case 2u:
      goto LABEL_10;
    case 3u:
      CGContextAddPath(a1, a3);
      CGContextFillPath(a1);
      goto LABEL_10;
    case 4u:
      CGContextAddPath(a1, a3);
      CGContextEOFillPath(a1);
LABEL_10:
      CGContextAddPath(a1, a3);
      CGContextStrokePath(a1);
      break;
    default:
      return;
  }
}

void CGImageDescriptionRelease(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  if (*(_BYTE *)(a1 + 112))
    free(*(void **)(a1 + 64));
}

uint64_t DecodeCGImage(uint64_t a1, CGImageRef *a2)
{
  _BOOL4 v4;
  int v5;
  uint64_t result;
  BOOL v8;
  CGImage *v9;
  CGImage *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  uint32_t v17;
  __int16 v18;
  CGImageRef image;
  unsigned __int8 v20;
  _BYTE mask[12];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v4 = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v20, 1uLL);
  v5 = v20;
  if (v4 && v20 < 3u)
  {
    *a2 = 0;
    if (!v5)
      return 1;
    if (v5 != 2)
    {
      if (v5 == 1 && !DecodeBaseCGImage(a1, a2))
        return 0;
      return *a2 != 0;
    }
    image = 0;
    if (DecodeBaseCGImage(a1, &image))
    {
      *(_QWORD *)mask = 0;
      v8 = DecodeBaseCGImage(a1, (CGImageRef *)mask);
      v9 = image;
      if (v8)
      {
        v10 = *(CGImage **)mask;
        *a2 = CGImageCreateWithMask(image, *(CGImageRef *)mask);
        CGImageRelease(v9);
        CGImageRelease(v10);
        return *a2 != 0;
      }
      CGImageRelease(image);
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v11 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v11 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      v18 = 0;
      v14 = "Failed to decode image's mask";
      v15 = (uint8_t *)&v18;
      v16 = v11;
      v17 = 2;
    }
    else
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v13 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v13 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      *(_DWORD *)mask = 136315650;
      *(_QWORD *)&mask[4] = "Failed to decode image's base image";
      v22 = 2080;
      v23 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext/CGPerspectiveContext/CGPerspectiveImageCoder.c";
      v24 = 1024;
      v25 = 626;
      v14 = "%s in file %s (line %i)";
      v15 = mask;
      v16 = v13;
      v17 = 28;
    }
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v14, v15, v17);
    return 0;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v12 = __CGPerspectiveOSLog_log;
    result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
LABEL_21:
      *(_DWORD *)mask = 136315650;
      *(_QWORD *)&mask[4] = "Failed to decode image type";
      v22 = 2080;
      v23 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext/CGPerspectiveContext/CGPerspectiveImageCoder.c";
      v24 = 1024;
      v25 = 608;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "%s in file %s (line %i)", mask, 0x1Cu);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v12 = __CGPerspectiveOSLog_log;
    result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
      goto LABEL_21;
  }
  return result;
}

BOOL DecodeBaseCGImage(uint64_t a1, CGImageRef *a2)
{
  CGSize v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  CGImage *v9;
  CGImageRef v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  CGFloat *v21;
  CGDataProvider *v22;
  CGDataProvider *v23;
  CGImageRef v24;
  CGImage *v25;
  NSObject *v26;
  uint32_t v27;
  uint64_t v28;
  int v29;
  CGRect v30;
  __int16 v31;
  _BYTE size[12];
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  uint8_t buf[16];
  CFDataRef data[2];
  __int128 v39;
  size_t bytesPerRow[2];
  CGFloat *decode[2];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v4 = *(CGSize *)(MEMORY[0x24BDBF090] + 16);
  v30.origin = (CGPoint)*MEMORY[0x24BDBF090];
  v30.size = v4;
  v5 = *(_QWORD *)(a1 + 16);
  buf[0] = 0;
  if (!CGPerspectiveDataDecode_bytes(v5, buf, 1uLL))
    return 0;
  v6 = buf[0];
  if (buf[0])
  {
    result = CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v30, 0x20uLL);
    if (!result)
      return result;
  }
  v8 = *(_QWORD *)(a1 + 16);
  buf[0] = 0;
  if (!CGPerspectiveDataDecode_bytes(v8, buf, 1uLL))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v11 = __CGPerspectiveOSLog_log;
      result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v11 = __CGPerspectiveOSLog_log;
      result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    *(_WORD *)buf = 0;
    v12 = "Failed to decode shared memory flag";
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
    return 0;
  }
  if (!buf[0])
  {
    *a2 = 0;
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    *(_OWORD *)bytesPerRow = 0u;
    *(_OWORD *)decode = 0u;
    *(_OWORD *)data = 0u;
    v39 = 0u;
    *(_OWORD *)buf = 0u;
    v13 = *(_QWORD *)(a1 + 16);
    size[0] = 0;
    if (!CGPerspectiveDataDecode_bytes(v13, size, 1uLL))
      return 0;
    buf[8] = size[0] != 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &v39, 4uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), (char *)&v39 + 4, 4uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), (char *)&v39 + 8, 4uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), (char *)&v39 + 12, 4uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), bytesPerRow, 4uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), (char *)bytesPerRow + 4, 4uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &bytesPerRow[1], 1uLL))
      return 0;
    if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), &decode[1], 1uLL))
      return 0;
    v14 = *(_QWORD *)(a1 + 16);
    size[0] = 0;
    if (!CGPerspectiveDataDecode_bytes(v14, size, 1uLL))
      return 0;
    v29 = v6;
    if (size[0])
    {
      *(_QWORD *)size = 0;
      if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), size, 8uLL))
        return 0;
      v15 = *(_QWORD *)size;
      if (*(uint64_t *)size < 1
        || (v16 = *(_QWORD *)(a1 + 16), v15 > CFDataGetLength(*(CFDataRef *)v16) - *(_QWORD *)(v16 + 8)))
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return 0;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return 0;
        }
        v31 = 0;
        v18 = "Inconsistent or out of bounds read for image's decode array";
        goto LABEL_33;
      }
      v21 = (CGFloat *)malloc_type_malloc(*(size_t *)size, 0xD94F3E7CuLL);
      decode[0] = v21;
      LOBYTE(v44) = 1;
      if (!v21)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return 0;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return 0;
        }
        v31 = 0;
        v18 = "Failed to malloc image's decode array";
LABEL_33:
        v19 = (uint8_t *)&v31;
LABEL_68:
        v26 = v17;
        v27 = 2;
LABEL_69:
        _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, v18, v19, v27);
        return 0;
      }
      if (!CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), v21, *(size_t *)size))
        return 0;
    }
    if (!buf[8] && !DecodeCGColorSpace(a1, &data[1]))
      return 0;
    if (!CGPerspectiveDataDecode_CFData(*(_QWORD *)(a1 + 16), data))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v28 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v28 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      *(_DWORD *)size = 136315650;
      *(_QWORD *)&size[4] = "Failed to read pixel buffer";
      v33 = 2080;
      v34 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext/CGPerspectiveContext/CGPerspectiveImageCoder.c";
      v35 = 1024;
      v36 = 234;
      v18 = "%s in file %s (line %i)";
      v19 = size;
      v26 = v28;
      v27 = 28;
      goto LABEL_69;
    }
    if (data[0])
    {
      v22 = CGDataProviderCreateWithCFData(data[0]);
      if (!v22)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return 0;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            return 0;
        }
        *(_WORD *)size = 0;
        goto LABEL_67;
      }
      v23 = v22;
      if (buf[8])
        v24 = CGImageMaskCreate(v39, DWORD1(v39), HIDWORD(v39), DWORD2(v39), LODWORD(bytesPerRow[0]), v22, decode[0], LOBYTE(decode[1]) != 0);
      else
        v24 = CGImageCreate(v39, DWORD1(v39), HIDWORD(v39), DWORD2(v39), LODWORD(bytesPerRow[0]), data[1], HIDWORD(bytesPerRow[0]), v22, decode[0], LOBYTE(decode[1]) != 0, (CGColorRenderingIntent)LOBYTE(bytesPerRow[1]));
      v25 = v24;
      CGDataProviderRelease(v23);
      CGImageDescriptionRelease((uint64_t)buf);
      if (v25)
      {
        v9 = v25;
        *a2 = v25;
        if (!v29)
          return 1;
        goto LABEL_10;
      }
    }
    else
    {
      CGImageDescriptionRelease((uint64_t)buf);
    }
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    *(_WORD *)size = 0;
LABEL_67:
    v19 = size;
    goto LABEL_68;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)size = 0;
    if (CGPerspectiveDataDecode_bytes(*(_QWORD *)(a1 + 16), size, 8uLL))
    {
      v9 = CGPerspectiveDecodingCacheCopyImage(*(_QWORD *)(a1 + 40), *(uint64_t *)size);
      if (v9)
      {
        *a2 = v9;
        if (!v6)
          return 1;
LABEL_10:
        v10 = CGImageCreateWithImageInRect(v9, v30);
        CGImageRelease(*a2);
        *a2 = v10;
        return 1;
      }
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v20 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v20 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          return 0;
      }
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = *(_QWORD *)size;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "Failed to find cached image ID %llu", buf, 0xCu);
    }
    return 0;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v11 = __CGPerspectiveOSLog_log;
    result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    goto LABEL_36;
  }
  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
  v11 = __CGPerspectiveOSLog_log;
  result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
  if (result)
  {
LABEL_36:
    *(_WORD *)buf = 0;
    v12 = "Asked to decode a cached image, but has no cache";
    goto LABEL_15;
  }
  return result;
}

BOOL DecodeCGImageHeader(uint64_t a1, CFDataRef *a2, void *a3)
{
  vm_map_t v5;
  mem_entry_name_port_t Port;
  kern_return_t v7;
  mach_error_t v8;
  NSObject *v9;
  _BOOL8 v10;
  const __CFAllocator *v12;
  CFDataRef v13;
  CFTypeRef *v14;
  char *v15;
  uint64_t v16;
  mach_vm_address_t address;
  CFAllocatorContext context;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  address = 0;
  v5 = *MEMORY[0x24BDAEC58];
  Port = CAMachPortGetPort();
  v7 = mach_vm_map(v5, &address, 0xFA00uLL, 0, 1048577, Port, 0, 0, 1, 1, 2u);
  if (v7)
  {
    v8 = v7;
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    v15 = mach_error_string(v8);
    LODWORD(context.version) = 136315138;
    *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v15;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to extract header port: %s", (uint8_t *)&context, 0xCu);
    return 0;
  }
  context.version = 0;
  memset(&context.retain, 0, 40);
  context.info = (void *)64000;
  context.deallocate = (CFAllocatorDeallocateCallBack)deallocate_vm_region;
  context.preferredSize = 0;
  v12 = CFAllocatorCreate(0, &context);
  *a2 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)address, 64000, v12);
  CFRelease(v12);
  v13 = *a2;
  v14 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  *v14 = v13;
  CFRetain(v13);
  v14[1] = 0;
  v16 = 0;
  v10 = CGPerspectiveDataDecode_bytes((uint64_t)v14, &v16, 8uLL) && CGPerspectiveDataDecode_bytes((uint64_t)v14, a3, 8uLL);
  CFRelease(*v14);
  free(v14);
  return v10;
}

uint64_t deallocate_vm_region(uint64_t a1, uint64_t a2)
{
  return mach_vm_deallocate(*MEMORY[0x24BDAEC58], -*MEMORY[0x24BDB03C8] & a1, (a2 + *MEMORY[0x24BDB03C8] - 1) & -*MEMORY[0x24BDB03C8]);
}

CGDataProvider *DecodeCGImageBody(const void *a1, uint64_t a2, CGImageRef *a3)
{
  CFTypeRef *v5;
  BOOL v6;
  vm_map_t v7;
  mach_vm_size_t v8;
  mem_entry_name_port_t Port;
  kern_return_t v10;
  mach_error_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  size_t *p_context;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  CGDataProvider *result;
  const __CFAllocator *v20;
  const __CFAllocator *v21;
  const __CFData *v22;
  CFDataRef *v23;
  _QWORD *v24;
  const CFDictionaryKeyCallBacks *v25;
  const CFDictionaryValueCallBacks *v26;
  CFIndex v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  int v32;
  _BOOL4 v33;
  int v34;
  int v35;
  _BOOL4 v36;
  unint64_t v37;
  void *v38;
  CGDataProvider *v39;
  CGImageRef v40;
  CGImageRef v41;
  __int16 v42;
  size_t size[2];
  _QWORD v44[2];
  CFIndex length[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  mach_vm_address_t address;
  __int128 context;
  __int128 context_16;
  __int128 context_32;
  _OWORD context_48[4];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  *v5 = a1;
  CFRetain(a1);
  v5[1] = 0;
  length[0] = 0;
  v6 = CGPerspectiveDataDecode_bytes((uint64_t)v5, length, 8uLL);
  CFRelease(*v5);
  free(v5);
  if (!v6)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    LOWORD(context) = 0;
    v14 = "Failed to extract buffer size hint";
    p_context = (size_t *)&context;
    goto LABEL_52;
  }
  address = 0;
  v7 = *MEMORY[0x24BDAEC58];
  v8 = length[0];
  Port = CAMachPortGetPort();
  v10 = mach_vm_map(v7, &address, v8, 0, 1048577, Port, 0, 0, 1, 1, 2u);
  if (v10)
  {
    v11 = v10;
    if (__CGPerspectiveOSLog_onceToken != -1)
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v12 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
      goto LABEL_5;
    }
    v12 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      v13 = mach_error_string(v11);
      LODWORD(context) = 136315138;
      *(_QWORD *)((char *)&context + 4) = v13;
      v14 = "Failed to extract buffer port: %s";
      p_context = (size_t *)&context;
      v16 = v12;
      v17 = 12;
LABEL_53:
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v14, (uint8_t *)p_context, v17);
    }
    return 0;
  }
  context_32 = 0u;
  *(_QWORD *)&context_48[0] = 0;
  *(_QWORD *)&context = 0;
  context_16 = 0u;
  *((_QWORD *)&context + 1) = length[0];
  *((_QWORD *)&context_48[0] + 1) = deallocate_vm_region;
  *(_QWORD *)&context_48[1] = 0;
  v20 = CFAllocatorCreate(0, (CFAllocatorContext *)&context);
  v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v22 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)address, length[0], v20);
  CFRelease(v20);
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)length = 0u;
  v46 = 0u;
  v23 = (CFDataRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  *v23 = (CFDataRef)a1;
  CFRetain(a1);
  v23[1] = 0;
  *(_QWORD *)&v46 = v23;
  v24 = malloc_type_calloc(0x20uLL, 1uLL, 0xD44EDC0AuLL);
  v25 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v26 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  *v24 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v24[1] = CFDictionaryCreateMutable(v21, 0, v25, v26);
  v24[2] = CFDictionaryCreateMutable(v21, 0, v25, v26);
  v24[3] = 0;
  *(_QWORD *)&v48 = v24;
  v54 = 0;
  memset(context_48, 0, sizeof(context_48));
  context_32 = 0u;
  context = 0u;
  context_16 = (unint64_t)v22;
  address = 0;
  result = (CGDataProvider *)CGPerspectiveDataDecode_bytes((uint64_t)v23, &address, 8uLL);
  if (!(_DWORD)result)
    return result;
  v27 = CFDataGetLength(v22);
  if (v27 != address)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v18 = __CGPerspectiveOSLog_log;
      result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v18 = __CGPerspectiveOSLog_log;
      result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
    }
    LOWORD(v44[0]) = 0;
    v14 = "Image buffer didn't match expected length";
    p_context = v44;
    goto LABEL_52;
  }
  v44[0] = 0;
  v28 = CGPerspectiveDataDecode_bytes((uint64_t)v23, v44, 8uLL);
  LOBYTE(size[0]) = 0;
  v29 = CGPerspectiveDataDecode_bytes((uint64_t)v23, size, 1uLL);
  if (v29)
    BYTE8(context) = LOBYTE(size[0]) != 0;
  v30 = v28 & CGPerspectiveDataDecode_bytes((uint64_t)v23, &context_32, 4uLL);
  v31 = CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_32 + 4, 4uLL);
  v32 = v30 & v31 & CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_32 + 8, 4uLL);
  v33 = CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_32 + 12, 4uLL);
  v34 = v33 & CGPerspectiveDataDecode_bytes((uint64_t)v23, context_48, 4uLL);
  v35 = v32 & v34 & CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)context_48 + 4, 4uLL);
  v36 = CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)context_48 + 8, 1uLL);
  if ((v29 & v36 & CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_48[1] + 8, 1uLL) & v35 & 1) == 0)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v18 = __CGPerspectiveOSLog_log;
      result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v18 = __CGPerspectiveOSLog_log;
      result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
    }
    LOWORD(size[0]) = 0;
    v14 = "Failed to parse image description header.";
    p_context = size;
LABEL_52:
    v16 = v18;
    v17 = 2;
    goto LABEL_53;
  }
  LOBYTE(size[0]) = 0;
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v23, size, 1uLL))
    return 0;
  if (!LOBYTE(size[0]))
    goto LABEL_30;
  size[0] = 0;
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v23, size, 8uLL))
    return 0;
  v37 = CFDataGetLength(*v23) - (_QWORD)v23[1];
  if (v37 < size[0])
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    v42 = 0;
    v14 = "Out of bounds read for image's decode array";
    goto LABEL_49;
  }
  v38 = malloc_type_malloc(size[0], 0x1C6577D3uLL);
  *(_QWORD *)&context_48[1] = v38;
  LOBYTE(v54) = 1;
  if (!v38)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        return 0;
    }
    v42 = 0;
    v14 = "Failed to malloc image's decode array";
LABEL_49:
    p_context = (size_t *)&v42;
    goto LABEL_52;
  }
  result = (CGDataProvider *)CGPerspectiveDataDecode_bytes((uint64_t)v23, v38, size[0]);
  if ((_DWORD)result)
  {
LABEL_30:
    if (!BYTE8(context))
    {
      if (!DecodeCGColorSpace((uint64_t)length, (CGColorSpaceRef *)&context_16 + 1)
        || !*((_QWORD *)&context_16 + 1))
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v18 = __CGPerspectiveOSLog_log;
          result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v18 = __CGPerspectiveOSLog_log;
          result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            return result;
        }
        LOWORD(size[0]) = 0;
        v14 = "Failed to decode correct color space resource index for CGImageRef";
        p_context = size;
        goto LABEL_52;
      }
      v23 = (CFDataRef *)v46;
    }
    CFRelease(*v23);
    free(v23);
    CGPerspectiveColorCacheRelease((CFTypeRef *)v48);
    result = CGDataProviderCreateWithCFData((CFDataRef)context_16);
    if (result)
    {
      v39 = result;
      if (BYTE8(context))
        v40 = CGImageMaskCreate(context_32, DWORD1(context_32), HIDWORD(context_32), DWORD2(context_32), LODWORD(context_48[0]), result, *(const CGFloat **)&context_48[1], BYTE8(context_48[1]) != 0);
      else
        v40 = CGImageCreate(context_32, DWORD1(context_32), HIDWORD(context_32), DWORD2(context_32), LODWORD(context_48[0]), *((CGColorSpaceRef *)&context_16 + 1), DWORD1(context_48[0]), result, *(const CGFloat **)&context_48[1], BYTE8(context_48[1]) != 0, (CGColorRenderingIntent)BYTE8(context_48[0]));
      v41 = v40;
      CGDataProviderRelease(v39);
      CGImageDescriptionRelease((uint64_t)&context);
      *a3 = v41;
      if (v41)
        return (CGDataProvider *)1;
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v18 = __CGPerspectiveOSLog_log;
        result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
LABEL_42:
          LOWORD(size[0]) = 0;
          p_context = size;
          goto LABEL_52;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v18 = __CGPerspectiveOSLog_log;
        result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
          goto LABEL_42;
      }
    }
  }
  return result;
}

void CGPerspectiveCacheFinalize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const __CFDictionary *v3;
  uint64_t v4;
  const __CFDictionary *v5;
  _QWORD v6[5];
  _QWORD context[5];

  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = *(const __CFDictionary **)(a1 + 32);
  v4 = MEMORY[0x24BDAC760];
  if (v3)
  {
    context[0] = MEMORY[0x24BDAC760];
    context[1] = 0x40000000;
    context[2] = __CGPerspectiveCacheFinalize_block_invoke;
    context[3] = &__block_descriptor_tmp_5_2;
    context[4] = a1;
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)DictionaryApplierFunction, context);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  v5 = *(const __CFDictionary **)(a1 + 40);
  if (v5)
  {
    v6[0] = v4;
    v6[1] = 0x40000000;
    v6[2] = __CGPerspectiveCacheFinalize_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_6_1;
    v6[4] = a1;
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)DictionaryApplierFunction, v6);
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
  os_unfair_lock_unlock(v2);
}

__CFString *CGPerspectiveCacheCreateDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  _QWORD v7[5];
  _QWORD context[5];

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  CFStringAppend(Mutable, CFSTR("CGPerspectiveCache:\n"));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 32))
  {
    CFStringAppend(Mutable, CFSTR(" - Encoding cache:\n"));
    v4 = *(const __CFDictionary **)(a1 + 32);
    context[0] = v3;
    context[1] = 0x40000000;
    context[2] = __CGPerspectiveCacheCreateDebugDesc_block_invoke;
    context[3] = &__block_descriptor_tmp_13_2;
    context[4] = Mutable;
    CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)DictionaryApplierFunction, context);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    CFStringAppend(Mutable, CFSTR(" - Decoding cache:\n"));
    v5 = *(const __CFDictionary **)(a1 + 40);
    v7[0] = v3;
    v7[1] = 0x40000000;
    v7[2] = __CGPerspectiveCacheCreateDebugDesc_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_16_2;
    v7[4] = Mutable;
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)DictionaryApplierFunction, v7);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  return Mutable;
}

uint64_t CGPerspectiveDecodingCacheLoadPorts(uint64_t a1, const __CFArray *a2)
{
  os_unfair_lock_s *v4;
  CFIndex Count;
  CFIndex v6;
  const __CFAllocator *v7;
  const void *ValueAtIndex;
  CFIndex v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;
  CFTypeID v13;
  CFNumberRef v14;
  _QWORD *Instance;
  CFDataRef v16;
  NSObject *v17;
  const char *v18;
  uint64_t v20;
  CFDataRef v21;
  uint8_t valuePtr[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (*(_QWORD *)(a1 + 40))
  {
    Count = CFArrayGetCount(a2);
    if ((Count & 1) == 0)
      goto LABEL_3;
LABEL_15:
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
    }
    *(_WORD *)valuePtr = 0;
    v18 = "Failed to decode ports array: was not a multiple of two";
LABEL_25:
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, v18, valuePtr, 2u);
    goto LABEL_26;
  }
  *(_QWORD *)(a1 + 40) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  Count = CFArrayGetCount(a2);
  if ((Count & 1) != 0)
    goto LABEL_15;
LABEL_3:
  if (Count < 1)
  {
LABEL_18:
    os_unfair_lock_unlock(v4);
    return 1;
  }
  v6 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
    v9 = v6 + 1;
    v10 = CFArrayGetValueAtIndex(a2, v9);
    if (!ValueAtIndex
      || (v11 = v10, v12 = CFGetTypeID(ValueAtIndex), v12 != CAMachPortGetTypeID())
      || !v11
      || (v13 = CFGetTypeID(v11), v13 != CAMachPortGetTypeID()))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v17 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_26;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v17 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_26;
      }
      *(_WORD *)valuePtr = 0;
      v18 = "Failed to match expected types or is null";
      goto LABEL_25;
    }
    v20 = 0;
    v21 = 0;
    if (!DecodeCGImageHeader((uint64_t)ValueAtIndex, &v21, &v20))
      break;
    *(_QWORD *)valuePtr = v20;
    v14 = CFNumberCreate(v7, kCFNumberSInt64Type, valuePtr);
    if (CGImageDecoderTypeID_onceToken != -1)
      dispatch_once(&CGImageDecoderTypeID_onceToken, &__block_literal_global_51);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    v16 = v21;
    Instance[2] = v20;
    Instance[3] = v16;
    Instance[4] = v11;
    Instance[5] = 0;
    CFRetain(v11);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v14, Instance);
    CFRelease(Instance);
    CFRelease(v14);
    v6 = v9 + 1;
    if (Count <= v6)
      goto LABEL_18;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v17 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    goto LABEL_26;
  }
  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
  v17 = __CGPerspectiveOSLog_log;
  if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
  {
LABEL_24:
    *(_WORD *)valuePtr = 0;
    v18 = "Failed to decode header";
    goto LABEL_25;
  }
LABEL_26:
  os_unfair_lock_unlock(v4);
  return 0;
}

CGImageRef CGPerspectiveDecodingCacheCopyImage(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  CFNumberRef v5;
  CGImage **Value;
  CGImage **v7;
  CGImage *v8;
  NSObject *v9;
  NSObject *v11;
  CGImageRef v12;
  uint8_t valuePtr[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (!*(_QWORD *)(a1 + 40))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      {
LABEL_7:
        os_unfair_lock_unlock(v4);
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_7;
    }
    *(_WORD *)valuePtr = 0;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Consistency failure: decoded image expected ports, but none were initially decoded", valuePtr, 2u);
    goto LABEL_7;
  }
  v12 = 0;
  *(_QWORD *)valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, valuePtr);
  Value = (CGImage **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v5);
  if (Value)
  {
    v7 = Value;
    v8 = Value[5];
    if (v8)
    {
      v12 = v8;
      CGImageRetain(v8);
    }
    else
    {
      if (!DecodeCGImageBody(v7[3], (uint64_t)v7[4], &v12))
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v11 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_12;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v11 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_12;
        }
        *(_WORD *)valuePtr = 0;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Failed to decode cache image", valuePtr, 2u);
        goto LABEL_12;
      }
      CFRelease(v7[3]);
      v7[3] = 0;
      CFRelease(v7[4]);
      v7[4] = 0;
      CGImageSetProperty();
      CFRetain((CFTypeRef)a1);
      CGImageNotificationCenter();
      CGNotificationCenterAddCallback();
      v7[5] = v12;
    }
  }
LABEL_12:
  CFRelease(v5);
  os_unfair_lock_unlock(v4);
  return v12;
}

void CGImageNotificationWillDeallocate(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  os_unfair_lock_s *v6;
  __CFDictionary *v7;
  const void *Property;
  NSObject *v9;
  uint8_t v10[16];

  v6 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  v7 = *(__CFDictionary **)(a2 + 32);
  if (v7)
    CFDictionaryRemoveValue(v7, a4);
  if (*(_QWORD *)(a2 + 40))
  {
    Property = (const void *)CGImageGetProperty();
    if (!Property)
    {
      if (__CGPerspectiveOSLog_onceToken != -1)
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v9 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
          goto LABEL_8;
        goto LABEL_7;
      }
      v9 = __CGPerspectiveOSLog_log;
      if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
      {
LABEL_7:
        *(_WORD *)v10 = 0;
      }
    }
LABEL_8:
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 40), Property);
  }
  os_unfair_lock_unlock(v6);
  CFRelease((CFTypeRef)a2);
}

uint64_t DictionaryApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

BOOL GetPortsAndCache(CFDictionaryRef theDict, _QWORD *a2, const __CFDictionary **a3)
{
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  CFTypeID v8;
  const __CFDictionary *v9;
  CFTypeID v10;
  NSObject *v11;
  _BOOL8 result;
  const char *v13;
  uint8_t *v14;
  CFTypeID v15;
  __int16 v16;
  __int16 v17;

  v5 = theDict;
  if (!theDict)
  {
    v7 = 0;
    goto LABEL_11;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("ports"));
  v7 = Value;
  if (Value)
  {
    v8 = CFGetTypeID(Value);
    if (v8 != CFArrayGetTypeID())
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v11 = __CGPerspectiveOSLog_log;
        result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v11 = __CGPerspectiveOSLog_log;
        result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
      }
      v17 = 0;
      v14 = (uint8_t *)&v17;
LABEL_21:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v13, v14, 2u);
      return 0;
    }
  }
  v9 = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("cache"));
  v5 = v9;
  if (!v9)
  {
LABEL_11:
    *a2 = v7;
    *a3 = v5;
    return 1;
  }
  v10 = CFGetTypeID(v9);
  if (CGPerspectiveCacheTypeID_onceToken != -1)
  {
    v15 = v10;
    dispatch_once(&CGPerspectiveCacheTypeID_onceToken, &__block_literal_global_55);
    if (v15 != CGPerspectiveCacheTypeID_id)
      goto LABEL_7;
    goto LABEL_11;
  }
  if (v10 == CGPerspectiveCacheTypeID_id)
    goto LABEL_11;
LABEL_7:
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v11 = __CGPerspectiveOSLog_log;
    result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    goto LABEL_20;
  }
  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
  v11 = __CGPerspectiveOSLog_log;
  result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
  if (result)
  {
LABEL_20:
    v16 = 0;
    v14 = (uint8_t *)&v16;
    goto LABEL_21;
  }
  return result;
}

uint64_t CGPerspectiveCommandsDecodeFromData(uint64_t a1, const __CFData *a2, CFDictionaryRef theDict)
{
  BOOL v6;
  const __CFDictionary *v7;
  const __CFArray *v8;
  const __CFDictionary *Instance;
  const __CFAllocator *v10;
  uint64_t v11;
  int Ports;
  CFDataRef *v13;
  CFTypeRef *v14;
  const CFDictionaryKeyCallBacks *v15;
  const CFDictionaryValueCallBacks *v16;
  uint64_t v17;
  _BOOL4 v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  CGColor *v26;
  NSObject *v27;
  CFDataRef *v28;
  CFTypeRef *v29;
  int *v31;
  char v32;
  BOOL v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  _BYTE *v37;
  CGColorSpace *v38;
  unint64_t v39;
  int64_t v40;
  size_t NumberOfComponents;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _BYTE *v58;
  int v59;
  void *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  size_t v68;
  void *v69;
  _OWORD *v70;
  __int128 v71;
  _BOOL4 v72;
  int v73;
  _BOOL4 v74;
  BOOL v75;
  int v76;
  void *v77;
  CFDictionaryRef v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 *v88;
  CGColor *v89;
  CGColor *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int16 v100;
  __int128 v101;
  __int128 v102;
  int *v103;
  _QWORD *v104;
  _QWORD *v105;
  CGColorRef *v106;
  CGColorRef *v107;
  __int16 v108;
  __int128 v109;
  int *v110;
  _QWORD *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *v115;
  CGColorRef *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  void *v121;
  CGColorRef *v122;
  int v123;
  int *v124;
  int *v125;
  void *v126;
  uint64_t v127;
  size_t v128;
  CFDataRef *v129;
  void *v130;
  int v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  NSObject *v144;
  const char *v145;
  NSObject *v146;
  const char *v147;
  NSObject *v148;
  int v149;
  uint8_t *v150;
  uint64_t v151;
  NSObject *v152;
  const char *v153;
  NSObject *v154;
  BOOL v155;
  void *__src;
  uint64_t v157;
  BOOL v158;
  CGColorSpace *space;
  int spacea;
  _BYTE *v161;
  char v162;
  int v163;
  CGColorRef v164;
  CGColor *v165;
  CGColorRef color;
  CGColor *colora;
  char *v168;
  int v169;
  void *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  _OWORD *v175;
  uint64_t v176;
  uint64_t v177;
  CFDataRef *v178;
  __int128 v179;
  const __CFDictionary *v180;
  CFTypeRef *v181;
  int v182;
  int v183;
  const __CFDictionary *v184;
  const __CFArray *v185;
  __int128 v186;
  uint8_t v187[16];
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint8_t v193[16];
  uint8_t v194[4];
  uint64_t v195;
  void *values[2];
  __int128 v197;
  void *keys[2];
  __int128 v199;
  uint8_t buf[16];
  __int128 v201;
  __int128 v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  v184 = 0;
  v185 = 0;
  if (!GetPortsAndCache(theDict, &v185, &v184))
    return 0;
  if (theDict)
  {
    v6 = CFDictionaryGetValue(theDict, CFSTR("SkipVersionGuard")) == (const void *)*MEMORY[0x24BDBD270];
    v7 = 0;
    Instance = v184;
    v8 = v185;
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (!v185)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    Instance = v184;
    v8 = v185;
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (!v185)
      goto LABEL_11;
  }
  if (!Instance)
  {
    if (CGPerspectiveCacheTypeID_onceToken != -1)
      dispatch_once(&CGPerspectiveCacheTypeID_onceToken, &__block_literal_global_55);
    Instance = (const __CFDictionary *)_CFRuntimeCreateInstance();
    *((_DWORD *)Instance + 4) = 0;
    *((_QWORD *)Instance + 4) = 0;
    *((_QWORD *)Instance + 5) = 0;
    *((_QWORD *)Instance + 3) = 0;
    v7 = Instance;
    v184 = Instance;
  }
LABEL_11:
  v182 = 0;
  v177 = 0;
  v176 = a1;
  Ports = 1;
  v13 = (CFDataRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  *v13 = a2;
  CFRetain(a2);
  v13[1] = 0;
  v178 = v13;
  v179 = (unint64_t)v8;
  v183 = 0;
  v180 = Instance;
  v14 = (CFTypeRef *)malloc_type_calloc(0x20uLL, 1uLL, 0xD44EDC0AuLL);
  v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  *v14 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14[1] = CFDictionaryCreateMutable(v10, 0, v15, v16);
  v14[2] = CFDictionaryCreateMutable(v10, 0, v15, v16);
  v14[3] = 0;
  v181 = v14;
  LOBYTE(v182) = v6;
  if (v8)
    Ports = CGPerspectiveDecodingCacheLoadPorts((uint64_t)Instance, v8);
  if ((CFDataRef)CFDataGetLength(*v13) == v13[1])
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v17 = __CGPerspectiveOSLog_log;
      v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18)
        goto LABEL_40;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v17 = __CGPerspectiveOSLog_log;
      v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18)
        goto LABEL_40;
    }
    *(_WORD *)buf = 0;
    v19 = "Given data length was zero";
    v20 = v17;
    v21 = 2;
    goto LABEL_17;
  }
  v192 = 0;
  v22 = CGPerspectiveDataDecode_bytes((uint64_t)v13, &v192, 4uLL);
  v18 = 0;
  if (!v22)
    goto LABEL_40;
  if (v192 != 25 && !(_BYTE)v182)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v23 = __CGPerspectiveOSLog_log;
      v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18)
        goto LABEL_40;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v23 = __CGPerspectiveOSLog_log;
      v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18)
        goto LABEL_40;
    }
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 25;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v192;
    v19 = "Version mismatch. Expected %d, but got %d";
    v20 = v23;
    v21 = 14;
    goto LABEL_17;
  }
  v18 = CGPerspectiveDataDecode_bytes((uint64_t)v178, &v177, 8uLL);
  if (!v18)
    goto LABEL_40;
  v24 = v176;
  v18 = CGPerspectiveDataDecode_bytes((uint64_t)v178, (void *)(v176 + 16), 0x20uLL);
  if (!v18)
    goto LABEL_40;
  buf[0] = 0;
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, buf, 1uLL))
    goto LABEL_39;
  if (buf[0])
  {
    *(_QWORD *)buf = 0;
    if (!CGPerspectiveDataDecode_CFData((uint64_t)v178, (__CFData **)buf))
      goto LABEL_39;
    v25 = CFStringCreateFromExternalRepresentation(v10, *(CFDataRef *)buf, 0x600u);
    CFRelease(*(CFTypeRef *)buf);
    if (!v25)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v27 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
          goto LABEL_39;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v27 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
          goto LABEL_39;
      }
      *(_WORD *)v187 = 0;
      _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEFAULT, "Unable to create colorspace name from colorSpaceNameData", v187, 2u);
      goto LABEL_39;
    }
    *(_QWORD *)(v176 + 48) = CGColorSpaceCreateWithName(v25);
    CFRelease(v25);
    if (!*(_QWORD *)(v176 + 48))
    {
LABEL_39:
      v18 = 0;
      goto LABEL_40;
    }
  }
  v18 = CGPerspectiveDataDecode_bytes((uint64_t)v178, (void *)(v24 + 56), 4uLL);
  if (!v18)
    goto LABEL_40;
  v191 = 0;
  v18 = CGPerspectiveDataDecode_bytes((uint64_t)v178, &v191, 8uLL);
  if (!v18)
    goto LABEL_40;
  *((_QWORD *)&v179 + 1) = v191;
  v190 = 0;
  v18 = CGPerspectiveDataDecode_bytes((uint64_t)v178, &v190, 8uLL);
  if (!v18)
    goto LABEL_40;
  if (v191 >= 1)
  {
    v26 = 0;
    v174 = (void *)*MEMORY[0x24BDBF350];
    v170 = (void *)*MEMORY[0x24BDBD268];
    v172 = (void *)*MEMORY[0x24BDBD270];
    while (1)
    {
      v31 = (int *)CGPerspectiveResourceCreate(v24);
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v31, 4uLL))
        goto LABEL_343;
      if (!v33 & v32)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v148 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
            goto LABEL_344;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v148 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
            goto LABEL_344;
        }
        v149 = *v31;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v149;
        _os_log_impl(&dword_224FE9000, v148, OS_LOG_TYPE_DEFAULT, "Missing decoding implementation for resource type %d", buf, 8u);
        goto LABEL_343;
      }
      switch(*v31)
      {
        case 0:
          if (!DecodeCGPath((uint64_t)v178, (uint64_t *)v31 + 1))
            goto LABEL_343;
          goto LABEL_44;
        case 1:
          v34 = v31 + 2;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v31 + 2, 1uLL))
            goto LABEL_343;
          if (*v34 > 2u)
            goto LABEL_343;
          v35 = (char *)v31 + 9;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, (char *)v31 + 9, 1uLL)
            || *v35 > 1u
            || !CGPerspectiveDataDecode_bytes((uint64_t)v178, v31 + 3, 4uLL)
            || (v31[3] + 1) > 3)
          {
            goto LABEL_343;
          }
          if (*v35)
            goto LABEL_44;
          v36 = *v34;
          if (v36 == 2)
          {
            *(_OWORD *)v187 = 0u;
            v188 = 0u;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v187, 0x20uLL))
              goto LABEL_343;
            v79 = v188;
            *(_OWORD *)(v31 + 18) = *(_OWORD *)v187;
            *(_OWORD *)(v31 + 22) = v79;
            v201 = 0u;
            v202 = 0u;
            *(_OWORD *)buf = 0u;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, buf, 0x30uLL))
              goto LABEL_343;
            v81 = v201;
            v80 = v202;
            *(_OWORD *)(v31 + 6) = *(_OWORD *)buf;
            *(_OWORD *)(v31 + 10) = v81;
            *(_OWORD *)(v31 + 14) = v80;
            keys[0] = 0;
            LOBYTE(values[0]) = 0;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, values, 1uLL))
              goto LABEL_343;
            if (LOBYTE(values[0]))
            {
              if (!CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v176, (CGColorRef *)keys))
                goto LABEL_343;
              v82 = keys[0];
            }
            else
            {
              CGColorRelease((CGColorRef)keys[0]);
              v82 = 0;
              keys[0] = 0;
            }
            *((_QWORD *)v31 + 13) = v82;
            values[0] = 0;
            if (!CGPerspectiveDataDecode_CFData((uint64_t)v178, (__CFData **)values))
              goto LABEL_343;
            v85 = CGPerspectiveCommandsDecode(values[0]);
            CFRelease(values[0]);
            *((_QWORD *)v31 + 2) = v85;
            if (!v85)
              goto LABEL_343;
          }
          else if (v36 == 1)
          {
            *(_QWORD *)v187 = 0;
            if ((DecodeCGImage((uint64_t)&v176, (CGImageRef *)v187) & 1) == 0)
              goto LABEL_343;
            *((_QWORD *)v31 + 2) = *(_QWORD *)v187;
            v201 = 0u;
            v202 = 0u;
            *(_OWORD *)buf = 0u;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, buf, 0x30uLL))
              goto LABEL_343;
            v84 = v201;
            v83 = v202;
            *(_OWORD *)(v31 + 6) = *(_OWORD *)buf;
            *(_OWORD *)(v31 + 10) = v84;
            *(_OWORD *)(v31 + 14) = v83;
          }
          else if (!*v34)
          {
            *((_QWORD *)v31 + 2) = 0;
            buf[0] = 0;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, buf, 1uLL))
              goto LABEL_343;
            if (buf[0])
            {
              *(_QWORD *)buf = 0;
              if (!DecodeCGPath((uint64_t)v178, (uint64_t *)buf))
                goto LABEL_343;
              *((_QWORD *)v31 + 2) = *(_QWORD *)buf;
            }
          }
          goto LABEL_44;
        case 2:
          if ((DecodeCGImage((uint64_t)&v176, (CGImageRef *)v31 + 1) & 1) == 0)
            goto LABEL_343;
          goto LABEL_44;
        case 3:
          v37 = malloc_type_calloc(0x50uLL, 1uLL, 0x96D0D50AuLL);
          *((_QWORD *)v31 + 1) = v37;
          *(_QWORD *)buf = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, buf, 8uLL))
            goto LABEL_343;
          *(_QWORD *)v187 = 0;
          if (!DecodeCGColorSpace((uint64_t)&v176, (CGColorSpaceRef *)v187))
            goto LABEL_343;
          v38 = *(CGColorSpace **)v187;
          if (!*(_QWORD *)v187)
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_343;
            }
            else
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_343;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Gradient failed to decode required color space";
LABEL_341:
            v150 = (uint8_t *)keys;
            goto LABEL_342;
          }
          v164 = v26;
          if (*(uint64_t *)buf >= 0)
            v39 = *(_QWORD *)buf;
          else
            v39 = -*(_QWORD *)buf;
          if (*(uint64_t *)buf >= 0)
            v40 = 8 * v39;
          else
            v40 = -8 * v39;
          if (v39 >> 61 || 8 * v39 > (*(_QWORD *)buf >> 63) + 0x7FFFFFFFFFFFFFFFLL)
          {
            CGColorSpaceRelease(*(CGColorSpaceRef *)v187);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Location buffer allocation overflow detected when decoding gradient";
            goto LABEL_341;
          }
          NumberOfComponents = CGColorSpaceGetNumberOfComponents(*(CGColorSpaceRef *)v187);
          v42 = NumberOfComponents + 1;
          v43 = v40 * (NumberOfComponents + 1);
          if ((unsigned __int128)(v40 * (__int128)(uint64_t)(NumberOfComponents + 1)) >> 64 != v43 >> 63)
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            v26 = v164;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Components buffer allocation overflow detected when decoding gradient";
            goto LABEL_341;
          }
          v44 = *(_QWORD *)buf * v42;
          if ((unsigned __int128)(*(uint64_t *)buf * (__int128)v42) >> 64 != (*(_QWORD *)buf * v42) >> 63)
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            v26 = v164;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Components max index value overflow detected when decoding gradient";
            goto LABEL_341;
          }
          v161 = v37;
          if (v44 >= 0)
            v45 = *(_QWORD *)buf * v42;
          else
            v45 = -v44;
          if (v45 >> 61
            || (v46 = 8 * v45, v46 > ((unint64_t)v44 >> 63) + 0x7FFFFFFFFFFFFFFFLL)
            || (v44 >= 0 ? (v47 = v46) : (v47 = -(uint64_t)v46), v47 > v43))
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            v26 = v164;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Components max byte count overflow detected when decoding gradient";
            goto LABEL_341;
          }
          if (v42 < 0)
            v48 = ~NumberOfComponents;
          else
            v48 = NumberOfComponents + 1;
          if (v42 >= 0)
            v49 = 8 * v48;
          else
            v49 = -8 * v48;
          if (v48 >> 61 || 8 * v48 > ((unint64_t)v42 >> 63) + 0x7FFFFFFFFFFFFFFFLL)
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            v26 = v164;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Components max byte count overflow detected when decoding gradient";
            goto LABEL_341;
          }
          v50 = NumberOfComponents;
          space = v38;
          v51 = (char *)malloc_type_malloc(v40, 0x9BF7D08uLL);
          v52 = (char *)malloc_type_malloc(v43, 0x9C391DBEuLL);
          v53 = v52;
          v168 = v51;
          if (!v51 || !v52)
          {
            free(v51);
            free(v53);
            CGColorSpaceRelease(space);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            v26 = v164;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Gradient buffer allocations failed";
            goto LABEL_341;
          }
          color = (CGColorRef)v52;
          if (*(uint64_t *)buf >= 1)
          {
            v54 = 0;
            v55 = 8 * v50 + 8;
            v56 = v52;
            v57 = v168;
            do
            {
              CGPerspectiveDataDecode_bytes((uint64_t)v178, v57, 8uLL);
              CGPerspectiveDataDecode_bytes((uint64_t)v178, v56, v49);
              ++v54;
              v56 += v55;
              v57 += 8;
            }
            while (v54 < *(uint64_t *)buf);
          }
          v58 = v161;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v161, 4uLL)
            || (v59 = *(_DWORD *)v161, *(_DWORD *)v161 >= 3u))
          {
            free(v168);
            free(color);
            CGColorSpaceRelease(space);
            if (__CGPerspectiveOSLog_onceToken != -1)
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            v26 = v164;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
            LOWORD(keys[0]) = 0;
            v145 = "Gradient type was out of bounds";
            goto LABEL_341;
          }
          v158 = CGPerspectiveDataDecode_bytes((uint64_t)v178, v161 + 16, 0x10uLL);
          v60 = v161 + 32;
          if (v59 == 2)
          {
            LOBYTE(v61) = CGPerspectiveDataDecode_bytes((uint64_t)v178, v60, 8uLL);
          }
          else
          {
            v72 = CGPerspectiveDataDecode_bytes((uint64_t)v178, v60, 0x10uLL);
            v73 = v72 & CGPerspectiveDataDecode_bytes((uint64_t)v178, v161 + 48, 8uLL);
            v74 = CGPerspectiveDataDecode_bytes((uint64_t)v178, v161 + 56, 8uLL);
            v61 = v73 & v74 & CGPerspectiveDataDecode_bytes((uint64_t)v178, v161 + 64, 4uLL);
          }
          LOBYTE(keys[0]) = 0;
          v75 = CGPerspectiveDataDecode_bytes((uint64_t)v178, keys, 1uLL);
          if (v75)
          {
            v76 = LOBYTE(keys[0]) != 0;
            v161[72] = v76;
          }
          else
          {
            v76 = v161[72];
          }
          v162 = v158 & v61 & v75;
          keys[0] = v174;
          v33 = v76 == 0;
          v77 = v172;
          if (v33)
            v77 = v170;
          values[0] = v77;
          v78 = CFDictionaryCreate(v10, (const void **)keys, (const void **)values, 1, 0, 0);
          *((_QWORD *)v58 + 1) = CGGradientCreateWithColorComponentsAndOptions();
          CFRelease(v78);
          CGColorSpaceRelease(space);
          free(v168);
          free(color);
          v26 = v164;
          if ((v162 & 1) == 0)
            goto LABEL_343;
LABEL_44:
          v26 = (CGColor *)((char *)v26 + 1);
          if ((uint64_t)v26 >= v191)
            goto LABEL_151;
          break;
        case 4:
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v31 + 2, 8uLL)
            || !CGPerspectiveDataDecode_bytes((uint64_t)v178, v31 + 4, 8uLL))
          {
            goto LABEL_343;
          }
          goto LABEL_44;
        case 5:
          v201 = 0u;
          v202 = 0u;
          *(_OWORD *)buf = 0u;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, buf, 0x30uLL))
            goto LABEL_343;
          keys[0] = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, keys, 8uLL))
            goto LABEL_343;
          if ((uint64_t)keys[0] >= 0)
            v62 = (unint64_t)keys[0];
          else
            v62 = -(uint64_t)keys[0];
          if (v62 >> 61 || (v63 = 8 * v62, v63 > ((unint64_t)keys[0] >> 63) + 0x7FFFFFFFFFFFFFFFLL))
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_343;
            }
            else
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_343;
            }
            *(_WORD *)v187 = 0;
            v145 = "Integer overflow with indices";
            v150 = v187;
            goto LABEL_342;
          }
          if ((uint64_t)keys[0] >= 0)
            v64 = v63;
          else
            v64 = -(uint64_t)v63;
          v65 = malloc_type_calloc(v64, 1uLL, 0xD7350543uLL);
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v65, v64))
            goto LABEL_343;
          if ((uint64_t)keys[0] >= 0)
            v66 = (unint64_t)keys[0];
          else
            v66 = -(uint64_t)keys[0];
          if (v66 >> 60 || (v67 = 16 * v66, v67 > ((unint64_t)keys[0] >> 63) + 0x7FFFFFFFFFFFFFFFLL))
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v144 = __CGPerspectiveOSLog_log;
              if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
                goto LABEL_328;
LABEL_343:
              if (__CGPerspectiveOSLog_onceToken == -1)
              {
LABEL_344:
                v151 = __CGPerspectiveOSLog_log;
                v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!v18)
                  goto LABEL_40;
              }
              else
              {
                dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                v151 = __CGPerspectiveOSLog_log;
                v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!v18)
                  goto LABEL_40;
              }
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v26;
              v19 = "Failed to decode resource %ld";
              v20 = v151;
              v21 = 12;
LABEL_17:
              _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
              goto LABEL_39;
            }
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
              goto LABEL_343;
LABEL_328:
            *(_WORD *)v187 = 0;
            v145 = "Integer overflow with positions";
            v150 = v187;
LABEL_342:
            _os_log_error_impl(&dword_224FE9000, v144, OS_LOG_TYPE_ERROR, v145, v150, 2u);
            goto LABEL_343;
          }
          if ((uint64_t)keys[0] >= 0)
            v68 = v67;
          else
            v68 = -(uint64_t)v67;
          v69 = malloc_type_calloc(v68, 1uLL, 0x9054535AuLL);
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v69, v68))
            goto LABEL_343;
          memset(v187, 0, sizeof(v187));
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v187, 0x10uLL))
            goto LABEL_343;
          values[0] = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, values, 8uLL))
            goto LABEL_343;
          LODWORD(v186) = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, &v186, 4uLL))
            goto LABEL_343;
          v70 = malloc_type_calloc(0x68uLL, 1uLL, 0x589D3914uLL);
          v71 = v201;
          *v70 = *(_OWORD *)buf;
          v70[1] = v71;
          v70[2] = v202;
          *((void **)v70 + 6) = keys[0];
          *((_QWORD *)v70 + 7) = v65;
          *((_QWORD *)v70 + 8) = v69;
          *(_OWORD *)((char *)v70 + 72) = *(_OWORD *)v187;
          *((void **)v70 + 11) = values[0];
          *((_DWORD *)v70 + 24) = v186;
          *((_QWORD *)v31 + 1) = v70;
          goto LABEL_44;
        default:
          goto LABEL_343;
      }
    }
  }
LABEL_151:
  v86 = *(_OWORD *)(MEMORY[0x24BDBF090] + 16);
  *(_OWORD *)keys = *MEMORY[0x24BDBF090];
  v199 = v86;
  v87 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
  *(_OWORD *)buf = *MEMORY[0x24BDBD8B8];
  v201 = v87;
  v202 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  *(_OWORD *)values = *(_OWORD *)keys;
  v197 = v86;
  v188 = v87;
  v189 = v202;
  *(_OWORD *)v187 = *(_OWORD *)buf;
  v186 = *MEMORY[0x24BDBF148];
  if (v190 < 1)
  {
LABEL_292:
    *(_DWORD *)v194 = 0;
    v18 = CGPerspectiveDataDecode_bytes((uint64_t)v178, v194, 4uLL);
    if (v18)
      *(_DWORD *)(v24 + 80) = *(_DWORD *)v194;
    goto LABEL_40;
  }
  v88 = 0;
  v165 = 0;
  colora = 0;
  v173 = 0;
  v175 = 0;
  v89 = 0;
  __src = 0;
  v157 = 0;
  v171 = 0;
  v155 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = -1;
  v95 = -1;
  v96 = 0;
  v169 = -1;
  v97 = 0;
  v163 = -1;
  v98 = 0;
  spacea = -1;
  while (1)
  {
    v99 = CGPerspectiveCommandCreate(v24, 0, 0);
    *(_DWORD *)v194 = 0;
    if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v194, 4uLL))
      goto LABEL_372;
    if ((v194[0] & 1) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99, 8uLL))
        goto LABEL_372;
      v94 = *(_QWORD *)v99;
    }
    else
    {
      *(_QWORD *)v99 = v94;
    }
    if (v94 >= *((uint64_t *)&v179 + 1))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v146 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_373;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v146 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_373;
      }
      *(_WORD *)v193 = 0;
      v147 = "Decoded command has out of bounds resource index";
      goto LABEL_371;
    }
    v100 = *(_WORD *)v194;
    if ((v194[0] & 4) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 40, 0x30uLL))
        goto LABEL_372;
      v100 = *(_WORD *)v194;
    }
    else
    {
      v101 = v201;
      *(_OWORD *)(v99 + 40) = *(_OWORD *)buf;
      *(_OWORD *)(v99 + 56) = v101;
      *(_OWORD *)(v99 + 72) = v202;
    }
    if ((v100 & 0x40) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 136, 0x30uLL))
        goto LABEL_372;
      v100 = *(_WORD *)v194;
    }
    else
    {
      v102 = v188;
      *(_OWORD *)(v99 + 136) = *(_OWORD *)v187;
      *(_OWORD *)(v99 + 152) = v102;
      *(_OWORD *)(v99 + 168) = v189;
    }
    if ((v100 & 2) != 0)
    {
      CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 8, 0x20uLL);
      v100 = *(_WORD *)v194;
    }
    else
    {
      *(_OWORD *)(v99 + 8) = *(_OWORD *)keys;
      *(_OWORD *)(v99 + 24) = v199;
    }
    v103 = (int *)(v99 + 96);
    if ((v100 & 0x10) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 96, 4uLL) || *v103 > 4)
        goto LABEL_372;
      v100 = *(_WORD *)v194;
    }
    else
    {
      *v103 = v95;
    }
    v104 = v99 + 232;
    if ((v100 & 0x2000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v104, 8uLL))
        goto LABEL_372;
      v100 = *(_WORD *)v194;
    }
    else
    {
      *v104 = v91;
    }
    v105 = v99 + 240;
    if ((v100 & 0x4000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v105, 8uLL))
        goto LABEL_372;
      LOBYTE(v100) = v194[0];
    }
    else
    {
      *v105 = v92;
    }
    if ((v100 & 8) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      v106 = (CGColorRef *)(v99 + 88);
      if (v193[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v176, (CGColorRef *)v99 + 11) & 1) == 0)
          goto LABEL_372;
      }
      else
      {
        CGColorRelease(*v106);
        *v106 = 0;
      }
    }
    else
    {
      *((_QWORD *)v99 + 11) = CGColorRetain(v90);
    }
    if ((v194[1] & 0x10) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      v107 = (CGColorRef *)(v99 + 224);
      if (v193[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v176, (CGColorRef *)v99 + 28) & 1) == 0)
          goto LABEL_372;
      }
      else
      {
        CGColorRelease(*v107);
        *v107 = 0;
      }
    }
    else
    {
      *((_QWORD *)v99 + 28) = CGColorRetain(v89);
    }
    v108 = *(_WORD *)v194;
    if ((v194[0] & 0x20) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 104, 0x20uLL))
        goto LABEL_372;
      v108 = *(_WORD *)v194;
    }
    else
    {
      v109 = v197;
      *(_OWORD *)(v99 + 104) = *(_OWORD *)values;
      *(_OWORD *)(v99 + 120) = v109;
    }
    v110 = (int *)(v99 + 184);
    if ((v108 & 0x80) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 184, 4uLL) || (*v110 + 1) > 0x1C)
        goto LABEL_372;
      v108 = *(_WORD *)v194;
    }
    else
    {
      *v110 = v169;
    }
    if ((v108 & 0x100) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      if (v193[0])
      {
        v115 = malloc_type_calloc(0x38uLL, 1uLL, 0x15E8786uLL);
        if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v115, 0x38uLL))
          goto LABEL_372;
        *((_QWORD *)v99 + 24) = v115;
      }
    }
    else if (v88)
    {
      v111 = malloc_type_malloc(0x38uLL, 0x1000040577F94FBuLL);
      *((_QWORD *)v99 + 24) = v111;
      if (!v111)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_373;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_373;
        }
        *(_WORD *)v193 = 0;
        v147 = "Failed to allocate shadow style.";
        goto LABEL_371;
      }
      v112 = *v88;
      v113 = v88[1];
      v114 = v88[2];
      v111[6] = *((_QWORD *)v88 + 6);
      *((_OWORD *)v111 + 1) = v113;
      *((_OWORD *)v111 + 2) = v114;
      *(_OWORD *)v111 = v112;
    }
    else
    {
      *((_QWORD *)v99 + 24) = 0;
    }
    if ((v194[1] & 2) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      v116 = (CGColorRef *)(v99 + 200);
      if (v193[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v176, (CGColorRef *)v99 + 25) & 1) == 0)
          goto LABEL_372;
      }
      else
      {
        CGColorRelease(*v116);
        *v116 = 0;
      }
    }
    else
    {
      *((_QWORD *)v99 + 25) = CGColorRetain(colora);
    }
    if ((v194[1] & 4) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      if (v193[0])
      {
        v121 = malloc_type_calloc(0x50uLL, 1uLL, 0x1E91B0EEuLL);
        if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v121, 0x50uLL))
          goto LABEL_372;
        *((_QWORD *)v99 + 26) = v121;
      }
    }
    else
    {
      if (v175)
      {
        v117 = malloc_type_malloc(0x50uLL, 0x1000040CA4B9025uLL);
        *((_QWORD *)v99 + 26) = v117;
        if (v117)
        {
          *v117 = *v175;
          v118 = v175[1];
          v119 = v175[2];
          v120 = v175[4];
          v117[3] = v175[3];
          v117[4] = v120;
          v117[1] = v118;
          v117[2] = v119;
          goto LABEL_231;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_373;
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_373;
        }
        *(_WORD *)v193 = 0;
        v147 = "Failed to allocate focus style.";
LABEL_371:
        _os_log_error_impl(&dword_224FE9000, v146, OS_LOG_TYPE_ERROR, v147, v193, 2u);
LABEL_372:
        if (__CGPerspectiveOSLog_onceToken == -1)
          goto LABEL_373;
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v154 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_374;
        goto LABEL_380;
      }
      *((_QWORD *)v99 + 26) = 0;
    }
LABEL_231:
    if ((v194[1] & 8) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      v122 = (CGColorRef *)(v99 + 216);
      if (v193[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v176, (CGColorRef *)v99 + 27) & 1) == 0)
          goto LABEL_372;
      }
      else
      {
        CGColorRelease(*v122);
        *v122 = 0;
      }
    }
    else
    {
      *((_QWORD *)v99 + 27) = CGColorRetain(v165);
    }
    v123 = *(_DWORD *)v194;
    v124 = (int *)(v99 + 248);
    if ((*(_WORD *)v194 & 0x8000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 248, 4uLL) || *v124 > 2)
        goto LABEL_372;
      v123 = *(_DWORD *)v194;
    }
    else
    {
      *v124 = v163;
    }
    v125 = (int *)(v99 + 252);
    if ((v123 & 0x10000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 252, 4uLL) || *v125 > 2)
        goto LABEL_372;
      v123 = *(_DWORD *)v194;
    }
    else
    {
      *v125 = spacea;
    }
    if ((v123 & 0x20000) != 0)
      break;
    *((_QWORD *)v99 + 32) = 0;
    *((_QWORD *)v99 + 33) = v171;
    if (v171 < 1)
      goto LABEL_259;
    if ((unint64_t)v171 >> 61)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v152 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_369;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v152 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_369;
      }
      *(_WORD *)v193 = 0;
      v153 = "Integer overflow with line dash count";
      goto LABEL_367;
    }
    v126 = malloc_type_malloc(8 * v171, 0x534A0DADuLL);
    *((_QWORD *)v99 + 32) = v126;
    if (!v126)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v152 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_369;
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v152 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_369;
      }
      *(_WORD *)v193 = 0;
      v153 = "Failed to malloc command's lineDashValues";
      goto LABEL_367;
    }
    memcpy(v126, __src, 8 * v171);
LABEL_259:
    v131 = *(_DWORD *)v194;
    v132 = v99 + 272;
    if ((*(_DWORD *)v194 & 0x40000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v132, 8uLL))
        goto LABEL_372;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      *v132 = v93;
    }
    v133 = v99 + 280;
    if ((v131 & 0x80000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v133, 8uLL))
        goto LABEL_372;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      *v133 = v96;
    }
    v134 = v99 + 288;
    if ((v131 & 0x100000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v134, 8uLL))
        goto LABEL_372;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      *v134 = v97;
    }
    if ((v131 & 0x200000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 296, 0x10uLL))
        goto LABEL_372;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      *(_OWORD *)(v99 + 296) = v186;
    }
    v135 = v99 + 312;
    if ((v131 & 0x400000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v135, 8uLL))
        goto LABEL_372;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      *v135 = v98;
    }
    if ((v131 & 0x800000) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      v99[320] = v193[0] != 0;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      v99[320] = BYTE4(v157);
    }
    if ((v131 & 0x1000000) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      LOBYTE(v157) = v193[0] != 0;
      v99[321] = v193[0] != 0;
      v131 = *(_DWORD *)v194;
    }
    else
    {
      v99[321] = v157;
    }
    if ((v131 & 0x2000000) != 0)
    {
      v193[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v193, 1uLL))
        goto LABEL_372;
      v155 = v193[0] != 0;
      v99[322] = v193[0] != 0;
      LOBYTE(v157) = v99[321];
    }
    else
    {
      v99[322] = v155;
    }
    v94 = *(_QWORD *)v99;
    *(_OWORD *)keys = *(_OWORD *)(v99 + 8);
    v136 = *(_OWORD *)(v99 + 40);
    v137 = *(_OWORD *)(v99 + 56);
    v199 = *(_OWORD *)(v99 + 24);
    *(_OWORD *)buf = v136;
    v138 = *(_OWORD *)(v99 + 72);
    v201 = v137;
    v202 = v138;
    v90 = (CGColor *)*((_QWORD *)v99 + 11);
    v95 = *((_DWORD *)v99 + 24);
    v139 = *(_OWORD *)(v99 + 120);
    *(_OWORD *)values = *(_OWORD *)(v99 + 104);
    v197 = v139;
    v140 = *(_OWORD *)(v99 + 136);
    v141 = *(_OWORD *)(v99 + 168);
    v188 = *(_OWORD *)(v99 + 152);
    v189 = v141;
    v169 = *((_DWORD *)v99 + 46);
    v88 = (__int128 *)*((_QWORD *)v99 + 24);
    v175 = (_OWORD *)*((_QWORD *)v99 + 26);
    v89 = (CGColor *)*((_QWORD *)v99 + 28);
    v165 = (CGColor *)*((_QWORD *)v99 + 27);
    colora = (CGColor *)*((_QWORD *)v99 + 25);
    v91 = *((_QWORD *)v99 + 29);
    v92 = *((_QWORD *)v99 + 30);
    v142 = *((_DWORD *)v99 + 63);
    v163 = *((_DWORD *)v99 + 62);
    v143 = *((_QWORD *)v99 + 33);
    __src = (void *)*((_QWORD *)v99 + 32);
    v93 = *((_QWORD *)v99 + 34);
    v96 = *((_QWORD *)v99 + 35);
    v97 = *((_QWORD *)v99 + 36);
    v186 = *(_OWORD *)(v99 + 296);
    *(_OWORD *)v187 = v140;
    v98 = *((_QWORD *)v99 + 39);
    BYTE4(v157) = v99[320];
    spacea = v142;
    v171 = v143;
    if (++v173 >= v190)
      goto LABEL_292;
  }
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v99 + 264, 8uLL))
    goto LABEL_368;
  *((_QWORD *)v99 + 32) = 0;
  v127 = *((_QWORD *)v99 + 33);
  if (v127 < 1)
    goto LABEL_259;
  if ((unint64_t)v127 >> 61)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v152 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_369;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v152 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_369;
    }
    *(_WORD *)v193 = 0;
    v153 = "Integer overflow with line dash count";
    goto LABEL_367;
  }
  v128 = 8 * v127;
  v129 = v178;
  if (8 * v127 > (unint64_t)(CFDataGetLength(*v178) - (_QWORD)v129[1]))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v152 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_369;
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v152 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_369;
    }
    *(_WORD *)v193 = 0;
    v153 = "Out of bounds read for command's lineDashCount";
    goto LABEL_367;
  }
  v130 = malloc_type_malloc(v128, 0xF2822BC6uLL);
  *((_QWORD *)v99 + 32) = v130;
  if (v130)
  {
    if (!CGPerspectiveDataDecode_bytes((uint64_t)v178, v130, v128))
      goto LABEL_368;
    goto LABEL_259;
  }
  if (__CGPerspectiveOSLog_onceToken != -1)
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v152 = __CGPerspectiveOSLog_log;
    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_369;
LABEL_366:
    *(_WORD *)v193 = 0;
    v153 = "Failed to malloc command's lineDashCount";
LABEL_367:
    _os_log_error_impl(&dword_224FE9000, v152, OS_LOG_TYPE_ERROR, v153, v193, 2u);
LABEL_368:
    if (__CGPerspectiveOSLog_onceToken == -1)
      goto LABEL_369;
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v146 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_370;
    goto LABEL_373;
  }
  v152 = __CGPerspectiveOSLog_log;
  if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
    goto LABEL_366;
LABEL_369:
  v146 = __CGPerspectiveOSLog_log;
  if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
  {
LABEL_370:
    *(_WORD *)v193 = 0;
    v147 = "Failed to decode line dash";
    goto LABEL_371;
  }
LABEL_373:
  v154 = __CGPerspectiveOSLog_log;
  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
  {
LABEL_374:
    v18 = 1;
    goto LABEL_40;
  }
LABEL_380:
  *(_DWORD *)v194 = 134217984;
  v195 = v173;
  _os_log_error_impl(&dword_224FE9000, v154, OS_LOG_TYPE_ERROR, "Failed to decode command %ld", v194, 0xCu);
  v18 = 1;
LABEL_40:
  v11 = Ports & v18;
  v28 = v178;
  CFRelease(*v178);
  free(v28);
  v29 = v181;
  CFRelease(*v181);
  CFRelease(v29[1]);
  CFRelease(v29[2]);
  free(v29);
  if (v7)
    CFRelease(v7);
  return v11;
}

BOOL DecodeCGPath(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  NSObject *v4;
  uint8_t v5[8];
  CFTypeRef cf;

  cf = 0;
  result = CGPerspectiveDataDecode_CFData(a1, (__CFData **)&cf);
  if (result)
  {
    if (cf)
    {
      *a2 = CGPathCreateWithData();
      CFRelease(cf);
    }
    if (*a2)
      return 1;
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v4 = __CGPerspectiveOSLog_log;
      result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
LABEL_9:
        *(_WORD *)v5 = 0;
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v4 = __CGPerspectiveOSLog_log;
      result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t __CGGStateGetStrokeParameters(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, _DWORD *a6, _DWORD *a7)
{
  void *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (CGVersionLoad_onceToken == -1)
  {
    v14 = __CGGStateGetStrokeParametersFunc;
    if (__CGGStateGetStrokeParametersFunc)
      return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *, _QWORD *, uint64_t *, _DWORD *, _DWORD *))v14)(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
    v14 = __CGGStateGetStrokeParametersFunc;
    if (__CGGStateGetStrokeParametersFunc)
      return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *, _QWORD *, uint64_t *, _DWORD *, _DWORD *))v14)(a1, a2, a3, a4, a5, a6, a7);
  }
  CGGStateGetLineWidth();
  *a2 = v16;
  CGGStateGetLineWidthThreshold();
  *a3 = v17;
  CGGStateGetMiterLimit();
  *a4 = v18;
  *a5 = CGGStateGetLineDash();
  *a6 = CGGStateGetLineCap();
  result = CGGStateGetLineJoin();
  *a7 = result;
  return result;
}

BOOL re::query::EntityInBoundingBoxPredicate::evaluate(float32x4_t *a1, re::ecs2::TransformComponent *this)
{
  uint32x4_t v3;
  uint32x4_t v4;
  _OWORD v6[3];
  float32x4_t v7;

  if (!*((_QWORD *)this + 30))
    return 0;
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)this, (const re::ecs2::Entity *)1, v6);
  v3 = (uint32x4_t)vcgtq_f32(a1[3], v7);
  v3.i32[3] = v3.i32[2];
  if ((vmaxvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v4 = (uint32x4_t)vcgtq_f32(v7, a1[4]);
  v4.i32[3] = v4.i32[2];
  return (vmaxvq_u32(v4) & 0x80000000) == 0;
}

BOOL re::query::EntityHasComponentPredicate::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const __int16 *v4;
  int16x8_t *v5;
  int16x8_t v6;
  int i;
  uint16x8_t v8;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 16) == a1)
    return 1;
  v3 = *(unsigned __int16 *)(a2 + 82);
  if (!*(_WORD *)(a2 + 82))
    return 0;
  v4 = (const __int16 *)(*(_QWORD *)(a1 + 48) + 16);
  v5 = *(int16x8_t **)(a2 + 88);
  v6 = vld1q_dup_s16(v4);
  for (i = 1; ; i -= 8)
  {
    v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_2260F1E80);
    v8.i16[0] = vmaxvq_u16(v8);
    if (v8.i32[0])
      break;
    ++v5;
    if (!--v3)
      return 0;
  }
  return v8.u16[0] - i < *(unsigned __int16 *)(a2 + 80);
}

void re::query::EntityHasComponentPredicate::preEvaluateOptimize(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v3 = *(_QWORD *)(*a2 + 8);
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 16);
  if (*(_QWORD *)(v3 + 224) <= v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8 * v4);
    if (v5)
      v5 = *(_QWORD *)(v5 + 24);
  }
  a2[4] = v5;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v14, (_QWORD *)(a1 + 8));
  v6 = operator new(0x20uLL);
  v6[1] = v14;
  v7 = v16;
  *(_QWORD *)v6 = &v15;
  *((_QWORD *)v6 + 1) = v7;
  *v7 = (uint64_t)v6;
  v16 = (uint64_t *)v6;
  ++v17;
  v8 = a2[1];
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v8 + 16));
  v9 = v17;
  if (v17)
  {
    v11 = v15;
    v10 = v16;
    v12 = *v16;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    v13 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v13 + 8) = v10;
    *v10 = v13;
    *(_QWORD *)(v8 + 16) = v11;
    *(_QWORD *)(v11 + 8) = v8 + 16;
    *(_QWORD *)(v8 + 32) += v9;
    v17 = 0;
  }
  *(_BYTE *)(a2[1] + 64) = 4;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v15);
}

void re::query::EntityHasComponentPredicate::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  re::query::EntityInBoundingBoxPredicate *v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 16);
  if (*(_QWORD *)(v4 + 224) > v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 240) + 8 * v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v11 = *(_QWORD *)(v6 + 40);
        for (i = 8 * v7; i; i -= 8)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
          if ((*(_BYTE *)(v13 + 289) & 4) == 0
            && (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(*(_QWORD *)v11 + 16), a2))
          {
            v16 = v13;
            v14 = *(_QWORD *)(a4 + 24);
            if (!v14)
            {
              v15 = (re::query::EntityInBoundingBoxPredicate *)std::__throw_bad_function_call[abi:nn180100]();
              re::query::EntityInBoundingBoxPredicate::~EntityInBoundingBoxPredicate(v15);
              return;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v16);
          }
          v11 += 8;
        }
      }
    }
  }
}

void re::query::EntityInBoundingBoxPredicate::~EntityInBoundingBoxPredicate(re::query::EntityInBoundingBoxPredicate *this)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = -1;
}

void re::query::EntityHasComponentPredicate::~EntityHasComponentPredicate(re::query::EntityHasComponentPredicate *this)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

_QWORD *csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24ED8ABD8;
  v2 = a1 + 3;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 3);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

void std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
    goto LABEL_5;
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
  {
LABEL_5:
    std::__throw_bad_weak_ptr[abi:nn180100]();
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
}

void std::__throw_bad_weak_ptr[abi:nn180100]()
{
  _anonymous_namespace_ *v0;

  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
}

void `anonymous namespace'::videoHistogramAllocator(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_ *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
    }
  }
}

double re::VideoHistogram::VideoHistogram(re::VideoHistogram *this)
{
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED8ABF8;
  *((_QWORD *)this + 3) = 0x200000002;
  *((_DWORD *)this + 8) = 2;
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_QWORD *)this + 139) = 0;
  *((_DWORD *)this + 280) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 272) = 0;
  *((_DWORD *)this + 546) = 0;
  *((_QWORD *)this + 338) = 0;
  *((_DWORD *)this + 678) = 0;
  *((_DWORD *)this + 414) = 0;
  *(_OWORD *)((char *)this + 1640) = 0u;
  return result;
}

void re::VideoHistogram::~VideoHistogram(re::VideoHistogram *this)
{
  *((_QWORD *)this + 338) = 0;
  ++*((_DWORD *)this + 678);
  *((_QWORD *)this + 272) = 0;
  ++*((_DWORD *)this + 546);
  *((_QWORD *)this + 206) = 0;
  ++*((_DWORD *)this + 414);
  *((_QWORD *)this + 139) = 0;
  ++*((_DWORD *)this + 280);
  *((_QWORD *)this + 73) = 0;
  ++*((_DWORD *)this + 148);
  ++*((_DWORD *)this + 16);
  *(_QWORD *)this = &off_24ED426B8;
  *((_QWORD *)this + 7) = 0;
  objc_destructInstance((char *)this + 8);
}

{
  *((_QWORD *)this + 338) = 0;
  ++*((_DWORD *)this + 678);
  *((_QWORD *)this + 272) = 0;
  ++*((_DWORD *)this + 546);
  *((_QWORD *)this + 206) = 0;
  ++*((_DWORD *)this + 414);
  *((_QWORD *)this + 139) = 0;
  ++*((_DWORD *)this + 280);
  *((_QWORD *)this + 73) = 0;
  ++*((_DWORD *)this + 148);
  ++*((_DWORD *)this + 16);
  *(_QWORD *)this = &off_24ED426B8;
  *((_QWORD *)this + 7) = 0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

double re::_IOSurfaceGetBulkAttachments(uint64_t a1, uint64_t a2)
{
  double result;

  if (IOSurfaceGetBulkAttachments())
  {
    IOSurfaceGetBulkAttachments();
  }
  else
  {
    *(_DWORD *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
  }
  return result;
}

uint64_t re::_IOSurfaceSetBulkAttachments2()
{
  uint64_t result;

  result = IOSurfaceSetBulkAttachments2();
  if ((_DWORD)result)
    return IOSurfaceSetBulkAttachments2();
  return result;
}

uint64_t re::VideoSurfaceBase::colorTags(re::VideoSurfaceBase *this)
{
  uint64_t v1;
  re *v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  NSObject *v8;
  uint8_t v9[16];
  _OWORD v10[3];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v1 = *(_QWORD *)this;
  if (!v1)
    goto LABEL_4;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  re::_IOSurfaceGetBulkAttachments(v1, (uint64_t)v10);
  if ((_DWORD)v2)
  {
    v3 = *re::videoLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      v4 = 2;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to read input surface properties.", v9, 2u);
      goto LABEL_5;
    }
LABEL_4:
    v4 = 2;
LABEL_5:
    v5 = 2;
    v6 = 2;
    return (v5 << 8) | (v6 << 16) | v4;
  }
  v5 = BYTE11(v11);
  v6 = BYTE12(v11);
  v4 = BYTE10(v11);
  if ((BYTE11(v11) & 0xFD) == 0)
  {
    v8 = *re::videoLogObjects(v2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Invalid input surface properties. Fallback to Rec 709", v9, 2u);
    }
    v5 = 1;
  }
  return (v5 << 8) | (v6 << 16) | v4;
}

float re::VideoSurfaceBase::edrFactor(__IOSurface **this)
{
  __IOSurface *v1;
  const __CFNumber *v2;
  float v3;
  const __CFNumber *v4;
  CFTypeID v5;
  int valuePtr;

  v1 = *this;
  if (!v1)
    return 1.0;
  valuePtr = 1065353216;
  v2 = (const __CFNumber *)IOSurfaceCopyValue(v1, (CFStringRef)*MEMORY[0x24BDD8E98]);
  v3 = 1.0;
  if (v2)
  {
    v4 = v2;
    v5 = CFGetTypeID(v2);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberFloatType, &valuePtr);
      CFRelease(v4);
      return *(float *)&valuePtr;
    }
  }
  return v3;
}

void re::VideoSurfaceBase::setEdrFactor(IOSurfaceRef *this, float a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  float valuePtr;

  valuePtr = a2;
  if (*this)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      IOSurfaceSetValue(*this, (CFStringRef)*MEMORY[0x24BDD8E98], v3);
      CFRelease(v4);
    }
  }
}

uint64_t *re::videoMallocAllocator(re *this)
{
  unsigned __int8 v1;

  {
    byte_25582B178 = 0;
    re::videoMallocAllocator(void)::allocator = (uint64_t)&off_24ED42648;
    unk_25582B170 = "VideoMallocAllocator";
  }
  return &re::videoMallocAllocator(void)::allocator;
}

uint64_t re::videoStatisticsComputeAverageColor(re *this, const re::VideoHistogram *a2)
{
  re::VideoDefaults *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  char *v22;
  uint64_t v23;
  float32x4_t v24;
  re::VideoDefaults *v25;
  int v26;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  _BOOL4 v38;
  const char *v39;
  NSObject *v40;
  re::VideoDefaults *v41;
  NSObject *v42;
  const char *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint8_t buf[4];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = (re::VideoDefaults *)objc_alloc_init(MEMORY[0x24BDD16A8]);
  if (re::VideoDefaults::logEnabled(v3))
    goto LABEL_40;
  while (1)
  {
    v4 = re::VideoHistogram::data(this);
    v10 = (_QWORD *)v4;
    v11 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
      break;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    *(float *)&v6 = (float)(256.0 / (float)v11) / 255.0;
    v16 = *(_QWORD *)(v4 + 8);
    v17 = *(_QWORD *)(v4 + 536);
    v18 = *(_QWORD *)(v4 + 1064);
    v19 = v11 - 1;
    if (v18 < v11 - 1)
      v19 = *(_QWORD *)(v4 + 1064);
    if (v19 >= v17)
      v19 = *(_QWORD *)(v4 + 536);
    if (v19 >= v16)
      v20 = *(_QWORD *)(v4 + 8);
    else
      v20 = v19;
    LODWORD(v7) = 0;
    LODWORD(v9) = 0;
    LODWORD(v8) = 0;
    while (v16 > v19)
    {
      if (v17 == v20)
        goto LABEL_38;
      if (v18 == v20)
        goto LABEL_39;
      v21 = *(float *)&v6 * (float)v15;
      v4 = *((unsigned int *)v10 + v15 + 5);
      *(float *)&v7 = *(float *)&v7 + (float)(v21 * (float)v4);
      v22 = (char *)v10 + 4 * v15;
      v23 = *((unsigned int *)v22 + 137);
      *(float *)&v9 = *(float *)&v9 + (float)(v21 * (float)v23);
      v5 = *((unsigned int *)v22 + 269);
      *(float *)&v8 = *(float *)&v8 + (float)(v21 * (float)v5);
      v12 += v4;
      v13 += v23;
      v14 += v5;
      if (v11 == ++v15)
      {
        v24.i32[3] = 0;
        v24.i64[0] = __PAIR64__(*(float *)&v9 / (float)v13, *(float *)&v7 / (float)v12);
        v24.f32[2] = *(float *)&v8 / (float)v14;
        goto LABEL_17;
      }
    }
    re::internal::assertLog((re::internal *)6, v5, v6, v7, v8, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v10[1], v16);
    _os_crash();
    __break(1u);
LABEL_38:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v17, v17);
    _os_crash();
    __break(1u);
LABEL_39:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v18, v18);
    _os_crash();
    __break(1u);
LABEL_40:
    v38 = re::VideoDefaults::videoStatisticsEnableScaling((re::VideoDefaults *)-[re::VideoDefaults appendString:](v3, "appendString:", CFSTR("This is the default Settings for Statistics:")));
    v39 = "No";
    if (v38)
      v39 = "YES";
    -[re::VideoDefaults appendFormat:](v3, "appendFormat:", CFSTR("\n    HDR Scaling Algo   : %s"), v39);
  }
  v24 = 0uLL;
LABEL_17:
  if (*((_DWORD *)this + 8) != 2)
  {
    v44 = v24;
    v25 = (re::VideoDefaults *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v4);
    if ((_DWORD)v25)
    {
      -[re::VideoDefaults appendString:](v3, "appendString:", CFSTR("\nUpdating to RGB Color for YCBCR HDR Content:"));
      -[re::VideoDefaults appendFormat:](v3, "appendFormat:", CFSTR("\n    Average Color Before Conversion: [%f, %f, %f]"), v44.f32[0], v44.f32[1], v44.f32[2]);
      if (*((_BYTE *)this + 36))
        v43 = "Yes";
      else
        v43 = "No";
      v25 = (re::VideoDefaults *)-[re::VideoDefaults appendFormat:](v3, "appendFormat:", CFSTR("\n    Is Full Range                  : %s"), v43);
    }
    v26 = *((_DWORD *)this + 8);
    if (*((_BYTE *)this + 36))
    {
      __asm { FMOV            V0.4S, #1.0 }
      v32 = v44;
      switch(v26)
      {
        case 9:
          v33 = (float32x4_t)xmmword_22619D9A0;
          v34 = (float32x4_t)xmmword_22619D9B0;
          v35 = (float32x4_t)xmmword_22619D9C0;
          break;
        case 6:
          v33 = (float32x4_t)xmmword_22619D970;
          v34 = (float32x4_t)xmmword_22619D980;
          v35 = (float32x4_t)xmmword_22619D990;
          break;
        case 1:
          v33 = (float32x4_t)xmmword_22619D9D0;
          v34 = (float32x4_t)xmmword_22619D9E0;
          v35 = (float32x4_t)xmmword_22619D9F0;
          break;
        default:
LABEL_28:
          _Q0 = (float32x4_t)xmmword_2260E5F10;
          v34 = (float32x4_t)xmmword_2260E5F20;
          v35 = (float32x4_t)xmmword_2260E5F40;
          v33 = 0uLL;
          break;
      }
    }
    else
    {
      _Q0 = (float32x4_t)vdupq_n_s32(0x3F95A000u);
      v32 = v44;
      switch(v26)
      {
        case 9:
          v33 = (float32x4_t)xmmword_22619DA30;
          v34 = (float32x4_t)xmmword_22619DA40;
          v35 = (float32x4_t)xmmword_22619DA50;
          break;
        case 6:
          v33 = (float32x4_t)xmmword_22619DA00;
          v34 = (float32x4_t)xmmword_22619DA10;
          v35 = (float32x4_t)xmmword_22619DA20;
          break;
        case 1:
          v33 = (float32x4_t)xmmword_22619DA60;
          _Q0 = (float32x4_t)vdupq_n_s32(0x3F95A000u);
          v34 = (float32x4_t)xmmword_22619DA70;
          v35 = (float32x4_t)xmmword_22619DA80;
          break;
        default:
          goto LABEL_28;
      }
    }
    v45 = vaddq_f32(v33, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(_Q0, v32.f32[0]), v34, *(float32x2_t *)v32.f32, 1), v35, v32, 2));
    v4 = re::VideoDefaults::videoStatisticsEnableScaling(v25);
    v24 = v45;
    if ((_DWORD)v4)
      v24 = vmulq_n_f32(v45, re::VideoDefaults::hdrToSDRColorAverage((re::VideoDefaults *)v4));
  }
  v24.i32[3] = 0;
  v36 = vmaxnmq_f32(v24, (float32x4_t)0);
  v36.i32[3] = 0;
  v46 = vminnmq_f32(v36, (float32x4_t)xmmword_2260EDC60);
  if (re::VideoDefaults::logEnabled((re::VideoDefaults *)v4))
  {
    -[re::VideoDefaults appendString:](v3, "appendString:", CFSTR("\nComputing average RGB color from RGB histogram:"));
    -[re::VideoDefaults appendFormat:](v3, "appendFormat:", CFSTR("\n        Bin Count          : %zu"), *v10);
    -[re::VideoDefaults appendFormat:](v3, "appendFormat:", CFSTR("\n    Average Color          : [%f, %f, %f]"), v46.f32[0], v46.f32[1], v46.f32[2]);
    v40 = *re::videoLogObjects((re *)-[re::VideoDefaults appendFormat:](v3, "appendFormat:", CFSTR("\n    Average Color RGB Value: [%f, %f, %f]"), (float)((float)((float)(100.0 * v46.f32[0]) * 254.0) / 100.0), (float)((float)(vmuls_lane_f32(100.0, *(float32x2_t *)v46.f32, 1)* 254.0)/ 100.0), (float)((float)(vmuls_lane_f32(100.0, v46, 2) * 254.0) / 100.0)));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v41 = objc_retainAutorelease(v3);
      v42 = v40;
      *(_DWORD *)buf = 136315138;
      v48 = -[re::VideoDefaults cStringUsingEncoding:](v41, "cStringUsingEncoding:", 1);
      _os_log_impl(&dword_224FE9000, v42, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

    }
  }

  return v46.i64[0];
}

int *re::defaultVideoHDRDisplayInfo(re *this)
{
  unsigned __int8 v1;
  re::VideoHDRDefaults *v3;
  re::VideoHDRDefaults *v4;
  re::VideoHDRDefaults *v5;
  re::VideoHDRDefaults *v6;
  re::VideoHDRDefaults *v7;
  re::VideoHDRDefaults *v8;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v4 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::displayDiagonalSize(v3);
      re::defaultVideoHDRDisplayInfo(void)::value = (int)v4;
      v5 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::displayMaximumBrightnessInNits(v4);
      dword_25582B18C = (int)v5;
      v6 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::displayAverageBrightnessInNits(v5);
      dword_25582B190 = (int)v6;
      dword_25582B194 = re::VideoHDRDefaults::displayMinimumBrightnessInNits(v6);
      dword_25582B198 = re::VideoHDRDefaults::displayContrastRatio(v7);
      byte_25582B19C = re::VideoHDRDefaults::displayAdjustsBlackLevel(v8);
    }
  }
  return &re::defaultVideoHDRDisplayInfo(void)::value;
}

void re::VideoTextureAllocator::~VideoTextureAllocator(void **this)
{
  re::ObjCObject::operator=(this + 6, 0);
  re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::clear((uint64_t)this);

  re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::deinit((uint64_t *)this);
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_31, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 232;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::VideoTextureAllocator::createTextureInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  __CFString *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  re *v32;
  id v33;
  NSObject *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  char *v49;
  re::VideoDefaults *v50;
  unint64_t *v51;
  re *v52;
  id v53;
  re *v54;
  NSObject *v55;
  re *v56;
  NSObject *v57;
  void *v58;
  NSObject *v59;
  re *v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  id *v71;
  id v72;
  uint64_t v73;
  id v74;
  unsigned int v75;
  unsigned int v76;
  NSObject *v77;
  NSObject *v78;
  NSObject *v79;
  void *v80;
  NSObject *v81;
  id v82;
  NSObject *v83;
  id v84;
  id v85;
  double v86;
  id v87;
  NSObject *v88;
  uint64_t isa_low;
  int v91;
  re::VideoTextureAllocator *v93;
  id v94;
  id v95;
  __int128 v96;
  int v97;
  int v98;
  unsigned int v99;
  char v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  id v104[24];

  v104[22] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 48))
  {
    *(_QWORD *)&v96 = a2;
    *((_QWORD *)&v96 + 1) = a3;
    v97 = a4;
    v98 = a5;
    v99 = a6;
    v100 = a7;
    v101 = a8;
    v102 = a10;
    v94 = 0;
    v95 = 0;
    v18 = re::Hash<re::internal::VideoTextureConfiguration>::operator()((uint64_t)&v96);
    v93 = (re::VideoTextureAllocator *)a1;
    if (*(_QWORD *)a1)
    {
      v19 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v18 % *(unsigned int *)(a1 + 24)));
      if ((_DWORD)v19 != 0x7FFFFFFF)
      {
        v20 = *(_QWORD *)(a1 + 16);
        while (1)
        {
          v21 = (void **)re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((_QWORD *)(v20 + 232 * v19 + 16), &v96);
          if ((v21 & 1) != 0)
            break;
          v19 = *(_DWORD *)(v20 + 232 * v19 + 8) & 0x7FFFFFFF;
          if (v19 == 0x7FFFFFFF)
            goto LABEL_7;
        }
        v43 = v20 + 232 * v19;
        v46 = *(_QWORD *)(v43 + 88);
        v45 = (void **)(v43 + 88);
        v44 = v46;
        if (v46)
        {
          v47 = v45 + 2;
          v48 = 16 * v44;
          while (1)
          {
            v49 = (char *)objc_msgSend(*v47, sel_usedSize) + *(_QWORD *)(v20 + 232 * v19 + 64);
            v21 = (void **)objc_msgSend(*v47, sel_size);
            if (v49 <= (char *)v21)
              break;
            v47 += 2;
            v48 -= 16;
            if (!v48)
              goto LABEL_63;
          }
          NS::SharedPtr<MTL::Texture>::operator=(&v95, v47);
          v21 = NS::SharedPtr<MTL::Texture>::operator=(&v94, v45 - 4);
          v47[1] = 0;
        }
LABEL_63:
        v22 = (__CFString *)v93;
        if (!v95)
        {
          if ((unint64_t)*v45 > 7)
          {
            v88 = *re::videoLogObjects((re *)v21);
            v21 = (void **)os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v21)
            {
              LOWORD(v104[0]) = 0;
              _os_log_impl(&dword_224FE9000, v88, OS_LOG_TYPE_DEFAULT, "Video texture allocator has reached the maximum number of allowed heaps for the given configuration.", (uint8_t *)v104, 2u);
            }
          }
          else
          {
            v104[0] = objc_msgSend(*((id *)v93 + 6), sel_newHeapWithDescriptor_, *(_QWORD *)(v20 + 232 * v19 + 80));
            NS::SharedPtr<MTL::Texture>::operator=(&v95, v104);
            if (v104[0])

            NS::SharedPtr<MTL::Texture>::operator=(&v94, v45 - 4);
            v104[0] = 0;
            v104[1] = 0;
            NS::SharedPtr<MTL::Texture>::operator=(v104, &v95);
            v104[1] = 0;
            v56 = (re *)re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::add((uint64_t)v45, v104);
            v57 = *re::videoLogObjects(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              v58 = *v45;
              LODWORD(v103) = 134217984;
              *(_QWORD *)((char *)&v103 + 4) = v58;
              _os_log_impl(&dword_224FE9000, v57, OS_LOG_TYPE_DEFAULT, "Created new heap (%zu heaps total for configuration)", (uint8_t *)&v103, 0xCu);
            }
            v21 = (void **)v104[0];
            if (v104[0])

          }
        }
LABEL_49:
        v50 = (re::VideoDefaults *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v21);
        if ((_DWORD)v50)
        {
          objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Video Texture Allocator:"));
          v60 = (re *)objc_claimAutoreleasedReturnValue();
          v59 = v60;
          isa_low = LODWORD(v22[1].isa);
          v61 = 0;
          if ((_DWORD)isa_low)
          {
            v62 = (int *)(v22->data + 8);
            while (1)
            {
              v63 = *v62;
              v62 += 58;
              if (v63 < 0)
                break;
              if (isa_low == ++v61)
              {
                LODWORD(v61) = v22[1].isa;
                break;
              }
            }
          }
          if ((_DWORD)isa_low != (_DWORD)v61)
          {
            v64 = 0;
            v65 = v61;
            v22 = CFSTR("\n    Heap %zu / %zu: %zu bytes / %zu bytes");
            while (1)
            {
              v66 = *((_QWORD *)v93 + 2);
              v91 = v64;
              v60 = (re *)-[NSObject appendFormat:](v59, "appendFormat:", CFSTR("\nConfig %d / %d"), v64, *((unsigned int *)v93 + 7));
              v67 = v66 + 232 * v65;
              v69 = *(_QWORD *)(v67 + 88);
              v51 = (unint64_t *)(v67 + 88);
              v68 = v69;
              if (v69)
                break;
LABEL_84:
              v64 = (v91 + 1);
              v75 = *((_DWORD *)v93 + 8);
              if (v75 <= (int)v61 + 1)
                v75 = v61 + 1;
              while (1)
              {
                v65 = (v61 + 1);
                if (v75 - 1 == (_DWORD)v61)
                  break;
                LODWORD(v61) = v61 + 1;
                v76 = v65;
                if ((*(_DWORD *)(*((_QWORD *)v93 + 2) + 232 * v65 + 8) & 0x80000000) != 0)
                  goto LABEL_90;
              }
              v76 = v75;
LABEL_90:
              LODWORD(v61) = v76;
              if ((_DWORD)isa_low == v76)
                goto LABEL_91;
            }
            v70 = 0;
            v71 = (id *)(v66 + 232 * v65 + 104);
            while (1)
            {
              v72 = objc_msgSend(*v71, sel_usedSize);
              if (*v51 <= v70)
                break;
              v74 = *v71;
              v71 += 2;
              v60 = (re *)-[NSObject appendFormat:](v59, "appendFormat:", CFSTR("\n    Heap %zu / %zu: %zu bytes / %zu bytes"), v70++, v68, v72, objc_msgSend(v74, sel_size));
              v68 = *v51;
              if (v70 >= *v51)
                goto LABEL_84;
            }
            re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v70, *v51);
            _os_crash();
            __break(1u);
            goto LABEL_97;
          }
LABEL_91:
          v77 = *re::videoLogObjects(v60);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            v78 = objc_retainAutorelease(v59);
            v79 = v77;
            v80 = (void *)-[NSObject cStringUsingEncoding:](v78, "cStringUsingEncoding:", 1);
            LODWORD(v104[0]) = 136315138;
            *(id *)((char *)v104 + 4) = v80;
            _os_log_impl(&dword_224FE9000, v79, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)v104, 0xCu);

          }
          v22 = (__CFString *)v93;
        }
        v51 = a9;
        if (v95 && v94)
        {
          v52 = (re *)re::VideoDefaults::logEnabled(v50);
          if ((_DWORD)v52)
          {
            v81 = *re::videoLogObjects(v52);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              v82 = v95;
              v83 = v81;
              v84 = objc_msgSend(v82, sel_usedSize);
              v85 = objc_msgSend(v95, sel_size);
              v86 = (double)(unint64_t)objc_msgSend(v95, sel_usedSize);
              v87 = objc_msgSend(v95, sel_size);
              LODWORD(v104[0]) = 134218752;
              *(id *)((char *)v104 + 4) = v82;
              WORD2(v104[1]) = 2048;
              *(id *)((char *)&v104[1] + 6) = v84;
              v51 = a9;
              v22 = (__CFString *)v93;
              HIWORD(v104[2]) = 2048;
              v104[3] = v85;
              LOWORD(v104[4]) = 2048;
              *(double *)((char *)&v104[4] + 2) = v86 / (double)(unint64_t)v87 * 100.0;
              _os_log_impl(&dword_224FE9000, v83, OS_LOG_TYPE_DEFAULT, "Creating new texture from heap %p: %zu / %zu (%.1f%%).", (uint8_t *)v104, 0x2Au);

            }
          }
          v53 = objc_msgSend(v95, sel_newTextureWithDescriptor_, v94);
          v54 = (re *)re::VideoTextureAllocator::cleanup((re::VideoTextureAllocator *)v22, 0xAuLL);
          if (v53)
            goto LABEL_57;
          goto LABEL_54;
        }
        v59 = *re::videoLogObjects(v50);
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
LABEL_72:
          v54 = (re *)re::VideoTextureAllocator::cleanup((re::VideoTextureAllocator *)v22, 0xAuLL);
LABEL_54:
          v55 = *re::videoLogObjects(v54);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v104[0]) = 0;
            _os_log_error_impl(&dword_224FE9000, v55, OS_LOG_TYPE_ERROR, "Video texture allocator is unable to create video texture.", (uint8_t *)v104, 2u);
          }
          v53 = 0;
LABEL_57:
          *v51 = (unint64_t)v53;
          if (v94)

          if (v95)
          return;
        }
LABEL_97:
        LOWORD(v104[0]) = 0;
        _os_log_error_impl(&dword_224FE9000, v59, OS_LOG_TYPE_ERROR, "Heap entry not found.", (uint8_t *)v104, 2u);
        goto LABEL_72;
      }
    }
LABEL_7:
    v22 = (__CFString *)v93;
    re::VideoTextureAllocator::cleanup(v93, 0);
    objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a4, a2, a3, a7);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    if (v23)
    {
      objc_msgSend(v23, "setUsage:", a6);
      v25 = a5;
      objc_msgSend(v24, "setStorageMode:", a5);
      if (a8)
      {
        objc_msgSend(v24, "setUsage:", objc_msgSend(v24, "usage") | 0x4000);
        objc_msgSend(v24, "setCompressionMode:", 1);
      }
      objc_msgSend(v24, "setProtectionOptions:", a10);
      v104[0] = v24;
      v26 = v24;
      NS::SharedPtr<MTL::Texture>::operator=(&v94, v104);
      if (v104[0])

      v27 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5F0], sel_alloc), sel_init);
      if (v27)
      {
        v28 = v27;
        v29 = objc_msgSend(*((id *)v93 + 6), sel_heapTextureSizeAndAlignWithDescriptor_, v94);
        v31 = v30;
        objc_msgSend(v28, sel_setSize_, 3 * (_QWORD)v29);
        objc_msgSend(v28, sel_setStorageMode_, v25);
        objc_msgSend(v28, sel_setHazardTrackingMode_, 2);
        objc_msgSend(v28, sel_setProtectionOptions_, a10);
        v104[0] = objc_msgSend(*((id *)v93 + 6), sel_newHeapWithDescriptor_, v28);
        NS::SharedPtr<MTL::Texture>::operator=(&v95, v104);
        v32 = (re *)v104[0];
        if (v104[0])

        v33 = v95;
        v34 = *re::videoLogObjects(v32);
        if (!v33)
        {
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v104[0]) = 0;
            _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "Video texture allocator is unable to create a texture heap.", (uint8_t *)v104, 2u);
          }
          goto LABEL_47;
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, "Video texture allocator is adding a new configuration entry.", (uint8_t *)v104, 2u);
        }
        memset(v104, 0, 44);
        v104[3] = v28;
        NS::SharedPtr<MTL::Texture>::operator=(v104, &v94);
        v104[1] = v29;
        v104[2] = v31;
        v103 = 0uLL;
        NS::SharedPtr<MTL::Texture>::operator=((void **)&v103, &v95);
        *((_QWORD *)&v103 + 1) = 0;
        re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::add((uint64_t)&v104[4], &v103);
        v35 = re::Hash<re::internal::VideoTextureConfiguration>::operator()((uint64_t)&v96);
        v36 = v35;
        if (*(_QWORD *)v93)
        {
          v37 = v35 % *((unsigned int *)v93 + 6);
          v38 = *(unsigned int *)(*((_QWORD *)v93 + 1) + 4 * v37);
          if ((_DWORD)v38 != 0x7FFFFFFF)
          {
            v39 = *((_QWORD *)v93 + 2);
            while (!re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((_QWORD *)(v39 + 232 * v38 + 16), &v96))
            {
              v38 = *(_DWORD *)(v39 + 232 * v38 + 8) & 0x7FFFFFFF;
              if (v38 == 0x7FFFFFFF)
                goto LABEL_40;
            }
            goto LABEL_41;
          }
        }
        else
        {
          LODWORD(v37) = 0;
        }
LABEL_40:
        re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::addAsMove((uint64_t)v93, v37, v36, &v96, (uint64_t)v104);
        ++*((_DWORD *)v93 + 10);
LABEL_41:
        if ((_QWORD)v103)

        re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear((uint64_t)&v104[4]);
        if (v104[3])
        {

          v104[3] = 0;
        }
        if (v104[0])

LABEL_47:
        v22 = (__CFString *)v93;
        goto LABEL_48;
      }
      v41 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v104[0]) = 0;
        v42 = "Video texture allocator is unable to create a texture heap descriptor.";
        goto LABEL_31;
      }
    }
    else
    {
      v41 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v104[0]) = 0;
        v42 = "Video texture allocator is unable to create a texture descriptor.";
LABEL_31:
        _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, v42, (uint8_t *)v104, 2u);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  v40 = *re::videoLogObjects((re *)a1);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v104[0]) = 0;
    _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, "Video texture allocator is not initialized.", (uint8_t *)v104, 2u);
  }
  *a9 = 0;
}

void re::VideoTextureAllocator::createTexture(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10)
{
  re::VideoTextureAllocator::createTextureInternal(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::add(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result >= 8uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v3 = result + 16 * v2;
    v4 = a2[1];
    *(_QWORD *)(v3 + 16) = *a2;
    *a2 = 0;
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)result = v2 + 1;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t re::VideoTextureAllocator::cleanup(re::VideoTextureAllocator *this, unint64_t a2)
{
  unint64_t v2;
  re::VideoTextureAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  char **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  void **v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void **v37;
  re::VideoTextureAllocator **v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  __int128 v44;
  __int128 v45;
  char v46;
  int v47;
  re::VideoTextureAllocator **v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t result;
  int v63;
  int v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t *v74;

  v2 = a2;
  v3 = this;
  v70 = 0;
  v71 = 0;
  v72 = 1;
  v73 = 0;
  v74 = 0;
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 58;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v66 = 0;
    v9 = &selRef_newBufferWithBytes_length_options_;
    v10 = 1;
    v63 = *((_DWORD *)this + 8);
    while (1)
    {
      v11 = *((_QWORD *)v3 + 2);
      v12 = v11 + 232 * v8;
      v67 = 0uLL;
      LODWORD(v68) = 1;
      *((_QWORD *)&v68 + 1) = 0;
      v69 = 0;
      v15 = *(_QWORD *)(v12 + 88);
      v14 = (unint64_t *)(v12 + 88);
      v13 = v15;
      if (!v15)
        goto LABEL_51;
      v65 = v10;
      v16 = (char *)(v14 + 2);
      v17 = v11;
      v18 = (unint64_t *)(v11 + 232 * v8 + 112);
      v19 = 16 * v13;
      do
      {
        this = (re::VideoTextureAllocator *)objc_msgSend((id)*(v18 - 1), v9[235]);
        if (this)
        {
          *v18 = 0;
          goto LABEL_29;
        }
        v21 = *v18 + 1;
        *v18 = v21;
        if (v21 >= v2)
        {
          if ((_QWORD)v67)
          {
            v22 = v68;
            if ((v68 & 1) != 0)
            {
              v23 = *((_QWORD *)&v67 + 1) + 1;
              if ((unint64_t)(*((_QWORD *)&v67 + 1) + 1) >= 5)
              {
                v24 = 8;
LABEL_22:
                if (v24 <= v23)
                  v25 = v23;
                else
                  v25 = v24;
                re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity((uint64_t *)&v67, v25);
                v22 = v68;
              }
            }
            else if (*((_QWORD *)&v67 + 1) >= *((_QWORD *)&v68 + 1))
            {
              v23 = *((_QWORD *)&v67 + 1) + 1;
              if (*((_QWORD *)&v68 + 1) < (unint64_t)(*((_QWORD *)&v67 + 1) + 1))
              {
                v24 = 2 * *((_QWORD *)&v68 + 1);
                goto LABEL_22;
              }
            }
          }
          else
          {
            re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity((uint64_t *)&v67, *((_QWORD *)&v67 + 1) + 1);
            v22 = v68 + 2;
            LODWORD(v68) = v68 + 2;
          }
          v26 = (v22 & 1) == 0;
          v27 = v69;
          if (!v26)
            v27 = (char *)&v68 + 8;
          v28 = &v27[16 * *((_QWORD *)&v67 + 1)];
          this = (re::VideoTextureAllocator *)(id)*(v18 - 1);
          *(_QWORD *)v28 = this;
          *((_QWORD *)v28 + 1) = *v18;
          ++*((_QWORD *)&v67 + 1);
          LODWORD(v68) = v68 + 2;
          v9 = &selRef_newBufferWithBytes_length_options_;
        }
LABEL_29:
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
      if ((v68 & 1) != 0)
        v29 = (char *)&v68 + 8;
      else
        v29 = v69;
      v30 = *v14;
      if (*((_QWORD *)&v67 + 1))
      {
        v31 = &v29[16 * *((_QWORD *)&v67 + 1)];
        v32 = (_DWORD *)(v17 + 232 * v8 + 96);
        do
        {
          v33 = (void **)&v16[16 * v30];
          if (v30)
          {
            v34 = 16 * v30;
            v35 = (char *)(v14 + 2);
            while (*(_QWORD *)v35 != *(_QWORD *)v29 || *((_QWORD *)v35 + 1) != *((_QWORD *)v29 + 1))
            {
              v35 += 16;
              v34 -= 16;
              if (!v34)
              {
                v35 = &v16[16 * v30];
                break;
              }
            }
          }
          else
          {
            v35 = (char *)(v14 + 2);
          }
          v36 = (v35 - v16) >> 4;
          if (v36 != v30)
          {
            if (v30 <= v36)
            {
              re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v36, v30);
              result = _os_crash();
              __break(1u);
              return result;
            }
            if (v30 - 1 > v36)
            {
              v37 = (void **)&v16[16 * v36];
              NS::SharedPtr<MTL::Texture>::operator=(v37, v33 - 2);
              v37[1] = *(v33 - 1);
              v30 = *v14;
            }
            v38 = (re::VideoTextureAllocator **)&v14[2 * v30];
            this = *v38;
            if (*v38)
            {

              *v38 = 0;
              v30 = *v14;
            }
            *v14 = --v30;
            ++*v32;
          }
          v29 += 16;
        }
        while (v29 != v31);
      }
      LODWORD(v4) = v63;
      v2 = a2;
      v9 = &selRef_newBufferWithBytes_length_options_;
      v10 = v65;
      if (!v30)
      {
LABEL_51:
        if (v70)
        {
          if ((v10 & 1) != 0)
          {
            v39 = v66 + 1;
            if (v66 + 1 >= 5)
            {
              v40 = 8;
LABEL_59:
              if (v40 <= v39)
                v41 = v39;
              else
                v41 = v40;
              this = (re::VideoTextureAllocator *)re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(&v70, v41);
              LOBYTE(v10) = v72;
            }
          }
          else if (v66 >= v73)
          {
            v39 = v66 + 1;
            if (v73 < v66 + 1)
            {
              v40 = 2 * v73;
              goto LABEL_59;
            }
          }
        }
        else
        {
          this = (re::VideoTextureAllocator *)re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(&v70, v66 + 1);
          LOBYTE(v10) = v72 + 2;
          v72 += 2;
        }
        v42 = v74;
        if ((v10 & 1) != 0)
          v42 = &v73;
        v43 = &v42[5 * v71];
        v44 = *(_OWORD *)(v14 - 9);
        v45 = *(_OWORD *)(v14 - 7);
        v43[4] = *(v14 - 5);
        *(_OWORD *)v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        v66 = ++v71;
        v10 = v72 + 2;
        v72 += 2;
      }
      if ((_QWORD)v67)
      {
        v46 = v68;
        if (*((_QWORD *)&v67 + 1))
        {
          v47 = v10;
          if ((v68 & 1) != 0)
            v48 = (re::VideoTextureAllocator **)&v68 + 1;
          else
            v48 = (re::VideoTextureAllocator **)v69;
          v49 = 16 * *((_QWORD *)&v67 + 1);
          do
          {
            this = *v48;
            if (*v48)
            {

              *v48 = 0;
            }
            v48 += 2;
            v49 -= 16;
          }
          while (v49);
          v46 = v68;
          v10 = v47;
        }
        if ((v46 & 1) == 0)
          this = (re::VideoTextureAllocator *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)v67 + 40))(v67, v69);
      }
      v50 = *((_DWORD *)v3 + 8);
      if (v50 <= (int)v5 + 1)
        v50 = v5 + 1;
      while (1)
      {
        v8 = (v5 + 1);
        if (v50 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v51 = v8;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 2) + 232 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_84;
      }
      v51 = v50;
LABEL_84:
      LODWORD(v5) = v51;
      if ((_DWORD)v4 == v51)
      {
        if ((v10 & 1) != 0)
          v52 = &v73;
        else
          v52 = v74;
        if (v66)
        {
          v53 = &v52[5 * v66];
          do
          {
            v67 = *(_OWORD *)v52;
            v68 = *((_OWORD *)v52 + 1);
            v69 = (char *)v52[4];
            v54 = re::Hash<re::internal::VideoTextureConfiguration>::operator()((uint64_t)&v67);
            if (*(_QWORD *)v3)
            {
              v55 = v54 % *((unsigned int *)v3 + 6);
              v56 = *((_QWORD *)v3 + 1);
              v57 = *(unsigned int *)(v56 + 4 * v55);
              if ((_DWORD)v57 != 0x7FFFFFFF)
              {
                v58 = *((_QWORD *)v3 + 2);
                if (re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((_QWORD *)(v58 + 232 * v57 + 16), &v67))
                {
                  *(_DWORD *)(v56 + 4 * v55) = *(_DWORD *)(v58 + 232 * v57 + 8) & 0x7FFFFFFF;
LABEL_97:
                  re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(*((_QWORD *)v3 + 2) + 232 * v57);
                  v60 = *((_QWORD *)v3 + 2) + 232 * v57;
                  *(_DWORD *)(v60 + 8) = *(_DWORD *)(v60 + 8) & 0x80000000 | *((_DWORD *)v3 + 9);
                  --*((_DWORD *)v3 + 7);
                  v61 = *((_DWORD *)v3 + 10) + 1;
                  *((_DWORD *)v3 + 9) = v57;
                  *((_DWORD *)v3 + 10) = v61;
                }
                else
                {
                  while (1)
                  {
                    v59 = v57;
                    v57 = *(_DWORD *)(v58 + 232 * v57 + 8) & 0x7FFFFFFF;
                    if (v57 == 0x7FFFFFFF)
                      break;
                    if (re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((_QWORD *)(v58 + 232 * v57 + 16), &v67))
                    {
                      *(_DWORD *)(v58 + 232 * v59 + 8) = *(_DWORD *)(v58 + 232 * v59 + 8) & 0x80000000 | *(_DWORD *)(v58 + 232 * v57 + 8) & 0x7FFFFFFF;
                      goto LABEL_97;
                    }
                  }
                }
              }
            }
            v52 += 5;
          }
          while (v52 != v53);
        }
        break;
      }
    }
  }
  result = (uint64_t)v70;
  if (v70)
  {
    if ((v72 & 1) == 0)
      return (*(uint64_t (**)(void))(*v70 + 40))();
  }
  return result;
}

void re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  v2 = (id *)(a1 + 16);
  if (*(_QWORD *)a1)
  {
    v3 = 16 * *(_QWORD *)a1;
    do
    {
      if (*v2)
      {

        *v2 = 0;
      }
      v2 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

double re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 232;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  void *v3;
  void *v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear(a1 + 88);
    v3 = *(void **)(a1 + 80);
    if (v3)
    {

      *(_QWORD *)(a1 + 80) = 0;
    }
    v4 = *(void **)(a1 + 56);
    if (v4)
    {

      *(_QWORD *)(a1 + 56) = 0;
    }
  }
}

BOOL re::EqualTo<re::internal::VideoTextureConfiguration>::operator()(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && *(_QWORD *)((char *)a1 + 22) == *(_QWORD *)((char *)a2 + 22)
      && a1[4] == a2[4];
}

unint64_t re::Hash<re::internal::VideoTextureConfiguration>::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;

  v1 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a1 ^ (*(_QWORD *)a1 >> 30));
  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(a1 + 8) ^ (*(_QWORD *)(a1 + 8) >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  LODWORD(v2) = 73244475 * (*(_DWORD *)(a1 + 16) ^ HIWORD(*(_DWORD *)(a1 + 16)));
  v4 = (73244475 * (v2 ^ WORD1(v2))) ^ ((73244475 * (v2 ^ WORD1(v2))) >> 16);
  LODWORD(v2) = 73244475 * (*(_DWORD *)(a1 + 20) ^ HIWORD(*(_DWORD *)(a1 + 20)));
  v5 = (73244475 * (v2 ^ WORD1(v2))) ^ ((73244475 * (v2 ^ WORD1(v2))) >> 16);
  LODWORD(v2) = 73244475 * (*(_DWORD *)(a1 + 24) ^ HIWORD(*(_DWORD *)(a1 + 24)));
  v6 = (73244475 * (v2 ^ WORD1(v2))) ^ ((73244475 * (v2 ^ WORD1(v2))) >> 16);
  LODWORD(v2) = 73244475
              * ((73244475 * *(unsigned __int8 *)(a1 + 28)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 28)) >> 16));
  v7 = 73244475
     * ((73244475 * *(unsigned __int8 *)(a1 + 29)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 29)) >> 16));
  v8 = *(_QWORD *)(a1 + 32) ^ (*(_QWORD *)(a1 + 32) >> 30);
  v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
  return re::hashCombine((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31), v3, v4, v5, v6, (((unint64_t)(v2 ^ WORD1(v2)) << 6)+ ((unint64_t)(v2 ^ WORD1(v2)) >> 2)- 0x61C8864680B583E9+ (((v9 ^ (v9 >> 31))+ ((unint64_t)(v7 ^ HIWORD(v7)) << 6)+ ((unint64_t)(v7 ^ HIWORD(v7)) >> 2)- 0x61C8864680B583E9) ^ v7 ^ HIWORD(v7))) ^ v2 ^ WORD1(v2));
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE v39[44];

  v9 = *(_DWORD *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    v9 = *(_DWORD *)(a1 + 32);
    v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v39, 0, 36);
          *(_QWORD *)&v39[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::init((uint64_t)v39, v13, v12);
          v15 = *(_OWORD *)v39;
          *(_OWORD *)v39 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v39[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v39[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v39[24];
          *(_OWORD *)&v39[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v39[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 56;
            do
            {
              if ((*(_DWORD *)(v21 - 48) & 0x80000000) != 0)
                re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 56) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 56), v21 - 40, v21);
              v21 += 232;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::deinit((uint64_t *)v39);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 232 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 232 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  v25 = 232 * v9;
  *(_DWORD *)(v22 + v25 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25) = a3;
  v26 = a2;
  v27 = *(_QWORD *)(a1 + 16) + v25;
  v28 = *a4;
  v29 = a4[1];
  *(_QWORD *)(v27 + 48) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(v27 + 16) = v28;
  *(_OWORD *)(v27 + 32) = v29;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = v30 + 232 * v9;
  *(_QWORD *)(v31 + 56) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v32 = *(_OWORD *)(a5 + 8);
  *(_QWORD *)(v31 + 88) = 0;
  v33 = v31 + 88;
  *(_OWORD *)(v33 - 24) = v32;
  v36 = *(_QWORD *)(a5 + 32);
  v35 = a5 + 32;
  v34 = v36;
  *(_QWORD *)(v33 - 8) = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(v35 - 8) = 0;
  *(_DWORD *)(v33 + 8) = 0;
  if (v36)
  {
    v37 = (_QWORD *)(v35 + 16);
    v38 = (_QWORD *)(v30 + 232 * v9 + 104);
    do
    {
      *v38 = *v37;
      *v37 = 0;
      v38[1] = v37[1];
      v37 += 2;
      v38 += 2;
    }
    while (v37 != (_QWORD *)(v35 + 16 + 16 * v34));
  }
  *(_QWORD *)v33 = v34;
  re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear(v35);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 232 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_31, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 4;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        v14 = a1 + 3;
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = &v15[2 * v9];
          do
          {
            v17 = v15[1];
            *v14 = *v15;
            *v15 = 0;
            v15 += 2;
            v14[1] = v17;
            v14 += 2;
          }
          while (v15 != v16);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 16 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 16 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = a1 + 3;
          else
            v13 = (_QWORD *)a1[4];
          v18 = a1[1];
          if (v18)
          {
            v19 = &v13[2 * v18];
            v20 = (_QWORD *)result;
            do
            {
              v21 = v13[1];
              *v20 = *v13;
              *v13 = 0;
              v13 += 2;
              v20[1] = v21;
              v20 += 2;
            }
            while (v13 != v19);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 4;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 40 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x28uLL))
      {
        v2 = 40 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 40 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 40 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 40, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

const __CFArray *re::VideoColorTransformBase::conversionMatrix@<X0>(CFArrayRef *this@<X0>, uint64_t a2@<X8>)
{
  const __CFArray *result;
  const __CFArray *v4;
  CFIndex v5;
  __int128 *v6;
  const __CFArray *ValueAtIndex;
  CFIndex v8;
  __int128 *v9;
  const __CFNumber *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  result = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x24BDB9318]);
  if (result)
  {
    v4 = result;
    v5 = 0;
    v12 = xmmword_2260E5F10;
    v13 = xmmword_2260E5F20;
    v14 = xmmword_2260E5F40;
    v6 = &v12;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v4, v5);
      v8 = 0;
      v9 = v6;
      do
      {
        v10 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, v8);
        result = (const __CFArray *)CFNumberGetValue(v10, kCFNumberFloat32Type, v9);
        ++v8;
        ++v9;
      }
      while (v8 != 3);
      ++v5;
      v6 = (__int128 *)((char *)v6 + 4);
    }
    while (v5 != 3);
    *(_BYTE *)a2 = 1;
    v11 = v13;
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v14;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

const __CFArray *re::VideoColorTransformBase::findFragment(CFArrayRef *this, const __CFString *a2)
{
  const __CFArray *result;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  void *value;

  result = *this;
  if (result)
  {
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*this, v7);
        value = 0;
        if (CFDictionaryGetValueIfPresent(ValueAtIndex, a2, (const void **)&value))
          break;
        if (v6 == ++v7)
          return 0;
      }
      return (const __CFArray *)value;
    }
  }
  return result;
}

const __CFArray *re::VideoColorTransformBase::gammaToneCurve@<X0>(CFArrayRef *this@<X0>, uint64_t a2@<X8>)
{
  const __CFArray *Fragment;
  const __CFNumber *ValueAtIndex;
  const __CFArray *result;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  _BYTE *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFArray *v25;
  const __CFArray *v26;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  const __CFArray *v32;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  __int128 v40;
  _BYTE v41[32];

  Fragment = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x24BDB9330]);
  if (Fragment)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_OWORD *)&v41[4] = _D0;
    *(_QWORD *)&v41[20] = 0;
    *(_DWORD *)&v41[28] = 0;
    *(_DWORD *)v41 = 1;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(Fragment, 0);
    result = (const __CFArray *)CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, &v41[4]);
    *(_BYTE *)a2 = 1;
LABEL_12:
    v40 = *(_OWORD *)&v41[16];
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v41;
    *(_OWORD *)(a2 + 20) = v40;
    return result;
  }
  v12 = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x24BDB9338]);
  if (v12)
  {
    v13 = v12;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)v41 = 2;
    v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
    CFNumberGetValue(v15, kCFNumberFloat32Type, &v41[4]);
    v16 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, 1);
    CFNumberGetValue(v16, kCFNumberFloat32Type, &v41[8]);
    v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, 2);
    v18 = &v41[12];
LABEL_11:
    result = (const __CFArray *)CFNumberGetValue(v17, kCFNumberFloat32Type, v18);
    *(_BYTE *)a2 = 1;
    goto LABEL_12;
  }
  v19 = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x24BDB9340]);
  if (v19)
  {
    v20 = v19;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)v41 = 3;
    v22 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 0);
    CFNumberGetValue(v22, kCFNumberFloat32Type, &v41[4]);
    v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, 1);
    CFNumberGetValue(v23, kCFNumberFloat32Type, &v41[8]);
    v24 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, 2);
    CFNumberGetValue(v24, kCFNumberFloat32Type, &v41[12]);
    v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, 3);
    v18 = &v41[16];
    goto LABEL_11;
  }
  v25 = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x24BDB9348]);
  if (v25)
  {
    v26 = v25;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)v41 = 4;
    v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v25, 0);
    CFNumberGetValue(v28, kCFNumberFloat32Type, &v41[4]);
    v29 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 1);
    CFNumberGetValue(v29, kCFNumberFloat32Type, &v41[8]);
    v30 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 2);
    CFNumberGetValue(v30, kCFNumberFloat32Type, &v41[12]);
    v31 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 3);
    CFNumberGetValue(v31, kCFNumberFloat32Type, &v41[16]);
    v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 4);
    v18 = &v41[20];
    goto LABEL_11;
  }
  result = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x24BDB9350]);
  if (result)
  {
    v32 = result;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)v41 = 5;
    v34 = (const __CFNumber *)CFArrayGetValueAtIndex(result, 0);
    CFNumberGetValue(v34, kCFNumberFloat32Type, &v41[4]);
    v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 1);
    CFNumberGetValue(v35, kCFNumberFloat32Type, &v41[8]);
    v36 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 2);
    CFNumberGetValue(v36, kCFNumberFloat32Type, &v41[12]);
    v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 3);
    CFNumberGetValue(v37, kCFNumberFloat32Type, &v41[16]);
    v38 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 4);
    CFNumberGetValue(v38, kCFNumberFloat32Type, &v41[20]);
    v39 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 5);
    CFNumberGetValue(v39, kCFNumberFloat32Type, &v41[24]);
    v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 6);
    v18 = &v41[28];
    goto LABEL_11;
  }
  *(_BYTE *)a2 = 0;
  return result;
}

void `anonymous namespace'::getGlobalMetalDevice(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {

    }
  }
}

void `anonymous namespace'::getGlobalPixelFormatInfoTable(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    *(_OWORD *)&qword_25582B1D8 = 0u;
    dword_25582B1E8 = 1065353216;
  }
}

uint64_t re::VideoPlatform::isLegacyDevice(re::VideoPlatform *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::VideoPlatform::isLegacyDevice(void)::value = MGGetProductType() == 3652044089;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 424);
}

void re::mtl::Device::~Device(id *this)
{

}

uint64_t std::unordered_map<re::mtl::PixelFormat,MTLPixelFormatInfo>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void ___ZN12_GLOBAL__N_129getGlobalPixelFormatInfoTableEv_block_invoke(uint64_t InfoForDevice)
{
  unint64_t v1;
  uint64_t i;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t **v5;
  uint64_t *j;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  _OWORD v32[3];
  uint64_t v33;

  for (i = 500; i != 630; ++i)
  {
    InfoForDevice = MTLPixelFormatGetInfoForDevice();
    {
                                          + 8));
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        v1 = (int)i;
          v1 = (unint64_t)(int)i
      }
      else
      {
      }
      if (v5)
      {
        for (j = *v5; j; j = (uint64_t *)*j)
        {
          v7 = j[1];
          if (v7 == (int)i)
          {
            if (*((_DWORD *)j + 4) == (_DWORD)i)
              goto LABEL_40;
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
            }
            else
            {
            }
            if (v7 != v1)
              break;
          }
        }
      }
    }
    InfoForDevice = (uint64_t)operator new(0x50uLL);
    v8 = InfoForDevice;
    *(_QWORD *)InfoForDevice = 0;
    *(_QWORD *)(InfoForDevice + 8) = (int)i;
    *(_DWORD *)(InfoForDevice + 16) = i;
    v9 = v32[1];
    *(_OWORD *)(InfoForDevice + 24) = v32[0];
    *(_OWORD *)(InfoForDevice + 40) = v9;
    *(_OWORD *)(InfoForDevice + 56) = v32[2];
    *(_QWORD *)(InfoForDevice + 72) = v33;
    v10 = (float)(unint64_t)(qword_25582B1E0 + 1);
    if (!v3 || (float)(*(float *)&dword_25582B1E8 * (float)v3) < v10)
    {
      v11 = (v3 & (v3 - 1)) != 0;
      if (v3 < 3)
        v11 = 1;
      v12 = v11 | (2 * v3);
      v13 = vcvtps_u32_f32(v10 / *(float *)&dword_25582B1E8);
      if (v12 <= v13)
        v14 = v13;
      else
        v14 = v12;
      std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__rehash<true>(v14);
      if ((v3 & (v3 - 1)) != 0)
      {
          v1 = (unint64_t)(int)i
        else
          v1 = (int)i;
      }
      else
      {
      }
    }
    if (v16)
    {
      *(_QWORD *)v8 = *v16;
LABEL_38:
      *v16 = v8;
      goto LABEL_39;
    }
    *(_QWORD *)v8 = qword_25582B1D8;
    qword_25582B1D8 = v8;
    *(_QWORD *)(v15 + 8 * v1) = &qword_25582B1D8;
    if (*(_QWORD *)v8)
    {
      v17 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      if ((v3 & (v3 - 1)) != 0)
      {
        if (v17 >= v3)
          v17 %= v3;
      }
      else
      {
        v17 &= v3 - 1;
      }
      goto LABEL_38;
    }
LABEL_39:
    ++qword_25582B1E0;
LABEL_40:
    ;
  }
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(10, 10, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(20, 20, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(25, 25, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(40, 40, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(43, 43, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(60, 60, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(70, 70, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(71, 71, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(90, 90, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(94, 94, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(110, 110, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(115, 115, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(125, 125, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(240, 240, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(241, 241, (uint64_t)v32);
}

void std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  {
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_25582B1E0 / *(float *)&dword_25582B1E8);
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      if (v14)
        operator delete(v14);
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v3 = operator new(8 * prime);
  if (v4)
    operator delete(v4);
  v5 = 0;
  do
  while (prime != v5);
  v6 = (_QWORD **)qword_25582B1D8;
  if (qword_25582B1D8)
  {
    v7 = *(_QWORD *)(qword_25582B1D8 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        {
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

void std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(int a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  char *v12;
  __int128 v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a1;
  {
                                        + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a1;
        v3 = (unint64_t)a1
    }
    else
    {
    }
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
          }
          else
          {
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (char *)operator new(0x50uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v6;
  *((_DWORD *)v12 + 4) = a2;
  v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a3 + 32);
  *((_QWORD *)v12 + 9) = *(_QWORD *)(a3 + 48);
  v14 = (float)(unint64_t)(qword_25582B1E0 + 1);
  if (!v7 || (float)(*(float *)&dword_25582B1E8 * (float)v7) < v14)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v14 / *(float *)&dword_25582B1E8);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__rehash<true>(v18);
    if ((v7 & (v7 - 1)) != 0)
    {
      else
        v3 = v6;
    }
    else
    {
    }
  }
  if (v20)
  {
    *(_QWORD *)v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = qword_25582B1D8;
  qword_25582B1D8 = (uint64_t)v12;
  *(_QWORD *)(v19 + 8 * v3) = &qword_25582B1D8;
  if (*(_QWORD *)v12)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    goto LABEL_38;
  }
LABEL_39:
  ++qword_25582B1E0;
}

void re::VideoPresentationQueue::~VideoPresentationQueue(re::VideoPresentationQueue *this)
{
  uint64_t i;

  re::VideoPresentationQueue::clear(this);
  *(_QWORD *)this = 0;
  for (i = 896; i != -864; i -= 880)
    re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationQueue *)((char *)this + i));
}

void re::VideoPresentationQueue::clear(re::VideoPresentationQueue *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = (_QWORD *)((char *)this + 1776);
  v2 = *((_QWORD *)this + 222);
  v3 = *((_QWORD *)this + 223);
  if (v2 != v3)
  {
    v4 = (char *)this + 16;
    do
      re::deinitVideoPresentationGroup((uint64_t)&v4[880 * (v2++ & 1)]);
    while (v3 != v2);
  }
  *v1 = 0;
  v1[1] = 0;
}

BOOL re::VideoPresentationQueue::push(re::VideoPresentationQueue *this, const re::VideoPresentationGroup *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = *((_QWORD *)this + 223);
  v3 = v2 - *((_QWORD *)this + 222);
  if (v3 != 2)
  {
    v4 = (char *)this + 880 * (*((_QWORD *)this + 223) & 1);
    *((_QWORD *)this + 223) = v2 + 1;
    re::VideoPresentationGroup::operator=((uint64_t)(v4 + 16), (__int128 *)a2);
  }
  return v3 != 2;
}

uint64_t re::VideoPresentationQueue::front(re::VideoPresentationQueue *this, uint64_t a2)
{
  uint64_t result;

  if (*((_QWORD *)this + 222) != *((_QWORD *)this + 223))
    return (uint64_t)this + 880 * (*((_QWORD *)this + 222) & 1) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isEmpty()", "front", 99);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::VideoDefaults::inverseToneMappingAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.inverse_tone_mapping.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::inverseToneMappingAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 512);
}

uint64_t re::VideoDefaults::overrideStereoMode(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  int v6;
  _BYTE v7[4];
  int v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.override.stereo", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = -1;
      re::VideoDefaults::overrideStereoMode(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned int *)v2 + 132);
}

uint64_t re::VideoDefaults::colorSpaceTransformationAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  const char *v6;
  char v7;
  BOOL v8;
  char v9[2];
  char v10[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.color_space_transformation.allowed", v5, v10);
      v7 = 1;
      if (v10[0] && !v10[1])
      {
        re::Defaults::BOOLValue((re::Defaults *)"video.color_space_conversion.allowed", v6, v9);
        if (v9[0])
          v8 = v9[1] == 0;
        else
          v8 = 0;
        v7 = !v8;
      }
      re::VideoDefaults::colorSpaceTransformationAllowed(void)::value = v7;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 544);
}

uint64_t re::VideoDefaults::logEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.log.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::VideoDefaults::logEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 560);
}

uint64_t re::VideoDefaults::frameTimeLogEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.log.frametime.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::VideoDefaults::frameTimeLogEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 576);
}

float re::VideoDefaults::frameDropThreshold(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.log.framedrop.threshold", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 0.0;
      re::VideoDefaults::frameDropThreshold(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 148);
}

uint64_t re::VideoDefaults::opaqueTechniqueAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.opaque_technique.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::opaqueTechniqueAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 608);
}

uint64_t re::VideoDefaults::compressionAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.compression.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::compressionAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 624);
}

uint64_t re::VideoDefaults::targetDisplayTimeAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.target_display_time.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::targetDisplayTimeAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 640);
}

uint64_t re::VideoDefaults::histogramGenerationAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.histogram.generation.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::histogramGenerationAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 656);
}

uint64_t re::VideoDefaults::overrideHistogramGeneration(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.override.histogram.generation", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::VideoDefaults::overrideHistogramGeneration(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 672);
}

uint64_t re::VideoDefaults::useLegacyVideoTextures(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  const char *v6;
  char v7;
  BOOL v8;
  char v9[2];
  char v10[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.override.legacy_hardware_transfer_function_variant_selection", v5, v10);
      if (v10[0] && v10[1])
      {
        v7 = 1;
      }
      else
      {
        re::Defaults::BOOLValue((re::Defaults *)"video.use_legacy_video_textures", v6, v9);
        if (v9[0])
          v8 = v9[1] == 0;
        else
          v8 = 1;
        v7 = !v8;
      }
      re::VideoDefaults::useLegacyVideoTextures(void)::value = v7;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 688);
}

uint64_t re::VideoDefaults::passthroughTintColorTuningAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.passthrough_color_tuning.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::passthroughTintColorTuningAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 704);
}

float re::VideoDefaults::minSaturationVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.minSaturation", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.5;
    re::VideoDefaults::minSaturationVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.minSaturation_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.42298;
    re::VideoDefaults::minSaturationVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::maxSaturationVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.maxSaturation", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.72078;
    re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.maxSaturation_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.63663;
    re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::saturationPowerVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.saturationPower", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.81;
    re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.saturationPower_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.81;
    re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::saturationInflectionVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.saturationInflection", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.1;
    re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.saturationInflection_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.093783;
    re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::saturationSmoothingVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.saturationSmoothing", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 20.0;
    re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.saturationSmoothing_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 20.0;
    re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::hueLerpVelocityVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.hueLerpVelocity", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.0055661;
    re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.hueLerpVelocity_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.0;
    re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::brightnessMinVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.brightnessMin", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.05;
    re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.brightnessMin_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.098907;
    re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::brightnessMaxVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.bightnessMax", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.49766;
    re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.bightnessMax_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.11634;
    re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::brightnessInflectionVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.brightnessInflection", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.58125;
    re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.brightnessInflection_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.32433;
    re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::brightnessSmoothingVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.brightnessSmoothing", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 1.5;
    re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.brightnessSmoothing_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 3.9066;
    re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::colorSmoothTimeVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
      return *(float *)v2;
    }
    v2 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    if (!v9)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.colorSmoothTime", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 0.032342;
    re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return *(float *)v2;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    if (!v5)
      return *(float *)v2;
    re::Defaults::floatValue((re::Defaults *)"video.colorSmoothTime_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 0.032342;
    re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
  return *(float *)v2;
}

float re::VideoDefaults::gazeDeadbandVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
      return (float)(*(float *)v2 * 3.1416) / 180.0;
    }
    v2 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    if (!v9)
      return (float)(*(float *)v2 * 3.1416) / 180.0;
    re::Defaults::floatValue((re::Defaults *)"video.gazeDeadband", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 40.0;
    re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return (float)(*(float *)v2 * 3.1416) / 180.0;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    if (!v5)
      return (float)(*(float *)v2 * 3.1416) / 180.0;
    re::Defaults::floatValue((re::Defaults *)"video.gazeDeadband_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 40.0;
    re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
  return (float)(*(float *)v2 * 3.1416) / 180.0;
}

float re::VideoDefaults::gazeMaxAngleVideoTuning(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  int v5;
  const char *v6;
  float v7;
  __guard *v8;
  int v9;
  const char *v10;
  float v11;
  int *v12;
  _BYTE v13[4];
  float v14;

  if (!(_DWORD)this)
  {
    if ((v3 & 1) != 0)
    {
      v2 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
      return (float)(*(float *)v2 * 3.1416) / 180.0;
    }
    v2 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    if (!v9)
      return (float)(*(float *)v2 * 3.1416) / 180.0;
    re::Defaults::floatValue((re::Defaults *)"video.gazeMaxAngle", v10, (uint64_t)v13);
    v11 = v14;
    if (!v13[0])
      v11 = 75.0;
    re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value = LODWORD(v11);
LABEL_15:
    __cxa_guard_release(v8);
    v2 = v12;
    return (float)(*(float *)v2 * 3.1416) / 180.0;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    v12 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    if (!v5)
      return (float)(*(float *)v2 * 3.1416) / 180.0;
    re::Defaults::floatValue((re::Defaults *)"video.gazeMaxAngle_HDR", v6, (uint64_t)v13);
    v7 = v14;
    if (!v13[0])
      v7 = 74.151;
    re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value = LODWORD(v7);
    goto LABEL_15;
  }
  v2 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
  return (float)(*(float *)v2 * 3.1416) / 180.0;
}

float re::VideoDefaults::hdrToSDRColorAverage(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdrToSDRColorAverage", v5, (uint64_t)v7);
      v6 = v8 / 100.0;
      if (!v7[0])
        v6 = 2.3567;
      re::VideoDefaults::hdrToSDRColorAverage(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 284);
}

BOOL re::VideoDefaults::videoStatisticsEnableScaling(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  BOOL v6;
  unsigned int v7;
  char v8[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video. videoStatisticsEnableScaling", v5, v8);
      if (v8[0])
        v6 = v8[1] == 0;
      else
        v6 = 0;
      v7 = !v6;
      *(float *)&re::VideoDefaults::videoStatisticsEnableScaling(void)::value = (float)v7;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 288) != 0.0;
}

float re::VideoDefaults::glowSizeXModifier(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.glowScaleX", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 1.5;
      re::VideoDefaults::glowSizeXModifier(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 292);
}

float re::VideoDefaults::glowSizeYModifier(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.glowScaleY", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 1.5;
      re::VideoDefaults::glowSizeYModifier(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 296);
}

uint64_t re::VideoDefaults::lightSpillTextureAllocatorEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.lightspill.texture_allocator.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::lightSpillTextureAllocatorEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1200);
}

uint64_t re::VideoDefaults::horizontalDisparityEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.disparity.horizontal.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::horizontalDisparityEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1216);
}

float re::VideoDefaults::overrideHorizontalDispartiy(re::VideoDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.disparity.horizontal.override", v4, (uint64_t)&re::VideoDefaults::overrideHorizontalDispartiy(float)::value);
      result = v5;
    }
  }
  if (re::VideoDefaults::overrideHorizontalDispartiy(float)::value)
    return *(float *)&dword_25582B4D4;
  return result;
}

uint64_t re::VideoDefaults::mipmapEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.mipmap.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::mipmapEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1248);
}

uint64_t re::VideoDefaults::stereoMipmapEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.mipmap.stereo.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::VideoDefaults::stereoMipmapEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1264);
}

uint64_t re::VideoDefaults::mipmapPixelsPerSecondMax(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  uint64_t v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    this = v4;
    if (v3)
    {
      re::Defaults::uint64Value((re::Defaults *)"video.mipmap.pixels_per_second.max", v2, (uint64_t)&re::VideoDefaults::mipmapPixelsPerSecondMax(unsigned long long)::value);
      this = v4;
    }
  }
  if (re::VideoDefaults::mipmapPixelsPerSecondMax(unsigned long long)::value)
    return qword_25582B508;
  return this;
}

uint64_t re::VideoDefaults::lightSpillDumpEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.lightspill.dump.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::VideoDefaults::lightSpillDumpEnabled(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1304);
}

uint64_t re::VideoDefaults::pseAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.pse.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::pseAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1320);
}

uint64_t re::VideoDefaults::overridePseEnabled(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    LODWORD(this) = v4;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.pse.override.enabled", v2, &re::VideoDefaults::overridePseEnabled(BOOL)::value);
      LODWORD(this) = v4;
    }
  }
  if (re::VideoDefaults::overridePseEnabled(BOOL)::value)
    return byte_25582B539 != 0;
  else
    return this;
}

BOOL re::VideoDefaults::screenFallbackTextureEnabled(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  BOOL v2;
  const char *v4;

  if ((v1 & 1) == 0
  {
    re::Defaults::BOOLValue((re::Defaults *)"video.screen.fallback.texture.enabled", v4, &re::VideoDefaults::screenFallbackTextureEnabled(void)::value);
  }
  if (re::VideoDefaults::screenFallbackTextureEnabled(void)::value)
    v2 = byte_25582B549 == 0;
  else
    v2 = 1;
  return !v2;
}

uint64_t re::VideoDefaults::aseAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.ase.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::aseAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1368);
}

uint64_t re::VideoDefaults::autoSynchronousProcessingAllowed(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.processor.synchronous.automatic_dispatch.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoDefaults::autoSynchronousProcessingAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1384);
}

uint64_t re::VideoDefaults::overrideProcessorSynchronousWorkThreshold(re::VideoDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  re::VideoDefaults *v6;
  _BYTE v8[8];
  re::VideoDefaults *v9;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::uint64Value((re::Defaults *)"video.processor.synchronous.work_threshold", v5, (uint64_t)v8);
      v6 = v9;
      if (!v8[0])
        v6 = this;
      re::VideoDefaults::overrideProcessorSynchronousWorkThreshold(long long)::value = (uint64_t)v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return v2[175];
}

BOOL re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded(re::VideoSimplePixelBufferAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4, re::CoreVideoUtils *a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9, BOOL a10, unint64_t a11)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  re::CoreVideoUtils *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  re *v20;
  NSObject *v21;
  int v22;
  int v23;
  re::CoreVideoUtils *v24;
  unsigned int v25;
  char v26;
  re::VideoDefaults *v27;
  NSObject *v28;
  re::VideoDefaults *v29;
  uint64_t v30;
  __int128 v31;
  const char *v33;
  const char *v34;
  BOOL v35;
  re::VideoPixelBufferPool *v36;
  re::VideoDefaults *v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint8_t buf[4];
  uint64_t v42;
  uint64_t v43;

  v11 = a8;
  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  v17 = a2;
  v19 = a10;
  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v38 = __PAIR64__(a3, a2);
  DWORD2(v38) = a4;
  BYTE12(v38) = (_BYTE)a5;
  BYTE13(v38) = a6;
  BYTE14(v38) = a7;
  HIBYTE(v38) = a8;
  *(_QWORD *)&v39 = a9;
  v40 = a11;
  *((_QWORD *)&v39 + 1) = a10;
  if (!*((_QWORD *)this + 6) || !re::VideoPixelBufferPoolConfiguration::operator==((uint64_t)&v38, (uint64_t)this))
  {
    objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Creating pixel buffer pool for new configuration"));
    v37 = (re::VideoDefaults *)objc_claimAutoreleasedReturnValue();
    v20 = (re *)re::VideoDefaults::logEnabled(v37);
    if ((_DWORD)v20)
    {
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n                Width: %d"), v17);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n               Height: %d"), v16);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n         Pixel Format: %s (%d)"), "(undefined)", v15);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n      Color Primaries: %s (%d)"), "(undefined)", v14);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n    Transfer Function: %s (%d)"), "(undefined)", v13);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n         YCbCr Matrix: %s (%d)"), "(undefined)", v12);
      v33 = "No";
      if (v11)
        v33 = "Yes";
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n             Extended: %s"), v33);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n           Cache Mode: %d"), a9);
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n            Alignment: %d"), HIDWORD(a9));
      v34 = "No";
      if (a10)
        v34 = "Yes";
      v19 = a10;
      -[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n           Compressed: %s"), v34);
      v20 = (re *)-[re::VideoDefaults appendFormat:](v37, "appendFormat:", CFSTR("\n   Protection Options: %llu"), a11);
    }
    v36 = (re::VideoSimplePixelBufferAllocator *)((char *)this + 40);
    v21 = *re::videoLogObjects(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v35 = v19;
      v22 = v17;
      v23 = v16;
      v16 = v15;
      v24 = v14;
      v25 = v13;
      v26 = v12;
      v12 = v11;
      v27 = objc_retainAutorelease(v37);
      v28 = v21;
      v29 = v27;
      v11 = v12;
      LOBYTE(v12) = v26;
      v13 = v25;
      v14 = v24;
      v15 = v16;
      LODWORD(v16) = v23;
      LODWORD(v17) = v22;
      v19 = v35;
      v30 = -[re::VideoDefaults cStringUsingEncoding:](v29, "cStringUsingEncoding:", 1);
      *(_DWORD *)buf = 136315138;
      v42 = v30;
      _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

    }
    if (*((_QWORD *)this + 6))
      re::VideoPixelBufferPool::deinit(v36);
    re::VideoPixelBufferPool::initInternal(v36, v17, v16, v15, v14, v13, v12, v11, a9, HIDWORD(a9), v19, a11);
    v31 = v39;
    *(_OWORD *)this = v38;
    *((_OWORD *)this + 1) = v31;
    *((_QWORD *)this + 4) = v40;

  }
  return *((_QWORD *)this + 6) != 0;
}

void re::VideoSimplePixelBufferAllocator::createPixelBuffer(re::VideoSimplePixelBufferAllocator *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, re::CoreVideoUtils *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, BOOL a11, unint64_t a12)
{
  *a9 = 0;
  if (re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded(this, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12))
    re::VideoPixelBufferPool::createPixelBuffer((re::VideoSimplePixelBufferAllocator *)((char *)this + 40), a9);
}

BOOL re::VideoPixelBufferPoolConfiguration::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
      && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)
      && *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

void re::VideoHDRProcessor::~VideoHDRProcessor(void **this)
{
  void *v2;

  v2 = *this;
  if (*this)
  {
    *this = 0;

    v2 = *this;
  }

}

BOOL re::VideoHDRProcessor::init(re *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _BOOL8 result;
  NSObject *v11;
  const char *v12;
  re *v13;
  uint64_t *v14;
  NSObject *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  void *v19;
  objc_class *v20;
  uint64_t v21;
  void *v22;
  re *v23;
  NSObject *v24;
  NSObject *v25;
  _DWORD v26[6];
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE buf[24];
  void *v34;
  uint64_t *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a1)
    return 0;
  v26[0] = a2;
  v26[1] = a3;
  v26[3] = a6;
  if (a7 != 2)
  {
    if (a7 == 1)
    {
      v28 = 1;
    }
    else if (!a7)
    {
      v11 = *re::videoLogObjects(a1);
      result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)buf = 0;
        v12 = "Unknown HDR processing type specified.";
LABEL_31:
        v16 = v11;
        v17 = 2;
        goto LABEL_32;
      }
      return result;
    }
    v13 = (re *)re::VideoDefaults::logEnabled(a1);
    if ((_DWORD)v13)
    {
      v24 = *re::videoLogObjects(v13);
      v13 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v13)
      {
        v25 = v24;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "(undefined)";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a5;
        _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "[VideoHDRProcessor]->init :: HDR pixel format: %s (%d)", buf, 0x12u);

      }
    }
    if (!a5)
    {
      v15 = *re::videoLogObjects(v13);
      result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = 0;
        v12 = "Unsupported output pixel format '%llu'.";
        v16 = v15;
        v17 = 12;
LABEL_32:
        _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v12, buf, v17);
        return 0;
      }
      return result;
    }
    v26[4] = a5;
    switch(a4)
    {
      case 1:
        v14 = (uint64_t *)MEMORY[0x24BDC54B8];
        break;
      case 9:
        v14 = (uint64_t *)MEMORY[0x24BDC54B0];
        break;
      case 12:
        v14 = (uint64_t *)MEMORY[0x24BDC54D0];
        break;
      default:
LABEL_27:
        v11 = *re::videoLogObjects(v13);
        result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          v12 = "Target color primaries not supported.";
          goto LABEL_31;
        }
        return result;
    }
    v18 = *v14;
    if (v18)
    {
      v27 = v18;
      v29 = 0;
      v30 = &v29;
      v31 = 0x2050000000;
      v19 = (void *)getHDRProcessorClass(void)::softClass;
      v32 = getHDRProcessorClass(void)::softClass;
      if (!getHDRProcessorClass(void)::softClass)
      {
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL20getHDRProcessorClassv_block_invoke;
        v34 = &unk_24ED8AC58;
        v35 = &v29;
        ___ZL20getHDRProcessorClassv_block_invoke((uint64_t)buf);
        v19 = (void *)v30[3];
      }
      v20 = objc_retainAutorelease(v19);
      _Block_object_dispose(&v29, 8);
      v21 = objc_msgSend([v20 alloc], "initWithConfig:", v26);
      v22 = *(void **)a1;
      *(_QWORD *)a1 = v21;

      if (*(_QWORD *)a1)
        return 1;
      v11 = *re::videoLogObjects(v23);
      result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)buf = 0;
        v12 = "Could not create HDR processor.";
        goto LABEL_31;
      }
      return result;
    }
    goto LABEL_27;
  }
  v11 = *re::videoLogObjects(a1);
  result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    v12 = "GPU HDR processing not implemented.";
    goto LABEL_31;
  }
  return result;
}

void re::VideoHDRProcessor::transformSurfaceCompleteCallback(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t re::VideoHDRProcessor::createConfig(re::VideoDefaults *a1, re *a2, re **a3, unsigned int *a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  re *v22;
  re *v23;
  IOSurfaceRef IOSurface;
  re *v25;
  IOSurfaceRef v26;
  const __CFString *v27;
  void *v28;
  uint64_t v29;
  const __CFString *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v35;
  NSObject *v36;
  re *v37;
  NSObject *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  void *v45;
  double v46;
  uint64_t v47;
  void *v48;
  double v49;
  void *v50;
  double v51;
  void *v52;
  double v53;
  void *v54;
  double v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t *v66;
  void *v67;
  double v68;
  void *v69;
  uint64_t *v70;
  void *v71;
  double v72;
  void *v73;
  void *v74;
  void *v75;
  re **v76;
  void *v77;
  re **v78;
  const void *v79;
  int Value;
  NSObject *v81;
  void *v82;
  uint64_t v83;
  id v84;
  void *v85;
  void *v86;
  char v87;
  NSObject *v88;
  const char *v89;
  NSObject *v90;
  uint32_t v91;
  NSObject *v92;
  NSObject *v93;
  void *v94;
  NSObject *v95;
  id v96;
  NSObject *v97;
  uint64_t v98;
  char *v99;
  re **v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  id v110;
  __IOSurface *v111;
  __IOSurface *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t v117[8];
  re *v118;
  re *v119;
  re *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  re *v124;
  const __CFString *v125;
  __int128 buf;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a1)
  {
    v22 = (re *)re::VideoDefaults::logEnabled(a1);
    if ((_DWORD)v22)
      goto LABEL_123;
    while (1)
    {
      v23 = *(re **)a2;
      if (!*(_QWORD *)a2)
      {
        v31 = *re::videoLogObjects(0);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          return 1;
        LOWORD(buf) = 0;
        v32 = "[VideoHDRProcessor::createConfig]: invalid input pixel buffer.";
        goto LABEL_18;
      }
      if (!*a3)
      {
        v31 = *re::videoLogObjects(v23);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          return 1;
        LOWORD(buf) = 0;
        v32 = "[VideoHDRProcessor::createConfig]: invalid output pixel buffer.";
LABEL_18:
        _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buf, 2u);
        return 1;
      }
      IOSurface = CVPixelBufferGetIOSurface(v23);
      CFRetain(IOSurface);
      v112 = IOSurface;
      v25 = *a3;
      if (!*a3)
      {
        v111 = 0;
        if (IOSurface)
        {
LABEL_22:
          v35 = *re::videoLogObjects(v25);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl(&dword_224FE9000, v35, OS_LOG_TYPE_ERROR, "[VideoHDRProcessor::createConfig]: invalid output IO surface.", (uint8_t *)&buf, 2u);
          }
          v33 = 1;
LABEL_31:
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v112);
          return v33;
        }
        v26 = 0;
LABEL_26:
        v36 = *re::videoLogObjects(v25);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "[VideoHDRProcessor::createConfig]: invalid input IO surface.", (uint8_t *)&buf, 2u);
        }
        IOSurface = 0;
        v33 = 1;
        if (!v26)
          goto LABEL_30;
LABEL_29:
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v111);
        goto LABEL_30;
      }
      v26 = CVPixelBufferGetIOSurface(v25);
      v25 = (re *)CFRetain(v26);
      v111 = v26;
      if (!IOSurface)
        goto LABEL_26;
      if (!v26)
        goto LABEL_22;
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      a3 = (re **)objc_claimAutoreleasedReturnValue();
      v27 = (const __CFString *)getkHDRProcessingDolbyVisionRPUDataKey();
      v28 = (void *)IOSurfaceCopyValue(IOSurface, v27);
      if (IOSurfaceGetPixelFormat(IOSurface) == 1380411457)
      {
LABEL_9:
        v29 = getkHDRProcessingSourceContentTypeHDR10();
        goto LABEL_10;
      }
      v133 = 0;
      v131 = 0u;
      v132 = 0u;
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      buf = 0u;
      re::_IOSurfaceGetBulkAttachments((uint64_t)IOSurface, (uint64_t)&buf);
      if ((_DWORD)v37)
      {
        v38 = *re::videoLogObjects(v37);
        v29 = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v29)
        {
          *(_WORD *)v117 = 0;
          _os_log_error_impl(&dword_224FE9000, v38, OS_LOG_TYPE_ERROR, "Unable to read input surface properties.", v117, 2u);
        }
LABEL_108:
        v81 = *re::videoLogObjects((re *)v29);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_224FE9000, v81, OS_LOG_TYPE_ERROR, "Unable to determine HDR content type of input surface.", (uint8_t *)&buf, 2u);
        }
        v78 = 0;
LABEL_111:

        v82 = *(void **)a1;
        v110 = 0;
        v83 = objc_msgSend(v82, "generateMSRColorConfigWithOperation:inputSurface:outputSurface:metadata:histogram:config:", 3, IOSurface, v26, v78, 0, &v110);
        v84 = v110;
        v85 = v84;
        if (v83 == -17000)
        {
          if (v84)
          {
            CFRetain(v84);
            objc_msgSend(v78, "allKeys");
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v87 = objc_msgSend(v86, "containsObject:", getkHDRProcessingDolbyVisionRPUDataKey());

            re::VideoObject<re::VideoColorTransformBase>::setRef(a5, (const void **)a5, IOSurface);
            re::VideoObject<re::VideoColorTransformBase>::setRef(a5 + 8, (const void **)(a5 + 8), v26);
            v33 = 0;
            *(_QWORD *)(a5 + 24) = v85;
            *(_BYTE *)(a5 + 64) = v87;
            *(_QWORD *)(a5 + 48) = re::VideoHDRProcessor::transformSurfaceCompleteCallback;
            *(_QWORD *)(a5 + 56) = v85;
            goto LABEL_118;
          }
          v92 = *re::videoLogObjects(0);
          if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
LABEL_117:
            v33 = 1;
LABEL_118:

            if (!v26)
            {
LABEL_30:
              if (!IOSurface)
                return v33;
              goto LABEL_31;
            }
            goto LABEL_29;
          }
          LOWORD(buf) = 0;
          v89 = "[VideoHDRProcessor::createConfig]: invalid hardware config.";
          v90 = v92;
          v91 = 2;
        }
        else
        {
          v88 = *re::videoLogObjects((re *)v84);
          if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            goto LABEL_117;
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = v83;
          v89 = "[VideoHDRProcessor::createConfig]: Failed to generate MSR color config with error %ld.";
          v90 = v88;
          v91 = 12;
        }
        _os_log_error_impl(&dword_224FE9000, v90, OS_LOG_TYPE_ERROR, v89, (uint8_t *)&buf, v91);
        goto LABEL_117;
      }
      if (v28 && (BYTE12(v129) & 0xFD) == 0x10)
        break;
      if (BYTE12(v129) == 18)
      {
        v29 = getkHDRProcessingSourceContentTypeHLG();
LABEL_10:
        v30 = (const __CFString *)v29;
        if (!v29)
          goto LABEL_108;
        goto LABEL_36;
      }
      if (BYTE12(v129) == 16 && BYTE11(v129) <= 0xCu && ((1 << SBYTE11(v129)) & 0x1202) != 0)
        goto LABEL_9;
      v29 = (uint64_t)IOSurfaceCopyValue(IOSurface, CFSTR("isHLG"));
      if (!v29)
        goto LABEL_108;
      v79 = (const void *)v29;
      v103 = v28;
      Value = CFBooleanGetValue((CFBooleanRef)v29);
      CFRelease(v79);
      if (Value)
      {
        v29 = getkHDRProcessingSourceContentTypeHLG();
        v30 = (const __CFString *)v29;
      }
      else
      {
        v30 = 0;
      }
      v28 = v103;
      if (!v30)
        goto LABEL_108;
LABEL_36:
      if (re::VideoDefaults::logEnabled((re::VideoDefaults *)v29))
      {
        objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("HDR Processing Parameters"));
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "appendFormat:", CFSTR("\n                 Source Content Type: %s"), CFStringGetCStringPtr(v30, 0x8000100u));
        objc_msgSend(v94, "appendFormat:", CFSTR("\n                       Max EDR Value: %f"), a6);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n                      Max EDR Factor: %f"), a7);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n                    Current Max Nits: %f"), a8);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n                        Minimum Nits: %f"), a9);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n               Ambient Light in Nits: %f"), a10);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n          SDR Max Brightness in Nits: %f"), a11);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n     Display Diagonal Size in Inches: %d"), *a4);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n      Display Max Brightness in Nits: %d"), a4[1]);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n  Display Average Brightness in Nits: %d"), a4[2]);
        objc_msgSend(v94, "appendFormat:", CFSTR("\n  Display Minimum Brightness in Nits: %f"), *((float *)a4 + 3));
        v95 = *re::videoLogObjects((re *)objc_msgSend(v94, "appendFormat:", CFSTR("\n              Display Contrast Ratio: %f"), *((float *)a4 + 4)));
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          v96 = objc_retainAutorelease(v94);
          v97 = v95;
          v98 = objc_msgSend(v96, "cStringUsingEncoding:", 1);
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v98;
          _os_log_impl(&dword_224FE9000, v97, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);

        }
      }
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      *(_QWORD *)&v127 = 0x2020000000;
      a2 = (re *)_MergedGlobals_498;
      *((_QWORD *)&v127 + 1) = _MergedGlobals_498;
      if (!_MergedGlobals_498)
      {
        v39 = (void *)HDRProcessingLibrary();
        a2 = (re *)dlsym(v39, "kHDRProcessingDisplayPipelineCompensationTypeNone");
        *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
        _MergedGlobals_498 = (uint64_t)a2;
      }
      _Block_object_dispose(&buf, 8);
      if (a2)
      {
        a2 = *(re **)a2;
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        *(_QWORD *)&v127 = 0x2020000000;
        v40 = (_QWORD *)qword_254123A30;
        *((_QWORD *)&v127 + 1) = qword_254123A30;
        if (!qword_254123A30)
        {
          v41 = (void *)HDRProcessingLibrary();
          v40 = dlsym(v41, "kHDRProcessingDisplayPipelineCompensationType");
          *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = v40;
          qword_254123A30 = (uint64_t)v40;
        }
        _Block_object_dispose(&buf, 8);
        if (v40)
        {
          objc_msgSend(a3, "setValue:forKey:", a2, *v40);
          v42 = getkHDRProcessingSourceContentTypeDolbyVision();
          if (v28 && v30 == (const __CFString *)v42)
            objc_msgSend(a3, "setValue:forKey:", v28, getkHDRProcessingDolbyVisionRPUDataKey());
          *(float *)&v43 = a11;
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v43, v99);
          v44 = objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&buf = 0;
          *((_QWORD *)&buf + 1) = &buf;
          *(_QWORD *)&v127 = 0x2020000000;
          a2 = (re *)qword_254123A38;
          *((_QWORD *)&v127 + 1) = qword_254123A38;
          if (!qword_254123A38)
          {
            v45 = (void *)HDRProcessingLibrary();
            a2 = (re *)dlsym(v45, "kHDRProcessingSourceContentSDRMaxBrightnessInNitsKey");
            *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
            qword_254123A38 = (uint64_t)a2;
          }
          _Block_object_dispose(&buf, 8);
          if (a2)
          {
            objc_msgSend(a3, "setValue:forKey:", v44, *(_QWORD *)a2);
            *(float *)&v46 = a6;
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v46);
            v47 = objc_claimAutoreleasedReturnValue();
            *(_QWORD *)&buf = 0;
            *((_QWORD *)&buf + 1) = &buf;
            *(_QWORD *)&v127 = 0x2020000000;
            a2 = (re *)qword_254123A40;
            *((_QWORD *)&v127 + 1) = qword_254123A40;
            if (!qword_254123A40)
            {
              v48 = (void *)HDRProcessingLibrary();
              a2 = (re *)dlsym(v48, "kHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKey");
              *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
              qword_254123A40 = (uint64_t)a2;
            }
            _Block_object_dispose(&buf, 8);
            if (a2)
            {
              objc_msgSend(a3, "setValue:forKey:", v47, *(_QWORD *)a2);
              *(float *)&v49 = a7;
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v49);
              v109 = (void *)objc_claimAutoreleasedReturnValue();
              *(_QWORD *)&buf = 0;
              *((_QWORD *)&buf + 1) = &buf;
              *(_QWORD *)&v127 = 0x2020000000;
              a2 = (re *)qword_254123A48;
              *((_QWORD *)&v127 + 1) = qword_254123A48;
              if (!qword_254123A48)
              {
                v50 = (void *)HDRProcessingLibrary();
                a2 = (re *)dlsym(v50, "kHDRProcessingEDRFactorKey");
                *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                qword_254123A48 = (uint64_t)a2;
              }
              _Block_object_dispose(&buf, 8);
              if (a2)
              {
                objc_msgSend(a3, "setValue:forKey:", v109, *(_QWORD *)a2);
                *(float *)&v51 = a6 * a8;
                objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v51);
                v108 = (void *)objc_claimAutoreleasedReturnValue();
                *(_QWORD *)&buf = 0;
                *((_QWORD *)&buf + 1) = &buf;
                *(_QWORD *)&v127 = 0x2020000000;
                a2 = (re *)qword_254123A50;
                *((_QWORD *)&v127 + 1) = qword_254123A50;
                if (!qword_254123A50)
                {
                  v52 = (void *)HDRProcessingLibrary();
                  a2 = (re *)dlsym(v52, "kHDRProcessingCurrentMaxPanelNitsKey");
                  *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                  qword_254123A50 = (uint64_t)a2;
                }
                _Block_object_dispose(&buf, 8);
                if (a2)
                {
                  objc_msgSend(a3, "setValue:forKey:", v108, *(_QWORD *)a2);
                  *(float *)&v53 = a9;
                  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v53);
                  v107 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_QWORD *)&buf = 0;
                  *((_QWORD *)&buf + 1) = &buf;
                  *(_QWORD *)&v127 = 0x2020000000;
                  a2 = (re *)qword_254123A58;
                  *((_QWORD *)&v127 + 1) = qword_254123A58;
                  if (!qword_254123A58)
                  {
                    v54 = (void *)HDRProcessingLibrary();
                    a2 = (re *)dlsym(v54, "kHDRProcessingCurrentMinPanelNitsKey");
                    *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                    qword_254123A58 = (uint64_t)a2;
                  }
                  _Block_object_dispose(&buf, 8);
                  if (a2)
                  {
                    objc_msgSend(a3, "setValue:forKey:", v107, *(_QWORD *)a2);
                    *(float *)&v55 = a10;
                    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v55);
                    v106 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_QWORD *)&buf = 0;
                    *((_QWORD *)&buf + 1) = &buf;
                    *(_QWORD *)&v127 = 0x2020000000;
                    a2 = (re *)qword_254123A60;
                    *((_QWORD *)&v127 + 1) = qword_254123A60;
                    if (!qword_254123A60)
                    {
                      v56 = (void *)HDRProcessingLibrary();
                      a2 = (re *)dlsym(v56, "kHDRProcessingAmbientLightInNitsKey");
                      *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                      qword_254123A60 = (uint64_t)a2;
                    }
                    _Block_object_dispose(&buf, 8);
                    if (a2)
                    {
                      objc_msgSend(a3, "setValue:forKey:", v106, *(_QWORD *)a2);
                      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *((unsigned __int8 *)a4 + 20));
                      v105 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_QWORD *)&buf = 0;
                      *((_QWORD *)&buf + 1) = &buf;
                      *(_QWORD *)&v127 = 0x2020000000;
                      a2 = (re *)qword_254123A68;
                      *((_QWORD *)&v127 + 1) = qword_254123A68;
                      if (!qword_254123A68)
                      {
                        v57 = (void *)HDRProcessingLibrary();
                        a2 = (re *)dlsym(v57, "kHDRProcessingDisplayAdjustsBlackLevelKey");
                        *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                        qword_254123A68 = (uint64_t)a2;
                      }
                      _Block_object_dispose(&buf, 8);
                      if (a2)
                      {
                        objc_msgSend(a3, "setValue:forKey:", v105, *(_QWORD *)a2);
                        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 0);
                        v104 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_QWORD *)&buf = 0;
                        *((_QWORD *)&buf + 1) = &buf;
                        *(_QWORD *)&v127 = 0x2020000000;
                        a2 = (re *)qword_254123A70;
                        *((_QWORD *)&v127 + 1) = qword_254123A70;
                        if (!qword_254123A70)
                        {
                          v58 = (void *)HDRProcessingLibrary();
                          a2 = (re *)dlsym(v58, "kHDRProcessingOrientationKey");
                          *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                          qword_254123A70 = (uint64_t)a2;
                        }
                        _Block_object_dispose(&buf, 8);
                        if (a2)
                        {
                          objc_msgSend(a3, "setValue:forKey:", v104, *(_QWORD *)a2);
                          *(_QWORD *)&buf = 0;
                          *((_QWORD *)&buf + 1) = &buf;
                          *(_QWORD *)&v127 = 0x2020000000;
                          a2 = (re *)qword_254123A78;
                          *((_QWORD *)&v127 + 1) = qword_254123A78;
                          if (!qword_254123A78)
                          {
                            v59 = (void *)HDRProcessingLibrary();
                            a2 = (re *)dlsym(v59, "kHDRProcessingSourceContentTypeKey");
                            *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = a2;
                            qword_254123A78 = (uint64_t)a2;
                          }
                          _Block_object_dispose(&buf, 8);
                          if (a2)
                          {
                            v124 = *(re **)a2;
                            v125 = v30;
                            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v125, &v124, 1);
                            v60 = objc_claimAutoreleasedReturnValue();
                            *(_QWORD *)v117 = getkHDRProcessingDestinationDisplayTypeKey();
                            *(_QWORD *)&buf = getkHDRProcessingDestinationDisplayTypeInternalPanel();
                            v113 = 0;
                            v114 = &v113;
                            v115 = 0x2020000000;
                            a2 = (re *)qword_254123A80;
                            v116 = qword_254123A80;
                            if (!qword_254123A80)
                            {
                              v61 = (void *)HDRProcessingLibrary();
                              a2 = (re *)dlsym(v61, "kHDRProcessingDisplayDiagonalSizeInInchesKey");
                              v114[3] = (uint64_t)a2;
                              qword_254123A80 = (uint64_t)a2;
                            }
                            v102 = (void *)v47;
                            _Block_object_dispose(&v113, 8);
                            if (a2)
                            {
                              v101 = (void *)v44;
                              v118 = *(re **)a2;
                              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *a4);
                              v62 = (void *)objc_claimAutoreleasedReturnValue();
                              *((_QWORD *)&buf + 1) = v62;
                              v113 = 0;
                              v114 = &v113;
                              v115 = 0x2020000000;
                              a2 = (re *)qword_254123A88;
                              v116 = qword_254123A88;
                              if (!qword_254123A88)
                              {
                                v63 = (void *)HDRProcessingLibrary();
                                a2 = (re *)dlsym(v63, "kHDRProcessingDisplayMaximumBrightnessInNitsKey");
                                v114[3] = (uint64_t)a2;
                                qword_254123A88 = (uint64_t)a2;
                              }
                              _Block_object_dispose(&v113, 8);
                              if (a2)
                              {
                                v119 = *(re **)a2;
                                objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a4[1]);
                                v64 = (void *)objc_claimAutoreleasedReturnValue();
                                *(_QWORD *)&v127 = v64;
                                v113 = 0;
                                v114 = &v113;
                                v115 = 0x2020000000;
                                a2 = (re *)qword_254123A90;
                                v116 = qword_254123A90;
                                if (!qword_254123A90)
                                {
                                  v65 = (void *)HDRProcessingLibrary();
                                  a2 = (re *)dlsym(v65, "kHDRProcessingDisplayAverageBrightnessInNitsKey");
                                  v114[3] = (uint64_t)a2;
                                  qword_254123A90 = (uint64_t)a2;
                                }
                                _Block_object_dispose(&v113, 8);
                                if (a2)
                                {
                                  v100 = a3;
                                  v120 = *(re **)a2;
                                  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a4[2]);
                                  a2 = (re *)objc_claimAutoreleasedReturnValue();
                                  *((_QWORD *)&v127 + 1) = a2;
                                  v113 = 0;
                                  v114 = &v113;
                                  v115 = 0x2020000000;
                                  v66 = (uint64_t *)qword_254123A98;
                                  v116 = qword_254123A98;
                                  if (!qword_254123A98)
                                  {
                                    v67 = (void *)HDRProcessingLibrary();
                                    v66 = (uint64_t *)dlsym(v67, "kHDRProcessingDisplayMinimumBrightnessInNitsKey");
                                    v114[3] = (uint64_t)v66;
                                    qword_254123A98 = (uint64_t)v66;
                                  }
                                  a3 = (re **)v60;
                                  _Block_object_dispose(&v113, 8);
                                  if (v66)
                                  {
                                    v121 = *v66;
                                    LODWORD(v68) = a4[3];
                                    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v68);
                                    v69 = (void *)objc_claimAutoreleasedReturnValue();
                                    *(_QWORD *)&v128 = v69;
                                    v113 = 0;
                                    v114 = &v113;
                                    v115 = 0x2020000000;
                                    v70 = (uint64_t *)qword_254123AA0;
                                    v116 = qword_254123AA0;
                                    if (!qword_254123AA0)
                                    {
                                      v71 = (void *)HDRProcessingLibrary();
                                      v70 = (uint64_t *)dlsym(v71, "kHDRProcessingDisplayContrastRatioKey");
                                      v114[3] = (uint64_t)v70;
                                      qword_254123AA0 = (uint64_t)v70;
                                    }
                                    _Block_object_dispose(&v113, 8);
                                    if (v70)
                                    {
                                      v122 = *v70;
                                      LODWORD(v72) = a4[4];
                                      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v72);
                                      v73 = (void *)objc_claimAutoreleasedReturnValue();
                                      *((_QWORD *)&v128 + 1) = v73;
                                      v123 = getkHDRProcessingDestinationDisplayTypeKey();
                                      *(_QWORD *)&v129 = getkHDRProcessingDestinationDisplayTypeInternalPanel();
                                      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &buf, v117, 7);
                                      v74 = (void *)objc_claimAutoreleasedReturnValue();

                                      v113 = 0;
                                      v114 = &v113;
                                      v115 = 0x2020000000;
                                      a2 = (re *)qword_254123AA8;
                                      v116 = qword_254123AA8;
                                      if (!qword_254123AA8)
                                      {
                                        v75 = (void *)HDRProcessingLibrary();
                                        a2 = (re *)dlsym(v75, "kHDRProcessingDisplayKey");
                                        v114[3] = (uint64_t)a2;
                                        qword_254123AA8 = (uint64_t)a2;
                                      }
                                      a4 = (unsigned int *)&v113;
                                      _Block_object_dispose(&v113, 8);
                                      if (a2)
                                      {
                                        v76 = a3;
                                        a3 = v100;
                                        objc_msgSend(v100, "setValue:forKey:", v74, *(_QWORD *)a2);
                                        v113 = 0;
                                        v114 = &v113;
                                        v115 = 0x2020000000;
                                        a4 = (unsigned int *)&qword_254123000;
                                        a2 = (re *)qword_254123AB0;
                                        v116 = qword_254123AB0;
                                        if (!qword_254123AB0)
                                        {
                                          v77 = (void *)HDRProcessingLibrary();
                                          a2 = (re *)dlsym(v77, "kHDRProcessingSourceContentKey");
                                          v114[3] = (uint64_t)a2;
                                          qword_254123AB0 = (uint64_t)a2;
                                        }
                                        _Block_object_dispose(&v113, 8);
                                        if (a2)
                                        {
                                          objc_msgSend(v100, "setValue:forKey:", v76, *(_QWORD *)a2);
                                          v78 = v100;

                                          v26 = v111;
                                          IOSurface = v112;
                                          goto LABEL_111;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v99 = dlerror();
      v22 = (re *)abort_report_np();
LABEL_123:
      v93 = *re::videoLogObjects(v22);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_224FE9000, v93, OS_LOG_TYPE_DEFAULT, "Using Legacy HDRProcessing SPI", (uint8_t *)&buf, 2u);
      }
    }
    v29 = getkHDRProcessingSourceContentTypeDolbyVision();
    goto LABEL_10;
  }
  v31 = *re::videoLogObjects(a1);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    v32 = "VideoHDRProcessor is not initialized.";
    goto LABEL_18;
  }
  return 1;
}

Class getkHDRProcessingDolbyVisionRPUDataKey(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr;
  v7 = getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr;
  if (!getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr)
  {
    v1 = (void *)HDRProcessingLibrary();
    v0 = dlsym(v1, "kHDRProcessingDolbyVisionRPUDataKey");
    v5[3] = (uint64_t)v0;
    getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(Class *)v0;
  dlerror();
  v3 = abort_report_np();
  return ___ZL20getHDRProcessorClassv_block_invoke(v3);
}

Class ___ZL20getHDRProcessorClassv_block_invoke(uint64_t a1)
{
  Class result;

  HDRProcessingLibrary();
  result = objc_getClass("HDRProcessor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getHDRProcessorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)HDRProcessingLibrary();
  }
  return result;
}

uint64_t HDRProcessingLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (HDRProcessingLibraryCore(char **)::frameworkLibrary)
    return HDRProcessingLibraryCore(char **)::frameworkLibrary;
  HDRProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = HDRProcessingLibraryCore(char **)::frameworkLibrary;
  if (!HDRProcessingLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t getkHDRProcessingSourceContentTypeDolbyVision(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr;
  v6 = getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr;
  if (!getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr)
  {
    v1 = (void *)HDRProcessingLibrary();
    v0 = dlsym(v1, "kHDRProcessingSourceContentTypeDolbyVision");
    v4[3] = (uint64_t)v0;
    getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (v0)
    return *(_QWORD *)v0;
  dlerror();
  abort_report_np();
  return getkHDRProcessingDestinationDisplayTypeKey();
}

uint64_t getkHDRProcessingDestinationDisplayTypeKey(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr;
  v6 = getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr;
  if (!getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr)
  {
    v1 = (void *)HDRProcessingLibrary();
    v0 = dlsym(v1, "kHDRProcessingDestinationDisplayTypeKey");
    v4[3] = (uint64_t)v0;
    getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (v0)
    return *(_QWORD *)v0;
  dlerror();
  abort_report_np();
  return getkHDRProcessingDestinationDisplayTypeInternalPanel();
}

uint64_t getkHDRProcessingDestinationDisplayTypeInternalPanel(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr;
  v6 = getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr;
  if (!getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr)
  {
    v1 = (void *)HDRProcessingLibrary();
    v0 = dlsym(v1, "kHDRProcessingDestinationDisplayTypeInternalPanel");
    v4[3] = (uint64_t)v0;
    getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (v0)
    return *(_QWORD *)v0;
  dlerror();
  abort_report_np();
  return getkHDRProcessingSourceContentTypeHDR10();
}

uint64_t getkHDRProcessingSourceContentTypeHDR10(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr;
  v6 = getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr;
  if (!getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr)
  {
    v1 = (void *)HDRProcessingLibrary();
    v0 = dlsym(v1, "kHDRProcessingSourceContentTypeHDR10");
    v4[3] = (uint64_t)v0;
    getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (v0)
    return *(_QWORD *)v0;
  dlerror();
  abort_report_np();
  return getkHDRProcessingSourceContentTypeHLG();
}

uint64_t getkHDRProcessingSourceContentTypeHLG(void)
{
  void *v0;
  void *v1;
  const __CFDictionary **v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v0 = (void *)getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr;
  v9 = getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr;
  if (!getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr)
  {
    v1 = (void *)HDRProcessingLibrary();
    v0 = dlsym(v1, "kHDRProcessingSourceContentTypeHLG");
    v7[3] = (uint64_t)v0;
    getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
    return *(_QWORD *)v0;
  dlerror();
  v3 = (const __CFDictionary **)abort_report_np();
  return re::VideoPixelFormatDescriptionBase::BOOLeanValue(v3, v4, v5);
}

BOOL re::VideoPixelFormatDescriptionBase::BOOLeanValue(const __CFDictionary **this, const __CFString *a2, uint64_t a3)
{
  const __CFDictionary *v4;
  const __CFBoolean *Value;

  v4 = *this;
  if (v4)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(v4, a2);
    if (Value)
      return CFBooleanGetValue(Value) != 0;
  }
  return a3;
}

void re::VideoColorManager::~VideoColorManager(re::VideoColorManager *this)
{
  re::VideoColorManager::clear(this);
  re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58);
  re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this);
}

double re::VideoColorManager::clear(re::VideoColorManager *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  const void *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  const void *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  double result;

  v2 = *((unsigned int *)this + 32);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 14) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 10;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 == (_DWORD)v3)
  {
    v6 = *((_DWORD *)this + 32);
  }
  else
  {
    v7 = v3;
    v6 = *((_DWORD *)this + 32);
    do
    {
      v8 = *(const void **)(*((_QWORD *)this + 14) + 40 * v7 + 32);
      if (v8)
      {
        CFRelease(v8);
        v6 = *((_DWORD *)this + 32);
      }
      if (v6 <= (int)v3 + 1)
        v9 = v3 + 1;
      else
        v9 = v6;
      while (1)
      {
        v7 = (v3 + 1);
        if (v9 - 1 == (_DWORD)v3)
          break;
        LODWORD(v3) = v3 + 1;
        v10 = v7;
        if ((*(_DWORD *)(*((_QWORD *)this + 14) + 40 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_19;
      }
      v10 = v9;
LABEL_19:
      LODWORD(v3) = v10;
    }
    while ((_DWORD)v2 != v10);
  }
  if (*((_DWORD *)this + 31))
  {
    v11 = *((unsigned int *)this + 30);
    if ((_DWORD)v11)
    {
      memset_pattern16(*((void **)this + 13), &unk_2260EB7B0, 4 * v11);
      v6 = *((_DWORD *)this + 32);
    }
    if (v6)
    {
      v12 = 0;
      v13 = 40 * v6;
      do
      {
        v14 = *((_QWORD *)this + 14) + v12;
        v15 = *(_DWORD *)(v14 + 8);
        if (v15 < 0)
          *(_DWORD *)(v14 + 8) = v15 & 0x7FFFFFFF;
        v12 += 40;
      }
      while (v13 != v12);
    }
    *((_DWORD *)this + 31) = 0;
    *((_DWORD *)this + 32) = 0;
    v16 = *((_DWORD *)this + 34) + 1;
    *((_DWORD *)this + 33) = 0x7FFFFFFF;
    *((_DWORD *)this + 34) = v16;
  }
  v17 = *((unsigned int *)this + 20);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = (int *)(*((_QWORD *)this + 8) + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 6;
      if (v20 < 0)
        break;
      if (v17 == ++v18)
      {
        LODWORD(v18) = *((_DWORD *)this + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v18) = 0;
  }
  if ((_DWORD)v17 == (_DWORD)v18)
  {
    v21 = *((_DWORD *)this + 20);
  }
  else
  {
    v22 = v18;
    v21 = *((_DWORD *)this + 20);
    do
    {
      v23 = *(const void **)(*((_QWORD *)this + 8) + 24 * v22 + 16);
      if (v23)
      {
        CFRelease(v23);
        v21 = *((_DWORD *)this + 20);
      }
      if (v21 <= (int)v18 + 1)
        v24 = v18 + 1;
      else
        v24 = v21;
      while (1)
      {
        v22 = (v18 + 1);
        if (v24 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        v25 = v22;
        if ((*(_DWORD *)(*((_QWORD *)this + 8) + 24 * v22 + 8) & 0x80000000) != 0)
          goto LABEL_47;
      }
      v25 = v24;
LABEL_47:
      LODWORD(v18) = v25;
    }
    while ((_DWORD)v17 != v25);
  }
  if (*((_DWORD *)this + 19))
  {
    v26 = *((unsigned int *)this + 18);
    if ((_DWORD)v26)
    {
      memset_pattern16(*((void **)this + 7), &unk_2260EB7B0, 4 * v26);
      v21 = *((_DWORD *)this + 20);
    }
    if (v21)
    {
      v27 = 0;
      v28 = 24 * v21;
      do
      {
        v29 = *((_QWORD *)this + 8) + v27;
        v30 = *(_DWORD *)(v29 + 8);
        if (v30 < 0)
          *(_DWORD *)(v29 + 8) = v30 & 0x7FFFFFFF;
        v27 += 24;
      }
      while (v28 != v27);
    }
    *((_DWORD *)this + 19) = 0;
    *((_DWORD *)this + 20) = 0;
    v31 = *((_DWORD *)this + 22) + 1;
    *((_DWORD *)this + 21) = 0x7FFFFFFF;
    *((_DWORD *)this + 22) = v31;
  }
  v32 = *((unsigned int *)this + 8);
  if ((_DWORD)v32)
  {
    v33 = 0;
    v34 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v35 = *v34;
      v34 += 6;
      if (v35 < 0)
        break;
      if (v32 == ++v33)
      {
        LODWORD(v33) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if ((_DWORD)v32 == (_DWORD)v33)
  {
    v36 = *((_DWORD *)this + 8);
  }
  else
  {
    v37 = v33;
    v36 = *((_DWORD *)this + 8);
    do
    {
      v38 = *(const void **)(*((_QWORD *)this + 2) + 24 * v37 + 16);
      if (v38)
      {
        CFRelease(v38);
        v36 = *((_DWORD *)this + 8);
      }
      if (v36 <= (int)v33 + 1)
        v39 = v33 + 1;
      else
        v39 = v36;
      while (1)
      {
        v37 = (v33 + 1);
        if (v39 - 1 == (_DWORD)v33)
          break;
        LODWORD(v33) = v33 + 1;
        v40 = v37;
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24 * v37 + 8) & 0x80000000) != 0)
          goto LABEL_75;
      }
      v40 = v39;
LABEL_75:
      LODWORD(v33) = v40;
    }
    while ((_DWORD)v32 != v40);
  }
  if (*((_DWORD *)this + 7))
  {
    v41 = *((unsigned int *)this + 6);
    if ((_DWORD)v41)
    {
      memset_pattern16(*((void **)this + 1), &unk_2260EB7B0, 4 * v41);
      v36 = *((_DWORD *)this + 8);
    }
    if (v36)
    {
      v42 = 0;
      v43 = 24 * v36;
      do
      {
        v44 = *((_QWORD *)this + 2) + v42;
        v45 = *(_DWORD *)(v44 + 8);
        if (v45 < 0)
          *(_DWORD *)(v44 + 8) = v45 & 0x7FFFFFFF;
        v42 += 24;
      }
      while (v43 != v42);
    }
    *((_DWORD *)this + 7) = 0;
    *((_DWORD *)this + 8) = 0;
    v46 = *((_DWORD *)this + 10) + 1;
    *((_DWORD *)this + 9) = 0x7FFFFFFF;
    *((_DWORD *)this + 10) = v46;
  }
  if (*((_DWORD *)this + 43))
  {
    v47 = *((unsigned int *)this + 42);
    if ((_DWORD)v47)
      memset_pattern16(*((void **)this + 19), &unk_2260EB7B0, 4 * v47);
    if (*((_DWORD *)this + 44))
    {
      v48 = 0;
      v49 = 0;
      do
      {
        re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(*((_QWORD *)this + 20) + v48);
        ++v49;
        v48 += 40;
      }
      while (v49 < *((unsigned int *)this + 44));
    }
    *((_DWORD *)this + 43) = 0;
    *((_DWORD *)this + 44) = 0;
    v50 = *((_DWORD *)this + 46) + 1;
    *((_DWORD *)this + 45) = 0x7FFFFFFF;
    *((_DWORD *)this + 46) = v50;
  }
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  if (*((_DWORD *)this + 123))
  {
    v51 = *((unsigned int *)this + 122);
    if ((_DWORD)v51)
      memset_pattern16(*((void **)this + 59), &unk_2260EB7B0, 4 * v51);
    if (*((_DWORD *)this + 124))
    {
      v52 = 0;
      v53 = 0;
      do
      {
        re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(*((_QWORD *)this + 60) + v52);
        ++v53;
        v52 += 72;
      }
      while (v53 < *((unsigned int *)this + 124));
    }
    *((_DWORD *)this + 125) = 0x7FFFFFFF;
    *(_QWORD *)((char *)this + 492) = 0;
    ++*((_DWORD *)this + 126);
  }
  result = 0.0;
  *((_OWORD *)this + 160) = 0u;
  return result;
}

uint64_t re::VideoColorManager::computeTransform(uint64_t a1, __CVBuffer **a2, unsigned __int8 a3, const void **a4)
{
  CGColorSpace *v7;
  const __CFData *v8;

  v7 = re::VideoColorManager::colorSyncProfileForPixelBuffer(a1, a2);
  v8 = re::VideoColorManager::colorSyncProfileForColorGamut(a1, a3);
  return re::VideoColorManager::computeTransform(a1, v7, v8, a4);
}

CGColorSpace *re::VideoColorManager::colorSyncProfileForPixelBuffer(uint64_t a1, __CVBuffer **this)
{
  uint64_t v4;
  uint64_t v5;
  CGColorSpace *result;
  CGColorSpace *v7;
  const __CFData *v8;
  const __CFData *v9;
  ColorSyncProfileRef v10;
  __int16 v11;
  char v12;

  v4 = re::VideoPixelBufferBase::colorTags(this);
  v11 = v4;
  v12 = BYTE2(v4);
  v5 = re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::tryGet(a1, (unsigned __int8 *)&v11);
  if (v5)
    return *(CGColorSpace **)v5;
  result = re::VideoPixelBufferBase::colorSpace(this);
  if (result)
  {
    v7 = result;
    v8 = CGColorSpaceCopyICCData(result);
    if (v8)
    {
      v9 = v8;
      v10 = ColorSyncProfileCreate(v8, 0);
      CFRelease(v9);
      CFRelease(v7);
      if (v10)
      {
        re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::addNew<ColorSyncProfile const*&>(a1, (unsigned __int8 *)&v11, &v10);
        return v10;
      }
    }
    else
    {
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

const __CFData *re::VideoColorManager::colorSyncProfileForColorGamut(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  const __CFData *result;
  CGColorSpace *CGColorSpaceFromWorkingColorGamut;
  const __CFData *v6;
  ColorSyncProfileRef v7;
  unsigned __int8 v8;

  v8 = a2;
  v2 = a1 + 48;
  v3 = re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::tryGet(a1 + 48, &v8);
  if (v3)
    return *(const __CFData **)v3;
  CGColorSpaceFromWorkingColorGamut = (CGColorSpace *)re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(v8);
  result = CGColorSpaceCopyICCData(CGColorSpaceFromWorkingColorGamut);
  if (result)
  {
    v6 = result;
    v7 = ColorSyncProfileCreate(result, 0);
    CFRelease(v6);
    if (v7)
    {
      re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::addNew<ColorSyncProfile const*&>(v2, &v8, &v7);
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::VideoColorManager::computeTransform(uint64_t a1, const void *a2, const void *a3, const void **a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  const void **v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void *v19;
  __CFDictionary *v20;
  __CFArray *v21;
  ColorSyncTransformRef v22;
  ColorSyncTransformRef v23;
  const void *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  re *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  unint64_t v36;
  const void **v37;
  uint8_t buf[16];
  __int128 v39;

  result = 1;
  if (!a2 || !a3)
    return result;
  *(_QWORD *)&v39 = a2;
  *((_QWORD *)&v39 + 1) = a3;
  v9 = re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)&v39);
  if (!*(_QWORD *)(a1 + 96)
    || (v10 = *(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * (v9 % *(unsigned int *)(a1 + 120))),
        (_DWORD)v10 == 0x7FFFFFFF))
  {
LABEL_8:
    v37 = a4;
    v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 4, 0, 0);
    v15 = (const void **)MEMORY[0x24BDB9370];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDB9370], a2);
    v16 = (const void **)MEMORY[0x24BDB9378];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDB9378], (const void *)*MEMORY[0x24BDB9388]);
    v17 = (const void **)MEMORY[0x24BDB93D0];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDB93D0], (const void *)*MEMORY[0x24BDB93B0]);
    v18 = (const void **)MEMORY[0x24BDB92E0];
    v19 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDB92E0], (const void *)*MEMORY[0x24BDBD268]);
    v20 = CFDictionaryCreateMutable(v13, 4, 0, 0);
    CFDictionaryAddValue(v20, *v15, a3);
    CFDictionaryAddValue(v20, *v16, (const void *)*MEMORY[0x24BDB9390]);
    CFDictionaryAddValue(v20, *v17, (const void *)*MEMORY[0x24BDB93C0]);
    CFDictionaryAddValue(v20, *v18, v19);
    v21 = CFArrayCreateMutable(0, 2, 0);
    CFArraySetValueAtIndex(v21, 0, Mutable);
    CFArraySetValueAtIndex(v21, 1, v20);
    v22 = ColorSyncTransformCreate(v21, 0);
    if (!v22)
    {
      v30 = (re *)re::VideoDefaults::logEnabled(0);
      if ((_DWORD)v30)
      {
        v35 = *re::videoLogObjects(v30);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "[VideoColorManager::computeTransform]: color transformation failed to create", buf, 2u);
        }
      }
      v24 = 0;
LABEL_28:
      a4 = v37;
      CFRelease(v21);
      CFRelease(Mutable);
      CFRelease(v20);
      if (!v24)
        return 1;
      goto LABEL_29;
    }
    v23 = v22;
    v24 = (const void *)MEMORY[0x227691288](v22, *MEMORY[0x24BDB93B8], 0);
    if (v24)
    {
      v25 = re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)&v39);
      v26 = a1 + 96;
      if (*(_QWORD *)(a1 + 96))
      {
        v27 = v25 % *(unsigned int *)(a1 + 120);
        v28 = *(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * v27);
        if ((_DWORD)v28 != 0x7FFFFFFF)
        {
          v36 = v25 % *(unsigned int *)(a1 + 120);
          v29 = *(_QWORD *)(a1 + 112);
          while ((re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)(v29 + 40 * v28 + 16), (CFTypeRef *)&v39) & 1) == 0)
          {
            v29 = *(_QWORD *)(a1 + 112);
            v28 = *(_DWORD *)(v29 + 40 * v28 + 8) & 0x7FFFFFFF;
            if (v28 == 0x7FFFFFFF)
            {
              LODWORD(v27) = v36;
              v26 = a1 + 96;
              goto LABEL_21;
            }
          }
          goto LABEL_27;
        }
      }
      else
      {
        LODWORD(v27) = 0;
      }
LABEL_21:
      v31 = *(unsigned int *)(a1 + 132);
      if ((_DWORD)v31 == 0x7FFFFFFF)
      {
        v31 = *(unsigned int *)(a1 + 128);
        v32 = v31;
        if ((_DWORD)v31 == *(_DWORD *)(a1 + 120))
        {
          re::HashTable<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>,__CFArray const*,re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,true,false>::setCapacity(v26, 2 * *(_DWORD *)(a1 + 124));
          LODWORD(v27) = v25 % *(unsigned int *)(a1 + 120);
          v32 = *(_DWORD *)(a1 + 128);
        }
        *(_DWORD *)(a1 + 128) = v32 + 1;
        v33 = *(_QWORD *)(a1 + 112);
        v34 = *(_DWORD *)(v33 + 40 * v31 + 8);
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 112);
        v34 = *(_DWORD *)(v33 + 40 * v31 + 8);
        *(_DWORD *)(a1 + 132) = v34 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v33 + 40 * v31 + 8) = v34 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a1 + 112) + 40 * v31 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 40 * v31 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v27);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 40 * v31) = v25;
      *(_OWORD *)(*(_QWORD *)(a1 + 112) + 40 * v31 + 16) = v39;
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 40 * v31 + 32) = v24;
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v27) = v31;
      ++*(_DWORD *)(a1 + 124);
      ++*(_DWORD *)(a1 + 136);
    }
LABEL_27:
    CFRelease(v23);
    goto LABEL_28;
  }
  v11 = *(_QWORD *)(a1 + 112);
  while (1)
  {
    v12 = re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)(v11 + 40 * v10 + 16), (CFTypeRef *)&v39);
    v11 = *(_QWORD *)(a1 + 112);
    if ((v12 & 1) != 0)
      break;
    v10 = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v24 = *(const void **)(v11 + 40 * v10 + 32);
  if (!v24)
    return 1;
LABEL_29:
  if (*a4)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a4);
  *a4 = v24;
  CFRetain(v24);
  return 0;
}

uint64_t re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::tryGet(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::VideoColorTags>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (*(unsigned __int8 *)(v6 + 24 * v5 + 12) != *a2
       || *(unsigned __int8 *)(v6 + 24 * v5 + 13) != a2[1]
       || *(unsigned __int8 *)(v6 + 24 * v5 + 14) != a2[2])
  {
    v5 = *(_DWORD *)(v6 + 24 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 24 * v5 + 16;
}

uint64_t re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::addNew<ColorSyncProfile const*&>(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  char v19;

  v6 = re::Hash<re::VideoColorTags>::operator()((uint64_t)&v19, a2);
  v7 = v6;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || (v8 = v6 % *(unsigned int *)(a1 + 24),
        v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8),
        (_DWORD)v9 == 0x7FFFFFFF))
  {
LABEL_8:
    v11 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v11 == 0x7FFFFFFF)
    {
      v11 = *(unsigned int *)(a1 + 32);
      v12 = v11;
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v12 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v12 + 1;
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(v13 + 24 * v11 + 8);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(v13 + 24 * v11 + 8);
      *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 24 * v11 + 8) = v14 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11) = v7;
    v15 = *(_QWORD *)(a1 + 16) + 24 * v11;
    v16 = *(_WORD *)a2;
    *(_BYTE *)(v15 + 14) = a2[2];
    *(_WORD *)(v15 + 12) = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 16) = *a3;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v11;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 16) + 24 * v11;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    while (*(unsigned __int8 *)(v10 + 24 * v9 + 12) != *a2
         || *(unsigned __int8 *)(v10 + 24 * v9 + 13) != a2[1]
         || *(unsigned __int8 *)(v10 + 24 * v9 + 14) != a2[2])
    {
      v9 = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF)
        goto LABEL_8;
    }
    v17 = v10 + 24 * v9;
  }
  return v17 + 16;
}

uint64_t re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::tryGet(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 73244475 * ((73244475 * v2) ^ ((73244475 * v2) >> 16));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ HIWORD(v3)) % *(_DWORD *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(unsigned __int8 *)(v6 + 24 * v4 + 12) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(unsigned __int8 *)(v6 + 24 * v4 + 12) == v2)
        return v6 + 24 * v4 + 16;
    }
    return 0;
  }
  return v6 + 24 * v4 + 16;
}

uint64_t re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::addNew<ColorSyncProfile const*&>(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = (73244475 * ((73244475 * v6) ^ ((73244475 * v6) >> 16))) ^ ((73244475
                                                                                * ((73244475 * v6) ^ ((73244475 * v6) >> 16))) >> 16);
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    LODWORD(v8) = v7 % *(_DWORD *)(a1 + 24);
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (*(unsigned __int8 *)(v15 + 24 * v9 + 12) == v6)
      {
LABEL_12:
        v14 = v15 + 24 * v9;
        return v14 + 16;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v15 + 24 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(unsigned __int8 *)(v15 + 24 * v9 + 12) == v6)
          goto LABEL_12;
      }
    }
  }
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v8) = v7 % *(_DWORD *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
      LOBYTE(v6) = *a2;
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 24 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 24 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 24 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v10) = v7;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 24 * v10 + 12) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v10 + 16) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v10;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 16) + 24 * v10;
  return v14 + 16;
}

void re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(uint64_t a1@<X0>, id *a2@<X1>, os_unfair_lock_s *a3@<X2>, uint64_t a4@<X3>, re::TextureHandle *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  char *v17;
  uint8_t *v18;
  uint64_t v19;
  re::TextureHandle *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  id *v28;
  void **v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _OWORD *v35;
  __int128 v36;
  id v37;
  unint64_t i;
  uint64_t v39;
  id v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  uint64_t v58;
  __int128 v59;
  _QWORD *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64x2_t v66;
  uint8_t buf[8];
  int v68;
  int v69;
  int v70;
  int v71;
  uint8_t *v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v10 = (_QWORD *)(a1 + 464);
    v11 = re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::tryGet(a1 + 464, a4);
    if (v11)
    {
      re::TextureHandle::TextureHandle(a5, (const re::TextureHandle *)(v11 + 8));
    }
    else
    {
      v13 = *(_DWORD *)(a4 + 4);
      v14 = *(_DWORD *)(a4 + 8);
      v15 = *(_DWORD *)(a4 + 12);
      v16 = *(_OWORD *)(a4 + 16);
      v74 = 0;
      switch(*(_DWORD *)a4)
      {
        case 1:
          *(_QWORD *)buf = &off_24ED8ACA0;
          v68 = v13;
          goto LABEL_11;
        case 2:
          *(_QWORD *)buf = &off_24ED8AD30;
          v68 = v13;
          v69 = v14;
          v70 = v15;
          goto LABEL_11;
        case 3:
          *(_QWORD *)buf = &off_24ED8ADB0;
          v68 = v13;
          v69 = v14;
          v70 = v15;
          v71 = v16;
LABEL_11:
          v72 = buf;
          goto LABEL_15;
        case 4:
          v58 = v16;
          v17 = (char *)operator new(0x20uLL);
          *(_QWORD *)v17 = &off_24ED8AE30;
          *((_DWORD *)v17 + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
          *((_DWORD *)v17 + 4) = v15;
          *(_QWORD *)(v17 + 20) = v58;
          goto LABEL_14;
        case 5:
          v59 = v16;
          v17 = (char *)operator new(0x28uLL);
          *(_QWORD *)v17 = &off_24ED8AEB0;
          *((_DWORD *)v17 + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
          *((_DWORD *)v17 + 4) = v15;
          *(_OWORD *)(v17 + 20) = v59;
LABEL_14:
          v72 = (uint8_t *)v17;
LABEL_15:
          std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](buf, v73);
          v18 = v72;
          if (v72 == buf)
          {
            v19 = 4;
            v18 = buf;
          }
          else
          {
            if (!v72)
              goto LABEL_20;
            v19 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_20:
          v20 = (re::TextureHandle *)re::VideoSDRDefaults::powerFunctionTableResolution((re::VideoSDRDefaults *)0x200);
          if ((unint64_t)v20 >= 0x200)
            v21 = 512;
          else
            v21 = (unint64_t)v20;
          v61 = 0;
          v22 = re::TextureHandle::InvalidHandle(v20);
          re::TextureHandle::TextureHandle(a5, (const re::TextureHandle *)v22);
          v23 = a1 + 512;
          v24 = *(_QWORD *)(a1 + 2568);
          v25 = *(_QWORD *)(a1 + 2560);
          v26 = &selRef_newBufferWithBytes_length_options_;
          if (v24 - v25 != 64)
            goto LABEL_36;
          v56 = a1 + 512;
          v57 = a2;
          v27 = v23 + 32 * (*(_QWORD *)(a1 + 2560) & 0x3FLL);
          v28 = (id *)re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::tryGet((uint64_t)v10, v27);
          if (v28)
          {
            v29 = v28;
            if (objc_msgSend(*v28, sel_width) == (id)v21)
            {
              NS::SharedPtr<MTL::Texture>::operator=(&v61, v29);
              re::TextureHandle::operator=(a5, (re::TextureHandle *)(v29 + 1));
            }
          }
          v60 = v10;
          if (!*v10)
            goto LABEL_35;
          v30 = re::Hash<re::VideoGammaToneCurve>::operator()(v27) % *(unsigned int *)(a1 + 488);
          v31 = *(_QWORD *)(a1 + 472);
          v32 = *(unsigned int *)(v31 + 4 * v30);
          if ((_DWORD)v32 == 0x7FFFFFFF)
            goto LABEL_35;
          v33 = *(_QWORD *)(a1 + 480);
          if (re::EqualTo<re::VideoGammaToneCurve>::operator()(v33 + 72 * v32 + 12, v27))
          {
            *(_DWORD *)(v31 + 4 * v30) = *(_DWORD *)(v33 + 72 * v32 + 8) & 0x7FFFFFFF;
          }
          else
          {
            do
            {
              v34 = v32;
              v32 = *(_DWORD *)(v33 + 72 * v32 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v32 == 0x7FFFFFFF)
                goto LABEL_35;
            }
            while (!re::EqualTo<re::VideoGammaToneCurve>::operator()(v33 + 72 * v32 + 12, v27));
            *(_DWORD *)(v33 + 72 * v34 + 8) = *(_DWORD *)(v33 + 72 * v34 + 8) & 0x80000000 | *(_DWORD *)(v33 + 72 * v32 + 8) & 0x7FFFFFFF;
          }
          re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 480) + 72 * v32);
          *(_DWORD *)(*(_QWORD *)(a1 + 480) + 72 * v32 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 72 * v32 + 8) & 0x80000000 | *(_DWORD *)(a1 + 500);
          *(_DWORD *)(a1 + 500) = v32;
          --*(_DWORD *)(a1 + 492);
          ++*(_DWORD *)(a1 + 504);
LABEL_35:
          v24 = *(_QWORD *)(a1 + 2568);
          v25 = *(_QWORD *)(a1 + 2560);
          a2 = v57;
          v10 = v60;
          v26 = &selRef_newBufferWithBytes_length_options_;
          v23 = a1 + 512;
LABEL_36:
          if (v24 - v25 == 64)
            *(_QWORD *)(a1 + 2560) = v24 - 63;
          *(_QWORD *)(a1 + 2568) = v24 + 1;
          v35 = (_OWORD *)(v23 + 32 * (v24 & 0x3F));
          v36 = *(_OWORD *)(a4 + 16);
          *v35 = *(_OWORD *)a4;
          v35[1] = v36;
          if (!v61)
          {
            v37 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
            objc_msgSend(v37, sel_setWidth_, v21);
            objc_msgSend(v37, sel_setPixelFormat_, 55);
            objc_msgSend(v37, sel_setUsage_, 1);
            objc_msgSend(v37, sel_setStorageMode_, 0);
            objc_msgSend(v37, sel_setTextureType_, 0);
            objc_msgSend(v37, sel_setArrayLength_, 1);
            objc_msgSend(v37, sel_setProtectionOptions_, 0);
            re::mtl::Device::makeTexture(v37, a2, buf);
            NS::SharedPtr<MTL::Texture>::operator=(&v61, (void **)buf);
            if (*(_QWORD *)buf)

            if (v37)
          }
          if (v21)
          {
            for (i = 0; i != v21; ++i)
            {
              *(float *)&v62 = (float)i / (float)v21;
              if (!v74)
                std::__throw_bad_function_call[abi:nn180100]();
              *(float *)&buf[4 * i] = (*(float (**)(_QWORD *, id *))(*v74 + 48))(v74, &v62);
            }
          }
          v39 = 4 * v21;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = v21;
          v66 = vdupq_n_s64(1uLL);
          objc_msgSend(v61, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &v62, 0, 0, buf, 4 * v21, 4 * v21, v56, v57);
          v40 = objc_msgSend(v61, v26[240]);
          v41 = objc_msgSend(v61, sel_height);
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = (unint64_t)v40;
          v66.i64[0] = (uint64_t)v41;
          v66.i64[1] = 1;
          objc_msgSend(v61, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v62, 0, buf, v39);
          if (!*((_QWORD *)a5 + 1) || !*(_QWORD *)a5)
          {
            re::TextureManager::registerTexture(a3, &v61, (os_unfair_lock_s **)&v62);
            re::TextureHandle::operator=(a5, (re::TextureHandle *)&v62);
            re::TextureHandle::invalidate((re::TextureHandle *)&v62);
          }
          v62 = 0;
          v63 = 0;
          v64 = 0;
          NS::SharedPtr<MTL::Texture>::operator=(&v62, &v61);
          re::TextureHandle::operator=((re::TextureHandle *)&v63, a5);
          v42 = re::Hash<re::VideoGammaToneCurve>::operator()(a4);
          v43 = v42;
          if (*v10)
          {
            v44 = v42 % *(unsigned int *)(a1 + 488);
            v45 = *(unsigned int *)(*(_QWORD *)(a1 + 472) + 4 * v44);
            if ((_DWORD)v45 != 0x7FFFFFFF)
            {
              v46 = *(_QWORD *)(a1 + 480);
              do
              {
                if (re::EqualTo<re::VideoGammaToneCurve>::operator()(v46 + 72 * v45 + 12, a4))
                  goto LABEL_63;
                v45 = *(_DWORD *)(v46 + 72 * v45 + 8) & 0x7FFFFFFF;
              }
              while (v45 != 0x7FFFFFFF);
            }
          }
          else
          {
            LODWORD(v44) = 0;
          }
          v47 = *(unsigned int *)(a1 + 500);
          if ((_DWORD)v47 == 0x7FFFFFFF)
          {
            v47 = *(unsigned int *)(a1 + 496);
            v48 = v47;
            if ((_DWORD)v47 == *(_DWORD *)(a1 + 488))
            {
              re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::setCapacity((uint64_t)v10, 2 * *(_DWORD *)(a1 + 492));
              LODWORD(v44) = v43 % *(unsigned int *)(a1 + 488);
              v48 = *(_DWORD *)(a1 + 496);
            }
            *(_DWORD *)(a1 + 496) = v48 + 1;
            v49 = *(_QWORD *)(a1 + 480);
            v50 = *(_DWORD *)(v49 + 72 * v47 + 8);
          }
          else
          {
            v49 = *(_QWORD *)(a1 + 480);
            v50 = *(_DWORD *)(v49 + 72 * v47 + 8);
            *(_DWORD *)(a1 + 500) = v50 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v49 + 72 * v47 + 8) = v50 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a1 + 480) + 72 * v47 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 72 * v47 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 472) + 4 * v44);
          *(_QWORD *)(*(_QWORD *)(a1 + 480) + 72 * v47) = v43;
          v51 = *(_QWORD *)(a1 + 480) + 72 * v47;
          v52 = *(_OWORD *)a4;
          *(_OWORD *)(v51 + 28) = *(_OWORD *)(a4 + 16);
          *(_OWORD *)(v51 + 12) = v52;
          v53 = *(_QWORD *)(a1 + 480) + 72 * v47;
          *(_QWORD *)(v53 + 48) = v62;
          re::TextureHandle::TextureHandle((re::TextureHandle *)(v53 + 56), (const re::TextureHandle *)&v63);
          *(_DWORD *)(*(_QWORD *)(a1 + 472) + 4 * v44) = v47;
          ++*(_DWORD *)(a1 + 492);
          ++*(_DWORD *)(a1 + 504);
LABEL_63:
          re::TextureHandle::invalidate((re::TextureHandle *)&v63);
          if (v62)

          if (v61)
          v54 = v74;
          if (v74 == v73)
          {
            v55 = 4;
            v54 = v73;
          }
          else
          {
            if (!v74)
              return;
            v55 = 5;
          }
          (*(void (**)(void))(*v54 + 8 * v55))();
          break;
        default:
          goto LABEL_20;
      }
    }
  }
  else
  {
    v12 = *re::videoLogObjects((re *)a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Unable to create texture handle for power function.", buf, 2u);
    }
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
  }
}

uint64_t re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4 * (re::Hash<re::VideoGammaToneCurve>::operator()(a2) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::EqualTo<re::VideoGammaToneCurve>::operator()(v5 + 72 * v4 + 12, a2))
  {
    v4 = *(_DWORD *)(v5 + 72 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 72 * v4 + 48;
}

void re::VideoColorManager::computeBoostPowerFunctionTable(uint64_t a1@<X0>, id *a2@<X1>, os_unfair_lock_s *a3@<X2>, re::TextureHandle *a4@<X8>, float a5@<S0>)
{
  float v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  unint64_t v13;
  re::TextureHandle *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  id v31;
  unint64_t i;
  uint64_t v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  id v46[256];
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64x2_t v52;

  if (a3)
  {
    v9 = roundf(a5 * 200.0) / 200.0;
    v10 = (_QWORD *)(a1 + 144);
    v11 = re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::tryGet(a1 + 144, LODWORD(v9));
    if (v11)
    {
      re::TextureHandle::TextureHandle(a4, (const re::TextureHandle *)(v11 + 8));
      return;
    }
    v13 = 512;
    v14 = (re::TextureHandle *)re::VideoSDRDefaults::powerFunctionTableResolution((re::VideoSDRDefaults *)0x200);
    if ((unint64_t)v14 < 0x200)
      v13 = (unint64_t)v14;
    v47 = 0;
    v15 = re::TextureHandle::InvalidHandle(v14);
    re::TextureHandle::TextureHandle(a4, (const re::TextureHandle *)v15);
    v16 = a1 + 192;
    v18 = *(_QWORD *)(a1 + 448);
    v17 = *(_QWORD *)(a1 + 456);
    if (v17 - v18 == 64)
    {
      v19 = *(_QWORD *)(a1 + 448) & 0x3FLL;
      v20 = (id *)re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::tryGet((uint64_t)v10, *(_DWORD *)(v16 + 4 * v19));
      if (v20)
      {
        v21 = v20;
        if (objc_msgSend(*v20, sel_width) == (id)v13)
        {
          NS::SharedPtr<MTL::Texture>::operator=(&v47, v21);
          re::TextureHandle::operator=(a4, (re::TextureHandle *)(v21 + 1));
        }
      }
      if (*v10)
      {
        v22 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9
              * (*(unsigned int *)(v16 + 4 * v19) ^ ((unint64_t)*(unsigned int *)(v16 + 4 * v19) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(unsigned int *)(v16 + 4 * v19) ^ ((unint64_t)*(unsigned int *)(v16 + 4 * v19) >> 30))) >> 27));
        v23 = (v22 ^ (v22 >> 31)) % *(unsigned int *)(a1 + 168);
        v24 = *(_QWORD *)(a1 + 152);
        v25 = *(unsigned int *)(v24 + 4 * v23);
        if ((_DWORD)v25 != 0x7FFFFFFF)
        {
          v26 = *(float *)(v16 + 4 * v19);
          v27 = *(_QWORD *)(a1 + 160);
          if (*(float *)(v27 + 40 * v25 + 12) == v26)
          {
            *(_DWORD *)(v24 + 4 * v23) = *(_DWORD *)(v27 + 40 * v25 + 8) & 0x7FFFFFFF;
LABEL_20:
            re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 160) + 40 * v25);
            *(_DWORD *)(*(_QWORD *)(a1 + 160) + 40 * v25 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 40 * v25 + 8) & 0x80000000 | *(_DWORD *)(a1 + 180);
            --*(_DWORD *)(a1 + 172);
            v30 = *(_DWORD *)(a1 + 184) + 1;
            *(_DWORD *)(a1 + 180) = v25;
            *(_DWORD *)(a1 + 184) = v30;
          }
          else
          {
            while (1)
            {
              v28 = v25;
              v29 = *(_DWORD *)(v27 + 40 * v25 + 8);
              v25 = v29 & 0x7FFFFFFF;
              if ((v29 & 0x7FFFFFFF) == 0x7FFFFFFF)
                break;
              if (*(float *)(v27 + 40 * v25 + 12) == v26)
              {
                *(_DWORD *)(v27 + 40 * v28 + 8) = *(_DWORD *)(v27 + 40 * v28 + 8) & 0x80000000 | *(_DWORD *)(v27 + 40 * v25 + 8) & 0x7FFFFFFF;
                goto LABEL_20;
              }
            }
          }
        }
      }
      v18 = *(_QWORD *)(a1 + 448);
      v17 = *(_QWORD *)(a1 + 456);
    }
    if (v17 - v18 == 64)
      *(_QWORD *)(a1 + 448) = v17 - 63;
    *(_QWORD *)(a1 + 456) = v17 + 1;
    *(float *)(v16 + 4 * (v17 & 0x3F)) = v9;
    if (!v47)
    {
      v31 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
      objc_msgSend(v31, sel_setWidth_, v13);
      objc_msgSend(v31, sel_setPixelFormat_, 55);
      objc_msgSend(v31, sel_setUsage_, 1);
      objc_msgSend(v31, sel_setStorageMode_, 0);
      objc_msgSend(v31, sel_setTextureType_, 0);
      objc_msgSend(v31, sel_setArrayLength_, 1);
      objc_msgSend(v31, sel_setProtectionOptions_, 0);
      re::mtl::Device::makeTexture(v31, a2, v46);
      NS::SharedPtr<MTL::Texture>::operator=(&v47, v46);
      if (v46[0])

      if (v31)
    }
    if (v13)
    {
      for (i = 0; i != v13; ++i)
      {
        if (i)
          *((float *)v46 + i) = powf((float)i / (float)v13, v9) / (float)((float)i / (float)v13);
      }
    }
    LODWORD(v46[0]) = 0;
    v33 = 4 * v13;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = v13;
    v52 = vdupq_n_s64(1uLL);
    objc_msgSend(v47, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &v48, 0, 0, v46, 4 * v13, 4 * v13);
    v34 = objc_msgSend(v47, sel_width);
    v35 = objc_msgSend(v47, sel_height);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = (unint64_t)v34;
    v52.i64[0] = (uint64_t)v35;
    v52.i64[1] = 1;
    objc_msgSend(v47, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v48, 0, v46, v33);
    if (!*((_QWORD *)a4 + 1) || !*(_QWORD *)a4)
    {
      re::TextureManager::registerTexture(a3, &v47, (os_unfair_lock_s **)&v48);
      re::TextureHandle::operator=(a4, (re::TextureHandle *)&v48);
      re::TextureHandle::invalidate((re::TextureHandle *)&v48);
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    NS::SharedPtr<MTL::Texture>::operator=(&v48, &v47);
    re::TextureHandle::operator=((re::TextureHandle *)&v49, a4);
    v36 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (LODWORD(v9) ^ ((unint64_t)LODWORD(v9) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * (LODWORD(v9) ^ ((unint64_t)LODWORD(v9) >> 30))) >> 27));
    v37 = v36 ^ (v36 >> 31);
    if (*v10)
    {
      v38 = v37 % *(unsigned int *)(a1 + 168);
      v39 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v38);
      if ((_DWORD)v39 != 0x7FFFFFFF)
      {
        v40 = *(_QWORD *)(a1 + 160);
        if (*(float *)(v40 + 40 * v39 + 12) == v9)
        {
LABEL_50:
          re::TextureHandle::invalidate((re::TextureHandle *)&v49);
          if (v48)

          if (v47)
          return;
        }
        while (1)
        {
          LODWORD(v39) = *(_DWORD *)(v40 + 40 * v39 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v39 == 0x7FFFFFFF)
            break;
          if (*(float *)(v40 + 40 * v39 + 12) == v9)
            goto LABEL_50;
        }
      }
    }
    else
    {
      LODWORD(v38) = 0;
    }
    v41 = *(unsigned int *)(a1 + 180);
    if ((_DWORD)v41 == 0x7FFFFFFF)
    {
      v41 = *(unsigned int *)(a1 + 176);
      v42 = v41;
      if ((_DWORD)v41 == *(_DWORD *)(a1 + 168))
      {
        re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity((uint64_t)v10, 2 * *(_DWORD *)(a1 + 172));
        LODWORD(v38) = v37 % *(unsigned int *)(a1 + 168);
        v42 = *(_DWORD *)(a1 + 176);
      }
      *(_DWORD *)(a1 + 176) = v42 + 1;
      v43 = *(_QWORD *)(a1 + 160);
      v44 = *(_DWORD *)(v43 + 40 * v41 + 8);
    }
    else
    {
      v43 = *(_QWORD *)(a1 + 160);
      v44 = *(_DWORD *)(v43 + 40 * v41 + 8);
      *(_DWORD *)(a1 + 180) = v44 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v43 + 40 * v41 + 8) = v44 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 160) + 40 * v41 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 40 * v41 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v38);
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 40 * v41) = v37;
    *(float *)(*(_QWORD *)(a1 + 160) + 40 * v41 + 12) = v9;
    v45 = *(_QWORD *)(a1 + 160) + 40 * v41;
    *(_QWORD *)(v45 + 16) = v48;
    re::TextureHandle::TextureHandle((re::TextureHandle *)(v45 + 24), (const re::TextureHandle *)&v49);
    *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v38) = v41;
    ++*(_DWORD *)(a1 + 172);
    ++*(_DWORD *)(a1 + 184);
    goto LABEL_50;
  }
  v12 = *re::videoLogObjects((re *)a1);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v46[0]) = 0;
    _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Unable to create texture handle for power function.", (uint8_t *)v46, 2u);
  }
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
}

uint64_t re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::tryGet(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(float *)(v5 + 40 * v3 + 12) != *(float *)&a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(float *)(v5 + 40 * v3 + 12) == *(float *)&a2)
        return v5 + 40 * v3 + 16;
    }
    return 0;
  }
  return v5 + 40 * v3 + 16;
}

double re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 40;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  void *v3;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 24));
    v3 = *(void **)(a1 + 16);
    if (v3)
    {

      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

double re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  void *v3;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 56));
    v3 = *(void **)(a1 + 48);
    if (v3)
    {

      *(_QWORD *)(a1 + 48) = 0;
    }
  }
}

unint64_t re::Hash<re::VideoColorTags>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = 73244475 * ((73244475 * *a2) ^ ((73244475 * *a2) >> 16));
  v3 = 73244475 * ((73244475 * a2[1]) ^ ((73244475 * a2[1]) >> 16));
  v4 = 73244475 * ((73244475 * a2[2]) ^ ((73244475 * a2[2]) >> 16));
  return (((unint64_t)(v2 ^ HIWORD(v2)) << 6)
        + ((unint64_t)(v2 ^ HIWORD(v2)) >> 2)
        - 0x61C8864680B583E9
        + (((v4 ^ HIWORD(v4))
          + ((unint64_t)(v3 ^ HIWORD(v3)) << 6)
          + ((unint64_t)(v3 ^ HIWORD(v3)) >> 2)
          - 0x61C8864680B583E9) ^ v3 ^ HIWORD(v3))) ^ v2 ^ HIWORD(v2);
}

void re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 24 * v18;
            v23 = *((_WORD *)v14 - 2);
            *(_BYTE *)(v22 + 14) = *((_BYTE *)v14 - 2);
            *(_WORD *)(v22 + 12) = v23;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) = v15;
            *(_BYTE *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 12) = *((_BYTE *)v14 - 4);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()(CFTypeRef *a1, CFTypeRef *a2)
{
  uint64_t result;

  result = CFEqual(*a1, *a2);
  if ((_DWORD)result)
    return CFEqual(a1[1], a2[1]) != 0;
  return result;
}

uint64_t re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()(CFTypeRef *a1)
{
  CFHashCode v2;
  unint64_t v3;
  unint64_t v4;
  CFHashCode v5;
  unint64_t v6;

  v2 = CFHash(*a1);
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = v3 ^ (v3 >> 31);
  v5 = CFHash(a1[1]);
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
  return ((v4 << 6) + (v4 >> 2) + (v6 ^ (v6 >> 31)) - 0x61C8864680B583E9) ^ v4;
}

void re::HashTable<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>,__CFArray const*,re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)(v14 - 16);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>,__CFArray const*,re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18) = v15;
            *(_OWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 16) = *(_OWORD *)v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 32) = *(_QWORD *)(v14 + 16);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 40;
        }
        while (v11 < v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

BOOL re::EqualTo<re::VideoGammaToneCurve>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28);
}

unint64_t re::Hash<re::VideoGammaToneCurve>::operator()(uint64_t a1)
{
  uint32x2_t v1;
  unsigned int v2;
  int8x8_t v3;
  int32x2_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint32x2_t v7;
  int8x8_t v8;
  int8x8_t v9;
  uint32x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v1.i32[0] = *(float *)(a1 + 12);
  v1.i32[1] = *(_DWORD *)a1;
  v2 = 73244475 * (*(float *)(a1 + 16) ^ (*(float *)(a1 + 16) >> 16));
  v3 = (int8x8_t)vrev64_s32((int32x2_t)vcvt_u32_f32(*(float32x2_t *)(a1 + 4)));
  v4 = vdup_n_s32(0x45D9F3Bu);
  v5 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v3, 0x10uLL), v3), v4);
  v6 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 0x10uLL), v5), v4);
  v7 = (uint32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v6, 0x10uLL), v6);
  v8 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(v1, 0x10uLL), (int8x8_t)v1), v4);
  v9 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v8, 0x10uLL), v8), v4);
  v10 = (uint32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v9, 0x10uLL), v9);
  v11 = vdupq_n_s64(0x9E3779B97F4A7C17);
  v12.i64[0] = vaddw_u32((uint64x2_t)v11, v10).u64[0];
  v12.i64[1] = vshll_n_u32(v10, 6uLL).i64[1];
  v13.i64[0] = v7.u32[0];
  v13.i64[1] = v7.u32[1];
  v14.i64[1] = v10.u32[1];
  v11.i64[0] = (unint64_t)v7.u32[0] << 6;
  v15 = (uint64x2_t)vaddq_s64(v12, v11);
  v12.i64[0] = v7.u32[0];
  v12.i64[1] = v10.u32[1];
  v16 = (int8x16_t)vsraq_n_u64(v15, (uint64x2_t)v12, 2uLL);
  v12.i64[0] = veorq_s8(v16, v13).u64[0];
  v12.i64[1] = vaddw_u32(*(uint64x2_t *)&v16, v7).i64[1];
  v14.i64[0] = ((73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16))
             + (v12.i64[0] << 6)
             + ((unint64_t)v12.i64[0] >> 2)
             - 0x61C8864680B583E9;
  v17 = veorq_s8((int8x16_t)v12, v14);
  v18 = ((v17.i64[1] << 6) + ((unint64_t)v17.i64[1] >> 2) + v17.i64[0] - 0x61C8864680B583E9) ^ v17.i64[1];
  v19 = 73244475 * (*(float *)(a1 + 20) ^ (*(float *)(a1 + 20) >> 16));
  v20 = (((73244475 * (v19 ^ HIWORD(v19))) ^ ((73244475 * (v19 ^ HIWORD(v19))) >> 16))
       + (v18 << 6)
       + (v18 >> 2)
       - 0x61C8864680B583E9) ^ v18;
  *(uint32x2_t *)v17.i8 = vcvt_u32_f32(*(float32x2_t *)(a1 + 24));
  *(int32x2_t *)v17.i8 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v17.i8, 0x10uLL), *(int8x8_t *)v17.i8), v4);
  *(int32x2_t *)v17.i8 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v17.i8, 0x10uLL), *(int8x8_t *)v17.i8), v4);
  *(int8x8_t *)v17.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v17.i8, 0x10uLL), *(int8x8_t *)v17.i8);
  return (((v17.u32[1] + ((unint64_t)v17.u32[0] << 6) + ((unint64_t)v17.u32[0] >> 2) - 0x61C8864680B583E9) ^ v17.u32[0])
        + (v20 << 6)
        + (v20 >> 2)
        - 0x61C8864680B583E9) ^ v20;
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_DWORD *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24ED8ACA0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED8ACA0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return powf(*a2, *(float *)(a1 + 8));
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED8AD30;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_24ED8AD30;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v2;
  float v3;

  v3 = a1[3];
  v2 = a1[4];
  if ((float)((float)-v2 / v3) <= *a2)
    return powf(v2 + (float)(v3 * *a2), a1[2]);
  else
    return 0.0;
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED8ADB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED8ADB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v2;
  float v3;

  v3 = a1[3];
  v2 = a1[4];
  if ((float)((float)-v2 / v3) <= *a2)
    return powf(v2 + (float)(v3 * *a2), a1[2]) + a1[5];
  else
    return a1[5];
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED8AE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED8AE30;
  result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (a1[6] <= *a2)
    return powf(a1[4] + (float)(a1[3] * v2), a1[2]);
  else
    return v2 * a1[5];
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED8AEB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 20);
  *(__n128 *)(v2 + 20) = result;
  return result;
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED8AEB0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a1 + 20);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (a1[6] <= *a2)
    return powf(a1[4] + (float)(a1[3] * v2), a1[2]) + a1[7];
  else
    return a1[8] + (float)(a1[5] * v2);
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::target_type()
{
}

void re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  signed int v27;
  _BYTE v28[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v28, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v28;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)v28 = v5;
      *(_QWORD *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 64);
        do
        {
          if ((*(_DWORD *)(v14 - 7) & 0x80000000) != 0)
          {
            v15 = *(v14 - 8);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 72 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 72 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 72 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 72 * v18;
            v23 = *(_OWORD *)((char *)v14 - 52);
            *(_OWORD *)(v22 + 28) = *(_OWORD *)((char *)v14 - 36);
            *(_OWORD *)(v22 + 12) = v23;
            v24 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18);
            v24[6] = *(v14 - 2);
            *(v14 - 2) = 0;
            v24[7] = 0;
            v24[8] = 0;
            v25 = v24 + 7;
            if (*v14)
            {
              v26 = *(v14 - 1);
              if (v26)
              {
                *v25 = v26;
                v25[1] = *v14;
                *v14 = 0;
              }
            }
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 9;
        }
        while (v11 < v10);
      }
      re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2)
      v27 = a2;
    else
      v27 = 3;
  }
}

void re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 3) & 0x80000000) != 0)
          {
            v15 = *(v14 - 4);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18) = v15;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 12) = *((_DWORD *)v14 - 5);
            v22 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18);
            v22[2] = *(v14 - 2);
            *(v14 - 2) = 0;
            v22[3] = 0;
            v22[4] = 0;
            v23 = v22 + 3;
            if (*v14)
            {
              v24 = *(v14 - 1);
              if (v24)
              {
                *v23 = v24;
                v23[1] = *v14;
                *v14 = 0;
              }
            }
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

uint64_t re::VideoSDRDefaults::gammaToneCurveAllowed(re::VideoSDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.gamma_tone_curve.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoSDRDefaults::gammaToneCurveAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1416);
}

uint64_t re::VideoSDRDefaults::colorSpaceTransformationAllowed(re::VideoSDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.color_space_transformation.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoSDRDefaults::colorSpaceTransformationAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1432);
}

uint64_t re::VideoSDRDefaults::brightnessScalingAllowed(re::VideoSDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.brightness_scaling.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoSDRDefaults::brightnessScalingAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1448);
}

uint64_t re::VideoSDRDefaults::gammaBoostAllowed(re::VideoSDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.gamma_boost.allowed", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoSDRDefaults::gammaBoostAllowed(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1464);
}

uint64_t re::VideoSDRDefaults::powerFunctionTableResolution(re::VideoSDRDefaults *this)
{
  unsigned __int8 v1;
  int v2;
  const char *v4;
  int v5;
  int v6;

  if ((v1 & 1) == 0)
  {
    v6 = (int)this;
    LODWORD(this) = v6;
    if (v5)
    {
      re::Defaults::intValue((re::Defaults *)"video.sdr.power_function_table_resolution", v4, (uint64_t)&re::VideoSDRDefaults::powerFunctionTableResolution(unsigned long)::value);
      LODWORD(this) = v6;
    }
  }
  v2 = dword_25582B5CC;
  if (!re::VideoSDRDefaults::powerFunctionTableResolution(unsigned long)::value)
    return (int)this;
  return v2;
}

uint64_t re::videoPlaybackCreateHDRConfigs(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, re *a6, uint64_t a7, unint64_t *a8, unint64_t a9, unint64_t *a10, unint64_t *a11)
{
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __CVBuffer *Width;
  __CVBuffer *Height;
  unint64_t v25;
  float *v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  re::VideoHDRDefaults *v32;
  int v33;
  re::VideoHDRDefaults *v34;
  float v35;
  re::VideoHDRDefaults *v36;
  float v37;
  re::VideoHDRDefaults *v38;
  float v39;
  re::VideoHDRDefaults *v40;
  float v41;
  re::VideoHDRDefaults *v42;
  float v43;
  re::VideoHDRDefaults *v44;
  float v45;
  re::VideoHDRDefaults *v46;
  float v47;
  float v48;
  re::VideoHDRDefaults *v49;
  float v50;
  uint64_t v51;
  re::VideoHDRDefaults *v52;
  float v53;
  re *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  char v60;
  uint64_t v61;
  re::VideoHDRDefaults *v62;
  re::VideoHDRDefaults *v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  re::VideoDefaults *v69;
  unint64_t v70;
  __CVBuffer **v71;
  re *v72;
  unint64_t v73;
  re::VideoDefaults *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __CVBuffer *v89;
  IOSurfaceRef IOSurface;
  CVImageBufferRef *v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  re::VideoDefaults *Config;
  uint64_t v104;
  float v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  unsigned int v113;
  unsigned int v114;
  const void **v115;
  unint64_t v116;
  _OWORD *v117;
  BOOL v118;
  uint8_t *v119;
  uint64_t v120;
  re *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  NSObject *v128;
  void *v129;
  uint64_t v130;
  uint64_t i;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  CVPixelBufferRef *v137;
  CVPixelBufferRef *v138;
  NSObject *v139;
  id v140;
  NSObject *v141;
  id v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  char v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  os_log_t log;
  NSObject *loga;
  unsigned int v165[5];
  char v166;
  __int16 v167;
  char v168;
  __int16 v169;
  char v170;
  _BYTE pixelBuffer[12];
  __int16 v172;
  unint64_t v173;
  uint8_t buf[16];
  __int128 v175;
  __CVBuffer *v176;
  __CVBuffer *v177[3];

  v177[1] = *(__CVBuffer **)MEMORY[0x24BDAC8D0];
  v16 = objc_alloc_init(MEMORY[0x24BDD16A8]);
  if (re::VideoDefaults::logEnabled((re::VideoDefaults *)v16))
    objc_msgSend(v16, "appendString:", CFSTR("Processing HDR pixel buffers."));
  v154 = a8;
  v18 = *a8;
  v19 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v21 = 0;
    v20 = 0;
    if (!v18)
      goto LABEL_25;
LABEL_18:
    v26 = (float *)v154 + 7;
    v25 = *v154;
    v27 = v18;
    while (v25 > v18 - 1)
    {
      if (v20 >= (unint64_t)*(v26 - 1))
        v20 = (unint64_t)*(v26 - 1);
      v28 = *v26;
      v26 += 4;
      v29 = (unint64_t)v28;
      if (v21 >= (unint64_t)v28)
        v21 = v29;
      if (!--v27)
        goto LABEL_25;
    }
LABEL_156:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v25);
    _os_crash();
    __break(1u);
LABEL_157:
    re::internal::assertLog((re::internal *)6, v104, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a8, v106);
    _os_crash();
    __break(1u);
LABEL_158:
    re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v18, v123);
    _os_crash();
    __break(1u);
LABEL_159:
    re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v18, v124);
    _os_crash();
    __break(1u);
LABEL_160:
    re::internal::assertLog((re::internal *)6, v125, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v18, v126);
    _os_crash();
    __break(1u);
    goto LABEL_161;
  }
  a8 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = a1 + 8 * (_QWORD)a8;
    Width = *(__CVBuffer **)(v22 + 16);
    if (Width)
    {
      Width = (__CVBuffer *)CVPixelBufferGetWidth(Width);
      v19 = *(_QWORD *)a1;
    }
    if (v19 <= (unint64_t)a8)
      goto LABEL_155;
    if (v20 <= (unint64_t)Width)
      v20 = (unint64_t)Width;
    Height = *(__CVBuffer **)(v22 + 16);
    if (Height)
    {
      Height = (__CVBuffer *)CVPixelBufferGetHeight(Height);
      v19 = *(_QWORD *)a1;
    }
    if (v21 <= (unint64_t)Height)
      v21 = (unint64_t)Height;
    a8 = (unint64_t *)((char *)a8 + 1);
  }
  while ((unint64_t)a8 < v19);
  if (v18)
    goto LABEL_18;
LABEL_25:
  v30 = a4[58];
  if (v30)
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
  else
    v31 = re::VideoHDRDefaults::targetNits(0);
  v32 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::overrideTargetNits(v31);
  v33 = (int)v32;
  if (a4[64])
    v35 = re::TargetDisplayInfoProvider::{unnamed type#11}::operator()((uint64_t)(a4 + 60));
  else
    v35 = re::VideoHDRDefaults::maxEdrValue(v32);
  v37 = re::VideoHDRDefaults::overrideMaxEdrValue(v34, v35);
  if (a4[70])
    v39 = re::TargetDisplayInfoProvider::{unnamed type#12}::operator()((uint64_t)(a4 + 66));
  else
    v39 = re::VideoHDRDefaults::maxEdrFactor(v36);
  v41 = re::VideoHDRDefaults::overrideMaxEdrFactor(v38, v39);
  if (a4[52])
    v43 = re::TargetDisplayInfoProvider::{unnamed type#9}::operator()((uint64_t)(a4 + 48));
  else
    v43 = re::VideoHDRDefaults::currentMaxNits(v40);
  v45 = re::VideoHDRDefaults::overrideCurrentMaxNits(v42, v43);
  if (a4[46])
    v47 = re::TargetDisplayInfoProvider::{unnamed type#8}::operator()((uint64_t)(a4 + 42));
  else
    v47 = re::VideoHDRDefaults::currentMinNits(v44);
  v48 = re::VideoHDRDefaults::overrideCurrentMinNits(v46, v47);
  v50 = re::VideoHDRDefaults::overrideAmbientLightInNits(v49, v45* (float)(*(float *)(*(_QWORD *)(a3 + 112) + 2180)+ (float)(*(float *)(a5 + 164)* (float)(*(float *)(a5 + 168) - *(float *)(*(_QWORD *)(a3 + 112) + 2180)))));
  v51 = a4[34];
  v147 = v45;
  v148 = v37;
  v146 = v50;
  v153 = v33;
  if (v51)
    v52 = (re::VideoHDRDefaults *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  else
    v53 = re::VideoHDRDefaults::sdrMaxBrightnessInNits(0);
  v145 = re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(v52, v53);
  v55 = re::defaultVideoHDRDisplayInfo(v54);
  v56 = v55[1];
  v152 = *v55;
  v57 = v55[2];
  v58 = *((float *)v55 + 3);
  v59 = *((float *)v55 + 4);
  v60 = *((_BYTE *)v55 + 20);
  v169 = *(_WORD *)((char *)v55 + 21);
  v170 = *((_BYTE *)v55 + 23);
  if (a4[16])
    v56 = re::TargetDisplayInfoProvider::{unnamed type#3}::operator()((uint64_t)(a4 + 12));
  v151 = re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits(v56);
  v61 = a4[10];
  if (v61)
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
  v62 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits(v57);
  v150 = v62;
  if (a4[4])
    v58 = re::TargetDisplayInfoProvider::{unnamed type#1}::operator()((uint64_t)a4);
  v144 = re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(v62, v58);
  v63 = (re::VideoHDRDefaults *)a4[22];
  if (v63)
    v59 = (*(float (**)(re::VideoHDRDefaults *))(*(_QWORD *)v63 + 16))(v63);
  v64 = re::VideoHDRDefaults::overrideDisplayContrastRatio(v63, v59);
  v65 = a4[28];
  if (v65)
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
  else
    v66 = v60 & 1;
  v149 = re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(v66);
  v142 = v16;
  if (*(_BYTE *)(a5 + 64))
  {
    v67 = *(unsigned __int8 *)a5;
    log = (os_log_t)re::VideoHDRDefaults::overridePixelFormat(1882468912);
    v68 = 1;
    switch(v67)
    {
      case 0:
        break;
      case 1:
        v68 = 12;
        break;
      case 2:
      case 3:
        v68 = 9;
        break;
      default:
        v68 = 2;
        break;
    }
  }
  else
  {
    log = (os_log_t)re::VideoHDRDefaults::overridePixelFormat(1882468912);
    v68 = 1;
  }
  v161 = re::VideoHDRDefaults::overrideColorPrimaries((re::VideoHDRDefaults *)v68);
  v158 = re::VideoHDRDefaults::overrideTransferFunction((re::VideoHDRDefaults *)0xD);
  v69 = (re::VideoDefaults *)re::VideoHDRDefaults::overrideYCbCrMatrix((re::VideoHDRDefaults *)1);
  v157 = v69;
  if (re::VideoDefaults::logEnabled(v69))
  {
    objc_msgSend(v16, "appendFormat:", CFSTR("\n     Working HDR pixel format: %s (%d)"), "(undefined)", log);
    objc_msgSend(v16, "appendFormat:", CFSTR("\n  Working HDR Color Primaries: %s (%d)"), "(undefined)", v161);
    objc_msgSend(v16, "appendFormat:", CFSTR("\nWorking HDR Transfer Function: %s (%d)"), "(undefined)", v158);
    objc_msgSend(v16, "appendFormat:", CFSTR("\n     Working HDR YCbCr Matrix: %s (%d)"), "(undefined)", v157);
    v139 = *re::videoLogObjects((re *)objc_msgSend(v16, "appendFormat:", CFSTR("\n         Working HDR Extended: %s"), "Yes"));
    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
    {
      v140 = objc_retainAutorelease(v16);
      v141 = v139;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = objc_msgSend(v140, "cStringUsingEncoding:", 1);
      _os_log_impl(&dword_224FE9000, v141, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

    }
  }
  v159 = v21 * a9;
  v160 = v20 * a9;
  if (*(_QWORD *)a1)
  {
    v70 = 0;
    a5 = 0;
    v71 = (__CVBuffer **)(a1 + 16);
    do
    {
      a5 |= (unint64_t)re::VideoPixelBufferBase::protectionOptions(v71);
      ++v70;
      ++v71;
    }
    while (v70 < *(_QWORD *)a1);
  }
  else
  {
    a5 = 0;
  }
  if (!*(_QWORD *)a6)
    re::VideoHDRProcessor::init(a6, v160, v159, v161, (int)log, v153, 1);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)a10);
  v176 = 0;
  v177[0] = 0;
  *(_OWORD *)buf = 0u;
  v175 = 0u;
  v73 = *(_QWORD *)a1;
  v143 = v64;
  if (!v18 && v73 == 1)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
LABEL_75:
    v76 = 1;
LABEL_89:
    v18 = re::VideoDefaults::compressionAllowed(v74);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize((uint64_t)a10, v76);
    v85 = 0;
    v155 = v76;
    v86 = -(uint64_t)v76;
    v87 = 2;
    while (1)
    {
      *(_QWORD *)pixelBuffer = 0;
      if (re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded((re::VideoSimplePixelBufferAllocator *)a7, v160, v159, (uint64_t)log, (re::CoreVideoUtils *)v161, v158, v157, 1, 0x1000000400, v18, a5))
      {
        re::VideoPixelBufferPool::createPixelBuffer((re::VideoPixelBufferPool *)(a7 + 40), pixelBuffer);
      }
      a8 = (unint64_t *)(v87 - 2);
      if (*a10 <= v87 - 2)
        break;
      v89 = *(__CVBuffer **)pixelBuffer;
      a10[v87] = *(_QWORD *)pixelBuffer;
      if (v89)
      {
        IOSurface = CVPixelBufferGetIOSurface(v89);
        CFRetain(IOSurface);
      }
      else
      {
        IOSurface = 0;
      }
      *(_QWORD *)pixelBuffer = IOSurface;
      re::VideoSurfaceBase::setEdrFactor((IOSurfaceRef *)pixelBuffer, v41);
      v91 = &v177[v85 - 1];
      v93 = re::VideoPixelBufferBase::cleanRect(&v177[v85 - 1]);
      v95 = v94;
      v97 = v96;
      v99 = v98;
      if (v177[v85 - 1])
      {
        CVImageBufferGetDisplaySize(v177[v85 - 1]);
        if (*v91)
          CVImageBufferGetDisplaySize(*v91);
      }
      v100 = *a10;
      if (*a10 <= (unint64_t)a8)
        goto LABEL_153;
      re::VideoPixelBufferBase::setCleanRect((CVPixelBufferRef *)&a10[v85 + 2], v93 * (double)a9, v95 * (double)a9, v97 * (double)a9, v99 * (double)a9);
      v102 = *a10;
      if (*a10 <= (unint64_t)a8)
        goto LABEL_154;
      if (a10[v87])
        CVImageBufferSetDisplayDimensions();
      v105 = re::VideoPixelBufferBase::horizontalDisparityAdjustment(&v177[v85 - 1]);
      if (v105 > 0.0)
      {
        v106 = *a10;
        if (*a10 <= (unint64_t)a8)
          goto LABEL_157;
        re::VideoPixelBufferBase::setHorizontalDisparityAdjustment((CVBufferRef *)&a10[v85 + 2], v105);
      }
      if (*(_QWORD *)pixelBuffer)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)pixelBuffer);
      ++v87;
      ++v85;
      if (v86 + v87 == 2)
      {
        v107 = v155 - *a11;
        if (v155 > *a11)
        {
          v108 = (uint64_t)&a11[10 * *a11 + 2];
          v110 = v147;
          v109 = v148;
          v111 = v146;
          v113 = LODWORD(v144);
          v112 = v145;
          v114 = LODWORD(v143);
          do
          {
            *(_BYTE *)(v108 + 64) = 0;
            *(_OWORD *)(v108 + 32) = 0uLL;
            *(_OWORD *)(v108 + 48) = 0uLL;
            *(_OWORD *)v108 = 0uLL;
            *(_OWORD *)(v108 + 16) = 0uLL;
            v108 += 80;
            --v107;
          }
          while (v107);
          goto LABEL_122;
        }
        v110 = v147;
        v109 = v148;
        v111 = v146;
        v113 = LODWORD(v144);
        v112 = v145;
        v114 = LODWORD(v143);
        if (v155 < *a11)
        {
          v115 = (const void **)&a11[10 * v155 + 4];
          v116 = v155;
          do
          {
            if (*v115)
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v115);
            *v115 = 0;
            if (*(v115 - 1))
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v115 - 1);
            *(v115 - 1) = 0;
            if (*(v115 - 2))
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v115 - 2);
            *(v115 - 2) = 0;
            ++v116;
            v115 += 10;
          }
          while (v116 < *a11);
LABEL_122:
          *a11 = v155;
          ++*((_DWORD *)a11 + 2);
        }
        v18 = 0;
        v117 = a11 + 6;
        v118 = 1;
        v119 = buf;
        v120 = 2;
        a5 = (unint64_t)&v176;
        while (1)
        {
          v121 = (re *)re::VideoDefaults::logEnabled(Config);
          if ((_DWORD)v121)
          {
            loga = *re::videoLogObjects(v121);
            if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pixelBuffer = 134218240;
              *(_QWORD *)&pixelBuffer[4] = v18 + 1;
              v172 = 2048;
              v173 = v155;
              _os_log_impl(&dword_224FE9000, loga, OS_LOG_TYPE_DEFAULT, "Processing pixel buffer %zu of %zu:", pixelBuffer, 0x16u);
            }
          }
          v123 = *a10;
          if (*a10 <= v18)
            goto LABEL_158;
          v165[0] = v152;
          v165[1] = v151;
          v165[2] = v150;
          v165[3] = v113;
          v165[4] = v114;
          v166 = v149;
          v167 = v169;
          v168 = v170;
          v124 = *a11;
          if (*a11 <= v18)
            goto LABEL_159;
          Config = (re::VideoDefaults *)re::VideoHDRProcessor::createConfig(a6, (re *)((char *)&v175 + v120 * 8), (re **)&a10[v120], v165, (uint64_t)(v117 - 2), v109, v41, v110, v48, v111, v112);
          if ((_DWORD)Config)
            break;
          v126 = *a11;
          if (*a11 <= v18)
            goto LABEL_160;
          v127 = *(_OWORD *)v119;
          v119 += 16;
          v118 = ++v18 < v155;
          *v117 = v127;
          v117 += 5;
          ++v120;
          if (v155 == v18)
          {
            v118 = 0;
LABEL_135:
            v129 = v142;
            v130 = v118;
            goto LABEL_136;
          }
        }
        v128 = *re::videoLogObjects(Config);
        if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)pixelBuffer = 0;
          _os_log_error_impl(&dword_224FE9000, v128, OS_LOG_TYPE_ERROR, "Unable to process HDR pixel buffer.", pixelBuffer, 2u);
        }
        goto LABEL_135;
      }
    }
    re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v87 - 2, *a10);
    _os_crash();
    __break(1u);
LABEL_153:
    re::internal::assertLog((re::internal *)6, v92, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v87 - 2, v100);
    _os_crash();
    __break(1u);
LABEL_154:
    re::internal::assertLog((re::internal *)6, v101, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v87 - 2, v102);
    _os_crash();
    __break(1u);
LABEL_155:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, a8, v19);
    _os_crash();
    __break(1u);
    goto LABEL_156;
  }
  if (v73 == 1 && v18 == 1)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    if (*v154)
    {
      *(_OWORD *)buf = *((_OWORD *)v154 + 1);
      goto LABEL_75;
    }
    re::internal::assertLog((re::internal *)6, v75, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_165;
  }
  if (v73 == 1 && v18 == 2)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    if (!*(_QWORD *)a1)
    {
LABEL_165:
      re::internal::assertLog((re::internal *)6, v77, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_166;
    }
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *(CVPixelBufferRef *)(a1 + 16));
    v79 = v154;
    v80 = *v154;
    if (!*v154)
    {
LABEL_166:
      re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_167;
    }
    *(_OWORD *)buf = *((_OWORD *)v154 + 1);
    if (v80 == 1)
    {
LABEL_167:
      re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v80, v80);
      _os_crash();
      __break(1u);
      goto LABEL_168;
    }
    goto LABEL_81;
  }
  if (v73 == 2 && v18 == 1)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    v83 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 <= 1uLL)
    {
LABEL_168:
      re::internal::assertLog((re::internal *)6, v82, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v83);
      _os_crash();
      __break(1u);
      goto LABEL_169;
    }
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *(CVPixelBufferRef *)(a1 + 24));
    if (!*v154)
    {
LABEL_169:
      re::internal::assertLog((re::internal *)6, v84, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_170;
    }
    v81 = *((_OWORD *)v154 + 1);
    *(_OWORD *)buf = v81;
    goto LABEL_87;
  }
  if (v73 == 2 && v18 == 2)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    v134 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 <= 1uLL)
    {
LABEL_170:
      re::internal::assertLog((re::internal *)6, v133, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v134);
      _os_crash();
      __break(1u);
LABEL_171:
      re::internal::assertLog((re::internal *)6, v135, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
    }
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *(CVPixelBufferRef *)(a1 + 24));
    v79 = v154;
    v136 = *v154;
    if (!*v154)
      goto LABEL_171;
    *(_OWORD *)buf = *((_OWORD *)v154 + 1);
    if (v136 != 1)
    {
LABEL_81:
      v81 = *((_OWORD *)v79 + 2);
LABEL_87:
      v175 = v81;
LABEL_88:
      v76 = 2;
      goto LABEL_89;
    }
    re::internal::assertLog((re::internal *)6, v135, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, 1);
    v72 = (re *)_os_crash();
    __break(1u);
  }
  if (!v18 && v73 == 2)
  {
    v137 = (CVPixelBufferRef *)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)a1, 0);
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *v137);
    v138 = (CVPixelBufferRef *)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)a1, 1uLL);
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *v138);
    goto LABEL_88;
  }
  a5 = *re::videoLogObjects(v72);
  if (os_log_type_enabled((os_log_t)a5, OS_LOG_TYPE_ERROR))
  {
LABEL_161:
    *(_WORD *)pixelBuffer = 0;
    _os_log_error_impl(&dword_224FE9000, (os_log_t)a5, OS_LOG_TYPE_ERROR, "Unsupported channel configuration.", pixelBuffer, 2u);
  }
  v130 = 1;
  v129 = v142;
LABEL_136:
  for (i = 1; i != -1; --i)
  {
    if (v177[i - 1])
      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v177[i - 1]);
    v177[i - 1] = 0;
  }

  return v130;
}

uint64_t re::videoPlaybackCreatePSEConfigs(re *a1, uint64_t a2, uint64_t a3, re::VideoSimplePixelBufferAllocator *a4, uint64_t a5, uint64_t a6, double a7)
{
  unint64_t v7;
  uint64_t result;
  _QWORD *v15;
  CVPixelBufferRef *v16;
  IOSurfaceRef IOSurface;
  id *v18;
  int v19;
  re::CoreVideoUtils *PixelFormat;
  char canConvertToGammaSpaceRGBColorModel;
  NSObject *v22;
  const char *v23;
  float v24;
  float v25;
  uint64_t v26;
  const void **v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __IOSurface *v31;
  re::CoreVideoUtils *v32;
  uint64_t v33;
  int v34;
  size_t Width;
  size_t Height;
  unint64_t ProtectionOptions;
  uint64_t v38;
  uint64_t v39;
  id **v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  IOSurfaceRef v46;
  IOSurfaceRef buffer[2];

  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > 1uLL)
    return 2;
  if (!*(_QWORD *)a3)
  {
    v22 = *re::videoLogObjects(a1);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      return 1;
    LOWORD(buffer[0]) = 0;
    v23 = "[videoPlaybackCreatePSEConfigs] The given PSE processor is invalid.";
LABEL_28:
    _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)buffer, 2u);
    return 1;
  }
  if (!**(_QWORD **)a3)
  {
    v22 = *re::videoLogObjects(a1);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      return 1;
    LOWORD(buffer[0]) = 0;
    v23 = "[videoPlaybackCreatePSEConfigs] The given PSE processor is not initialized.";
    goto LABEL_28;
  }
  v15 = a1;
  v16 = (CVPixelBufferRef *)((char *)a1 + 16);
  if (!v7)
    goto LABEL_22;
  if (!*v16)
  {
    v22 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      return 1;
    LOWORD(buffer[0]) = 0;
    v23 = "[videoPlaybackCreatePSEConfigs] The given pixel buffers are invalid.";
    goto LABEL_28;
  }
  IOSurface = CVPixelBufferGetIOSurface(*v16);
  CFRetain(IOSurface);
  buffer[0] = IOSurface;
  v18 = **(id ***)a3;
  if (!v18)
    goto LABEL_19;
  if (!IOSurface)
    return 2;
  v19 = objc_msgSend(*v18, "canProcessSurface:", IOSurface);
  IOSurface = buffer[0];
  if (!v19)
  {
LABEL_19:
    if (IOSurface)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buffer);
    return 2;
  }
  if (buffer[0])
  {
    PixelFormat = (re::CoreVideoUtils *)IOSurfaceGetPixelFormat(buffer[0]);
    canConvertToGammaSpaceRGBColorModel = re::CoreVideoUtils::canConvertToGammaSpaceRGBColorModel(PixelFormat);
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buffer);
    if ((canConvertToGammaSpaceRGBColorModel & 1) != 0)
      goto LABEL_22;
    return 2;
  }
  a1 = (re *)re::CoreVideoUtils::canConvertToGammaSpaceRGBColorModel(0);
  if ((a1 & 1) == 0)
    return 2;
LABEL_22:
  if (!*(_QWORD *)(a2 + 560) || !*(_QWORD *)(a2 + 416))
  {
    v22 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buffer[0]) = 0;
      v23 = "[videoPlaybackCreatePSEConfigs] The given display info provider is not initialized.";
      goto LABEL_28;
    }
    return 1;
  }
  v24 = re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(a2 + 528);
  v25 = re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(a2 + 384);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize(a5, v7);
  if (*(_QWORD *)a6 >= v7)
  {
    if (*(_QWORD *)a6 <= v7)
      goto LABEL_40;
    v27 = (const void **)(a6 + 48 * v7 + 48);
    v28 = v7;
    do
    {
      if (*v27)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v27);
      *v27 = 0;
      if (*(v27 - 1))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v27 - 1);
      *(v27 - 1) = 0;
      v29 = (std::__shared_weak_count *)*(v27 - 3);
      if (v29)
        std::__shared_weak_count::__release_weak(v29);
      ++v28;
      v27 += 6;
    }
    while (v28 < *(_QWORD *)a6);
  }
  else
  {
    bzero((void *)(a6 + 16), 48 * v7);
  }
  *(_QWORD *)a6 = v7;
  ++*(_DWORD *)(a6 + 8);
LABEL_40:
  if (!v7)
    return 0;
  if (!*v15)
  {
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_63:
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_64:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_65;
  }
  re::VideoPixelBufferBase::surface(v16, buffer);
  v31 = buffer[0];
  if (buffer[0])
    v32 = (re::CoreVideoUtils *)IOSurfaceGetPixelFormat(buffer[0]);
  else
    v32 = 0;
  if (!*v15)
    goto LABEL_63;
  v33 = re::CoreVideoUtils::convertToGammaSpaceRGBColorModel(v32);
  v34 = re::VideoPixelBufferBase::colorTags(v16);
  if (v31)
  {
    Width = IOSurfaceGetWidth(v31);
    Height = IOSurfaceGetHeight(v31);
    ProtectionOptions = IOSurfaceGetProtectionOptions();
  }
  else
  {
    Height = 0;
    Width = 0;
    ProtectionOptions = 0;
  }
  re::VideoSimplePixelBufferAllocator::createPixelBuffer(a4, Width, Height, v33, (re::CoreVideoUtils *)BYTE1(v34), BYTE2(v34), 0, 1, &v46, 0x1000000400, 0, ProtectionOptions);
  if (!*(_QWORD *)a5)
    goto LABEL_64;
  *(_QWORD *)(a5 + 16) = v46;
  if (!*(_QWORD *)a6)
  {
LABEL_65:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
LABEL_66:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_67;
  }
  v40 = *(id ***)a3;
  v39 = *(_QWORD *)(a3 + 8);
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 16);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(a6 + 24);
  *(_QWORD *)(a6 + 16) = v40;
  *(_QWORD *)(a6 + 24) = v39;
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  if (!*(_QWORD *)a6)
    goto LABEL_66;
  *(double *)(a6 + 32) = a7;
  re::VideoObject<re::VideoColorTransformBase>::setRef(a6 + 40, (const void **)(a6 + 40), v31);
  if (!*(_QWORD *)a5)
  {
LABEL_67:
    re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_68;
  }
  re::VideoPixelBufferBase::surface((__CVBuffer **)(a5 + 16), &v46);
  if (*(_QWORD *)a6)
  {
    *(_QWORD *)(a6 + 48) = v46;
    *(float *)(a6 + 56) = v25;
    *(float *)(a6 + 60) = v24;
    if (v31)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buffer);
    return 0;
  }
LABEL_68:
  re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
  result = _os_crash();
  __break(1u);
  return result;
}

float re::VideoHDRDefaults::maxEdrValue(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.edr.max_value", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 2.0;
      re::VideoHDRDefaults::maxEdrValue(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 374);
}

float re::VideoHDRDefaults::overrideMaxEdrValue(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.edr.max_value", v4, (uint64_t)&re::VideoHDRDefaults::overrideMaxEdrValue(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideMaxEdrValue(float)::value)
    return *(float *)&dword_25582B5EC;
  return result;
}

float re::VideoHDRDefaults::maxEdrFactor(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.edr.max_factor", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 0.5;
      re::VideoHDRDefaults::maxEdrFactor(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 382);
}

float re::VideoHDRDefaults::overrideMaxEdrFactor(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.edr.max_factor", v4, (uint64_t)&re::VideoHDRDefaults::overrideMaxEdrFactor(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideMaxEdrFactor(float)::value)
    return *(float *)&dword_25582B60C;
  return result;
}

uint64_t re::VideoHDRDefaults::targetNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  int v6;
  _BYTE v7[4];
  int v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.nits.target", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 100;
      re::VideoHDRDefaults::targetNits(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned int *)v2 + 390);
}

uint64_t re::VideoHDRDefaults::overrideTargetNits(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    LODWORD(this) = v4;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.override.nits.target", v2, (uint64_t)&re::VideoHDRDefaults::overrideTargetNits::value);
      LODWORD(this) = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideTargetNits::value)
    return dword_25582B62C;
  else
    return this;
}

float re::VideoHDRDefaults::currentMaxNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.nits.current_max", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 800.0;
      re::VideoHDRDefaults::currentMaxNits(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 398);
}

float re::VideoHDRDefaults::overrideCurrentMaxNits(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.current_max", v4, (uint64_t)&re::VideoHDRDefaults::overrideCurrentMaxNits(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideCurrentMaxNits(float)::value)
    return *(float *)&dword_25582B64C;
  return result;
}

float re::VideoHDRDefaults::currentMinNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.nits.current_min", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 0.005;
      re::VideoHDRDefaults::currentMinNits(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 406);
}

float re::VideoHDRDefaults::overrideCurrentMinNits(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.current_min", v4, (uint64_t)&re::VideoHDRDefaults::overrideCurrentMinNits(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideCurrentMinNits(float)::value)
    return *(float *)&dword_25582B66C;
  return result;
}

float re::VideoHDRDefaults::overrideAmbientLightInNits(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.ambient_light", v4, (uint64_t)&re::VideoHDRDefaults::overrideAmbientLightInNits(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideAmbientLightInNits(float)::value)
    return *(float *)&dword_25582B67C;
  return result;
}

float re::VideoHDRDefaults::sdrMaxBrightnessInNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  int v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.nits.sdr_max_brightness", v5, (uint64_t)v7);
      v6 = (float)v8;
      if (!v7[0])
        v6 = 150.0;
      re::VideoHDRDefaults::sdrMaxBrightnessInNits(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 418);
}

float re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.sdr_max_brightness", v4, (uint64_t)&re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(float)::value)
    return *(float *)&dword_25582B69C;
  return result;
}

uint64_t re::VideoHDRDefaults::displayAdjustsBlackLevel(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.hdr.display.adjusts_black_level", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::VideoHDRDefaults::displayAdjustsBlackLevel(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned __int8 *)v2 + 1704);
}

uint64_t re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    LODWORD(this) = v4;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.hdr.override.display.adjusts_black_level", v2, &re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(BOOL)::value);
      LODWORD(this) = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(BOOL)::value)
    return byte_25582B6B9 != 0;
  else
    return this;
}

uint64_t re::VideoHDRDefaults::displayDiagonalSize(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  int v6;
  _BYTE v7[4];
  int v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.display.diagonal_size", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 10;
      re::VideoHDRDefaults::displayDiagonalSize(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned int *)v2 + 434);
}

uint64_t re::VideoHDRDefaults::displayMaximumBrightnessInNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  int v6;
  _BYTE v7[4];
  int v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.display.nits.max_brightness", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 800;
      re::VideoHDRDefaults::displayMaximumBrightnessInNits(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned int *)v2 + 438);
}

uint64_t re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    LODWORD(this) = v4;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.override.display.nits.max_brightness", v2, (uint64_t)&re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits::value);
      LODWORD(this) = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits::value)
    return dword_25582B6EC;
  else
    return this;
}

uint64_t re::VideoHDRDefaults::displayAverageBrightnessInNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  int v6;
  _BYTE v7[4];
  int v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.display.nits.average_brightness", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 400;
      re::VideoHDRDefaults::displayAverageBrightnessInNits(void)::value = v6;
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((unsigned int *)v2 + 446);
}

uint64_t re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    LODWORD(this) = v4;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.override.display.nits.average_brightness", v2, (uint64_t)&re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits::value);
      LODWORD(this) = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits::value)
    return dword_25582B70C;
  else
    return this;
}

float re::VideoHDRDefaults::displayMinimumBrightnessInNits(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.display.nits.min_brightness", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 0.005;
      re::VideoHDRDefaults::displayMinimumBrightnessInNits(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 454);
}

float re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.display.nits.min_brightness", v4, (uint64_t)&re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(float)::value)
    return *(float *)&dword_25582B72C;
  return result;
}

float re::VideoHDRDefaults::displayContrastRatio(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  const char *v5;
  float v6;
  _BYTE v7[4];
  float v8;

  v2 = &CGImageDecoderTypeID_onceToken;
  if ((v1 & 1) == 0)
  {
    v2 = &CGImageDecoderTypeID_onceToken;
    if (v4)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.display.contrast_ratio", v5, (uint64_t)v7);
      v6 = v8;
      if (!v7[0])
        v6 = 0.000667;
      re::VideoHDRDefaults::displayContrastRatio(void)::value = LODWORD(v6);
      v2 = &CGImageDecoderTypeID_onceToken;
    }
  }
  return *((float *)v2 + 462);
}

float re::VideoHDRDefaults::overrideDisplayContrastRatio(re::VideoHDRDefaults *this, float result)
{
  unsigned __int8 v2;
  int v3;
  const char *v4;
  float v5;

  if ((v2 & 1) == 0)
  {
    v5 = result;
    result = v5;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.display.contrast_ratio", v4, (uint64_t)&re::VideoHDRDefaults::overrideDisplayContrastRatio(float)::value);
      result = v5;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayContrastRatio(float)::value)
    return *(float *)&dword_25582B74C;
  return result;
}

uint64_t re::VideoHDRDefaults::overridePixelFormat(uint64_t this)
{
  unsigned __int8 v1;
  const char *v2;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    LODWORD(this) = v4;
    if (v3)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.pixel_format", v2, (uint64_t)&re::VideoHDRDefaults::overridePixelFormat::value);
      LODWORD(this) = v4;
    }
  }
  if (re::VideoHDRDefaults::overridePixelFormat::value)
    return dword_25582B75C;
  else
    return this;
}

uint64_t re::VideoHDRDefaults::overrideColorPrimaries(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  const char *v4;
  int v5;
  char v6;

  if ((v1 & 1) == 0)
  {
    v6 = (char)this;
    LOBYTE(this) = v6;
    if (v5)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.color_primaries", v4, (uint64_t)&re::VideoHDRDefaults::overrideColorPrimaries(unsigned char)::value);
      LOBYTE(this) = v6;
    }
  }
  v2 = dword_25582B76C;
  if (!re::VideoHDRDefaults::overrideColorPrimaries(unsigned char)::value)
    return this;
  return v2;
}

uint64_t re::VideoHDRDefaults::overrideTransferFunction(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  const char *v4;
  int v5;
  char v6;

  if ((v1 & 1) == 0)
  {
    v6 = (char)this;
    LOBYTE(this) = v6;
    if (v5)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.transfer_function", v4, (uint64_t)&re::VideoHDRDefaults::overrideTransferFunction(unsigned char)::value);
      LOBYTE(this) = v6;
    }
  }
  v2 = dword_25582B77C;
  if (!re::VideoHDRDefaults::overrideTransferFunction(unsigned char)::value)
    return this;
  return v2;
}

uint64_t re::VideoHDRDefaults::overrideYCbCrMatrix(re::VideoHDRDefaults *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  const char *v4;
  int v5;
  char v6;

  if ((v1 & 1) == 0)
  {
    v6 = (char)this;
    LOBYTE(this) = v6;
    if (v5)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.ycbcr_matrix", v4, (uint64_t)&re::VideoHDRDefaults::overrideYCbCrMatrix(unsigned char)::value);
      LOBYTE(this) = v6;
    }
  }
  v2 = dword_25582B78C;
  if (!re::VideoHDRDefaults::overrideYCbCrMatrix(unsigned char)::value)
    return this;
  return v2;
}

double re::VideoColorTuner::calculateColor(uint64_t a1, float *a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float32x4_t v11;
  uint64_t v12;
  float v13;
  int32x2_t v14;
  double result;
  float32x4_t v16;

  *(_QWORD *)(a1 + 32) = re::VideoColorTuner::calculateTargetColor((float *)a1, a2, a3->f32, (float *)(a1 + 32), a4);
  *(_QWORD *)(a1 + 40) = v7;
  v16 = *(float32x4_t *)(a1 + 32);
  v8 = powf(a2[1], a3[7].f32[0]);
  v9 = a3[7].f32[1];
  v10 = v9 + (float)(v8 * (float)(1.0 - v9));
  if (v10 > 1.0)
    v10 = 1.0;
  if (v10 < v9)
    v10 = a3[7].f32[1];
  v16 = vmlaq_n_f32(vmulq_n_f32(v16, v10), a3[6], 1.0 - v10);
  v11.i64[0] = re::SmoothDampener::smooth((uint64_t)&v16, a1 + 48, a1 + 16, a3[5].f32[2], a3[5].f32[1], *a2);
  v11.i64[1] = v12;
  *(_QWORD *)(a1 + 48) = v11.i64[0];
  *(_QWORD *)(a1 + 56) = v12;
  v13 = a3[5].f32[0];
  *(float *)v14.i32 = 1.0 - v13;
  *(_QWORD *)&result = vaddq_f32((float32x4_t)vdupq_lane_s32(v14, 0), vmulq_n_f32(v11, v13)).u64[0];
  return result;
}

re::VideoDefaults *re::VideoColorTuner::calculateTargetColor(float *a1, float *a2, float *a3, float *a4, float32x4_t *a5)
{
  __int128 v10;
  re::VideoDefaults *v11;
  float v12;
  float v13;
  float v14;
  re *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  re::VideoDefaults *v23;
  float v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  re *v29;
  float v30;
  float v31;
  float v32;
  re *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  re::VideoDefaults *v38;
  re *v39;
  __int128 v40;
  re::VideoDefaults *v41;
  float v42;
  float v43;
  re *v44;
  NSObject *v46;
  _BOOL8 v47;
  double v48;
  double v49;
  double v50;
  NSObject *v51;
  _BOOL8 v52;
  double v53;
  double v54;
  float v55;
  NSObject *v56;
  NSObject *v57;
  _BOOL8 v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  _BOOL8 v63;
  NSObject *v64;
  float v65;
  float v66;
  __int128 v67;
  _BYTE buf[22];
  __int16 v69;
  double v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(__n64 *)&v10 = re::VideoColorUtils::rgbToHsv(a5->f32);
  LODWORD(v10) = (_DWORD)v11;
  v67 = v10;
  v12 = *((float *)&v11 + 1);
  v14 = v13;
  v15 = (re *)re::VideoDefaults::logEnabled(v11);
  if ((_DWORD)v15)
  {
    v46 = *re::videoLogObjects(v15);
    v47 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    if (v47)
    {
      v48 = a5->f32[0];
      v49 = a5->f32[1];
      v50 = a5->f32[2];
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v48;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v49;
      v69 = 2048;
      v70 = v50;
      _os_log_impl(&dword_224FE9000, v46, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Input Color: %f, %f, %f", buf, 0x20u);
    }
    v51 = *re::videoLogObjects((re *)v47);
    v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    if (v52)
    {
      v53 = (float)((float)((float)(a5->f32[0] * 100.0) * 254.0) / 100.0);
      v54 = (float)((float)((float)(a5->f32[1] * 100.0) * 254.0) / 100.0);
      v55 = (float)(a5->f32[2] * 100.0) * 254.0;
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v53;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v54;
      v69 = 2048;
      v70 = (float)(v55 / 100.0);
      _os_log_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Input Color RGB Values: R:%f, G:%f, B:%f", buf, 0x20u);
    }
    v56 = *re::videoLogObjects((re *)v52);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v12;
      v69 = 2048;
      v70 = v14;
      _os_log_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Input HSV: %f, %f, %f", buf, 0x20u);
    }
  }
  re::VideoColorUtils::rgbToHsv(a4);
  v17 = (float)((float)(*a2 * *a3) * fabsf((float)(*(float *)&v67 - v16) / *a2))
      + (float)(*a1 * (float)(1.0 - (float)(*a2 * *a3)));
  *a1 = v17;
  v18 = powf(v12, a3[5]);
  v19 = a3[6];
  v20 = a3[7];
  v21 = (float)((float)(v17 - a3[2]) / (float)(a3[1] - a3[2])) + 0.0;
  if (v21 > 1.0)
    v21 = 1.0;
  if (v21 >= 0.0)
    v22 = 1.0 - v21;
  else
    v22 = 1.0;
  v24 = powf(v22, a3[3]);
  v25 = v18 * (float)((float)(v20 * (float)(1.0 - v24)) + (float)(v19 * (float)(1.0 - (float)(1.0 - v24))));
  v26 = vmulq_f32(*a5, (float32x4_t)xmmword_22619E170);
  v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
  if (v27 <= v14)
    v27 = v14;
  if (v27 > 1.0)
    v27 = 1.0;
  v66 = 0.0;
  if (v27 >= 0.0)
    v28 = v27;
  else
    v28 = 0.0;
  v29 = (re *)re::VideoDefaults::logEnabled(v23);
  if ((_DWORD)v29)
  {
    v57 = *re::videoLogObjects(v29);
    v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
    if (v58)
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v25;
      v69 = 2048;
      v70 = v14;
      _os_log_impl(&dword_224FE9000, v57, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Hue Dependent Saturation: %f, %f, %f", buf, 0x20u);
    }
    v59 = *re::videoLogObjects((re *)v58);
    v29 = (re *)os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v29)
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v28;
      _os_log_impl(&dword_224FE9000, v59, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor luminance: %f", buf, 0xCu);
    }
  }
  if (v28 > 0.0001)
  {
    v30 = a3[9];
    if (v25 <= v30)
      v30 = v25;
    if (v30 >= 0.0)
      v31 = v30;
    else
      v31 = 0.0;
    v32 = powf(a3[11], (float)(v28 - a3[10]) * -40.0);
    v66 = (float)(v31 * (float)(1.0 / (float)(v32 + 1.0)))
        + (float)((float)(1.0 - (float)(1.0 / (float)(v32 + 1.0))) * 0.0);
  }
  v33 = (re *)re::VideoDefaults::logEnabled(v29);
  if ((_DWORD)v33)
  {
    v60 = *re::videoLogObjects(v33);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v66;
      v69 = 2048;
      v70 = v14;
      _os_log_impl(&dword_224FE9000, v60, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Brightness Dependent Saturation: %f, %f, %f", buf, 0x20u);
    }
  }
  v34 = a2[12];
  v35 = a3[12];
  v36 = a3[13];
  v37 = powf(a3[17], (float)(v14 - a3[16]) * -40.0);
  v65 = v34
      * (float)((float)(v36 * (float)(1.0 / (float)(v37 + 1.0)))
              + (float)(v35 * (float)(1.0 - (float)(1.0 / (float)(v37 + 1.0)))));
  v39 = (re *)re::VideoDefaults::logEnabled(v38);
  if ((_DWORD)v39)
  {
    v61 = *re::videoLogObjects(v39);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v66;
      v69 = 2048;
      v70 = v65;
      _os_log_impl(&dword_224FE9000, v61, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Output HSV: %f, %f, %f", buf, 0x20u);
    }
  }
  v40 = v67;
  *((float *)&v40 + 1) = v66;
  *((float *)&v40 + 2) = v65;
  *(_OWORD *)buf = v40;
  v41 = (re::VideoDefaults *)re::VideoColorUtils::hsvToRgb((uint64_t)buf);
  v43 = v42;
  v44 = (re *)re::VideoDefaults::logEnabled(v41);
  if ((_DWORD)v44)
  {
    v62 = *re::videoLogObjects(v44);
    v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
    if (v63)
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = *(float *)&v41;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = *((float *)&v41 + 1);
      v69 = 2048;
      v70 = v43;
      _os_log_impl(&dword_224FE9000, v62, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Output Color: %f, %f, %f", buf, 0x20u);
    }
    v64 = *re::videoLogObjects((re *)v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = (float)((float)((float)(*(float *)&v41 * 100.0) * 254.0) / 100.0);
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = (float)((float)((float)(*((float *)&v41 + 1) * 100.0) * 254.0) / 100.0);
      v69 = 2048;
      v70 = (float)((float)((float)(v43 * 100.0) * 254.0) / 100.0);
      _os_log_impl(&dword_224FE9000, v64, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Output Color RGB Values: %f, %f, %f", buf, 0x20u);
    }
  }
  return v41;
}

uint64_t re::VideoTextureCache::init(CVMetalTextureCacheRef *this)
{
  uint64_t result;
  const __CFAllocator *v3;
  id v4;

  if (*this)
    return 0;
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = MTLCreateSystemDefaultDevice();
  LODWORD(v3) = CVMetalTextureCacheCreate(v3, 0, v4, 0, this);

  if (!(_DWORD)v3)
    return 1;
  result = 0;
  *this = 0;
  return result;
}

uint64_t re::VideoTextureCache::createTexturesFromPixelBuffer(re::VideoTextureCache *this, CVPixelBufferRef pixelBuffer, re::VideoPixelBufferTextures *a3, int a4)
{
  __IOSurface *IOSurface;
  __IOSurface *v9;
  size_t PlaneCount;
  unint64_t v11;
  unint64_t v12;
  re::CoreVideoUtils *PixelFormatType;
  re *IsTriPlanar;
  NSObject *v15;
  const char *v16;
  size_t Width;
  re *Height;
  size_t v19;
  re *v20;
  const __CFAllocator *v21;
  re *TextureFromImage;
  uint8_t *v23;
  re *v24;
  const __CFAllocator *v25;
  re *v26;
  re *v27;
  int v28;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  re *v31;
  NSObject *v32;
  const char *v33;
  re *v34;
  re *v35;
  re *v36;
  int v37;
  size_t v38;
  size_t v39;
  re *v40;
  NSObject *v41;
  const char *v42;
  CVMetalTextureRef v43;
  CVMetalTextureRef v44;
  CVMetalTextureRef v45;
  uint64_t result;
  CVMetalTextureRef v47;
  uint8_t buf[16];
  CVMetalTextureRef v49;
  CVMetalTextureRef textureOut;
  CVMetalTextureRef texture[2];

  if (!pixelBuffer)
  {
    v15 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      v16 = "Invalid input pixel buffer.";
      goto LABEL_23;
    }
    return 1;
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (!IOSurface)
  {
    v15 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      v16 = "Invalid input pixel buffer.";
      goto LABEL_23;
    }
    return 1;
  }
  v9 = IOSurface;
  PlaneCount = IOSurfaceGetPlaneCount(IOSurface);
  v11 = PlaneCount;
  if (PlaneCount <= 1)
    v12 = 1;
  else
    v12 = PlaneCount;
  PixelFormatType = (re::CoreVideoUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  IsTriPlanar = (re *)re::CoreVideoUtils::pixelFormatIsTriPlanar(PixelFormatType);
  if ((_DWORD)IsTriPlanar && v12 != 3)
  {
    v15 = *re::videoLogObjects(IsTriPlanar);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      v16 = "Invalid input pixel buffer.";
LABEL_23:
      v23 = (uint8_t *)texture;
LABEL_24:
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v16, v23, 2u);
      return 1;
    }
    return 1;
  }
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = (re *)CVPixelBufferGetHeight(pixelBuffer);
  if (!Width || (v19 = (size_t)Height) == 0)
  {
    v15 = *re::videoLogObjects(Height);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      v16 = "Invalid input pixel buffer.";
      goto LABEL_23;
    }
    return 1;
  }
  textureOut = 0;
  texture[0] = 0;
  v49 = 0;
  if ((re::VideoPlatform::isLegacyDevice(Height) & 1) != 0)
  {
    v20 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, 0);
    if (!(_DWORD)v20)
    {
      v15 = *re::videoLogObjects(v20);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        return 1;
      *(_WORD *)buf = 0;
      v16 = "Could not determine pixel buffer's pixel format for plane 1.";
      goto LABEL_33;
    }
    v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    TextureFromImage = (re *)CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)(int)v20, Width, v19, 0, texture);
    if ((_DWORD)TextureFromImage)
    {
      v15 = *re::videoLogObjects(TextureFromImage);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        return 1;
      *(_WORD *)buf = 0;
      v16 = "Unable to create texture from texture cache.";
LABEL_33:
      v23 = buf;
      goto LABEL_24;
    }
    if (v11 >= 2)
    {
      v27 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, 1);
      if (!(_DWORD)v27)
      {
        v32 = *re::videoLogObjects(v27);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_60;
        *(_WORD *)buf = 0;
        v33 = "Could not determine pixel buffer's pixel format for plane 2.";
        goto LABEL_59;
      }
      v28 = (int)v27;
      WidthOfPlane = IOSurfaceGetWidthOfPlane(v9, 1uLL);
      HeightOfPlane = IOSurfaceGetHeightOfPlane(v9, 1uLL);
      v31 = (re *)CVMetalTextureCacheCreateTextureFromImage(v21, *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)v28, WidthOfPlane, HeightOfPlane, 1uLL, &textureOut);
      if ((_DWORD)v31)
      {
        v32 = *re::videoLogObjects(v31);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_60;
        *(_WORD *)buf = 0;
        v33 = "Unable to create texture from texture cache.";
        goto LABEL_59;
      }
    }
    if (v12 >= 3)
    {
      v36 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, 2);
      if (!(_DWORD)v36)
      {
        v41 = *re::videoLogObjects(v36);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        *(_WORD *)buf = 0;
        v42 = "Could not determine pixel buffer's pixel format for plane 3.";
LABEL_70:
        _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, v42, buf, 2u);
LABEL_65:
        if (texture[0])
          CFRelease(texture[0]);
        v47 = textureOut;
        if (!textureOut)
          return 1;
        goto LABEL_61;
      }
      v37 = (int)v36;
      v38 = IOSurfaceGetWidthOfPlane(v9, 2uLL);
      v39 = IOSurfaceGetHeightOfPlane(v9, 2uLL);
      v40 = (re *)CVMetalTextureCacheCreateTextureFromImage(v21, *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)v37, v38, v39, 2uLL, &v49);
      if ((_DWORD)v40)
      {
        v41 = *re::videoLogObjects(v40);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        *(_WORD *)buf = 0;
        v42 = "Unable to create texture from texture cache.";
        goto LABEL_70;
      }
    }
  }
  else
  {
    v24 = re::CoreVideoUtils::metalPixelFormatForPixelBuffer(pixelBuffer, 0, a4);
    if (!(_DWORD)v24)
    {
      v15 = *re::videoLogObjects(v24);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        return 1;
      *(_WORD *)buf = 0;
      v16 = "Could not determine pixel buffer's pixel format for plane 1.";
      goto LABEL_33;
    }
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = (re *)CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)(int)v24, Width, v19, 0, texture);
    if ((_DWORD)v26)
    {
      v15 = *re::videoLogObjects(v26);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        return 1;
      *(_WORD *)buf = 0;
      v16 = "Unable to create texture from texture cache.";
      goto LABEL_33;
    }
    if (v12 == 3)
    {
      v34 = re::CoreVideoUtils::metalPixelFormatForPixelBuffer(pixelBuffer, (__CVBuffer *)2, a4);
      if (!(_DWORD)v34)
      {
        v32 = *re::videoLogObjects(v34);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_60;
        *(_WORD *)buf = 0;
        v33 = "Could not determine pixel buffer's pixel format for plane 3.";
LABEL_59:
        _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, v33, buf, 2u);
LABEL_60:
        v47 = texture[0];
        if (!texture[0])
          return 1;
LABEL_61:
        CFRelease(v47);
        return 1;
      }
      v35 = (re *)CVMetalTextureCacheCreateTextureFromImage(v25, *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)(int)v34, Width, v19, 2uLL, &textureOut);
      if ((_DWORD)v35)
      {
        v32 = *re::videoLogObjects(v35);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_60;
        *(_WORD *)buf = 0;
        v33 = "Unable to create texture from texture cache.";
        goto LABEL_59;
      }
    }
  }
  v43 = texture[0];
  CVPixelBufferRetain(texture[0]);
  *(_QWORD *)a3 = v43;
  v44 = textureOut;
  CVPixelBufferRetain(textureOut);
  *((_QWORD *)a3 + 1) = v44;
  v45 = v49;
  CVPixelBufferRetain(v49);
  *((_QWORD *)a3 + 2) = v45;
  if (texture[0])
    CFRelease(texture[0]);
  if (textureOut)
    CFRelease(textureOut);
  result = (uint64_t)v49;
  if (v49)
  {
    CFRelease(v49);
    return 0;
  }
  return result;
}

uint64_t *re::videoLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::videoLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Video");
  }
  return &re::videoLogObjects(void)::logObjects;
}

re *re::VideoAutoDecrementer::VideoAutoDecrementer(re *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = re::videoMallocAllocator(a1);
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)a1 = &off_24ED8AF30;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 2) = v4;
  v5 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 3) = v5;
    *((_QWORD *)a1 + 4) = v6;
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    *((_QWORD *)a1 + 3) = v5;
    *((_QWORD *)a1 + 4) = 0;
  }
  return a1;
}

void re::VideoAutoDecrementer::~VideoAutoDecrementer(re::VideoAutoDecrementer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint8_t v11[16];

  *(_QWORD *)this = &off_24ED8AF30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (unint64_t *)*((_QWORD *)this + 3);
      if (v5)
      {
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if ((v6 & 0x8000000000000000) != 0)
        {
          v10 = *re::videoLogObjects((re *)v3);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v11 = 0;
            _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "[VideoAutoDecrementer] Count dropped below zero.", v11, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::VideoAutoDecrementer::~VideoAutoDecrementer(this);
  JUMPOUT(0x2276933B8);
}

re::VideoAutoCounter *re::VideoAutoCounter::VideoAutoCounter(re::VideoAutoCounter *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24ED8AF78;
  *((_QWORD *)&v7 + 1) = v2;
  v2[3] = 0;
  *(_QWORD *)&v7 = v2 + 3;
  std::shared_ptr<re::ecs2::PlacementAnimationCurveBundle>::operator=[abi:nn180100]((uint64_t)this, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return this;
}

re *re::VideoAutoCounter::increment@<X0>(unint64_t **this@<X0>, re **a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  re *v6;
  re *result;
  void *memptr;

  v4 = *this;
  if (*this)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  re::videoMallocAllocator((re *)this);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x10uLL, 0x28uLL, 0xC75C8B65uLL);
  v6 = (re *)memptr;
  __dmb(0xBu);
  result = re::VideoAutoDecrementer::VideoAutoDecrementer(v6, (uint64_t *)this);
  *a2 = result;
  return result;
}

unint64_t re::VideoAutoCounter::count(unint64_t **this)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*this)
    return atomic_load(*this);
  v2 = *re::videoLogObjects((re *)this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "[VideoAutoCounter::count] Counter is not initialized.", v3, 2u);
  }
  return -1;
}

void std::__shared_ptr_emplace<std::atomic<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8AF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8AF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

CVPixelBufferRef re::VideoPixelBufferTextures::invalidate(re::VideoPixelBufferTextures *this)
{
  CVPixelBufferRef result;

  CVPixelBufferRetain(0);
  *(_QWORD *)this = 0;
  CVPixelBufferRetain(0);
  *((_QWORD *)this + 1) = 0;
  result = CVPixelBufferRetain(0);
  *((_QWORD *)this + 2) = 0;
  return result;
}

void re::VideoHistogramManager::~VideoHistogramManager(re::VideoHistogramManager *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((unsigned int *)this + 16);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 6) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 14;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 16);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    do
    {
      CVPixelBufferRelease(*(CVPixelBufferRef *)(*((_QWORD *)this + 6) + 56 * v6 + 48));
      if (*((_DWORD *)this + 16) <= (v3 + 1))
        v7 = v3 + 1;
      else
        v7 = *((_DWORD *)this + 16);
      v8 = v3;
      while (1)
      {
        v6 = (v8 + 1);
        if (v7 - 1 == v8)
          break;
        ++v8;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((_QWORD *)this + 6) + 56 * v6 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v7;
LABEL_17:
      ;
    }
    while ((_DWORD)v2 != (_DWORD)v3);
  }
  if (*(_QWORD *)this)
  {
    CFRelease(*(CFTypeRef *)this);
    *(_QWORD *)this = 0;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)this + 4);
}

void re::VideoHistogram::setData(uint64_t a1, unsigned int *a2)
{
  os_unfair_lock_s *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  if (*a2 >= 0x80)
    v5 = 128;
  else
    v5 = *a2;
  *(_QWORD *)(a1 + 1640) = v5;
  re::DynamicInlineArray<unsigned int,128ul>::resize(a1 + 1648, v5);
  v6 = (uint64_t *)(a1 + 2176);
  re::DynamicInlineArray<unsigned int,128ul>::resize(a1 + 2176, v5);
  v7 = (uint64_t *)(a1 + 2704);
  re::DynamicInlineArray<unsigned int,128ul>::resize(a1 + 2704, v5);
  if ((_DWORD)v5)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 1648);
    v11 = *((_QWORD *)a2 + 193);
    v12 = (_DWORD *)(a1 + 1660);
    v13 = *((_QWORD *)a2 + 194);
    v14 = *((_QWORD *)a2 + 195);
    while (v10 != v9)
    {
      *v12 = *(_DWORD *)(v11 + 4 * v9);
      v15 = *v6;
      if (*v6 <= v9)
        goto LABEL_12;
      v12[132] = *(_DWORD *)(v13 + 4 * v9);
      v16 = *v7;
      if (*v7 <= v9)
        goto LABEL_13;
      v12[264] = *(_DWORD *)(v14 + 4 * v9++);
      ++v12;
      if (v5 == v9)
        goto LABEL_10;
    }
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v10, v10);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v9, v15);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v9, v16);
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_10:
    atomic_store(1u, (unsigned __int8 *)(a1 + 44));
    os_unfair_lock_unlock(v4);
  }
}

IOSurfaceRef re::VideoHistogramManager::selectDummySurface(uint64_t a1, IOSurfaceRef buffer, unsigned int a3)
{
  int v5;
  size_t Width;
  re::VideoDefaults *Height;
  re::VideoDefaults *v8;
  size_t v9;
  float v10;
  size_t v11;
  size_t v12;
  re *v13;
  uint64_t ProtectionOptions;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFAllocator *v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *Mutable;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  IOSurfaceRef IOSurface;
  re *v28;
  NSObject *v29;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37[8];
  __int128 v38;
  __int128 v39;
  _BYTE v40[26];
  __int16 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[23];
  CVPixelBufferRef pixelBufferOut[2];
  int v47;
  int valuePtr;
  uint64_t v49;
  _BYTE buf[24];
  size_t v51;
  __int16 v52;
  re::VideoDefaults *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (!buffer)
    return 0;
  if (a3 >= 4)
  {
    v30 = *re::videoLogObjects((re *)a1);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v31 = "Could not determine color primary index for output histogram surface.";
    v32 = buf;
LABEL_25:
    _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, v31, v32, 2u);
    return 0;
  }
  v5 = dword_22619E1E0[(char)a3];
  Width = IOSurfaceGetWidth(buffer);
  Height = (re::VideoDefaults *)IOSurfaceGetHeight(buffer);
  v8 = Height;
  v9 = vcvtps_u32_f32((float)Width * 0.25);
  v10 = (float)(unint64_t)Height;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 > v9 || (v12 = vcvtps_u32_f32(v10 * 0.25), *(_QWORD *)(a1 + 24) > v12))
  {
    v9 = vcvtps_u32_f32((float)Width * 0.5);
    if (v11 > v9 || (v12 = vcvtps_u32_f32(v10 * 0.5), *(_QWORD *)(a1 + 24) > v12))
    {
      v12 = (size_t)Height;
      v9 = Width;
    }
  }
  v13 = (re *)re::VideoDefaults::logEnabled(Height);
  if ((_DWORD)v13)
  {
    v34 = *re::videoLogObjects(v13);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2048;
      v51 = Width;
      v52 = 2048;
      v53 = v8;
      v54 = 2048;
      v55 = v35;
      v56 = 2048;
      v57 = v36;
      _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, "Using histogram output surface with dimensions %zu x %zu. Source: %zu x %zu, Min: %zu x %zu", buf, 0x3Eu);
    }
  }
  ProtectionOptions = IOSurfaceGetProtectionOptions();
  v49 = ProtectionOptions;
  *(_QWORD *)buf = v9;
  *(_QWORD *)&buf[8] = v12;
  *(_QWORD *)&buf[16] = ProtectionOptions;
  LODWORD(v51) = v5;
  v15 = a1 + 32;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_14;
  v16 = ProtectionOptions;
  v17 = *(unsigned int *)(*(_QWORD *)(a1 + 40)
                        + 4
                        * (re::Hash<re::internal::VideoHistogramKey>::operator()((uint64_t)buf)
                         % (unint64_t)*(unsigned int *)(a1 + 56)));
  if ((_DWORD)v17 == 0x7FFFFFFF)
    goto LABEL_14;
  v18 = *(_QWORD *)(a1 + 48);
  while (*(_QWORD *)(v18 + 56 * v17 + 16) != v9
       || *(_QWORD *)(v18 + 56 * v17 + 24) != v12
       || *(_QWORD *)(v18 + 56 * v17 + 32) != v16
       || *(_DWORD *)(v18 + 56 * v17 + 40) != v5)
  {
    v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
    if (v17 == 0x7FFFFFFF)
      goto LABEL_14;
  }
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(v18 + 56 * v17 + 48));
  if (!IOSurface)
  {
LABEL_14:
    v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v47 = 16;
    valuePtr = 1024;
    v23 = CFNumberCreate(v19, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8E40], v23);
    CFRelease(v23);
    v24 = CFNumberCreate(v19, kCFNumberSInt64Type, &v49);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8FC0], v24);
    CFRelease(v24);
    v25 = CFDictionaryCreateMutable(v19, 0, v20, v21);
    CFDictionaryAddValue(v25, (const void *)*MEMORY[0x24BDC5668], Mutable);
    CFRelease(Mutable);
    v26 = CFNumberCreate(v19, kCFNumberIntType, &v47);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC56C8], v26);
    CFRelease(v26);
    pixelBufferOut[0] = 0;
    CVPixelBufferCreate(v19, v9, v12, 0x42475241u, v25, pixelBufferOut);
    CFRelease(v25);
    re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::addNew<__CVBuffer *&>(v15, (uint64_t)buf, pixelBufferOut);
    IOSurface = CVPixelBufferGetIOSurface(pixelBufferOut[0]);
    v38 = 0u;
    v39 = 0u;
    memset(v40, 0, sizeof(v40));
    v43 = 0u;
    v44 = 0u;
    memset(v45, 0, sizeof(v45));
    v41 = 258;
    v42 = 8;
    v28 = (re *)re::_IOSurfaceSetBulkAttachments2();
    if ((_DWORD)v28)
    {
      v29 = *re::videoLogObjects(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v37[0] = 0;
        _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Unable to set surface properties.", (uint8_t *)v37, 2u);
      }
      CVPixelBufferRelease(pixelBufferOut[0]);
      goto LABEL_21;
    }
    if (!IOSurface)
    {
LABEL_21:
      v30 = *re::videoLogObjects(v28);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        return 0;
      LOWORD(pixelBufferOut[0]) = 0;
      v31 = "Unable to select dummy surface.";
      v32 = (uint8_t *)pixelBufferOut;
      goto LABEL_25;
    }
  }
  return IOSurface;
}

__n128 re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::addNew<__CVBuffer *&>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;

  v6 = re::Hash<re::internal::VideoHistogramKey>::operator()(a2);
  v8 = v6;
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || (v9 = v6 % *(unsigned int *)(a1 + 24),
        v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9),
        (_DWORD)v10 == 0x7FFFFFFF))
  {
LABEL_9:
    v12 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v12 == 0x7FFFFFFF)
    {
      v12 = *(unsigned int *)(a1 + 32);
      v13 = v12;
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 56 * v12 + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12) = v8;
    v16 = *(_QWORD *)(a1 + 16) + 56 * v12;
    result = *(__n128 *)a2;
    v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v16 + 32) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 48) = *a3;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    while (*(_QWORD *)(v11 + 56 * v10 + 16) != *(_QWORD *)a2
         || *(_QWORD *)(v11 + 56 * v10 + 24) != *(_QWORD *)(a2 + 8)
         || *(_QWORD *)(v11 + 56 * v10 + 32) != *(_QWORD *)(a2 + 16)
         || *(_DWORD *)(v11 + 56 * v10 + 40) != *(_DWORD *)(a2 + 24))
    {
      v10 = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
      if (v10 == 0x7FFFFFFF)
        goto LABEL_9;
    }
  }
  return result;
}

void re::DynamicInlineArray<unsigned int,128ul>::resize(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
  }
  else
  {
    if (a2 >= 0x81)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 4 * *(_QWORD *)a1 + 12), 4 * (a2 - *(_QWORD *)a1));
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::Hash<re::internal::VideoHistogramKey>::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a1 ^ (*(_QWORD *)a1 >> 30));
  v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  v3 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(a1 + 8) ^ (*(_QWORD *)(a1 + 8) >> 30));
  v4 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(a1 + 16) ^ (*(_QWORD *)(a1 + 16) >> 30));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  v6 = *(unsigned int *)(a1 + 24) ^ ((unint64_t)*(unsigned int *)(a1 + 24) >> 30);
  v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  v8 = (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
      + (v2 << 6)
      + (v2 >> 2)
      - 0x61C8864680B583E9) ^ v2;
  return ((v8 << 6)
        + (v8 >> 2)
        + (((v5 << 6) + (v5 >> 2) + (v7 ^ (v7 >> 31)) - 0x61C8864680B583E9) ^ v5)
        - 0x61C8864680B583E9) ^ v8;
}

void re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(uint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v14 = *v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v6 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17) = v14;
            v21 = *(_QWORD *)(a1 + 16) + 56 * v17;
            v22 = *((_OWORD *)v6 + 2);
            *(_OWORD *)(v21 + 16) = *((_OWORD *)v6 + 1);
            *(_OWORD *)(v21 + 32) = v22;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 48) = v6[6];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

re *re::VideoMipProcessor::deinit(re *this)
{
  id *v1;
  re *v2;
  uint64_t v3;

  v1 = *(id **)this;
  if (*(_QWORD *)this)
  {
    v2 = this;
    v3 = re::globalAllocators(this)[2];

    this = (re *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v3 + 40))(v3, v1);
    *(_QWORD *)v2 = 0;
  }
  return this;
}

void re::VideoMipProcessor::init(re *a1, const re::mtl::Library *a2)
{
  uint64_t *v4;
  re::mtl::MipGenPolyphase *v5;
  NSObject *v6;
  uint8_t v7[16];

  if (*(_QWORD *)a2)
  {
    v4 = re::globalAllocators(a1);
    v5 = (re::mtl::MipGenPolyphase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 8, 8);
    *(_QWORD *)a1 = re::mtl::MipGenPolyphase::MipGenPolyphase(v5, a2);
  }
  else
  {
    v6 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[VideoMipProcessor::init] Metal library is not valid.", v7, 2u);
    }
  }
}

uint64_t re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re *a1, id *a2, id *a3, id *a4, uint64_t a5, uint64_t a6)
{
  id **v8;
  re *v12;
  NSObject *v13;
  const char *v14;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  re *v19;
  uint64_t v20;
  __CFString *v21;
  void *v22;
  _BYTE v23[24];
  uint64_t v24;
  _BYTE *v25;
  uint8_t buf[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
    v13 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v14 = "[VideoMipProcessor::copyAndGenerateMipmapsFromTexture] Not initialized.";
      goto LABEL_22;
    }
    return 1;
  }
  if (!*a3 || (v8 = (id **)a1, (a1 = (re *)*a4) == 0))
  {
    v13 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v14 = "[VideoMipProcessor::copyAndGenerateMipmapsFromTexture] Texture not valid.";
      goto LABEL_22;
    }
    return 1;
  }
  v12 = (re *)-[re mipmapLevelCount](a1, sel_mipmapLevelCount);
  if ((unint64_t)v12 <= 1)
  {
    v13 = *re::videoLogObjects(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v14 = "[VideoMipProcessor::copyAndGenerateMipmapsFromTexture] Destiation texture does not support mipmapping.";
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
      return 1;
    }
    return 1;
  }
  v16 = (unint64_t)objc_msgSend(*a3, sel_protectionOptions);
  v17 = (unint64_t)objc_msgSend(*a4, sel_protectionOptions) | v16;
  v18 = (void *)MEMORY[0x227694090]();
  re::mtl::CommandQueue::makeCommandBuffer(a2, &v22);
  if (a5)
  {
    v20 = re::globalAllocators(v19)[2];
    *(_QWORD *)buf = &off_24ED8AFC8;
    v27 = a5;
    v28 = a6;
    v29 = v20;
    v30 = buf;
    v24 = v20;
    v25 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v23, (uint64_t)buf);
    re::mtl::CommandBuffer::addCompletionHandler(&v22, (uint64_t)v23);
    if (v25)
    {
      (**(void (***)(_BYTE *))v25)(v25);
      if (v25 != v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v25 = 0;
    }
    if (v30)
    {
      (**(void (***)(uint8_t *))v30)(v30);
      if (v30 != buf)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    }
  }
  objc_msgSend(v22, "setProtectionOptions:", v17);
  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v22, buf);
  v21 = CFSTR("Generate RE Video Mipmap");
  objc_msgSend(*(id *)buf, "setLabel:", CFSTR("Generate RE Video Mipmap"));

  objc_msgSend(**v8, "copyAndGenerateMipmapsFromTexture:toTexture:withComputeEncoder:", *a3, *a4, *(_QWORD *)buf);
  objc_msgSend(*(id *)buf, "endEncoding");
  objc_msgSend(v22, "commit");

  objc_autoreleasePoolPop(v18);
  return 0;
}

void re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v3;

  v3 = *a2;
  (*(void (**)(BOOL, _QWORD))(a1 + 8))(objc_msgSend(v3, "status") != 4, *(_QWORD *)(a1 + 16));

}

uint64_t re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED8AFC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED8AFC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 24;
}

__CVBuffer *re::VideoPixelBufferBase::protectionOptions(__CVBuffer **this)
{
  __CVBuffer *result;

  result = *this;
  if (result)
  {
    CVPixelBufferGetIOSurface(result);
    return (__CVBuffer *)IOSurfaceGetProtectionOptions();
  }
  return result;
}

double re::VideoPixelBufferBase::cleanRect(__CVBuffer **this)
{
  __CVBuffer *v1;
  double result;

  v1 = *this;
  if (!v1)
    return *MEMORY[0x24BDBF090];
  *(_QWORD *)&result = (unint64_t)CVImageBufferGetCleanRect(v1);
  return result;
}

CGColorSpaceRef re::VideoPixelBufferBase::colorSpace(CVBufferRef *this)
{
  __CVBuffer *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CGColorSpaceRef ColorSpaceFromAttachments;
  const __CFDictionary *v6;
  CGColorSpaceRef v7;

  v2 = *this;
  if (!v2)
    return 0;
  v3 = (const __CFDictionary *)CVBufferCopyAttachment(v2, (CFStringRef)*MEMORY[0x24BDC5500], 0);
  if (!v3)
  {
    v6 = CVBufferCopyAttachments(*this, kCVAttachmentMode_ShouldPropagate);
    if (v6)
    {
      v4 = v6;
      ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v6);
      goto LABEL_6;
    }
    return 0;
  }
  v4 = v3;
  ColorSpaceFromAttachments = (CGColorSpaceRef)MEMORY[0x227690508]();
LABEL_6:
  v7 = ColorSpaceFromAttachments;
  CFRelease(v4);
  return v7;
}

uint64_t re::VideoPixelBufferBase::colorTags(__CVBuffer **this)
{
  __CVBuffer *v1;
  IOSurfaceRef IOSurface;
  uint64_t v3;
  IOSurfaceRef v5;

  v1 = *this;
  if (v1)
  {
    IOSurface = CVPixelBufferGetIOSurface(v1);
    CFRetain(IOSurface);
  }
  else
  {
    IOSurface = 0;
  }
  v5 = IOSurface;
  v3 = re::VideoSurfaceBase::colorTags((re::VideoSurfaceBase *)&v5);
  if (v5)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v5);
  return v3;
}

__CVBuffer *re::VideoPixelBufferBase::surface@<X0>(__CVBuffer **this@<X0>, IOSurfaceRef *a2@<X8>)
{
  __CVBuffer *result;
  IOSurfaceRef IOSurface;

  result = *this;
  if (result)
  {
    IOSurface = CVPixelBufferGetIOSurface(result);
    result = (__CVBuffer *)CFRetain(IOSurface);
  }
  else
  {
    IOSurface = 0;
  }
  *a2 = IOSurface;
  return result;
}

float re::VideoPixelBufferBase::horizontalDisparityAdjustment(__CVBuffer **this)
{
  __CVBuffer *v1;
  float v2;
  BOOL v3;
  const __CFNumber *v4;
  const __CFNumber *v5;
  CFTypeID v6;
  int valuePtr;

  v1 = *this;
  v2 = 0.0;
  if (v1)
    v3 = MEMORY[0x24BDC54F8] == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = (const __CFNumber *)CVBufferCopyAttachment(v1, (CFStringRef)*MEMORY[0x24BDC54F8], 0);
    if (v4)
    {
      v5 = v4;
      v6 = CFGetTypeID(v4);
      if (v6 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
        v2 = (float)valuePtr / 10000.0;
      }
      CFRelease(v5);
    }
  }
  return v2;
}

void re::VideoPixelBufferBase::setCleanRect(CVPixelBufferRef *this, double a2, double a3, double a4, double a5)
{
  __CVBuffer *v6;
  double Width;
  size_t Height;

  v6 = *this;
  if (v6)
  {
    Width = (double)CVPixelBufferGetWidth(v6);
    Height = CVPixelBufferGetHeight(*this);
    re::VideoPixelBufferBase::setCleanAperture((re::VideoPixelBufferBase *)this, a4 * 0.5 + a2 - Width * 0.5, a5 * 0.5 + a3 - (double)Height * 0.5, a4, a5);
  }
}

void re::VideoPixelBufferBase::setCleanAperture(re::VideoPixelBufferBase *this, double a2, double a3, double a4, double a5)
{
  re *v9;
  NSObject *v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)this)
  {
    v9 = (re *)CVImageBufferSetCleanAperture();
    if ((_DWORD)v9)
    {
      v10 = *re::videoLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 134218752;
        v12 = a4;
        v13 = 2048;
        v14 = a5;
        v15 = 2048;
        v16 = a2;
        v17 = 2048;
        v18 = a3;
        _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Unable to set the pixel buffer's clean aperture to [%f, %f] at offset (%f, %f)", (uint8_t *)&v11, 0x2Au);
      }
    }
  }
}

void re::VideoPixelBufferBase::setHorizontalDisparityAdjustment(CVBufferRef *this, float a2)
{
  CFStringRef *v2;
  BOOL v3;
  CFNumberRef v5;
  CFNumberRef v6;
  float valuePtr;

  valuePtr = a2;
  v2 = (CFStringRef *)MEMORY[0x24BDC54F8];
  if (*this)
    v3 = MEMORY[0x24BDC54F8] == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CVBufferSetAttachment(*this, *v2, v5, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v6);
    }
  }
}

void re::VideoPixelBufferPool::~VideoPixelBufferPool(const void **this)
{
  re::VideoPixelBufferPool::deinit((re::VideoPixelBufferPool *)this);
  if (this[2])
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(this + 2);
  this[2] = 0;
}

void re::VideoPixelBufferPool::deinit(re::VideoPixelBufferPool *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
  *(_QWORD *)this = 0;
  if (*((_QWORD *)this + 2))
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 514;
  *((_BYTE *)this + 26) = 2;
}

BOOL re::VideoPixelBufferPool::initInternal(re::VideoPixelBufferPool *this, int a2, int a3, uint64_t a4, re::CoreVideoUtils *a5, int a6, unsigned __int8 a7, int a8, unsigned int a9, unsigned int a10, BOOL a11, unint64_t a12)
{
  uint64_t v12;
  CVPixelBufferPoolRef *v13;
  const __CFAllocator *v18;
  __CFDictionary *Mutable;
  CFNumberRef v20;
  CGColorSpaceRef *v21;
  _BOOL4 v22;
  const __CFString *v23;
  CGColorSpaceRef v24;
  CGColorSpace *v25;
  CFPropertyListRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  re *v34;
  NSObject *v35;
  int v36;
  uint8_t buf[16];
  int v41;
  int valuePtr;
  int v43;
  int v44;

  v43 = a3;
  v44 = a2;
  v13 = (CVPixelBufferPoolRef *)((char *)this + 8);
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v20 = CFNumberCreate(v18, kCFNumberIntType, &a9);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8E40], v20);
    CFRelease(v20);
    v21 = (CGColorSpaceRef *)((char *)this + 16);
    if (*((_QWORD *)this + 2))
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)this + 2);
    v22 = a11;
    *v21 = 0;
    v23 = (const __CFString *)re::CoreVideoUtils::colorSpaceNameFromColorTags(a5, a6, a7, a8);
    if (v23)
    {
      v24 = CGColorSpaceCreateWithName(v23);
      if (v24)
      {
        v25 = v24;
        if (*v21)
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)this + 2);
        *v21 = v25;
        CFRetain(v25);
        CFRelease(v25);
      }
      if (*v21)
      {
        v26 = CGColorSpaceCopyPropertyList(*v21);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8E88], v26);
        CFRelease(v26);
      }
    }
    if (v22)
    {
      valuePtr = 2;
      v27 = CFNumberCreate(v18, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8F48], v27);
      CFRelease(v27);
    }
    v28 = CFNumberCreate(v18, kCFNumberSInt64Type, &a12);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8FC0], v28);
    CFRelease(v28);
    v29 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionaryAddValue(v29, (const void *)*MEMORY[0x24BDC5668], Mutable);
    CFRelease(Mutable);
    if (v22)
      LODWORD(a4) = re::CoreVideoUtils::compressedPixelFormat(a4);
    v41 = a4;
    v30 = CFNumberCreate(v18, kCFNumberIntType, &v41);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x24BDC56B8], v30);
    CFRelease(v30);
    v31 = CFNumberCreate(v18, kCFNumberIntType, &v44);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x24BDC5708], v31);
    CFRelease(v31);
    v32 = CFNumberCreate(v18, kCFNumberIntType, &v43);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x24BDC5650], v32);
    CFRelease(v32);
    v33 = CFNumberCreate(v18, kCFNumberIntType, &a10);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x24BDC56C8], v33);
    CFRelease(v33);
    CVPixelBufferPoolCreate(v18, 0, v29, v13);
    CFRelease(v29);
    if ((a5 & 0xFFFFFFFD) == 0)
    {
      *((_BYTE *)this + 24) = 1;
      v35 = *re::videoLogObjects(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "Unknown colorPrimaries. Init VideoPixelBufferPool with Fallback Rec 709", buf, 2u);
      }
    }
    *((_BYTE *)this + 24) = (_BYTE)a5;
    *((_BYTE *)this + 25) = a6;
    *((_BYTE *)this + 26) = a7;
    v36 = v43;
    *(_DWORD *)this = v44;
    *((_DWORD *)this + 1) = v36;
  }
  return v12 == 0;
}

void re::VideoPixelBufferPool::createPixelBuffer(re::VideoPixelBufferPool *this@<X0>, _QWORD *a2@<X8>)
{
  __CVPixelBufferPool *v3;
  BOOL v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  re *v8;
  NSObject *v9;
  const char *v10;
  __CVBuffer *v11;
  uint8_t buf[16];
  CVPixelBufferRef pixelBufferOut[2];

  v3 = (__CVPixelBufferPool *)*((_QWORD *)this + 1);
  if (!v3)
  {
    v5 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(pixelBufferOut[0]) = 0;
      v6 = "VideoPixelBufferPool is not initialized.";
      v7 = (uint8_t *)pixelBufferOut;
      goto LABEL_11;
    }
LABEL_18:
    *a2 = 0;
    return;
  }
  pixelBufferOut[0] = 0;
  if (CVPixelBufferPoolCreatePixelBuffer(0, v3, pixelBufferOut))
    v4 = 1;
  else
    v4 = pixelBufferOut[0] == 0;
  if (v4)
  {
    v5 = *re::videoLogObjects(pixelBufferOut[0]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v6 = "Unable to create pixel buffer.";
      v7 = buf;
LABEL_11:
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if (!CVPixelBufferGetIOSurface(pixelBufferOut[0]))
  {
    v9 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v10 = "Unable to get surface from pixel buffer.";
      goto LABEL_21;
    }
LABEL_17:
    CVPixelBufferRelease(pixelBufferOut[0]);
    goto LABEL_18;
  }
  v8 = (re *)re::_IOSurfaceSetBulkAttachments2();
  if ((_DWORD)v8)
  {
    v9 = *re::videoLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v10 = "Unable to set surface properties.";
LABEL_21:
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  v11 = pixelBufferOut[0];
  *a2 = pixelBufferOut[0];
  CVPixelBufferRetain(v11);
  CVPixelBufferRelease(pixelBufferOut[0]);
}

pthread_t **re::VideoProcessor::deinit(pthread_t **this)
{
  pthread_t **v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  pthread_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  pthread_t v17;
  pthread_t v18;
  NSObject *v19;
  uint8_t buf[16];
  _BYTE v21[24];
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  _BYTE v24[64];
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  _BYTE v27[32];
  _BYTE v28[56];
  _BYTE v29[56];
  char v30;
  id v31;
  uint64_t v32;
  unsigned int *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*this)
  {
    v1 = this;
    atomic_store(0, (unsigned __int8 *)*this + 8);
    FigSemaphoreSignal();
    pthread_join(**v1, 0);
    **v1 = 0;
    FigSemaphoreDestroy();
    v21[0] = 0;
    v24[0] = 0;
    v27[0] = 0;
    v28[0] = 0;
    v29[0] = 0;
    v30 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    if ((_DWORD)v2)
    {
      do
      {
        if (v34)
        {
          v3 = std::__shared_weak_count::lock(v34);
          if (v3)
          {
            v4 = v3;
            if (v33)
              atomic_store(7u, v33);
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              v6 = __ldaxr(p_shared_owners);
            while (__stlxr(v6 - 1, p_shared_owners));
            if (!v6)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
        }
        if (v24[0] && v25)
          v25(7, v26);
        if (v21[0] && v22)
          v22(7, v23);
      }
      while ((v2 & 1) != 0);
    }
    v7 = *v1;
    if (*v1)
    {
      if (!*((_BYTE *)v7 + 128)
        || (v2 = (uint64_t)v7[8]) == 0
        || (v2 = objc_msgSend((id)v2, "dispatchAvailableCompletionNotifications"), (v7 = *v1) != 0))
      {
        v8 = re::globalAllocators((re *)v2)[2];
        std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v7 + 14));
        v9 = (std::__shared_weak_count *)v7[13];
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v12 = (std::__shared_weak_count *)v7[11];
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }

        if (v7[6] && v7[7])
        {
          while (1)
          {
            v15 = CMSimpleQueueDequeue((CMSimpleQueueRef)v7[7]);
            if (!v15)
              break;
            {
              re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "success", "clear", 182);
              _os_crash();
              __break(1u);
              break;
            }
          }
          v17 = v7[7];
          if (v17)
          {
            CFRelease(v17);
            v7[7] = 0;
          }
        }
        v18 = v7[7];
        if (v18)
        {
          CFRelease(v18);
          v7[7] = 0;
        }
        v2 = (*(uint64_t (**)(uint64_t, pthread_t *))(*(_QWORD *)v8 + 40))(v8, v7);
      }
    }
    *v1 = 0;
    v19 = *re::videoLogObjects((re *)v2);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "De-initialized RE Video Processor thread.", buf, 2u);
    }
    if (v34)
      std::__shared_weak_count::__release_weak(v34);
    if (v32)
    {

      v32 = 0;
    }
    if (v30)
    {
      objc_destroyWeak(&v31);
      v31 = 0;
    }
    re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v29);
    re::Optional<re::VideoMipGenConfig>::~Optional(v28);
    re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v27);
    return (pthread_t **)re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v24);
  }
  return this;
}

void re::VideoProcessor::init(re *a1, id *a2, id *a3)
{
  uint64_t *v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  OSStatus v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  re *v29;
  id v30;
  char v31;
  sched_param *v32;
  sched_param v33;
  void *v34;
  id v35;
  sched_param *v36;
  sched_param v37;
  void *v38;
  re *v39;
  NSObject *v40;
  uint8_t buf[16];
  sched_param v42;
  id v43;

  if (*(_QWORD *)a1)
    return;
  v6 = re::globalAllocators(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 136, 8);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_QWORD *)(v7 + 128) = 0;
  *(_BYTE *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 113) = 0u;
  *(_QWORD *)a1 = v7;
  atomic_store(1u, (unsigned __int8 *)(v7 + 8));
  v8 = (_anonymous_namespace_ *)FigSemaphoreCreate();
  v9 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 16) = v8;
  *(_QWORD *)(v9 + 32) = v10;
  if (!v10)
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 112);
    _os_crash();
    __break(1u);
    goto LABEL_38;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  CMSimpleQueueCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 8, (CMSimpleQueueRef *)(v9 + 48));
  if (!*(_QWORD *)(v9 + 48))
  {
LABEL_38:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_simpleQueueRef", "init", 115);
    _os_crash();
    __break(1u);
LABEL_39:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "m_simpleQueueRef", "init", 59);
    _os_crash();
    __break(1u);
    goto LABEL_40;
  }
  v14 = 0;
  v15 = 1;
  do
  {
    while (!v15)
    {
      v15 = 0;
      if (++v14 == 8)
        goto LABEL_9;
    }
    v16 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v9 + 48), (const void *)(*(_QWORD *)(v9 + 32) + 336 * v14));
    v15 = v16 == 0;
    ++v14;
  }
  while (v14 != 8);
  while (v16)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unable to construct pool queue.", "enqueueSuccess", "init", 121);
    v16 = _os_crash();
    __break(1u);
  }
  *(_QWORD *)(v9 + 40) = 8;
  v17 = CMSimpleQueueCreate(v12, 8, (CMSimpleQueueRef *)(v9 + 56));
  if (!*(_QWORD *)(v9 + 56))
    goto LABEL_39;
  if (v17)
  {
LABEL_40:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "result == noErr", "init", 60);
    _os_crash();
    __break(1u);
    return;
  }
  v19 = operator new(0x28uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_24ED8B020;
  v19[4] = 0;
  v19[3] = 0;
  v20 = *(_QWORD *)a1;
  v21 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 88);
  *(_QWORD *)(v20 + 80) = v19 + 3;
  *(_QWORD *)(v20 + 88) = v19;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  re::VideoSurfaceAccelerator::init(*(re::VideoSurfaceAccelerator **)(*(_QWORD *)a1 + 80));
  v24 = operator new(0x20uLL);
  v24[1] = 0;
  v24[2] = 0;
  v24[3] = 0;
  *v24 = &off_24ED8B070;
  v25 = *(_QWORD *)a1;
  v26 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 104);
  *(_QWORD *)(v25 + 96) = v24 + 3;
  *(_QWORD *)(v25 + 104) = v24;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(re **)(*(_QWORD *)a1 + 96);
  v43 = *a3;
  re::VideoMipProcessor::init(v29, (const re::mtl::Library *)&v43);

  v30 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD510], sel_alloc), sel_init);
  if (re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch((re::mtl *)objc_msgSend(v30, sel_setCommitSynchronously_, 1)))
  {
    v31 = 1;
    objc_msgSend(v30, sel_setDisableAsyncCompletionDispatch_, 1);
  }
  else
  {
    v31 = 0;
  }
  *(_BYTE *)(*(_QWORD *)a1 + 128) = v31;
  re::mtl::Device::makeCommandQueue(a2, (uint64_t)v30, &v42);
  v32 = (sched_param *)(*(_QWORD *)a1 + 64);
  if (v32 != &v42)
  {
    v33 = v42;
    v42 = 0;
    v34 = (void *)*v32;
    *v32 = v33;

  }
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 64), "setGPUPriority:", 4);
  v35 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD510], sel_alloc), sel_init);
  objc_msgSend(v35, sel_setCommitSynchronously_, 1);
  re::mtl::Device::makeCommandQueue(a2, (uint64_t)v35, &v42);
  v36 = (sched_param *)(*(_QWORD *)a1 + 72);
  if (v36 != &v42)
  {
    v37 = v42;
    v42 = 0;
    v38 = (void *)*v36;
    *v36 = v37;

  }
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 72), "setGPUPriority:", 4);
  v42 = (sched_param)48;
  pthread_create(*(pthread_t **)a1, 0, (void *(__cdecl *)(void *))re::VideoProcessor::threadFunction, *(void **)a1);
  v39 = (re *)pthread_setschedparam(**(pthread_t **)a1, 4, &v42);
  v40 = *re::videoLogObjects(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v40, OS_LOG_TYPE_DEFAULT, "Initialized RE Video Processor thread.", buf, 2u);
  }
  if (v35)

  if (v30)
}

uint64_t re::VideoProcessor::threadFunction(re::VideoProcessor *this, void *a2)
{
  re *v3;
  NSObject *v4;
  _BOOL8 v5;
  unsigned __int8 v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned __int8 *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned __int8 *v18;
  void *v19;
  id v20;
  void *v21;
  std::__shared_weak_count *v22;
  unsigned __int8 v23;
  re *v24;
  NSObject *v25;
  NSObject *v26;
  void *v28;
  void *context;
  uint64_t v30;
  id v31;
  id v32;
  uint8_t buf[48];
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = (re *)pthread_setname_np("RE Video Processor");
  v4 = *re::videoLogObjects(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "RE Video Processor thread started.", buf, 2u);
  }
  if (this && *((_QWORD *)this + 2))
  {
    v28 = (void *)MEMORY[0x227694090]();
    v6 = atomic_load((unsigned __int8 *)this + 8);
    if ((v6 & 1) != 0)
    {
      v7 = &v34;
      v8 = &v35;
      v9 = &v36;
      v10 = &v37;
      v11 = (unsigned __int8 *)&v38;
      v12 = (char *)this + 24;
      do
      {
        context = (void *)MEMORY[0x227694090]();
        buf[0] = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        {
          v30 = v40;
          if (v40)
          {
            v13 = v10;
            v14 = v9;
            v15 = v8;
            v16 = v7;
            v17 = v12;
            v18 = v11;
            v19 = (void *)(v40 + 8);
            v20 = (id)(v40 + 8);
            re::VideoProcessor::process((std::__shared_weak_count *)this, (uint64_t)buf, (uint64_t)&v41, &v30, 0);
            v21 = v19;
            v11 = v18;
            v12 = v17;
            v7 = v16;
            v8 = v15;
            v9 = v14;
            v10 = v13;

            v30 = 0;
          }
          else
          {
            re::VideoProcessor::process((std::__shared_weak_count *)this, (uint64_t)buf, (uint64_t)&v41, &v30, 0);
          }
        }
        v22 = v42;
        v41 = 0;
        v42 = 0;
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        if (v40)
        {

          v40 = 0;
        }
        LOBYTE(v31) = 0;
        re::Optional<re::VideoTransformSurfaceConfig>::operator=((uint64_t)v8, (unsigned __int8 *)&v31);
        re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)&v31);
        if (buf[0])
          buf[0] = 0;
        LOBYTE(v31) = 0;
        re::Optional<re::VideoHDRConfig>::operator=((uint64_t)v7, (unsigned __int8 *)&v31);
        re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)&v31);
        LOBYTE(v31) = 0;
        re::Optional<re::VideoMipGenConfig>::operator=(v9, (unsigned __int8 *)&v31);
        re::Optional<re::VideoMipGenConfig>::~Optional(&v31);
        LOBYTE(v31) = 0;
        re::Optional<re::VideoPSEConfig>::operator=((uint64_t)v10, (unsigned __int8 *)&v31);
        re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)&v31);
        LOBYTE(v31) = 0;
        re::Optional<re::VideoHistogramConfig>::operator=(v11, &v31);
        if ((_BYTE)v31)
          objc_destroyWeak(&v32);
        if (v42)
          std::__shared_weak_count::__release_weak(v42);
        if (v40)
        {

          v40 = 0;
        }
        if (v38)
        {
          objc_destroyWeak(&v39);
          v39 = 0;
        }
        re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v10);
        re::Optional<re::VideoMipGenConfig>::~Optional(v9);
        re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v8);
        re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v7);
        objc_autoreleasePoolPop(context);
        FigSemaphoreWaitRelative();
        v23 = atomic_load((unsigned __int8 *)this + 8);
      }
      while ((v23 & 1) != 0);
    }
    objc_autoreleasePoolPop(v28);
    v25 = *re::videoLogObjects(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "RE Video Processor thread ended.", buf, 2u);
    }
  }
  else
  {
    v26 = *re::videoLogObjects((re *)v5);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Video Processor thread does not have a valid context.", buf, 2u);
    }
  }
  return 0;
}

uint64_t re::FixedSpscQueue<`anonymous namespace'::VideoProcessorAsyncPayload>::pop(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  BOOL v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t result;

  v4 = (char *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 32));
  v5 = (unint64_t)v4;
  if (!v4)
    return v5 != 0;
  if (*(_BYTE *)a2)
    v6 = 0;
  else
    v6 = *v4 == 0;
  if (!v6)
  {
    if (!*(_BYTE *)a2 || *v4)
    {
      if (!*(_BYTE *)a2 && *v4)
        *(_BYTE *)a2 = 1;
      v7 = *(_OWORD *)(v4 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 8);
      *(_OWORD *)(a2 + 24) = v7;
    }
    else
    {
      *(_BYTE *)a2 = 0;
    }
  }
  re::Optional<re::VideoHDRConfig>::operator=((unsigned __int8 *)(a2 + 48), (unsigned __int8 *)v4 + 48);
  re::Optional<re::VideoTransformSurfaceConfig>::operator=((unsigned __int8 *)(a2 + 144), (CFTypeRef *)(v5 + 144));
  re::Optional<re::VideoMipGenConfig>::operator=((_BYTE *)(a2 + 176), (unsigned __int8 *)(v5 + 176));
  re::Optional<re::VideoPSEConfig>::operator=(a2 + 232, (unsigned __int8 *)(v5 + 232));
  re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)(a2 + 288), (id *)(v5 + 288));
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a2 + 304), *(_QWORD *)(v5 + 304));
  v9 = *(_QWORD *)(v5 + 312);
  v8 = *(_QWORD *)(v5 + 320);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(std::__shared_weak_count **)(a2 + 320);
  *(_QWORD *)(a2 + 312) = v9;
  *(_QWORD *)(a2 + 320) = v8;
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
    return v5 != 0;
  re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "success", "pop", 161);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::VideoProcessor::process(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  _QWORD *shared_owners;
  uint64_t v8;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  re *v19;
  uint64_t v20;
  re *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  BOOL v27;
  uint64_t result;
  char v29;
  NSObject *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  re *v37;
  _DWORD *WeakRetained;
  NSObject *v39;
  re::CoreVideoUtils *PixelFormat;
  __IOSurface *v41;
  void *v42;
  size_t Width;
  void *v44;
  void *v45;
  size_t Height;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count **v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  int v56;
  unsigned int **v57;
  id *v58;
  uint64_t v59;
  unsigned int *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  re *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  NSObject *v79;
  _BOOL4 v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  int v85;
  const char *v86;
  int v87;
  const char *v88;
  const char *v89;
  uint64_t *v90;
  re *v91;
  int v92;
  _QWORD *v94;
  id v95;
  id v96;
  id v97;
  uint8_t v98[16];
  __int128 v99;
  __int128 buffer;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  re *v104;
  _QWORD v105[3];
  _QWORD v106[3];
  uint8_t buf[80];
  __int128 v108;
  __int128 v109;
  int v110;
  _QWORD v111[3];
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[4];

  v116[1] = *MEMORY[0x24BDAC8D0];
  v94 = &a1->__vftable;
  shared_owners = (_QWORD *)a1[3].__shared_owners_;
  if (!shared_owners || !*shared_owners)
    return 2;
  v8 = a3;
  if (*(_BYTE *)(a2 + 144))
    v10 = 0;
  else
    v10 = *(_BYTE *)(a2 + 48) == 0;
  if (!v10 || *(_BYTE *)a2 != 0)
  {
    v12 = (*(uint64_t (**)(void))(qword_254123AC8[0] + 32))();
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    objc_initWeak((id *)(v12 + 48), 0);
    *(_QWORD *)(v12 + 56) = 0;
    v14 = v94[10];
    v13 = v94[11];
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 16);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(std::__shared_weak_count **)(v12 + 8);
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v13;
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    v90 = a4;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v12 + 56), *a4);
    buffer = 0uLL;
    v99 = 0uLL;
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v19 = (re *)objc_claimAutoreleasedReturnValue();
    v20 = MEMORY[0x24BDBD1C8];
    v91 = v19;
    if (*(_BYTE *)(a2 + 48))
    {
      v21 = v19;
      v22 = malloc_type_malloc(0x28uLL, 0x10000407607B2BCuLL);
      *(_DWORD *)v22 = 3;
      v22[1] = CFDataGetBytePtr(*(CFDataRef *)(a2 + 88));
      *((_DWORD *)v22 + 4) = CFDataGetLength(*(CFDataRef *)(a2 + 88));
      *(_QWORD *)((char *)v22 + 28) = 0;
      *(_QWORD *)((char *)v22 + 20) = 0;
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", v22, 40, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[re addObject:](v21, "addObject:", v23);
      v115 = *MEMORY[0x24BE51770];
      v116[0] = v20;
      v24 = v20;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v116, &v115, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addEntriesFromDictionary:", v25);

      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer + 8, (const void **)&buffer + 1, *(CFTypeRef *)(a2 + 64));
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer, (const void **)&buffer, *(CFTypeRef *)(a2 + 72));
      v26 = *(_OWORD *)(a2 + 112);
      v99 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(v12 + 32) = v26;
      v27 = *(_BYTE *)(a2 + 128) != 0;

    }
    else
    {
      v24 = MEMORY[0x24BDBD1C8];
      v27 = 0;
    }
    if (*(_BYTE *)(a2 + 144))
    {
      if (buffer != 0)
      {
        v30 = *re::videoLogObjects(v19);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "[VideoProcessor::process] More than one configuration is specified.", buf, 2u);
        }
      }
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer + 8, (const void **)&buffer + 1, *(CFTypeRef *)(a2 + 152));
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer, (const void **)&buffer, *(CFTypeRef *)(a2 + 160));
      if (*(_BYTE *)(a2 + 168))
      {
        v113 = *MEMORY[0x24BE517A8];
        v114 = v24;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v114, &v113, 1);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "addEntriesFromDictionary:", v31);

      }
    }
    if (*(_BYTE *)a2)
    {
      if (*(_QWORD *)(a2 + 8) && *(_QWORD *)(a2 + 16))
      {
        v32 = malloc_type_malloc(0x28uLL, 0x10000407607B2BCuLL);
        *(_DWORD *)v32 = 4;
        v32[1] = CFDataGetBytePtr(*(CFDataRef *)(a2 + 8));
        *((_DWORD *)v32 + 4) = CFDataGetLength(*(CFDataRef *)(a2 + 8));
        *((_DWORD *)v32 + 5) = 1;
        v32[3] = *(_QWORD *)(a2 + 16);
        *((_DWORD *)v32 + 8) = 380;
        objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", v32, 40, 1);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = *MEMORY[0x24BE517A0];
        v111[0] = *MEMORY[0x24BE51768];
        v111[1] = v34;
        v112[0] = v24;
        v112[1] = v24;
        v111[2] = *MEMORY[0x24BE51758];
        v112[2] = v24;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v112, v111, 3);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "addEntriesFromDictionary:", v35);

        -[re addObject:](v91, "addObject:", v33);
        *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + 24);

      }
      else
      {
        v36 = *re::videoLogObjects(v19);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "ASE configuration specifies invalid surfaces.", buf, 2u);
        }
      }
    }
    v37 = (re *)buffer;
    if (*(_BYTE *)(a2 + 288))
    {
      v29 = 0;
      if (!*((_QWORD *)&buffer + 1) || !(_QWORD)buffer)
      {
LABEL_62:

        if ((_QWORD)buffer)
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&buffer);
        v8 = a3;
        a4 = v90;
        if (*((_QWORD *)&buffer + 1))
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&buffer + 1);
        goto LABEL_66;
      }
      WeakRetained = objc_loadWeakRetained((id *)(a2 + 296));
      v37 = (re *)buffer;
      if (WeakRetained)
      {
        v110 = 0;
        v108 = 0u;
        v109 = 0u;
        memset(buf, 0, sizeof(buf));
        if ((_QWORD)buffer && (re::_IOSurfaceGetBulkAttachments(buffer, (uint64_t)buf), !(_DWORD)v37))
        {
          WeakRetained[4] = buf[59];
          WeakRetained[5] = buf[60];
          WeakRetained[6] = buf[58];
          *((_BYTE *)WeakRetained + 29) = v27;
        }
        else
        {
          v39 = *re::videoLogObjects(v37);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v98 = 0;
            _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, "Unable to determine color properties for HDR histogram data.", v98, 2u);
          }
          *((_QWORD *)WeakRetained + 2) = 0x200000002;
          WeakRetained[6] = 2;
          *((_BYTE *)WeakRetained + 29) = 0;
        }
        PixelFormat = (re::CoreVideoUtils *)buffer;
        if ((_QWORD)buffer)
        {
          PixelFormat = (re::CoreVideoUtils *)IOSurfaceGetPixelFormat((IOSurfaceRef)buffer);
          v41 = (__IOSurface *)buffer;
        }
        else
        {
          v41 = 0;
        }
        *((_BYTE *)WeakRetained + 28) = re::CoreVideoUtils::isFullRange(PixelFormat);
        v105[0] = *MEMORY[0x24BE51798];
        v42 = (void *)MEMORY[0x24BDD16E0];
        if (v41)
          Width = IOSurfaceGetWidth(v41);
        else
          Width = 0;
        objc_msgSend(v42, "numberWithUnsignedLong:", Width);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v106[0] = v44;
        v105[1] = *MEMORY[0x24BE51780];
        v45 = (void *)MEMORY[0x24BDD16E0];
        if ((_QWORD)buffer)
          Height = IOSurfaceGetHeight((IOSurfaceRef)buffer);
        else
          Height = 0;
        objc_msgSend(v45, "numberWithUnsignedLong:", Height);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v105[2] = *MEMORY[0x24BE51778];
        v106[1] = v47;
        v106[2] = &unk_24EDB7AF0;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v106, v105, 3);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "addEntriesFromDictionary:", v48);

        re::ArcWeakPtr<re::ecs2::Entity>::operator=((id *)(v12 + 48), (id *)(a2 + 296));
        v37 = (re *)buffer;
      }
    }
    v29 = 0;
    if (*((_QWORD *)&buffer + 1) && v37)
    {
      if (-[re count](v91, "count"))
      {
        v103 = *MEMORY[0x24BE51750];
        v104 = v91;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "addEntriesFromDictionary:", v49);

      }
      v101 = *MEMORY[0x24BE517B0];
      v102 = MEMORY[0x24BDBD1C0];
      v29 = 1;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v102, &v101, 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addEntriesFromDictionary:", v50);

      *(_QWORD *)buf = v18;
      CFRetain(v18);
      v51 = (_QWORD *)v94[10];
      if (v51)
      {
        if (*v51)
          v29 = re::VideoSurfaceAccelerator::transformSurface();
        else
          v29 = 1;
      }
      if (*(_QWORD *)buf)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buf);
    }
    goto LABEL_62;
  }
  v29 = 0;
LABEL_66:
  if (*(_BYTE *)(a2 + 232) && (v29 & 1) == 0)
  {
    a1 = *(std::__shared_weak_count **)(a2 + 248);
    if (a1 && (a1 = std::__shared_weak_count::lock(a1)) != 0)
    {
      v52 = a1;
      v53 = *(std::__shared_weak_count ***)(a2 + 240);
      if (v53)
      {
        a1 = *v53;
        if (*v53)
        {
          a1 = (std::__shared_weak_count *)re::VideoPSEProcessor::Processor::process((re *)a1, (__IOSurface **)(a2 + 264), (uint64_t *)(a2 + 272), *(double *)(a2 + 256), *(float *)(a2 + 280), *(float *)(a2 + 284));
          v29 = (_DWORD)a1 != 0;
        }
        else
        {
          v29 = 1;
        }
      }
      else
      {
        v29 = 0;
      }
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v55 = __ldaxr(p_shared_owners);
      while (__stlxr(v55 - 1, p_shared_owners));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  v56 = 8;
  if (*(_BYTE *)(a2 + 176) && (v29 & 1) == 0)
  {
    *(_QWORD *)buf = 0;
    v57 = (unsigned int **)(*(uint64_t (**)(void))(qword_254123BB8[0] + 32))();
    *v57 = 0;
    v57[1] = 0;
    v57[2] = 0;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v57 + 2, *a4);
    if (a5)
    {
      v58 = (id *)(v94 + 9);
    }
    else
    {
      v60 = *(unsigned int **)v8;
      v59 = *(_QWORD *)(v8 + 8);
      if (v59)
      {
        v61 = (unint64_t *)(v59 + 16);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = (std::__shared_weak_count *)v57[1];
      *v57 = v60;
      v57[1] = (unsigned int *)v59;
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
      v58 = (id *)(v94 + 8);
    }
    v92 = a5;
    re::ObjCObject::operator=((id *)buf, v58);
    if (*(_QWORD *)(a2 + 192) || *(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 200))
    {
      v64 = 0;
      v29 = 0;
      do
      {
        v65 = a2 + 8 * v64;
        v66 = *(id *)(v65 + 184);
        v67 = *(id *)(v65 + 208);
        v68 = (re *)v94[12];
        v97 = *(id *)buf;
        v96 = v66;
        v95 = v67;
        if (v95)
        {

          v95 = 0;
        }
        if (v96)
        {

          v96 = 0;
        }

        if (v67)
        if (v66)

        v29 |= v69 != 0;
        ++v64;
        v70 = *(_QWORD *)(a2 + 184);
        v10 = v70 == 0;
        v71 = v70 != 0;
        if (v10)
          v72 = 1;
        else
          v72 = 2;
        if (*(_QWORD *)(a2 + 192))
          v71 = v72;
        if (*(_QWORD *)(a2 + 200))
          ++v71;
      }
      while (v64 < v71);
    }
    else
    {
      v29 = 0;
    }

    v56 = 5;
    a5 = v92;
    v8 = a3;
  }
  if ((v29 & 1) != 0)
    v73 = 1;
  else
    v73 = v56;
  v74 = *(std::__shared_weak_count **)(v8 + 8);
  if (v74)
  {
    v74 = std::__shared_weak_count::lock(v74);
    if (v74)
    {
      v75 = v74;
      if (*(_QWORD *)v8)
        atomic_store(v73, *(unsigned int **)v8);
      v76 = (unint64_t *)&v74->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
  }
  result = re::VideoDefaults::logEnabled((re::VideoDefaults *)v74);
  if ((_DWORD)result)
  {
    v78 = a5;
    v79 = *re::videoLogObjects((re *)result);
    v80 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v80)
    {
      v81 = "✘";
      if (v78)
        v82 = "✔";
      else
        v82 = "✘";
      if (*(_BYTE *)(a2 + 48))
        v83 = "✔";
      else
        v83 = "✘";
      if (*(_BYTE *)(a2 + 144))
        v84 = "✔";
      else
        v84 = "✘";
      v85 = *(unsigned __int8 *)(a2 + 232);
      if (*(_BYTE *)a2)
        v86 = "✔";
      else
        v86 = "✘";
      v87 = *(unsigned __int8 *)(a2 + 176);
      if (*(_BYTE *)(a2 + 288))
        v88 = "✔";
      else
        v88 = "✘";
      *(_DWORD *)buf = 67110914;
      if (v85)
        v89 = "✔";
      else
        v89 = "✘";
      *(_DWORD *)&buf[4] = v73;
      *(_WORD *)&buf[8] = 2080;
      if (v87)
        v81 = "✔";
      *(_QWORD *)&buf[10] = v82;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v83;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v84;
      *(_WORD *)&buf[38] = 2080;
      *(_QWORD *)&buf[40] = v86;
      *(_WORD *)&buf[48] = 2080;
      *(_QWORD *)&buf[50] = v88;
      *(_WORD *)&buf[58] = 2080;
      *(_QWORD *)&buf[60] = v89;
      *(_WORD *)&buf[68] = 2080;
      *(_QWORD *)&buf[70] = v81;
      _os_log_impl(&dword_224FE9000, v79, OS_LOG_TYPE_DEFAULT, "[VideoProcessor] status: %d, synchronous: %s, hdr: %s, transform: %s, ase: %s, histogram: %s, pse: %s, mipgen: %s", buf, 0x4Eu);
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::videoSurfaceAcceleratorCompletionContextAllocator(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_ *v2;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_499);
  if ((v1 & 1) == 0)
  {
    v2 = (_anonymous_namespace_ *)__cxa_guard_acquire(&_MergedGlobals_499);
    if ((_DWORD)v2)
    {
      __cxa_guard_release(&_MergedGlobals_499);
    }
  }
}

uint64_t `anonymous namespace'::videoSurfaceAcceleratorCompletionCallback(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);
  void (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  re::VideoSurfaceAccelerator *v11;
  char *WeakRetained;
  void *v13;
  re *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _DWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    v4 = *(void (**)(uint64_t, _QWORD))(a2 + 16);
    if (v4)
      v4(result, *(_QWORD *)(a2 + 24));
    v5 = *(void (**)(uint64_t, _QWORD))(a2 + 32);
    if (v5)
      v5(v3, *(_QWORD *)(a2 + 40));
    if (!(_DWORD)v3)
    {
      v8 = *(std::__shared_weak_count **)(a2 + 8);
      if (v8)
      {
        v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          v10 = v9;
          v11 = *(re::VideoSurfaceAccelerator **)a2;
          if (*(_QWORD *)a2)
          {
            WeakRetained = (char *)objc_loadWeakRetained((id *)(a2 + 48));
            if (WeakRetained)
            {
              v13 = WeakRetained;
              v14 = (re *)re::VideoSurfaceAccelerator::histogram(v11, (re::VideoHistogram *)(WeakRetained - 8));
              if ((_DWORD)v14)
              {
                v15 = *re::videoLogObjects(v14);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                {
                  v18[0] = 67109120;
                  v18[1] = 0;
                  _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot get histogram: %x", (uint8_t *)v18, 8u);
                }
              }

            }
          }
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
    }
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {

      *(_QWORD *)(a2 + 56) = 0;
    }
    objc_destroyWeak((id *)(a2 + 48));
    *(_QWORD *)(a2 + 48) = 0;
    v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
    return (*(uint64_t (**)(void))(qword_254123AC8[0] + 40))();
  }
  return result;
}

uint64_t `anonymous namespace'::videoMetalCompletionCallback(uint64_t result, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unsigned int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  if (a2)
  {
    v3 = result;
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4)
    {
      v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        v6 = v5;
        if (*(_QWORD *)a2)
        {
          if (v3)
            v7 = 1;
          else
            v7 = 8;
          atomic_store(v7, *(unsigned int **)a2);
        }
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {

      *(_QWORD *)(a2 + 16) = 0;
    }
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
    return (*(uint64_t (**)(void))(qword_254123BB8[0] + 40))();
  }
  return result;
}

void `anonymous namespace'::videoMetalCompletionContextAllocator(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_ *v2;

  v1 = atomic_load((unsigned __int8 *)&qword_254123AC0);
  if ((v1 & 1) == 0)
  {
    v2 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_254123AC0);
    if ((_DWORD)v2)
    {
      __cxa_guard_release(&qword_254123AC0);
    }
  }
}

void re::VideoProcessor::async(unint64_t **this@<X0>, const re::VideoProcessorConfig *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  unsigned int *v7;
  std::__shared_weak_count *v8;
  re *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  char *v14;
  char *v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  uint64_t i;
  uint64_t j;
  int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  re *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  void (*v38)(uint64_t, _QWORD);
  void (*v39)(uint64_t, _QWORD);
  uint8_t v40[8];
  re *v41;
  uint8_t buf[8];
  __int128 v43;
  __int128 v44;
  unsigned __int8 v45[16];
  CFTypeRef cf;
  CFTypeRef v47;
  CFTypeRef v48;
  __int128 v49;
  _OWORD v50[2];
  char v51[8];
  CFTypeRef v52;
  CFTypeRef v53;
  char v54;
  _BYTE v55[56];
  unsigned __int8 v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFTypeRef v60;
  CFTypeRef v61;
  uint64_t v62;
  char v63[8];
  id v64;
  re *v65;
  unsigned int *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)operator new(0x20uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24ED8B0C0;
  *((_DWORD *)v6 + 6) = -1;
  v7 = (unsigned int *)(v6 + 24);
  *a3 = v6 + 24;
  a3[1] = v6;
  if (*this)
  {
    v8 = (std::__shared_weak_count *)v6;
    re::VideoAutoCounter::increment(this + 1, &v41);
    buf[0] = 0;
    v45[0] = 0;
    v51[0] = 0;
    v55[0] = 0;
    v56[0] = 0;
    v63[0] = 0;
    v66 = 0;
    v67 = 0;
    v65 = 0;
    if (*(_BYTE *)a2)
    {
      buf[0] = 1;
      v43 = *(_OWORD *)((char *)a2 + 8);
      v44 = *(_OWORD *)((char *)a2 + 24);
    }
    re::Optional<re::VideoHDRConfig>::operator=(v45, (unsigned __int8 *)a2 + 48);
    re::Optional<re::VideoTransformSurfaceConfig>::operator=((unsigned __int8 *)v51, (CFTypeRef *)a2 + 18);
    re::Optional<re::VideoMipGenConfig>::operator=(v55, (unsigned __int8 *)a2 + 176);
    re::Optional<re::VideoPSEConfig>::operator=((uint64_t)v56, (unsigned __int8 *)a2 + 232);
    re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)v63, (id *)a2 + 36);
    v9 = v65;
    v65 = v41;
    v41 = v9;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = v67;
    v66 = v7;
    v67 = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    atomic_store(5u, v7);
    v13 = *this;
    v14 = (char *)CMSimpleQueueDequeue((CMSimpleQueueRef)(*this)[6]);
    if (v14)
    {
      v15 = v14;
      v16 = buf[0];
      *v14 = buf[0];
      if (v16)
      {
        v17 = v43;
        *(_OWORD *)(v14 + 24) = v44;
        *(_OWORD *)(v14 + 8) = v17;
      }
      v18 = v45[0];
      v14[48] = v45[0];
      if (v18)
      {
        *((_QWORD *)v14 + 8) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v14 + 64, (const void **)v14 + 8, cf);
        *((_QWORD *)v15 + 9) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v15 + 72, (const void **)v15 + 9, v47);
        *((_QWORD *)v15 + 10) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v15 + 80, (const void **)v15 + 10, v48);
        v19 = v49;
        v20 = v50[0];
        *(_OWORD *)(v15 + 113) = *(_OWORD *)((char *)v50 + 9);
        *(_OWORD *)(v15 + 104) = v20;
        *(_OWORD *)(v15 + 88) = v19;
      }
      v21 = v51[0];
      v15[144] = v51[0];
      if (v21)
      {
        *((_QWORD *)v15 + 19) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v15 + 152, (const void **)v15 + 19, v52);
        *((_QWORD *)v15 + 20) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v15 + 160, (const void **)v15 + 20, v53);
        v15[168] = v54;
      }
      v22 = v55[0];
      v15[176] = v55[0];
      if (v22)
      {
        for (i = 0; i != 24; i += 8)
          *(_QWORD *)&v15[i + 184] = *(id *)&v55[i + 8];
        for (j = 0; j != 24; j += 8)
          *(_QWORD *)&v15[j + 208] = *(id *)&v55[j + 32];
      }
      v25 = v56[0];
      v15[232] = v56[0];
      if (v25)
      {
        *((_QWORD *)v15 + 30) = v57;
        v26 = v58;
        *((_QWORD *)v15 + 31) = v58;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        *((_QWORD *)v15 + 32) = v59;
        *((_QWORD *)v15 + 33) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v15 + 264, (const void **)v15 + 33, v60);
        *((_QWORD *)v15 + 34) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v15 + 272, (const void **)v15 + 34, v61);
        *((_QWORD *)v15 + 35) = v62;
      }
      v29 = v63[0];
      v15[288] = v63[0];
      if (v29)
      {
        *((_QWORD *)v15 + 37) = 0;
        objc_copyWeak((id *)v15 + 37, &v64);
      }
      v30 = v65;
      *((_QWORD *)v15 + 38) = v65;
      if (v30)
        v31 = (char *)v30 + 8;
      *((_QWORD *)v15 + 39) = v66;
      v32 = v67;
      *((_QWORD *)v15 + 40) = v67;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_weak_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (CMSimpleQueueEnqueue((CMSimpleQueueRef)v13[7], v15))
      {
        re::internal::assertLog((re::internal *)4, v35, "assertion failure: '%s' (%s:line %i) ", "success", "emplace", 121);
        _os_crash();
        __break(1u);
      }
      FigSemaphoreSignal();
    }
    else
    {
      v37 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v40 = 0;
        _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, "Unable to enqueue VideoProcessor config.", v40, 2u);
      }
      if (*((_BYTE *)a2 + 48))
      {
        v38 = (void (*)(uint64_t, _QWORD))*((_QWORD *)a2 + 14);
        if (v38)
          v38(7, *((_QWORD *)a2 + 15));
      }
      if (*(_BYTE *)a2)
      {
        v39 = (void (*)(uint64_t, _QWORD))*((_QWORD *)a2 + 3);
        if (v39)
          v39(7, *((_QWORD *)a2 + 4));
      }
      atomic_store(7u, v7);
    }
    if (v67)
      std::__shared_weak_count::__release_weak(v67);
    if (v65)
    {

      v65 = 0;
    }
    if (v63[0])
    {
      objc_destroyWeak(&v64);
      v64 = 0;
    }
    re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v56);
    re::Optional<re::VideoMipGenConfig>::~Optional(v55);
    re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v51);
    re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v45);
    if (v9)

  }
  else
  {
    v36 = *re::videoLogObjects((re *)v6);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "VideoProcessor is not initialized.", buf, 2u);
    }
    atomic_store(1u, v7);
  }
}

void re::VideoProcessor::sync(unint64_t **this@<X0>, const re::VideoProcessorConfig *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  unsigned int *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  re *v12;
  char *v13;
  int v14;
  NSObject *v15;
  re *v16;
  uint8_t buf[8];
  std::__shared_weak_count *v18;
  re *v19;

  v6 = (char *)operator new(0x20uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24ED8B0C0;
  *((_DWORD *)v6 + 6) = -1;
  v7 = (unsigned int *)(v6 + 24);
  *a3 = v6 + 24;
  a3[1] = v6;
  if (*this)
  {
    v8 = (std::__shared_weak_count *)v6;
    re::VideoAutoCounter::increment(this + 1, &v19);
    v9 = *this;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    *(_QWORD *)buf = v7;
    v18 = v8;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = v19;
    v16 = v19;
    if (v19)
    {
      v13 = (char *)v19 + 8;
      v14 = re::VideoProcessor::process((std::__shared_weak_count *)v9, (uint64_t)a2, (uint64_t)buf, (uint64_t *)&v16, 1);

      v16 = 0;
    }
    else
    {
      v14 = re::VideoProcessor::process((std::__shared_weak_count *)v9, (uint64_t)a2, (uint64_t)buf, (uint64_t *)&v16, 1);
    }
    std::__shared_weak_count::__release_weak(v8);
    if (!v14)
      atomic_store(8u, v7);
    if (v12)

  }
  else
  {
    v15 = *re::videoLogObjects((re *)v6);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "VideoProcessor is not initialized.", buf, 2u);
    }
    atomic_store(1u, v7);
  }
}

void re::VideoProcessor::dispatch(unint64_t **this@<X0>, const re::VideoProcessorConfig *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;

  if (re::VideoDefaults::autoSynchronousProcessingAllowed((re::VideoDefaults *)this))
  {
    v8 = re::VideoDefaults::overrideProcessorSynchronousWorkThreshold((re::VideoDefaults *)5);
    if (!a3 || (uint64_t)re::VideoAutoCounter::count(this + 1) >= v8)
      goto LABEL_4;
  }
  else if (!a3)
  {
LABEL_4:
    re::VideoProcessor::async(this, a2, a4);
    return;
  }
  re::VideoProcessor::sync(this, a2, a4);
}

unsigned __int8 *re::Optional<re::VideoHDRConfig>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  int v8;
  BOOL v9;
  const void **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = *a1;
  v4 = *a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      v10 = (const void **)(a1 + 32);
      if (*((_QWORD *)a1 + 4))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v10);
      v11 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 4) = 0;
      if (v11)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 3);
      *((_QWORD *)a1 + 3) = 0;
      if (*((_QWORD *)a1 + 2))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 2);
      *((_QWORD *)a1 + 2) = 0;
      *a1 = 0;
    }
    else
    {
      v8 = (_DWORD)a1 + 16;
      if (v3)
        v9 = 1;
      else
        v9 = v4 == 0;
      if (v9)
      {
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 2, *((CFTypeRef *)a2 + 2));
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)a1 + 24, (const void **)a1 + 3, *((CFTypeRef *)a2 + 3));
      }
      else
      {
        *a1 = 1;
        *((_QWORD *)a1 + 2) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 2, *((CFTypeRef *)a2 + 2));
        *((_QWORD *)a1 + 3) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)a1 + 24, (const void **)a1 + 3, *((CFTypeRef *)a2 + 3));
        *((_QWORD *)a1 + 4) = 0;
      }
      re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)a1 + 32, (const void **)a1 + 4, *((CFTypeRef *)a2 + 4));
      v12 = *(_OWORD *)(a2 + 40);
      v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(a1 + 56) = v13;
      *(_OWORD *)(a1 + 40) = v12;
    }
  }
  return a1;
}

unsigned __int8 *re::Optional<re::VideoTransformSurfaceConfig>::operator=(unsigned __int8 *a1, CFTypeRef *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  int v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = *a1;
  v4 = *(unsigned __int8 *)a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      v10 = a1 + 16;
      v11 = a1 + 8;
      if (*((_QWORD *)a1 + 2))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 2);
      *v10 = 0;
      if (*v11)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 1);
      *((_QWORD *)a1 + 1) = 0;
      *a1 = 0;
    }
    else
    {
      v8 = (_DWORD)a1 + 8;
      if (v3)
        v9 = 1;
      else
        v9 = v4 == 0;
      if (v9)
      {
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 1, a2[1]);
      }
      else
      {
        *a1 = 1;
        *((_QWORD *)a1 + 1) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 1, a2[1]);
        *((_QWORD *)a1 + 2) = 0;
      }
      re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)a1 + 16, (const void **)a1 + 2, a2[2]);
      a1[24] = *((_BYTE *)a2 + 24);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<re::VideoSurfaceAccelerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8B020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::VideoSurfaceAccelerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8B020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<re::VideoSurfaceAccelerator>::__on_zero_shared(uint64_t a1)
{
  re::VideoSurfaceAccelerator::deinit((CFRunLoopRef *)(a1 + 24));
}

void std::__shared_ptr_emplace<re::VideoMipProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8B070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::VideoMipProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8B070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_emplace<re::VideoMipProcessor>::__on_zero_shared(uint64_t a1)
{
  return re::VideoMipProcessor::deinit((re *)(a1 + 24));
}

BOOL re::FixedSpscPool<`anonymous namespace'::VideoProcessorAsyncPayload>::release(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 > a2
    || v2 + 336 * *(_QWORD *)(a1 + 16) - 336 < a2
    || __ROR8__(0xCF3CF3CF3CF3CF3DLL * (a2 - v2), 4) > 0xC30C30C30C30C3uLL)
  {
    return 0;
  }
  v5 = *(std::__shared_weak_count **)(a2 + 320);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = *(_QWORD *)(a2 + 304);
  if (v6)
  {

    *(_QWORD *)(a2 + 304) = 0;
  }
  if (*(_BYTE *)(a2 + 288))
  {
    objc_destroyWeak((id *)(a2 + 296));
    *(_QWORD *)(a2 + 296) = 0;
  }
  re::Optional<re::VideoPSEConfig>::~Optional(a2 + 232);
  re::Optional<re::VideoMipGenConfig>::~Optional((_BYTE *)(a2 + 176));
  re::Optional<re::VideoTransformSurfaceConfig>::~Optional(a2 + 144);
  re::Optional<re::VideoHDRConfig>::~Optional(a2 + 48);
  return CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 24), (const void *)a2) == 0;
}

void re::FixedSpscPool<`anonymous namespace'::VideoProcessorAsyncPayload>::deinit(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  if (a1[1])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[1] = 0;
  }
  *a1 = 0;
  a1[2] = 0;
}

void std::__shared_ptr_emplace<std::atomic<re::VideoReturn>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8B0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<re::VideoReturn>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED8B0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re::VideoPixelBufferPool *re::VideoPixelBufferAllocator::selectPool(re::VideoPixelBufferAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, BOOL a11, unint64_t a12)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  re::VideoPixelBufferPool *v19;
  re::VideoDefaults *v20;
  re *v21;
  NSObject *v22;
  re::VideoDefaults *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  re::VideoPixelBufferPool *v28;
  re *v29;
  NSObject *v30;
  const char *v31;
  int v32;
  const char *v33;
  const char *v34;
  re *v35;
  NSObject *v36;
  int v37;
  __int128 v43;
  unsigned int v44;
  unsigned int v45;
  _BOOL8 v46;
  unint64_t v47;
  uint8_t buf[4];
  uint64_t v49;
  uint8_t v50[8];
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v43 = __PAIR64__(a3, a2);
  DWORD2(v43) = a4;
  BYTE12(v43) = a5;
  BYTE13(v43) = a6;
  BYTE14(v43) = a7;
  HIBYTE(v43) = a8;
  v44 = a9;
  v45 = a10;
  v47 = a12;
  v46 = a11;
  v15 = re::Hash<re::VideoPixelBufferPoolConfiguration>::operator()((uint64_t)&v43);
  if (!*(_QWORD *)this)
    goto LABEL_6;
  v16 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * (v15 % *((unsigned int *)this + 6)));
  if ((_DWORD)v16 == 0x7FFFFFFF)
    goto LABEL_6;
  v17 = *((_QWORD *)this + 2);
  while (1)
  {
    v18 = (uint64_t *)re::VideoPixelBufferPoolConfiguration::operator==(v17 + 96 * v16 + 16, (uint64_t)&v43);
    v17 = *((_QWORD *)this + 2);
    if ((v18 & 1) != 0)
      break;
    v16 = *(_DWORD *)(v17 + 96 * v16 + 8) & 0x7FFFFFFF;
    if (v16 == 0x7FFFFFFF)
      goto LABEL_6;
  }
  v19 = *(re::VideoPixelBufferPool **)(v17 + 96 * v16 + 56);
  if (!v19)
  {
LABEL_6:
    v37 = a8;
    re::makeDefaultUniquePtr<re::VideoPixelBufferPool>((uint64_t *)v50);
    v19 = *(re::VideoPixelBufferPool **)v50;
    re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addNew((uint64_t)this, &v43, (uint64_t *)v50);
    objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Creating pixel buffer pool for new configuration"));
    v20 = (re::VideoDefaults *)objc_claimAutoreleasedReturnValue();
    v21 = (re *)re::VideoDefaults::logEnabled(v20);
    if ((_DWORD)v21)
    {
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n                Width: %d"), a2);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n               Height: %d"), a3);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n         Pixel Format: %s (%d)"), "(undefined)", a4);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n      Color Primaries: %s (%d)"), "(undefined)", a5);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n    Transfer Function: %s (%d)"), "(undefined)", a6);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n         YCbCr Matrix: %s (%d)"), "(undefined)", a7);
      if (v37)
        v33 = "Yes";
      else
        v33 = "No";
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n             Extended: %s"), v33);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n           Cache Mode: %d"), a9);
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n            Alignment: %d"), a10);
      if (a11)
        v34 = "Yes";
      else
        v34 = "No";
      -[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n           Compressed: %s"), v34);
      v21 = (re *)-[re::VideoDefaults appendFormat:](v20, "appendFormat:", CFSTR("\n   Protection Options: %llu"), a12);
    }
    v22 = *re::videoLogObjects(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = objc_retainAutorelease(v20);
      v24 = v22;
      v25 = -[re::VideoDefaults cStringUsingEncoding:](v23, "cStringUsingEncoding:", 1);
      *(_DWORD *)buf = 136315138;
      v49 = v25;
      _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

    }
    re::VideoPixelBufferPool::initInternal(v19, a2, a3, a4, (re::CoreVideoUtils *)a5, a6, a7, v37, a9, a10, a11, a12);

    v18 = std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v50);
    if (!v19)
    {
      v26 = *re::videoLogObjects((re *)v18);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v50 = 0;
        _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Unable to select video pixel buffer pool", v50, 2u);
      }
      return 0;
    }
  }
  v28 = (re::VideoPixelBufferPool *)*((_QWORD *)this + 6);
  if (v28 != v19)
  {
    if (v28)
    {
      v35 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v18);
      if ((_DWORD)v35)
      {
        v36 = *re::videoLogObjects(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v50 = 0;
          _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "Flushing last used pixel buffer pool", v50, 2u);
        }
      }
      v18 = *(uint64_t **)(*((_QWORD *)this + 6) + 8);
      if (v18)
        CVPixelBufferPoolFlush((CVPixelBufferPoolRef)v18, 1uLL);
    }
    *((_QWORD *)this + 6) = v19;
  }
  v29 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v18);
  if ((_DWORD)v29)
  {
    v30 = *re::videoLogObjects(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = "s";
      v32 = *((_DWORD *)this + 7);
      if (v32 == 1)
        v31 = "";
      *(_DWORD *)v50 = 67109378;
      *(_DWORD *)&v50[4] = v32;
      v51 = 2080;
      v52 = v31;
      _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Pixel buffer allocator has %u configuration%s", v50, 0x12u);
    }
  }
  return v19;
}

void re::VideoPixelBufferAllocator::createPixelBuffer(re::VideoPixelBufferAllocator *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, unsigned int a10, unsigned int a11, BOOL a12, unint64_t a13)
{
  re::VideoPixelBufferPool *v14;

  *a9 = 0;
  v14 = re::VideoPixelBufferAllocator::selectPool(this, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
  if (v14)
    re::VideoPixelBufferPool::createPixelBuffer(v14, a9);
}

uint64_t re::makeDefaultUniquePtr<re::VideoPixelBufferPool>(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t result;

  v2 = re::globalAllocators((re *)a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 32, 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_WORD *)(result + 24) = 514;
  *(_BYTE *)(result + 26) = 2;
  *a1 = result;
  a1[1] = (uint64_t)&off_24ED8B110;
  a1[4] = (uint64_t)(a1 + 1);
  return result;
}

uint64_t re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addNew(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = re::Hash<re::VideoPixelBufferPoolConfiguration>::operator()((uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = re::VideoPixelBufferPoolConfiguration::operator==(v10 + 96 * v9 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      return result;
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

unint64_t re::Hash<re::VideoPixelBufferPoolConfiguration>::operator()(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = 73244475 * (*(_DWORD *)a1 ^ HIWORD(*(_DWORD *)a1));
  v4 = (73244475 * (v3 ^ HIWORD(v3))) ^ ((73244475 * (v3 ^ HIWORD(v3))) >> 16);
  v5 = 73244475 * ((73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16));
  v6 = v5 ^ HIWORD(v5);
  v7 = 73244475 * (*(_DWORD *)(a1 + 8) ^ HIWORD(*(_DWORD *)(a1 + 8)));
  v8 = (73244475 * (v7 ^ HIWORD(v7))) ^ ((73244475 * (v7 ^ HIWORD(v7))) >> 16);
  v9 = 73244475
     * ((73244475 * *(unsigned __int8 *)(a1 + 12)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 12)) >> 16));
  v10 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 13)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 13)) >> 16));
  v11 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 14)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 14)) >> 16));
  v12 = (((unint64_t)(v9 ^ HIWORD(v9)) << 6)
       + ((unint64_t)(v9 ^ HIWORD(v9)) >> 2)
       - 0x61C8864680B583E9
       + (((v11 ^ HIWORD(v11))
         + ((unint64_t)(v10 ^ HIWORD(v10)) << 6)
         + ((unint64_t)(v10 ^ HIWORD(v10)) >> 2)
         - 0x61C8864680B583E9) ^ v10 ^ HIWORD(v10))) ^ v9 ^ HIWORD(v9);
  v13 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 15)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 15)) >> 16));
  v14 = v13 ^ HIWORD(v13);
  v15 = 73244475 * (*(_DWORD *)(a1 + 16) ^ HIWORD(*(_DWORD *)(a1 + 16)));
  v16 = re::hashCombine(v4, v6, v8, v12, v14, (73244475 * (v15 ^ HIWORD(v15))) ^ ((73244475 * (v15 ^ HIWORD(v15))) >> 16));
  v17 = 73244475 * (*(_DWORD *)(a1 + 20) ^ HIWORD(*(_DWORD *)(a1 + 20)));
  v18 = (73244475 * (v17 ^ HIWORD(v17))) ^ ((73244475 * (v17 ^ HIWORD(v17))) >> 16);
  v19 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 24)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 24)) >> 16));
  v20 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(a1 + 32) ^ (*(_QWORD *)(a1 + 32) >> 30));
  return ((v16 << 6)
        + (v16 >> 2)
        + ((((unint64_t)v18 << 6)
          + (v18 >> 2)
          - 0x61C8864680B583E9
          + ((((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31))
            + ((unint64_t)(v19 ^ HIWORD(v19)) << 6)
            + ((unint64_t)(v19 ^ HIWORD(v19)) >> 2)
            - 0x61C8864680B583E9) ^ v19 ^ HIWORD(v19))) ^ v18)
        - 0x61C8864680B583E9) ^ v16;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED8B110;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED8B110;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(re *result, const void ***a2)
{
  const void **v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    re::VideoPixelBufferPool::~VideoPixelBufferPool(v2);
    return (re *)(*(uint64_t (**)(uint64_t, const void **))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

uint64_t re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE v35[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(_QWORD *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v35, v13, v12);
          v15 = *(_OWORD *)v35;
          *(_OWORD *)v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v35[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v35[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 56;
            do
            {
              if ((*(_DWORD *)(v22 - 48) & 0x80000000) != 0)
                re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 56) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 56), v22 - 40, v22);
              ++v21;
              v22 += 96;
            }
            while (v21 < v20);
          }
          re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 96 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 96 * v9 + 8) = v24 | 0x80000000;
  v26 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  v27 = *(_QWORD *)(a1 + 16) + 96 * v9;
  v28 = *a4;
  v29 = a4[1];
  *(_QWORD *)(v27 + 48) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(v27 + 16) = v28;
  *(_OWORD *)(v27 + 32) = v29;
  v30 = *(_QWORD *)(a1 + 16) + 96 * v9;
  v31 = *a5;
  *a5 = 0;
  *(_QWORD *)(v30 + 56) = v31;
  v32 = v30 + 56;
  v33 = (uint64_t *)a5[4];
  if (v33)
  {
    if (v33 == a5 + 1)
    {
      *(_QWORD *)(v32 + 32) = v32 + 8;
      (*(void (**)(uint64_t))(*(_QWORD *)a5[4] + 24))(a5[4]);
    }
    else
    {
      *(_QWORD *)(v32 + 32) = v33;
      a5[4] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v32 + 32) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::ecs2::introspect_VideoViewingMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Unknown";
      re::ecs2::introspect_VideoViewingMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Mono";
      qword_25582B7B0 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "Stereo";
      qword_25582B7B8 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_VideoViewingMode(BOOL)::info, "VideoViewingMode", 1, 1, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::ecs2::introspect_VideoViewingMode(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized & 1) != 0)
      return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
    }
  }
  re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_VideoViewingMode(BOOL)::info, a2);
  v19[0] = 0x2CA0FB237FD9860ALL;
  v19[1] = (uint64_t)"VideoViewingMode";
  xmmword_25582B7E8 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
}

uint64_t *re::ecs2::allocInfo_HDRDumpInfo(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_500);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_500))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254123CE0, 0);
    *(uint64_t *)((char *)&qword_254123CF0 + 6) = 0;
    qword_254123CF0 = 0;
    qword_254123D00 = 0;
    qword_254123D08 = 0xFFFFFFFFLL;
    qword_254123CE0 = (uint64_t)&off_24ED7DAA8;
    qword_254123D10 = (uint64_t)"HDRDumpInfo";
    dword_254123D18 = 0;
    unk_254123D20 = 0u;
    unk_254123D30 = 0u;
    unk_254123D40 = 0u;
    qword_254123D50 = 0;
    __cxa_guard_release(&_MergedGlobals_500);
  }
  return &qword_254123CE0;
}

void re::ecs2::initInfo_HDRDumpInfo(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0x1B0999D8E2C7B70;
  v27[1] = "HDRDumpInfo";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_254123CB0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254123CB0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_BOOL((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "enableDumping";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254123CB8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_double((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "startTime";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254123CC0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_double((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "frequency";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254123CC8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::IntrospectionInfo<re::DynamicString>::get(1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "outputDir";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x2000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254123CD0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_double((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "curTime";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x1800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254123CD8 = v25;
      __cxa_guard_release(&qword_254123CB0);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254123CB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::HDRDumpInfo>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::HDRDumpInfo>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HDRDumpInfo>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HDRDumpInfo>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::HDRDumpInfo>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  v3 = (_QWORD *)(a3 + 32);
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::ecs2::HDRDumpInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  double result;

  v4 = (_OWORD *)(a3 + 32);
  v3 = *(_QWORD *)(a3 + 32);
  if (v3)
  {
    if ((*(_BYTE *)(a3 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a3 + 48));
    result = 0.0;
    *v4 = 0u;
    v4[1] = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::HDRDumpInfo>(_OWORD *a1)
{
  _QWORD *v1;

  a1[2] = 0u;
  a1[3] = 0u;
  v1 = a1 + 2;
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::ecs2::HDRDumpInfo>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = (_OWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 48));
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  return result;
}

uint64_t re::ecs2::introspect_HDRDumpInfo(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HDRDumpInfo", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HDRDumpInfo, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HDRDumpInfo, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HDRDumpInfo>, this);
}

void re::VideoPixelFormatDescriptionManager::~VideoPixelFormatDescriptionManager(re::VideoPixelFormatDescriptionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 6;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    do
    {
      CFRelease(*(CFTypeRef *)(*((_QWORD *)this + 2) + 24 * v6 + 16));
      if (*((_DWORD *)this + 8) <= (v3 + 1))
        v7 = v3 + 1;
      else
        v7 = *((_DWORD *)this + 8);
      v8 = v3;
      while (1)
      {
        v6 = (v8 + 1);
        if (v7 - 1 == v8)
          break;
        ++v8;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24 * v6 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v7;
LABEL_17:
      ;
    }
    while ((_DWORD)v2 != (_DWORD)v3);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this);
}

uint64_t re::VideoPixelFormatDescriptionManager::descriptionForPixelFormat(uint64_t a1, OSType pixelFormat, const void **this)
{
  unint64_t v6;
  uint64_t v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  CFDictionaryRef v19;
  int v20;
  const void **v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v25;
  _DWORD v26[2];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v6 = 0xBF58476D1CE4E5B9 * (pixelFormat ^ ((unint64_t)pixelFormat >> 30));
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v7 == 0x7FFFFFFF)
    goto LABEL_3;
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 24 * v7 + 12) != pixelFormat)
  {
    while (1)
    {
      LODWORD(v7) = *(_DWORD *)(v18 + 24 * v7 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v7 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v18 + 24 * v7 + 12) == pixelFormat)
        goto LABEL_14;
    }
LABEL_3:
    if (pixelFormat)
    {
      v8 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x24BDBD240], pixelFormat);
      if (v8)
      {
        v9 = v8;
        v10 = 0xBF58476D1CE4E5B9 * (pixelFormat ^ ((unint64_t)pixelFormat >> 30));
        v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
        v12 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          v12 = v11 % *(unsigned int *)(a1 + 24);
          v13 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v12);
          if ((_DWORD)v13 != 0x7FFFFFFF)
          {
            v25 = *(_QWORD *)(a1 + 16);
            if (*(_DWORD *)(v25 + 24 * v13 + 12) == pixelFormat)
            {
LABEL_25:
              v20 = (int)this;
              v21 = this;
              v19 = v9;
              goto LABEL_26;
            }
            while (1)
            {
              LODWORD(v13) = *(_DWORD *)(v25 + 24 * v13 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v13 == 0x7FFFFFFF)
                break;
              if (*(_DWORD *)(v25 + 24 * v13 + 12) == pixelFormat)
                goto LABEL_25;
            }
          }
        }
        v14 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v14 == 0x7FFFFFFF)
        {
          v14 = *(unsigned int *)(a1 + 32);
          v15 = v14;
          if ((_DWORD)v14 == *(_DWORD *)(a1 + 24))
          {
            re::HashTable<unsigned int,__CFDictionary const*,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            LODWORD(v12) = v11 % *(unsigned int *)(a1 + 24);
            v15 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v15 + 1;
          v16 = *(_QWORD *)(a1 + 16);
          v17 = *(_DWORD *)(v16 + 24 * v14 + 8);
        }
        else
        {
          v16 = *(_QWORD *)(a1 + 16);
          v17 = *(_DWORD *)(v16 + 24 * v14 + 8);
          *(_DWORD *)(a1 + 36) = v17 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v16 + 24 * v14 + 8) = v17 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v14) = v11;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v14 + 12) = pixelFormat;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v14 + 16) = v9;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12) = v14;
        ++*(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 40);
        goto LABEL_25;
      }
      v23 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v26[0] = 67109888;
        v26[1] = HIBYTE(pixelFormat);
        v27 = 1024;
        v28 = BYTE2(pixelFormat);
        v29 = 1024;
        v30 = BYTE1(pixelFormat);
        v31 = 1024;
        v32 = pixelFormat;
        _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "Unable to create pixel format description for (%c%c%c%c)", (uint8_t *)v26, 0x1Au);
      }
    }
    else
    {
      v22 = *re::videoLogObjects((re *)a1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v26[0]) = 0;
        _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Pixel format is invalid.", (uint8_t *)v26, 2u);
      }
      if (*this)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(this);
      *this = 0;
    }
    return 1;
  }
LABEL_14:
  v19 = *(CFDictionaryRef *)(v18 + 24 * v7 + 16);
  v20 = (int)this;
  v21 = this;
LABEL_26:
  re::VideoObject<re::VideoColorTransformBase>::setRef(v20, v21, v19);
  return 0;
}

void re::HashTable<unsigned int,__CFDictionary const*,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned int,__CFDictionary const*,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) = v15;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 12) = *((_DWORD *)v14 - 1);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t (*re::VideoSurfaceAccelerator::internalCompletionCallback(uint64_t (*this)(BOOL, uint64_t), void *a2, uint64_t a3, void *a4))(BOOL, uint64_t)
{
  if (this)
    return (uint64_t (*)(BOOL, uint64_t))this((_DWORD)a2 != 0, a3);
  return this;
}

void re::VideoSurfaceAccelerator::deinit(CFRunLoopRef *this)
{
  CFRunLoopRef v2;
  __CFRunLoopSource *RunLoopSource;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *this;
  if (v2)
  {
    if (this[1])
    {
      RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
      if (RunLoopSource)
      {
        CFRunLoopRemoveSource(this[1], RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD598]);
      }
      else
      {
        v4 = *re::videoLogObjects(0);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Unable to properly deinitialize Surface Accelerator.", v5, 2u);
        }
      }
      this[1] = 0;
      v2 = *this;
    }
    CFRelease(v2);
    *this = 0;
  }
}

void re::VideoSurfaceAccelerator::init(re::VideoSurfaceAccelerator *this)
{
  CFRunLoopRef Main;
  re *v3;
  NSObject *v4;
  uint8_t *v5;
  __CFRunLoopSource *RunLoopSource;
  NSObject *v7;
  uint8_t v8[16];
  __int16 v9;
  uint8_t buf[2];

  if (*(_QWORD *)this)
    return;
  Main = CFRunLoopGetMain();
  *((_QWORD *)this + 1) = Main;
  if (!Main)
  {
    v4 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v5 = buf;
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Unable to create Surface Accelerator.", v5, 2u);
    return;
  }
  v3 = (re *)IOSurfaceAcceleratorCreate();
  if ((_DWORD)v3)
  {
    v4 = *re::videoLogObjects(v3);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return;
    v9 = 0;
    v5 = (uint8_t *)&v9;
    goto LABEL_9;
  }
  RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
  if (RunLoopSource)
  {
    CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD598]);
  }
  else
  {
    v7 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Unable to create Surface Accelerator.", v8, 2u);
    }
    CFRelease(*(CFTypeRef *)this);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

BOOL re::VideoSurfaceAccelerator::transformSurface()
{
  return IOSurfaceAcceleratorTransformSurface() != 0;
}

uint64_t re::VideoSurfaceAccelerator::histogram(re::VideoSurfaceAccelerator *this, re::VideoHistogram *a2)
{
  unsigned int v4[392];

  if (!*(_QWORD *)this || IOSurfaceAcceleratorGetHistogram())
    return 1;
  re::VideoHistogram::setData((uint64_t)a2, v4);
  return 0;
}

IOSurfaceRef re::CoreVideoUtils::pixelBufferColorGamut(__CVBuffer *a1, char *a2)
{
  IOSurfaceRef result;
  re *v4;
  NSObject *v5;
  char v6;
  uint8_t v7[16];
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  result = CVPixelBufferGetIOSurface(a1);
  if (result)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    memset(v8, 0, sizeof(v8));
    re::_IOSurfaceGetBulkAttachments((uint64_t)result, (uint64_t)v8);
    if (!(_DWORD)v4)
    {
      if (BYTE11(v9) > 8u)
      {
        if (BYTE11(v9) == 12)
        {
          v6 = 1;
        }
        else
        {
          result = 0;
          if (BYTE11(v9) != 9)
            return result;
          v6 = 3;
        }
      }
      else if (BYTE11(v9) == 1)
      {
        v6 = 0;
      }
      else
      {
        v6 = 0;
        result = 0;
        if (BYTE11(v9) != 6)
          return result;
      }
      *a2 = v6;
      return (IOSurfaceRef)1;
    }
    v5 = *re::videoLogObjects(v4);
    result = (IOSurfaceRef)os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Unable to determine pixel buffer's color gamut.", v7, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t re::CoreVideoUtils::compressedPixelFormat(uint64_t this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned __int16 v6;
  int v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 v10;

  if ((int)this > 1886676527)
  {
    if ((int)this > 1936077361)
    {
      if ((int)this > 1983013175)
      {
        if ((int)this <= 1999908960)
        {
          switch((_DWORD)this)
          {
            case 0x76326138:
              return 645280312;
            case 0x76346138:
              return 645280824;
            case 0x77333072:
              return 645346162;
          }
        }
        else if ((int)this > 2019964015)
        {
          if ((_DWORD)this == 2019964016)
          {
            return 644232304;
          }
          else if ((_DWORD)this == 2037741158)
          {
            return 645494118;
          }
        }
        else if ((_DWORD)this == 1999908961)
        {
          return 645346401;
        }
        else if ((_DWORD)this == 2016687216)
        {
          return 640955504;
        }
        return this;
      }
      if ((int)this <= 1937125937)
      {
        if ((_DWORD)this != 1936077362)
        {
          if ((_DWORD)this != 1936077876)
          {
            if ((_DWORD)this != 1937125936)
              return this;
            v4 = 645097008;
            return v4 | 0x1000u;
          }
          v2 = 645097008;
          return v2 | 4u;
        }
        v7 = 645097008;
        return v7 | 2u;
      }
      if ((_DWORD)this != 1937125938)
      {
        if ((_DWORD)this != 1937126452)
        {
          if ((_DWORD)this == 1982882104)
            return 645279800;
          return this;
        }
        v5 = 645101106;
        return (v5 + 2);
      }
      v8 = 30258;
      return v8 | 0x26730000u;
    }
    if ((int)this <= 1886859823)
    {
      if ((int)this > 1886680623)
      {
        if ((_DWORD)this == 1886680624)
        {
          v4 = 645162544;
          return v4 | 0x1000u;
        }
        if ((_DWORD)this != 1886680626)
        {
          if ((_DWORD)this != 1886680628)
            return this;
          v5 = 645166642;
          return (v5 + 2);
        }
        v9 = 30258;
      }
      else
      {
        if ((_DWORD)this != 1886676528)
        {
          if ((_DWORD)this != 1886676530)
          {
            if ((_DWORD)this != 1886676532)
              return this;
            v2 = 645162544;
            return v2 | 4u;
          }
          v7 = 645162544;
          return v7 | 2u;
        }
        v9 = 26160;
      }
      return v9 | 0x26740000u;
    }
    if ((int)this <= 1932681586)
    {
      if ((_DWORD)this != 1886859824)
      {
        if ((_DWORD)this == 1886859826)
          return 645429042;
        if ((_DWORD)this == 1886860340)
          return 645429044;
        return this;
      }
      v3 = 645428786;
      return (v3 + 254);
    }
    switch((_DWORD)this)
    {
      case 0x73326173:
        return 645083763;
      case 0x73346173:
        return 645084275;
      case 0x73663230:
        v8 = 26160;
        return v8 | 0x26730000u;
    }
    return this;
  }
  if ((int)this <= 1278226735)
  {
    if ((int)this > 875704949)
    {
      if ((int)this > 1111970368)
      {
        if ((_DWORD)this == 1111970369)
          return 641877825;
        if ((_DWORD)this == 1278226488)
          return 642527288;
        if ((_DWORD)this != 1278226536)
          return this;
        v1 = 642527288;
        return (v1 + 48);
      }
      if ((_DWORD)this != 875704950)
      {
        if ((_DWORD)this == 875836518)
        {
          v2 = 641230384;
          return v2 | 4u;
        }
        if ((_DWORD)this != 875836534)
          return this;
        v5 = 641234482;
        return (v5 + 2);
      }
      v10 = 30258;
    }
    else
    {
      if ((int)this <= 875704421)
      {
        if ((_DWORD)this == 645428788)
          return 1882469428;
        if ((_DWORD)this == 843264056)
          return 640823352;
        if ((_DWORD)this != 843264104)
          return this;
        v1 = 640823352;
        return (v1 + 48);
      }
      if ((_DWORD)this != 875704422)
      {
        if ((_DWORD)this == 875704438)
        {
          v4 = 641230384;
          return v4 | 0x1000u;
        }
        if ((_DWORD)this != 875704934)
          return this;
        v7 = 641230384;
        return v7 | 2u;
      }
      v10 = 26160;
    }
    return v10 | 0x26380000u;
  }
  if ((int)this > 1815162993)
  {
    if ((int)this > 1885745711)
    {
      if ((_DWORD)this != 1885745712)
      {
        if ((_DWORD)this != 1885745714)
        {
          if ((_DWORD)this != 1885746228)
            return this;
          v2 = 645424688;
          return v2 | 4u;
        }
        v7 = 645424688;
        return v7 | 2u;
      }
      v6 = 26160;
    }
    else
    {
      if ((_DWORD)this == 1815162994)
        return 644624754;
      if ((_DWORD)this == 1882468912)
      {
        v4 = 645424688;
        return v4 | 0x1000u;
      }
      if ((_DWORD)this != 1882468914)
        return this;
      v6 = 30258;
    }
    return v6 | 0x26780000u;
  }
  if ((int)this > 1278555700)
  {
    switch((_DWORD)this)
    {
      case 0x4C353635:
        return 642528566;
      case 0x52476841:
        return 642934849;
      case 0x62336138:
        return 643969848;
    }
  }
  else
  {
    switch((_DWORD)this)
    {
      case 0x4C303130:
        return 642527536;
      case 0x4C303132:
        return 642527538;
      case 0x4C303136:
        v3 = 642527288;
        return (v3 + 254);
    }
  }
  return this;
}

uint64_t re::CoreVideoUtils::pixelFormatIsTriPlanar(re::CoreVideoUtils *this)
{
  int v1;
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  v1 = (int)this;
  result = 1;
  if (v1 > 1949458802)
  {
    if (v1 > 1983013175)
    {
      if (v1 > 2016567666)
      {
        if (v1 == 2016567667)
          return result;
        v4 = 2016698739;
      }
      else
      {
        if (v1 == 1983013176)
          return result;
        v4 = 1983144248;
      }
      goto LABEL_21;
    }
    if (v1 != 1949458803 && v1 != 1949589875)
    {
      v4 = 1982882104;
LABEL_21:
      if (v1 != v4)
        return 0;
    }
  }
  else
  {
    if (v1 > 645280311)
    {
      if (v1 > 1932681586)
      {
        if (v1 == 1932681587)
          return result;
        v4 = 1932812659;
        goto LABEL_21;
      }
      if (v1 == 645280312)
        return result;
      v3 = 13368;
      goto LABEL_13;
    }
    if (v1 != 645083763 && v1 != 645084275)
    {
      v3 = 12344;
LABEL_13:
      v4 = v3 | 0x26760000;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t re::metalPixelFormatFromPixelFormatCurrent(re *this, int a2)
{
  unsigned int v3;
  re *v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  NSObject *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v3 = this;
  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (re *)re::CoreVideoUtils::uncompressedPixelFormat(this);
  if ((int)v4 <= 1882468913)
  {
    if ((int)v4 <= 1278555444)
    {
      if ((int)v4 <= 875704933)
      {
        if ((int)v4 > 875704421)
        {
          if ((_DWORD)v4 == 875704422 || (_DWORD)v4 == 875704438)
          {
            v6 = a2 == 0;
            v7 = 500;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
        if ((_DWORD)v4 != 32)
        {
          if ((_DWORD)v4 == 846624121)
          {
            v6 = a2 == 0;
            v7 = 241;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
      }
      else
      {
        if ((int)v4 <= 875836517)
        {
          if ((_DWORD)v4 == 875704934 || (_DWORD)v4 == 875704950)
          {
            v6 = a2 == 0;
            v7 = 502;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
        if ((_DWORD)v4 == 875836518 || (_DWORD)v4 == 875836534)
        {
          v6 = a2 == 0;
          v7 = 503;
          goto LABEL_90;
        }
        if ((_DWORD)v4 != 1111970369)
        {
LABEL_94:
          v10 = *re::videoLogObjects(v4);
          result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            v11[0] = 67109888;
            v11[1] = HIBYTE(v3);
            v12 = 1024;
            v13 = BYTE2(v3);
            v14 = 1024;
            v15 = BYTE1(v3);
            v16 = 1024;
            v17 = v3;
            _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Unsupported pixel format %c%c%c%c", (uint8_t *)v11, 0x1Au);
            return 0;
          }
          return result;
        }
      }
      v6 = a2 == 0;
      v7 = 80;
      goto LABEL_90;
    }
    if ((int)v4 <= 1380411456)
    {
      if ((int)v4 <= 1378955370)
      {
        if ((_DWORD)v4 != 1278555445)
        {
          if ((_DWORD)v4 == 1278555701)
          {
            v6 = a2 == 0;
            v7 = 40;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
        v6 = a2 == 0;
        v7 = 43;
      }
      else
      {
        switch((_DWORD)v4)
        {
          case 0x5231306B:
            v6 = a2 == 0;
            v7 = 90;
            break;
          case 0x52474241:
            v6 = a2 == 0;
            v7 = 70;
            break;
          case 0x52476641:
            v6 = a2 == 0;
            v7 = 125;
            goto LABEL_90;
          default:
            goto LABEL_94;
        }
      }
      goto LABEL_90;
    }
    if ((int)v4 <= 1815162993)
    {
      if ((_DWORD)v4 != 1380411457)
      {
        if ((_DWORD)v4 == 1647534392)
        {
          v6 = a2 == 0;
          v7 = 550;
          goto LABEL_90;
        }
        goto LABEL_94;
      }
      v6 = a2 == 0;
      v7 = 115;
      goto LABEL_90;
    }
    if ((_DWORD)v4 == 1815162994)
    {
      v6 = a2 == 0;
      v7 = 94;
      goto LABEL_90;
    }
    if ((_DWORD)v4 != 1815491698)
    {
      if ((_DWORD)v4 == 1882468912)
        goto LABEL_36;
      goto LABEL_94;
    }
    goto LABEL_77;
  }
  if ((int)v4 > 2016686641)
  {
    if ((int)v4 <= 2019963955)
    {
      if ((int)v4 > 2016687215)
      {
        if ((_DWORD)v4 != 2016687216)
        {
          if ((_DWORD)v4 == 2019963440)
          {
LABEL_31:
            v6 = a2 == 0;
            v7 = 505;
            goto LABEL_90;
          }
          if ((_DWORD)v4 != 2019963442)
            goto LABEL_94;
LABEL_80:
          v6 = a2 == 0;
          v7 = 506;
          goto LABEL_90;
        }
LABEL_72:
        v6 = a2 == 0;
        v7 = 504;
        goto LABEL_90;
      }
      if ((_DWORD)v4 == 2016686642)
        goto LABEL_80;
      if ((_DWORD)v4 != 2016687156)
        goto LABEL_94;
      goto LABEL_81;
    }
    if ((int)v4 <= 2033463605)
    {
      if ((_DWORD)v4 != 2019963956)
      {
        if ((_DWORD)v4 != 2019964016)
          goto LABEL_94;
        goto LABEL_72;
      }
LABEL_81:
      v6 = a2 == 0;
      v7 = 507;
      goto LABEL_90;
    }
    if ((_DWORD)v4 != 2033463606)
    {
      if ((_DWORD)v4 == 2037741158 || (_DWORD)v4 == 2037741171)
      {
        v6 = a2 == 0;
        v7 = 240;
        goto LABEL_90;
      }
      goto LABEL_94;
    }
LABEL_77:
    v6 = a2 == 0;
    v7 = 110;
    goto LABEL_90;
  }
  if ((int)v4 <= 1919365991)
  {
    if ((int)v4 <= 1885745711)
    {
      if ((_DWORD)v4 != 1882468914)
      {
        v5 = 1882469428;
LABEL_48:
        if ((_DWORD)v4 == v5)
        {
          v6 = a2 == 0;
          v7 = 510;
          goto LABEL_90;
        }
        goto LABEL_94;
      }
      goto LABEL_79;
    }
    if ((_DWORD)v4 != 1885745712)
    {
      if ((_DWORD)v4 != 1885745714)
      {
        v5 = 1885746228;
        goto LABEL_48;
      }
LABEL_79:
      v6 = a2 == 0;
      v7 = 509;
      goto LABEL_90;
    }
LABEL_36:
    v6 = a2 == 0;
    v7 = 508;
    goto LABEL_90;
  }
  if ((int)v4 > 1999843441)
  {
    switch((_DWORD)v4)
    {
      case 0x77333072:
        v6 = a2 == 0;
        v7 = 554;
        break;
      case 0x77343061:
        v6 = a2 == 0;
        v7 = 552;
        break;
      case 0x78343230:
        goto LABEL_31;
      default:
        goto LABEL_94;
    }
LABEL_90:
    if (v6)
      return v7;
    else
      return 0;
  }
  if ((_DWORD)v4 == 1919365992)
    return 25;
  if ((_DWORD)v4 != 1982882104)
    goto LABEL_94;
  if (a2 == 2)
    v8 = 10;
  else
    v8 = 0;
  if (a2)
    return v8;
  else
    return 500;
}

uint64_t re::CoreVideoUtils::uncompressedPixelFormat(re::CoreVideoUtils *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v1 = 875704422;
  if ((int)this <= 645428785)
  {
    if ((int)this <= 642934848)
    {
      if ((int)this > 641234479)
      {
        if ((int)this <= 641234483)
        {
          v1 = 875704438;
          if ((_DWORD)this != 641234480)
          {
            v2 = 641234482;
            goto LABEL_44;
          }
          return v1;
        }
        if ((_DWORD)this != 641234484)
        {
          if ((_DWORD)this != 641877825)
            return (uint64_t)this;
          return 1111970369;
        }
        return 875836534;
      }
      if ((_DWORD)this == 641230384)
        return v1;
      if ((_DWORD)this != 641230386)
      {
        v3 = 641230388;
        goto LABEL_25;
      }
      return 875704934;
    }
    if ((int)this <= 645424687)
    {
      if ((_DWORD)this == 642934849)
        return 1380411457;
      if ((_DWORD)this == 643969848)
        return 1647534392;
      if ((_DWORD)this != 645346162)
        return (uint64_t)this;
      return 1999843442;
    }
    if ((int)this <= 645424691)
    {
      if ((_DWORD)this != 645424688)
      {
        if ((_DWORD)this != 645424690)
          return (uint64_t)this;
        return 1885745714;
      }
      v5 = 1882468912;
      return (v5 + 3276800);
    }
    if ((_DWORD)this != 645424692)
    {
      if ((_DWORD)this == 645428784)
        return 1882468912;
      return (uint64_t)this;
    }
    v6 = 1885745714;
    return (v6 + 514);
  }
  if ((int)this > 1530426931)
  {
    if ((int)this <= 1534617139)
    {
      if ((_DWORD)this == 1530426932)
        return 875836534;
      if ((_DWORD)this != 1534617136)
      {
        if ((_DWORD)this != 1534617138)
          return (uint64_t)this;
        return 2019963442;
      }
      v5 = 2016686640;
      return (v5 + 3276800);
    }
    if ((int)this <= 1534621233)
    {
      if ((_DWORD)this != 1534617140)
      {
        if ((_DWORD)this != 1534621232)
          return (uint64_t)this;
        return 2016686640;
      }
      v6 = 2019963442;
      return (v6 + 514);
    }
    if ((_DWORD)this != 1534621234)
    {
      if ((_DWORD)this != 1534621236)
        return (uint64_t)this;
      v4 = 2016686640;
      return (v4 + 516);
    }
    v7 = 2016686640;
    return v7 | 2u;
  }
  if ((int)this <= 1530422833)
  {
    if ((_DWORD)this != 645428786)
    {
      if ((_DWORD)this != 645428788)
      {
        if ((_DWORD)this != 1530422832)
          return (uint64_t)this;
        return v1;
      }
      v4 = 1882468912;
      return (v4 + 516);
    }
    v7 = 1882468912;
    return v7 | 2u;
  }
  if ((int)this <= 1530426927)
  {
    if ((_DWORD)this != 1530422834)
    {
      v3 = 1530422836;
LABEL_25:
      if ((_DWORD)this != v3)
        return (uint64_t)this;
      return 875836518;
    }
    return 875704934;
  }
  v1 = 875704438;
  if ((_DWORD)this != 1530426928)
  {
    v2 = 1530426930;
LABEL_44:
    if ((_DWORD)this == v2)
      return 875704950;
    return (uint64_t)this;
  }
  return v1;
}

uint64_t re::metalPixelFormatFromPixelFormatLegacy(re *this, int a2)
{
  unsigned int v3;
  re *v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  NSObject *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v3 = this;
  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (re *)re::CoreVideoUtils::uncompressedPixelFormat(this);
  if ((int)v4 <= 1380411456)
  {
    if ((int)v4 <= 875836517)
    {
      if ((int)v4 > 875704437)
      {
        if ((_DWORD)v4 == 875704438 || (_DWORD)v4 == 875704934)
          goto LABEL_38;
        v9 = 12918;
      }
      else
      {
        if ((_DWORD)v4 == 32)
        {
LABEL_30:
          v6 = a2 == 0;
          v7 = 80;
          goto LABEL_59;
        }
        if ((_DWORD)v4 == 846624121)
        {
          v6 = a2 == 0;
          v7 = 241;
          goto LABEL_59;
        }
        v9 = 12390;
      }
      if ((_DWORD)v4 != (v9 | 0x34320000))
        goto LABEL_63;
    }
    else
    {
      if ((int)v4 > 1278555444)
      {
        if ((int)v4 > 1380401728)
        {
          if ((_DWORD)v4 == 1380401729)
          {
            v6 = a2 == 0;
            v7 = 70;
          }
          else
          {
            if ((_DWORD)v4 != 1380410945)
              goto LABEL_63;
            v6 = a2 == 0;
            v7 = 125;
          }
        }
        else if ((_DWORD)v4 == 1278555445)
        {
          v6 = a2 == 0;
          v7 = 43;
        }
        else
        {
          if ((_DWORD)v4 != 1378955371)
            goto LABEL_63;
          v6 = a2 == 0;
          v7 = 90;
        }
        goto LABEL_59;
      }
      if ((_DWORD)v4 != 875836518 && (_DWORD)v4 != 875836534)
      {
        if ((_DWORD)v4 != 1111970369)
          goto LABEL_63;
        goto LABEL_30;
      }
    }
LABEL_38:
    v5 = a2 == 0;
    goto LABEL_39;
  }
  if ((int)v4 <= 2016687155)
  {
    if ((int)v4 > 1919365991)
    {
      if ((int)v4 <= 2016686639)
      {
        if ((_DWORD)v4 == 1919365992)
          return 25;
        if ((_DWORD)v4 == 1982882104)
        {
          v5 = (a2 & 0xFFFFFFFD) == 0;
LABEL_39:
          v11 = 30;
          v12 = 10;
          goto LABEL_44;
        }
        goto LABEL_63;
      }
      if ((_DWORD)v4 != 2016686640)
      {
        v10 = 2016686642;
        goto LABEL_42;
      }
LABEL_43:
      v5 = a2 == 0;
      v11 = 60;
      v12 = 20;
LABEL_44:
      if (v5)
        return v12;
      else
        return v11;
    }
    if ((_DWORD)v4 == 1380411457)
    {
      v6 = a2 == 0;
      v7 = 115;
      goto LABEL_59;
    }
    if ((_DWORD)v4 == 1815162994)
    {
      v6 = a2 == 0;
      v7 = 94;
      goto LABEL_59;
    }
    v8 = 1815491698;
    goto LABEL_25;
  }
  if ((int)v4 > 2019963955)
  {
    if ((int)v4 <= 2037741157)
    {
      if ((_DWORD)v4 == 2019963956)
        goto LABEL_43;
      v8 = 2033463606;
LABEL_25:
      if ((_DWORD)v4 != v8)
        goto LABEL_63;
      v6 = a2 == 0;
      v7 = 110;
      goto LABEL_59;
    }
    if ((_DWORD)v4 != 2037741158 && (_DWORD)v4 != 2037741171)
      goto LABEL_63;
    v6 = a2 == 0;
    v7 = 240;
LABEL_59:
    if (v6)
      return v7;
    else
      return 0;
  }
  if ((_DWORD)v4 == 2016687156 || (_DWORD)v4 == 2019963440)
    goto LABEL_43;
  v10 = 2019963442;
LABEL_42:
  if ((_DWORD)v4 == v10)
    goto LABEL_43;
LABEL_63:
  v14 = *re::videoLogObjects(v4);
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v15[0] = 67109888;
    v15[1] = HIBYTE(v3);
    v16 = 1024;
    v17 = BYTE2(v3);
    v18 = 1024;
    v19 = BYTE1(v3);
    v20 = 1024;
    v21 = v3;
    _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Unsupported pixel format %c%c%c%c", (uint8_t *)v15, 0x1Au);
    return 0;
  }
  return result;
}

uint64_t re::CoreVideoUtils::metalPixelFormatFromPixelFormat(re::CoreVideoUtils *this, int a2)
{
  if ((re::VideoPlatform::isLegacyDevice(this) & 1) != 0)
    return re::metalPixelFormatFromPixelFormatLegacy(this, a2);
  else
    return re::metalPixelFormatFromPixelFormatCurrent(this, a2);
}

uint64_t re::CoreVideoUtils::metalPixelFormatSRGBVariant(re::VideoDefaults *a1)
{
  uint64_t v1;
  re *v2;
  NSObject *v3;
  _DWORD v5[2];
  uint64_t v6;

  v1 = (uint64_t)a1;
  v6 = *MEMORY[0x24BDAC8D0];
  if ((int)a1 > 549)
  {
    switch((int)a1)
    {
      case 550:
        return 551;
      case 551:
      case 553:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
        goto LABEL_20;
      case 552:
        return 553;
      case 554:
        return 555;
      case 563:
        goto LABEL_8;
      case 564:
        goto LABEL_13;
      case 565:
        goto LABEL_14;
      case 566:
        goto LABEL_15;
      case 567:
        goto LABEL_16;
      case 568:
        goto LABEL_17;
      case 569:
        goto LABEL_18;
      default:
        switch((int)a1)
        {
          case 607:
            goto LABEL_8;
          case 608:
            goto LABEL_13;
          case 609:
            goto LABEL_14;
          case 610:
            goto LABEL_15;
          case 611:
            goto LABEL_16;
          case 612:
            goto LABEL_17;
          case 613:
            goto LABEL_18;
          default:
            if ((_DWORD)a1 != 629)
              goto LABEL_20;
            return 628;
        }
    }
  }
  if ((int)a1 <= 499)
  {
    switch((_DWORD)a1)
    {
      case 'F':
        return 71;
      case 'P':
        return 81;
      case '^':
        return 628;
      default:
LABEL_20:
        v2 = (re *)re::VideoDefaults::logEnabled(a1);
        if ((_DWORD)v2)
        {
          v3 = *re::videoLogObjects(v2);
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          {
            v5[0] = 67109120;
            v5[1] = v1;
            _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Hardware sRGB engamma and degamma not supported for (%d)", (uint8_t *)v5, 8u);
          }
        }
        break;
    }
  }
  else
  {
    switch((int)a1)
    {
      case 500:
        v1 = 520;
        break;
      case 502:
        v1 = 522;
        break;
      case 503:
        v1 = 523;
        break;
      case 504:
LABEL_8:
        v1 = 524;
        break;
      case 505:
LABEL_13:
        v1 = 525;
        break;
      case 506:
LABEL_14:
        v1 = 526;
        break;
      case 507:
LABEL_15:
        v1 = 527;
        break;
      case 508:
LABEL_16:
        v1 = 528;
        break;
      case 509:
LABEL_17:
        v1 = 529;
        break;
      case 510:
LABEL_18:
        v1 = 530;
        break;
      default:
        goto LABEL_20;
    }
  }
  return v1;
}

uint64_t re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 519)
  {
    if (a1 != 71 && a1 != 81)
      return 0;
  }
  else if (((a1 - 520) > 0x23 || ((1 << (a1 - 8)) & 0xA800007FDLL) == 0) && a1 != 628)
  {
    return 0;
  }
  return result;
}

re::VideoDefaults *re::CoreVideoUtils::metalPixelFormatForPixelBuffer(re::CoreVideoUtils *this, __CVBuffer *a2, int a3)
{
  int v4;
  IOSurfaceRef IOSurface;
  re *v7;
  NSObject *v8;
  re::VideoDefaults *v9;
  re::VideoDefaults *PixelFormatType;
  int v11;
  re *v12;
  re *v13;
  NSObject *v14;
  const char *v15;
  re *HasHardwareTransferFunction;
  int v17;
  NSObject *v18;
  _BOOL4 v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  re *v23;
  re *v24;
  NSObject *v26;
  NSObject *v27;
  uint64_t Name;
  uint64_t v29;
  _BOOL4 v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v4 = (int)a2;
  v51 = *MEMORY[0x24BDAC8D0];
  IOSurface = CVPixelBufferGetIOSurface(this);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v31, 0, sizeof(v31));
  re::_IOSurfaceGetBulkAttachments((uint64_t)IOSurface, (uint64_t)v31);
  if ((_DWORD)v7)
  {
    v8 = *re::videoLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Unable to get surface properties.", buf, 2u);
    }
    return 0;
  }
  PixelFormatType = (re::VideoDefaults *)CVPixelBufferGetPixelFormatType(this);
  v11 = BYTE12(v32);
  v12 = (re *)re::VideoDefaults::logEnabled(PixelFormatType);
  if ((_DWORD)v12)
  {
    v26 = *re::videoLogObjects(v12);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316674;
      v38 = "(undefined)";
      v39 = 1024;
      v40 = v11;
      v41 = 2080;
      v42 = "(undefined)";
      v43 = 1024;
      v44 = PixelFormatType >> 24;
      v45 = 1024;
      v46 = BYTE2(PixelFormatType);
      v47 = 1024;
      v48 = BYTE1(PixelFormatType);
      v49 = 1024;
      v50 = PixelFormatType;
      _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "Selecting variant for transfer function %s (%d) and pixel format %s (%c%c%c%c)", buf, 0x34u);
    }
  }
  v13 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, v4);
  v9 = v13;
  if (a3)
  {
    switch(v11)
    {
      case 8:
        goto LABEL_23;
      case 18:
        v14 = *re::videoLogObjects(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v15 = "Hardware HLG degamma not supported. Selecting sRGB degamma variant for HLG signal.";
          goto LABEL_20;
        }
        break;
      case 16:
        v14 = *re::videoLogObjects(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v15 = "Hardware PQ degamma not supported. Selecting sRGB degamma variant for PQ signal.";
LABEL_20:
          _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
        }
        break;
      default:
        v23 = (re *)re::VideoDefaults::logEnabled(v13);
        if (!(_DWORD)v23)
          break;
        v14 = *re::videoLogObjects(v23);
        v30 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v11 == 13)
        {
          if (!v30)
            break;
          *(_WORD *)buf = 0;
          v15 = "Selecting sRGB degamma variant for sRGB signal.";
        }
        else
        {
          if (!v30)
            break;
          *(_WORD *)buf = 0;
          v15 = "Selecting sRGB degamma variant for unknown non-linear signal.";
        }
        goto LABEL_20;
    }
    v13 = (re *)re::CoreVideoUtils::metalPixelFormatSRGBVariant(v9);
    v9 = v13;
LABEL_23:
    v24 = (re *)re::VideoDefaults::logEnabled(v13);
    if (!(_DWORD)v24)
      return v9;
    v27 = *re::videoLogObjects(v24);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return v9;
    v20 = v27;
    Name = MTLPixelFormatGetName();
    *(_DWORD *)buf = 136315138;
    v38 = (const char *)Name;
    v22 = "Selected %s variant.";
LABEL_31:
    _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, v22, buf, 0xCu);

    return v9;
  }
  if (v11 == 13)
  {
    v13 = (re *)re::CoreVideoUtils::metalPixelFormatSRGBVariant(v13);
    v9 = v13;
  }
  if (re::VideoDefaults::logEnabled(v13))
  {
    HasHardwareTransferFunction = (re *)re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction((int)v9);
    v17 = (int)HasHardwareTransferFunction;
    v18 = *re::videoLogObjects(HasHardwareTransferFunction);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      if (!v19)
        return v9;
      v20 = v18;
      v21 = MTLPixelFormatGetName();
      *(_DWORD *)buf = 136315138;
      v38 = (const char *)v21;
      v22 = "Selected variant %s.";
    }
    else
    {
      if (!v19)
        return v9;
      v20 = v18;
      v29 = MTLPixelFormatGetName();
      *(_DWORD *)buf = 136315138;
      v38 = (const char *)v29;
      v22 = "Variant not found for %s.";
    }
    goto LABEL_31;
  }
  return v9;
}

BOOL re::CoreVideoUtils::pixelBufferIsHDR(re::CoreVideoUtils *this, __CVBuffer *a2)
{
  _BOOL8 v3;
  IOSurfaceRef IOSurface;
  __IOSurface *v5;
  re *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const __CFBoolean *v11;
  const __CFBoolean *v12;
  __int16 v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  if (CVPixelBufferGetPixelFormatType(this) == 1380411457)
    return 1;
  IOSurface = CVPixelBufferGetIOSurface(this);
  if (!IOSurface)
  {
    v7 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v8 = "Unable to read input surface.";
      v9 = buf;
      goto LABEL_14;
    }
    return 0;
  }
  v5 = IOSurface;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)buf = 0u;
  re::_IOSurfaceGetBulkAttachments((uint64_t)IOSurface, (uint64_t)buf);
  if ((_DWORD)v6)
  {
    v7 = *re::videoLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v13 = 0;
      v8 = "Unable to read input surface properties.";
      v9 = (uint8_t *)&v13;
LABEL_14:
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
      return 0;
    }
    return 0;
  }
  if ((BYTE12(v17) & 0xFD) != 0x10)
  {
    v11 = (const __CFBoolean *)IOSurfaceCopyValue(v5, CFSTR("isHLG"));
    if (v11)
    {
      v12 = v11;
      v3 = CFBooleanGetValue(v11) != 0;
      CFRelease(v12);
      return v3;
    }
    return 0;
  }
  return 1;
}

void re::CoreVideoUtils::printPixelBufferInfo(re::CoreVideoUtils *this, __CVBuffer *a2, NSMutableString *a3)
{
  __CVBuffer *v4;
  __IOSurface *IOSurface;
  __IOSurface *v6;
  size_t PlaneCount;
  re::CoreVideoUtils *PixelFormatType;
  unsigned int v9;
  const char *v10;
  int v11;
  const __CFString *v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned int v18;
  int IsTriPlanar;
  double BulkAttachments;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t Width;
  size_t Height;
  const char *v27;
  const char *v28;
  __CVBuffer *v29;
  _BOOL4 IsHDR;
  const char *v31;
  const char *v32;
  _OWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  unsigned int v39;

  v4 = a2;
  if (!this)
  {
    v12 = CFSTR("\nInvalid input pixel buffer.");
LABEL_17:
    -[__CVBuffer appendString:](v4, "appendString:", v12);
    goto LABEL_99;
  }
  IOSurface = CVPixelBufferGetIOSurface(this);
  if (!IOSurface)
  {
    v12 = CFSTR("\nInvalid input pixel buffer surface.");
    goto LABEL_17;
  }
  v6 = IOSurface;
  PlaneCount = IOSurfaceGetPlaneCount(IOSurface);
  if (!PlaneCount)
    -[__CVBuffer appendString:](v4, "appendString:", CFSTR("\nInvalid input pixel buffer plane count."));
  v39 = 2;
  if (IOSurfaceGetYCbCrMatrix())
    -[__CVBuffer appendString:](v4, "appendString:", CFSTR("\nUnable to read input surface YCbCrMatrix. Bulk attachments may exist."));
  PixelFormatType = (re::CoreVideoUtils *)CVPixelBufferGetPixelFormatType(this);
  v9 = PixelFormatType;
  v10 = "Yes";
  if ((int)PixelFormatType > 645166639)
  {
    if ((int)PixelFormatType <= 645429039)
    {
      if ((int)PixelFormatType <= 645411442)
      {
        if ((int)PixelFormatType > 645280311)
        {
          if ((int)PixelFormatType > 645346161)
          {
            if ((_DWORD)PixelFormatType == 645346162)
              goto LABEL_86;
            v11 = 645346401;
LABEL_85:
            if ((_DWORD)PixelFormatType == v11)
              goto LABEL_86;
            goto LABEL_100;
          }
          if ((_DWORD)PixelFormatType == 645280312)
            goto LABEL_86;
          v14 = 13368;
        }
        else
        {
          if (((_DWORD)PixelFormatType - 645166640) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          v14 = 12344;
        }
        v11 = v14 | 0x26760000;
        goto LABEL_85;
      }
      if ((int)PixelFormatType <= 645428783)
      {
        if (((_DWORD)PixelFormatType - 645424688) <= 4
          && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0
          || (_DWORD)PixelFormatType == 645411443)
        {
          goto LABEL_86;
        }
        v11 = 645411955;
        goto LABEL_85;
      }
      v13 = -645428784;
    }
    else
    {
      if ((int)PixelFormatType <= 1530426927)
      {
        if ((int)PixelFormatType > 645494130)
        {
          if (((_DWORD)PixelFormatType - 1530422832) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          v16 = 30067;
        }
        else
        {
          if (((_DWORD)PixelFormatType - 645429040) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          v16 = 30054;
        }
        v11 = v16 | 0x26790000;
        goto LABEL_85;
      }
      if (((_DWORD)PixelFormatType - 1530426928) <= 4
        && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0
        || ((_DWORD)PixelFormatType - 1534617136) <= 4
        && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
      {
        goto LABEL_86;
      }
      v13 = -1534621232;
    }
  }
  else
  {
    if ((int)PixelFormatType > 642934848)
    {
      if ((int)PixelFormatType > 645101103)
      {
        if ((int)PixelFormatType > 645149810)
        {
          if (((_DWORD)PixelFormatType - 645162544) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          v15 = 13427;
        }
        else
        {
          if (((_DWORD)PixelFormatType - 645101104) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          v15 = 12915;
        }
        v11 = v15 | 0x26740000;
      }
      else if ((int)PixelFormatType <= 645083762)
      {
        if ((int)PixelFormatType > 644232303)
        {
          if ((_DWORD)PixelFormatType == 644232304)
            goto LABEL_86;
          v11 = 644624754;
        }
        else
        {
          if ((_DWORD)PixelFormatType == 642934849)
            goto LABEL_86;
          v11 = 643969848;
        }
      }
      else
      {
        if (((_DWORD)PixelFormatType - 645097008) <= 4
          && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0
          || (_DWORD)PixelFormatType == 645083763)
        {
          goto LABEL_86;
        }
        v11 = 645084275;
      }
      goto LABEL_85;
    }
    if ((int)PixelFormatType > 641877824)
    {
      if ((int)PixelFormatType <= 642527535)
      {
        if ((_DWORD)PixelFormatType == 641877825 || (_DWORD)PixelFormatType == 642527288)
          goto LABEL_86;
        v17 = 12392;
      }
      else
      {
        if (((_DWORD)PixelFormatType - 642527536) <= 6
          && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x45) != 0)
        {
          goto LABEL_86;
        }
        v17 = 13622;
      }
      v11 = v17 | 0x264C0000;
      goto LABEL_85;
    }
    if ((int)PixelFormatType <= 641230383)
    {
      if ((_DWORD)PixelFormatType == 640823352 || (_DWORD)PixelFormatType == 640823400)
        goto LABEL_86;
      v11 = 640955504;
      goto LABEL_85;
    }
    if (((_DWORD)PixelFormatType - 641230384) <= 4 && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
      goto LABEL_86;
    v13 = -641234480;
  }
  v18 = (_DWORD)PixelFormatType + v13;
  if (v18 <= 4 && ((1 << v18) & 0x15) != 0)
    goto LABEL_86;
LABEL_100:
  v10 = "No";
LABEL_86:
  v32 = v10;
  IsTriPlanar = re::CoreVideoUtils::pixelFormatIsTriPlanar(PixelFormatType);
  if (PlaneCount != 3 && IsTriPlanar)
    -[__CVBuffer appendString:](v4, "appendString:", CFSTR("\nInvalid input pixel buffer pixel format."));
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  BulkAttachments = re::_IOSurfaceGetBulkAttachments((uint64_t)v6, (uint64_t)v33);
  if (v21)
    -[__CVBuffer appendString:](v4, "appendString:", CFSTR("\nUnable to read input surface properties."), BulkAttachments);
  v22 = BYTE11(v34);
  v23 = BYTE12(v34);
  v24 = BYTE10(v34);
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  v27 = "Non-Planar";
  if (PlaneCount == 2)
    v27 = "Bi-Planar";
  if (PlaneCount == 3)
    v28 = "Tri-Planar";
  else
    v28 = v27;
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n         Surface ID: %d"), IOSurfaceGetID(v6));
  IsHDR = re::CoreVideoUtils::pixelBufferIsHDR(this, v29);
  v31 = "SDR";
  if (IsHDR)
    v31 = "HDR";
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n       Content Type: %s"), v31);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n         Dimensions: %zu x %zu"), Width, Height);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n          Planarity: %s"), v28);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n       Pixel Format: %s (%c%c%c%c)"), "(undefined)", HIBYTE(v9), BYTE2(v9), BYTE1(v9), v9);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n    Color Primaries: %s (%d)"), "(undefined)", v22);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n  Transfer Function: %s (%d)"), "(undefined)", v23);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n       YCbCr Matrix: %s (%d)"), "(undefined)", v24);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n     Surface Matrix: %s (%d)"), "(undefined)", v39);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n         Compressed: %s"), v32);
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n Protection Options: %llu"), IOSurfaceGetProtectionOptions());
  -[__CVBuffer appendFormat:](v4, "appendFormat:", CFSTR("\n       Retain Count: %ld"), CFGetRetainCount(this));
LABEL_99:

}

void re::CoreVideoUtils::printMetalTextureInfo(void *a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  if (a1)
  {
    v3 = a2;
    objc_msgSend(v3, "appendFormat:", CFSTR("\n              Width: %zu"), objc_msgSend(a1, sel_width), v4);
    objc_msgSend(v3, "appendFormat:", CFSTR("\n             Height: %zu"), objc_msgSend(a1, sel_height));
    objc_msgSend(v3, "appendFormat:", CFSTR("\n Protection Options: %llu"), objc_msgSend(a1, sel_protectionOptions));
    objc_msgSend(a1, sel_pixelFormat);
    objc_msgSend(v3, "appendFormat:", CFSTR("\n       Pixel Format: %s"), MTLPixelFormatGetName());
    objc_msgSend(v3, "appendFormat:", CFSTR("\n       Retain Count: %lu"), objc_msgSend(a1, sel_retainCount));
  }
  else
  {
    objc_msgSend(a2, "appendString:", CFSTR("\nInvalid metal texture."));
  }

}

void re::CoreVideoUtils::printColorTransformInfo(CFArrayRef *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[4];
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BYTE v22[16];
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;

  v3 = a2;
  v4 = v3;
  if (*a1)
  {
    re::VideoColorTransformBase::conversionMatrix(a1, (uint64_t)v22);
    re::VideoColorTransformBase::gammaToneCurve(a1, (uint64_t)v13);
    if (v22[0])
    {
      objc_msgSend(v4, "appendString:", CFSTR("\n    Transformation Conversion Matrix:"));
      objc_msgSend(v4, "appendFormat:", CFSTR("\n        %f, %f, %f"), v23, v26, v29);
      objc_msgSend(v4, "appendFormat:", CFSTR("\n        %f, %f, %f"), v24, v27, v30);
      objc_msgSend(v4, "appendFormat:", CFSTR("\n        %f, %f, %f"), v25, v28, v31);
    }
    if (v13[0])
    {
      v5 = v4;
      v6 = v5;
      switch(v14)
      {
        case 1:
          objc_msgSend(v5, "appendFormat:", CFSTR("\n    Gamma Tone Curve Type 0: gamma=%f"), v15, v7, v8, v9, v10, v11, v12);
          break;
        case 2:
          objc_msgSend(v5, "appendFormat:", CFSTR("\n    Gamma Tone Curve Type 1: gamma=%f, a=%f, b=%f"), v15, v16, v17, v9, v10, v11, v12);
          break;
        case 3:
          objc_msgSend(v5, "appendFormat:", CFSTR("\n    Gamma Tone Curve Type 2: gamma=%f, a=%f, b=%f, c=%f"), v15, v16, v17, v18, v10, v11, v12);
          break;
        case 4:
          objc_msgSend(v5, "appendFormat:", CFSTR("\n    Gamma Tone Curve Type 3: gamma=%f, a=%f, b=%f, c=%f, d=%f"), v15, v16, v17, v18, v19, v11, v12);
          break;
        case 5:
          objc_msgSend(v5, "appendFormat:", CFSTR("\n    Gamma Tone Curve Type 4: gamma=%f, a=%f, b=%f, c=%f, d=%f, e=%f, f=%f"), v15, v16, v17, v18, v19, v20, v21);
          break;
        default:
          break;
      }
      objc_msgSend(v6, "appendString:", CFSTR("\n    Gamma Tone Curve Type: Unknown"));

    }
  }
  else
  {
    objc_msgSend(v3, "appendString:", CFSTR("\nInvalid color transform."));
  }

}

void re::CoreVideoUtils::printPresentationGroupInfo(CMTime *this, const re::VideoPresentationGroup *a2)
{
  __CFString *v2;
  unint64_t v3;
  id v5;
  re *v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  re *v12;
  unint64_t value;
  char *v14;
  uint64_t v15;
  NSMutableString *v16;
  unint64_t v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  re *v23;
  unint64_t v24;
  unint64_t v25;
  CMTime *v26;
  uint64_t v27;
  unint64_t v28;
  CMTime *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  re *v39;
  unint64_t v40;
  CMTimeEpoch *p_epoch;
  uint64_t v42;
  unint64_t v43;
  CMTimeEpoch *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  NSObject *v49;
  id v50;
  NSObject *v51;
  uint64_t v52;
  void *v53;
  re *v54;
  unint64_t v55;
  const __CFDictionary **v56;
  const __CFString *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  const __CFDictionary *v61;
  id v62;
  void *v63;
  _BOOL4 v64;
  const char *v65;
  NSObject *v66;
  id v67;
  NSObject *v68;
  uint64_t v69;
  void *v70;
  re *v71;
  NSObject *v72;
  id v73;
  NSObject *v74;
  uint64_t v75;
  void *v76;
  re *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  NSMutableString *v81;
  unint64_t v82;
  unint64_t epoch;
  char *v84;
  uint64_t v85;
  NSMutableString *v86;
  unint64_t v87;
  unint64_t v88;
  CMTimeEpoch *v89;
  uint64_t v90;
  unint64_t v91;
  CMTimeEpoch *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  NSObject *v105;
  id v106;
  NSObject *v107;
  uint64_t v108;
  void *v109;
  re *v110;
  unint64_t v111;
  float *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  float v122;
  NSObject *v123;
  _BOOL8 v124;
  id v125;
  NSObject *v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  re *v132;
  unint64_t v133;
  CFArrayRef *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  NSObject *v138;
  id v139;
  NSObject *v140;
  uint64_t v141;
  void *v142;
  re *v143;
  unint64_t v144;
  uint64_t v145;
  CMTime *v146;
  unint64_t v147;
  const char *v148;
  NSObject *v149;
  id v150;
  NSObject *v151;
  uint64_t v152;
  void *v153;
  re *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  NSObject *v158;
  id v159;
  NSObject *v160;
  uint64_t v161;
  __CVBuffer *v162;
  CMTime time;
  _BYTE buf[24];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v5 = objc_alloc_init(MEMORY[0x24BDD16A8]);
  v6 = (re *)objc_msgSend(v5, "appendString:", CFSTR("Print Presentation Group:"));
  if ((this->flags & 1) != 0)
  {
    time = *this;
    v6 = (re *)objc_msgSend(v5, "appendFormat:", CFSTR("\nPresentation Time: %f"), CMTimeGetSeconds(&time));
  }
  v7 = *re::videoLogObjects(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_retainAutorelease(v5);
    v9 = v7;
    v10 = objc_msgSend(v8, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Pixel Buffer:"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  value = this[2].value;
  if (value)
  {
    v2 = 0;
    do
    {
      v14 = (char *)&v2->isa + 1;
      objc_msgSend(v11, "appendFormat:", CFSTR("\nPixel Buffer %zu of %zu"), (char *)&v2->isa + 1, value);
      v17 = this[2].value;
      if (v17 <= (unint64_t)v2)
        goto LABEL_153;
      re::CoreVideoUtils::printPixelBufferInfo(*((re::CoreVideoUtils **)&this[2].epoch + (_QWORD)v2), (__CVBuffer *)v11, v16);
      value = this[2].value;
      v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v14 < value);
  }
  v18 = *re::videoLogObjects(v12);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = objc_retainAutorelease(v11);
    v20 = v18;
    v21 = objc_msgSend(v19, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Texture:"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = *(_QWORD *)&this[3].timescale;
  if (v24)
  {
    v25 = 0;
    v26 = this + 4;
    while (1)
    {
      v3 = v25 + 1;
      v23 = (re *)objc_msgSend(v22, "appendFormat:", CFSTR("\nTexture %zu of %zu:"), v25 + 1, v24);
      v24 = *(_QWORD *)&this[3].timescale;
      if (v24 <= v25)
        break;
      v28 = 0;
      v29 = &this[v25 + 4];
      while (1)
      {
        v30 = v29->value != 0;
        if (v29->value)
          v31 = 2;
        else
          v31 = 1;
        if (*(_QWORD *)&v29->timescale)
          v30 = v31;
        if (v29->epoch)
          ++v30;
        if (v28 >= v30)
          break;
        if (v24 <= v25)
          goto LABEL_145;
        objc_msgSend(v22, "appendFormat:", CFSTR("\n  Plane %zu of %zu:"), v28 + 1, v30);
        v33 = *(_QWORD *)&this[3].timescale;
        if (v33 <= v25)
          goto LABEL_146;
        v162 = 0;
        re::VideoObject<re::VideoTextureBase>::setRef((int)&v162, &v162, *((CVPixelBufferRef *)&v26->value + v28));
        re::VideoTextureBase::metalTexture(&v162, buf);
        v2 = *(__CFString **)buf;
        re::CoreVideoUtils::printMetalTextureInfo(*(void **)buf, v22);
        if (v2)

        if (v162)
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v162);
        v24 = *(_QWORD *)&this[3].timescale;
        ++v28;
        if (v24 <= v25)
          goto LABEL_144;
      }
      ++v26;
      ++v25;
      if (v3 >= v24)
        goto LABEL_32;
    }
LABEL_144:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v24);
    _os_crash();
    __break(1u);
LABEL_145:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v24);
    _os_crash();
    __break(1u);
LABEL_146:
    re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v33);
    _os_crash();
    __break(1u);
    goto LABEL_147;
  }
LABEL_32:
  v34 = *re::videoLogObjects(v23);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = objc_retainAutorelease(v22);
    v36 = v34;
    v37 = objc_msgSend(v35, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v37;
    _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Legacy Texture:"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  v40 = this[6].value;
  if (v40)
  {
    v25 = 0;
    p_epoch = &this[6].epoch;
    while (1)
    {
      v3 = v25 + 1;
      v39 = (re *)objc_msgSend(v38, "appendFormat:", CFSTR("\nLegacy Texture %zu of %zu:"), v25 + 1, v40);
      v40 = this[6].value;
      if (v40 <= v25)
        break;
      v43 = 0;
      v44 = &this[v25 + 6].epoch;
      while (1)
      {
        v45 = *v44 != 0;
        if (*v44)
          v46 = 2;
        else
          v46 = 1;
        if (v44[1])
          v45 = v46;
        if (v44[2])
          ++v45;
        if (v43 >= v45)
          break;
        if (v40 <= v25)
          goto LABEL_148;
        objc_msgSend(v38, "appendFormat:", CFSTR("\n  Plane %zu of %zu:"), v43 + 1, v45);
        v48 = this[6].value;
        if (v48 <= v25)
          goto LABEL_149;
        v162 = 0;
        re::VideoObject<re::VideoTextureBase>::setRef((int)&v162, &v162, (CVPixelBufferRef)p_epoch[v43]);
        re::VideoTextureBase::metalTexture(&v162, buf);
        v2 = *(__CFString **)buf;
        re::CoreVideoUtils::printMetalTextureInfo(*(void **)buf, v38);
        if (v2)

        if (v162)
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v162);
        v40 = this[6].value;
        ++v43;
        if (v40 <= v25)
          goto LABEL_147;
      }
      p_epoch += 3;
      ++v25;
      if (v3 >= v40)
        goto LABEL_55;
    }
LABEL_147:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v40);
    _os_crash();
    __break(1u);
LABEL_148:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v40);
    _os_crash();
    __break(1u);
LABEL_149:
    re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v48);
    _os_crash();
    __break(1u);
    goto LABEL_150;
  }
LABEL_55:
  v49 = *re::videoLogObjects(v39);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    v50 = objc_retainAutorelease(v38);
    v51 = v49;
    v52 = objc_msgSend(v50, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v52;
    _os_log_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Pixel Format Description:"));
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  v55 = this[22].value;
  if (v55)
  {
    v3 = 0;
    v56 = (const __CFDictionary **)&this[22].epoch;
    v57 = (const __CFString *)*MEMORY[0x24BDC5750];
    v2 = CFSTR("\nPixel Format Description %zu of %zu:");
    do
    {
      v58 = v3 + 1;
      objc_msgSend(v53, "appendFormat:", CFSTR("\nPixel Format Description %zu of %zu:"), v3 + 1, v55);
      v60 = this[22].value;
      if (v60 <= v3)
        goto LABEL_154;
      v61 = *v56;
      v62 = v53;
      v63 = v62;
      if (v61)
      {
        v64 = re::VideoPixelFormatDescriptionBase::BOOLeanValue(v56, v57, 0);
        v65 = "false";
        if (v64)
          v65 = "true";
        objc_msgSend(v63, "appendFormat:", CFSTR("\n Contains Alpha: %s"), v65);
      }
      else
      {
        objc_msgSend(v62, "appendString:", CFSTR("\nInvalid pixel format description."));
      }

      v55 = this[22].value;
      ++v56;
      v3 = v58;
    }
    while (v58 < v55);
  }
  v66 = *re::videoLogObjects(v54);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    v67 = objc_retainAutorelease(v53);
    v68 = v66;
    v69 = objc_msgSend(v67, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v69;
    _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  v2 = (__CFString *)0x24BDD1000;
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Metadata:"));
  v70 = (void *)objc_claimAutoreleasedReturnValue();

  v72 = *re::videoLogObjects(v71);
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    v73 = objc_retainAutorelease(v70);
    v74 = v72;
    v75 = objc_msgSend(v73, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v75;
    _os_log_impl(&dword_224FE9000, v74, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Light Spill:"));
  v76 = (void *)objc_claimAutoreleasedReturnValue();

  v78 = *(_QWORD *)&this[11].timescale;
  if (v78)
  {
    v2 = 0;
    do
    {
      v79 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", CFSTR("\nLight Spill Diffuse Pixel Buffer %zu of %zu"), (char *)&v2->isa + 1, v78);
      v82 = *(_QWORD *)&this[11].timescale;
      if (v82 <= (unint64_t)v2)
        goto LABEL_155;
      re::CoreVideoUtils::printPixelBufferInfo(*((re::CoreVideoUtils **)&this[12].value + (_QWORD)v2), (__CVBuffer *)v76, v81);
      v78 = *(_QWORD *)&this[11].timescale;
      v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v79 < v78);
  }
  epoch = this[12].epoch;
  if (epoch)
  {
    v2 = 0;
    do
    {
      v84 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", CFSTR("\nLight Spill Specular Pixel Buffer %zu of %zu"), (char *)&v2->isa + 1, epoch);
      v87 = this[12].epoch;
      if (v87 <= (unint64_t)v2)
        goto LABEL_156;
      re::CoreVideoUtils::printPixelBufferInfo(*((re::CoreVideoUtils **)&this[13].timescale + (_QWORD)v2), (__CVBuffer *)v76, v86);
      epoch = this[12].epoch;
      v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v84 < epoch);
  }
  v88 = this[14].value;
  if (v88)
  {
    v25 = 0;
    v89 = &this[14].epoch;
    while (1)
    {
      v3 = v25 + 1;
      v77 = (re *)objc_msgSend(v76, "appendFormat:", CFSTR("\nLight Spill Texture %zu of %zu:"), v25 + 1, v88);
      v88 = this[14].value;
      if (v88 <= v25)
        break;
      v91 = 0;
      v92 = &this[v25 + 14].epoch;
      while (1)
      {
        v93 = *v92 != 0;
        if (*v92)
          v94 = 2;
        else
          v94 = 1;
        if (v92[1])
          v93 = v94;
        if (v92[2])
          ++v93;
        if (v91 >= v93)
          break;
        if (v88 <= v25)
          goto LABEL_151;
        objc_msgSend(v76, "appendFormat:", CFSTR("\n  Plane %zu of %zu:"), v91 + 1, v93);
        v96 = this[14].value;
        if (v96 <= v25)
          goto LABEL_152;
        v162 = 0;
        re::VideoObject<re::VideoTextureBase>::setRef((int)&v162, &v162, (CVPixelBufferRef)v89[v91]);
        re::VideoTextureBase::metalTexture(&v162, buf);
        v2 = *(__CFString **)buf;
        re::CoreVideoUtils::printMetalTextureInfo(*(void **)buf, v76);
        if (v2)

        if (v162)
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v162);
        v88 = this[14].value;
        ++v91;
        if (v88 <= v25)
          goto LABEL_150;
      }
      v89 += 3;
      ++v25;
      if (v3 >= v88)
        goto LABEL_99;
    }
LABEL_150:
    re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v88);
    _os_crash();
    __break(1u);
LABEL_151:
    re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v88);
    _os_crash();
    __break(1u);
LABEL_152:
    re::internal::assertLog((re::internal *)6, v95, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v96);
    _os_crash();
    __break(1u);
LABEL_153:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v17);
    _os_crash();
    __break(1u);
LABEL_154:
    re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v60);
    _os_crash();
    __break(1u);
LABEL_155:
    re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v82);
    _os_crash();
    __break(1u);
LABEL_156:
    re::internal::assertLog((re::internal *)6, v85, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v87);
    _os_crash();
    __break(1u);
LABEL_157:
    re::internal::assertLog((re::internal *)6, v99, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v100);
    _os_crash();
    __break(1u);
LABEL_158:
    re::internal::assertLog((re::internal *)6, v103, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v104);
    _os_crash();
    __break(1u);
LABEL_159:
    re::internal::assertLog((re::internal *)6, v136, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v137);
    _os_crash();
    __break(1u);
    goto LABEL_160;
  }
LABEL_99:
  v97 = this[16].epoch;
  if (v97)
  {
    v2 = 0;
    do
    {
      v98 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", CFSTR("\nLight Spill Diffuse Texture %zu of %zu:"), (char *)&v2->isa + 1, v97);
      v100 = this[16].epoch;
      if (v100 <= (unint64_t)v2)
        goto LABEL_157;
      re::CoreVideoUtils::printMetalTextureInfo(*((void **)&this[17].timescale + (_QWORD)v2), v76);
      v97 = this[16].epoch;
      v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v98 < v97);
  }
  v101 = this[18].value;
  if (v101)
  {
    v2 = 0;
    do
    {
      v102 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", CFSTR("\nLight Spill Specular Texture %zu of %zu:"), (char *)&v2->isa + 1, v101);
      v104 = this[18].value;
      if (v104 <= (unint64_t)v2)
        goto LABEL_158;
      re::CoreVideoUtils::printMetalTextureInfo(*((void **)&this[18].epoch + (_QWORD)v2), v76);
      v101 = this[18].value;
      v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v102 < v101);
  }
  v105 = *re::videoLogObjects(v77);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    v106 = objc_retainAutorelease(v76);
    v107 = v105;
    v108 = objc_msgSend(v106, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v108;
    _os_log_impl(&dword_224FE9000, v107, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Cropping Rectangles:"));
  v109 = (void *)objc_claimAutoreleasedReturnValue();

  v111 = this[20].value;
  if (v111)
  {
    v3 = 0;
    v112 = (float *)&this[21].value + 1;
    while (1)
    {
      v113 = v3 + 1;
      objc_msgSend(v109, "appendFormat:", CFSTR("\nCropping Rectangle %zu of %zu:"), v3 + 1, v111);
      v115 = this[20].value;
      if (v115 <= v3)
        break;
      objc_msgSend(v109, "appendFormat:", CFSTR("\n       X: %f"), *(v112 - 3));
      v117 = this[20].value;
      if (v117 <= v3)
        goto LABEL_161;
      objc_msgSend(v109, "appendFormat:", CFSTR("\n       Y: %f"), *(v112 - 2));
      v119 = this[20].value;
      if (v119 <= v3)
        goto LABEL_162;
      objc_msgSend(v109, "appendFormat:", CFSTR("\n   Width: %f"), *(v112 - 1));
      v121 = this[20].value;
      if (v121 <= v3)
        goto LABEL_163;
      v122 = *v112;
      v112 += 4;
      v110 = (re *)objc_msgSend(v109, "appendFormat:", CFSTR("\n  Height: %f"), v122);
      v111 = this[20].value;
      ++v3;
      if (v113 >= v111)
        goto LABEL_116;
    }
LABEL_160:
    re::internal::assertLog((re::internal *)6, v114, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v115);
    _os_crash();
    __break(1u);
LABEL_161:
    re::internal::assertLog((re::internal *)6, v116, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v117);
    _os_crash();
    __break(1u);
LABEL_162:
    re::internal::assertLog((re::internal *)6, v118, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v119);
    _os_crash();
    __break(1u);
LABEL_163:
    re::internal::assertLog((re::internal *)6, v120, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v121);
    _os_crash();
    __break(1u);
  }
LABEL_116:
  v123 = *re::videoLogObjects(v110);
  v124 = os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT);
  if (v124)
  {
    v125 = objc_retainAutorelease(v109);
    v126 = v123;
    v127 = objc_msgSend(v125, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v127;
    _os_log_impl(&dword_224FE9000, v126, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  v128 = *re::videoLogObjects((re *)v124);
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
    v129 = *(_QWORD *)&this[23].timescale;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v129;
    _os_log_impl(&dword_224FE9000, v128, OS_LOG_TYPE_DEFAULT, "Presentation Group Protection Options: %llu", buf, 0xCu);
  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Color Gamut:"));
  v130 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v130, "appendFormat:", CFSTR("\n        Color Gamut: %s (%d)"), "(undefined)", LOBYTE(this[23].epoch));
  objc_msgSend(v130, "appendFormat:", CFSTR("\n              Width: %zu"), this[24].value);
  objc_msgSend(v130, "appendFormat:", CFSTR("\n             Height: %zu"), *(_QWORD *)&this[24].timescale);
  if (LOBYTE(this[27].timescale))
    v131 = "Yes";
  else
    v131 = "No";
  objc_msgSend(v130, "appendFormat:", CFSTR("\n                HDR: %s"), v131);
  objc_msgSend(v130, "appendFormat:", CFSTR("\n        Stereo Mode: (%d)"), this[27].flags);
  objc_msgSend(v130, "appendFormat:", CFSTR("\n       YCbCr Matrix: (%d)"), LODWORD(this[27].epoch));
  v132 = (re *)objc_msgSend(v130, "appendFormat:", CFSTR("\n     Image Function: (%d)"), HIDWORD(this[27].epoch));
  v133 = this[28].value;
  if (v133)
  {
    v2 = 0;
    v134 = (CFArrayRef *)&this[28].epoch;
    do
    {
      v135 = (char *)&v2->isa + 1;
      objc_msgSend(v130, "appendFormat:", CFSTR("\nColor Transform %zu of %zu:"), (char *)&v2->isa + 1, v133);
      v137 = this[28].value;
      if (v137 <= (unint64_t)v2)
        goto LABEL_159;
      re::CoreVideoUtils::printColorTransformInfo(v134, v130);
      v133 = this[28].value;
      ++v134;
      v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v135 < v133);
  }
  v138 = *re::videoLogObjects(v132);
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    v139 = objc_retainAutorelease(v130);
    v140 = v138;
    v141 = objc_msgSend(v139, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v141;
    _os_log_impl(&dword_224FE9000, v140, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Histogram:"));
  v142 = (void *)objc_claimAutoreleasedReturnValue();

  v144 = *(_QWORD *)&this[31].timescale;
  if (v144)
  {
    v145 = 0;
    v146 = this + 32;
    do
    {
      v147 = v145 + 1;
      if (*(&v146->value + v145))
      {
        objc_msgSend(v142, "appendFormat:", CFSTR("\nHistogram %zu of %zu:"), v145 + 1, v144);
        objc_msgSend(v142, "appendFormat:", CFSTR("\n            Bin Count: %zu"), *(_QWORD *)re::VideoHistogram::data(*((re::VideoHistogram **)&v146->value + v145)));
        objc_msgSend(v142, "appendFormat:", CFSTR("\n      Color Primaries: %s"), "(undefined)");
        objc_msgSend(v142, "appendFormat:", CFSTR("\n    Transfer Function: %s"), "(undefined)");
        objc_msgSend(v142, "appendFormat:", CFSTR("\n         YCbCr Matrix: %s"), "(undefined)");
        v148 = "Yes";
        if (!*(_BYTE *)(*(&v146->value + v145) + 37))
          v148 = "NO";
        v143 = (re *)objc_msgSend(v142, "appendFormat:", CFSTR("\n        DOLBY Content: %s"), v148);
        v144 = *(_QWORD *)&this[31].timescale;
      }
      ++v145;
    }
    while (v147 < v144);
  }
  v149 = *re::videoLogObjects(v143);
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
  {
    v150 = objc_retainAutorelease(v142);
    v151 = v149;
    v152 = objc_msgSend(v150, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v152;
    _os_log_impl(&dword_224FE9000, v151, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("Presentation Group Horizontal Disparity:"));
  v153 = (void *)objc_claimAutoreleasedReturnValue();

  v155 = this[34].epoch;
  if (v155)
  {
    v156 = 0;
    do
    {
      v157 = v156 + 1;
      v154 = (re *)objc_msgSend(v153, "appendFormat:", CFSTR("\nHorizontal Disparity Adjustment %zu of %zu: %f"), v156 + 1, v155, *((float *)&this[35].value + v156 + 1));
      v155 = this[34].epoch;
      v156 = v157;
    }
    while (v157 < v155);
  }
  v158 = *re::videoLogObjects(v154);
  if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
  {
    v159 = objc_retainAutorelease(v153);
    v160 = v158;
    v161 = objc_msgSend(v159, "cStringUsingEncoding:", 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v161;
    _os_log_impl(&dword_224FE9000, v160, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

  }
}

uint64_t re::CoreVideoUtils::isFullRange(re::CoreVideoUtils *this)
{
  int v1;
  uint64_t result;
  unsigned __int16 v3;
  unsigned __int16 v4;
  int v5;
  unsigned int v6;

  v1 = re::CoreVideoUtils::uncompressedPixelFormat(this);
  result = 1;
  if (v1 > 1886676527)
  {
    if (v1 > 1952854575)
    {
      if (v1 <= 2019963503)
      {
        if (v1 == 1952854576 || v1 == 2019963440)
          return result;
        v4 = 12850;
      }
      else
      {
        if (v1 > 2019964015)
        {
          if (v1 == 2019964016)
            return result;
          v5 = 2037741158;
LABEL_38:
          if (v1 == v5)
            return result;
          return 0;
        }
        if (v1 == 2019963504)
          return result;
        v4 = 13364;
      }
      v5 = v4 | 0x78660000;
      goto LABEL_38;
    }
    if (v1 > 1936077359)
    {
      if (v1 != 1936077360 && v1 != 1936077362)
      {
        v5 = 1936077876;
        goto LABEL_38;
      }
    }
    else
    {
      v6 = v1 - 1886676528;
      if (v6 > 4 || ((1 << v6) & 0x15) == 0)
        return 0;
    }
  }
  else if (v1 <= 1714696751)
  {
    if (v1 > 875704933)
    {
      if (v1 != 875704934 && v1 != 875836518)
      {
        v5 = 1714630712;
        goto LABEL_38;
      }
    }
    else if (v1 != 846624102 && v1 != 875639142)
    {
      v5 = 875704422;
      goto LABEL_38;
    }
  }
  else
  {
    if (v1 > 1751528499)
    {
      if (v1 > 1885745713)
      {
        if (v1 == 1885745714)
          return result;
        v3 = 13364;
      }
      else
      {
        if (v1 == 1751528500)
          return result;
        v3 = 12848;
      }
      v5 = v3 | 0x70660000;
      goto LABEL_38;
    }
    if (v1 != 1714696752 && v1 != 1751527984)
    {
      v5 = 1751527986;
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t re::CoreVideoUtils::isConvertibleToLinearRGBColorModel(int a1)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v4;

  result = 1;
  if ((a1 - 500) > 0x1E || ((1 << (a1 + 12)) & 0x7ED007ED) == 0)
  {
    v3 = a1 - 564;
    v4 = a1 == 10;
    return v3 < 6 || v4;
  }
  return result;
}

uint64_t re::CoreVideoUtils::convertToLinearRGBColorModel(re *a1)
{
  re *v1;
  NSObject *v3;
  NSObject *v4;
  int v5;
  uint64_t Name;
  uint64_t v7;

  v1 = a1;
  v7 = *MEMORY[0x24BDAC8D0];
  switch((int)a1)
  {
    case 500:
    case 502:
    case 503:
      return 80;
    case 501:
    case 504:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 521:
    case 524:
      goto LABEL_8;
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
      return 94;
    case 520:
    case 522:
    case 523:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
      return 115;
    default:
      if (((_DWORD)a1 - 564) < 6)
        return 115;
      if ((_DWORD)a1 != 10)
      {
LABEL_8:
        v3 = *re::videoLogObjects(a1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          v4 = v3;
          v5 = 136315138;
          Name = MTLPixelFormatGetName();
          _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Unable to convert pixel format '%s' to linear RGB color model.", (uint8_t *)&v5, 0xCu);

        }
      }
      return (uint64_t)v1;
  }
}

uint64_t re::CoreVideoUtils::colorSpaceNameFromColorTags(re::CoreVideoUtils *this, int a2, unsigned __int8 a3, int a4)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (int)this;
  result = 0;
  if (v4 > 11)
  {
    if (v4 == 13)
    {
      v6 = MEMORY[0x24BDBF270];
      if (a2 != 8)
        v6 = MEMORY[0x24BDBF278];
      v7 = MEMORY[0x24BDBF308];
      if (a2 != 8)
        v7 = MEMORY[0x24BDBF318];
      goto LABEL_30;
    }
    if (v4 != 12)
      return result;
    if (a2 == 18)
    {
      v6 = MEMORY[0x24BDBF230];
    }
    else
    {
      if (a2 != 16)
      {
        if (a2 == 8)
        {
          v6 = MEMORY[0x24BDBF258];
          v7 = MEMORY[0x24BDBF2F0];
        }
        else
        {
          v6 = MEMORY[0x24BDBF240];
          v7 = MEMORY[0x24BDBF228];
        }
        goto LABEL_30;
      }
      v6 = MEMORY[0x24BDBF238];
    }
  }
  else
  {
    if (v4 == 1)
    {
      v6 = MEMORY[0x24BDBF2E8];
      v8 = MEMORY[0x24BDBF2E0];
      if (a2 != 18)
        v8 = MEMORY[0x24BDBF2D8];
      if (a2 != 16)
        v6 = v8;
      return *(_QWORD *)v6;
    }
    if (v4 != 9)
      return result;
    if (a2 == 18)
    {
      v6 = MEMORY[0x24BDBF2C8];
    }
    else
    {
      if (a2 != 16)
      {
        if (a2 == 8)
        {
          v6 = MEMORY[0x24BDBF268];
          v7 = MEMORY[0x24BDBF300];
        }
        else
        {
          v6 = MEMORY[0x24BDBF250];
          v7 = MEMORY[0x24BDBF2B8];
        }
LABEL_30:
        if (!a4)
          v6 = v7;
        return *(_QWORD *)v6;
      }
      v6 = MEMORY[0x24BDBF2D0];
    }
  }
  return *(_QWORD *)v6;
}

uint64_t re::CoreVideoUtils::convertToGammaSpaceRGBColorModel(re::CoreVideoUtils *this)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = 1111970369;
  v2 = re::CoreVideoUtils::uncompressedPixelFormat(this);
  if (v2 > 1380401728)
  {
    if (v2 > 1999843441)
    {
      if (v2 == 1999843442 || v2 == 2019963440)
        return 1815162994;
      v3 = 2016686640;
LABEL_17:
      if (v2 == v3)
        return 1815162994;
      return 1380411457;
    }
    if (v2 != 1380401729)
    {
      if (v2 == 1882468912)
        return 1815162994;
      v3 = 1885745712;
      goto LABEL_17;
    }
  }
  else if (v2 > 875704421)
  {
    if (v2 != 875704422 && v2 != 875704438 && v2 != 1111970369)
      return 1380411457;
  }
  else if (v2 != 641230384 && v2 != 641234480)
  {
    v3 = 645428784;
    goto LABEL_17;
  }
  return v1;
}

uint64_t re::CoreVideoUtils::canConvertToGammaSpaceRGBColorModel(re::CoreVideoUtils *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = re::CoreVideoUtils::uncompressedPixelFormat(this);
  result = 1;
  if (v1 <= 1380401728)
  {
    if (v1 > 875704421)
    {
      if (v1 != 875704422 && v1 != 875704438)
      {
        v3 = 1111970369;
LABEL_18:
        if (v1 != v3)
          return 0;
      }
    }
    else if (v1 != 641230384 && v1 != 641234480)
    {
      v3 = 645428784;
      goto LABEL_18;
    }
  }
  else
  {
    if (v1 > 1885745711)
    {
      if (v1 > 2016686639)
      {
        if (v1 == 2016686640)
          return result;
        v3 = 2019963440;
      }
      else
      {
        if (v1 == 1885745712)
          return result;
        v3 = 1999843442;
      }
      goto LABEL_18;
    }
    if (v1 != 1380401729 && v1 != 1380411457)
    {
      v3 = 1882468912;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::VideoPSEProcessor::NeedsProcessing(re::VideoPSEProcessor *this)
{
  return objc_msgSend(MEMORY[0x24BE72DD8], "needsProcessing");
}

void re::VideoPSEProcessor::init(re::VideoPSEProcessor *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;

  if (!*(_QWORD *)this)
  {
    v2 = re::globalAllocators(this);
    v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 8, 8);
    *v3 = 0;
    v4 = objc_opt_new();
    v5 = (void *)*v3;
    *v3 = v4;

    *(_QWORD *)this = v3;
  }
}

uint64_t re::VideoPSEProcessor::Processor::process(re *a1, __IOSurface **this, uint64_t *a3, double a4, float a5, float a6)
{
  BOOL v6;
  NSObject *v7;
  double v14;
  void *v15;
  __IOSurface *v16;
  uint64_t v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  void *v23;
  uint8_t v25[8];
  _QWORD v26[3];
  _QWORD v27[4];

  v27[3] = *MEMORY[0x24BDAC8D0];
  if (*this)
    v6 = *a3 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Unable to process PSE. Input is invalid.", v25, 2u);
    }
    return 1;
  }
  else
  {
    *(float *)&v14 = re::VideoSurfaceBase::edrFactor(this);
    v15 = *(void **)a1;
    v16 = *this;
    v17 = *a3;
    v26[0] = CFSTR("sourceSurfaceEDR");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v18;
    v26[1] = CFSTR("displayMaxNits");
    *(float *)&v19 = a5;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v27[1] = v20;
    v26[2] = CFSTR("displayEDRFactor");
    *(float *)&v21 = a6;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v27[2] = v22;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v27, v26, 3);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "processSourceSurface:withTimestamp:toDestinationSurface:options:", v16, v17, v23, a4);

    return 0;
  }
}

void re::VideoTextureBase::metalTexture(__CVBuffer **this@<X0>, _QWORD *a2@<X8>)
{
  __CVBuffer *v3;
  void *v4;
  id v5;

  v3 = *this;
  if (v3)
  {
    CVMetalTextureGetTexture(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;

  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
}

void CFDictionarySetInt32(__CFDictionary *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

const __CFNumber *CFDictionaryGetInt32(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFNumber *result;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t re::VideoLightSpillSessionRegister(re *this)
{
  uint64_t result;

  qword_254123D60 = 0;
  qword_254123D68 = (uint64_t)"VideoLightSpillSession";
  unk_254123D70 = re::VideoLightSpillSessionConstructor;
  qword_254123D78 = 0;
  unk_254123D80 = re::VideoLightSpillSessionDestructor;
  xmmword_254123D88 = 0u;
  unk_254123D98 = 0u;
  result = _CFRuntimeRegisterClass();
  _MergedGlobals_501 = result;
  return result;
}

_QWORD *re::VideoLightSpillSessionCreate(re *this, const __CFAllocator *a2, const __CFDictionary *a3)
{
  _QWORD *Instance;
  double v5;
  unsigned int Int32;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  NSObject *v22;
  uint8_t v24[16];

  pthread_once(&re::VideoLightSpillSessionGetTypeID(void)::sRegisterVideoLightSpillSessionOnce, (void (*)(void))re::VideoLightSpillSessionRegister);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return Instance;
  v5 = 3.0;
  if (this)
  {
    if (CFDictionaryContainsKey(this, CFSTR("SpillmapWidth")))
      Int32 = CFDictionaryGetInt32(this, CFSTR("SpillmapWidth"));
    else
      Int32 = 8;
    if (CFDictionaryContainsKey(this, CFSTR("SpillmapHeight")))
      v9 = CFDictionaryGetInt32(this, CFSTR("SpillmapHeight"));
    else
      v9 = 8;
    if (CFDictionaryContainsKey(this, CFSTR("SpillmapLayout")))
      v7 = CFDictionaryGetInt32(this, CFSTR("SpillmapLayout"));
    else
      v7 = 0;
    if (CFDictionaryContainsKey(this, CFSTR("SpillmapIntermediateWidth")))
      v10 = CFDictionaryGetInt32(this, CFSTR("SpillmapIntermediateWidth"));
    else
      v10 = 128;
    if (CFDictionaryContainsKey(this, CFSTR("SpillmapIntermediateHeight")))
      v8 = CFDictionaryGetInt32(this, CFSTR("SpillmapIntermediateHeight"));
    else
      v8 = 128;
    if (CFDictionaryContainsKey(this, CFSTR("SpillmapIntermediateBlurSigma")))
      v5 = (double)(int)CFDictionaryGetInt32(this, CFSTR("SpillmapIntermediateBlurSigma"));
  }
  else
  {
    v7 = 0;
    Int32 = 8;
    v8 = 128;
    v9 = 8;
    v10 = 128;
  }
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_DWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 36) = 0x7FFFFFFFLL;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_BYTE *)(v11 + 64) = 0;
  *(_DWORD *)(v11 + 80) = Int32;
  *(_DWORD *)(v11 + 84) = v9;
  *(_DWORD *)(v11 + 68) = v7;
  *(_DWORD *)(v11 + 88) = v10;
  *(_DWORD *)(v11 + 92) = v8;
  *(double *)(v11 + 96) = v5;
  Instance[2] = v11;
  v12 = (void *)MEMORY[0x227694090]();
  v13 = *(void **)(v11 + 56);
  if (!v13)
  {
    v13 = (void *)objc_opt_new();
    *(_QWORD *)(v11 + 56) = v13;
    if (!v13)
    {
      v22 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v24 = 0;
        _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::initialize] Unable to initialize VideoSpillmap metal session", v24, 2u);
      }
      objc_autoreleasePoolPop(v12);
      goto LABEL_34;
    }
  }
  v14 = *(_DWORD *)(v11 + 88);
  v15 = *(_DWORD *)(v11 + 92);
  v16 = *(_DWORD *)(v11 + 80);
  v17 = *(_DWORD *)(v11 + 84);
  if ((int)v14 <= (int)v16)
    v18 = v16;
  else
    v18 = v14;
  if ((int)v15 <= (int)v17)
    v19 = v17;
  else
    v19 = v15;
  v20 = *(double *)(v11 + 96);
  *(float *)&v20 = v20;
  v21 = objc_msgSend(v13, "configureIntermediateTextureProcessing:setHeight:setSigma:", v18, v19, v20);
  objc_autoreleasePoolPop(v12);
  if (v21)
  {
LABEL_34:
    CFRelease(Instance);
    return 0;
  }
  return Instance;
}

void re::VideoLightSpillGenerator::WarmUp(re::VideoLightSpillGenerator *this)
{
  if (re::VideoLightSpillGenerator::WarmUp(void)::onceToken != -1)
    dispatch_once(&re::VideoLightSpillGenerator::WarmUp(void)::onceToken, &__block_literal_global_59);
}

void ___ZN2re24VideoLightSpillGenerator6WarmUpEv_block_invoke(uint64_t a1, const __CFAllocator *a2, const __CFDictionary *a3)
{
  _QWORD *v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = re::VideoLightSpillSessionCreate(0, a2, a3);
  if (v3)
  {
    CFRelease(v3);
  }
  else
  {
    v4 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoLightSpillSessionPrewarm] Video light spill session creation failed during session pre-warm", v5, 2u);
    }
  }
}

__CVBuffer *re::VideoLightSpillGenerator::CanGenerateForPixelBuffer(__CVBuffer **a1)
{
  __CVBuffer *result;
  uint64_t PixelFormatType;

  result = *a1;
  if (result)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(result);
    return (__CVBuffer *)(+[VideoSpillMapMetalSession metalPixelFormatForPixelFormat:withTransferFunction:](VideoSpillMapMetalSession, "metalPixelFormatForPixelFormat:withTransferFunction:", PixelFormatType, (re::VideoPixelBufferBase::colorTags(a1) >> 16)) != 0);
  }
  return result;
}

uint64_t re::VideoLightSpillGenerator::setupSession(re::VideoLightSpillGenerator *this, int a2, int a3, int a4)
{
  re *v8;
  void *v9;
  uint64_t result;
  re *v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *Mutable;
  const __CFAllocator *v17;
  const __CFDictionary *v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  int v23;
  int valuePtr;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v23 = a3;
  valuePtr = a2;
  v22 = a4;
  v8 = (re *)re::VideoDefaults::logEnabled(this);
  if ((_DWORD)v8)
  {
    v20 = *re::videoLogObjects(v8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v26 = a2;
      v27 = 1024;
      v28 = a3;
      v29 = 1024;
      v30 = a4;
      _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "[VideoSpillGenerator]->setupSession :: width %i : height %i : blurSigma %i", buf, 0x14u);
    }
  }
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
  {
    if (*(_DWORD *)this == a2 && *((_DWORD *)this + 1) == a3 && *((_DWORD *)this + 2) == a4)
      return 0;
    CFRelease(v9);
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = -1;
  }
  v11 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v9);
  if ((_DWORD)v11)
  {
    v21 = *re::videoLogObjects(v11);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v26 = a2;
      v27 = 1024;
      v28 = a3;
      v29 = 1024;
      v30 = a4;
      _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "[VideoSpillGenerator]->setupSession :: Updating the spillGenerator session with width %i : height %i : blurSigma %i", buf, 0x14u);
    }
  }
  result = 0;
  if (a2 >= 1 && a3 >= 1 && (a4 & 0x80000000) == 0)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    v14 = CFNumberCreate(v12, kCFNumberSInt32Type, &v23);
    v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &v22);
    Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue(Mutable, CFSTR("SpillmapWidth"), v13);
    CFDictionarySetValue(Mutable, CFSTR("SpillmapHeight"), v14);
    CFDictionarySetValue(Mutable, CFSTR("SpillmapIntermediateBlurSigma"), v15);
    *((_QWORD *)this + 2) = re::VideoLightSpillSessionCreate(Mutable, v17, v18);
    CFRelease(Mutable);
    CFRelease(v13);
    CFRelease(v14);
    CFRelease(v15);
    if (*((_QWORD *)this + 2))
    {
      result = 0;
      v19 = v23;
      *(_DWORD *)this = valuePtr;
      *((_DWORD *)this + 1) = v19;
      *((_DWORD *)this + 2) = v22;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t re::VideoLightSpillGenerator::generate(uint64_t this, __CVBuffer *a2, __CVBuffer **a3)
{
  int *v3;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  id v9;
  re *v10;
  NSObject *v11;
  void *v12;
  id v13;
  re *v14;
  NSObject *v15;
  re *v16;
  NSObject *v17;
  re::VideoDefaults *v18;
  int v19;
  NSObject *v21;
  int v22;
  int v23;
  re *ProtectionOptions;
  NSObject *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  re *v32;
  NSObject *v33;
  int v34;
  FILE *v35;
  char *BaseAddress;
  size_t Width;
  size_t Height;
  re *BytesPerRowOfPlane;
  re *v40;
  NSObject *v41;
  id v42;
  NSObject *v43;
  uint64_t v44;
  re *v45;
  NSObject *v46;
  NSObject *v47;
  id v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  id v52;
  NSObject *v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint8_t buf[4];
  _DWORD v60[7];

  v3 = (int *)this;
  *(_QWORD *)&v60[5] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(this + 16))
    goto LABEL_18;
  *a3 = 0;
  v5 = *(_QWORD *)(this + 16);
  if (!v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 16);
  if (!*(_BYTE *)(v7 + 64))
  {
    v12 = (void *)MEMORY[0x227694090]();
    v13 = *(id *)(v7 + 56);
    v14 = (re *)objc_msgSend(v13, "configureSession:setWidth:setHeight:", CVPixelBufferGetIOSurface(a2), *(unsigned int *)(v7 + 80), *(unsigned int *)(v7 + 84));
    if ((_DWORD)v14)
    {
      v15 = *re::videoLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::initializeTexture] Unable to configure light spill session", buf, 2u);
      }

      objc_autoreleasePoolPop(v12);
      v17 = *re::videoLogObjects(v16);
      this = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      if ((_DWORD)this)
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::computeSpillMap] Unable to initialize textures", buf, 2u);
      }
      goto LABEL_18;
    }

    objc_autoreleasePoolPop(v12);
    *(_BYTE *)(v7 + 64) = 1;
  }
  v8 = (void *)MEMORY[0x227694090]();
  v9 = *(id *)(v7 + 56);
  v10 = (re *)objc_msgSend(v9, "calculateDrmSpillmapMetal:emitSpillmap:setLayout:withAllocator:", a2, a3, *(unsigned int *)(v7 + 68), v7);
  if ((_DWORD)v10)
  {
    v11 = *re::videoLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::computeSpillMap] Unable to compute light spill", buf, 2u);
    }

    objc_autoreleasePoolPop(v8);
    goto LABEL_18;
  }

  objc_autoreleasePoolPop(v8);
  this = re::VideoDefaults::lightSpillDumpEnabled(v18);
  if (!(_DWORD)this)
    goto LABEL_14;
  CVPixelBufferGetIOSurface(a2);
  ProtectionOptions = (re *)IOSurfaceGetProtectionOptions();
  v25 = *re::videoLogObjects(ProtectionOptions);
  this = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if (!ProtectionOptions)
  {
    if ((_DWORD)this)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] Light spill dumping is enabled and activated for this unprotected content", buf, 2u);
    }
    v26 = objc_alloc_init(MEMORY[0x24BDD1500]);
    objc_msgSend(v26, "setDateFormat:", CFSTR("yyyy-MM-dd-HH-mm-ss"));
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "stringFromDate:", v27);
    v28 = objc_claimAutoreleasedReturnValue();

    NSTemporaryDirectory();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = (void *)v28;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@video_lightspill_dump_%dx%d_%@.bgra"), v29, *(unsigned int *)(v7 + 80), *(unsigned int *)(v7 + 84), v28);
    v57 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = 0;
    objc_msgSend(v30, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v29, 1, 0, &v58);
    v31 = v58;

    if (v31)
    {
      v33 = *re::videoLogObjects(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] failed to create temporary directory", buf, 2u);
      }
    }
    else
    {
      v55 = objc_retainAutorelease(v57);
      v35 = fopen((const char *)objc_msgSend(v55, "UTF8String"), "wb+");
      *(_QWORD *)(v7 + 72) = v35;
      if (v35)
      {
        CVPixelBufferLockBaseAddress(*a3, 1uLL);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(*a3);
        Width = CVPixelBufferGetWidth(*a3);
        Height = CVPixelBufferGetHeight(*a3);
        BytesPerRowOfPlane = (re *)CVPixelBufferGetBytesPerRowOfPlane(*a3, 0);
        if (Height)
        {
          v40 = BytesPerRowOfPlane;
          while (1)
          {
            BytesPerRowOfPlane = (re *)fwrite(BaseAddress, 4uLL, Width, *(FILE **)(v7 + 72));
            if (BytesPerRowOfPlane != (re *)Width)
              break;
            BaseAddress = (char *)v40 + (_QWORD)BaseAddress;
            if (!--Height)
              goto LABEL_38;
          }
          v51 = *re::videoLogObjects(BytesPerRowOfPlane);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_224FE9000, v51, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] Failed to write lightspill texture", buf, 2u);
          }
          v34 = 0;
          v19 = 0;
        }
        else
        {
LABEL_38:
          v41 = *re::videoLogObjects(BytesPerRowOfPlane);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            v42 = objc_retainAutorelease(v55);
            v43 = v41;
            v44 = objc_msgSend(v42, "UTF8String");
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)v60 = v44;
            _os_log_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEFAULT, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] dumping lightspill to %s", buf, 0xCu);

          }
          v45 = (re *)fclose(*(FILE **)(v7 + 72));
          if ((_DWORD)v45)
          {
            v46 = *re::videoLogObjects(v45);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              v52 = objc_retainAutorelease(v55);
              v53 = v46;
              v54 = objc_msgSend(v52, "UTF8String");
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)v60 = v54;
              _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] failed to close file %s", buf, 0xCu);

            }
          }
          v34 = 1;
          CVPixelBufferUnlockBaseAddress(*a3, 1uLL);
          v19 = 11;
        }
LABEL_31:

        if (!v34)
          goto LABEL_15;
        goto LABEL_14;
      }
      v47 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = objc_retainAutorelease(v55);
        v49 = v47;
        v50 = objc_msgSend(v48, "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v60 = v50;
        _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] failed to open file %s", buf, 0xCu);

      }
    }
    v19 = 11;
    v34 = 1;
    goto LABEL_31;
  }
  if ((_DWORD)this)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] Light spill dumping is enabled from defaults write but deactivated due to content protection", buf, 2u);
  }
LABEL_14:
  v19 = 0;
LABEL_15:
  if (!v19 && *a3)
    return 0;
LABEL_18:
  v21 = *re::videoLogObjects((re *)this);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v22 = *v3;
    v23 = v3[1];
    *(_DWORD *)buf = 67109376;
    v60[0] = v22;
    LOWORD(v60[1]) = 1024;
    *(_DWORD *)((char *)&v60[1] + 2) = v23;
    _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator]->generate :: Could not generate light spill of size %d x %d", buf, 0xEu);
  }
  return 1;
}

uint64_t re::VideoLightSpillSessionDestructor(uint64_t this, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  if (this)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 16);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 72))
        *(_QWORD *)(v3 + 72) = 0;
      v4 = *(const void **)(v3 + 56);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(v3 + 56) = 0;
      }
      re::VideoTextureAllocator::~VideoTextureAllocator((void **)v3);
      this = MEMORY[0x2276933B8]();
    }
    *(_QWORD *)(v2 + 16) = 0;
  }
  return this;
}

unint64_t re::VideoColorUtils::hsvToRgb(uint64_t a1)
{
  re *v2;
  float v3;
  int v4;
  int8x16_t v5;
  float v6;
  float v7;
  double v8;
  double v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  NSObject *v13;
  _BOOL4 v14;
  uint8_t v16[16];

  v3 = fmodf(*(float *)a1, 1.0) * 6.0;
  v4 = (int)v3;
  v6 = *(float *)(a1 + 4);
  v5.i32[0] = *(_DWORD *)(a1 + 8);
  v7 = v3 - (float)(int)v3;
  v8 = v6;
  v9 = 1.0 - v6;
  v11 = (1.0 - (float)(v6 * v7)) * *(float *)v5.i32;
  v10.f64[0] = 1.0 - v8 * (1.0 - v7);
  v10.f64[1] = v9;
  *(float *)&v11 = v11;
  v12 = vmulq_n_f64(v10, *(float *)v5.i32);
  *(float32x2_t *)&v12.f64[0] = vcvt_f32_f64(v12);
  switch(v4)
  {
    case 0:
      *(_QWORD *)&v11 = vextq_s8(vextq_s8(v5, v5, 4uLL), (int8x16_t)v12, 0xCuLL).u64[0];
      return *(_QWORD *)&v11;
    case 1:
      HIDWORD(v11) = *(_DWORD *)(a1 + 8);
      return *(_QWORD *)&v11;
    case 2:
      LODWORD(v11) = vuzp2q_s32((int32x4_t)v12, vzip1q_s32((int32x4_t)v12, (int32x4_t)v12)).u32[0];
      HIDWORD(v11) = *(_DWORD *)(a1 + 8);
      return *(_QWORD *)&v11;
    case 3:
      LODWORD(v12.f64[0]) = vdup_lane_s32(*(int32x2_t *)&v12.f64[0], 1).u32[0];
      HIDWORD(v12.f64[0]) = LODWORD(v11);
      goto LABEL_9;
    case 4:
      goto LABEL_9;
    case 5:
      LODWORD(v12.f64[0]) = *(_DWORD *)(a1 + 8);
LABEL_9:
      v11 = v12.f64[0];
      break;
    default:
      v13 = *re::videoLogObjects(v2);
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      v11 = 0.0;
      if (v14)
      {
        *(_WORD *)v16 = 0;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Unable to convert HSV to RGB", v16, 2u);
        v11 = 0.0;
      }
      break;
  }
  return *(_QWORD *)&v11;
}

__n64 re::VideoColorUtils::rgbToHsv(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v5;
  float v6;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __n64 result;
  BOOL v14;
  float v15;
  float v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  if (*a1 < v2 || v1 < v3)
  {
    if (v2 >= v1)
      v5 = *a1;
    else
      v5 = a1[1];
    if (v1 >= v3)
      v6 = a1[2];
    else
      v6 = *a1;
    if (v2 < v1 || v2 < v3)
    {
      v6 = v5;
      v8 = a1[2];
    }
    else
    {
      v8 = a1[1];
    }
  }
  else
  {
    if (v2 >= v3)
      v6 = a1[2];
    else
      v6 = a1[1];
    v8 = *a1;
  }
  v9 = 0.0;
  if (v8 <= 0.0)
  {
    v16 = 0.0;
  }
  else
  {
    v10 = v8 - v6;
    v16 = (float)(v8 - v6) / v8;
    if (v16 != 0.0)
    {
      v11 = (float)(v8 - v2) / v10;
      v12 = (float)(v8 - v3) / v10;
      if (v8 == v1)
      {
        if (v6 == v2)
          v9 = v12 + 5.0;
        else
          v9 = 1.0 - v11;
      }
      else
      {
        v14 = v8 == v2;
        v15 = (float)(v8 - v1) / v10;
        if (v14)
        {
          if (v6 == v3)
            v9 = v15 + 1.0;
          else
            v9 = 3.0 - v12;
        }
        else if (v6 == v1)
        {
          v9 = v11 + 3.0;
        }
        else
        {
          v9 = 5.0 - v15;
        }
      }
    }
  }
  result.n64_f32[0] = fmodf(v9 / 6.0, 1.0);
  result.n64_f32[1] = v16;
  return result;
}

double re::VideoASEFrameMeasurement::create@<D0>(re::VideoASEFrameMeasurement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  double result;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED8B1C0;
  *(_DWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 28) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 396) = 0u;
  *(_OWORD *)(v3 + 780) = 0u;
  *(_OWORD *)(v3 + 752) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)(v3 + 720) = 0u;
  *(_OWORD *)(v3 + 736) = 0u;
  *(_OWORD *)(v3 + 688) = 0u;
  *(_OWORD *)(v3 + 704) = 0u;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(_OWORD *)(v3 + 624) = 0u;
  *(_OWORD *)(v3 + 640) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  *(_OWORD *)(v3 + 560) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *a2 = v3;
  return result;
}

void `anonymous namespace'::videoASEFrameMeasurementAllocator(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_ *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
    }
  }
}

void re::VideoASEProcessor::completionCallback(int a1, id *location)
{
  os_unfair_lock_s *WeakRetained;
  unsigned __int8 *v4;
  os_unfair_lock_s *v5;
  id v6;
  _anonymous_namespace_ *v7;

  if (location)
  {
    WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v4 = (unsigned __int8 *)WeakRetained;
      v5 = WeakRetained + 4;
      os_unfair_lock_lock(WeakRetained + 4);
      memcpy(v4 + 408, location + 1, 0x17CuLL);
      atomic_store(1u, v4 + 20);
      os_unfair_lock_unlock(v5);

    }
    v6 = location[49];
    if (v6)
      CFRelease(v6);
    objc_destroyWeak(location);
    *location = 0;
    (*(void (**)(void))(qword_254123DC8[0] + 40))();
  }
}

void `anonymous namespace'::videoASECompletionContextAllocator(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_ *v2;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_502);
  if ((v1 & 1) == 0)
  {
    v2 = (_anonymous_namespace_ *)__cxa_guard_acquire(&_MergedGlobals_502);
    if ((_DWORD)v2)
    {
      __cxa_guard_release(&_MergedGlobals_502);
    }
  }
}

uint64_t re::VideoASEProcessor::createConfig(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, _QWORD *a6, _QWORD *a7)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _anonymous_namespace_ *v34;
  _anonymous_namespace_ *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  _BOOL8 v47;
  NSObject *v48;
  id v50;
  __int128 v51;
  unint64_t v52;
  uint8_t buf[4];
  _DWORD v54[7];

  *(_QWORD *)&v54[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v51 = 0x400000001;
  *((_QWORD *)&v51 + 1) = __PAIR64__(a3, a2);
  v52 = __PAIR64__(a5, a4);
  v14 = re::Hash<re::VideoASEConfigurationKey>::operator()(&v51);
  if (*(_QWORD *)a1)
  {
    v15 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v14 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v15 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 16);
      while (1)
      {
        v17 = v16 + 48 * v15;
        if (*(_DWORD *)(v17 + 20) == a2)
        {
          v18 = (_DWORD *)(v17 + 12);
          if (v18[3] == a3
            && v18[1] == 4
            && *v18 == 1
            && *(_DWORD *)(v16 + 48 * v15 + 28) == a4
            && *(_DWORD *)(v16 + 48 * v15 + 32) == a5)
          {
            break;
          }
        }
        v15 = *(_DWORD *)(v16 + 48 * v15 + 8) & 0x7FFFFFFF;
        if (v15 == 0x7FFFFFFF)
          goto LABEL_11;
      }
      v35 = (_anonymous_namespace_ *)*(id *)(v16 + 48 * v15 + 40);
      v34 = v35;
      if (!v35)
        goto LABEL_42;
LABEL_28:
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(qword_254123DC8[0] + 32))(qword_254123DC8, 400, 0);
      *(_OWORD *)v36 = 0u;
      *(_OWORD *)(v36 + 16) = 0u;
      *(_OWORD *)(v36 + 32) = 0u;
      *(_OWORD *)(v36 + 48) = 0u;
      *(_OWORD *)(v36 + 64) = 0u;
      *(_OWORD *)(v36 + 80) = 0u;
      *(_OWORD *)(v36 + 96) = 0u;
      *(_OWORD *)(v36 + 112) = 0u;
      *(_OWORD *)(v36 + 128) = 0u;
      *(_OWORD *)(v36 + 144) = 0u;
      *(_OWORD *)(v36 + 160) = 0u;
      *(_OWORD *)(v36 + 176) = 0u;
      *(_OWORD *)(v36 + 192) = 0u;
      *(_OWORD *)(v36 + 208) = 0u;
      *(_OWORD *)(v36 + 224) = 0u;
      *(_OWORD *)(v36 + 240) = 0u;
      *(_OWORD *)(v36 + 256) = 0u;
      *(_OWORD *)(v36 + 272) = 0u;
      *(_OWORD *)(v36 + 288) = 0u;
      *(_OWORD *)(v36 + 304) = 0u;
      *(_OWORD *)(v36 + 320) = 0u;
      *(_OWORD *)(v36 + 336) = 0u;
      *(_OWORD *)(v36 + 352) = 0u;
      *(_OWORD *)(v36 + 368) = 0u;
      *(_OWORD *)(v36 + 384) = 0u;
      objc_initWeak((id *)v36, 0);
      *(_OWORD *)(v36 + 8) = 0u;
      *(_OWORD *)(v36 + 24) = 0u;
      *(_OWORD *)(v36 + 40) = 0u;
      *(_OWORD *)(v36 + 56) = 0u;
      *(_OWORD *)(v36 + 72) = 0u;
      *(_OWORD *)(v36 + 88) = 0u;
      *(_OWORD *)(v36 + 104) = 0u;
      *(_OWORD *)(v36 + 120) = 0u;
      *(_OWORD *)(v36 + 136) = 0u;
      *(_OWORD *)(v36 + 152) = 0u;
      *(_OWORD *)(v36 + 168) = 0u;
      *(_OWORD *)(v36 + 184) = 0u;
      *(_OWORD *)(v36 + 200) = 0u;
      *(_OWORD *)(v36 + 216) = 0u;
      *(_OWORD *)(v36 + 232) = 0u;
      *(_OWORD *)(v36 + 248) = 0u;
      *(_OWORD *)(v36 + 372) = 0u;
      *(_OWORD *)(v36 + 264) = 0u;
      *(_OWORD *)(v36 + 280) = 0u;
      *(_OWORD *)(v36 + 296) = 0u;
      *(_OWORD *)(v36 + 312) = 0u;
      *(_OWORD *)(v36 + 328) = 0u;
      *(_OWORD *)(v36 + 344) = 0u;
      *(_OWORD *)(v36 + 360) = 0u;
      *(_QWORD *)(v36 + 392) = 0;
      if (*a6)
        v37 = (void *)(*a6 + 8);
      else
        v37 = 0;
      objc_storeWeak((id *)v36, v37);
      v38 = *a6;
      v39 = (unsigned __int8 *)(*a6 + 28);
      v40 = atomic_load(v39);
      if ((v40 & 1) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
        v41 = atomic_load(v39);
        if ((v41 & 1) != 0)
        {
          memcpy((void *)(v38 + 32), (const void *)(v38 + 416), 0x17CuLL);
          atomic_store(0, (unsigned __int8 *)(v38 + 28));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 24));
      }
      memcpy((void *)(v36 + 8), (const void *)(v38 + 32), 0x17CuLL);
      v50 = 0;
      v42 = -[_anonymous_namespace_ processFrameWithInput:outputData:](v34, "processFrameWithInput:outputData:", v36 + 8, &v50);
      v43 = v50;
      v44 = v43;
      if (v42 == -18000)
      {
        CFRetain(v43);
        v45 = 0;
        *(_QWORD *)(v36 + 392) = v44;
        *a7 = v44;
        a7[1] = v36 + 8;
        a7[2] = re::VideoASEProcessor::completionCallback;
        a7[3] = v36;
      }
      else
      {
        v46 = *re::videoLogObjects((re *)v43);
        v47 = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
        if (v47)
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)v54 = v42;
          _os_log_error_impl(&dword_224FE9000, v46, OS_LOG_TYPE_ERROR, "Unable to process ASE (%ld).", buf, 0xCu);
        }
        (*(void (**)(uint64_t *, uint64_t))(qword_254123DC8[0] + 40))(qword_254123DC8, v36);
        v45 = 1;
      }

      goto LABEL_45;
    }
  }
LABEL_11:
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDFD9B8]), "initWithConfig:", &v51);
  objc_msgSend(v19, "setDestinationWidth:", v52);
  objc_msgSend(v19, "setDestinationHeight:", HIDWORD(v52));
  v20 = re::Hash<re::VideoASEConfigurationKey>::operator()(&v51);
  v21 = v20;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v22) = 0;
    goto LABEL_21;
  }
  v22 = v20 % *(unsigned int *)(a1 + 24);
  v23 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v22);
  if ((_DWORD)v23 == 0x7FFFFFFF)
  {
LABEL_21:
    v27 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v27 == 0x7FFFFFFF)
    {
      v27 = *(unsigned int *)(a1 + 32);
      v28 = v27;
      if ((_DWORD)v27 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v22) = v21 % *(unsigned int *)(a1 + 24);
        v28 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v28 + 1;
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_DWORD *)(v29 + 48 * v27 + 8);
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_DWORD *)(v29 + 48 * v27 + 8);
      *(_DWORD *)(a1 + 36) = v30 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v29 + 48 * v27 + 8) = v30 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v27 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v22);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v27) = v21;
    v31 = *(_QWORD *)(a1 + 16) + 48 * v27;
    v32 = v51;
    *(_QWORD *)(v31 + 28) = v52;
    *(_OWORD *)(v31 + 12) = v32;
    v33 = *(_QWORD *)(a1 + 16) + 48 * v27;
    *(_QWORD *)(v33 + 40) = v19;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v22) = v27;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    goto LABEL_27;
  }
  v24 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v25 = v24 + 48 * v23;
    if (*(_DWORD *)(v25 + 20) == DWORD2(v51))
    {
      v26 = v25 + 12;
      if (*(_DWORD *)(v26 + 12) == HIDWORD(v51)
        && *(_QWORD *)v26 == (_QWORD)v51
        && *(_QWORD *)(v24 + 48 * v23 + 28) == v52)
      {
        break;
      }
    }
    v23 = *(_DWORD *)(v24 + 48 * v23 + 8) & 0x7FFFFFFF;
    if (v23 == 0x7FFFFFFF)
      goto LABEL_21;
  }
LABEL_27:
  v34 = v19;

  if (v34)
    goto LABEL_28;
LABEL_42:
  v48 = *re::videoLogObjects(v35);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    v54[0] = a2;
    LOWORD(v54[1]) = 1024;
    *(_DWORD *)((char *)&v54[1] + 2) = a3;
    _os_log_error_impl(&dword_224FE9000, v48, OS_LOG_TYPE_ERROR, "Unable to create ASE Processor for config %d x %d.", buf, 0xEu);
  }
  v45 = 1;
LABEL_45:

  return v45;
}

void re::VideoASEFrameMeasurement::~VideoASEFrameMeasurement(re::VideoASEFrameMeasurement *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

unint64_t re::Hash<re::VideoASEConfigurationKey>::operator()(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;

  v1 = 73244475 * (a1[2] ^ HIWORD(a1[2]));
  v2 = 73244475 * (a1[3] ^ HIWORD(a1[3]));
  v3 = (73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16);
  v4 = 73244475 * (a1[1] ^ HIWORD(a1[1]));
  v5 = (73244475 * (v4 ^ HIWORD(v4))) ^ ((73244475 * (v4 ^ HIWORD(v4))) >> 16);
  v6 = 73244475 * (*a1 ^ HIWORD(*a1));
  v7 = (73244475 * (v6 ^ HIWORD(v6))) ^ ((73244475 * (v6 ^ HIWORD(v6))) >> 16);
  v8 = 73244475 * (a1[4] ^ HIWORD(a1[4]));
  v9 = (73244475 * (v8 ^ HIWORD(v8))) ^ ((73244475 * (v8 ^ HIWORD(v8))) >> 16);
  v10 = 73244475 * ((73244475 * (a1[5] ^ HIWORD(a1[5]))) ^ ((73244475 * (a1[5] ^ HIWORD(a1[5]))) >> 16));
  return re::hashCombine((73244475 * (v1 ^ HIWORD(v1))) ^ ((73244475 * (v1 ^ HIWORD(v1))) >> 16), v3, v5, v7, v9, v10 ^ HIWORD(v10));
}

void re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (uint64_t *)(v6 + 40);
        do
        {
          if ((*(_DWORD *)(v14 - 4) & 0x80000000) != 0)
          {
            v15 = *(v14 - 5);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 48 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 48 * v18;
            v23 = *(_OWORD *)((char *)v14 - 28);
            *(_QWORD *)(v22 + 28) = *(uint64_t *)((char *)v14 - 12);
            *(_OWORD *)(v22 + 12) = v23;
            v24 = *(_QWORD *)(a1 + 16) + 48 * v18;
            v25 = *v14;
            *v14 = 0;
            *(_QWORD *)(v24 + 40) = v25;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 6;
        }
        while (v11 < v10);
      }
      re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

void init_block_size_descriptor(unsigned int a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int *a6)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v10;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  uint64_t v15;
  float *_2d_percentile_table;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t i;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  size_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  size_t v39;
  size_t v40;
  float v41;
  unsigned __int8 v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t j;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  unsigned int *v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  char *v124;
  __int16 v125;
  __int16 v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int v131;
  char v132;
  uint64_t v133;
  char v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  _BOOL4 v141;
  unsigned int v142;
  BOOL v143;
  BOOL v144;
  _BOOL4 v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unint64_t v174;
  int v175;
  int v177;
  uint64_t v178;
  _DWORD __b[438];
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD v185[4];
  uint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t v189;

  v6 = a6;
  v7 = a5;
  v10 = a1;
  v189 = *MEMORY[0x24BDAC8D0];
  if (a3 < 2)
  {
    v15 = operator new();
    *(_BYTE *)v6 = v10;
    *((_BYTE *)v6 + 1) = a2;
    *((_BYTE *)v6 + 2) = 1;
    *((_BYTE *)v6 + 3) = a2 * v10;
    memset(__b, 255, 0x330uLL);
    _2d_percentile_table = get_2d_percentile_table(v10, a2);
    v183 = 0;
    v184 = 0;
    v181 = 0;
    v182 = 0;
    memset(v6 + 2825212, 255, 0x1000uLL);
    v17 = 0;
    if (a4)
      v18 = 3;
    else
      v18 = 4;
    v19 = v6;
    do
    {
      for (i = 0; i != 2048; ++i)
      {
        if (*((__int16 *)v19 + i + 5650424) == -1)
        {
          if ((i & 3) != 0)
            __asm { BR              X14 }
          if (((i >> 2) & 3) != 0)
            __asm { BR              X14 }
        }
      }
      ++v17;
    }
    while (v17 != v18);
    v21 = v183;
    v22 = HIDWORD(v184);
    v23 = v184 + HIDWORD(v183) + v183;
    v19[5] = HIDWORD(v183) + v183;
    v19[6] = v23;
    v19[7] = v22 + v23;
    v24 = HIDWORD(v182);
    v25 = HIDWORD(v181) + v181 + v182;
    v19[1] = v181;
    v19[2] = v25;
    v19[3] = v24 + v25;
    v19[4] = v21;
    MEMORY[0x227693394](_2d_percentile_table, 0x1000C8052888210);
    v26 = a6[3];
    if (v26 < 0x57)
    {
      v27 = v26 + 1;
      v28 = (uint64_t)a6 + 6 * v26 + 68;
      do
      {
        *(_WORD *)(v28 - 4) = -1;
        *(_DWORD *)(v28 - 2) = 0;
        v28 += 6;
        v29 = (_DWORD)v27++ == 87;
      }
      while (!v29);
    }
    assign_kmeans_texels((uint64_t)a6);
    MEMORY[0x2276933B8](v15, 0x1000C403AA0D44CLL);
    v7 = a5;
LABEL_134:
    init_partition_tables((uint64_t)a6, a4, v7);
  }
  v12 = operator new();
  *(_BYTE *)v6 = v10;
  *((_BYTE *)v6 + 1) = a2;
  *((_BYTE *)v6 + 2) = a3;
  v13 = a2 * v10 * a3;
  *((_BYTE *)v6 + 3) = a2 * v10 * a3;
  memset(__b, 255, sizeof(__b));
  v173 = a3;
  if (v10 >= 2)
  {
    v14 = 0;
    v161 = (uint64_t)v6 + 814;
    v160 = v6 + 4972;
    v159 = v6 + 1516;
    v30 = 2;
    v153 = 4;
    v156 = (uint64_t)v6 + v13;
    v155 = (uint64_t)&v6[v13 + 636];
    v158 = ((v10 >> 1) + 1024) / (v10 - 1);
    v31 = a2 * v10 * a3;
    v157 = ((a2 >> 1) + 1024) / (a2 - 1);
    v32 = a2;
    v33 = 8;
    v34 = a3;
    v169 = v6 + 636;
    v162 = ((_DWORD)v13 + 3) & 0xFFFFFFFC;
    do
    {
      v152 = v33;
      if (v32 >= 2)
      {
        v35 = 2;
        v36 = v153;
        do
        {
          v37 = v35 * v30;
          v165 = v35 - 1;
          v38 = 2;
          v154 = v33;
          v164 = v30 + 8 * v35;
          v172 = v35;
          v166 = v36;
          do
          {
            v39 = v38 * v37;
            if (v39 <= 0x40)
            {
              v168 = v33;
              v167 = v33 + 4972;
              v170 = v38;
              v171 = v14;
              __b[64 * v38 + v164] = v14;
              v174 = v38 * v37;
              v40 = v31;
              bzero((void *)(v12 + 1944), v39);
              bzero((void *)v12, v40);
              v32 = a2;
              v42 = 0;
              v43 = 0;
              do
              {
                v44 = 0;
                v177 = v43 * v32;
                v175 = v43;
                v45 = ((a3 >> 1) + 1024) / (a3 - 1) * (v170 - 1) * v43 + 32;
                v46 = (v45 >> 6) & 0xF;
                v47 = (v45 >> 10) * v172;
                do
                {
                  v48 = 0;
                  v49 = (v44 + v177) * v10;
                  v50 = v157 * v165 * v44 + 32;
                  v51 = (v50 >> 6) & 0xF;
                  v52 = (v47 + (v50 >> 10)) * v30;
                  v53 = (v172 + v47 + 1 + (v50 >> 10)) * v30 + 1;
                  do
                  {
                    v54 = v158 * (v30 - 1) * v48 + 32;
                    v55 = (v54 >> 6) & 0xF;
                    v56 = v52 + (v54 >> 10);
                    LODWORD(v186) = v56;
                    v188 = v53 + (v54 >> 10);
                    v57 = v51 - v55;
                    switch((2 * (v51 > v46)) | (4 * (v51 < v55)) | (v55 > v46))
                    {
                      case 2:
                        v57 = v46 - v55;
                        v58 = v30;
                        v59 = v37;
                        v60 = v51;
                        v61 = v51 - v46;
                        break;
                      case 3:
                        v59 = 1;
                        v58 = v30;
                        v60 = v51;
                        v61 = v51 - v55;
                        v57 = v55 - v46;
                        goto LABEL_34;
                      case 4:
                        v61 = v46 - v55;
                        v57 = v55 - v51;
                        v59 = 1;
                        v58 = v37;
                        v60 = v46;
                        goto LABEL_38;
                      case 5:
                        v58 = 1;
                        v59 = v37;
                        v60 = (v54 >> 6) & 0xF;
                        v61 = v55 - v46;
                        v57 = v46 - v51;
LABEL_38:
                        v55 = v51;
                        break;
                      case 7:
                        v61 = v55 - v51;
                        v58 = 1;
                        v59 = v30;
                        v60 = v55;
                        v57 = v51 - v46;
LABEL_34:
                        v55 = v46;
                        break;
                      default:
                        v58 = v37;
                        v59 = v30;
                        v60 = v46;
                        v61 = v46 - v51;
                        break;
                    }
                    v62 = 0;
                    HIDWORD(v186) = v58 + v56;
                    v187 = v58 + v56 + v59;
                    v63 = v48 + v49;
                    v185[0] = 16 - v60;
                    v185[1] = v61;
                    v185[2] = v57;
                    v185[3] = v55;
                    v10 = a1;
                    do
                    {
                      v64 = v185[v62];
                      if (v64)
                      {
                        v65 = *(int *)((char *)&v186 + v62 * 4);
                        v66 = v12 + 4 * v63;
                        *(_BYTE *)(v66 + *(unsigned __int8 *)(v12 + v63) + 216) = v65;
                        *(_BYTE *)(v66 + (*(_BYTE *)(v12 + v63))++ + 1080) = v64;
                        v67 = v12 + v65;
                        v68 = *(unsigned __int8 *)(v12 + v65 + 1944);
                        v69 = v12 + 216 * (int)v65;
                        *(_BYTE *)(v69 + v68 + 2008) = v63;
                        *(_BYTE *)(v69 + *(unsigned __int8 *)(v67 + 1944) + 15832) = v64;
                        v70 = *(_BYTE *)(v67 + 1944) + 1;
                        *(_BYTE *)(v67 + 1944) = v70;
                        if (v42 <= v70)
                          v42 = v70;
                      }
                      ++v62;
                    }
                    while (v62 != 4);
                    ++v48;
                  }
                  while (v48 != a1);
                  ++v44;
                  v32 = a2;
                }
                while (v44 != a2);
                v43 = v175 + 1;
              }
              while (v175 + 1 != a3);
              v71 = 0;
              v72 = 0;
              v73 = 32472 * v171;
              v6 = a6;
              v74 = &a6[v73];
              v75 = &v169[v73];
              v76 = v12;
              v77 = &a6[v73];
              do
              {
                v78 = 0;
                v79 = *(unsigned __int8 *)(v12 + v71);
                *((_BYTE *)&a6[32472 * v171 + 149] + v71 + 2) = v79;
                do
                {
                  v80 = &v77[v78];
                  *((_BYTE *)v80 + 1678) = 0;
                  v75[v78 * 4] = 0;
                  *((_BYTE *)v80 + 814) = 0;
                  v78 += 54;
                }
                while (v78 != 216);
                if (v72 <= v79)
                  v72 = v79;
                if (v79)
                {
                  v81 = 0;
                  v82 = 216 * v79;
                  v83 = v76;
                  do
                  {
                    v84 = *(unsigned __int8 *)(v83 + 1080);
                    v85 = &v77[v81 / 4];
                    *((_BYTE *)v85 + 1678) = v84;
                    v41 = (float)v84 * 0.0625;
                    *(float *)&v75[v81] = v41;
                    *((_BYTE *)v85 + 814) = *(_BYTE *)(v83 + 216);
                    v81 += 216;
                    ++v83;
                  }
                  while (v82 != v81);
                }
                ++v71;
                v77 = (unsigned int *)((char *)v77 + 1);
                ++v75;
                v76 += 4;
              }
              while (v71 != v13);
              v86 = 0;
              BYTE1(a6[32472 * v171 + 148]) = v72;
              v87 = &v169[v73];
              v88 = v161 + v73 * 4;
              v89 = &v160[v73];
              v178 = 129888 * v171;
              v90 = &v159[v73];
              do
              {
                v91 = *(unsigned __int8 *)(v12 + v86 + 1944);
                *((_BYTE *)&a6[32472 * v171 + 1500] + v86) = v91;
                if (v91)
                {
                  for (j = 0; j != v91; ++j)
                  {
                    v93 = 0;
                    v94 = v12 + 216 * v86 + j;
                    v95 = *(unsigned __int8 *)(v94 + 2008);
                    v96 = (uint64_t)&a6[32472 * v171 + 148];
                    *(_BYTE *)(v96 + (j << 6) + v86 + 5472) = v95;
                    LOBYTE(v41) = *(_BYTE *)(v94 + 15832);
                    v41 = (float)LODWORD(v41);
                    v97 = v96 + (j << 8) + 4 * v86;
                    *(float *)(v97 + 19296) = v41;
                    v98 = (float *)(v97 + 74592);
                    *v98 = 0.0;
                    v99 = &v87[v95];
                    v100 = v88 + v95;
                    while (1)
                    {
                      if (v86 == *(unsigned __int8 *)(v100 + v93))
                      {
                        v41 = *(float *)&v99[v93];
                        if (v41 != 0.0)
                          break;
                      }
                      v93 += 216;
                      if (v93 == 864)
                        goto LABEL_65;
                    }
                    *v98 = v41;
LABEL_65:
                    ;
                  }
                }
                if (v91 < v42)
                {
                  v101 = *((_BYTE *)&a6[32472 * v171 + 1516 + 16 * (unint64_t)(v91 - 1)] + v86);
                  v102 = v42 - v91;
                  v103 = &v89[64 * v91];
                  v104 = &v90[16 * v91];
                  do
                  {
                    *(_BYTE *)v104 = v101;
                    v104 += 16;
                    *v103 = 0;
                    v103 += 64;
                    --v102;
                  }
                  while (v102);
                }
                ++v86;
                ++v89;
                v90 = (unsigned int *)((char *)v90 + 1);
              }
              while (v86 != v174);
              v31 = v13;
              v35 = v172;
              v38 = v170;
              v105 = v167;
              if (v13 < v162)
              {
                v106 = v156 + v178;
                v107 = v155 + v178;
                v108 = v13;
                do
                {
                  v109 = 0;
                  *((_BYTE *)&a6[32472 * v171 + 149] + v108 + 2) = 0;
                  do
                  {
                    *(_DWORD *)(v107 + 4 * v109) = 0;
                    v110 = v106 + v109;
                    *(_BYTE *)(v110 + 814) = 0;
                    *(_BYTE *)(v110 + 1678) = 0;
                    v109 += 216;
                  }
                  while (v109 != 864);
                  ++v108;
                  ++v106;
                  v107 += 4;
                }
                while (v108 != v162);
              }
              v111 = ((_DWORD)v174 + 3) & 0xFFFFFFFC;
              if (v174 < v111)
              {
                v112 = *((_BYTE *)&a6[32472 * v171
                                    + 1500
                                    + 16 * (unint64_t)*(unsigned __int8 *)(v12 + (v174 - 1) + 1944)]
                       + (v174 - 1));
                v113 = v174;
                do
                {
                  *((_BYTE *)&a6[32472 * v171 + 1500] + v113) = 0;
                  v114 = v105;
                  v115 = v42;
                  if (v42)
                  {
                    do
                    {
                      *((_BYTE *)v74 + v114 + 1092) = v112;
                      v74[v114] = 0;
                      v114 += 64;
                      --v115;
                    }
                    while (v115);
                  }
                  ++v113;
                  ++v105;
                }
                while (v113 < v111);
              }
              v116 = 0;
              LOBYTE(a6[32472 * v171 + 148]) = v13;
              v117 = &a6[32472 * v171];
              *((_BYTE *)v117 + 594) = v174;
              *((_BYTE *)v117 + 595) = v30;
              *((_BYTE *)v117 + 596) = v172;
              *((_BYTE *)v117 + 597) = v170;
              v118 = -1;
              v119 = -1;
              do
              {
                v120 = ise_sizes[v116];
                v121 = (v120 >> 5) | 1;
                v122 = v120 & 0x3F;
                if ((v121 - 1 + (_DWORD)v174 * v122) / v121 - 24 < 0x49)
                  v119 = v116;
                if ((v121 - 1 + 2 * (_DWORD)v174 * v122) / v121 - 24 < 0x49)
                  v118 = v116;
                ++v116;
              }
              while (v116 != 12);
              if (v174 > 0x20)
                v123 = -1;
              else
                v123 = v118;
              v124 = (char *)a6 + 6 * v171;
              v124[64] = v119;
              v124[65] = v123;
              if (v119 == -1)
                v125 = 0;
              else
                v125 = -1;
              *((_WORD *)v124 + 33) = v125;
              if (v123 == -1)
                v126 = 0;
              else
                v126 = -1;
              *((_WORD *)v124 + 34) = v126;
              v14 = v171 + 1;
              v34 = a3;
              v36 = v166;
              v33 = v168;
            }
            ++v38;
            v33 += v36;
          }
          while (v38 <= v34);
          ++v35;
          v33 = v154 + v153;
          v36 += v30;
        }
        while (v35 <= v32);
      }
      ++v30;
      v33 = v152 + 4;
      v153 += 2;
    }
    while (v30 <= v10);
    if (v14 > 0x56)
      goto LABEL_103;
  }
  else
  {
    v14 = 0;
  }
  v127 = v14 + 1;
  v128 = (uint64_t)v6 + 6 * v14 + 68;
  do
  {
    *(_WORD *)(v128 - 4) = -1;
    *(_DWORD *)(v128 - 2) = 0;
    v128 += 6;
    v29 = (_DWORD)v127++ == 87;
  }
  while (!v29);
LABEL_103:
  v6[1] = 0;
  v6[2] = v14;
  v6[3] = v14;
  v129 = v6 + 2825212;
  memset(v6 + 2825212, 255, 0x1000uLL);
  v130 = 0;
  v131 = 0;
  v186 = 0;
  v132 = 1;
  while (1)
  {
    v133 = 0;
    v134 = v132;
    do
    {
      if (*((__int16 *)v129 + v133) == -1)
      {
        v135 = v133 >> 10;
        if ((v133 & 3) != 0)
        {
          v136 = ((v133 >> 2) & 3) + 2;
          v137 = ((v133 >> 7) & 3) + 2;
          v138 = v137 * (((v133 >> 5) & 3) + 2) * v136;
          v139 = v138 + v138 * v135;
          v140 = ((v133 >> 4) | 0xFFFFFFFE) + 6 * ((v133 >> 9) & 1) + 2 * (v133 & 3);
          v141 = v135 != 0;
          v142 = (((ise_sizes[v140] >> 5) | 1) + v139 * (ise_sizes[v140] & 0x3F) - 1)
               / ((ise_sizes[v140] >> 5) | 1u);
          v143 = v139 < 0x41 && v142 > 0x17;
          v144 = !v143 || v142 >= 0x61;
          v145 = !v144;
          v146 = ((v133 >> 5) & 3) + 2;
        }
        else
        {
          if (((v133 >> 2) & 3) != 0)
            __asm { BR              X6 }
          v146 = 0;
          v137 = 0;
          v136 = 0;
          v141 = 0;
          LOBYTE(v140) = 0;
          v142 = 0;
          v145 = 0;
        }
        if (v136 <= v173 && v137 <= a2 && v146 <= a1 && v145 && v130 != !v141)
        {
          if (v141)
          {
            if (v142 == 109)
              goto LABEL_106;
          }
          else if (v142 == 111)
          {
            goto LABEL_106;
          }
          v147 = (uint64_t)a6 + 6 * v131 + 11304944;
          *(_BYTE *)(v147 + 2) = __b[64 * v136 + (v146 | (8 * v137))];
          *(_BYTE *)(v147 + 3) = v140;
          *(_BYTE *)(v147 + 4) = v142;
          *(_BYTE *)(v147 + 5) = *(_BYTE *)(v147 + 5) & 0xFE | v141;
          *(_WORD *)v147 = v133;
          *((_WORD *)v129 + v133) = v131;
          ++*((_DWORD *)&v186 + v130);
          ++v131;
        }
      }
LABEL_106:
      ++v133;
    }
    while (v133 != 2048);
    v132 = 0;
    v130 = 1;
    if ((v134 & 1) == 0)
    {
      v148 = v186;
      v149 = HIDWORD(v186);
      a6[4] = 0;
      a6[5] = v148;
      v150 = v149 + v148;
      a6[6] = v150;
      a6[7] = v150;
      assign_kmeans_texels((uint64_t)a6);
      MEMORY[0x2276933B8](v12, 0x1000C403AA0D44CLL);
      goto LABEL_134;
    }
  }
}

void assign_kmeans_texels(uint64_t a1)
{
  size_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[216];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 3);
  if (v2 > 0x40)
  {
    bzero(v10, v2);
    v4 = 0;
    v5 = 0xFAF9E171CEA1EC6BLL;
    v6 = 0xF1B318CC06AF5D71;
    do
    {
      v7 = (v5 + v6) % v2;
      if (!v10[v7])
      {
        v8 = a1 + v4++;
        *(_BYTE *)(v8 + 14666800) = v7;
        v10[v7] = 1;
      }
      v9 = v5 ^ v6;
      v5 = __ROR8__(v5, 40) ^ (v9 << 16) ^ v9;
      v6 = __ROR8__(v9, 27);
    }
    while (v4 < 0x40);
  }
  else if (*(_BYTE *)(a1 + 3))
  {
    v3 = 0;
    do
    {
      *(_BYTE *)(a1 + 14666800 + v3) = v3;
      ++v3;
    }
    while (v2 != v3);
  }
}

unsigned __int8 *compress_block(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, double a5, double a6, int32x4_t a7, double a8, float32x4_t a9)
{
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float32x4_t *v15;
  _BOOL4 v16;
  float v17;
  int v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  void *v22;
  unsigned __int8 v23;
  int8x16_t v24;
  uint64_t v25;
  uint32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  char v30;
  float v31;
  float v32;
  unsigned __int8 v33;
  _BOOL8 v34;
  float32x4_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t *v44;
  _BOOL8 v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int v89;
  int v90;
  int32x4_t *v91;
  float v92;
  int8x16_t v93;
  unsigned int v94;
  float32x4_t v95;
  float32x4_t v96;
  unsigned __int8 v97;
  uint32x4_t v98;
  float v99;
  int8x16_t *v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  unsigned __int16 *v104;
  float32x4_t *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  float32x4_t *v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  float32x4_t v137;
  uint8x8_t v138;
  uint8x8_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int32x4_t v143;
  unsigned int v144;
  float v145;
  float v146;
  float v147;
  int *v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char v156;
  _WORD *v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  float v161;
  int v162;
  char v163;
  float32x4_t *v164;
  char v165;
  unsigned int v166;
  char v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int best_partition_candidates;
  float32x4_t v175;
  float v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  float32x4_t v182;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  float32x4_t *v188;
  float32x4_t v189;
  float32x4_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int32x2_t *v194;
  unsigned int v195;
  int8x16_t v196;
  unsigned int v197;
  float32x4_t v198;
  _DWORD *v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  float32x4_t *v203;
  unsigned int v204;
  float32x4_t v205;
  float32x4_t *v206;
  float32x4_t v207;
  int v208;
  unsigned __int8 *v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int8x16_t v214;
  float32x4_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  float32x4_t v219;
  __int128 v220;
  __int128 v221;
  float32x4_t v222;
  int32x4_t v223;
  int8x16_t v224;
  float v225[2];
  int v226;
  uint64_t v227;
  int v228;
  __int128 v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  __int128 v234;
  _BYTE v235[32];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  int32x4_t v239;
  int v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  int32x4_t v247;
  int v248;
  char v249[32];
  _DWORD v250[8];
  _DWORD v251[8];
  unsigned __int8 v252[32];
  int8x16_t v253;
  float32x4_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  int8x16_t v258;
  __int128 v259;
  __int128 v260;
  float32x4_t v261[8];
  uint64_t v262;

  v11 = (uint64_t)a2;
  v12 = a1;
  v262 = *MEMORY[0x24BDAC8D0];
  v13 = 30720.0;
  if (!a2[235].i8[10])
    v13 = 65535.0;
  if (a2[218].f32[3] == v13)
  {
    v14 = a2[220].f32[3];
    v15 = a2 + 222;
    v16 = v14 != v13 && a2[222].i8[0] != 0;
    if (a2[222].i8[0] != 0 && v14 == v13)
      v17 = 0.66667;
    else
      v17 = 1.0;
  }
  else
  {
    v15 = a2 + 222;
    v16 = a2[222].i8[0] != 0;
    v17 = 1.0;
  }
  v203 = *(float32x4_t **)(a1 + 128);
  v18 = *(_DWORD *)a1;
  v19 = *(unsigned int *)(a1 + 44);
  v232 = *(_QWORD *)(a1 + 48);
  v233 = *(_DWORD *)(a1 + 56);
  v230 = *(_QWORD *)(a1 + 72);
  v231 = *(_DWORD *)(a1 + 80);
  v20 = a2[218];
  v21 = a2[220];
  v22 = &unk_255825000;
  if ((v23 & 1) == 0)
  {
    v211 = a2[220];
    v212 = a2[218];
    v21 = v211;
    v20 = v212;
    v12 = a1;
    if (v184)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v21 = v211;
      v20 = v212;
      v12 = a1;
    }
  }
  v24 = (int8x16_t)vceqq_f32(v20, v21);
  v25 = 0x100000001;
  v27.i64[1] = 0x100000001;
  v26 = (uint32x4_t)vandq_s8(v24, (int8x16_t)v27);
  v27.i64[0] = mask(vmask4)::shift;
  v28 = (int8x16_t)vshlq_u32(v26, (uint32x4_t)mask(vmask4)::shift);
  if (vaddvq_s32((int32x4_t)v28) == 15)
  {
    BYTE1(v234) = 0;
    v29 = *(float32x4_t *)(v11 + 3472);
    if ((v18 & 0xFFFFFFFE) == 2)
    {
      v28 = (int8x16_t)vmovl_u16((uint16x4_t)vcvt_f16_f32(v29));
      v30 = 1;
    }
    else
    {
      __asm { FMOV            V1.4S, #1.0 }
      a7 = vdupq_n_s32(0x477FFF00u);
      v39 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v29, (float32x4_t)0), _Q1), (float32x4_t)a7);
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      v28 = (int8x16_t)vcvtq_s32_f32(vaddq_f32(v39, v27));
      v30 = 2;
    }
    v40 = (unsigned __int8 *)v203;
    LOBYTE(v234) = v30;
    *(int8x16_t *)&v235[4] = v28;
    v41 = a3;
    return symbolic_to_physical(v40, (unsigned __int8 *)&v234, v41, *(double *)v28.i64, *(double *)v27.i64, *(float *)a7.i32);
  }
  v27 = *(float32x4_t *)(v11 + 3536);
  a7.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  *(float32x2_t *)v27.f32 = vadd_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v27.f32);
  a7.i8[0] = v203->i8[3];
  LODWORD(a8) = *(_DWORD *)(v12 + 88);
  v31 = *(float *)(v12 + 84)
      * (float)((float)a7.u32[0] * vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0]);
  v229 = xmmword_2261A28B0;
  v27.i64[0] = *(_QWORD *)(v12 + 92);
  v227 = v27.i64[0];
  if (v16)
    v32 = 0.95238;
  else
    v32 = 1.0;
  *(_DWORD *)v235 = 1900671690;
  LOBYTE(v234) = 0;
  v226 = 0;
  v228 = 0;
  v225[0] = 1.0 / *(float *)&a8;
  v225[1] = 1.0;
  v33 = atomic_load((unsigned __int8 *)qword_254123EC0);
  if ((v33 & 1) == 0)
  {
    v185 = __cxa_guard_acquire(qword_254123EC0);
    v12 = a1;
    if (v185)
    {
      *(float *)&_MergedGlobals_503 = 1.0 / *(float *)(a1 + 88);
      __cxa_guard_release(qword_254123EC0);
      v12 = a1;
    }
  }
  v27.i32[0] = *(_DWORD *)(v12 + 104);
  a7.i32[0] = 1062836634;
  v191 = a3;
  v34 = v27.f32[0] < 0.85 || v203->u8[2] != 1;
  v42 = v32 * (float)(v17 * v31);
  v43 = *(float *)&v229;
  v44 = &qword_254123000;
  v202 = a4;
  do
  {
    v45 = v34;
    v46 = v42 * v225[v34];
    *(float *)v28.i32 = v46 * *(float *)&_MergedGlobals_503;
    *(float *)v28.i32 = compress_symbolic_block_for_partition_1plane(v12, v203, (float32x4_t *)v11, !v34, 1u, 0, (uint64_t)&v234, a4, *(double *)v28.i64, *(double *)v27.i64, *(double *)a7.i64, a8, a9, 11);
    if (*(float *)v28.i32 < v46)
      goto LABEL_134;
    if (v43 >= *(float *)v28.i32)
      v43 = *(float *)v28.i32;
    v34 = 1;
    a4 = v202;
    v12 = a1;
  }
  while (!v45);
  v47 = 0;
  v28 = *(int8x16_t *)(v11 + 3536);
  v27.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
  *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v28.i8);
  *(float32x2_t *)v28.i8 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
  v48 = 0.25 * *(float *)v28.i32;
  v192 = v203[706559].u8[6 * v203[706303].u16[WORD2(v234)] + 3];
  *(float *)&v229 = v43;
  v49 = 0.0;
  v50 = 0.0;
  v27.i32[0] = 0;
  v28.i32[0] = 0;
  v51 = 0.0;
  v52 = 0.0;
  v53 = 0.0;
  v54 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  v57 = 0.0;
  v58 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  do
  {
    v59 = v48 + v59;
    v62 = *(float *)(v11 + v47);
    v63 = *(float *)(v11 + v47 + 864);
    v64 = *(float *)(v11 + v47 + 1728);
    v65 = *(float *)(v11 + v47 + 2592);
    v49 = v49 + (float)(v48 * v62);
    v51 = v51 + (float)(v62 * (float)(v48 * v62));
    v55 = v55 + (float)(v63 * (float)(v48 * v62));
    v56 = v56 + (float)(v64 * (float)(v48 * v62));
    v57 = v57 + (float)(v65 * (float)(v48 * v62));
    v50 = v50 + (float)(v48 * v63);
    v52 = v52 + (float)(v63 * (float)(v48 * v63));
    v58 = v58 + (float)(v64 * (float)(v48 * v63));
    v61 = v61 + (float)(v65 * (float)(v48 * v63));
    v27.f32[0] = v27.f32[0] + (float)(v48 * v64);
    v53 = v53 + (float)(v64 * (float)(v48 * v64));
    v60 = v60 + (float)(v65 * (float)(v48 * v64));
    *(float *)v28.i32 = *(float *)v28.i32 + (float)(v48 * v65);
    v54 = v54 + (float)(v65 * (float)(v48 * v65));
    v47 += 4;
  }
  while (4 * v203->u8[3] != v47);
  v66 = 1.0 / v59;
  if (v59 <= 0.0000001)
    v66 = 10000000.0;
  v67 = v66 * v49;
  v68 = v51 - (float)(v49 * (float)(v66 * v49));
  v69 = v55 - (float)(v50 * v67);
  v70 = v56 - (float)(v27.f32[0] * v67);
  v71 = v57 - (float)(*(float *)v28.i32 * v67);
  v72 = v66 * v50;
  v73 = v52 - (float)(v50 * (float)(v66 * v50));
  v74 = v58 - (float)(v27.f32[0] * v72);
  v75 = v61 - (float)(*(float *)v28.i32 * v72);
  v76 = v66 * v27.f32[0];
  v77 = v53 - (float)(v27.f32[0] * (float)(v66 * v27.f32[0]));
  v78 = v60 - (float)(*(float *)v28.i32 * v76);
  v79 = v54 - (float)(*(float *)v28.i32 * (float)(v66 * *(float *)v28.i32));
  v80 = v69 * (float)(1.0 / sqrtf(v68 * v73));
  v81 = v70 * (float)(1.0 / sqrtf(v68 * v77));
  a9.f32[0] = v71 * (float)(1.0 / sqrtf(v68 * v79));
  v82 = v74 * (float)(1.0 / sqrtf(v73 * v77));
  v83 = v75 * (float)(1.0 / sqrtf(v73 * v79));
  v84 = v78 * (float)(1.0 / sqrtf(v77 * v79));
  v27.f32[0] = fabsf(v80);
  v85 = fabsf(v81);
  if (v27.f32[0] >= v85)
    v27.f32[0] = v85;
  v86 = fabsf(a9.f32[0]);
  if (v27.f32[0] >= v86)
    v27.f32[0] = v86;
  v87 = fabsf(v82);
  if (v27.f32[0] >= v87)
    v27.f32[0] = v87;
  *(float *)a7.i32 = fabsf(v83);
  if (v27.f32[0] >= *(float *)a7.i32)
    v27.f32[0] = *(float *)a7.i32;
  *(float *)v28.i32 = fabsf(v84);
  if (v27.f32[0] >= *(float *)v28.i32)
    v88 = *(float *)v28.i32;
  else
    v88 = v27.f32[0];
  v89 = v192;
  if (v192 >= 11)
    v89 = 11;
  v194 = (int32x2_t *)(v202 + 1888);
  v193 = v202 + 3776;
  v201 = v202 + 26048;
  v195 = v89;
  v186 = ~(-2 << v89);
  v90 = 3;
  v91 = (int32x4_t *)"23IntrospectionFixedArrayImEE";
  v92 = *(float *)(a1 + 100);
  v93.i64[0] = 0x100000001;
  v93.i64[1] = 0x100000001;
  v206 = (float32x4_t *)v11;
  v187 = v19;
  v188 = v15;
  while (1)
  {
    v94 = v90;
    if (v88 <= v92 && (v90 == 3 || !v15->i8[0]))
    {
      v95 = *(float32x4_t *)(v11 + 3488);
      v96 = *(float32x4_t *)(v11 + 3520);
      if ((v97 & 1) == 0)
      {
        v210 = *(float32x4_t *)(v11 + 3488);
        v205 = *(float32x4_t *)(v11 + 3520);
        v96 = v205;
        v95 = v210;
        v93.i64[0] = 0x100000001;
        v93.i64[1] = 0x100000001;
        if (v168)
        {
          *((int32x4_t *)v22 + 202) = v91[72];
          v96 = v205;
          v95 = v210;
          v93.i64[0] = 0x100000001;
          v93.i64[1] = 0x100000001;
        }
      }
      a7 = vceqq_s32(vdupq_n_s32(v94), v91[72]);
      v98 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v95, v96), v93), (int8x16_t)a7);
      v27 = *((float32x4_t *)v22 + 202);
      v28 = (int8x16_t)vshlq_u32(v98, (uint32x4_t)v27);
      v28.i32[0] = vaddvq_s32((int32x4_t)v28);
      if (!v28.i32[0])
        break;
    }
LABEL_109:
    v90 = v94 - 1;
    if (!v94)
      goto LABEL_113;
  }
  v196 = (int8x16_t)a7;
  v99 = *((float *)v44 + 942);
  v100 = (int8x16_t *)v202;
  v204 = v94;
  compute_ideal_colors_and_weights_2planes((uint64_t)v203, v11, v94, v202, (uint64_t)v194, *(double *)v28.i64, *(double *)v27.i64, *(double *)a7.i64, (int32x4_t)v93, a9);
  v101 = v203->u32[2];
  if ((_DWORD)v101)
  {
    v102 = 0;
    v103 = 0;
    v104 = &v203[4].u16[2];
    v105 = v203 + 37;
    do
    {
      v106 = *v104;
      v104 += 3;
      if ((v106 & v186) != 0)
      {
        compute_ideal_weights_for_decimation((int32x2_t *)v202, v105, (_OWORD *)(v193 + 4 * (v102 & 0xFFFFFFC0)));
        compute_ideal_weights_for_decimation(v194, v105, (_OWORD *)(v193 + 4 * (v102 & 0xFFFFFFC0) + 128));
        v101 = v203->u32[2];
      }
      ++v103;
      v102 += 64;
      v105 += 8118;
    }
    while (v103 < v101);
  }
  v207 = *(float32x4_t *)(v202 + 32);
  v198 = *(float32x4_t *)(v202 + 96);
  v189 = *(float32x4_t *)(v202 + 1984);
  v190 = *(float32x4_t *)(v202 + 1920);
  v107 = (uint64_t)v203;
  compute_angular_endpoints_2planes((unsigned int *)v203, v193, v195, v202);
  v108 = v203[1].u32[1];
  v109 = v203[1].u32[2];
  v110 = v109 - v108;
  if (v109 <= v108)
  {
    v11 = (uint64_t)v206;
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    v112 = vdivq_f32(vsubq_f32(_Q0, v190), vsubq_f32(v189, v190));
    v113.i64[0] = 0x3F0000003F000000;
    v113.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V3.4S, #10.0 }
    v120 = (int8x16_t)vdupq_n_s32(0x7149F2CAu);
    v115 = (float32x4_t)vorrq_s8(vandq_s8(vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32(v112, v113), (int8x16_t)vcgtq_f32(_Q3, v112)), (int8x16_t)v112, (int8x16_t)_Q3), v196), vbicq_s8(v120, v196));
    v116 = vdivq_f32(vsubq_f32(_Q0, v207), vsubq_f32(v198, v207));
    v117 = (int8x16_t)vcgtq_f32(v116, v113);
    v118 = (int8x16_t)vcgtq_f32(_Q3, v116);
    v119 = vandq_s8(v117, v118);
    v116.f32[0] = vminvq_f32((float32x4_t)vbslq_s8(v196, v120, vbslq_s8(v119, (int8x16_t)v116, (int8x16_t)_Q3)));
    v120.i32[0] = 1065520988;
    v121 = v116.f32[0] * 1.02;
    v122 = vminvq_f32(v115) * 1.02;
    v123 = 4 * v108 + 179648;
    v124 = 4 * v108 + 209792;
    v125 = (_DWORD)v108 << 6;
    v126 = &v203[706559].i8[6 * v108 + 4];
    v127 = 4 * v108 + 217984;
    v128 = 4 * v108 + 196032;
    v129 = v108 + 177600;
    v11 = (uint64_t)v206;
    do
    {
      if (v195 >= *(v126 - 1))
      {
        v100->i8[v129] = 109 - *v126;
        v115.i32[0] = *(__int32 *)((char *)v100->i32 + v128);
        if (v115.f32[0] > v121)
        {
          *(__int32 *)((char *)v100->i32 + v128) = 1065353216;
          v115.i32[0] = 1.0;
        }
        v208 = v110;
        if (*(float *)((char *)v100->i32 + v127) > v122)
          *(__int32 *)((char *)v100->i32 + v127) = 1065353216;
        v130 = (unsigned __int8 *)&v203[8118 * *(v126 - 2) + 37];
        v199 = (__int32 *)((char *)v100->i32 + v123);
        v131 = (float32x4_t *)(v193 + ((unint64_t)*(v126 - 2) << 8));
        compute_quantized_weights_for_decimation((uint64_t)v130, v131, (float32x4_t *)&v253, v201 + (v125 & 0xFFFFFFC0), *(v126 - 1), *(float *)((char *)v100[512].i32 + v123), *(double *)v115.i64, *(double *)v120.i64, *(double *)_Q3.i64, *(double *)v119.i64, *(double *)v118.i64);
        LODWORD(v132) = *(_DWORD *)(v202 + v127);
        v100 = (int8x16_t *)v202;
        compute_quantized_weights_for_decimation((uint64_t)v130, v131 + 8, v261, v201 + (v125 & 0xFFFFFFC0) + 32, *(v126 - 1), *(float *)(v202 + v124), v132, v133, v134, v135, v136);
        *v199 = compute_error_of_weight_set_2planes((float32x4_t *)v202, (float32x4_t *)v194, v130, (float32x4_t *)&v253, v261, v137, v138, v139).u32[0];
        v11 = (uint64_t)v206;
        v110 = v208;
      }
      else
      {
        *(__int32 *)((char *)v100->i32 + v123) = 2123789977;
      }
      v123 += 4;
      v124 += 4;
      v125 += 64;
      v126 += 6;
      v127 += 4;
      v128 += 4;
      ++v129;
      --v110;
    }
    while (v110);
    v107 = (uint64_t)v203;
    v108 = v203[1].u32[1];
    v109 = v203[1].u32[2];
  }
  v140 = vorrq_s8(vandq_s8(v100[120], v196), vbicq_s8(v100[2], v196));
  v141 = vandq_s8(v100[124], v196);
  v142 = vbicq_s8(v100[6], v196);
  v253.i32[0] = v100[1].i32[0];
  v254 = (float32x4_t)v140;
  v258 = vorrq_s8(v141, v142);
  v200 = compute_ideal_endpoint_formats((uint64_t)&v203[916223], v11, (uint64_t)&v253, v202 + 177600, v202 + 179648, *(unsigned int *)(a1 + 68), v108, v109, v252, (uint64_t)v251, (uint64_t)v250, (uint64_t)v249, (uint64_t)v100);
  if (v200)
  {
    v144 = 0;
    v145 = v42 * v99;
    v146 = *(float *)v235;
    v147 = 1.0e30;
    v148 = (int *)a1;
    do
    {
      v149 = v251[v144];
      v150 = *(unsigned __int8 *)(v107 + 6 * v149 + 11304946);
      v151 = v107 + 129888 * *(unsigned __int8 *)(v107 + 6 * v149 + 11304946);
      v152 = *(unsigned __int8 *)(v151 + 594);
      v153 = v144;
      v209 = (unsigned __int8 *)(v151 + 594);
      v220 = v259;
      v221 = v260;
      v222 = v261[0];
      v216 = v255;
      v217 = v256;
      v218 = v257;
      v219 = (float32x4_t)v258;
      v27.i64[0] = v253.i64[0];
      v28.i64[0] = v254.i64[0];
      v214 = v253;
      v215 = v254;
      v154 = (char *)(v201 + (v149 << 6) + 32);
      v155 = (char *)&v246 + 4;
      do
      {
        *(v155 - 32) = *(v154 - 32);
        v156 = *v154++;
        *v155++ = v156;
        --v152;
      }
      while (v152);
      if (v148[16])
      {
        v197 = v144;
        v157 = (_WORD *)(v107 + 6 * v149 + 11304944);
        v158 = v107 + 129888 * v150 + 592;
        v159 = 1;
        v160 = -1;
        while (1)
        {
          recompute_ideal_colors_2planes((float32x4_t *)v11, v107, v158, (uint64_t)&v244 + 4, (uint64_t)&v246 + 4, &v214, (float32x4_t *)&v224, (int8x16_t *)&v223, *(double *)v28.i64, *(double *)v27.i64, *(uint8x8_t *)a7.i8, *(uint8x8_t *)v143.i8, v204);
          BYTE8(v241) = pack_color_endpoints(v252[4 * v153], (unsigned __int8 *)&v242 + 4, v250[v153], v215, v219, v224, v223);
          WORD3(v241) = 0;
          HIDWORD(v241) = v250[v153];
          BYTE2(v241) = 0;
          WORD2(v241) = *v157;
          BYTE3(v241) = v204;
          LOWORD(v241) = 259;
          if (v159 == 1)
          {
            v161 = compute_symbolic_block_difference_2plane(a1, v107, (uint64_t)&v241, (float32x4_t *)v11);
            if (v161 == -1.0e30)
            {
              LOBYTE(v241) = 0;
              v161 = 1.0e30;
            }
            if (v161 < v147)
              v147 = v161;
            v148 = (int *)a1;
            v27.i32[0] = 1066024305;
            a7.i32[0] = 1027101164;
            *(float *)v28.i32 = v146 * (float)((float)((float)*(unsigned int *)(a1 + 64) * 0.045) + 1.08);
            if (v161 > *(float *)v28.i32)
              goto LABEL_102;
            if (v161 >= v146)
            {
              v161 = v146;
            }
            else
            {
              *(float *)&v242 = v161;
              a7 = v247;
              v237 = v245;
              v238 = v246;
              v239 = v247;
              v240 = v248;
              *(_OWORD *)&v235[16] = v243;
              v236 = v244;
              v28.i64[0] = v241;
              v27.i64[0] = v242;
              v234 = v241;
              *(_OWORD *)v235 = v242;
              if (v161 < v145)
              {
                v146 = v161;
                v144 = v200;
                goto LABEL_104;
              }
            }
          }
          else
          {
            v161 = v146;
            v148 = (int *)a1;
          }
          v162 = *v148;
          if (*v209 == *(unsigned __int8 *)(v107 + 3))
            v163 = realign_weights_undecimated(v162, v107, (float32x4_t *)v11, (uint64_t)&v241, *(double *)v28.i64, *(double *)v27.i64, a7, v143);
          else
            v163 = realign_weights_decimated(v162, v107, (float32x4_t *)v11, (uint64_t)&v241, *(double *)v28.i64, *(double *)v27.i64, a7, v143);
          v164 = (float32x4_t *)v11;
          v165 = v163;
          *(float *)v28.i32 = compute_symbolic_block_difference_2plane(a1, v107, (uint64_t)&v241, v164);
          if (*(float *)v28.i32 == -1.0e30)
          {
            LOBYTE(v241) = 0;
            v28.i32[0] = 1900671690;
          }
          if (*(float *)v28.i32 < v147)
            v147 = *(float *)v28.i32;
          v148 = (int *)a1;
          v166 = *(_DWORD *)(a1 + 64);
          a7.i32[0] = 1027101164;
          v27.f32[0] = v161 * (float)((float)((float)(v160 + v166) * 0.045) + 1.0);
          if (*(float *)v28.i32 > v27.f32[0])
          {
            v146 = v161;
            v11 = (uint64_t)v206;
LABEL_102:
            v144 = v197;
            goto LABEL_104;
          }
          v146 = v161;
          if (*(float *)v28.i32 < v161)
          {
            LODWORD(v242) = v28.i32[0];
            v237 = v245;
            v238 = v246;
            v239 = v247;
            *(_OWORD *)&v235[16] = v243;
            v236 = v244;
            v27.i64[0] = v241;
            a7.i64[0] = v242;
            v234 = v241;
            *(_OWORD *)v235 = v242;
            v146 = *(float *)v28.i32;
            v240 = v248;
            if (*(float *)v28.i32 < v145)
              break;
          }
          if (v159 < v166)
            v167 = v165;
          else
            v167 = 0;
          ++v159;
          --v160;
          v11 = (uint64_t)v206;
          if ((v167 & 1) == 0)
            goto LABEL_102;
        }
        v146 = *(float *)v28.i32;
        v144 = v200;
        v11 = (uint64_t)v206;
      }
LABEL_104:
      ++v144;
    }
    while (v144 < v200);
  }
  else
  {
    v147 = 1.0e30;
  }
  v27.i32[0] = 1072483533;
  *(float *)v28.i32 = *(float *)&v229 * 1.85;
  v19 = v187;
  v15 = v188;
  v22 = &unk_255825000;
  v44 = &qword_254123000;
  v91 = (int32x4_t *)("N2re23IntrospectionFixedArrayImEE" + 4);
  v93.i64[0] = 0x100000001;
  v93.i64[1] = 0x100000001;
  if (v147 <= (float)(*(float *)&v229 * 1.85))
  {
    v94 = v204;
    if (v147 < v42)
      goto LABEL_134;
    goto LABEL_109;
  }
LABEL_113:
  if ((int)v19 >= 2)
  {
    v169 = 2;
    while (1)
    {
      v170 = v11;
      v171 = 4 * v169 - 8;
      v172 = *(_DWORD *)((char *)&v232 + v171);
      v173 = *(_DWORD *)((char *)&v230 + v171) >= v172
           ? *(_DWORD *)((char *)&v232 + v171)
           : *(_DWORD *)((char *)&v230 + v171);
      best_partition_candidates = find_best_partition_candidates((uint64_t)v203, v170, v169, v172, (uint64_t)&v253, v173, *(double *)v28.i64, *(double *)v27.i64, *(double *)a7.i64, *(double *)v93.i64);
      v176 = *(float *)((char *)&v229 + v171);
      v177 = v169 - 1;
      if (best_partition_candidates)
        break;
      a7.i32[0] = *(&v226 + v177);
      v27.i32[0] = *((_DWORD *)&v229 + v177);
LABEL_127:
      *(float *)v28.i32 = v176 * *(float *)a7.i32;
      _ZF = v27.f32[0] > (float)(v176 * *(float *)a7.i32) || ++v169 == v19 + 1;
      v11 = (uint64_t)v206;
      if (_ZF)
        goto LABEL_134;
    }
    v178 = 0;
    v179 = 4 * best_partition_candidates;
    while (1)
    {
      *(float *)v28.i32 = v42 * *(float *)&_MergedGlobals_503;
      *(float *)v28.i32 = compress_symbolic_block_for_partition_1plane(a1, v203, v206, 0, v169, v253.i32[v178 / 4], (uint64_t)&v234, v202, *(double *)v28.i64, *(double *)v27.i64, *(double *)a7.i64, *(double *)v93.i64, v175, v192);
      v27.i32[0] = *((_DWORD *)&v229 + v177);
      if (v27.f32[0] >= *(float *)v28.i32)
        v27.f32[0] = *(float *)v28.i32;
      *((_DWORD *)&v229 + v177) = v27.i32[0];
      a7.i32[0] = *(&v226 + v177);
      *(float *)v93.i32 = v176 * (float)(*(float *)a7.i32 * 1.85);
      if (v27.f32[0] > *(float *)v93.i32 || *(float *)v28.i32 < v42)
        break;
      v178 += 4;
      if (v179 == v178)
        goto LABEL_127;
    }
    v11 = (uint64_t)v206;
  }
LABEL_134:
  if (!(_BYTE)v234)
  {
    LOBYTE(v234) = 2;
    __asm { FMOV            V1.4S, #1.0 }
    a7 = vdupq_n_s32(0x477FFF00u);
    v182 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(v11 + 3472), (float32x4_t)0), _Q1), (float32x4_t)a7);
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v28 = (int8x16_t)vcvtq_s32_f32(vaddq_f32(v182, v27));
    *(int8x16_t *)&v235[4] = v28;
  }
  v40 = (unsigned __int8 *)v203;
  v41 = v191;
  return symbolic_to_physical(v40, (unsigned __int8 *)&v234, v41, *(double *)v28.i64, *(double *)v27.i64, *(float *)a7.i32);
}

float compress_symbolic_block_for_partition_1plane(uint64_t a1, float32x4_t *a2, float32x4_t *a3, int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, float32x4_t a13, int a14)
{
  float v16;
  signed int v18;
  float (*v20)(uint64_t, uint64_t, __int128 *, float32x4_t *);
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  float v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  float32x4_t v55;
  float32x4_t v56;
  double v57;
  uint8x8_t v58;
  uint64_t v59;
  float32x4_t *v60;
  unsigned int v61;
  float v62;
  float v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  size_t v67;
  __int128 v68;
  float32x4_t v69;
  __int128 v70;
  float32x4_t v71;
  double v72;
  double v73;
  __int128 v74;
  uint8x8_t v75;
  int *v76;
  _DWORD *v77;
  uint64_t v78;
  char v79;
  float32x4_t *v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int v84;
  double v85;
  __int128 v86;
  int32x4_t v87;
  int32x4_t v88;
  char v89;
  uint64_t v90;
  unsigned __int8 *v91;
  float32x4_t *v92;
  int v93;
  int *v94;
  float v95;
  __int128 v96;
  __int128 v97;
  int v98;
  char v99;
  char v100;
  unsigned int v101;
  __int128 v102;
  __int128 v103;
  char v104;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  __int16 v110;
  unsigned __int16 *v111;
  unsigned __int8 *v115;
  uint64_t v116;
  _WORD *v117;
  uint64_t __dst;
  float (*v119)(uint64_t, uint64_t, __int128 *, float32x4_t *);
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int *v124;
  int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[3];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int v133;
  int32x4_t v134[4];
  int8x16_t v135[4];
  _DWORD v136[8];
  _DWORD v137[8];
  _DWORD v138[8];
  _BYTE v139[32];
  float32x4_t v140[5];
  _OWORD v141[11];
  uint64_t v142;

  v16 = *(float *)&a9;
  v142 = *MEMORY[0x24BDAC8D0];
  if (a14 >= 11)
    v18 = 11;
  else
    v18 = a14;
  _ZF = (*(_BYTE *)(a1 + 4) & 0x40) == 0 && a5 == 1;
  v20 = (float (*)(uint64_t, uint64_t, __int128 *, float32x4_t *))compute_symbolic_block_difference_1plane;
  if (_ZF)
    v20 = (float (*)(uint64_t, uint64_t, __int128 *, float32x4_t *))compute_symbolic_block_difference_1plane_1partition;
  v119 = v20;
  v110 = a6;
  if (a5 < 2)
    v21 = 0;
  else
    v21 = a2[128 * (unint64_t)(a5 - 2) + 916291].u16[a6];
  v22 = (a5 << 10) - 2048;
  v123 = a5 - 1;
  if (a5 == 1)
    v22 = 3072;
  v111 = (unsigned __int16 *)&a2[68 * v22 + 707327 + 68 * v21];
  compute_ideal_colors_and_weights_1plane((uint64_t)a3, v111, (_BYTE *)a8, a9, a10, a11, a12, a13);
  v23 = 0;
  v24 = a8 + 3776;
  v121 = a4;
  v25 = 2;
  if (a4)
    v25 = 1;
  v26 = (unint64_t)a2->u32[v25] << 6;
  v120 = (uint64_t)a2;
  v27 = a2 + 37;
  v28 = 66;
  do
  {
    if ((*(unsigned __int16 *)(v120 + v28) & ~(-2 << v18)) != 0)
      compute_ideal_weights_for_decimation((int32x2_t *)a8, v27, (_OWORD *)(v24 + 4 * (v23 & 0xFFFFFFC0)));
    v23 += 64;
    v27 += 8118;
    v28 += 6;
  }
  while (v26 != v23);
  v29 = 0;
  __asm
  {
    FMOV            V0.4S, #10.0
    FMOV            V1.4S, #1.0
  }
  v35.i64[0] = 0x3F0000003F000000;
  v35.i64[1] = 0x3F0000003F000000;
  do
  {
    v36 = vdivq_f32(vsubq_f32(_Q1, *(float32x4_t *)(a8 + v29 + 32)), vsubq_f32(*(float32x4_t *)(a8 + v29 + 96), *(float32x4_t *)(a8 + v29 + 32)));
    _Q0 = (float32x4_t)vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32(v36, v35), (int8x16_t)vcgtq_f32(_Q0, v36)), (int8x16_t)v36, (int8x16_t)_Q0);
    v29 += 16;
  }
  while (16 * a5 != v29);
  v108 = a8 + 26048;
  v37 = vminvq_f32(_Q0);
  compute_angular_endpoints_1plane(v121, v120, a8 + 3776, v18, a8);
  v43 = 0;
  v44 = 177600;
  v45 = (unsigned int *)(v120 + 16);
  if (!v121)
    v45 = (unsigned int *)(v120 + 20);
  v46 = v37 * 1.02;
  __dst = *v45;
  v47 = (unsigned __int8 *)(v120 + 11304948);
  v48 = a8 + 179648;
  do
  {
    if (v18 < *(v47 - 1)
      || (v49 = compress_symbolic_block_for_partition_1plane(astcenc_config const&,block_size_descriptor const&,image_block const&,BOOL,float,unsigned int,unsigned int,symbolic_compressed_block &,compression_working_buffers &,int)::free_bits_for_partition_count[v123],
          v50 = *v47,
          _VF = __OFSUB__(v49, v50),
          v51 = v49 - v50,
          (v51 < 0) ^ _VF | (v51 == 0)))
    {
      *(_DWORD *)v48 = 2123789977;
    }
    else
    {
      v52 = (_DWORD *)(v48 + 0x4000);
      if (*(float *)(v48 + 0x4000) > v46)
        *v52 = 1065353216;
      v53 = *(v47 - 2);
      v54 = (unsigned __int8 *)(v120 + 129888 * v53 + 592);
      *(_BYTE *)(a8 + v44) = v51;
      LODWORD(v38) = *v52;
      compute_quantized_weights_for_decimation((uint64_t)v54, (float32x4_t *)(v24 + (v53 << 8)), v140, v108 + (v43 & 0xFFFFFFC0), *(v47 - 1), *(float *)(v48 + 0x2000), v38, v39, v40, v41, v42);
      *(_DWORD *)v48 = compute_error_of_weight_set_1plane((float32x4_t *)a8, v54, v140, v55, v56, v57, v58).u32[0];
    }
    v43 += 64;
    v48 += 4;
    ++v44;
    v47 += 6;
  }
  while (__dst << 6 != v43);
  v59 = a1;
  v60 = a3;
  v107 = compute_ideal_endpoint_formats((uint64_t)v111, (uint64_t)a3, a8 + 16, a8 + 177600, a8 + 179648, *(unsigned int *)(a1 + 68), 0, __dst, v139, (uint64_t)v138, (uint64_t)v137, (uint64_t)v136, a8);
  if (!v107)
    return 1.0e30;
  v61 = 0;
  v62 = *(float *)(a7 + 16);
  v63 = 1.0e30;
  v64 = v120;
  do
  {
    v65 = v138[v61];
    v117 = (_WORD *)(v64 + 6 * v65 + 11304944);
    v66 = v64 + 129888 * *(unsigned __int8 *)(v64 + 6 * v65 + 11304946);
    v67 = *(unsigned __int8 *)(v66 + 594);
    v68 = *(_OWORD *)(a8 + 128);
    v141[1] = *(_OWORD *)(a8 + 112);
    v141[2] = v68;
    v141[3] = *(_OWORD *)(a8 + 144);
    v69 = *(float32x4_t *)(a8 + 64);
    v140[2] = *(float32x4_t *)(a8 + 48);
    v140[3] = v69;
    v70 = *(_OWORD *)(a8 + 96);
    v140[4] = *(float32x4_t *)(a8 + 80);
    v141[0] = v70;
    v71 = *(float32x4_t *)(a8 + 32);
    v140[0] = *(float32x4_t *)(a8 + 16);
    v140[1] = v71;
    memcpy((char *)&v129[2] + 4, (const void *)(v108 + (v65 << 6)), v67);
    if (!*(_DWORD *)(v59 + 64))
      goto LABEL_78;
    v122 = 0;
    v106 = v61;
    v115 = (unsigned __int8 *)(v66 + 594);
    v116 = v66 + 592;
    v76 = &v137[v61];
    v124 = &v136[v61];
    v77 = &v139[4 * v61];
    while (1)
    {
      recompute_ideal_colors_1plane(v60, v111, v116, (uint64_t)&v129[2] + 4, (uint64_t)v140, (uint64_t)v135, (uint64_t)v134, v72, v73, *(uint8x8_t *)&v74, v75);
      v78 = 0;
      v79 = *v76 != *v124;
      v80 = (float32x4_t *)v141;
      v81 = 20;
      do
      {
        v82 = v80[-4];
        v83 = *v80++;
        v84 = pack_color_endpoints(*((unsigned __int8 *)v77 + v78), (unsigned __int8 *)&v129[-1] + v81, *v76, v82, v83, v135[v78], v134[v78]);
        *((_BYTE *)&v129[-1] + v78 + 8) = v84;
        v79 &= v84 == BYTE8(v128);
        ++v78;
        v81 += 8;
      }
      while (a5 != v78);
      BYTE2(v128) = 0;
      v89 = a5 > 1 ? v79 : 0;
      if ((v89 & 1) != 0)
      {
        v90 = 0;
        v125 = 0;
        v91 = (unsigned __int8 *)&v126;
        v92 = (float32x4_t *)v141;
        while (1)
        {
          v93 = pack_color_endpoints(*((unsigned __int8 *)v77 + v90), v91, *v124, v92[-4], *v92, v135[v90], v134[v90]);
          *((_BYTE *)&v125 + v90) = v93;
          if (v93 != v125)
            break;
          ++v90;
          v91 += 8;
          ++v92;
          if (a5 == v90)
          {
            WORD1(v128) = -255;
            DWORD2(v128) = v125;
            v85 = *(double *)&v126;
            *(_QWORD *)&v86 = v127;
            *(_OWORD *)((char *)v129 + 4) = v126;
            *(_OWORD *)((char *)&v129[1] + 4) = v127;
            BYTE1(v128) = a5;
            WORD3(v128) = v110;
            v94 = v124;
            goto LABEL_49;
          }
        }
        BYTE1(v128) = a5;
        WORD3(v128) = v110;
        v94 = v124;
        BYTE3(v128) = -1;
        if (BYTE2(v128))
          goto LABEL_49;
      }
      else
      {
        BYTE1(v128) = a5;
        WORD3(v128) = v110;
        BYTE3(v128) = -1;
      }
      v94 = v76;
LABEL_49:
      HIDWORD(v128) = *v94;
      WORD2(v128) = *v117;
      LOBYTE(v128) = 3;
      v59 = a1;
      v60 = a3;
      v64 = v120;
      if (v122)
        goto LABEL_59;
      *(float *)&v85 = v119(a1, v120, &v128, a3);
      if (*(float *)&v85 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        v95 = 1.0e30;
      }
      else
      {
        v95 = *(float *)&v85;
      }
      if (v95 < v63)
        v63 = v95;
      LODWORD(v86) = 1066024305;
      *(float *)&v85 = v62 * (float)((float)((float)*(unsigned int *)(a1 + 64) * 0.045) + 1.08);
      if (v95 > *(float *)&v85)
        goto LABEL_77;
      if (v95 >= v62)
      {
LABEL_59:
        v95 = v62;
      }
      else
      {
        *(float *)v129 = v95;
        v96 = v131;
        *(_OWORD *)(a7 + 64) = v130;
        *(_OWORD *)(a7 + 80) = v96;
        *(_OWORD *)(a7 + 96) = v132;
        *(_DWORD *)(a7 + 112) = v133;
        v97 = v129[2];
        *(_OWORD *)(a7 + 32) = v129[1];
        *(_OWORD *)(a7 + 48) = v97;
        v85 = *(double *)&v128;
        v86 = v129[0];
        *(_OWORD *)a7 = v128;
        *(_OWORD *)(a7 + 16) = v86;
        if (v95 < v16)
        {
          v62 = v95;
          v61 = v107;
          goto LABEL_78;
        }
      }
      v98 = *(_DWORD *)a1;
      if (*v115 == *(unsigned __int8 *)(v120 + 3))
        v99 = realign_weights_undecimated(v98, v120, a3, (uint64_t)&v128, v85, *(double *)&v86, v87, v88);
      else
        v99 = realign_weights_decimated(v98, v120, a3, (uint64_t)&v128, v85, *(double *)&v86, v87, v88);
      v100 = v99;
      *(float *)&v72 = v119(a1, v120, &v128, a3);
      if (*(float *)&v72 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        LODWORD(v72) = 1900671690;
      }
      if (*(float *)&v72 < v63)
        v63 = *(float *)&v72;
      v101 = *(_DWORD *)(a1 + 64);
      *(float *)&v73 = v95 * (float)((float)((float)(v101 + ~v122) * 0.045) + 1.0);
      if (*(float *)&v72 > *(float *)&v73)
      {
        v62 = v95;
        goto LABEL_77;
      }
      v62 = v95;
      if (*(float *)&v72 < v95)
        break;
LABEL_71:
      if (++v122 < v101)
        v104 = v100;
      else
        v104 = 0;
      if ((v104 & 1) == 0)
      {
        v64 = v120;
LABEL_77:
        v61 = v106;
        goto LABEL_78;
      }
    }
    LODWORD(v129[0]) = LODWORD(v72);
    v102 = v131;
    *(_OWORD *)(a7 + 64) = v130;
    *(_OWORD *)(a7 + 80) = v102;
    *(_OWORD *)(a7 + 96) = v132;
    *(_DWORD *)(a7 + 112) = v133;
    v103 = v129[2];
    *(_OWORD *)(a7 + 32) = v129[1];
    *(_OWORD *)(a7 + 48) = v103;
    v73 = *(double *)&v128;
    v74 = v129[0];
    *(_OWORD *)a7 = v128;
    *(_OWORD *)(a7 + 16) = v74;
    if (*(float *)&v72 >= v16)
    {
      v101 = *(_DWORD *)(a1 + 64);
      v62 = *(float *)&v72;
      goto LABEL_71;
    }
    v62 = *(float *)&v72;
    v61 = v107;
    v64 = v120;
LABEL_78:
    ++v61;
  }
  while (v61 < v107);
  return v63;
}

uint64_t realign_weights_decimated(int a1, uint64_t a2, float32x4_t *a3, uint64_t a4, double a5, double a6, int32x4_t a7, int32x4_t a8)
{
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  __n128 v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  char *v30;
  unint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  unint64_t v34;
  float32x4_t *v35;
  const float *v36;
  uint8x8_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  float *v40;
  unsigned int v41;
  float v42;
  float v43;
  unsigned int v44;
  float v45;
  uint64_t v46;
  float v47;
  float32x4_t v48;
  unsigned __int8 *v49;
  float *v50;
  float32x4_t v51;
  float32x4_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  float *v56;
  float v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x2_t v68;
  int8x16_t v69;
  float32x2_t v70;
  int8x16_t v71;
  float32x2_t v72;
  char v74;
  int32x4_t v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  float *v79;
  unsigned int v81;
  int v82;
  uint64_t v83;
  char v84;
  __int16 v85;
  _DWORD v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned __int8 *)(a4 + 1);
  if (v11 < 2)
    v12 = 0;
  else
    v12 = *(unsigned __int16 *)(a2
                              + ((unint64_t)(v11 - 2) << 11)
                              + 2 * *(unsigned __int16 *)(a4 + 6)
                              + 14660656);
  v13 = 0;
  v76 = ((_DWORD)v11 << 10) - 2048;
  v81 = *(unsigned __int8 *)(a2
                           + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848)
                           + 11304947);
  v14 = *(unsigned __int8 *)(a2
                           + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848)
                           + 11304946);
  v15 = *(unsigned __int8 *)(a2
                           + 129888
                           * *(unsigned __int8 *)(a2
                                                + 6
                                                * *(unsigned __int16 *)(a2
                                                                      + 2 * *(unsigned __int16 *)(a4 + 4)
                                                                      + 11300848)
                                                + 11304946)
                           + 594);
  v74 = *(_BYTE *)(a2 + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848) + 11304949);
  v16 = (__n128)vdupq_n_s32(*(char *)(a4 + 3));
  v75 = (int32x4_t)v16;
  v17 = (unsigned __int8 *)(a4 + 20);
  v85 = 0;
  v78 = v11;
  v18 = (unsigned __int8 *)(a4 + 8);
  v83 = 16 * v11;
  do
  {
    v19 = *v18++;
    unpack_color_endpoints(a1, v19, v17, (unsigned __int8 *)&v85 + 1, &v85, (uint64_t)&v86[v13 / 4 + 112], (__n128 *)&v86[v13 / 4 + 96], v16, a6, a7, a8);
    v20 = v83;
    v13 += 16;
    v17 += 8;
  }
  while (v83 != v13);
  v84 = 0;
  v21 = 0;
  v22 = 3072;
  if (v78 != 1)
    v22 = v76;
  v23 = a2 + 1088 * v22 + 11317232;
  v24 = (int8x16_t)vceqq_s32(v75, (int32x4_t)xmmword_2260FF480);
  v25 = a4 + 52;
  v26 = a2 + 129888 * v14;
  v27 = v26 + 814;
  v28 = v26 + 2544;
  v79 = (float *)(v26 + 75184);
  v77 = (unsigned __int8 *)(v26 + 6064);
  v29 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  v30 = (char *)&quant_and_xfer_tables + 226 * v81;
  do
  {
    v31 = 0;
    v24 = vmvnq_s8(v24);
    do
    {
      v32 = *(int32x4_t *)&v86[v31 / 4 + 112];
      v33 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v86[v31 / 4 + 96], v32), v24);
      *(float32x4_t *)&v86[v31 / 4 + 80] = vcvtq_f32_s32(v32);
      *(float32x4_t *)&v86[v31 / 4 + 64] = vmulq_f32(vcvtq_f32_s32(v33), v29);
      v31 += 16;
    }
    while (v20 != v31);
    v82 = v21;
    v34 = 0;
    v35 = (float32x4_t *)v86;
    do
    {
      v36 = (const float *)(v25 + v34);
      v37 = (uint8x8_t)vld1_dup_f32(v36);
      *v35++ = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v37)));
      v34 += 4;
    }
    while (v34 < v15);
    v38 = 0;
    v39 = v77;
    v40 = v79;
    do
    {
      v41 = *(unsigned __int16 *)&v30[2 * *(unsigned __int8 *)(v25 + v38) + 96];
      v42 = *(float *)&v86[v38];
      v43 = (float)*(_WORD *)&v30[2 * *(unsigned __int8 *)(v25 + v38) + 96];
      v44 = v41 >> 8;
      v45 = v43 - v42;
      v46 = *(unsigned __int8 *)(a2 + 129888 * v14 + v38 + 6000);
      v47 = (float)(v41 >> 8) - v42;
      v48 = 0uLL;
      v49 = v39;
      v50 = v40;
      v51 = 0uLL;
      v52 = 0uLL;
      do
      {
        v53 = *v49;
        v49 += 64;
        v54 = a2 + 129888 * v14;
        v55 = (unsigned __int8 *)(v54 + v53);
        v56 = (float *)(v54 + 4 * v53);
        v57 = (float)((float)(*(float *)&v86[v55[1030]] * v56[852])
                    + (float)(*(float *)&v86[*(unsigned __int8 *)(v27 + v53)] * *(float *)(v28 + 4 * v53)))
            + (float)((float)(*(float *)&v86[v55[1462]] * v56[1284]) + (float)(*(float *)&v86[v55[1246]] * v56[1068]));
        v58 = *(unsigned __int8 *)(v23 + 1088 * v12 + v53 + 8);
        v59 = *(float32x4_t *)&v86[4 * v58 + 64];
        v60 = vaddq_f32(*(float32x4_t *)&v86[4 * v58 + 80], vmulq_n_f32(v59, v57));
        v61 = &a3->i32[v53];
        v62.i32[0] = *v61;
        v62.i32[1] = v61[216];
        v62.i32[2] = v61[432];
        v62.i32[3] = v61[648];
        v63 = vsubq_f32(v60, v62);
        v64 = vaddq_f32(vmulq_n_f32(v59, (float)(v57 + (float)(v45 * *v50)) - v57), v63);
        v65 = vaddq_f32(vmulq_n_f32(v59, (float)(v57 + (float)(v47 * *v50)) - v57), v63);
        v48 = vaddq_f32(v48, vmulq_f32(v63, v63));
        v51 = vaddq_f32(v51, vmulq_f32(v64, v64));
        v52 = vaddq_f32(v52, vmulq_f32(v65, v65));
        v50 += 64;
        --v46;
      }
      while (v46);
      v66 = a3[221];
      v67 = (int8x16_t)vmulq_f32(v48, v66);
      *(float32x2_t *)v67.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), *(float32x2_t *)v67.i8);
      v68 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
      v69 = (int8x16_t)vmulq_f32(v51, v66);
      *(float32x2_t *)v69.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), *(float32x2_t *)v69.i8);
      v70 = vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8);
      v71 = (int8x16_t)vmulq_f32(v52, v66);
      *(float32x2_t *)v71.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), *(float32x2_t *)v71.i8);
      v72 = vpadd_f32(*(float32x2_t *)v71.i8, *(float32x2_t *)v71.i8);
      if ((vcgt_f32(v68, v72).u8[0] & 1) != 0
        && *(unsigned __int8 *)(v25 + v38) <= 0x3Fu
        && (vcgt_f32(v70, v72).u8[0] & 1) != 0)
      {
        *(float *)&v86[v38] = (float)v44;
LABEL_23:
        *(_BYTE *)(v25 + v38) = v44;
        v84 = 1;
        goto LABEL_24;
      }
      if (*(_BYTE *)(v25 + v38) && (vcgt_f32(v68, v70).u8[0] & 1) != 0)
      {
        *(float *)&v86[v38] = v43;
        LOBYTE(v44) = v41;
        goto LABEL_23;
      }
LABEL_24:
      ++v38;
      ++v40;
      ++v39;
    }
    while (v38 != v15);
    v25 += 32;
    v21 = v82 + 1;
    v20 = v83;
  }
  while (v82 + 1 != (v74 & 1) + 1);
  return v84 & 1;
}

uint64_t realign_weights_undecimated(int a1, uint64_t a2, float32x4_t *a3, uint64_t a4, double a5, double a6, int32x4_t a7, int32x4_t a8)
{
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  char v19;
  int v20;
  unsigned int v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float32x4_t v26;
  unint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int32 *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x2_t v45;
  int8x16_t v46;
  float32x2_t v47;
  int8x16_t v48;
  float32x2_t v49;
  char v51;
  int32x4_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  _WORD v57[129];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v12 = *(unsigned __int8 *)(a4 + 1);
  if (v12 < 2)
    v55 = 0;
  else
    v55 = *(unsigned __int16 *)(a2
                              + ((unint64_t)(v12 - 2) << 11)
                              + 2 * *(unsigned __int16 *)(a4 + 6)
                              + 14660656);
  v13 = 0;
  v53 = ((_DWORD)v12 << 10) - 2048;
  v54 = *(unsigned __int8 *)(a2
                           + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848)
                           + 11304947);
  v51 = *(_BYTE *)(a2 + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848) + 11304949);
  v14 = (__n128)vdupq_n_s32(*(char *)(a4 + 3));
  v52 = (int32x4_t)v14;
  v15 = (unsigned __int8 *)(a4 + 20);
  v57[0] = 0;
  v56 = v12;
  v16 = 16 * v12;
  v17 = (unsigned __int8 *)(a4 + 8);
  do
  {
    v18 = *v17++;
    unpack_color_endpoints(a1, v18, v15, (unsigned __int8 *)v57 + 1, v57, (uint64_t)&v57[v13 / 2 + 97], (__n128 *)&v57[v13 / 2 + 65], v14, a6, a7, a8);
    v13 += 16;
    v15 += 8;
  }
  while (v16 != v13);
  v19 = 0;
  v20 = 0;
  if (v56 == 1)
    v21 = 3072;
  else
    v21 = v53;
  v22 = (int8x16_t)vceqq_s32(v52, (int32x4_t)xmmword_2260FF480);
  v23 = a4 + 52;
  v24 = 1088 * v55 + 1088 * v21 + a2 + 11317240;
  v25 = (char *)&quant_and_xfer_tables + 226 * v54;
  v26 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  do
  {
    v27 = 0;
    v22 = vmvnq_s8(v22);
    do
    {
      v28 = *(int32x4_t *)&v57[v27 / 2 + 97];
      v29 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v57[v27 / 2 + 65], v28), v22);
      *(float32x4_t *)&v57[v27 / 2 + 33] = vcvtq_f32_s32(v28);
      *(float32x4_t *)&v57[v27 / 2 + 1] = vmulq_f32(vcvtq_f32_s32(v29), v26);
      v27 += 16;
    }
    while (v16 != v27);
    v30 = 0;
    v31 = *(_BYTE *)(a2 + 3);
    do
    {
      v32 = *(unsigned __int8 *)(v23 + v30);
      v33 = HIBYTE(*(unsigned __int16 *)&v25[2 * v32 + 96]);
      v34 = *(unsigned __int8 *)(v24 + v30);
      v35 = *(float32x4_t *)&v57[8 * v34 + 1];
      v36 = *(float32x4_t *)&v57[8 * v34 + 33];
      v37 = &a3->i32[v30];
      v38.i32[0] = *v37;
      v38.i32[1] = v37[216];
      v38.i32[2] = v37[432];
      v38.i32[3] = v37[648];
      v39 = vaddq_f32(v36, vmulq_n_f32(v35, (float)v32));
      v40 = a3[221];
      v41 = vsubq_f32(v39, v38);
      v42 = vaddq_f32(vmulq_n_f32(v35, (float)(*(_WORD *)&v25[2 * v32 + 96] - (int)v32)), v41);
      v43 = vaddq_f32(vmulq_n_f32(v35, (float)(v33 - v32)), v41);
      v44 = (int8x16_t)vmulq_f32(v40, vmulq_f32(v41, v41));
      *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
      v45 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
      v46 = (int8x16_t)vmulq_f32(v40, vmulq_f32(v42, v42));
      *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v46.i8);
      v47 = vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8);
      v48 = (int8x16_t)vmulq_f32(v40, vmulq_f32(v43, v43));
      *(float32x2_t *)v48.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(float32x2_t *)v48.i8);
      v49 = vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8);
      if ((vcgt_f32(v45, v49).u8[0] & 1) != 0 && v32 <= 0x3F && (vcgt_f32(v47, v49).u8[0] & 1) != 0)
        goto LABEL_19;
      if (*(_BYTE *)(v23 + v30) && (vcgt_f32(v45, v47).u8[0] & 1) != 0)
      {
        LOBYTE(v33) = *(_WORD *)&v25[2 * v32 + 96];
LABEL_19:
        *(_BYTE *)(v23 + v30) = v33;
        v31 = *(_BYTE *)(a2 + 3);
        v19 = 1;
      }
      ++v30;
    }
    while (v30 < v31);
    v23 += 32;
    ++v20;
  }
  while (v20 != (v51 & 1) + 1);
  return v19 & 1;
}

void compute_ideal_colors_and_weights_1plane(uint64_t a1, _BYTE *a2, _BYTE *a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v11;
  float32x4_t v12;
  unsigned __int8 v13;
  int16x4_t v14;
  uint16x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  char v26;
  float v27;
  int32x4_t *v28;
  float32x4_t v29;
  int8x16_t v30;
  int32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float v35;
  float v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  __int32 *v40;
  float32x4_t v41;
  int8x16_t v42;
  float v43;
  float v44;
  float v45;
  float32x4_t *v46;
  uint64_t v47;
  float v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  int v58;
  float32x4_t v59;
  float32x4_t v60;
  _OWORD v61[8];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v11 = *(float32x4_t *)(a1 + 3488);
  v12 = *(float32x4_t *)(a1 + 3520);
  if ((v13 & 1) == 0)
  {
    v59 = *(float32x4_t *)(a1 + 3520);
    v60 = *(float32x4_t *)(a1 + 3488);
    v12 = v59;
    v11 = v60;
    if (v58)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v12 = v59;
      v11 = v60;
    }
  }
  v14 = vmovn_s32(vceqq_f32(v11, v12));
  v15.i32[0] = 0;
  v15.i16[2] = 0;
  v15.i16[3] = v14.i16[3];
  v16 = (int8x16_t)vmovl_u16(v15);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  v18 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v16, v17), (uint32x4_t)mask(vmask4)::shift);
  v18.i32[0] = vaddvq_s32(v18);
  if (v18.i32[0])
  {
    compute_ideal_colors_and_weights_3_comp(a1, a2, (uint64_t)a3, 3, *(double *)v18.i64, *(double *)&mask(vmask4)::shift, a6, a7, a8);
  }
  else
  {
    v19 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 3536), *(int8x16_t *)(a1 + 3536), 8uLL), *(float32x2_t *)(a1 + 3536));
    v20 = 0.25 * vpadd_f32(v19, v19).f32[0];
    v21 = a2 + 224;
    v22 = *(unsigned __int16 *)a2;
    v23 = *(unsigned __int8 *)(a1 + 3456);
    v25 = compute_avgs_and_dirs_4_comp(a2, (float32x4_t *)a1, (uint64_t)v61);
    v24 = 0;
    v25.i32[0] = 0;
    v26 = 1;
    v27 = 0.0;
    do
    {
      v28 = (int32x4_t *)&v61[2 * v24];
      v29 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v25, vaddq_f32((float32x4_t)vdupq_laneq_s32(v28[1], 2), vaddq_f32((float32x4_t)v28[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v28[1]), (int8x16_t)v28[1]);
      v30 = (int8x16_t)vmulq_f32(v29, v29);
      *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v30.i8);
      v31 = (int32x2_t)vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8);
      if (*(float *)v31.i32 == 0.0)
      {
        v32.i64[0] = 0x3F0000003F000000;
        v32.i64[1] = 0x3F0000003F000000;
      }
      else
      {
        v32 = vdivq_f32(v29, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v31, 0)));
      }
      v33 = *(float32x4_t *)v28;
      v34 = a2[v24 + 4];
      v35 = -1.0e10;
      v36 = 1.0e10;
      if (a2[v24 + 4])
      {
        v37 = v21;
        v38 = a2[v24 + 4];
        v36 = 1.0e10;
        v35 = -1.0e10;
        do
        {
          v39 = *v37++;
          v40 = (__int32 *)(a1 + 4 * v39);
          v41.i32[0] = *v40;
          v41.i32[1] = v40[216];
          v41.i32[2] = v40[432];
          v41.i32[3] = v40[648];
          v42 = (int8x16_t)vmulq_f32(v32, vsubq_f32(v41, v33));
          *(float32x2_t *)v42.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), *(float32x2_t *)v42.i8);
          v43 = vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8).f32[0];
          *(float *)&a3[4 * v39 + 160] = v43;
          if (v43 < v36)
            v36 = v43;
          if (v43 > v35)
            v35 = v43;
          --v38;
        }
        while (v38);
      }
      if (v35 <= v36)
        v44 = 0.0000001;
      else
        v44 = v35;
      if (v35 <= v36)
        v36 = 0.0;
      v45 = v44 - v36;
      if (v24)
        v26 &= (float)(v45 * v45) == v27;
      else
        v27 = v45 * v45;
      v46 = (float32x4_t *)&a3[16 * v24];
      v46[2] = vaddq_f32(v33, vmulq_n_f32(v32, v36));
      v46[6] = vaddq_f32(v33, vmulq_n_f32(v32, v44));
      if ((_DWORD)v34)
      {
        v47 = 0;
        v48 = v20 * (float)(v45 * v45);
        v49 = 1.0 / v45;
        do
        {
          v50 = (float *)&a3[4 * v21[v47]];
          v51 = v49 * (float)(v50[40] - v36);
          v52 = fmaxf(v51, 0.0);
          if (v51 <= 1.0)
            v53 = v52;
          else
            v53 = 1.0;
          v50[40] = v53;
          v50[256] = v48;
          ++v47;
        }
        while (v34 != v47);
      }
      ++v24;
      v21 += 216;
    }
    while (v24 != v22);
    v54 = ((_WORD)v23 + 3) & 0x1FC;
    if (v54 > v23)
    {
      v55 = v23 - v54;
      v56 = &a3[4 * v23];
      do
      {
        *((_DWORD *)v56 + 40) = 0;
        *((_DWORD *)v56 + 256) = 0;
        v56 += 4;
      }
      while (!__CFADD__(v55++, 1));
    }
    *a3 = v26 & 1;
  }
}

void compute_ideal_colors_and_weights_3_comp(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x2_t v16;
  unsigned __int32 v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  float32x2_t v21;
  int8x16_t v22;
  float32x2_t v23;
  uint64_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  char v30;
  float v31;
  int32x4_t *v32;
  float32x4_t v33;
  int8x16_t v34;
  int32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float v39;
  float v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  float32x4_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v65;
  float32x2_t v66;
  double v67;
  float32x2_t v68;
  _OWORD v69[8];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v13 = *(unsigned __int16 *)a2;
  *(_DWORD *)(a3 + 16) = v13;
  v14 = *(unsigned __int8 *)(a1 + 3456);
  switch(a4)
  {
    case 2:
      v20.i64[0] = 0;
      v20.i32[3] = 0;
      v20.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      v21 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      v17 = vpadd_f32(v21, v21).u32[0];
      v19 = a1 + 864;
LABEL_7:
      v18 = a1;
      goto LABEL_8;
    case 1:
      v22.i32[0] = *(_OWORD *)(a1 + 3536);
      v22.i32[1] = *(_QWORD *)(a1 + 3544);
      v22.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      v22.i32[3] = 0;
      v23 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)v22.i8);
      v17 = vpadd_f32(v23, v23).u32[0];
      v19 = a1 + 1728;
      goto LABEL_7;
    case 0:
      v15 = *(int8x16_t *)(a1 + 3536);
      v15.i32[3] = 0;
      v16 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      v17 = vpadd_f32(v16, v16).u32[0];
      v18 = a1 + 864;
      v19 = a1 + 1728;
LABEL_8:
      v24 = a1 + 2592;
      v25 = *(float *)&v17 * 0.33333;
      goto LABEL_9;
  }
  v65 = *(int8x16_t *)(a1 + 3536);
  v65.i32[3] = 0;
  v68 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
  v66 = vadd_f32(*(float32x2_t *)(a1 + 3536), v68);
  v67 = COERCE_DOUBLE(vpadd_f32(v66, v66));
  v19 = a1 + 864;
  v24 = a1 + 1728;
  v68.i32[0] = 1051372203;
  v25 = 0.33333 * *(float *)&v67;
  if (a4 == 3)
  {
    v26 = (float32x4_t)compute_avgs_and_dirs_3_comp_rgb(a2, a1, (uint64_t)v69, v67, *(double *)&v68, a7, a8, a9);
    v18 = a1;
    goto LABEL_10;
  }
  v18 = a1;
LABEL_9:
  v26 = (float32x4_t)compute_avgs_and_dirs_3_comp(a2, (float32x4_t *)a1, a4, (uint64_t)v69);
LABEL_10:
  v28 = 0;
  v29 = a2 + 224;
  v26.i32[0] = 0;
  v30 = 1;
  v31 = 0.0;
  do
  {
    v32 = (int32x4_t *)&v69[2 * v28];
    v33 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v26, vaddq_f32((float32x4_t)vdupq_laneq_s32(v32[1], 2), vaddq_f32((float32x4_t)v32[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v32[1]), (int8x16_t)v32[1]);
    v34 = (int8x16_t)vmulq_f32(v33, v33);
    *(float32x2_t *)v34.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v34.i8);
    v35 = (int32x2_t)vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
    v36 = (float32x4_t)xmmword_2261A28D0;
    if (*(float *)v35.i32 != 0.0)
      v36 = vdivq_f32(v33, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v35, 0)));
    v37 = *(float32x4_t *)v32;
    v38 = a2[v28 + 4];
    v39 = -1.0e10;
    v40 = 1.0e10;
    if (a2[v28 + 4])
    {
      v41 = v29;
      v42 = a2[v28 + 4];
      v40 = 1.0e10;
      v39 = -1.0e10;
      do
      {
        v43 = *v41++;
        v27.i32[0] = *(_DWORD *)(v18 + 4 * v43);
        v27.i32[1] = *(_DWORD *)(v19 + 4 * v43);
        v27.i32[2] = *(_DWORD *)(v24 + 4 * v43);
        v44 = vmulq_f32(v36, vsubq_f32(v27, v37));
        v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)));
        *(_DWORD *)(a3 + 4 * v43 + 160) = v27.i32[0];
        if (v27.f32[0] < v40)
          v40 = v27.f32[0];
        if (v27.f32[0] > v39)
          v39 = v27.f32[0];
        --v42;
      }
      while (v42);
    }
    if (v39 <= v40)
    {
      v39 = 0.0000001;
      v40 = 0.0;
    }
    v45 = v39 - v40;
    if (v28)
      v30 &= (float)(v45 * v45) == v31;
    else
      v31 = v45 * v45;
    if ((_DWORD)v38)
    {
      v46 = 0;
      v47 = v25 * (float)(v45 * v45);
      v48 = 1.0 / v45;
      do
      {
        v49 = a3 + 4 * v29[v46];
        v50 = v48 * (float)(*(float *)(v49 + 160) - v40);
        v51 = fmaxf(v50, 0.0);
        if (v50 <= 1.0)
          v52 = v51;
        else
          v52 = 1.0;
        *(float *)(v49 + 160) = v52;
        *(float *)(v49 + 1024) = v47;
        ++v46;
      }
      while (v38 != v46);
    }
    v53 = (int8x16_t)vaddq_f32(v37, vmulq_n_f32(v36, v40));
    v54 = (int8x16_t)vaddq_f32(v37, vmulq_n_f32(v36, v39));
    v55 = *(int8x16_t *)(a1 + 3488);
    v56 = *(int8x16_t *)(a1 + 3520);
    if (a4)
    {
      if (a4 == 1)
      {
        v59 = vzip1q_s32((int32x4_t)v55, (int32x4_t)v53);
        *(int32x4_t *)(a3 + 16 * v28 + 32) = vtrn2q_s32(v59, vuzp1q_s32(v59, (int32x4_t)v53));
        v60 = vzip1q_s32((int32x4_t)v56, (int32x4_t)v54);
        v58 = (int8x16_t)vtrn2q_s32(v60, vuzp1q_s32(v60, (int32x4_t)v54));
      }
      else if (a4 == 2)
      {
        v57 = vtrn1q_s32((int32x4_t)v55, (int32x4_t)v53);
        v57.i64[0] = v53.i64[0];
        *(int32x4_t *)(a3 + 16 * v28 + 32) = v57;
        v58 = (int8x16_t)vtrn1q_s32((int32x4_t)v56, (int32x4_t)v54);
        v58.i64[0] = v54.i64[0];
      }
      else
      {
        v53.i32[3] = HIDWORD(*(_OWORD *)(a1 + 3488));
        *(int8x16_t *)(a3 + 16 * v28 + 32) = v53;
        v54.i32[3] = v56.i32[3];
        v58 = v54;
      }
    }
    else
    {
      *(int8x16_t *)(a3 + 16 * v28 + 32) = vextq_s8(vextq_s8(v55, v55, 4uLL), v53, 0xCuLL);
      v58 = vextq_s8(vextq_s8(v56, v56, 4uLL), v54, 0xCuLL);
    }
    *(int8x16_t *)(a3 + 16 * v28++ + 96) = v58;
    v29 += 216;
  }
  while (v28 != v13);
  v61 = ((_WORD)v14 + 3) & 0x1FC;
  if (v61 > v14)
  {
    v62 = v14 - v61;
    v63 = a3 + 4 * v14;
    do
    {
      *(_DWORD *)(v63 + 160) = 0;
      *(_DWORD *)(v63 + 1024) = 0;
      v63 += 4;
    }
    while (!__CFADD__(v62++, 1));
  }
  *(_BYTE *)a3 = v30 & 1;
}

uint64_t compute_ideal_colors_and_weights_2planes(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9, float32x4_t a10)
{
  unsigned __int16 *v12;
  float32x4_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  int16x4_t v16;
  uint16x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int v25;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  uint64_t v31;

  v12 = (unsigned __int16 *)(a1 + 14659568);
  v13 = *(float32x4_t *)(a2 + 3488);
  v14 = *(float32x4_t *)(a2 + 3520);
  if ((v15 & 1) == 0)
  {
    v31 = a4;
    v30 = a3;
    v28 = *(float32x4_t *)(a2 + 3520);
    v29 = *(float32x4_t *)(a2 + 3488);
    v14 = v28;
    v13 = v29;
    a3 = v30;
    a4 = v31;
    if (v27)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v14 = v28;
      v13 = v29;
      a3 = v30;
      a4 = v31;
    }
  }
  v16 = vmovn_s32(vceqq_f32(v13, v14));
  v17.i32[0] = 0;
  v17.i16[2] = 0;
  v17.i16[3] = v16.i16[3];
  v18 = (int8x16_t)vmovl_u16(v17);
  v19.i64[0] = 0x100000001;
  v19.i64[1] = 0x100000001;
  v20 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v18, v19), (uint32x4_t)mask(vmask4)::shift);
  v20.i32[0] = vaddvq_s32(v20);
  if (a3 == 2)
  {
    if (v20.i32[0])
    {
      compute_ideal_colors_and_weights_2_comp(a2, v12, a4, 0, 1u, *(double *)v20.i64, *(double *)&mask(vmask4)::shift, a8, a9);
      v21 = 2;
      return compute_ideal_colors_and_weights_1_comp(a2, v12, a5, v21);
    }
    v21 = 2;
    v22 = a2;
    v23 = v12;
    v24 = a4;
    v25 = 2;
LABEL_16:
    compute_ideal_colors_and_weights_3_comp(v22, v23, v24, v25, *(double *)v20.i64, *(double *)&mask(vmask4)::shift, a8, *(double *)a9.i64, a10);
    return compute_ideal_colors_and_weights_1_comp(a2, v12, a5, v21);
  }
  if (a3 == 1)
  {
    if (v20.i32[0])
    {
      compute_ideal_colors_and_weights_2_comp(a2, v12, a4, 0, 2u, *(double *)v20.i64, *(double *)&mask(vmask4)::shift, a8, a9);
      v21 = 1;
      return compute_ideal_colors_and_weights_1_comp(a2, v12, a5, v21);
    }
    v21 = 1;
    v22 = a2;
    v23 = v12;
    v24 = a4;
    v25 = 1;
    goto LABEL_16;
  }
  if (a3)
  {
    v21 = 3;
    v22 = a2;
    v23 = v12;
    v24 = a4;
    v25 = 3;
    goto LABEL_16;
  }
  if (v20.i32[0])
    compute_ideal_colors_and_weights_2_comp(a2, v12, a4, 1u, 2u, *(double *)v20.i64, *(double *)&mask(vmask4)::shift, a8, a9);
  else
    compute_ideal_colors_and_weights_3_comp(a2, v12, a4, 0, *(double *)v20.i64, *(double *)&mask(vmask4)::shift, a8, *(double *)a9.i64, a10);
  v21 = 0;
  return compute_ideal_colors_and_weights_1_comp(a2, v12, a5, v21);
}

unsigned __int16 *compute_ideal_colors_and_weights_2_comp(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  int8x16_t v19;
  float32x2_t v20;
  uint64_t v21;
  float32x2_t v22;
  float v23;
  unsigned __int16 *result;
  float32x4_t v25;
  uint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unsigned __int16 *v29;
  float32x4_t v30;
  char v31;
  float v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  int32x2_t v55;
  int32x2_t v56;
  int8x16_t v57;
  int8x16_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v63[8];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  *(_DWORD *)(a3 + 16) = v14;
  v15 = *(unsigned __int8 *)(a1 + 3456);
  if (a4 || a5 != 1)
  {
    v19 = *(int8x16_t *)(a1 + 3536);
    if (a4 || a5 != 2)
    {
      v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), 0);
      v17 = vpadd_f32(v22, v22);
      v21 = a1 + 864;
      v18 = a1 + 1728;
      goto LABEL_9;
    }
    v20 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 0);
    v17 = vpadd_f32(v20, v20);
    v18 = a1 + 1728;
  }
  else
  {
    v16 = vadd_f32(*(float32x2_t *)(a1 + 3536), 0);
    v17 = vpadd_f32(v16, v16);
    v18 = a1 + 864;
  }
  v21 = a1;
LABEL_9:
  v23 = v17.f32[0] * 0.5;
  result = compute_avgs_and_dirs_2_comp(a2, (int32x4_t *)a1, a4, a5, (uint64_t)v63, *(double *)&v17, COERCE_DOUBLE((unint64_t)COERCE_UNSIGNED_INT(0.5)), a8, a9);
  v26 = 0;
  v27 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2260FF480);
  v30 = (float32x4_t)vdupq_n_s32(a5);
  v28 = (int8x16_t)vceqq_s32((int32x4_t)v30, (int32x4_t)xmmword_2260FF480);
  v29 = a2 + 112;
  v30.i32[0] = 0;
  v31 = 1;
  v32 = 0.0;
  do
  {
    v33 = (float32x4_t *)&v63[2 * v26];
    v34 = v33[1];
    v35 = (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
    *(float32x2_t *)v35.f32 = vadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v34.f32);
    *(float32x2_t *)v35.f32 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
    v36 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v30, v35), 0), (int8x16_t)vsubq_f32((float32x4_t)0, v34), (int8x16_t)v34);
    v37 = (int8x16_t)vmulq_f32(v36, v36);
    *(float32x2_t *)v37.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(float32x2_t *)v37.i8);
    v38 = (int32x2_t)vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8);
    v39 = (float32x4_t)xmmword_2261A28E0;
    if (*(float *)v38.i32 != 0.0)
      v39 = vdivq_f32(v36, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v38, 0)));
    v40 = *v33;
    v41 = *((unsigned __int8 *)a2 + v26 + 4);
    v42 = -1.0e10;
    v43 = 1.0e10;
    if (*((_BYTE *)a2 + v26 + 4))
    {
      v44 = v29;
      v45 = *((unsigned __int8 *)a2 + v26 + 4);
      v43 = 1.0e10;
      v42 = -1.0e10;
      do
      {
        v46 = *(unsigned __int8 *)v44;
        v44 = (unsigned __int16 *)((char *)v44 + 1);
        v25.i32[0] = *(_DWORD *)(v21 + 4 * v46);
        v25.i32[1] = *(_DWORD *)(v18 + 4 * v46);
        v25 = vmulq_f32(v39, vsubq_f32(v25, v40));
        *(float32x2_t *)v25.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), *(float32x2_t *)v25.f32);
        v25.f32[0] = vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
        *(_DWORD *)(a3 + 4 * v46 + 160) = v25.i32[0];
        if (v25.f32[0] < v43)
          v43 = v25.f32[0];
        if (v25.f32[0] > v42)
          v42 = v25.f32[0];
        --v45;
      }
      while (v45);
    }
    if (v42 <= v43)
    {
      v42 = 0.0000001;
      v43 = 0.0;
    }
    v47 = v42 - v43;
    if (v26)
      v31 &= (float)(v47 * v47) == v32;
    else
      v32 = v47 * v47;
    if ((_DWORD)v41)
    {
      v48 = 0;
      v49 = v23 * (float)(v47 * v47);
      v50 = 1.0 / v47;
      do
      {
        v51 = a3 + 4 * *((unsigned __int8 *)v29 + v48);
        v52 = v50 * (float)(*(float *)(v51 + 160) - v43);
        v53 = fmaxf(v52, 0.0);
        if (v52 <= 1.0)
          v54 = v53;
        else
          v54 = 1.0;
        *(float *)(v51 + 160) = v54;
        *(float *)(v51 + 1024) = v49;
        ++v48;
      }
      while (v41 != v48);
    }
    v55 = (int32x2_t)vaddq_f32(v40, vmulq_n_f32(v39, v43)).u64[0];
    v56 = (int32x2_t)vaddq_f32(v40, vmulq_n_f32(v39, v42)).u64[0];
    v25 = (float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(v56, 0), v27);
    v57 = vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3520), v27), (int8x16_t)v25);
    v58 = (int8x16_t *)(a3 + 16 * v26);
    v58[2] = vorrq_s8(vbicq_s8(vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3488), v27), vandq_s8((int8x16_t)vdupq_lane_s32(v55, 0), v27)), v28), vandq_s8((int8x16_t)vdupq_lane_s32(v55, 1), v28));
    v58[6] = vorrq_s8(vbicq_s8(v57, v28), vandq_s8((int8x16_t)vdupq_lane_s32(v56, 1), v28));
    ++v26;
    v29 += 108;
  }
  while (v26 != v14);
  v59 = ((_WORD)v15 + 3) & 0x1FC;
  if (v59 > v15)
  {
    v60 = v15 - v59;
    v61 = a3 + 4 * v15;
    do
    {
      *(_DWORD *)(v61 + 160) = 0;
      *(_DWORD *)(v61 + 1024) = 0;
      v61 += 4;
    }
    while (!__CFADD__(v60++, 1));
  }
  *(_BYTE *)a3 = v31 & 1;
  return result;
}

uint64_t compute_ideal_colors_and_weights_1_comp(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned int a4)
{
  int8x16_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  unsigned __int16 *v12;
  char v13;
  float v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *a2;
  *(_DWORD *)(a3 + 16) = v6;
  v7 = *(unsigned __int8 *)(result + 3456);
  if (a4 == 2)
  {
    v8 = *(float *)(result + 3544);
    v9 = result + 1728;
  }
  else if (a4 == 1)
  {
    v8 = *(float *)(result + 3540);
    v9 = result + 864;
  }
  else if (a4)
  {
    v8 = *(float *)(result + 3548);
    v9 = result + 2592;
  }
  else
  {
    v8 = *(float *)(result + 3536);
    v9 = result;
  }
  v10 = 0;
  v11 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2260FF480);
  v12 = a2 + 112;
  v13 = 1;
  v14 = 0.0;
  do
  {
    v15 = *((unsigned __int8 *)a2 + v10 + 4);
    v4.i32[0] = -803929351;
    v5.i32[0] = 1343554297;
    if (*((_BYTE *)a2 + v10 + 4))
    {
      v16 = v12;
      v17 = *((unsigned __int8 *)a2 + v10 + 4);
      v5.i32[0] = 1343554297;
      v4.i32[0] = -803929351;
      do
      {
        v18 = *(unsigned __int8 *)v16;
        v16 = (unsigned __int16 *)((char *)v16 + 1);
        v19 = *(float *)(v9 + 4 * v18);
        if (v19 < *(float *)v5.i32)
          *(float *)v5.i32 = v19;
        if (v19 > *(float *)v4.i32)
          *(float *)v4.i32 = v19;
        --v17;
      }
      while (v17);
    }
    if (*(float *)v4.i32 <= *(float *)v5.i32)
    {
      *(float *)v4.i32 = 0.0000001;
      *(float *)v5.i32 = 0.0;
    }
    v20 = *(float *)v4.i32 - *(float *)v5.i32;
    if (v10)
      v13 &= (float)(v20 * v20) == v14;
    else
      v14 = v20 * v20;
    if (*((_BYTE *)a2 + v10 + 4))
    {
      v21 = 0;
      v22 = v8 * (float)(v20 * v20);
      v23 = 1.0 / v20;
      do
      {
        v24 = *((unsigned __int8 *)v12 + v21);
        v25 = v23 * (float)(*(float *)(v9 + 4 * v24) - *(float *)v5.i32);
        v26 = fmaxf(v25, 0.0);
        if (v25 <= 1.0)
          v27 = v26;
        else
          v27 = 1.0;
        v28 = a3 + 4 * v24;
        *(float *)(v28 + 160) = v27;
        *(float *)(v28 + 1024) = v22;
        ++v21;
      }
      while (v15 != v21);
    }
    v29 = (int8x16_t *)(a3 + 16 * v10);
    v29[2] = vorrq_s8(vbicq_s8(*(int8x16_t *)(result + 3488), v11), vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0), v11));
    v5 = vbicq_s8(*(int8x16_t *)(result + 3520), v11);
    v4 = vorrq_s8(v5, vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0), v11));
    v29[6] = v4;
    ++v10;
    v12 += 108;
  }
  while (v10 != v6);
  v30 = ((_WORD)v7 + 3) & 0x1FC;
  if (v30 > v7)
  {
    v31 = v7 - v30;
    v32 = a3 + 4 * v7;
    do
    {
      *(_DWORD *)(v32 + 160) = 0;
      *(_DWORD *)(v32 + 1024) = 0;
      v32 += 4;
    }
    while (!__CFADD__(v31++, 1));
  }
  *(_BYTE *)a3 = v13 & 1;
  return result;
}

float32x2_t compute_error_of_weight_set_1plane(float32x4_t *a1, unsigned __int8 *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, double a6, uint8x8_t a7)
{
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v24;
  float32x4_t v25;

  v10 = *a2;
  v11 = a2[1];
  if (v11 < 3)
  {
    if (v11 == 2)
    {
      v16 = 0;
      v13 = 0uLL;
      do
      {
        v25 = v13;
        *(double *)v17.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)a3, v16, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32);
        v18 = vsubq_f32(v17, a1[10]);
        a5 = a1[64];
        a4 = vmulq_f32(a5, vmulq_f32(v18, v18));
        v13 = vaddq_f32(v25, a4);
        v16 += 4;
        ++a1;
      }
      while (v16 < v10);
    }
    else
    {
      v19 = 0;
      v13 = 0uLL;
      do
      {
        v20 = *a3++;
        v21 = vsubq_f32(v20, a1[10]);
        v13 = vaddq_f32(v13, vmulq_f32(a1[64], vmulq_f32(v21, v21)));
        v19 += 4;
        ++a1;
      }
      while (v19 < v10);
    }
  }
  else
  {
    v12 = 0;
    v13 = 0uLL;
    do
    {
      v24 = v13;
      *(double *)v14.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)a3, v12, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32, *(uint8x8_t *)v13.f32, a7);
      v15 = vsubq_f32(v14, a1[10]);
      a5 = a1[64];
      a4 = vmulq_f32(a5, vmulq_f32(v15, v15));
      v13 = vaddq_f32(v24, a4);
      v12 += 4;
      ++a1;
    }
    while (v12 < v10);
  }
  v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), *(float32x2_t *)v13.f32);
  return vpadd_f32(v22, v22);
}

double bilinear_infill_vla(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5, uint8x8_t a6, uint8x8_t a7)
{
  _DWORD *v7;
  __int32 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  double result;

  v7 = (_DWORD *)(a1 + a3);
  v8 = *(_DWORD *)((char *)v7 + 222);
  v7 = (_DWORD *)((char *)v7 + 222);
  a4.i32[0] = v8;
  a5.i32[0] = v7[54];
  a6.i32[0] = v7[108];
  a7.i32[0] = v7[162];
  v9 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v9.i32[0] = *(_DWORD *)(a2 + 4 * v9.u32[0]);
  v9.i32[1] = *(_DWORD *)(a2 + 4 * v9.u32[1]);
  v9.i32[2] = *(_DWORD *)(a2 + 4 * v9.u32[2]);
  v9.i32[3] = *(_DWORD *)(a2 + 4 * v9.u32[3]);
  v10 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v10.i32[0] = *(_DWORD *)(a2 + 4 * v10.u32[0]);
  v10.i32[1] = *(_DWORD *)(a2 + 4 * v10.u32[1]);
  v10.i32[2] = *(_DWORD *)(a2 + 4 * v10.u32[2]);
  v10.i32[3] = *(_DWORD *)(a2 + 4 * v10.u32[3]);
  v11 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a6));
  v11.i32[0] = *(_DWORD *)(a2 + 4 * v11.u32[0]);
  v11.i32[1] = *(_DWORD *)(a2 + 4 * v11.u32[1]);
  v11.i32[2] = *(_DWORD *)(a2 + 4 * v11.u32[2]);
  v11.i32[3] = *(_DWORD *)(a2 + 4 * v11.u32[3]);
  v12 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a7));
  v12.i32[0] = *(_DWORD *)(a2 + 4 * v12.u32[0]);
  v12.i32[1] = *(_DWORD *)(a2 + 4 * v12.u32[1]);
  v12.i32[2] = *(_DWORD *)(a2 + 4 * v12.u32[2]);
  v12.i32[3] = *(_DWORD *)(a2 + 4 * v12.u32[3]);
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(vmulq_f32(v9, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v10, *(float32x4_t *)(a1 + 4 * a3 + 2816))), vaddq_f32(vmulq_f32(v11, *(float32x4_t *)(a1 + 4 * a3 + 3680)), vmulq_f32(v12, *(float32x4_t *)(a1 + 4 * a3 + 4544)))).u64[0];
  return result;
}

double bilinear_infill_vla_2(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double result;

  v5 = a1 + a3;
  a4.i32[0] = *(_DWORD *)(v5 + 222);
  a5.i32[0] = *(_DWORD *)(v5 + 438);
  v6 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v6.i32[0] = *(_DWORD *)(a2 + 4 * v6.u32[0]);
  v6.i32[1] = *(_DWORD *)(a2 + 4 * v6.u32[1]);
  v6.i32[2] = *(_DWORD *)(a2 + 4 * v6.u32[2]);
  v6.i32[3] = *(_DWORD *)(a2 + 4 * v6.u32[3]);
  v7 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v7.i32[0] = *(_DWORD *)(a2 + 4 * v7.u32[0]);
  v7.i32[1] = *(_DWORD *)(a2 + 4 * v7.u32[1]);
  v7.i32[2] = *(_DWORD *)(a2 + 4 * v7.u32[2]);
  v7.i32[3] = *(_DWORD *)(a2 + 4 * v7.u32[3]);
  *(_QWORD *)&result = vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v7, *(float32x4_t *)(a1 + 4 * a3 + 2816))).u64[0];
  return result;
}

float32x2_t compute_error_of_weight_set_2planes(float32x4_t *a1, float32x4_t *a2, unsigned __int8 *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t a6, uint8x8_t a7, uint8x8_t a8)
{
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v13 = *a3;
  v14 = a3[1];
  if (v14 < 3)
  {
    if (v14 == 2)
    {
      v24 = 0;
      v16 = 0uLL;
      do
      {
        v40 = v16;
        *(double *)v25.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a4, v24, *(uint8x8_t *)a6.f32, a7);
        v26 = vsubq_f32(v25, a1[10]);
        v27 = a1[64];
        v38 = vmulq_f32(v27, vmulq_f32(v26, v26));
        *(double *)v28.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a5, v24, *(uint8x8_t *)v38.f32, *(uint8x8_t *)v27.f32);
        v29 = vsubq_f32(v28, a2[10]);
        a7 = *(uint8x8_t *)v38.f32;
        a6 = vaddq_f32(v38, vmulq_f32(a2[64], vmulq_f32(v29, v29)));
        v16 = vaddq_f32(v40, a6);
        v24 += 4;
        ++a2;
        ++a1;
      }
      while (v24 < v13);
    }
    else
    {
      v30 = 0;
      v16 = 0uLL;
      do
      {
        v31 = *a4++;
        v32 = vsubq_f32(v31, a1[10]);
        v33 = *a5++;
        v34 = vsubq_f32(v33, a2[10]);
        v16 = vaddq_f32(v16, vaddq_f32(vmulq_f32(a1[64], vmulq_f32(v32, v32)), vmulq_f32(a2[64], vmulq_f32(v34, v34))));
        v30 += 4;
        ++a2;
        ++a1;
      }
      while (v30 < v13);
    }
  }
  else
  {
    v15 = 0;
    v16 = 0uLL;
    do
    {
      v39 = v16;
      *(double *)v17.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a4, v15, *(uint8x8_t *)a6.f32, a7, a8, *(uint8x8_t *)v16.f32);
      v18 = vsubq_f32(v17, a1[10]);
      v19 = a1[64];
      v37 = vmulq_f32(v19, vmulq_f32(v18, v18));
      *(double *)v22.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a5, v15, *(uint8x8_t *)v37.f32, *(uint8x8_t *)v19.f32, v20, v21);
      v23 = vsubq_f32(v22, a2[10]);
      a7 = *(uint8x8_t *)v37.f32;
      a6 = vaddq_f32(v37, vmulq_f32(a2[64], vmulq_f32(v23, v23)));
      v16 = vaddq_f32(v39, a6);
      v15 += 4;
      ++a2;
      ++a1;
    }
    while (v15 < v13);
  }
  v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
  return vpadd_f32(v35, v35);
}

int32x2_t *compute_ideal_weights_for_decimation(int32x2_t *result, float32x4_t *a2, _OWORD *a3)
{
  _OWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int32x2_t *v8;
  __int128 v9;
  unint64_t v11;
  int v12;
  int32x2_t *v13;
  float32x4_t v14;
  unsigned __int8 *v15;
  int32x2_t *v16;
  uint64_t v17;
  int32x4_t v18;
  unint64_t v19;
  const float *v20;
  uint8x8_t v21;
  unint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  const float *v26;
  uint8x8_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  __int32 *v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  int32x4_t *v38;
  unint64_t v39;
  int32x4_t *v40;
  unint64_t v41;
  float32x4_t *v42;
  unsigned int *v43;
  int32x4_t v44;
  float32x4_t v52;
  const float *v53;
  uint8x8_t v54;
  uint64_t v55;
  float32x4_t v56;
  unsigned int *v57;
  float32x4_t *v58;
  float32x4_t v59;
  unsigned int v60;
  int8x16_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  __int32 *v69;
  float32x4_t v70;
  float32x4_t v71;
  _DWORD v72[216];
  uint64_t v73;

  v3 = a3;
  v73 = *MEMORY[0x24BDAC8D0];
  v4 = a2->u8[0];
  v5 = a2->u8[2];
  v6 = (_QWORD *)((char *)a3 + 4 * (((_DWORD)v5 - 1) & 0xFFFFFFFC));
  *v6 = 0;
  v6[1] = 0;
  if ((_DWORD)v4 == (_DWORD)v5)
  {
    v7 = 0;
    v8 = result + 20;
    do
    {
      v9 = *(_OWORD *)v8->i8;
      v8 += 2;
      *v3++ = v9;
      v7 += 4;
    }
    while (v7 < v4);
  }
  else
  {
    v11 = 0;
    v12 = result->u8[0];
    v13 = result + 128;
    v14 = (float32x4_t)vdupq_lane_s32(result[128], 0);
    v15 = (unsigned __int8 *)&a2[338];
    v16 = result + 20;
    v17 = 19296;
    v18 = vdupq_n_s32(0x2EDBE6FFu);
    do
    {
      v19 = 0;
      v20 = (const float *)&v15[v11];
      v21 = (uint8x8_t)vld1_dup_f32(v20);
      v22 = (unint64_t)vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v21))) << 6;
      v23 = 0uLL;
      v24 = v17;
      v25 = (float32x4_t)v18;
      do
      {
        v26 = &a2[342].f32[v11 / 4 + v19 / 4];
        v27 = (uint8x8_t)vld1_dup_f32(v26);
        v28 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v27));
        v29 = v28.u32[0];
        v30 = v28.u32[1];
        *(int32x2_t *)v28.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
        v31.i64[0] = v28.u32[0];
        v31.i64[1] = v28.u32[1];
        v32 = v31;
        if (!v12)
        {
          v14.i32[0] = v13->i32[v29];
          v14.i32[1] = v13->i32[v30];
          v14.i32[2] = v13->i32[v32.i64[1]];
          v14.i32[3] = v13->i32[v32.i64[0]];
        }
        v33 = vmulq_f32(*(float32x4_t *)((char *)a2 + v24), v14);
        v34 = (__int32 *)v16 + v32.i64[0];
        v32.i32[0] = v16->i32[v29];
        v32.i32[1] = v16->i32[v30];
        v32.i32[2] = v16->i32[v32.i64[1]];
        v32.i32[3] = *v34;
        v25 = vaddq_f32(v25, v33);
        v35 = vmulq_f32(v33, v32);
        v23 = vaddq_f32(v23, v35);
        v19 += 64;
        v24 += 256;
      }
      while (v22 != v19);
      v36 = vdivq_f32(v23, v25);
      a3[v11 / 4] = v36;
      v11 += 4;
      v17 += 16;
    }
    while (v11 < v5);
    v71 = v14;
    if (a2->u8[1] >= 3u)
    {
      v39 = 0;
      v40 = (int32x4_t *)v72;
      do
      {
        *(double *)v18.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)v3, v39, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v36.f32, *(uint8x8_t *)v25.f32, *(uint8x8_t *)v35.f32);
        *v40++ = v18;
        v39 += 4;
      }
      while (v39 < v4);
    }
    else
    {
      v37 = 0;
      v38 = (int32x4_t *)v72;
      do
      {
        *(double *)v18.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)v3, v37, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v36.f32);
        *v38++ = v18;
        v37 += 4;
      }
      while (v37 < v4);
    }
    v41 = 0;
    v42 = a2 + 1206;
    v43 = (unsigned int *)&a2[342];
    v44 = vdupq_n_s32(0x2EDBE6FFu);
    __asm
    {
      FMOV            V1.4S, #-16.0
      FMOV            V2.4S, #-0.25
      FMOV            V3.4S, #0.25
    }
    v52 = v71;
    do
    {
      v53 = (const float *)&v15[v41];
      v54 = (uint8x8_t)vld1_dup_f32(v53);
      v55 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v54)));
      v56 = 0uLL;
      v57 = v43;
      v58 = v42;
      v59 = (float32x4_t)v44;
      do
      {
        v60 = *v57;
        v57 += 16;
        v61 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vdup_n_s32(v60)));
        v62 = v61.u32[0];
        v63 = v61.u32[1];
        *(int32x2_t *)v61.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
        v64.i64[0] = v61.u32[0];
        v64.i64[1] = v61.u32[1];
        v65 = v64;
        if (!v12)
        {
          v52.i32[0] = v13->i32[v62];
          v52.i32[1] = v13->i32[v63];
          v52.i32[2] = v13->i32[v65.i64[1]];
          v52.i32[3] = v13->i32[v65.i64[0]];
        }
        v66 = vmulq_f32(*v58, v52);
        v67 = v65.i64[1];
        v68 = v65.i64[0];
        v69 = &v72[v65.i64[0]];
        v65.i32[0] = v72[v62];
        v65.i32[1] = v72[v63];
        v65.i32[2] = v72[v65.i64[1]];
        v65.i32[3] = *v69;
        result = (int32x2_t *)((char *)v16 + 4 * v67);
        v70.i32[0] = v16->i32[v62];
        v70.i32[1] = v16->i32[v63];
        v70.i32[2] = result->i32[0];
        v70.i32[3] = v16->i32[v68];
        v59 = vaddq_f32(v59, vmulq_f32(*v58, v66));
        v56 = vaddq_f32(v56, vmulq_f32(v66, vsubq_f32(v65, v70)));
        v58 += 16;
        --v55;
      }
      while (v55);
      v3[v41 / 4] = vaddq_f32((float32x4_t)v3[v41 / 4], vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(v56, _Q1), v59), _Q2), _Q3));
      v41 += 4;
      ++v42;
      ++v43;
    }
    while (v41 < v5);
  }
  return result;
}

uint64_t compute_quantized_weights_for_decimation(uint64_t result, float32x4_t *a2, float32x4_t *a3, uint64_t a4, unsigned int a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11;
  int8x16_t *v12;
  unsigned int v13;
  int32x4_t v14;
  const float *v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  unint64_t v42;
  int32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;

  v11 = *(unsigned __int8 *)(result + 2);
  v12 = (int8x16_t *)((char *)&quant_and_xfer_tables + 226 * a5);
  if (a5 > 0x14)
    v13 = -1;
  else
    v13 = dword_2261A2938[a5];
  v14 = vdupq_n_s32(v13);
  if (*(float *)&a7 > a6)
  {
    *(float *)&a11 = a6;
  }
  else
  {
    *(float *)&a7 = 1.0;
    *(float *)&a11 = 0.0;
  }
  v16 = *(float *)&a7 - *(float *)&a11;
  v17 = 1.0 / (float)(*(float *)&a7 - *(float *)&a11);
  *(float *)&a7 = *(float *)&a11 * v17;
  v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  v15 = (const float *)((char *)&compute_quantized_weights_for_decimation(decimation_info const&,float,float,float const*,float *,unsigned char *,quant_method)::quant_levels_m1
                      + 4 * a5);
  v19 = vld1q_dup_f32(v15);
  v20 = v16 * 0.015625;
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  v22 = *v12;
  if (a5 - 9 >= 0xC)
  {
    v42 = 0;
    __asm { FMOV            V17.4S, #1.0 }
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    v45.i64[0] = 0xFFFFFF00FFFFFF00;
    v45.i64[1] = 0xFFFFFF00FFFFFF00;
    v46.i64[0] = 0x4300000043000000;
    v46.i64[1] = 0x4300000043000000;
    do
    {
      v47 = *a2++;
      v48 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v47, v17), v18), (float32x4_t)0), _Q17);
      v49 = vcvtq_s32_f32(vmulq_f32(v19, v48));
      v50 = (int8x16_t)vminq_s32(vaddq_s32(v49, v44), v14);
      v51 = (int32x4_t)vqtbl1q_s8(v22, vorrq_s8((int8x16_t)v49, v45));
      v52 = (int32x4_t)vqtbl1q_s8(v22, vorrq_s8(v50, v45));
      v53 = vcvtq_f32_s32(v51);
      v54 = vcvtq_f32_s32(v52);
      v55 = (int8x16_t)vcgtq_f32(vmulq_f32(v48, v46), vaddq_f32(v53, v54));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v55, (int8x16_t)v54, (int8x16_t)v53), v20));
      *(_DWORD *)(a4 + v42) = vqtbl1q_s8(vbslq_s8(v55, (int8x16_t)v52, (int8x16_t)v51), (int8x16_t)xmmword_2261A28F0).u32[0];
      v42 += 4;
    }
    while (v42 < v11);
  }
  else
  {
    v23 = 0;
    v24 = v12[1];
    __asm { FMOV            V17.4S, #1.0 }
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    v31.i64[0] = 0xFFFFFF00FFFFFF00;
    v31.i64[1] = 0xFFFFFF00FFFFFF00;
    v32.i64[0] = 0x4300000043000000;
    v32.i64[1] = 0x4300000043000000;
    do
    {
      v33 = *a2++;
      v34 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v33, v17), v18), (float32x4_t)0), _Q17);
      v35 = vcvtq_s32_f32(vmulq_f32(v19, v34));
      v36 = (int8x16_t)vminq_s32(vaddq_s32(v35, v30), v14);
      v37 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8((int8x16_t)v35, v31));
      v38 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8(v36, v31));
      v39 = vcvtq_f32_s32(v37);
      v40 = vcvtq_f32_s32(v38);
      v41 = (int8x16_t)vcgtq_f32(vmulq_f32(v34, v32), vaddq_f32(v39, v40));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v41, (int8x16_t)v40, (int8x16_t)v39), v20));
      *(_DWORD *)(a4 + v23) = vqtbl1q_s8(vbslq_s8(v41, (int8x16_t)v38, (int8x16_t)v37), (int8x16_t)xmmword_2261A28F0).u32[0];
      v23 += 4;
    }
    while (v23 < v11);
  }
  return result;
}

void recompute_ideal_colors_1plane(float32x4_t *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, uint8x8_t a10, uint8x8_t a11)
{
  float32x4_t v11;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  const float *v24;
  uint8x8_t v25;
  float32x4_t v26;
  unsigned int v27;
  _BYTE *v28;
  unint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  unsigned __int16 *v35;
  float32x4_t v36;
  float32x4_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  int v45;
  __int32 *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t v63;
  uint64_t v65;
  __int32 *v66;
  float32x4_t v67;
  float v68;
  float v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float v79;
  float v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float v92;
  float32x4_t v93;
  float32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t *v99;
  float v100;
  float v101;
  float32x4_t v103;
  int8x16_t v104;
  int8x16_t *v105;
  float32x4_t v106;
  float32x4_t v108;
  float v109;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  _BYTE v122[864];
  _BYTE v123[256];
  uint64_t v124;

  v18 = 0;
  v124 = *MEMORY[0x24BDAC8D0];
  v19 = *(unsigned __int8 *)(a3 + 2);
  v20 = a1[216].u8[0];
  v21 = *a2;
  v22 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  v23 = (float32x4_t *)v123;
  do
  {
    v24 = (const float *)(a4 + v18);
    v25 = (uint8x8_t)vld1_dup_f32(v24);
    v26 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v25))), v22);
    *v23++ = v26;
    v18 += 4;
  }
  while (v18 < v19);
  v27 = *(unsigned __int8 *)(a3 + 1);
  if (v27 == 1)
  {
    v28 = v123;
  }
  else
  {
    if (v27 >= 3)
    {
      v31 = 0;
      v32 = (float32x4_t *)v122;
      do
      {
        *(double *)v22.i64 = bilinear_infill_vla(a3, (uint64_t)v123, v31, *(uint8x8_t *)v22.f32, *(uint8x8_t *)v26.f32, a10, a11);
        *v32++ = v22;
        v31 += 4;
      }
      while (v31 < v20);
    }
    else
    {
      v29 = 0;
      v30 = (float32x4_t *)v122;
      do
      {
        *(double *)v22.i64 = bilinear_infill_vla_2(a3, (uint64_t)v123, v29, *(uint8x8_t *)v22.f32, *(uint8x8_t *)v26.f32);
        *v30++ = v22;
        v29 += 4;
      }
      while (v29 < v20);
    }
    v28 = v122;
  }
  v33 = 0;
  v34 = vmulq_n_f32(a1[219], (float)v20);
  v35 = a2 + 112;
  v36 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  __asm { FMOV            V16.4S, #1.0 }
  v41 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  do
  {
    v42 = *((unsigned __int8 *)a2 + v33 + 4);
    if (v21 >= 2)
    {
      v34 = 0uLL;
      v43 = v35;
      v44 = *((unsigned __int8 *)a2 + v33 + 4);
      do
      {
        v45 = *(unsigned __int8 *)v43;
        v43 = (unsigned __int16 *)((char *)v43 + 1);
        v46 = &a1->i32[v45];
        v47.i32[0] = *v46;
        v47.i32[1] = v46[216];
        v47.i32[2] = v46[432];
        v47.i32[3] = v46[648];
        v34 = vaddq_f32(v34, v47);
        --v44;
      }
      while (v44);
    }
    v48 = a1[221];
    v34 = vmulq_f32(v34, v48);
    _Q22 = vmaxnmq_f32(vmulq_n_f32(v48, (float)v42), v36);
    v50 = vdivq_f32(v34, _Q22);
    v50.i32[3] = 0;
    v51 = (int8x16_t)vmulq_f32(v50, v50);
    *(float32x2_t *)v51.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), *(float32x2_t *)v51.i8);
    v52 = vdivq_f32(v50, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), 0)));
    v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)));
    if (*((_BYTE *)a2 + v33 + 4))
    {
      v54 = 0;
      v55 = 0uLL;
      v56 = 1.0;
      v57 = 0.0;
      v58 = 1.0e-17;
      v59 = 1.0e10;
      v60 = 0.0;
      v11.i32[0] = 0;
      v61 = 0.0;
      v62 = 0.0;
      v63 = 0uLL;
      _Q28 = 0uLL;
      do
      {
        v65 = *((unsigned __int8 *)v35 + v54);
        v66 = &a1->i32[v65];
        v67.i32[0] = *v66;
        v67.i32[1] = v66[216];
        v67.i32[2] = v66[432];
        v67.i32[3] = v66[648];
        v68 = *(float *)&v28[4 * v65];
        v69 = 1.0 - v68;
        if (v68 < v56)
          v56 = *(float *)&v28[4 * v65];
        v70 = vmulq_f32(v52, v67);
        v71 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2);
        v72 = vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1));
        if (v68 > v60)
          v60 = *(float *)&v28[4 * v65];
        v73 = vaddq_f32(v71, v72);
        v11.f32[0] = v11.f32[0] + (float)(v69 * v69);
        v61 = v61 + (float)(v69 * v68);
        if (v73.f32[0] < v59)
          v59 = v73.f32[0];
        v62 = v62 + (float)(v68 * v68);
        v58 = v58 + v68;
        v74 = vmulq_n_f32(v67, v68);
        v63 = vaddq_f32(v63, v74);
        v75 = vsubq_f32(v67, v74);
        v76.i64[1] = 0;
        if (v73.f32[0] > v57)
          v57 = v73.f32[0];
        v55 = vaddq_f32(v55, v75);
        v76.i32[1] = *(_DWORD *)&v28[4 * v65];
        v76.f32[0] = 1.0 - v68;
        _Q28 = vaddq_f32(_Q28, vmulq_n_f32(v76, vmulq_f32(v53, v73).f32[0]));
        ++v54;
      }
      while (v42 != v54);
    }
    else
    {
      v56 = 1.0;
      v62 = 0.0;
      _Q28.i64[0] = 0;
      v63 = 0uLL;
      v55 = 0uLL;
      v58 = 1.0e-17;
      v61 = 0.0;
      v11.i32[0] = 0;
      v60 = 0.0;
      v59 = 1.0e10;
      v57 = 0.0;
    }
    v77 = vmulq_f32(v48, v55);
    v78 = vmulq_f32(v48, v63);
    v79 = v59 / fmaxf(v57, 1.0e-10);
    v80 = fmaxf(v79, 0.0);
    if (v79 <= 1.0)
      v81 = v80;
    else
      v81 = 1.0;
    v82 = vmulq_n_f32(v52, v57);
    v83 = v82;
    v83.f32[3] = v81;
    *(float32x4_t *)(a6 + 16 * v33) = v83;
    if (v56 >= (float)(v60 * 0.999))
    {
      v103 = vdivq_f32(vaddq_f32(v78, v77), _Q22);
      v104 = vorrq_s8((int8x16_t)vcltzq_f32(v103), (int8x16_t)vcgezq_f32(v103));
      v105 = (int8x16_t *)(a5 + 16 * v33);
      v105[1] = vbslq_s8(v104, (int8x16_t)v103, v105[1]);
      v105[5] = vbslq_s8(v104, (int8x16_t)v103, v105[5]);
      v82.i32[3] = 1.0;
      goto LABEL_40;
    }
    v84 = v11;
    v84.f32[1] = v61;
    v84.f32[2] = v62;
    _Q18 = vmulq_n_f32(v84, v53.f32[0]);
    v86 = vmulq_n_f32(v48, v62);
    v87 = vmulq_n_f32(v48, v61);
    v88 = vmulq_n_f32(v48, v11.f32[0]);
    v89 = vsubq_f32(vmulq_f32(v86, v88), vmulq_f32(v87, v87));
    v90 = vdivq_f32(_Q16, v89);
    _S10 = _Q18.i32[2];
    v92 = vmlas_n_f32(vmuls_lane_f32(-_Q18.f32[1], *(float32x2_t *)_Q18.f32, 1), _Q18.f32[2], _Q18.f32[0]);
    v93 = vaddq_f32(vmulq_f32(v86, v86), vaddq_f32(vmulq_f32(v88, v88), vmulq_f32(v87, vaddq_f32(v87, v87))));
    __asm { FMLA            S11, S10, V18.S[2] }
    _Q20 = vmulq_f32(vsubq_f32(vmulq_f32(v77, v86), vmulq_f32(v78, v87)), v90);
    v96 = vmulq_f32(vsubq_f32(vmulq_f32(v78, v88), vmulq_f32(v77, v87)), v90);
    v97 = (int8x16_t)vcgtq_f32(vmaxq_f32(v89, vsubq_f32((float32x4_t)0, v89)), vmulq_f32(v93, v41));
    v11 = (float32x4_t)vcgtq_f32(v96, _Q20);
    v98 = vandq_s8(v97, vorrq_s8((int8x16_t)v11, (int8x16_t)vcgeq_f32(_Q20, v96)));
    v99 = (int8x16_t *)(a5 + 16 * v33);
    v99[1] = vbslq_s8(v98, (int8x16_t)_Q20, v99[1]);
    v99[5] = vbslq_s8(v98, (int8x16_t)v96, v99[5]);
    __asm { FMLA            S20, S28, V18.S[2] }
    v100 = _Q20.f32[0] * (float)(1.0 / v92);
    v101 = vmlas_n_f32((float)-_Q18.f32[1] * _Q28.f32[0], _Q28.f32[1], _Q18.f32[0]) * (float)(1.0 / v92);
    if (fabsf(v92) > (float)(_S11 * 0.0001) && v100 < v101)
    {
      v82 = vmulq_n_f32(v52, v101);
      v82.f32[3] = v100 / v101;
LABEL_40:
      *(float32x4_t *)(a6 + 16 * v33) = v82;
    }
    if (a1[222].u8[2] | a1[235].u8[10])
    {
      v106 = vmulq_n_f32(v48, v58);
      _S24 = v53.f32[0] * v62;
      v108 = vaddq_f32(v78, v77);
      v108.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u32[0];
      v109 = vmulq_f32(v106, v106).f32[0];
      __asm
      {
        FMLA            S31, S24, V22.S[2]
        FMLA            S20, S31, V22.S[1]
      }
      v11.f32[0] = vmuls_lane_f32(_Q22.f32[2], *(float32x2_t *)v106.f32, 1) * v106.f32[0];
      *(float32x2_t *)v112.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q22.f32), *(float32x2_t *)v106.f32);
      *(float32x2_t *)v113.f32 = vmul_laneq_f32(*(float32x2_t *)v112.f32, v106, 2);
      v114 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q22, 2);
      v114.f32[0] = -_Q22.f32[2];
      v114.f32[1] = -_Q22.f32[2];
      v114.f32[2] = -v106.f32[2];
      v112.i32[2] = vmuls_lane_f32(_Q22.f32[0], *(float32x2_t *)_Q22.f32, 1);
      v112.i32[3] = v112.i32[2];
      v115 = vmulq_f32(v114, v112);
      _Q20.i32[1] = v11.i32[0];
      _Q20.i64[1] = __PAIR64__(v115.u32[0], v113.u32[0]);
      v11.i32[1] = vmlas_n_f32((float)-_Q22.f32[2] * v109, _S31, _Q22.f32[0]);
      v11.i64[1] = __PAIR64__(v115.u32[1], v113.u32[1]);
      __asm { FMLA            S21, S24, V22.S[1] }
      v113.i64[1] = __PAIR64__(v115.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q22.f32[1] * v109, _S21, _Q22.f32[0])));
      v117 = vmulq_n_f32(v108, 1.0 / vmlas_n_f32(vmulq_f32(v106, v115).f32[0], _Q20.f32[0], _Q22.f32[0]));
      v118 = (int8x16_t)vmulq_f32(_Q20, v117);
      *(float32x2_t *)v118.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), *(float32x2_t *)v118.i8);
      v119 = (int8x16_t)vmulq_f32(v11, v117);
      *(float32x2_t *)v119.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v119.i8);
      v120 = (int8x16_t)vmulq_f32(v113, v117);
      *(float32x2_t *)v120.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), *(float32x2_t *)v120.i8);
      v121 = (int8x16_t)vmulq_f32(v115, v117);
      *(float32x2_t *)v121.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), *(float32x2_t *)v121.i8);
      *(int32x2_t *)v117.f32 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8));
      v117.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8).u32[0], vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8).u32[0]);
      *(float32x4_t *)(a7 + 16 * v33) = v117;
    }
    ++v33;
    v35 += 108;
  }
  while (v33 != v21);
}

void recompute_ideal_colors_2planes(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, float32x4_t *a7, int8x16_t *a8, double a9, double a10, uint8x8_t a11, uint8x8_t a12, unsigned int a13)
{
  int32x2_t v13;
  int32x2_t v14;
  float32x4_t v15;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  const float *v26;
  uint8x8_t v27;
  const float *v28;
  uint8x8_t v29;
  float32x4_t v30;
  unsigned int v31;
  float *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  __int32 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32x4_t v68;
  float32x4_t v70;
  float v71;
  float v72;
  float32x4_t v73;
  float v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v95;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v102;
  float32x4_t v103;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  int8x16_t v109;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float v125;
  float32x4_t v126;
  float v127;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  float32x4_t *v140;
  _BYTE v141[864];
  _BYTE v142[864];
  _BYTE v143[128];
  _BYTE v144[128];
  uint64_t v145;

  v21 = 0;
  v22 = 0;
  v145 = *MEMORY[0x24BDAC8D0];
  v23 = *(unsigned __int8 *)(a3 + 2);
  v24 = a1[216].u8[0];
  v25 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  do
  {
    v26 = (const float *)(a4 + v22);
    v27 = (uint8x8_t)vld1_dup_f32(v26);
    *(float32x4_t *)&v144[v21] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v27))), v25);
    v28 = (const float *)(a5 + v22);
    v29 = (uint8x8_t)vld1_dup_f32(v28);
    v30 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v29))), v25);
    *(float32x4_t *)&v143[v21] = v30;
    v22 += 4;
    v21 += 16;
  }
  while (v22 < v23);
  v31 = *(unsigned __int8 *)(a3 + 1);
  if (v31 == 1)
  {
    v32 = (float *)v144;
    v33 = (float *)v143;
  }
  else
  {
    v140 = a7;
    if (v31 >= 3)
    {
      v38 = 0;
      v39 = 0;
      do
      {
        *(double *)&v40 = bilinear_infill_vla(a3, (uint64_t)v144, v39, *(uint8x8_t *)v25.f32, *(uint8x8_t *)v30.f32, a11, a12);
        v32 = (float *)v142;
        *(_OWORD *)&v142[v38] = v40;
        *(double *)v25.i64 = bilinear_infill_vla(a3, (uint64_t)v143, v39, *(uint8x8_t *)&v40, v41, v42, v43);
        v33 = (float *)v141;
        *(float32x4_t *)&v141[v38] = v25;
        v39 += 4;
        v38 += 16;
      }
      while (v39 < v24);
    }
    else
    {
      v34 = 0;
      v35 = 0;
      do
      {
        *(double *)&v36 = bilinear_infill_vla_2(a3, (uint64_t)v144, v35, *(uint8x8_t *)v25.f32, *(uint8x8_t *)v30.f32);
        v32 = (float *)v142;
        *(_OWORD *)&v142[v34] = v36;
        *(double *)v25.i64 = bilinear_infill_vla_2(a3, (uint64_t)v143, v35, *(uint8x8_t *)&v36, v37);
        v33 = (float *)v141;
        *(float32x4_t *)&v141[v34] = v25;
        v35 += 4;
        v34 += 16;
      }
      while (v35 < v24);
    }
    a7 = v140;
  }
  v44 = *(unsigned __int8 *)(a2 + 3);
  v45 = a1[221];
  v46 = vmulq_n_f32(v45, (float)v44);
  v47 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  v48 = a1[219];
  v48.i32[3] = 0;
  v49 = (int8x16_t)vmulq_f32(v48, v48);
  *(float32x2_t *)v49.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), *(float32x2_t *)v49.i8);
  v50 = vdivq_f32(v48, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), 0)));
  v51 = (int8x16_t)vceqq_s32(vdupq_n_s32(a13), (int32x4_t)xmmword_2260FF480);
  v52 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1)));
  v53 = 1.0;
  if (*(_BYTE *)(a2 + 3))
  {
    v54 = (float32x4_t)vdupq_n_s32(0x233877AAu);
    v55 = 0uLL;
    v56 = 0.0;
    v57 = 1.0e10;
    v58 = (__int32 *)a1;
    v59 = 1.0;
    v60 = 0.0;
    v61 = 1.0;
    v62 = 0.0;
    v15.i32[0] = 0;
    v63 = 0.0;
    v64 = 0.0;
    v65 = 0.0;
    v66 = 0.0;
    v67 = 0.0;
    v68 = 0uLL;
    _Q17 = 0uLL;
    do
    {
      v70.i32[0] = *v58;
      v70.i32[1] = v58[216];
      v70.i32[2] = v58[432];
      v70.i32[3] = v58[648];
      v71 = *v32++;
      *(float *)v13.i32 = v71;
      v72 = 1.0 - v71;
      if (v71 < v59)
        v59 = *(float *)v13.i32;
      v73 = vmulq_f32(v50, v70);
      v74 = *v33++;
      *(float *)v14.i32 = v74;
      v65 = v65 + (float)((float)(1.0 - v74) * (float)(1.0 - v74));
      v66 = v66 + (float)((float)(1.0 - v74) * v74);
      v75 = (int8x16_t)vdupq_lane_s32(v14, 0);
      v76 = (int8x16_t)vdupq_lane_s32(v13, 0);
      if (*(float *)v13.i32 > v60)
        v60 = *(float *)v13.i32;
      v77 = (float32x4_t)vorrq_s8(vandq_s8(v75, v51), vbicq_s8(v76, v51));
      v78 = vmulq_f32(v70, v77);
      v68 = vaddq_f32(v68, v78);
      v79 = vsubq_f32(v70, v78);
      v80 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1)));
      if (v80.f32[0] < v57)
        v57 = v80.f32[0];
      v15.f32[0] = v15.f32[0] + (float)(v72 * v72);
      v63 = v63 + (float)(v72 * *(float *)v13.i32);
      if (v80.f32[0] > v56)
        v56 = v80.f32[0];
      v64 = v64 + (float)(*(float *)v13.i32 * *(float *)v13.i32);
      if (*(float *)v14.i32 < v61)
        v61 = *(float *)v14.i32;
      v67 = v67 + (float)(*(float *)v14.i32 * *(float *)v14.i32);
      v55 = vaddq_f32(v55, v79);
      v81 = (float32x4_t)__PAIR64__(v13.u32[0], LODWORD(v72));
      if (*(float *)v14.i32 > v62)
        v62 = *(float *)v14.i32;
      v13 = (int32x2_t)vmulq_f32(v52, v80).u64[0];
      _Q17 = vaddq_f32(_Q17, vmulq_n_f32(v81, *(float *)v13.i32));
      v54 = vaddq_f32(v54, v77);
      ++v58;
      --v44;
    }
    while (v44);
    v82 = v62 * 0.999;
  }
  else
  {
    _Q17.i64[0] = 0;
    v57 = 1.0e10;
    v68 = 0uLL;
    v54 = v47;
    v55 = 0uLL;
    v67 = 0.0;
    v66 = 0.0;
    v65 = 0.0;
    v64 = 0.0;
    v63 = 0.0;
    v15.i32[0] = 0;
    v82 = 0.0;
    v61 = 1.0;
    v56 = 0.0;
  }
  _Q16 = vmaxnmq_f32(v46, v47);
  v84 = vmulq_n_f32(v45, v64);
  v85 = vmulq_f32(v45, v55);
  v86 = vmulq_f32(v45, v68);
  v87 = v57 / fmaxf(v56, 1.0e-10);
  v88 = fmaxf(v87, 0.0);
  if (v87 <= 1.0)
    v53 = v88;
  v89 = vmulq_n_f32(v50, v56);
  v90 = v89;
  v90.f32[3] = v53;
  *a7 = v90;
  __asm { FMOV            V20.4S, #1.0 }
  if (_NF == _VF)
  {
    v111 = vdivq_f32(vaddq_f32(v86, v85), _Q16);
    v112 = vornq_s8(v51, vorrq_s8((int8x16_t)vcltzq_f32(v111), (int8x16_t)vcgezq_f32(v111)));
    a6[1] = vbslq_s8(v112, a6[1], (int8x16_t)v111);
    a6[5] = vbslq_s8(v112, a6[5], (int8x16_t)v111);
    v89.i32[3] = 1.0;
LABEL_39:
    *a7 = v89;
    goto LABEL_40;
  }
  v95 = v15;
  v95.f32[1] = v63;
  v95.f32[2] = v64;
  _Q22 = vmulq_n_f32(v95, v52.f32[0]);
  _Q18 = vmulq_n_f32(v45, v63);
  v98 = vmulq_n_f32(v45, v15.f32[0]);
  v99 = vsubq_f32(vmulq_f32(v84, v98), vmulq_f32(_Q18, _Q18));
  v100 = vdivq_f32(_Q20, v99);
  _S27 = _Q22.i32[2];
  v102 = vmlas_n_f32(vmuls_lane_f32(-_Q22.f32[1], *(float32x2_t *)_Q22.f32, 1), _Q22.f32[2], _Q22.f32[0]);
  v103 = vaddq_f32(vmulq_f32(v84, v84), vaddq_f32(vmulq_f32(v98, v98), vmulq_f32(_Q18, vaddq_f32(_Q18, _Q18))));
  __asm { FMLA            S28, S27, V22.S[2] }
  v105 = vmulq_f32(vsubq_f32(vmulq_f32(v85, v84), vmulq_f32(v86, _Q18)), v100);
  v106 = vmulq_f32(vsubq_f32(vmulq_f32(v86, v98), vmulq_f32(v85, _Q18)), v100);
  __asm { FMLA            S18, S17, V22.S[2] }
  v107 = _Q18.f32[0] * (float)(1.0 / v102);
  v108 = vmlas_n_f32((float)-_Q22.f32[1] * _Q17.f32[0], _Q17.f32[1], _Q22.f32[0]) * (float)(1.0 / v102);
  v109 = vbicq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v106, v105), (int8x16_t)vcgeq_f32(v105, v106)), (int8x16_t)vcgtq_f32(vmaxq_f32(v99, vsubq_f32((float32x4_t)0, v99)), vmulq_f32(v103, (float32x4_t)vdupq_n_s32(0x38D1B717u)))), v51);
  a6[1] = vbslq_s8(v109, (int8x16_t)v105, a6[1]);
  a6[5] = vbslq_s8(v109, (int8x16_t)v106, a6[5]);
  _NF = fabsf(v102) > (float)(_S28 * 0.0001) && v107 < v108;
  if (_NF)
  {
    v89 = vmulq_n_f32(v50, v108);
    v89.f32[3] = v107 / v108;
    goto LABEL_39;
  }
LABEL_40:
  v113 = vmulq_n_f32(v45, v67);
  if (v61 >= v82)
  {
    v120 = vdivq_f32(vaddq_f32(v86, v85), _Q16);
    v121 = vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v120), (int8x16_t)vcgezq_f32(v120)), v51);
    v122 = vbslq_s8(v121, (int8x16_t)v120, a6[1]);
  }
  else
  {
    v114 = vmulq_n_f32(v45, v65);
    v115 = vmulq_n_f32(v45, v66);
    v116 = vsubq_f32(vmulq_f32(v113, v114), vmulq_f32(v115, v115));
    v117 = vdivq_f32(_Q20, v116);
    v118 = vaddq_f32(vmulq_f32(v113, v113), vaddq_f32(vmulq_f32(v114, v114), vmulq_f32(v115, vaddq_f32(v115, v115))));
    v119 = vmulq_f32(vsubq_f32(vmulq_f32(v85, v113), vmulq_f32(v86, v115)), v117);
    v120 = vmulq_f32(vsubq_f32(vmulq_f32(v86, v114), vmulq_f32(v85, v115)), v117);
    v121 = vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v120, v119), (int8x16_t)vcgeq_f32(v119, v120)), v51), (int8x16_t)vcgtq_f32(vmaxq_f32(v116, vsubq_f32((float32x4_t)0, v116)), vmulq_f32(v118, (float32x4_t)vdupq_n_s32(0x38D1B717u))));
    v122 = vbslq_s8(v121, (int8x16_t)v119, a6[1]);
  }
  a6[1] = v122;
  a6[5] = vbslq_s8(v121, (int8x16_t)v120, a6[5]);
  if (a1[222].u8[2] | a1[235].u8[10])
  {
    v123 = vmulq_f32(v45, v54);
    v124 = vmulq_f32(v45, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v84, v51), vandq_s8((int8x16_t)v113, v51)));
    LODWORD(v125) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 2), vaddq_f32(v124, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v124.f32, 1))).u32[0];
    v126 = vaddq_f32(v86, v85);
    v126.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).u32[0];
    v127 = vmulq_f32(v123, v123).f32[0];
    _S7 = vmlas_n_f32(vmuls_lane_f32(-v123.f32[2], v123, 2), _Q16.f32[2], v125);
    __asm { FMLA            S18, S7, V16.S[1] }
    *(float32x2_t *)v130.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q16.f32), *(float32x2_t *)v123.f32);
    *(float32x2_t *)v131.f32 = vmul_laneq_f32(*(float32x2_t *)v130.f32, v123, 2);
    v132 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q16, 2);
    v132.f32[0] = -_Q16.f32[2];
    v132.f32[1] = -_Q16.f32[2];
    v132.f32[2] = -v123.f32[2];
    v130.i32[2] = vmuls_lane_f32(_Q16.f32[0], *(float32x2_t *)_Q16.f32, 1);
    v133.f32[0] = vmuls_lane_f32(_Q16.f32[2], *(float32x2_t *)v123.f32, 1) * v123.f32[0];
    v130.i32[3] = v130.i32[2];
    v134 = vmulq_f32(v132, v130);
    _Q18.i32[1] = v133.i32[0];
    _Q18.i64[1] = __PAIR64__(v134.u32[0], v131.u32[0]);
    v133.i32[1] = vmlas_n_f32((float)-_Q16.f32[2] * v127, _S7, _Q16.f32[0]);
    v133.i64[1] = __PAIR64__(v134.u32[1], v131.u32[1]);
    v131.i64[1] = __PAIR64__(v134.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q16.f32[1] * v127, vmlas_n_f32(-(float)(v123.f32[1] * v123.f32[1]), _Q16.f32[1], v125), _Q16.f32[0])));
    v135 = vmulq_n_f32(v126, 1.0 / vmlas_n_f32(vmulq_f32(v123, v134).f32[0], _Q18.f32[0], _Q16.f32[0]));
    v136 = (int8x16_t)vmulq_f32(_Q18, v135);
    *(float32x2_t *)v136.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), *(float32x2_t *)v136.i8);
    v137 = (int8x16_t)vmulq_f32(v133, v135);
    *(float32x2_t *)v137.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL), *(float32x2_t *)v137.i8);
    v138 = (int8x16_t)vmulq_f32(v131, v135);
    *(float32x2_t *)v138.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL), *(float32x2_t *)v138.i8);
    v139 = (int8x16_t)vmulq_f32(v134, v135);
    *(float32x2_t *)v139.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL), *(float32x2_t *)v139.i8);
    *(int32x2_t *)v136.i8 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v136.i8, *(float32x2_t *)v136.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v137.i8, *(float32x2_t *)v137.i8));
    v136.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8).u32[0], vpadd_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8).u32[0]);
    *a8 = v136;
  }
}

void load_image_block(unsigned __int32 a1, int *a2, int8x16_t *a3, unsigned __int8 *a4, int a5, int a6, int a7, _DWORD *a8, int32x4_t a9)
{
  int8x16_t *v11;
  int v12;
  __n64 (*v16)(unsigned int *, __n128);
  float v17;
  int8x8_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint32x4_t v21;
  int v22;
  int v23;
  double (*v24)(char *, int);
  double (*v25)(char *, int);
  unsigned __int8 v26;
  double (*v27)(double, __n128);
  unsigned int v28;
  int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  float32x4_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  __int32 *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  double (*v49)(char *, int);
  double v50;
  float32x4_t v51;
  int32x4_t v52;
  char *v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int32x4_t v60;
  uint32x4_t v61;
  int32x4_t v62;
  uint16x4_t v63;
  uint32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  uint32x4_t v67;
  int32x4_t v68;
  unsigned __int8 v69;
  unsigned __int8 *v70;
  uint64_t v71;
  double (*v72)(char *, int);
  int v73;
  int v74;
  int32x4_t v75;
  unsigned int v77;
  __int8 *v79;
  unsigned int v80;
  double (*v81)(double, __n128);
  int8x16_t *v82;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  float v88;
  float v89;
  __n64 (*v90)(unsigned int *, __n128);
  _DWORD *v91;
  __n128 v92;
  char *v93;
  int v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  uint32x4_t v99;
  __int8 v100;

  v11 = a3;
  v12 = a2[1];
  v84 = *a2;
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  if (a8[3] == 3 && a8[2] == 2 && a8[1] == 1 && *a8 == 0)
    v16 = (__n64 (*)(unsigned int *, __n128))swz_texel_skip;
  else
    v16 = swz_texel;
  a9.i8[0] = a4[3];
  v17 = 1.0 / (float)a9.u32[0];
  a9.i32[0] = a1 & 0xFFFFFFFE;
  a9.i32[1] = a1;
  v18 = (int8x8_t)vceq_s32(*(int32x2_t *)a9.i8, (int32x2_t)0x300000002);
  *(int8x8_t *)a9.i8 = vand_s8(v18, (int8x8_t)0x100000001);
  v19 = vzip1q_s32(a9, a9);
  v19.i32[2] = a9.i32[0];
  v20 = v18.i8[0] & 1;
  v75 = v19;
  v21 = (uint32x4_t)vtstq_s32(v19, v19);
  v23 = a2[2];
  v22 = a2[3];
  v24 = load_texel_u8;
  if (v22 == 2)
    v24 = (double (*)(char *, int))load_texel_f32;
  if (v22 == 1)
    v25 = load_texel_f16;
  else
    v25 = v24;
  v92 = (__n128)v21;
  if ((v26 & 1) == 0)
  {
    v70 = a4;
    v71 = v18.i8[0] & 1;
    v89 = v17;
    v72 = v25;
    v100 = v18.i8[4];
    v18.i8[4] = v100;
    v25 = v72;
    v21 = (uint32x4_t)v92;
    v17 = v89;
    v20 = v71;
    a4 = v70;
    if (v73)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v18.i8[4] = v100;
      v25 = v72;
      v21 = (uint32x4_t)v92;
      v17 = v89;
      v20 = v71;
      a4 = v70;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v21, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift)))
    v27 = (double (*)(double, __n128))encode_texel_lns;
  else
    v27 = (double (*)(double, __n128))encode_texel_unorm;
  v28 = a4[2];
  if (a4[2])
  {
    v81 = v27;
    v90 = v16;
    v91 = a8;
    v29 = 0;
    v30 = 0;
    v31 = v18.i8[4] & 1;
    v77 = v23 - 1;
    v80 = v12 - 1;
    v32 = a4[1];
    v33 = a5;
    v34 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v35 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v79 = &v11[222].i8[2];
    v36.i64[0] = -1;
    v36.i64[1] = -1;
    v37 = 0uLL;
    v38 = v32;
    v82 = v11;
    v88 = v17;
    do
    {
      v39 = v30 + a7;
      if (v30 + a7 >= v77)
        v39 = v77;
      if (v38)
      {
        v40 = 0;
        v41 = *(char **)(*((_QWORD *)a2 + 2) + 8 * v39);
        v42 = *a4;
        v85 = v30;
        do
        {
          if (v42)
          {
            v43 = 0;
            v86 = v40;
            v87 = v29;
            v44 = v40 + a6;
            if (v40 + a6 >= v80)
              v44 = v80;
            v94 = v44 * v84;
            v93 = &v79[v29];
            v45 = &v11->i32[v29];
            do
            {
              v95 = v37;
              v96 = v35;
              v97 = v34;
              v98 = (int8x16_t)v36;
              v46 = v33 + v43;
              if (v33 + (int)v43 >= (v84 - 1))
                v46 = v84 - 1;
              v47 = a4;
              v48 = v20;
              v49 = v25;
              v25(v41, 4 * (v46 + v94));
              v50 = ((double (*)(_DWORD *))v90)(v91);
              *(double *)v51.i64 = v81(v50, v92);
              v25 = v49;
              v20 = v48;
              a4 = v47;
              v35 = vminnmq_f32(v96, v51);
              v37 = vaddq_f32(v95, vmulq_n_f32(v51, v88));
              v34 = vmaxnmq_f32(v97, v51);
              v52 = (int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL);
              v36 = (uint32x4_t)vandq_s8(v98, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), (float32x4_t)vzip1q_s32(v52, v52)));
              *v45 = v51.i32[0];
              v45[216] = v51.i32[1];
              v45[432] = v51.i32[2];
              v45[648] = v51.i32[3];
              v53 = &v93[v43];
              *v53 = v48;
              v53[216] = v31;
              v42 = *v47;
              ++v43;
              ++v45;
            }
            while (v43 < v42);
            v40 = v86;
            v29 = v87 + v43;
            v32 = v47[1];
            v11 = v82;
            v30 = v85;
          }
          ++v40;
        }
        while (v40 < v32);
        v28 = a4[2];
        v38 = v32;
      }
      ++v30;
    }
    while (v30 < v28);
  }
  else
  {
    v35 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v34 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v36.i64[0] = -1;
    v36.i64[1] = -1;
    v37 = 0uLL;
  }
  v54 = (int8x16_t)vceqzq_s32(v75);
  v55 = *(float32x4_t *)v11;
  v55.i32[1] = v11[54].i32[0];
  v55.i32[2] = v11[108].i32[0];
  v55.i32[3] = v11[162].i32[0];
  v56 = (int8x16_t)vdivq_f32(v55, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  v57 = 0uLL;
  if ((v20 & 1) != 0)
  {
    v58 = (int8x16_t)vcvtq_s32_f32(v55);
    v59.i64[0] = 0x700000007;
    v59.i64[1] = 0x700000007;
    v60 = (int32x4_t)vandq_s8(v58, v59);
    v61.i64[0] = 0xA0000000ALL;
    v61.i64[1] = 0xA0000000ALL;
    v62 = (int32x4_t)vshlq_u32((uint32x4_t)v58, v61);
    v63 = (uint16x4_t)vmovn_s32(v60);
    v64.i64[0] = 0x20000000200;
    v64.i64[1] = 0x20000000200;
    v65.i64[0] = 0x100000001;
    v65.i64[1] = 0x100000001;
    v66 = (int8x16_t)vaddq_s32(vshlq_n_s32(v60, 2uLL), v65);
    v65.i64[0] = 0x60000000600;
    v65.i64[1] = 0x60000000600;
    v67.i64[0] = 0x700000007;
    v67.i64[1] = 0x700000007;
    v61.i64[0] = 0x200000002;
    v61.i64[1] = 0x200000002;
    v68 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v64, (uint32x4_t)v60), (int8x16_t)vmull_u16(v63, (uint16x4_t)0x3000300030003), vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v65, (uint32x4_t)v60), v66, (int8x16_t)vmlal_u16(v67, v63, (uint16x4_t)0x5000500050005))), v61), (int8x16_t)vshlq_n_s32(v62, 0xAuLL));
    v60.i64[0] = 0x7B0000007BLL;
    v60.i64[1] = 0x7B0000007BLL;
    v57 = (int8x16_t)vcvtq_f32_f16((float16x4_t)vmovn_s32(vminq_s32(v68, v60)));
  }
  v11[217] = vorrq_s8(vbicq_s8(v57, v54), vandq_s8(v56, v54));
  v11[218] = (int8x16_t)v35;
  v11[219] = (int8x16_t)v37;
  v11[220] = (int8x16_t)v34;
  if ((v69 & 1) == 0)
  {
    v99 = v36;
    v36 = v99;
    if (v74)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v36 = v99;
    }
  }
  v11[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v36, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift)) == 15;
}

double load_texel_u8(char *a1, int a2)
{
  const float *v2;
  uint8x8_t v3;
  double result;

  v2 = (const float *)&a1[a2];
  v3 = (uint8x8_t)vld1_dup_f32(v2);
  *(_QWORD *)&result = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v3))), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double load_texel_f16(char *a1, int a2)
{
  double result;

  *(_QWORD *)&result = vcvtq_f32_f16(*(float16x4_t *)&a1[2 * a2]).u64[0];
  return result;
}

__n128 load_texel_f32(char *a1, int a2)
{
  return *(__n128 *)&a1[4 * a2];
}

__n64 swz_texel(unsigned int *a1, __n128 a2)
{
  __n64 result;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = 0x3F80000000000000;
  result.n64_u32[0] = v3.n128_u32[*a1];
  result.n64_u32[1] = v3.n128_u32[a1[1]];
  return result;
}

double encode_texel_unorm(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)).u64[0];
  return result;
}

double encode_texel_lns(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v2;
  int8x16_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  unsigned __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double result;

  v2 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v3 = (int8x16_t)vmulq_f32(a1, v2);
  v4.i64[0] = 0x1600000016;
  v4.i64[1] = 0x1600000016;
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)a1, v4), v5);
  v7 = *(_OWORD *)&vandq_s8((int8x16_t)a1, (int8x16_t)vdupq_n_s32(0x807FFFFF)) | __PAIR128__(0x3F0000003F000000, 0x3F0000003F000000);
  v8 = (int8x16_t)vcgtq_f32(a1, (float32x4_t)vdupq_n_s32(0x32800000u));
  v9 = (int8x16_t)vcgeq_f32(a1, (float32x4_t)vdupq_n_s32(0x47800000u));
  v10.i64[0] = 0x7100000071;
  v10.i64[1] = 0x7100000071;
  v11 = (int8x16_t)vcgtq_u32(v10, (uint32x4_t)v6);
  v12.i64[0] = 0x4C0000004C000000;
  v12.i64[1] = 0x4C0000004C000000;
  v13 = (int8x16_t)vmulq_f32(a1, v12);
  v12.i64[0] = 0xBF000000BF000000;
  v12.i64[1] = 0xBF000000BF000000;
  v14 = vmulq_f32(vaddq_f32((float32x4_t)v7, v12), (float32x4_t)vdupq_n_s32(0x45800000u));
  v12.i64[0] = 0x6F0000006FLL;
  v12.i64[1] = 0x6F0000006FLL;
  v15 = (float32x4_t)vbslq_s8(v11, v13, (int8x16_t)v14);
  v16.i64[0] = 0x4300000043000000;
  v16.i64[1] = 0x4300000043000000;
  v17.i64[0] = 0x4400000044000000;
  v17.i64[1] = 0x4400000044000000;
  v14.i64[0] = 0x4500000045000000;
  v14.i64[1] = 0x4500000045000000;
  v18 = vaddq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, (int32x4_t)v12), v11)), v14), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x43C00000u), v15), (int8x16_t)vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3FAAAAABu)), vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x44B00000u), v15), (int8x16_t)vaddq_f32(v15, v16), (int8x16_t)vmulq_f32(vaddq_f32(v15, v17), (float32x4_t)vdupq_n_s32(0x3F4CCCCDu)))));
  __asm { FMOV            V4.4S, #1.0 }
  *(_QWORD *)&result = vbslq_s8(a2, vandq_s8(vbslq_s8(v9, (int8x16_t)v2, (int8x16_t)vaddq_f32(v18, _Q4)), v8), v3).u64[0];
  return result;
}

void load_image_block_fast_ldr(uint64_t a1, int *a2, float32x4_t *a3, unsigned __int8 *a4, unsigned int a5, unsigned __int32 a6, __int32 a7)
{
  int v7;
  int v8;
  unsigned __int32 v9;
  int v10;
  uint64_t v11;
  unsigned __int32 v12;
  int v13;
  unsigned int v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  unsigned __int32 v21;
  uint64_t v22;
  __int32 *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  const float *v27;
  uint8x8_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  unsigned __int8 v32;
  uint32x4_t *v33;
  int v34;
  int8x16_t v35;
  float32x4_t *v36;

  v8 = *a2;
  v7 = a2[1];
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  v9 = a4[1] + a6;
  if (v9 <= a6)
  {
    v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v18 = 0uLL;
  }
  else
  {
    v10 = 0;
    v11 = **((_QWORD **)a2 + 2);
    v12 = v7 - 1;
    v13 = *a4;
    v14 = v8 - 1;
    v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v17 = 4 * v8;
    v18 = 0uLL;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20 = (float32x4_t)vdupq_n_s32(0x43808000u);
    do
    {
      if (v13 + a5 > a5)
      {
        if (a6 >= v12)
          v21 = v12;
        else
          v21 = a6;
        v22 = v11 + v17 * v21;
        v23 = &a3->i32[v10];
        v24 = v13;
        v25 = a5;
        do
        {
          if (v25 >= v14)
            v26 = v14;
          else
            v26 = v25;
          v27 = (const float *)(v22 + 4 * v26);
          v28 = (uint8x8_t)vld1_dup_f32(v27);
          v29 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v28))), v20);
          v15 = vminnmq_f32(v15, v29);
          v18 = vaddq_f32(v18, v29);
          v16 = vmaxnmq_f32(v16, v29);
          v30 = (int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL);
          v19 = vandq_s8(v19, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0), (float32x4_t)vzip1q_s32(v30, v30)));
          *v23 = v29.i32[0];
          v23[216] = v29.i32[1];
          v23[432] = v29.i32[2];
          v23[648] = v29.i32[3];
          ++v25;
          ++v10;
          ++v23;
          --v24;
        }
        while (v24);
      }
      ++a6;
    }
    while (a6 != v9);
  }
  v31 = *a3;
  v31.i32[1] = a3[54].i32[0];
  v31.i32[2] = a3[108].i32[0];
  v31.i32[3] = a3[162].i32[0];
  a3[217] = vdivq_f32(v31, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  a3[222].i8[2] = 0;
  a3[235].i8[10] = 0;
  a3[218] = v15;
  v15.i8[0] = a4[3];
  v15.f32[0] = (float)v15.u32[0];
  a3[219] = vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0));
  a3[220] = v16;
  v33 = (uint32x4_t *)&unk_255825000;
  if ((v32 & 1) == 0)
  {
    v36 = a3;
    v35 = v19;
    v19 = v35;
    v33 = (uint32x4_t *)&unk_255825000;
    a3 = v36;
    if (v34)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v19 = v35;
      v33 = (uint32x4_t *)&unk_255825000;
      a3 = v36;
    }
  }
  a3[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v19, 0x1FuLL), v33[202])) == 15;
}

uint64_t astcenc_config_init(unsigned int a1, int a2, int a3, unsigned int a4, int a5, uint64_t a6, float a7)
{
  unsigned int v13;
  uint64_t result;
  int v15;
  float v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  int v28;
  float32x2_t v29;
  float32x2_t v30;
  float *v31;
  float *v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float v38;
  int v44;
  int v45;

  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0)
    return 2;
  *(_QWORD *)(a6 + 112) = 0;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  if (a4 <= 1)
    v13 = 1;
  else
    v13 = a4;
  *(_OWORD *)a6 = 0uLL;
  result = validate_block_size(a2, a3, v13);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a6 + 8) = a2;
    *(_DWORD *)(a6 + 12) = a3;
    *(_DWORD *)(a6 + 16) = v13;
    v15 = a3 * a2 * v13;
    v16 = logf((float)v15);
    result = 6;
    if (a7 >= 0.0 && a7 <= 100.0)
    {
      v19 = 0;
      v20 = (float *)&preset_configs_low;
      if (v15 < 0x40)
        v20 = (float *)&preset_configs_mid;
      v21 = (float *)&preset_configs_high;
      if (v15 >= 25)
        v21 = v20;
      astcenc_config_init(astcenc_profile,unsigned int,unsigned int,unsigned int,float,unsigned int,astcenc_config *)::preset_configs = (uint64_t)v21;
      v22 = v21;
      v23 = v16 / 2.3026;
      do
      {
        if (*v22 >= a7)
          break;
        ++v19;
        v22 += 18;
      }
      while (v19 != 6);
      v24 = v19 - 1;
      if (!v19)
        v24 = 0;
      if (v24 == v19)
      {
        v25 = &v21[18 * v19];
        *(_OWORD *)(a6 + 44) = *(_OWORD *)(v25 + 1);
        *(_OWORD *)(a6 + 60) = *(_OWORD *)(v25 + 5);
        *(_QWORD *)(a6 + 76) = *(_QWORD *)(v25 + 9);
        v26 = v25[11] + (float)(v23 * -35.0);
        v27 = v25[12] + (float)(v23 * -19.0);
        if (v26 > v27)
          v27 = v26;
        v28 = *((_DWORD *)v25 + 13);
        *(float *)(a6 + 84) = v27;
        *(_DWORD *)(a6 + 88) = v28;
        v29 = *(float32x2_t *)(v25 + 14);
        *(float32x2_t *)(a6 + 92) = v29;
        v30 = *(float32x2_t *)(v25 + 16);
      }
      else
      {
        v31 = &v21[18 * v24];
        v32 = &v21[18 * v19];
        v33 = *v32 - *v31;
        *(float *)v17.i32 = (float)(*v32 - a7) / v33;
        *(float *)v18.i32 = (float)(a7 - *v31) / v33;
        v34 = (float32x2_t)vdupq_lane_s32(v18, 0).u64[0];
        v35 = (float32x2_t)vdupq_lane_s32(v17, 0).u64[0];
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        *(int32x4_t *)(a6 + 44) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v32 + 1)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v31 + 1)), *(float *)v17.i32), v36));
        *(int32x4_t *)(a6 + 60) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v32 + 5)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v31 + 5)), *(float *)v17.i32), v36));
        *(int32x2_t *)(a6 + 76) = vcvt_s32_f32(vadd_f32(vmla_f32(vmul_f32(v34, vcvt_f32_u32(*(uint32x2_t *)(v32 + 9))), v35, vcvt_f32_u32(*(uint32x2_t *)(v31 + 9))), (float32x2_t)0x3F0000003F000000));
        v37 = vmla_n_f32(vmla_f32(vmul_f32(v34, *(float32x2_t *)(v32 + 11)), v35, *(float32x2_t *)(v31 + 11)), (float32x2_t)0xC1980000C20C0000, v23);
        v27 = v37.f32[1];
        if (v37.f32[0] > v37.f32[1])
          v27 = v37.f32[0];
        v38 = (float)(*(float *)v18.i32 * v32[13]) + (float)(v31[13] * *(float *)v17.i32);
        *(float *)(a6 + 84) = v27;
        *(float *)(a6 + 88) = v38;
        v29 = vmla_f32(vmul_f32(v34, *(float32x2_t *)(v32 + 14)), v35, *(float32x2_t *)(v31 + 14));
        *(float32x2_t *)(a6 + 92) = v29;
        v30 = vmla_f32(vmul_f32(v34, *(float32x2_t *)(v32 + 16)), v35, *(float32x2_t *)(v31 + 16));
      }
      *(float32x2_t *)(a6 + 100) = v30;
      __asm { FMOV            V2.4S, #1.0 }
      *(_OWORD *)(a6 + 20) = _Q2;
      *(_QWORD *)(a6 + 36) = 0;
      *(_DWORD *)a6 = a1;
      if (a1 >= 2)
      {
        if (a1 - 2 > 1)
          return 5;
        *(_DWORD *)(a6 + 84) = 1148829696;
        *(_DWORD *)(a6 + 104) = 0;
        v27 = 999.0;
      }
      LODWORD(_Q2) = a5 & 0xFFFFFF80;
      *(int8x8_t *)&_Q2 = vcnt_s8(*(int8x8_t *)&_Q2);
      if (vaddlv_u8(*(uint8x8_t *)&_Q2))
        return 8;
      LODWORD(_Q2) = a5 & 0x41;
      if ((vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)&_Q2)) & 0xFFFE) != 0)
      {
        return 8;
      }
      else if ((a1 & 0xFFFFFFFE) == 2 && (a5 & 2) != 0)
      {
        return 11;
      }
      else
      {
        if ((a5 & 1) != 0)
        {
          v44 = *(_DWORD *)(a6 + 44);
          if ((v44 + 1) < 4)
            v45 = v44 + 1;
          else
            v45 = 4;
          *(_DWORD *)(a6 + 44) = v45;
          *(_QWORD *)(a6 + 24) = 0;
          __asm { FMOV            V2.2S, #1.5 }
          *(float32x2_t *)(a6 + 92) = vmul_f32(v29, _D2);
          *(_DWORD *)(a6 + 100) = 1065185444;
          *(float *)(a6 + 84) = v27 * 1.03;
        }
        else if ((a5 & 0x40) != 0)
        {
          *(_DWORD *)(a6 + 40) = 1084227584;
          *(_DWORD *)(a6 + 32) = 1092616192;
        }
        else if ((a5 & 8) != 0)
        {
          *(_QWORD *)(a6 + 20) = 0x3FA9EB853F2CCCCDLL;
          *(_DWORD *)(a6 + 28) = 1048408228;
        }
        result = 0;
        *(_DWORD *)(a6 + 4) = a5;
      }
    }
  }
  return result;
}

uint64_t validate_block_size(int a1, int a2, unsigned int a3)
{
  if (a3 > 1)
  {
    if (!is_legal_3d_block_size(a1, a2, a3))
      return 4;
  }
  else if ((is_legal_2d_block_size(a1, a2) & 1) == 0)
  {
    return 4;
  }
  if (a2 * a1 * a3 >= 0xD9)
    return 10;
  else
    return 0;
}

uint64_t astcenc_context_alloc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  std::mutex *v7;
  std::condition_variable *v8;
  std::mutex *v9;
  std::mutex *v10;
  std::condition_variable *v11;
  std::mutex *v12;
  std::mutex *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint32x4_t v22;
  uint32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x4_t v27;
  int v28;
  unsigned int *v29;
  void *v31;
  int32x2_t v32;
  float v33;
  int8x16_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int v52;
  void *v53;
  BOOL v54;
  uint64_t *v55;
  std::condition_variable *v56;
  std::mutex *v57;
  void *memptr;

  LODWORD(memptr) = 1075880919;
  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0)
    return 2;
  if (!a2)
    return 3;
  v6 = operator new();
  *(_QWORD *)(v6 + 240) = 850045863;
  v7 = (std::mutex *)(v6 + 240);
  *(_OWORD *)(v6 + 248) = 0u;
  *(_QWORD *)(v6 + 296) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  v8 = (std::condition_variable *)(v6 + 312);
  *(_QWORD *)(v6 + 312) = 1018212795;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_QWORD *)(v6 + 352) = 0;
  v9 = (std::mutex *)(v6 + 384);
  *(_QWORD *)(v6 + 384) = 850045863;
  *(_QWORD *)(v6 + 440) = 0;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_WORD *)(v6 + 304) = 0;
  atomic_store(0, (unsigned int *)(v6 + 360));
  *(_QWORD *)(v6 + 364) = 0;
  *(_QWORD *)(v6 + 448) = 1065353216;
  v10 = (std::mutex *)(v6 + 456);
  *(_QWORD *)(v6 + 456) = 850045863;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_QWORD *)(v6 + 512) = 0;
  v11 = (std::condition_variable *)(v6 + 528);
  *(_QWORD *)(v6 + 528) = 1018212795;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 600) = 850045863;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 640) = 0u;
  *(_QWORD *)(v6 + 656) = 0;
  *(_WORD *)(v6 + 520) = 0;
  atomic_store(0, (unsigned int *)(v6 + 576));
  *(_QWORD *)(v6 + 580) = 0;
  *(_QWORD *)(v6 + 664) = 1065353216;
  v12 = (std::mutex *)(v6 + 672);
  *(_QWORD *)(v6 + 672) = 850045863;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_QWORD *)(v6 + 728) = 0;
  *(_QWORD *)(v6 + 744) = 1018212795;
  *(_OWORD *)(v6 + 752) = 0u;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_QWORD *)(v6 + 784) = 0;
  v13 = (std::mutex *)(v6 + 816);
  *(_QWORD *)(v6 + 816) = 850045863;
  *(_OWORD *)(v6 + 824) = 0u;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *(_QWORD *)(v6 + 872) = 0;
  *(_WORD *)(v6 + 736) = 0;
  atomic_store(0, (unsigned int *)(v6 + 792));
  *(_QWORD *)(v6 + 796) = 0;
  *(_QWORD *)(v6 + 880) = 1065353216;
  *(_DWORD *)(v6 + 120) = a2;
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 80) = v14;
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 16) = v15;
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 48) = v16;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  v56 = (std::condition_variable *)(v6 + 744);
  v57 = (std::mutex *)(v6 + 600);
  if (*(_DWORD *)v6 > 3u)
  {
    v18 = 5;
    goto LABEL_10;
  }
  v17 = *(_DWORD *)(v6 + 4);
  if (vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v17 & 0xFFFFFF80)))
    || (vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v17 & 0x41))) & 0xFFFE) != 0)
  {
    v18 = 8;
LABEL_10:
    std::mutex::~mutex(v13);
    std::condition_variable::~condition_variable(v56);
    std::mutex::~mutex(v12);
    std::mutex::~mutex(v57);
    std::condition_variable::~condition_variable(v11);
    std::mutex::~mutex(v10);
    std::mutex::~mutex(v9);
    std::condition_variable::~condition_variable(v8);
    std::mutex::~mutex(v7);
    MEMORY[0x2276933B8](v6, 0x10E0C403E9FBDC8);
    return v18;
  }
  if ((*(_DWORD *)v6 & 0xFFFFFFFE) == 2 && (v17 & 2) != 0)
  {
    v18 = 11;
    goto LABEL_10;
  }
  v55 = a3;
  v18 = validate_block_size(*(_DWORD *)(v6 + 8), *(_DWORD *)(v6 + 12), *(_DWORD *)(v6 + 16));
  v13 = (std::mutex *)(v6 + 816);
  if ((_DWORD)v18)
    goto LABEL_10;
  v20 = *(_DWORD *)(v6 + 60);
  v21 = *(_DWORD *)(v6 + 64);
  if (v20 <= 1)
    v20 = 1;
  if (v20 >= 0x64)
    v20 = 100;
  *(float *)(v6 + 40) = fmaxf(*(float *)(v6 + 40), 1.0);
  v22.i64[0] = 0x100000001;
  v22.i64[1] = 0x100000001;
  *(uint32x4_t *)(v6 + 44) = vminq_u32(vmaxq_u32(*(uint32x4_t *)(v6 + 44), v22), (uint32x4_t)xmmword_2261A29C0);
  if (v21 <= 1)
    v21 = 1;
  *(_DWORD *)(v6 + 60) = v20;
  *(_DWORD *)(v6 + 64) = v21;
  v23.i64[0] = 0x800000008;
  v23.i64[1] = 0x800000008;
  *(uint32x4_t *)(v6 + 68) = vminq_u32(vmaxq_u32(*(uint32x4_t *)(v6 + 68), v22), v23);
  *(float32x4_t *)(v6 + 84) = vmaxnmq_f32(*(float32x4_t *)(v6 + 84), (float32x4_t)xmmword_2260E5F20);
  *(float *)(v6 + 100) = fmaxf(*(float *)(v6 + 100), 0.0);
  v24 = *(float32x4_t *)(v6 + 20);
  v23.i64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v25 = (float32x2_t)vzip1_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v23.i8);
  *(int32x2_t *)v23.i8 = vzip2_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v23.i8);
  v26 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, *(float32x2_t *)v23.i8), (int8x8_t)v25, *(int8x8_t *)v23.i8);
  if (*(float *)v26.i32 <= *(float *)&v26.i32[1])
    v26.i32[0] = v26.i32[1];
  if (*(float *)v26.i32 <= 0.0)
  {
    v18 = 3;
    goto LABEL_10;
  }
  *(float *)v26.i32 = *(float *)v26.i32 / 1000.0;
  v27 = (float32x4_t)vdupq_lane_s32(v26, 0);
  *(int8x16_t *)(v6 + 20) = vbslq_s8((int8x16_t)vcgtq_f32(v24, v27), (int8x16_t)v24, (int8x16_t)v27);
  memptr = 0;
  v28 = malloc_type_posix_memalign(&memptr, 0x10uLL, 0xE0EC70uLL, 0x239E05CCuLL);
  v29 = (unsigned int *)memptr;
  if (v28)
    _ZF = 1;
  else
    _ZF = memptr == 0;
  if (_ZF)
    v31 = 0;
  else
    v31 = memptr;
  *(_QWORD *)(v6 + 128) = v31;
  if (_ZF)
  {
    std::mutex::~mutex((std::mutex *)(v6 + 816));
    std::condition_variable::~condition_variable(v56);
    std::mutex::~mutex(v12);
    std::mutex::~mutex(v57);
    std::condition_variable::~condition_variable(v11);
    std::mutex::~mutex(v10);
    std::mutex::~mutex(v9);
    std::condition_variable::~condition_variable(v8);
    std::mutex::~mutex(v7);
    MEMORY[0x2276933B8](v6, 0x10E0C403E9FBDC8);
  }
  else
  {
    init_block_size_descriptor(*(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), (*(_DWORD *)(a1 + 4) >> 5) & 1, *(_DWORD *)(a1 + 44), v29);
    if ((*(_BYTE *)(v6 + 4) & 0x10) != 0)
      goto LABEL_47;
    v33 = 0.0;
    if (*(_DWORD *)v6 <= 1u)
    {
      *(float *)v32.i32 = *(float *)(v6 + 84) * 0.1;
      v34 = (int8x16_t)vceqzq_f32((float32x4_t)vdupq_lane_s32(v32, 0));
      v35.i64[0] = 0x1600000016;
      v35.i64[1] = 0x1600000016;
      v36 = (float32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(0x3D800000u), v35);
      v35.i64[0] = 0x7E0000007ELL;
      v35.i64[1] = 0x7E0000007ELL;
      v37 = vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)v36, (int32x4_t)v35)), (float32x4_t)vdupq_n_s32(0x3F2D9864u)), *(float *)v32.i32), (float32x4_t)vdupq_n_s32(0xC2FDFFFF)), (float32x4_t)vdupq_n_s32(0x43010000u));
      v36.i64[0] = 0xBF000000BF000000;
      v36.i64[1] = 0xBF000000BF000000;
      v38 = vcvtq_s32_f32(vaddq_f32(v37, v36));
      v39 = vsubq_f32(v37, vcvtq_f32_s32(v38));
      v35.i64[0] = 0x7F0000007FLL;
      v35.i64[1] = 0x7F0000007FLL;
      v40 = (float32x4_t)vshlq_n_s32(vaddq_s32(v38, (int32x4_t)v35), 0x17uLL);
      v41 = (float32x4_t)vdupq_n_s32(0x3C134806u);
      v42 = vmulq_f32(v39, vaddq_f32(vmulq_f32(v39, (float32x4_t)vdupq_n_s32(0x3AF61905u)), v41));
      v41.i32[0] = 1030007331;
      v43 = vmulq_f32(v39, vaddq_f32(v42, v41));
      v41.i32[0] = 1047915220;
      v44 = vmulq_f32(v39, vaddq_f32(v43, v41));
      v41.i32[0] = *(_DWORD *)"{r1?";
      v45 = vaddq_f32(v44, v41);
      v46 = vmulq_f32(v39, v45);
      v45.i32[0] = 1065353215;
      v47 = (int8x16_t)vmulq_f32(vaddq_f32(v46, v45), v40);
      __asm { FMOV            V2.4S, #1.0 }
      v33 = (float)(65535.0 * *(float *)vbslq_s8(v34, _Q2, v47).i32) * 65535.0;
    }
    *(float *)(v6 + 84) = v33;
    memptr = 0;
    v52 = malloc_type_posix_memalign(&memptr, 0x10uLL, 231744 * a2, 0x239E05CCuLL);
    v53 = memptr;
    v54 = v52 || memptr == 0;
    if (v54)
      v53 = 0;
    *(_QWORD *)(v6 + 144) = v53;
    if (!v54)
    {
LABEL_47:
      *v55 = v6;
      prepare_angular_tables();
      return 0;
    }
    free(*(void **)(v6 + 128));
    astcenc_context::~astcenc_context((astcenc_context *)v6);
    MEMORY[0x2276933B8]();
    *v55 = 0;
  }
  return 1;
}

void astcenc_context::~astcenc_context(astcenc_context *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 672);
  std::mutex::~mutex((std::mutex *)((char *)this + 816));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 744));
  std::mutex::~mutex(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 600));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 456));
  std::mutex::~mutex((std::mutex *)this + 6);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 312));
  std::mutex::~mutex((std::mutex *)((char *)this + 240));
}

uint64_t astcenc_context_free(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    free(*(void **)(result + 144));
    free(*(void **)(v1 + 128));
    std::mutex::~mutex((std::mutex *)(v1 + 816));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 744));
    std::mutex::~mutex((std::mutex *)(v1 + 672));
    std::mutex::~mutex((std::mutex *)(v1 + 600));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 528));
    std::mutex::~mutex((std::mutex *)(v1 + 456));
    std::mutex::~mutex((std::mutex *)(v1 + 384));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 312));
    std::mutex::~mutex((std::mutex *)(v1 + 240));
    JUMPOUT(0x2276933B8);
  }
  return result;
}

uint64_t astcenc_compress_image(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint32x4_t *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int32x4_t *v7;
  uint32x4_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  float32x4_t v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  std::mutex *v35;
  uint64_t v36;
  unsigned int v37;
  int32x4_t v38;
  double v39;
  float32x4_t v40;
  __int128 v41;
  __n128 v42;
  void (*v43)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t);
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char v56;
  int v57;
  int v58;
  double v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v63;
  astcenc_context *v64;
  unsigned int v65;
  int v66;
  unsigned __int8 *v67;
  void (*v68)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t);
  unsigned int v69;
  int *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  signed int v77;
  int32x2_t v78;
  int v79;
  int32x2_t v80;
  int v81;
  _QWORD v82[3];
  _QWORD *v83;
  float32x4_t v84[2];
  __int128 v85;
  int32x2_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  BOOL v95;
  uint64_t v96;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v75 = v6;
  v70 = v2;
  v96 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v1 + 4) & 0x10) != 0)
    return 9;
  v7 = (int32x4_t *)v3;
  v8.i64[0] = 0x500000005;
  v8.i64[1] = 0x500000005;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(*v3, v8))) & 1) != 0)
    return 7;
  v10 = v5;
  v11 = v1;
  v12 = *(_DWORD *)(v1 + 120);
  if (v12 <= v5)
    return 3;
  if (16
     * (*(_DWORD *)(v1 + 8) + *v2 - 1)
     / *(_DWORD *)(v1 + 8)
     * ((*(_DWORD *)(v1 + 12) + v2[1] - 1)
      / *(_DWORD *)(v1 + 12))
     * ((*(_DWORD *)(v1 + 16) + v2[2] - 1)
      / *(_DWORD *)(v1 + 16)) > v4)
    return 1;
  if (v12 == 1)
    astcenc_compress_reset((astcenc_context *)v1);
  if (*(_DWORD *)(v11 + 36))
  {
    v72 = v10;
    v13 = operator new(0x20uLL);
    *v13 = &off_24ED8B208;
    v13[1] = v11;
    v13[2] = v70;
    v13[3] = v7;
    std::mutex::lock((std::mutex *)(v11 + 240));
    if (!*(_BYTE *)(v11 + 304))
    {
      *(_DWORD *)(v11 + 368) = (*(uint64_t (**)(_QWORD *))(*v13 + 48))(v13);
      *(_BYTE *)(v11 + 304) = 1;
    }
    std::mutex::unlock((std::mutex *)(v11 + 240));
    (*(void (**)(_QWORD *))(*v13 + 40))(v13);
    v14 = *(float32x4_t *)(v11 + 168);
    v84[0] = *(float32x4_t *)(v11 + 152);
    v84[1] = v14;
    v85 = *(_OWORD *)(v11 + 184);
    v86 = *(int32x2_t *)(v11 + 200);
    v87 = operator new[]();
    v15 = *(_DWORD *)(v11 + 216);
    v78 = *(int32x2_t *)(v11 + 220);
    v80 = *(int32x2_t *)(v11 + 228);
    v16 = (unsigned int *)(v11 + 360);
    v17 = (v78.i32[0] + v80.i32[0] - 1) / v80.i32[0];
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 16, v16));
    v19 = *(_DWORD *)(v11 + 368);
    if (v19 - v18 >= 0x10)
      v20 = 16;
    else
      v20 = v19 - v18;
    if (v19 <= v18 || v20 == 0)
      goto LABEL_45;
    do
    {
      v76 = v20;
      v22 = v20 + v18;
      if (v18 < v20 + v18)
      {
        do
        {
          v86.i32[0] = (v18 - v18 / v17 * v80.i32[1] * v17) * v80.i32[0];
          v86.i32[1] = v18 / v17 * v80.i32[1];
          *(int32x2_t *)((char *)&v85 + 4) = vmin_s32(v80, vsub_s32(v78, v86));
          if (v15 >= 1)
          {
            v23 = 0;
            v24 = v15;
            do
            {
              if (v80.i32[0] >= v24)
                v25 = v24;
              else
                v25 = v80.i32[0];
              LODWORD(v85) = v25;
              HIDWORD(v85) = v23;
              compute_pixel_region_variance(v11, (uint64_t *)v84);
              v23 += v80.i32[0];
              v24 -= v80.i32[0];
            }
            while (v23 < v15);
          }
          ++v18;
        }
        while (v18 != v22);
      }
      ParallelManager::complete_task_assignment((ParallelManager *)(v11 + 240), v76);
      do
        v26 = __ldxr(v16);
      while (__stxr(v26 + 16, v16));
      v27 = *(_DWORD *)(v11 + 368);
      v20 = v27 - v26;
      if (v27 - v26 >= 0x10)
        v20 = 16;
      if (v27 > v26)
        v18 = v26;
      else
        v18 = 0;
    }
    while (v27 > v26 && v20 != 0);
    if (v87)
LABEL_45:
      MEMORY[0x227693394]();
    v10 = v72;
  }
  ParallelManager::wait((std::mutex *)(v11 + 240));
  v29 = *(unsigned __int8 **)(v11 + 128);
  v69 = *(_DWORD *)v11;
  v30 = *v29;
  v67 = v29;
  v77 = v29[1];
  v79 = v29[2];
  v88 = v77 * v30 * v79;
  v31 = *v70;
  v32 = v70[2];
  v81 = v30;
  v33 = (v30 + *v70 - 1) / v30;
  v66 = v70[1];
  v73 = (v77 + v66 - 1) / v77;
  v74 = v73 * v33;
  v95 = (*(_BYTE *)(v11 + 4) & 2) != 0;
  v93 = *(_OWORD *)(v11 + 20);
  v34 = *(_QWORD *)(v11 + 144);
  v35 = (std::mutex *)(v11 + 456);
  v36 = *(_QWORD *)(v11 + 112);
  std::mutex::lock((std::mutex *)(v11 + 456));
  if (!*(_BYTE *)(v11 + 520))
  {
    v37 = (v79 + v32 - 1) / v79 * v74;
    *(_QWORD *)(v11 + 592) = v36;
    *(_DWORD *)(v11 + 584) = v37;
    *(_BYTE *)(v11 + 520) = 1;
    *(float *)(v11 + 664) = fmaxf((float)(4096.0 / (float)v37) * 100.0, 1.0);
  }
  v71 = v34 + 231744 * v10;
  std::mutex::unlock((std::mutex *)(v11 + 456));
  *(_QWORD *)&v41 = 0x100000000;
  v42 = (__n128)vmvnq_s8((int8x16_t)vceqq_s32(*v7, (int32x4_t)xmmword_2260FF480));
  v42.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v42);
  v42.n128_u16[0] = vmaxv_u16((uint16x4_t)v42.n128_u64[0]);
  if ((v42.n128_u8[0] & 1) != 0)
  {
    v43 = load_image_block;
  }
  else
  {
    v68 = load_image_block;
    if ((v69 & 0xFFFFFFFE) == 2 || v79 != 1)
      goto LABEL_56;
    v43 = load_image_block;
    if (!v70[3])
      v43 = (void (*)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t))load_image_block_fast_ldr;
  }
  v68 = v43;
LABEL_56:
  v44 = (unsigned int *)(v11 + 576);
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 16, v44));
  v46 = *(_DWORD *)(v11 + 584);
  if (v46 - v45 >= 0x10)
    v47 = 16;
  else
    v47 = v46 - v45;
  if (v46 > v45 && v47 != 0)
  {
    do
    {
      v65 = v47;
      v49 = v47 + v45;
      if (v45 < v47 + v45)
      {
        do
        {
          v50 = v45 % v74 / v33;
          v51 = v45 % v74 % v33;
          v52 = v51 * v81;
          if (v79 != 1)
            goto LABEL_81;
          v53 = *(_DWORD *)(v11 + 36);
          if (!v53)
            goto LABEL_81;
          v54 = v52 + v81;
          if (v31 < v52 + v81)
            v54 = v31;
          v55 = v50 * v77 + v77;
          if (v66 < v55)
            v55 = v66;
          if ((int)(v50 * v77) >= v55)
            goto LABEL_80;
          v56 = 0;
          LODWORD(v41) = 1132396544;
          v42.n128_f32[0] = 0.9 / (float)((float)((2 * v53 - 2 + v81) * (2 * v53 - 2 + v77)) * 255.0);
          v57 = v50 * v77;
          do
          {
            v58 = v51 * v81;
            if (v52 < v54)
            {
              do
              {
                LODWORD(v41) = *(_DWORD *)(*(_QWORD *)(v11 + 136) + 4 * (v58 + v57 * v31));
                if (*(float *)&v41 > v42.n128_f32[0])
                {
                  v56 = 1;
                  v57 = v55;
                  v58 = v54;
                }
                ++v58;
              }
              while (v58 < v54);
            }
            ++v57;
          }
          while (v57 < v55);
          if ((v56 & 1) == 0)
          {
LABEL_80:
            v59 = 0.0;
            v91 = 0u;
            v92 = 0u;
            v89 = 0u;
            v90 = 0u;
            v94 = 1;
          }
          else
          {
LABEL_81:
            ((void (*)(_QWORD, int *, float32x4_t *, unsigned __int8 *, __n128))v68)(v69, v70, v84, v67, v42);
            if ((*(_BYTE *)(v11 + 4) & 4) != 0)
            {
              *(float32x2_t *)&v41 = vmul_n_f32(*(float32x2_t *)(v11 + 20), *((float *)&v92 + 3) * 0.000015259);
              v38.i32[0] = *(_DWORD *)(v11 + 28);
              *(float *)&v59 = (float)(*((float *)&v92 + 3) * 0.000015259) * *(float *)v38.i32;
              *((float *)&v41 + 2) = *(float *)&v59;
              HIDWORD(v41) = *(_DWORD *)(v11 + 32);
              v93 = v41;
            }
          }
          compress_block(v11, v84, v75 + (int)(16 * (v51 + (v50 + v45 / v74 * v73) * v33)), v71, v59, *(double *)&v41, v38, v39, v40);
          ++v45;
        }
        while (v45 != v49);
      }
      v35 = (std::mutex *)(v11 + 456);
      ParallelManager::complete_task_assignment((ParallelManager *)(v11 + 456), v65);
      do
        v60 = __ldxr(v44);
      while (__stxr(v60 + 16, v44));
      v61 = *(_DWORD *)(v11 + 584);
      v47 = v61 - v60;
      if (v61 - v60 >= 0x10)
        v47 = 16;
      if (v61 > v60)
        v45 = v60;
      else
        v45 = 0;
    }
    while (v61 > v60 && v47 != 0);
  }
  ParallelManager::wait(v35);
  v82[0] = &off_24ED8B298;
  v82[1] = v11;
  v83 = v82;
  std::mutex::lock(v35);
  if (!*(_BYTE *)(v11 + 521))
  {
    if (!v83)
    {
      v64 = (astcenc_context *)std::__throw_bad_function_call[abi:nn180100]();
      return astcenc_compress_reset(v64);
    }
    (*(void (**)(_QWORD *))(*v83 + 48))(v83);
    *(_BYTE *)(v11 + 521) = 1;
  }
  std::mutex::unlock(v35);
  result = (uint64_t)v83;
  if (v83 == v82)
  {
    v63 = 4;
    result = (uint64_t)v82;
    goto LABEL_103;
  }
  if (v83)
  {
    v63 = 5;
LABEL_103:
    (*(void (**)(void))(*(_QWORD *)result + 8 * v63))();
    return 0;
  }
  return result;
}

uint64_t astcenc_compress_reset(astcenc_context *a1)
{
  uint64_t result;

  if ((*((_BYTE *)a1 + 4) & 0x10) != 0)
    return 9;
  result = 0;
  *((_WORD *)a1 + 152) = 0;
  atomic_store(0, (unsigned int *)a1 + 90);
  *(_QWORD *)((char *)a1 + 364) = 0;
  *((_QWORD *)a1 + 56) = 1065353216;
  *((_WORD *)a1 + 260) = 0;
  atomic_store(0, (unsigned int *)a1 + 144);
  *(_QWORD *)((char *)a1 + 580) = 0;
  *((_QWORD *)a1 + 83) = 1065353216;
  return result;
}

void ParallelManager::wait(std::mutex *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  std::unique_lock<std::mutex> v2;

  m = this;
  v2.__m_ = this;
  v2.__owns_ = 1;
  std::mutex::lock(this);
  if (*(_DWORD *)&m[1].__m_.__opaque[52] == LODWORD(m[2].__m_.__sig))
    goto LABEL_5;
  do
    std::condition_variable::wait((std::condition_variable *)m[1].__m_.__opaque, &v2);
  while (*(_DWORD *)&m[1].__m_.__opaque[52] != LODWORD(m[2].__m_.__sig));
  if (v2.__owns_)
  {
    m = v2.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void ParallelManager::complete_task_assignment(ParallelManager *this, int a2)
{
  int v4;
  unsigned int v5;
  float v6;
  float v7;

  std::mutex::lock((std::mutex *)this);
  v4 = *((_DWORD *)this + 32);
  v5 = *((_DWORD *)this + 31) + a2;
  *((_DWORD *)this + 31) = v5;
  v6 = *((float *)this + 53);
  if (v5 == v4)
  {
    if (*((_QWORD *)this + 17))
    {
      std::mutex::lock((std::mutex *)((char *)this + 144));
      (*((void (**)(float))this + 17))(100.0);
      *((_DWORD *)this + 53) = 1120403456;
      std::mutex::unlock((std::mutex *)((char *)this + 144));
    }
    std::mutex::unlock((std::mutex *)this);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 72));
  }
  else
  {
    std::mutex::unlock((std::mutex *)this);
  }
  if (*((_QWORD *)this + 17))
  {
    v7 = (float)((float)v5 / (float)*((unsigned int *)this + 32)) * 100.0;
    if ((float)(v7 - v6) > *((float *)this + 52))
    {
      std::mutex::lock((std::mutex *)((char *)this + 144));
      if ((float)(v7 - *((float *)this + 53)) > *((float *)this + 52))
      {
        (*((void (**)(float))this + 17))(v7);
        *((float *)this + 53) = v7;
      }
      std::mutex::unlock((std::mutex *)((char *)this + 144));
    }
  }
}

char *astcenc_get_error_string(unsigned int a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return off_24ED8B308[a1];
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED8B208;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED8B208;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;

  v2 = operator new[]();
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  *(_QWORD *)(v4 + 136) = v2;
  return init_compute_averages(v3, *(_DWORD *)(v4 + 36), *(_OWORD **)(a1 + 24), v4 + 152);
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED8B298;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED8B298;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 136);
  if (result)
  {
    result = MEMORY[0x227693394](result, 0x1000C8052888210);
    v2 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(v2 + 136) = 0;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

float *get_2d_percentile_table(int a1, int a2)
{
  float *v4;
  float *v5;
  int v6;
  _QWORD *v7;
  float v8;
  uint64_t v9;
  char v10;
  char v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;

  v4 = (float *)operator new[]();
  v5 = v4;
  v6 = a1 | (a2 << 8);
  if (v6 > 1543)
  {
    if (v6 <= 2057)
    {
      switch(v6)
      {
        case 1544:
          v7 = &block_pcd_8x6;
          goto LABEL_31;
        case 1546:
          v7 = &block_pcd_10x6;
          goto LABEL_31;
        case 2056:
          v7 = &block_pcd_8x8;
          goto LABEL_31;
      }
    }
    else if (v6 > 2571)
    {
      if (v6 == 2572)
      {
        v7 = &block_pcd_12x10;
        goto LABEL_31;
      }
      if (v6 == 3084)
      {
        v7 = &block_pcd_12x12;
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 == 2058)
      {
        v7 = &block_pcd_10x8;
        goto LABEL_31;
      }
      if (v6 == 2570)
      {
        v7 = &block_pcd_10x10;
        goto LABEL_31;
      }
    }
LABEL_25:
    v7 = 0;
    goto LABEL_31;
  }
  if (v6 <= 1284)
  {
    if (v6 == 1028)
    {
      v7 = &block_pcd_4x4;
      goto LABEL_31;
    }
    if (v6 == 1029)
    {
      v7 = &block_pcd_5x4;
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  switch(v6)
  {
    case 1285:
      v7 = &block_pcd_5x5;
      break;
    case 1286:
      v7 = &block_pcd_6x5;
      break;
    case 1287:
    case 1289:
      goto LABEL_25;
    case 1288:
      v7 = &block_pcd_8x5;
      break;
    case 1290:
      v7 = &block_pcd_10x5;
      break;
    default:
      if (v6 != 1542)
        goto LABEL_25;
      v7 = &block_pcd_6x6;
      break;
  }
LABEL_31:
  memset_pattern16(v4, &memset_pattern_32, 0x2000uLL);
  v9 = 0;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = (unsigned __int16 *)v7 + v9;
    v13 = v12[1];
    if (v12[1])
    {
      v14 = (unsigned __int16 *)v7[v9 + 2];
      v15 = v12[5];
      LOWORD(v8) = v12[3];
      v8 = (float)LODWORD(v8);
      do
      {
        v16 = *v14++;
        v15 += v16 >> 11;
        v5[v16 & 0x7FF] = (float)v15 / v8;
        --v13;
      }
      while (v13);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return v5;
}

uint64_t is_legal_2d_block_size(int a1, int a2)
{
  int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;

  v2 = a2 | (a1 << 8);
  result = 1;
  if (v2 > 2564)
  {
    v4 = (v2 - 2565) > 5 || ((1 << (v2 - 5)) & 0x2B) == 0;
    if (v4 && v2 != 3082 && v2 != 3084)
      return 0;
  }
  else if (v2 > 2052)
  {
    v5 = v2 - 2053;
    if (v5 > 3 || v5 == 2)
      return 0;
  }
  else if ((v2 - 1284) >= 2 && (v2 - 1541) >= 2 && v2 != 1028)
  {
    return 0;
  }
  return result;
}

uint64_t is_legal_3d_block_size(int a1, int a2, int a3)
{
  int v3;
  uint64_t result;
  BOOL v5;
  int v6;

  v3 = (a2 << 8) | (a1 << 16) | a3;
  result = 1;
  if (v3 > 328963)
  {
    v5 = (v3 - 328964) >= 2 && (v3 - 394757) >= 2;
    v6 = 394501;
LABEL_8:
    if (v5 && v3 != v6)
      return 0;
    return result;
  }
  if (v3 > 263170)
  {
    v5 = (v3 - 263171) >= 2;
    v6 = 328708;
    goto LABEL_8;
  }
  if (v3 != 197379 && v3 != 262915)
    return 0;
  return result;
}

unsigned __int8 *symbolic_to_physical(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, double a4, double a5, float a6)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  float v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  signed int v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  char *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int8x16_t v30;
  unsigned int v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  int v36;
  char v37;
  int v38;
  char v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  char *v61;
  int v62;
  uint64_t v63;
  char v64;
  unsigned __int8 v65[32];
  unsigned __int8 v66;
  _BYTE v67[7];
  int8x16_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  if (v8 == 2)
  {
    v11 = 0;
    *(_QWORD *)a3 = -516;
    v12 = a3 + 9;
    do
    {
      *(_WORD *)(v12 - 1) = *(_DWORD *)&a2[v11 + 20];
      v12 += 2;
      v11 += 4;
    }
    while (v11 != 16);
    return result;
  }
  if (v8 == 1)
  {
    v9 = 0;
    *(_QWORD *)a3 = -4;
    v10 = a3 + 9;
    do
    {
      *(_WORD *)(v10 - 1) = *(_DWORD *)&a2[v9 + 20];
      v10 += 2;
      v9 += 4;
    }
    while (v9 != 16);
    return result;
  }
  v13 = result;
  v14 = a2[1];
  v15 = *(unsigned __int16 *)&result[2 * *((unsigned __int16 *)a2 + 2) + 11300848];
  v68 = 0uLL;
  v16 = result[129888 * result[6 * v15 + 11304946] + 594];
  v17 = (unsigned __int8 *)result[6 * v15 + 11304947];
  v18 = -1.0;
  if (v17 <= 0x14)
    v18 = flt_2261A6380[(char)v17];
  v19 = v13[6 * v15 + 11304949];
  v20 = v19 & 1;
  v21 = (_DWORD)v16 << (v19 & 1);
  if (v17 > 0x14)
  {
    v22 = -896;
    if ((v19 & 1) != 0)
    {
LABEL_13:
      if ((_DWORD)v16)
      {
        v23 = a2 + 84;
        v24 = v67;
        do
        {
          LOBYTE(a6) = *(v23 - 32);
          *(float *)&v25 = (float)(v18 * (float)((float)LODWORD(a6) * 0.015625)) + 0.5;
          v26 = &quant_and_xfer_tables[226 * v17 + 32];
          *(v24 - 1) = v26[*(float *)&v25];
          LOBYTE(v25) = *v23;
          a6 = (float)(v18 * (float)((float)v25 * 0.015625)) + 0.5;
          *v24 = v26[a6];
          v24 += 2;
          ++v23;
          --v16;
        }
        while (v16);
      }
      goto LABEL_21;
    }
  }
  else
  {
    v22 = 128
        - (unsigned __int16)(((ise_sizes[(_QWORD)v17] >> 5) | 1)
                           + v21 * (ise_sizes[(_QWORD)v17] & 0x3F)
                           - 1)
        / ((ise_sizes[(_QWORD)v17] >> 5) | 1u);
    if ((v19 & 1) != 0)
      goto LABEL_13;
  }
  if ((_DWORD)v16)
  {
    v27 = a2 + 52;
    v28 = &v66;
    do
    {
      v29 = *v27++;
      *v28++ = quant_and_xfer_tables[226 * v17
                                   + 32
                                   + (int)(float)((float)(v18 * (float)((float)v29 * 0.015625)) + 0.5)];
      --v16;
    }
    while (v16);
  }
LABEL_21:
  encode_ise(v17, v21, &v66, (uint64_t)&v68, 0);
  v30 = vrev64q_s8(v68);
  *(int8x16_t *)a3 = vrbitq_s8(vextq_s8(v30, v30, 8uLL));
  v31 = *((unsigned __int16 *)a2 + 2);
  *(_BYTE *)a3 = v31;
  v32 = (v31 >> 8) & 7;
  v33 = (8 * v14 + 24) & 0x18;
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a3 + 1) & 0xE0 | v33 | BYTE1(v31) & 7;
  v34 = *(_BYTE *)(a3 + 2);
  if (v14 >= 2)
  {
    v35 = *((unsigned __int16 *)a2 + 3);
    *(_BYTE *)(a3 + 1) = v33 | (32 * v35) | v32;
    v36 = (v35 >> 3) & 7;
    v37 = v34 & 0xF8 | (v35 >> 3) & 7;
    *(_BYTE *)(a3 + 2) = v37;
    v38 = (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    *(_BYTE *)(a3 + 2) = v37 & 0x87 | (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    v39 = *(_BYTE *)(a3 + 3);
    if (a2[2])
    {
      v40 = a2[8];
      *(_BYTE *)(a3 + 2) = v38 | v36;
      *(_BYTE *)(a3 + 3) = v39 & 0xE0 | (2 * (v40 & 0xF));
      if (!v20)
        goto LABEL_27;
    }
    else
    {
      v53 = a2 + 8;
      v54 = 4;
      v55 = v14;
      do
      {
        v56 = *v53++;
        v57 = v56 >> 2;
        if ((int)(v56 >> 2) < v54)
          v54 = v57;
        --v55;
      }
      while (v55);
      v58 = 0;
      if (v54 == 3)
        v59 = 2;
      else
        v59 = v54;
      v60 = v59 + 1;
      do
      {
        v60 |= ((a2[v58 + 8] >> 2) - v59) << (v58 + 2);
        ++v58;
      }
      while (v14 != v58);
      v61 = (char *)(a2 + 8);
      v62 = v14 + 2;
      v63 = v14;
      do
      {
        v64 = *v61++;
        v60 |= (v64 & 3) << v62;
        v62 += 2;
        --v63;
      }
      while (v63);
      v22 -= 3 * v14 - 4;
      *(_BYTE *)(a3 + 2) = v36 | ((_BYTE)v60 << 7) | v38;
      *(_BYTE *)(a3 + 3) = v39 & 0xE0 | (v60 >> 1) & 0x1F;
      *(_WORD *)(a3 + (v22 >> 3)) = *(_WORD *)(a3 + (v22 >> 3)) & ~(unsigned __int16)(~(-1 << (3 * v14 - 4)) << (v22 & 7)) | (((v60 >> 6) & ~(-1 << (3 * v14 - 4))) << (v22 & 7));
      if (!v20)
        goto LABEL_27;
    }
    goto LABEL_26;
  }
  v41 = a2[8];
  *(_BYTE *)(a3 + 1) = v33 | (32 * v41) | v32;
  *(_BYTE *)(a3 + 2) = v34 & 0xFE | ((v41 & 8) != 0);
  if (v20)
LABEL_26:
    *(_WORD *)(a3 + ((v22 - 2) >> 3)) = *(_WORD *)(a3 + ((v22 - 2) >> 3)) & ~(unsigned __int16)(3 << ((v22 - 2) & 7)) | ((a2[3] & 3) << ((v22 - 2) & 7));
LABEL_27:
  v42 = (unsigned __int8 *)*((int *)a2 + 3);
  v43 = a2[1];
  if (a2[1])
  {
    v44 = 0;
    v45 = 0;
    v46 = a2 + 20;
    do
    {
      v47 = (((unint64_t)a2[v44 + 8] >> 1) & 0x7E) + 2;
      v48 = &v65[v45];
      v49 = v46;
      v50 = v47;
      do
      {
        v51 = *v49++;
        *v48++ = color_uquant_to_scrambled_pquant_tables[256 * (_QWORD)v42 - 1024 + v51];
        --v50;
      }
      while (v50);
      v45 += v47;
      ++v44;
      v46 += 8;
    }
    while (v44 != v43);
  }
  else
  {
    v45 = 0;
  }
  if ((_DWORD)v43 == 1)
    v52 = 17;
  else
    v52 = 29;
  return encode_ise(v42, v45, v65, a3, v52);
}

int32x4_t rgba_delta_unpack(int32x4_t *a1, int32x4_t *a2, uint32x4_t a3, int8x16_t a4)
{
  int32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t result;

  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5.i64[0] = 0x8000000080;
  v5.i64[1] = 0x8000000080;
  v6 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(a3, (uint32x4_t)v4), vandq_s8(a4, v5));
  v7 = (int32x4_t)vshlq_u32((uint32x4_t)a4, (uint32x4_t)v4);
  v5.i64[0] = 0x3F0000003FLL;
  v5.i64[1] = 0x3F0000003FLL;
  v8.i64[0] = 0x2000000020;
  v8.i64[1] = 0x2000000020;
  v9 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v7, v8) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v7, v5));
  v5.i32[0] = vaddq_s32(vaddq_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1)), vdupq_laneq_s32(v9, 2)).u32[0];
  v10 = vaddq_s32(v9, v6);
  if (v5.i32[0] < 0)
  {
    v11.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v6, 2), v6), v4).u64[0];
    v11.i64[1] = v6.i64[1];
    v6.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v10, 2), v10), v4).u64[0];
    v6.i64[1] = v10.i64[1];
    v10 = v11;
  }
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  *a1 = vminq_s32(vmaxq_s32(v6, (int32x4_t)0), v12);
  result = vminq_s32(vmaxq_s32(v10, (int32x4_t)0), v12);
  *a2 = result;
  return result;
}

void unpack_color_endpoints(int a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, _BYTE *a5, uint64_t a6, __n128 *a7, __n128 a8, double a9, int32x4_t a10, int32x4_t a11)
{
  unsigned int v17;
  int v18;
  unsigned __int8 v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  __n128 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x2_t v39;
  unint64_t v40;
  uint32x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint32x4_t v94;
  uint32x4_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int32x4_t v105;
  int32x4_t v106;
  unsigned __int32 v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  uint32x4_t v114;
  int8x8_t v115;
  uint32x4_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;

  *a4 = 0;
  *a5 = 0;
  switch(a2)
  {
    case 0:
      v17 = *a3;
      v18 = a3[1];
      goto LABEL_5;
    case 1:
      v19 = a3[1];
      v17 = v19 & 0xC0 | (*a3 >> 2);
      v18 = v17 + (v19 & 0x3F);
      if (v18 >= 255)
        v18 = 255;
LABEL_5:
      LODWORD(v20) = v17;
      DWORD1(v20) = v17;
      *((_QWORD *)&v20 + 1) = v17 | 0xFF00000000;
      a8.n128_u32[0] = v18;
      *(_OWORD *)a6 = v20;
      a8.n128_u32[1] = v18;
      a8.n128_u64[1] = v18 | 0xFF00000000;
      *a7 = a8;
      if (!a1)
        goto LABEL_107;
      goto LABEL_114;
    case 2:
      *a4 = 1;
      v21 = *a3;
      v22 = a3[1];
      v23 = 16 * v21 - 8;
      v24 = v22 >= v21;
      if (v22 >= v21)
        v25 = v21 << 8;
      else
        v25 = (v22 << 8) | 0x80;
      if (v24)
        v26 = 16 * v22;
      else
        v26 = v23;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = v25;
      a8.n128_u32[1] = v25;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = v25;
      v28 = 16 * v26;
      goto LABEL_29;
    case 3:
      *a4 = 1;
      v29 = *a3;
      v30 = a3[1];
      if ((v29 & 0x80u) != 0)
        v31 = 3584;
      else
        v31 = 3840;
      if ((v29 & 0x80u) == 0)
        v32 = 1;
      else
        v32 = 2;
      if ((v29 & 0x80u) != 0)
        v33 = 508;
      else
        v33 = 254;
      if ((v29 & 0x80u) != 0)
        v34 = 124;
      else
        v34 = 30;
      v35 = v31 & (16 * v30) | (v29 << v32) & v33;
      v36 = v35 + ((v30 << v32) & v34);
      if (v36 >= 4095)
        v36 = 4095;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * v35;
      a8.n128_u32[1] = 16 * v35;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = 16 * v35;
      v28 = 16 * v36;
LABEL_29:
      v27.n128_u32[0] = v28;
      *(__n128 *)a6 = a8;
      v27.n128_u32[1] = v28;
      goto LABEL_87;
    case 4:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[2];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      goto LABEL_32;
    case 5:
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v39 = vadd_s32((int32x2_t)a8.n128_u64[0], (int32x2_t)a8.n128_u64[0]);
      v40 = *(_QWORD *)&vtst_s32((int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40), (int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40)) & 0xFFFFFF80FFFFFF80;
      a8.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)v40, (int8x8_t)(a8.n128_u64[0] & 0xFFFFFF7EFFFFFF7ELL));
      LOBYTE(v40) = *a3;
      BYTE4(v40) = a3[2];
      v41 = (uint32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v39 & 0xFFFFFF01FFFFFF01), vand_s8((int8x8_t)v40, (int8x8_t)0xFF000000FFLL));
      a8.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)vsra_n_u32((uint32x2_t)vshr_n_s32((int32x2_t)a8.n128_u64[0], 1uLL), v41, 1uLL), 0), (int32x2_t)0xFF000000FFLL);
      v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      a8.n128_u64[0] = (unint64_t)vshr_n_u32(v41, 1uLL);
      v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
LABEL_32:
      *(int32x4_t *)a6 = v37;
      goto LABEL_106;
    case 6:
      v42.i32[0] = *a3;
      v42.i32[1] = a3[1];
      v42.i64[1] = a3[2];
      v43 = vmulq_s32(vdupq_n_s32(a3[3]), v42);
      v42.i32[3] = 255;
      *a7 = (__n128)v42;
      v42.i64[0] = 0x700000007;
      v42.i64[1] = 0x700000007;
      a8 = (__n128)vshlq_s32(v43, v42);
      a8.n128_u32[3] = 255;
      *(__n128 *)a6 = a8;
      if (!a1)
        goto LABEL_107;
      goto LABEL_114;
    case 7:
      *a4 = 1;
      v44 = *a3;
      v45 = a3[1];
      v46 = a3[2];
      v47 = a3[3];
      v48 = (v46 >> 4) & 8 | (v45 >> 5) & 4;
      v49 = v44 >> 6 == 3;
      if (v44 >> 6 == 3)
        v50 = 0;
      else
        v50 = v44 >> 6;
      if (v44 >> 6 == 3)
        v51 = 5;
      else
        v51 = 4;
      v80 = v48 == 12;
      v52 = v48 == 12;
      v53 = v48 >> 2;
      if (v80)
        v53 = v50;
      else
        v51 = v44 >> 6;
      v54 = (v45 >> 6) & 1;
      v55 = (v45 >> 5) & 1;
      v56 = (v46 >> 6) & 1;
      v57 = (v46 >> 5) & 1;
      v58 = (v47 >> 6) & 1;
      v59 = (v47 >> 5) & 1;
      v60 = 1 << v51;
      v61 = v54 << 6;
      if (((1 << v51) & 0x30) == 0)
        v61 = 0;
      v62 = v61 & 0xFFFFFFE0 | v45 & 0x1F;
      v63 = 32 * v55;
      v64 = v56 << 6;
      if ((v60 & 0x30) == 0)
        v64 = 0;
      if ((v60 & 0x3A) == 0)
        v63 = 0;
      v65 = v62 | v63;
      v66 = v64 & 0xFFFFFFE0 | v46 & 0x1F;
      v67 = 32 * v57;
      if ((v60 & 0x3A) == 0)
        v67 = 0;
      v68 = v66 | v67;
      v69 = (16 * v60) & (v57 << 6);
      v70 = (v47 >> 1) & 0x40;
      if ((v60 & 0x3B) == 0)
        v70 = 0;
      v71 = v56 << 7;
      if (v51 > 3)
        v71 = 0;
      v72 = v55 << 8;
      v73 = v54 << 8;
      if ((v60 & 0xA) == 0)
        v73 = 0;
      if ((v60 & 5) == 0)
        v72 = 0;
      v74 = v54 << 9;
      if ((v60 & 5) == 0)
        v74 = 0;
      v75 = v57 << 10;
      if (v51)
        v75 = 0;
      v76 = hdr_rgbo_unpack(unsigned char const*,vint4 &,vint4 &)::shamts[v51];
      v77 = (v71 & 0xFFFFFFC0 | v44 & 0x3F | v75 | v70 | v69 | (8 * v60) & (v58 << 7) | v72 | v73 | v74 | (v60 << 8) & (v59 << 9) | (v60 << 9) & (v58 << 10)) << v76;
      v78 = v65 << v76;
      v79 = v68 << v76;
      v80 = !v52 || !v49;
      if (v52 && v49)
        v81 = v78;
      else
        v81 = v77 - v78;
      if (v80)
        v82 = v77 - v79;
      else
        v82 = v79;
      if (v53 == 1)
        v83 = v81;
      else
        v83 = v77;
      if (v53 == 1)
        v84 = v77;
      else
        v84 = v81;
      v85 = v53 == 2;
      if (v53 == 2)
        v86 = v82;
      else
        v86 = v83;
      if (v85)
        v82 = v77;
      else
        v81 = v84;
      v87 = 32 * v59;
      if ((v60 & 0x3D) == 0)
        v87 = 0;
      v88 = v87 & 0xFFFFFFE0 | v47 & 0x1F;
      v89 = v58 << 6;
      if ((v60 & 0x2D) == 0)
        v89 = 0;
      v90 = (v88 | v89 | v47 & (32 * v60) & 0x80) << v76;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * ((v86 - v90) & ~((v86 - v90) >> 31));
      a8.n128_u32[1] = 16 * ((v81 - v90) & ~((v81 - v90) >> 31));
      a8.n128_u32[2] = 16 * ((v82 - v90) & ~((v82 - v90) >> 31));
      v27.n128_u32[3] = 30720;
      *(__n128 *)a6 = a8;
      v27.n128_u32[0] = 16 * (v86 & ~(v86 >> 31));
      v28 = 16 * (v82 & ~(v82 >> 31));
      v27.n128_u32[1] = 16 * (v81 & ~(v81 >> 31));
LABEL_87:
      v27.n128_u32[2] = v28;
      *a7 = v27;
      goto LABEL_99;
    case 8:
      a8.n128_u8[12] = 0;
      a8.n128_u8[13] = 0;
      a8.n128_u8[14] = 0;
      a8.n128_u8[15] = 0;
      a8.n128_u32[0] = *a3;
      a8.n128_u32[1] = a3[2];
      a8.n128_u32[2] = a3[4];
      v91.i32[0] = a3[1];
      v91.i32[1] = a3[3];
      v91.i64[1] = a3[5];
      if (a8.n128_u32[1] + a8.n128_u32[0] + a8.n128_u32[2] > v91.i32[1] + v91.i32[0] + v91.i32[2])
      {
        v92.i64[0] = -1;
        v92.i64[1] = -1;
        v93.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32((int32x4_t)a8, 2), (int32x4_t)a8), v92).u64[0];
        v93.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v91, 2), v91), v92).u64[0];
        a8.n128_u64[1] = a3[5];
        v91 = v93;
      }
      *(__n128 *)a6 = a8;
      *a7 = (__n128)v91;
      goto LABEL_94;
    case 9:
      v94.i32[0] = *a3;
      v94.i32[1] = a3[2];
      v94.i64[1] = a3[4];
      v95.i32[0] = a3[1];
      v95.i32[1] = a3[3];
      v95.i64[1] = a3[5];
      v96.i64[0] = -1;
      v96.i64[1] = -1;
      v97 = (int8x16_t)vshlq_u32(v95, (uint32x4_t)v96);
      v95.i64[0] &= 0xFFFFFF80FFFFFF80;
      v95.i64[1] = v95.i8[8] & 0x80;
      v98 = (int32x4_t)vorrq_s8((int8x16_t)v95, (int8x16_t)vshlq_u32(v94, (uint32x4_t)v96));
      v95.i64[0] = 0x3F0000003FLL;
      v95.i64[1] = 0x3F0000003FLL;
      v99.i64[0] = 0x2000000020;
      v99.i64[1] = 0x2000000020;
      v100 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v97, v99) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v97, (int8x16_t)v95));
      v97.i32[0] = vaddq_s32(vaddq_s32(v100, vdupq_lane_s32(*(int32x2_t *)v100.i8, 1)), vdupq_laneq_s32(v100, 2)).u32[0];
      v101 = vaddq_s32(v100, v98);
      if (v97.i32[0] < 0)
      {
        v102.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v98, 2), v98), v96).u64[0];
        v102.i64[1] = v98.i64[1];
        v98.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v101, 2), v101), v96).u64[0];
        v98.i64[1] = v101.i64[1];
        v101 = v102;
      }
      v103.i64[0] = 0xFF000000FFLL;
      v103.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v98, (int32x4_t)0), v103);
      a8 = (__n128)vminq_s32(vmaxq_s32(v101, (int32x4_t)0), v103);
      *a7 = a8;
LABEL_94:
      *(_DWORD *)(a6 + 12) = 255;
      a7->n128_u32[3] = 255;
      if (!a1)
        goto LABEL_107;
      goto LABEL_114;
    case 10:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[1];
      a8.n128_u16[1] = a8.n128_u16[2];
      a8.n128_u8[4] = a3[2];
      a8.n128_u8[6] = a3[4];
      v104.i64[0] = 0xFF000000FFLL;
      v104.i64[1] = 0xFF000000FFLL;
      a8 = (__n128)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)a8.n128_u64[0]), v104);
      v105.i64[0] = 0x700000007;
      v105.i64[1] = 0x700000007;
      v106 = vshlq_s32(vmulq_s32(vdupq_n_s32(a3[3]), (int32x4_t)a8), v105);
      v106.i32[3] = a8.n128_i32[3];
      a8.n128_u32[3] = a3[5];
      *a7 = a8;
      *(int32x4_t *)a6 = v106;
      if (!a1)
        goto LABEL_107;
      goto LABEL_114;
    case 11:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
LABEL_99:
      if (a1 == 3)
      {
        *(_DWORD *)(a6 + 12) = 30720;
        a7->n128_u32[3] = 30720;
        v107 = 1;
        *a5 = 1;
        goto LABEL_119;
      }
      *(_DWORD *)(a6 + 12) = 255;
      a7->n128_u32[3] = 255;
      *a5 = 0;
      if (a1)
      {
LABEL_114:
        if (a1 == 1)
        {
          if (*a4 | *a5)
          {
            *(_OWORD *)a6 = xmmword_2261A63E0;
            *a7 = (__n128)xmmword_2261A63E0;
            *a4 = 0;
            *a5 = 0;
          }
          v126 = vdupq_n_s32(0x101u);
          *(int32x4_t *)a6 = vmulq_s32(*(int32x4_t *)a6, v126);
          v127 = *(int32x4_t *)a7;
          goto LABEL_120;
        }
        v107 = *a5;
LABEL_119:
        a8.n128_u8[0] = *a4;
        a8.n128_u32[1] = v107;
        a8.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32(vneg_s32((int32x2_t)a8.n128_u64[0]), 0x18uLL), 0x18uLL);
        v128 = (int8x16_t)vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
        v128.i32[2] = a8.n128_u32[0];
        v129.i64[0] = 0x100000001;
        v129.i64[1] = 0x100000001;
        v127 = (int32x4_t)vbslq_s8(v128, v129, (int8x16_t)vdupq_n_s32(0x101u));
        *(int32x4_t *)a6 = vmulq_s32(v127, *(int32x4_t *)a6);
        v126 = *(int32x4_t *)a7;
LABEL_120:
        v113 = vmulq_s32(v127, v126);
        goto LABEL_121;
      }
LABEL_107:
      if (*a4 | *a5)
      {
        *(_OWORD *)a6 = xmmword_2261A63E0;
        *a7 = (__n128)xmmword_2261A63E0;
        *a4 = 0;
        *a5 = 0;
      }
      v110 = vshlq_n_s32(*(int32x4_t *)a6, 8uLL);
      v110.i64[0] |= 0x8000000080uLL;
      v110.i32[2] |= 0x80u;
      v111 = vdupq_n_s32(0x101u);
      v110.i32[3] = vmulq_s32(*(int32x4_t *)a6, v111).i32[3];
      *(int32x4_t *)a6 = v110;
      v112 = vshlq_n_s32(*(int32x4_t *)a7, 8uLL);
      v113.i64[0] = v112.i64[0] | 0x8000000080;
      v113.i32[2] = v112.i32[2] | 0x80;
      v113.i32[3] = vmulq_s32(*(int32x4_t *)a7, v111).i32[3];
LABEL_121:
      *a7 = (__n128)v113;
      return;
    case 12:
      a10.i32[0] = *a3;
      a10.i32[1] = a3[2];
      a10.i32[2] = a3[4];
      a8 = (__n128)a10;
      a8.n128_u32[3] = a3[6];
      a11.i32[0] = a3[1];
      a11.i32[1] = a3[3];
      a11.i32[2] = a3[5];
      v38 = a11;
      v38.i32[3] = a3[7];
      if (a10.i32[1] + a10.i32[0] + a10.i32[2] > (a11.i32[1] + a11.i32[0] + a11.i32[2]))
      {
        v108.i64[0] = -1;
        v108.i64[1] = -1;
        v109.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a10, 2), (int32x4_t)a8), v108).u64[0];
        v109.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a11, 2), v38), v108).u64[0];
        a8.n128_u64[1] = v38.u64[1];
        v38 = v109;
      }
      *(__n128 *)a6 = a8;
LABEL_106:
      *a7 = (__n128)v38;
      if (!a1)
        goto LABEL_107;
      goto LABEL_114;
    case 13:
      a8.n128_u8[0] = a3[4];
      a8.n128_u8[4] = a3[6];
      v114.i32[0] = *a3;
      v114.i32[1] = a3[2];
      v115 = vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v114.u64[1] = (unint64_t)v115;
      v115.i8[0] = a3[5];
      v115.i8[4] = a3[7];
      v116.i32[0] = a3[1];
      v116.i32[1] = a3[3];
      v116.u64[1] = (unint64_t)vand_s8(v115, (int8x8_t)0xFF000000FFLL);
      v117.i64[0] = -1;
      v117.i64[1] = -1;
      v118 = (int8x16_t)vshlq_u32(v114, (uint32x4_t)v117);
      v119 = (int8x16_t)vshlq_u32(v116, (uint32x4_t)v117);
      v120 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v116 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v118);
      v116.i64[0] = 0x3F0000003FLL;
      v116.i64[1] = 0x3F0000003FLL;
      v121.i64[0] = 0x2000000020;
      v121.i64[1] = 0x2000000020;
      v122 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v119, v121) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v119, (int8x16_t)v116));
      v116.i32[0] = vaddq_s32(vaddq_s32(v122, vdupq_lane_s32(*(int32x2_t *)v122.i8, 1)), vdupq_laneq_s32(v122, 2)).u32[0];
      v123 = vaddq_s32(v122, v120);
      if (v116.i32[0] < 0)
      {
        v124.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v120, 2), v120), v117).u64[0];
        v124.i64[1] = v120.i64[1];
        v120.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v123, 2), v123), v117).u64[0];
        v120.i64[1] = v123.i64[1];
        v123 = v124;
      }
      v125.i64[0] = 0xFF000000FFLL;
      v125.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v120, (int32x4_t)0), v125);
      a8 = (__n128)vminq_s32(vmaxq_s32(v123, (int32x4_t)0), v125);
      *a7 = a8;
      goto LABEL_113;
    case 14:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      v130 = a3[6];
      v131 = a3[7];
      goto LABEL_132;
    case 15:
      *a4 = 1;
      *a5 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      v132 = a3[6];
      v133 = a3[7];
      v134 = (v133 >> 6) & 2 | (v132 >> 7);
      v135 = v132 & 0x7F;
      v136 = v133 & 0x7F;
      v137 = (v136 << (v134 + 1)) & 0x780 | v135;
      v138 = v137 << (4 - v134);
      v139 = ((0x3Fu >> v134) & v133 ^ (0x20u >> v134)) - (0x20u >> v134) + v137;
      v140 = v139 << (4 - v134);
      if (v140 >= 4095)
        v140 = 4095;
      if (v139 >= 0)
        v141 = v140;
      else
        v141 = 0;
      v142 = 32 * v135;
      v143 = 32 * v136;
      if (v134 == 3)
        v141 = v143;
      else
        v142 = v138;
      v130 = 16 * v142;
      v131 = 16 * v141;
LABEL_132:
      *(_DWORD *)(a6 + 12) = v130;
      a7->n128_u32[3] = v131;
      if (!a1)
        goto LABEL_107;
      goto LABEL_114;
    default:
LABEL_113:
      if (a1)
        goto LABEL_114;
      goto LABEL_107;
  }
}

__n128 hdr_rgb_unpack(unsigned __int8 *a1, _OWORD *a2, __n128 *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  int v71;
  __int128 v72;
  __n128 result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = (v8 >> 6) & 2 | (v7 >> 7);
  if (v9 == 3)
  {
    HIDWORD(v10) = 30720;
    LODWORD(v10) = v3 << 8;
    DWORD1(v10) = v5 << 8;
    DWORD2(v10) = (v7 & 0x7F) << 9;
    v11 = v4 << 8;
    *a2 = v10;
    v12 = v6 << 8;
    v13 = (v8 & 0x7F) << 9;
  }
  else
  {
    v14 = (v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4;
    v15 = v7 & 0x7F;
    v16 = v8 & 0x7F;
    v17 = (v5 >> 6) & 1;
    v18 = (v6 >> 6) & 1;
    v19 = (v7 >> 6) & 1;
    v20 = (v8 >> 6) & 1;
    v21 = (v7 >> 5) & 1;
    v22 = (v8 >> 5) & 1;
    v23 = 1 << ((v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4);
    v24 = v17 << 9;
    if ((v23 & 0xA4) == 0)
      v24 = 0;
    v25 = v21 << 9;
    if ((v23 & 0x50) == 0)
      v25 = 0;
    v26 = v22 << 10;
    if ((v23 & 0x50) == 0)
      v26 = 0;
    v27 = v18 << 10;
    if ((v23 & 0xA0) == 0)
      v27 = 0;
    v28 = v19 << 11;
    if (v14 < 6)
      v28 = 0;
    v29 = v28 & 0xFFFFFEFF | (((v4 >> 6) & 1) << 8) | v24 | (v23 << 6) & (v19 << 9) | v25 | v26 | v27 | v3;
    v30 = (16 * v23) & (v18 << 6);
    v31 = v18 << 6;
    v32 = v30 & 0xFFFFFFC0 | v4 & 0x3F;
    v33 = v20 << 6;
    if ((v23 & 0xE8) != 0)
      v34 = v20 << 6;
    else
      v34 = 0;
    v35 = v32 | v34 | (4 * v23) & (v19 << 7);
    v36 = v17 << 6;
    if ((v23 & 0x5B) == 0)
      v36 = 0;
    v37 = v36 & 0xFFFFFFC0 | v5 & 0x3F;
    if ((v23 & 0x5B) != 0)
      v38 = v31;
    else
      v38 = 0;
    v39 = v38 & 0xFFFFFFC0 | v6 & 0x3F;
    v40 = v20 << 7;
    if ((v23 & 0x12) != 0)
      v41 = v19 << 7;
    else
      v41 = 0;
    v42 = v37 | v41;
    if ((v23 & 0x12) == 0)
      v40 = 0;
    v43 = v39 | v40;
    v44 = 32 * v21;
    if ((v23 & 0xAF) == 0)
      v44 = 0;
    v45 = v44 | v15;
    if ((v23 & 0xAF) != 0)
      v46 = 32 * v22;
    else
      v46 = 0;
    v47 = v46 | v16;
    v48 = v19 << 6;
    if ((v23 & 5) == 0)
      v48 = 0;
    v49 = v45 | v48;
    if ((v23 & 5) == 0)
      v33 = 0;
    v50 = -hdr_rgb_unpack(unsigned char const*,vint4 &,vint4 &)::dbits_tab[v14];
    v51 = v49 << v50 >> v50;
    v52 = (v47 | v33) << v50 >> v50;
    v53 = (v14 >> 1) ^ 3;
    v54 = v29 << v53;
    v55 = (v29 - v42) << v53;
    v56 = v29 - v43;
    v57 = v56 << v53;
    v58 = (v29 - v42 - (v35 + v51)) << v53;
    v59 = (v56 - (v35 + v52)) << v53;
    v60 = ((v29 - v35) << v53) & ~((int)((v29 - v35) << v53) >> 31);
    if (v60 >= 4095)
      v60 = 4095;
    v61 = v58 & ~(v58 >> 31);
    if (v61 >= 4095)
      v61 = 4095;
    v62 = v59 & ~(v59 >> 31);
    if (v62 >= 4095)
      v62 = 4095;
    if (v54 >= 0xFFF)
      v54 = 4095;
    v63 = v55 & ~(v55 >> 31);
    if (v63 >= 4095)
      v63 = 4095;
    if ((v57 & ~(v57 >> 31)) >= 4095)
      v64 = 4095;
    else
      v64 = v57 & ~(v57 >> 31);
    if (v9 == 1)
      v65 = v63;
    else
      v65 = v54;
    if (v9 == 1)
      v66 = v54;
    else
      v66 = v63;
    if (v9 == 1)
      v67 = v61;
    else
      v67 = v60;
    if (v9 == 1)
      v68 = v60;
    else
      v68 = v61;
    v69 = v9 == 2;
    if (v9 == 2)
      v70 = v64;
    else
      v70 = v65;
    if (v69)
      v64 = v54;
    else
      v63 = v66;
    if (v69)
      v71 = v62;
    else
      v71 = v67;
    if (v69)
      v62 = v60;
    else
      v61 = v68;
    HIDWORD(v72) = 30720;
    LODWORD(v72) = 16 * v71;
    DWORD1(v72) = 16 * v61;
    v11 = 16 * v70;
    DWORD2(v72) = 16 * v62;
    *a2 = v72;
    v12 = 16 * v63;
    v13 = 16 * v64;
  }
  result.n128_u64[0] = __PAIR64__(v12, v11);
  result.n128_u64[1] = v13 | 0x780000000000;
  *a3 = result;
  return result;
}

uint64_t compute_ideal_endpoint_formats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  _BYTE *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  __int128 v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  uint32x4_t *v38;
  int8x16_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  int8x16_t v42;
  int32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int32x2_t v47;
  float32x4_t v48;
  unint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint16x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  __int32 *v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  BOOL v112;
  float32x4_t v113;
  float32x4_t *v114;
  float v115;
  BOOL v116;
  char v117;
  int v118;
  uint64_t v119;
  int8x8_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  char v125;
  int8x16_t v126;
  float *v127;
  _BYTE *v128;
  float *v129;
  _BYTE *v130;
  float v131;
  float32x4_t v132;
  float v133;
  _OWORD *v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float v145;
  float v146;
  float v147;
  float32x4_t v148;
  uint64_t v149;
  float *v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  _BYTE *v158;
  float *v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  char v167;
  float v168;
  float v169;
  char v170;
  float32x4_t v171;
  float v172;
  float v173;
  _BOOL4 v174;
  _BOOL4 v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  float *v179;
  int v180;
  int v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  _BOOL4 v185;
  BOOL v186;
  _BOOL4 v187;
  BOOL v188;
  BOOL v189;
  _BOOL4 v190;
  _BOOL4 v191;
  _BOOL4 v192;
  BOOL v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int v197;
  _BOOL4 v198;
  uint64_t v199;
  uint64_t v200;
  _BOOL4 v201;
  _BOOL4 v202;
  uint64_t v203;
  _BOOL4 v204;
  _BOOL4 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float v210;
  float v211;
  float v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int8x16_t v216;
  unint64_t v217;
  char *v218;
  float v219;
  BOOL v220;
  float *v221;
  float v222;
  float v223;
  float v224;
  float *v225;
  float v226;
  float v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int32x4_t v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  unsigned int v244;
  float v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  char *v249;
  float v250;
  unsigned __int8 v251;
  int v252;
  float *v253;
  int v254;
  _BYTE *v255;
  float v256;
  uint64_t i;
  uint64_t *v258;
  float *v259;
  int *v260;
  _BYTE *v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE *v264;
  int *v265;
  uint64_t v266;
  _BYTE *v267;
  int *v268;
  int v269;
  int v270;
  uint64_t v271;
  _BYTE *v272;
  int v273;
  int v274;
  float v275;
  uint64_t v276;
  float v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  float v283;
  unsigned __int8 v284;
  int v285;
  _DWORD *v286;
  char *v287;
  int v288;
  char *v289;
  float v290;
  uint64_t j;
  int *v292;
  float *v293;
  _BYTE *v294;
  int *v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  _BYTE *v299;
  uint64_t v300;
  int v301;
  _BYTE *v302;
  unsigned int v303;
  float v304;
  uint64_t v305;
  float v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  _WORD *v310;
  char *v311;
  float v312;
  unsigned __int8 v313;
  int v314;
  _DWORD *v315;
  char *v316;
  int v317;
  float v318;
  uint64_t k;
  int *v320;
  float *v321;
  _BYTE *v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  _BYTE *v326;
  uint64_t v327;
  _BYTE *v328;
  _BYTE *v329;
  int v330;
  int v331;
  uint64_t v332;
  _BYTE *v333;
  _BYTE *v334;
  int v335;
  int v336;
  uint64_t v337;
  _BYTE *v338;
  int v339;
  int v340;
  float v341;
  uint64_t v342;
  float v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  char *v347;
  float v348;
  unsigned __int8 v349;
  int v350;
  _DWORD *v351;
  char *v352;
  int v353;
  float v354;
  int8x16_t v355;
  uint64_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int8x16_t v359;
  float32x4_t v360;
  unsigned int v361;
  float32x4_t v362;
  int8x16_t v363;
  int8x16_t v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  _BYTE *v369;
  uint64_t v370;
  char v371;
  float32x4_t v373;
  float32x4_t v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  unsigned int v379;
  float32x4_t v380;
  float v381;
  __int128 v382;
  int8x16_t v383;
  unsigned int v384;
  __int8 v385;
  unsigned int v386;
  float32x4_t v387;
  float32x4_t v388;
  uint64_t v389;
  _BYTE *v390;
  uint64_t v391;
  unsigned int v392;
  int8x16_t v393;
  _BYTE *v394;
  float32x4_t v395;
  float32x4_t v396;
  float *v397;
  uint64_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float *v401;
  _BYTE *v402;
  _OWORD v403[5];
  _BYTE v404[7];
  _BYTE v405[6];
  _BYTE v406[5];
  _DWORD v407[28];
  int v408;
  int v409;
  _BYTE v410[903];
  _BYTE v411[5];
  _BYTE v412[5];
  int v413;
  uint64_t v414;
  int v415;
  _OWORD v416[4];
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD v421[46];

  v13 = (_BYTE *)MEMORY[0x24BDAC7A8](a1);
  v379 = v14;
  v377 = v16;
  v378 = v15;
  v376 = v17;
  v375 = v18;
  v391 = v19;
  v21 = (float32x4_t *)v20;
  v421[44] = *MEMORY[0x24BDAC8D0];
  v22 = v13 + 224;
  v23 = *(unsigned __int16 *)v13;
  v24 = *(double *)(v20 + 3554);
  LODWORD(v25) = LOBYTE(v24);
  HIDWORD(v25) = BYTE1(v24);
  v386 = LOBYTE(v24);
  v384 = *(unsigned __int8 *)(v20 + 3770);
  v390 = v13;
  compute_avgs_and_dirs_3_comp_rgb(v13, v20, (uint64_t)v416, v24, v25, v26, v27, v28);
  v29 = v23;
  v30 = 0;
  v31 = v21 + 162;
  v32 = v21 + 54;
  v33 = v21 + 108;
  v34 = xmmword_2261A28D0;
  v35 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
  v36.i64[0] = 0x400000004;
  v36.i64[1] = 0x400000004;
  v37 = 0uLL;
  v38 = (uint32x4_t *)&unk_255825000;
  v39.i64[0] = 0x100000001;
  v39.i64[1] = 0x100000001;
  v389 = v29;
  do
  {
    v40 = (float32x4_t *)&v416[2 * v30];
    v41 = v40[1];
    v42 = (int8x16_t)vmulq_f32(v41, v41);
    *(float32x2_t *)v42.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), *(float32x2_t *)v42.i8);
    v43 = (int32x2_t)vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8);
    v44 = (float32x4_t)v34;
    if (*(float *)v43.i32 != 0.0)
      v44 = vdivq_f32(v41, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v43, 0)));
    v45 = *v40;
    v46 = (int8x16_t)vmulq_f32(v45, v45);
    *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v46.i8);
    v47 = (int32x2_t)vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8);
    v48 = (float32x4_t)v34;
    if (*(float *)v47.i32 != 0.0)
      v48 = vdivq_f32(v45, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v47, 0)));
    v49 = 0;
    v50 = vmulq_f32(v45, v44);
    v51 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))), 0);
    v51.i32[3] = 0;
    v52 = (int32x4_t)vsubq_f32(v45, vmulq_f32(v44, v51));
    v53 = vmulq_f32(v45, v35);
    v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))), 0);
    v54.i32[3] = 0;
    v55 = (int32x4_t)vaddq_f32(v45, vmulq_f32(v54, (float32x4_t)xmmword_2261A6450));
    v56 = v21[221];
    v57 = v390[v30 + 4];
    v45.i32[0] = 1190133760;
    if (!v21[235].i8[10])
      v45.f32[0] = 65535.0;
    v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0);
    v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
    v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 1);
    v61 = (float32x4_t)vdupq_laneq_s32(v52, 2);
    v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 0);
    v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1);
    v64 = (float32x4_t)vdupq_laneq_s32(v55, 2);
    v65 = vdupq_n_s32(v57);
    v66 = 0uLL;
    v67 = (int32x4_t)xmmword_2260FF480;
    v68 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    do
    {
      v395 = (float32x4_t)v68;
      v399 = (float32x4_t)v69;
      v69.i32[0] = *(_DWORD *)&v22[v49];
      v72 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v69.i8).u64[0];
      v73 = (int8x16_t)vcgtq_s32(v65, v67);
      v74 = (float32x4_t)vmovl_u16(v72);
      v75.i64[0] = v74.u32[2];
      v75.i64[1] = v74.u32[3];
      v76 = v75;
      v75.i64[1] = v74.u32[1];
      v77 = v76.i64[1];
      v78 = v74.u32[0];
      v79 = v76.i64[0];
      v80.i32[0] = v31->i32[v74.u32[0]];
      v80.i32[1] = v31->i32[v74.u32[1]];
      v80.i32[2] = v31->i32[v76.i64[0]];
      v74.i32[0] = v21->i32[v74.u32[0]];
      v74.i32[1] = v21->i32[v74.u32[1]];
      v74.i32[2] = v21->i32[v76.i64[0]];
      v76.i32[0] = v32->i32[v78];
      v80.i32[3] = v31->i32[v76.i64[1]];
      v76.i32[1] = v32->i32[v75.i64[1]];
      v81 = &v32->i32[v76.i64[1]];
      v74.i32[3] = v21->i32[v76.i64[1]];
      v76.i32[2] = v32->i32[v79];
      v76.i32[3] = *v81;
      v82 = vsubq_f32(v80, v58);
      v80.i32[0] = v33->i32[v78];
      v80.i32[1] = v33->i32[v75.i64[1]];
      v80.i32[2] = v33->i32[v79];
      v80.i32[3] = v33->i32[v77];
      v83 = vaddq_f32(vaddq_f32(vmulq_n_f32(v74, v44.f32[0]), vmulq_lane_f32(v76, *(float32x2_t *)v44.f32, 1)), vmulq_laneq_f32(v80, v44, 2));
      v393 = (int8x16_t)vaddq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v82, v82), v73));
      v84 = vsubq_f32(vaddq_f32(v59, vmulq_n_f32(v83, v44.f32[0])), v74);
      v85 = vsubq_f32(vaddq_f32(v60, vmulq_lane_f32(v83, *(float32x2_t *)v44.f32, 1)), v76);
      v86 = vsubq_f32(vaddq_f32(v61, vmulq_laneq_f32(v83, v44, 2)), v80);
      v87 = vaddq_f32(vaddq_f32(vmulq_n_f32(v74, v48.f32[0]), vmulq_lane_f32(v76, *(float32x2_t *)v48.f32, 1)), vmulq_laneq_f32(v80, v48, 2));
      v88 = vsubq_f32(vmulq_n_f32(v87, v48.f32[0]), v74);
      v89 = vsubq_f32(vmulq_lane_f32(v87, *(float32x2_t *)v48.f32, 1), v76);
      v90 = vsubq_f32(vmulq_laneq_f32(v87, v48, 2), v80);
      v91 = vaddq_f32(vmulq_n_f32(vmulq_f32(v84, v84), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v85, v85), *(float32x2_t *)v56.f32, 1));
      v92 = vmulq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v74, v35), vmulq_f32(v76, v35)), vmulq_f32(v80, v35)), v35);
      v93 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v90, v90), v56, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v88, v88), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v89, v89), *(float32x2_t *)v56.f32, 1)));
      v94 = vsubq_f32(vaddq_f32(v62, v92), v74);
      v95 = vsubq_f32(vaddq_f32(v63, v92), v76);
      v96 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v86, v86), v56, 2), v91);
      v67 = vaddq_s32(v67, v36);
      v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(v93, v73));
      v97 = vsubq_f32(vaddq_f32(v64, v92), v80);
      v98 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v97, v97), v56, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v94, v94), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v95, v95), *(float32x2_t *)v56.f32, 1))), v73);
      v99 = vsubq_f32(v92, v74);
      v100 = vsubq_f32(v92, v76);
      v101 = vsubq_f32(v92, v80);
      v66 = (float32x4_t)v393;
      v396 = vaddq_f32(v395, (float32x4_t)vandq_s8(v96, v73));
      v71 = vaddq_f32(v71, v98);
      v68 = (int8x16_t)v396;
      v400 = vaddq_f32(v399, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v101, v101), v56, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v99, v99), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v100, v100), *(float32x2_t *)v56.f32, 1))), v73));
      v69 = (int8x16_t)v400;
      v49 += 4;
    }
    while (v49 < v57);
    v102 = (float32x4_t *)(v391 + 16 * v30);
    v103 = v102[1];
    v104 = v102[5];
    if ((v102 & 1) == 0)
    {
      v380 = v35;
      v382 = v34;
      v374 = v103;
      v373 = v104;
      v104 = v373;
      v103 = v374;
      v68 = (int8x16_t)v396;
      v69 = (int8x16_t)v400;
      v35 = v380;
      v39.i64[0] = 0x100000001;
      v39.i64[1] = 0x100000001;
      v38 = (uint32x4_t *)&unk_255825000;
      v37 = 0uLL;
      v36.i64[0] = 0x400000004;
      v36.i64[1] = 0x400000004;
      v34 = v382;
      v29 = v389;
      if (v118)
      {
        mask(vmask4)::shift = xmmword_2260FF480;
        v104 = v373;
        v103 = v374;
        v68 = (int8x16_t)v396;
        v69 = (int8x16_t)v400;
        v35 = v380;
        v39.i64[0] = 0x100000001;
        v39.i64[1] = 0x100000001;
        v38 = (uint32x4_t *)&unk_255825000;
        v37 = 0uLL;
        v36.i64[0] = 0x400000004;
        v36.i64[1] = 0x400000004;
        v34 = v382;
        v29 = v389;
      }
    }
    v105 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v393, v393, 8uLL), *(float32x2_t *)v393.i8);
    v106 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), *(float32x2_t *)v68.i8);
    v107 = vpadd_f32(v106, v106);
    v108 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
    v109 = (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL);
    *(float32x2_t *)v109.i8 = vadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v71.f32);
    v110 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), *(float32x2_t *)v69.i8);
    v111 = vsubq_f32(v104, v103);
    v112 = (~vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x45F5C199u), vmaxq_f32(v111, vsubq_f32(v37, v111))), v39), v38[202])) & 7) == 0;
    *(float32x2_t *)v113.f32 = vsub_f32((float32x2_t)vzip1_s32((int32x2_t)vpadd_f32(v108, v108), (int32x2_t)vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8)), (float32x2_t)vdup_lane_s32((int32x2_t)v107, 0));
    v114 = (float32x4_t *)((char *)&v421[34] + 20 * v30);
    v113.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(vpadd_f32(v105, v105).f32[0], v56, 3)), vsub_f32(vpadd_f32(v110, v110), v107).u32[0]);
    *v114 = vmulq_f32(v113, (float32x4_t)xmmword_2261A6460);
    v114[1].i8[0] = v112;
    v115 = 30720.0;
    if (!v21[235].i8[10])
      v115 = 65535.0;
    v116 = v21[218].f32[3] != v115 || v21[222].i8[0] == 0;
    v117 = v116;
    if (v21[220].f32[3] != v115)
      v117 = 1;
    v114[1].i8[1] = v117;
    ++v30;
    v22 += 216;
  }
  while (v30 != v29);
  v119 = 0;
  v120 = (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v384, v386), (int8x8_t)0xFF000000FFLL));
  v121 = v21[221];
  v122 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2);
  *(int8x8_t *)v109.i8 = vbsl_s8(v120, (int8x8_t)vdup_n_s32(0x477FFF00u), (int8x8_t)vdup_n_s32(0x47700000u));
  v123 = vzip1q_s32(v109, v109);
  v123.i32[2] = v109.i32[0];
  v387 = (float32x4_t)v123;
  v124 = vaddq_f32(v121, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1));
  if ((v120.i8[4] & 1) != 0)
    v125 = 14;
  else
    v125 = 15;
  v385 = v120.i8[0];
  v126.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v126.i8[8] = v125;
  v126.i8[9] = v125;
  v126.i8[10] = v125;
  v126.i8[11] = v125;
  v126.i8[12] = v125;
  v126.i8[13] = v125;
  v127 = (float *)&v418;
  v128 = v412;
  v129 = (float *)&v417;
  v130 = v411;
  v126.i8[14] = v125;
  v126.i8[15] = v125;
  v388 = v121;
  v131 = v121.f32[3];
  v132 = 0uLL;
  v133 = 0.5;
  v383 = v126;
  LODWORD(v381) = vaddq_f32(v122, v124).u32[0];
  do
  {
    v394 = v130;
    v397 = v129;
    v401 = v127;
    v134 = &v416[21 * v119];
    v135 = (float32x4_t *)(v391 + 16 * v119);
    v136 = v135[1];
    v137 = v135[5];
    v138 = vmaxnmq_f32(vsubq_f32(v136, v387), v132);
    v139 = vmaxnmq_f32(vsubq_f32(v137, v387), v132);
    v140 = vminnmq_f32(v136, v132);
    v141 = vminnmq_f32(v137, v132);
    v142 = vmulq_f32(v141, v141);
    v143 = vmulq_f32(v388, vaddq_f32(vmulq_f32(v139, v139), vaddq_f32(vmulq_f32(v138, v138), vaddq_f32(vmulq_f32(v140, v140), v142))));
    v144 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2);
    v139.f32[0] = v133 * vaddq_f32(v144, vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))).f32[0];
    v144.i8[0] = v390[v119 + 4];
    v145 = (float)v144.u32[0];
    v146 = v139.f32[0] * (float)v144.u32[0];
    v147 = vmuls_lane_f32(v133, v143, 3) * (float)v144.u32[0];
    if ((v385 & 1) != 0)
    {
      memset_pattern16(v134, &xmmword_2261A28B0, 0x40uLL);
      v149 = 0;
      *(int32x4_t *)&v410[84 * v119 + 884] = vdupq_n_s32(0xC080600u);
      v150 = (float *)&v421[34] + 5 * v119;
      v151 = 0.625;
      if (*((_BYTE *)v150 + 17))
      {
        v152 = v133;
      }
      else
      {
        v151 = 1.0;
        v152 = 1.0;
      }
      if (*((_BYTE *)v150 + 16))
        v153 = v133;
      else
        v153 = 1.0;
      v154 = 0.25;
      if (!*((_BYTE *)v150 + 16))
        v154 = 1.0;
      v155 = *((float *)&v421[34] + 5 * v119);
      v157 = v150[2];
      v156 = v150[3];
      v158 = v394;
      v159 = v397;
      v160 = v397;
      v161 = v401;
      do
      {
        if ((unint64_t)(v149 + 4) > 0x12)
          v153 = 1.0;
        v162 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v149];
        if ((unint64_t)(v149 + 4) > 0x12)
          v154 = 1.0;
        v163 = (float)(v381 * v145) * v162;
        v164 = (float)((float)(v131 * v145) + (float)(v381 * v145)) * v162;
        *v158 = 12;
        v165 = v147 + (float)(v146 + (float)((float)(v151 * v164) * v153));
        v166 = v147 + (float)(v146 + (float)(v155 + v164));
        if (v166 < (float)(v156 + (float)(v146 + (float)((float)(v152 * v163) * v154))))
        {
          v167 = 10;
        }
        else
        {
          v166 = v156 + (float)(v146 + (float)((float)(v152 * v163) * v154));
          v167 = 8;
        }
        *(v158 - 1) = v167;
        v168 = v156 + (float)(v146 + v163);
        v169 = v157 + (float)(v147 + (float)(v146 + v164));
        *(v160 - 1) = v166;
        *v160 = v165;
        if ((float)(v155 + v168) >= v169)
        {
          v170 = 4;
        }
        else
        {
          v169 = v155 + v168;
          v170 = 6;
        }
        *(v158 - 2) = v170;
        *(v160 - 3) = v157 + v168;
        *(v160 - 2) = v169;
        *(v158 - 3) = 0;
        ++v149;
        v160 += 4;
        v158 += 4;
      }
      while (v149 != 17);
    }
    else
    {
      v171 = v135[5];
      v171.i32[3] = v171.i32[0];
      v172 = fmaxf(vminvq_f32(v171), 0.0);
      LODWORD(v173) = HIDWORD(v135[5].i64[0]);
      v174 = v137.f32[0] > v137.f32[1];
      v175 = v137.f32[0] > v137.f32[2];
      if (v137.f32[1] > v137.f32[2])
        v176 = 1;
      else
        v176 = 2;
      if (v173 <= v137.f32[2])
        v173 = v137.f32[2];
      v177 = !v174 || !v175;
      if (v174 && v175)
        v178 = 0;
      else
        v178 = v176;
      v179 = (float *)((unint64_t)v403 | (4 * v178));
      if (!v177)
        v173 = v137.f32[0];
      v403[0] = v136;
      v142.f32[0] = v173 - *v179;
      v180 = (int)(float)(v173 - v172);
      v181 = (int)v142.f32[0];
      v182 = v180 < 0x2000;
      v183 = v180 < 2048;
      v184 = v180 < 1024;
      v185 = (int)v142.f32[0] < 2048 && v180 < 0x2000;
      v186 = v181 < 2048 && v180 < 2048;
      v187 = v181 < 2048 && v180 < 1024;
      v188 = v181 < 0x2000 && v180 < 0x2000;
      v189 = v181 < 0x2000 && v180 < 2048;
      v190 = v180 < 4096;
      if (v181 >= 0x2000)
        v190 = 0;
      v191 = v180 < 0x8000;
      v192 = v181 < 0x2000 && v180 < 0x8000;
      v193 = v180 < 0x4000;
      v194 = vsubq_f32(v137, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 0));
      v194.i32[3] = 0;
      v195 = v136;
      v195.i32[3] = 0;
      v196 = vsubq_f32(v194, v195);
      v197 = (int)vmaxvq_f32(vmaxq_f32(v196, vsubq_f32(v132, v196)));
      if (v181 >= 0x2000)
        v193 = 0;
      v198 = v181 < 0x4000;
      if (v191 && v198)
        v199 = 4;
      else
        v199 = 5;
      if (v182 && v198)
        v200 = 3;
      else
        v200 = v199;
      v201 = v181 < 1024;
      if (v183 && v198)
        v200 = 2;
      v202 = v181 < 4096;
      if (v183 && v201)
        v200 = 1;
      if (v193 && v197 < 0x2000)
        v203 = 0;
      else
        v203 = 8;
      v204 = v197 < 4096;
      if (v192 && v204)
        v203 = 1;
      if (v190 && v204)
        v203 = 2;
      if (v188 && v197 < 2048)
        v203 = 3;
      v205 = v197 < 512;
      if (v185 && v205)
        v206 = 4;
      else
        v206 = v203;
      if (v189 && v197 < 1024)
        v206 = 5;
      if (v186 && v197 < 256)
        v207 = 6;
      else
        v207 = v206;
      v116 = !v187 || !v205;
      v208 = 7;
      if (v116)
        v208 = v207;
      if (v184 && v202)
        v209 = 0;
      else
        v209 = v200;
      v210 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgbo_error_scales[v209];
      v211 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgb_error_scales[v208];
      v212 = (float)((float)(v137.f32[2] + vaddv_f32(*(float32x2_t *)v137.f32)) * 0.33333)
           - (float)(0.33333
                   * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0]);
      memset_pattern16(v134, &xmmword_2261A28B0, 0x80uLL);
      v213 = 0;
      v214 = 0x202020202020202;
      v215 = 0x707070707070707;
      v216 = v383;
      v217 = vextq_s8(v216, v216, 8uLL).u64[0];
      v218 = &v410[84 * v119 + 884];
      vst4_s8(v218, *(int8x8x4_t *)&v214);
      v219 = flt_2261A6478[v212 < 3968.0];
      v220 = v212 < 960.0;
      v133 = 0.5;
      if (v220)
        v219 = 0.002;
      v221 = (float *)&v421[34] + 5 * v119;
      v223 = v221[2];
      v222 = v221[3];
      v224 = v221[1];
      v161 = v401;
      v225 = v401;
      v159 = v397;
      do
      {
        v226 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v213 + 4]
             * v145;
        v227 = (float)(v381 * v226) + (float)(v381 * v226);
        v228 = &v128[v213 * 4];
        *v228 = v125;
        *(v228 - 1) = 11;
        *(v225 - 1) = v222 + (float)(v146 + (float)(v227 * (float)(v211 * 0.01)));
        *v225 = v147 + (float)(v146 + (float)(v227 + (float)((float)(v131 * v226) + (float)(v131 * v226))));
        *(v225 - 3) = v223 + (float)(v222 + (float)(v146 + (float)(v227 * v219)));
        *(v225 - 2) = v224 + (float)(v222 + (float)(v146 + (float)(v227 * (float)(v210 * 0.0015))));
        *(_WORD *)(v228 - 3) = 1794;
        ++v213;
        v225 += 4;
      }
      while (v213 != 13);
    }
    ++v119;
    v127 = v161 + 84;
    v128 += 84;
    v129 = v159 + 84;
    v130 = v394 + 84;
    v229 = v389;
    v132 = 0uLL;
  }
  while (v119 != v389);
  v230 = a13;
  v231 = a13 + 157120;
  v232 = a13 + 165312;
  v233 = a13 + 167360;
  v234 = v377 & 0xFFFFFFFC;
  v235 = vdupq_n_s32(0x7149F2CAu);
  *(int32x4_t *)(v231 + 4 * v234) = v235;
  *(_DWORD *)(v232 + v234) = 0;
  *(_DWORD *)(v233 + v234) = 0;
  v236 = v379;
  v237 = (v379 - 1) & 0xFFFFFFFC;
  *(int32x4_t *)(v231 + 4 * v237) = v235;
  *(_DWORD *)(v232 + v237) = 0;
  *(_DWORD *)(v233 + v237) = 0;
  v398 = a13 + 157120;
  if ((_DWORD)v389 == 3)
  {
    v392 = v377 & 0xFFFFFFFC;
    for (i = 0; i != 210; i += 10)
      memset_pattern16(&v407[i], &xmmword_2261A28B0, 0x28uLL);
    v258 = &v414;
    v259 = (float *)&v420;
    v260 = &v409;
    v261 = v405;
    v262 = 4;
    do
    {
      v263 = 0;
      v264 = v261;
      v265 = v260;
      do
      {
        v266 = 0;
        v267 = v264;
        v268 = v265;
        do
        {
          if ((int)v263 >= (int)v266)
            v269 = v266;
          else
            v269 = v263;
          if ((int)v263 <= (int)v266)
            v270 = v266;
          else
            v270 = v263;
          if (v270 - v269 <= 1)
          {
            v271 = 0;
            v272 = v267;
            do
            {
              if ((int)v271 >= v269)
                v273 = v269;
              else
                v273 = v271;
              if ((int)v271 <= v270)
                v274 = v270;
              else
                v274 = v271;
              if (v274 - v273 <= 1)
              {
                v275 = fminf((float)(*((float *)&v416[v262] + v263) + *((float *)&v416[v262 + 21] + v266)) + v259[v271], 1.0e10);
                if (v275 <= *(float *)&v268[v271])
                {
                  *(float *)&v268[v271] = v275;
                  *(v272 - 2) = v410[4 * v262 + 884 + v263];
                  *(v272 - 1) = v410[4 * v262 + 968 + v266];
                  *v272 = *((_BYTE *)v258 + v271);
                }
              }
              ++v271;
              v272 += 3;
            }
            while (v271 != 4);
          }
          ++v266;
          ++v268;
          v267 += 3;
        }
        while (v266 != 4);
        ++v263;
        ++v265;
        v264 += 3;
      }
      while (v263 != 4);
      ++v262;
      v258 = (uint64_t *)((char *)v258 + 4);
      v259 += 4;
      v260 += 10;
      v261 += 30;
    }
    while (v262 != 21);
    if (v379)
    {
      v276 = 0;
      v244 = -1;
      v277 = 1.0e30;
      v238 = v376;
      v240 = a11;
      v239 = a12;
      v242 = a9;
      v241 = a10;
      v229 = v389;
      v231 = a13 + 157120;
      do
      {
        if (*(float *)(v375 + 4 * v276) >= 1.0e30)
        {
          *(_DWORD *)(v231 + 4 * v276) = 1900671690;
        }
        else
        {
          v278 = 0;
          v279 = 0;
          v280 = *(char *)(v378 + v276);
          v281 = a13 + 4 * v276 + 169408;
          v282 = &quant_mode_table[v280 + 384];
          v283 = 1.0e30;
          do
          {
            v285 = *v282;
            v282 += 128;
            v284 = v285;
            if (v285 < 4)
              break;
            v286 = &v407[10 * v284];
            if (*(float *)&v286[v278] < v283)
            {
              v283 = *(float *)&v286[v278];
              v279 = v278 + 3;
            }
            ++v278;
          }
          while (v278 != 7);
          v287 = &quant_mode_table[128 * (uint64_t)v279 + v280];
          v288 = *v287;
          LOBYTE(v287) = v287[5];
          *(_BYTE *)(v232 + v276) = v288;
          *(_BYTE *)(v233 + v276) = (_BYTE)v287;
          if (v288 <= 3)
          {
            *(_BYTE *)(a13 + 4 * v276 + 169410) = 0;
            *(_WORD *)(a13 + 4 * v276 + 169408) = 0;
          }
          else
          {
            v289 = (char *)v403 + 30 * v288 + 3 * v279 + 15;
            *(_WORD *)v281 = *(_WORD *)v289;
            *(_BYTE *)(v281 + 2) = v289[2];
          }
          v231 = a13 + 157120;
          v290 = v283 + *(float *)(v375 + 4 * v276);
          *(float *)(v398 + 4 * v276) = v290;
          if (v290 < v277)
          {
            v244 = v276;
            v277 = v290;
          }
        }
        ++v276;
      }
      while (v276 != v379);
      goto LABEL_268;
    }
    v244 = -1;
    v238 = v376;
    v240 = a11;
    v239 = a12;
    v242 = a9;
    v241 = a10;
    v229 = v389;
    goto LABEL_267;
  }
  if ((_DWORD)v389 == 2)
  {
    for (j = 0; j != 147; j += 7)
      memset_pattern16(&v407[j], &xmmword_2261A28B0, 0x1CuLL);
    v292 = &v413;
    v293 = (float *)&v419;
    v294 = v404;
    v295 = &v408;
    v296 = 4;
    v238 = v376;
    v240 = a11;
    v239 = a12;
    v242 = a9;
    v241 = a10;
    do
    {
      v297 = 0;
      v298 = v295;
      v299 = v294;
      do
      {
        v300 = 0;
        v301 = v297;
        v302 = v299;
        do
        {
          if (v301 >= 0)
            v303 = v301;
          else
            v303 = -v301;
          if (v303 <= 1)
          {
            v304 = fminf(*((float *)&v416[v296] + v297) + v293[v300], 1.0e10);
            if (v304 <= *(float *)&v298[v300])
            {
              *(float *)&v298[v300] = v304;
              *(v302 - 1) = v410[4 * v296 + 884 + v297];
              *v302 = *((_BYTE *)v292 + v300);
            }
          }
          ++v300;
          v302 += 2;
          --v301;
        }
        while (v300 != 4);
        ++v297;
        v299 += 2;
        ++v298;
      }
      while (v297 != 4);
      ++v296;
      ++v292;
      v293 += 4;
      v294 += 14;
      v295 += 7;
    }
    while (v296 != 21);
    v231 = a13 + 157120;
    if (v379)
    {
      v305 = 0;
      v244 = -1;
      v306 = 1.0e30;
      v229 = v389;
      do
      {
        if (*(float *)(v375 + 4 * v305) >= 1.0e30)
        {
          *(_DWORD *)(v231 + 4 * v305) = 1900671690;
        }
        else
        {
          v307 = 0;
          v308 = 0;
          v309 = *(char *)(v378 + v305);
          v310 = (_WORD *)(a13 + 4 * v305 + 169408);
          v311 = &quant_mode_table[v309 + 256];
          v312 = 1.0e30;
          do
          {
            v314 = *v311;
            v311 += 128;
            v313 = v314;
            if (v314 < 4)
              break;
            v315 = &v407[7 * v313];
            if (*(float *)&v315[v307] < v312)
            {
              v312 = *(float *)&v315[v307];
              v308 = v307 + 2;
            }
            ++v307;
          }
          while (v307 != 7);
          v316 = &quant_mode_table[128 * (uint64_t)v308 + v309];
          v317 = *v316;
          LOBYTE(v316) = v316[2];
          *(_BYTE *)(v232 + v305) = v317;
          *(_BYTE *)(v233 + v305) = (_BYTE)v316;
          if (v317 <= 3)
            *v310 = 0;
          else
            *v310 = *((_WORD *)&v403[1] + 7 * v317 + v308 + 2);
          v231 = a13 + 157120;
          v318 = v312 + *(float *)(v375 + 4 * v305);
          *(float *)(v398 + 4 * v305) = v318;
          if (v318 < v306)
          {
            v244 = v305;
            v306 = v318;
          }
        }
        ++v305;
      }
      while (v305 != v379);
    }
    else
    {
      v244 = -1;
      v229 = v389;
    }
    goto LABEL_269;
  }
  if ((_DWORD)v389 != 1)
  {
    v392 = v377 & 0xFFFFFFFC;
    for (k = 0; k != 273; k += 13)
      memset_pattern16(&v407[k], &xmmword_2261A28B0, 0x34uLL);
    v320 = &v415;
    v321 = (float *)v421;
    v322 = v410;
    v323 = v406;
    v324 = 4;
    do
    {
      v325 = 0;
      v326 = v323;
      v402 = v322;
      do
      {
        v327 = 0;
        v328 = v326;
        v329 = v322;
        do
        {
          if ((int)v325 >= (int)v327)
            v330 = v327;
          else
            v330 = v325;
          if ((int)v325 <= (int)v327)
            v331 = v327;
          else
            v331 = v325;
          if (v331 - v330 <= 1)
          {
            v332 = 0;
            v333 = v328;
            v334 = v329;
            do
            {
              if ((int)v332 >= v330)
                v335 = v330;
              else
                v335 = v332;
              if ((int)v332 <= v331)
                v336 = v331;
              else
                v336 = v332;
              if (v336 - v335 <= 1)
              {
                v337 = 0;
                v338 = v333;
                do
                {
                  if ((int)v337 >= v335)
                    v339 = v335;
                  else
                    v339 = v337;
                  if ((int)v337 <= v336)
                    v340 = v336;
                  else
                    v340 = v337;
                  if (v340 - v339 <= 1)
                  {
                    v341 = fminf((float)((float)(*((float *)&v416[v324] + v325) + *((float *)&v416[v324 + 21] + v327))+ *((float *)&v416[v324 + 42] + v332))+ v321[v337], 1.0e10);
                    if (v341 <= *(float *)&v334[4 * v337])
                    {
                      *(float *)&v334[4 * v337] = v341;
                      *(v338 - 3) = v410[4 * v324 + 884 + v325];
                      *(v338 - 2) = v410[4 * v324 + 968 + v327];
                      *(v338 - 1) = v410[4 * v324 + 1052 + v332];
                      *v338 = *((_BYTE *)v320 + v337);
                    }
                  }
                  ++v337;
                  v338 += 4;
                }
                while (v337 != 4);
              }
              ++v332;
              v334 += 4;
              v333 += 4;
            }
            while (v332 != 4);
          }
          ++v327;
          v329 += 4;
          v328 += 4;
        }
        while (v327 != 4);
        ++v325;
        v322 += 4;
        v326 += 4;
      }
      while (v325 != 4);
      ++v324;
      ++v320;
      v321 += 4;
      v322 = v402 + 52;
      v323 += 52;
    }
    while (v324 != 21);
    v236 = v379;
    v233 = a13 + 167360;
    if (v379)
    {
      v342 = 0;
      v244 = -1;
      v343 = 1.0e30;
      v238 = v376;
      v240 = a11;
      v239 = a12;
      v242 = a9;
      v241 = a10;
      v229 = v389;
      v230 = a13;
      v232 = a13 + 165312;
      v231 = a13 + 157120;
      do
      {
        if (*(float *)(v375 + 4 * v342) >= 1.0e30)
        {
          *(_DWORD *)(v231 + 4 * v342) = 1900671690;
        }
        else
        {
          v344 = 0;
          v345 = 0;
          v346 = *(char *)(v378 + v342);
          v347 = &quant_mode_table[v346 + 512];
          v348 = 1.0e30;
          do
          {
            v350 = *v347;
            v347 += 128;
            v349 = v350;
            if (v350 < 4)
              break;
            v351 = &v407[13 * v349];
            if (*(float *)&v351[v344] < v348)
            {
              v348 = *(float *)&v351[v344];
              v345 = v344 + 4;
            }
            ++v344;
          }
          while (v344 != 6);
          v352 = &quant_mode_table[128 * (uint64_t)v345 + v346];
          v353 = *v352;
          LOBYTE(v352) = v352[8];
          *(_BYTE *)(a13 + 165312 + v342) = v353;
          *(_BYTE *)(a13 + 167360 + v342) = (_BYTE)v352;
          if (v353 <= 3)
            *(_DWORD *)(a13 + 4 * v342 + 169408) = 0;
          else
            *(_DWORD *)(a13 + 4 * v342 + 169408) = *((_DWORD *)v403 + 13 * v353 + v345 + 2);
          v231 = a13 + 157120;
          v354 = v348 + *(float *)(v375 + 4 * v342);
          *(float *)(v398 + 4 * v342) = v354;
          if (v354 < v343)
          {
            v244 = v342;
            v343 = v354;
          }
        }
        ++v342;
      }
      while (v342 != v379);
      goto LABEL_268;
    }
    v244 = -1;
    v238 = v376;
    v240 = a11;
    v239 = a12;
    v242 = a9;
    v241 = a10;
    v229 = v389;
    v230 = a13;
    v232 = a13 + 165312;
LABEL_267:
    v231 = a13 + 157120;
LABEL_268:
    LODWORD(v234) = v392;
    goto LABEL_269;
  }
  v238 = v376;
  v240 = a11;
  v239 = a12;
  v242 = a9;
  v241 = a10;
  if (v377 >= v379)
  {
    v407[0] = -1;
    goto LABEL_271;
  }
  v243 = v377;
  v244 = -1;
  v245 = 1.0e30;
  do
  {
    if (*(float *)(v375 + 4 * v243) >= 1.0e30)
    {
      *(_DWORD *)(v231 + 4 * v243) = 1900671690;
    }
    else
    {
      v246 = 0;
      v247 = 0;
      v248 = *(char *)(v378 + v243);
      v249 = &quant_mode_table[v248 + 128];
      v250 = 1.0e30;
      do
      {
        v252 = *v249;
        v249 += 128;
        v251 = v252;
        if (v252 >= 4)
        {
          v253 = (float *)&v416[v251];
          if (v253[v246] < v250)
          {
            v247 = v246;
            v250 = v253[v246];
          }
        }
        ++v246;
      }
      while (v246 != 4);
      v254 = quant_mode_table[128 * (uint64_t)v247 + 128 + v248];
      v255 = (_BYTE *)(a13 + 4 * v243 + 169408);
      *(_BYTE *)(v232 + v243) = v254;
      *v255 = 0;
      if (v254 > 3)
        *v255 = v410[4 * v254 + 884 + v247];
      v256 = v250 + *(float *)(v375 + 4 * v243);
      *(float *)(v231 + 4 * v243) = v256;
      *(_BYTE *)(v233 + v243) = *(_BYTE *)(v232 + v243);
      if (v256 < v245)
      {
        v244 = v243;
        v245 = v256;
      }
    }
    ++v243;
  }
  while (v243 != v379);
LABEL_269:
  v407[0] = v244;
  if ((v244 & 0x80000000) == 0)
    *(_DWORD *)(v231 + 4 * v244) = 1900671690;
LABEL_271:
  if (v238 >= 2)
  {
    v355 = vorrq_s8((int8x16_t)vdupq_n_s32(v234), (int8x16_t)xmmword_2260FF480);
    v356 = 1;
    v357 = vdupq_n_s32(0x7149F2CAu);
    v358.i64[0] = 0x400000004;
    v358.i64[1] = 0x400000004;
    do
    {
      v359.i64[0] = -1;
      v359.i64[1] = -1;
      v360 = (float32x4_t)v357;
      if (v234 < v236)
      {
        v361 = v234;
        v360 = (float32x4_t)v357;
        v148 = (float32x4_t)v355;
        do
        {
          v362 = *(float32x4_t *)(v231 + 4 * v361);
          v363 = (int8x16_t)vcgtq_f32(v360, v362);
          v360 = (float32x4_t)vbslq_s8(v363, (int8x16_t)v362, (int8x16_t)v360);
          v359 = vbslq_s8(v363, (int8x16_t)v148, v359);
          v148 = (float32x4_t)vaddq_s32((int32x4_t)v148, v358);
          v361 += 4;
        }
        while (v361 < v236);
      }
      v148.f32[0] = vminvq_f32(v360);
      v148 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 0);
      v364 = (int8x16_t)vceqq_f32(v360, v148);
      v365 = vminvq_s32((int32x4_t)vorrq_s8(vandq_s8(v359, v364), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v364) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))));
      v407[v356] = v365;
      if ((v365 & 0x80000000) != 0)
        break;
      *(_DWORD *)(v231 + 4 * v365) = 1900671690;
      ++v356;
    }
    while (v356 != v238);
  }
  if (v238)
  {
    v366 = 0;
    while (1)
    {
      v367 = v407[v366];
      if ((v367 & 0x80000000) != 0)
        break;
      *(_DWORD *)(v241 + 4 * v366) = v367;
      *(_DWORD *)(v240 + 4 * v366) = *(unsigned __int8 *)(v232 + v367);
      *(_DWORD *)(v239 + 4 * v366) = *(unsigned __int8 *)(v233 + v367);
      v368 = (char *)(v230 + 169408 + 4 * v367);
      v369 = v242;
      v370 = v229;
      do
      {
        v371 = *v368++;
        *v369++ = v371;
        --v370;
      }
      while (v370);
      ++v366;
      v242 += 4;
      if (v366 == v238)
      {
        LODWORD(v366) = v238;
        break;
      }
    }
  }
  else
  {
    LODWORD(v366) = 0;
  }
  if (v366 >= v238)
    return v238;
  else
    return v366;
}

uint64_t pack_color_endpoints(int a1, unsigned __int8 *a2, int a3, float32x4_t a4, float32x4_t a5, int8x16_t a6, int32x4_t a7)
{
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  unsigned __int8 *v27;
  float v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unsigned __int8 *v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int32x2_t v70;
  int32x2_t v71;
  unsigned __int8 *v72;
  float v73;
  float v74;
  float v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  int v83;
  int v84;
  signed int v85;
  signed int v86;
  int v88;
  int v89;
  unsigned __int8 *v90;
  __int16 v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned __int8 v98;
  __int16 v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  BOOL v109;
  int v110;
  int v111;
  unsigned __int8 *v112;
  int v113;
  unsigned __int8 *v114;
  int v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  float v120;
  unsigned __int8 *v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  float v131;
  unsigned __int8 *v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int8x16_t v141;
  unint64_t v142;
  float v143;
  float v144;
  int v145;
  int v146;
  uint64_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float v150;
  BOOL v151;
  float v152;
  unsigned int v153;
  float v154;
  char *v155;
  int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned __int8 v160;
  int v161;
  float32x2_t v162;
  float32x2_t v163;
  int32x2_t v164;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned __int8 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int8x8_t v177;
  float32x2_t v178;
  float v179;
  float v180;
  int v181;
  uint64_t v182;
  float v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  float v188;
  float v189;
  float v190;
  unsigned __int8 *v191;
  __int32 v192;
  unsigned __int8 v193;
  int v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  float v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int8x16_t v217;
  uint32x4_t v218;
  int8x16_t v219;
  unsigned int v221;
  int v222;
  char v223;
  unsigned int v224;
  int v225;
  unsigned __int8 *v226;
  unsigned __int8 v227;
  int v228;
  float v229;
  float v230;
  float32x4_t v231;
  __n128 v232;
  float v233;
  float32x4_t v234;
  __n128 v235;
  float v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int8x16_t v241;
  uint32x4_t v242;
  uint64_t v243;
  int8x16x2_t v244;

  v8 = 0;
  v243 = *MEMORY[0x24BDAC8D0];
  v11 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v12 = vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v11);
  v13 = vminnmq_f32(vmaxnmq_f32(a5, (float32x4_t)0), v11);
  v14 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  v15 = vmulq_f32(v12, v14);
  v16 = vmulq_f32(v13, v14);
  switch(a1)
  {
    case 0:
      v8 = 0;
      v24 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      v25 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      v26 = (float)(v24 + v25) * 0.5;
      if (v24 > v25)
      {
        v24 = (float)(v24 + v25) * 0.5;
        v25 = v26;
      }
      v27 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      *a2 = v27[((float)(v24 - (float)(int)(float)(v24 + 0.5)) >= -0.1) | (2 * (int)(float)(v24 + 0.5))];
      a2[1] = v27[((float)(v25 - (float)(int)(float)(v25 + 0.5)) >= -0.1) | (2 * (int)(float)(v25 + 0.5))];
      return v8;
    case 2:
    case 3:
      v17 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
      v18 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      v19 = (float)(v17 + v18) * 0.5;
      v20 = v18 < v17;
      if (v18 < v17)
        v18 = (float)(v17 + v18) * 0.5;
      v21 = (int)(float)(v18 + 0.5);
      if (v20)
        v17 = v19;
      v22 = (int)(float)(v17 + 0.5);
      if (v21 - v22 < 2049)
      {
        if ((((v22 + 16) >> 5) & ~((v22 + 16) >> 31)) >= 2047)
          v91 = 2047;
        else
          v91 = ((v22 + 16) >> 5) & ~(unsigned __int16)((v22 + 16) >> 31);
        v23 = a3 - 4;
        v92 = &color_unquant_to_uquant_tables[512 * v23];
        v93 = (char)v92[(2 * (v91 & 0x7F)) | 1];
        if ((v93 & 0x80000000) == 0)
        {
          v94 = (((v21 + 16) >> 5) & ~((v21 + 16) >> 31)) >= 2047 ? 2047 : ((v21 + 16) >> 5) & ~((v21 + 16) >> 31);
          v95 = v91 & 0x780 | v92[(2 * (v91 & 0x7F)) | 1];
          v96 = v94 - v95;
          if (v96 <= 0xF)
          {
            v97 = (v95 >> 3) & 0xF0 | v96;
            v98 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v97) | 1u)];
            if ((v97 & 0xF0) == (v98 & 0xF0))
              goto LABEL_74;
          }
        }
        v99 = (((v22 + 32) >> 6) & ~((v22 + 32) >> 31)) >= 1023
            ? 1023
            : ((v22 + 32) >> 6) & ~(unsigned __int16)((v22 + 32) >> 31);
        v93 = (char)v92[(2 * (v99 & 0x7F)) | 0x101];
        if (v93 < 0)
        {
          v100 = (((v21 + 32) >> 6) & ~((v21 + 32) >> 31)) >= 1023 ? 1023 : ((v21 + 32) >> 6) & ~((v21 + 32) >> 31);
          v101 = v100 - (v99 & 0x380 | v93 & 0x7F);
          if (v101 <= 0x1F)
          {
            v102 = v101 | ((unsigned __int16)(v99 & 0x380) >> 2);
            v98 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v102) | 1u)];
            if ((v102 & 0xE0) == (v98 & 0xE0))
            {
LABEL_74:
              *a2 = v93;
              a2[1] = v98;
              return 3;
            }
          }
        }
      }
      else
      {
        v23 = a3 - 4;
      }
      v103 = ((v22 + 128) >> 8) & ~((v22 + 128) >> 31);
      if (v103 >= 255)
        v103 = 255;
      v104 = ((v21 + 128) >> 8) & ~((v21 + 128) >> 31);
      if (v104 >= 255)
        v104 = 255;
      v105 = ((v21 + 256) >> 8) & ~((v21 + 256) >> 31);
      if (v105 >= 255)
        v105 = 255;
      if (((v22 >> 8) & ~(v22 >> 31)) >= 255)
        v106 = 255;
      else
        v106 = (v22 >> 8) & ~(v22 >> 31);
      v107 = ((v104 << 8) - v21) * ((v104 << 8) - v21) + ((v103 << 8) - v22) * ((v103 << 8) - v22);
      v108 = ((v106 << 8) - v22 + 128) * ((v106 << 8) - v22 + 128)
           + ((v105 << 8) - v21 - 128) * ((v105 << 8) - v21 - 128);
      v109 = v107 >= v108;
      if (v107 >= v108)
        v110 = v105;
      else
        v110 = v103;
      if (v109)
        v111 = v106;
      else
        v111 = v104;
      v112 = &color_unquant_to_uquant_tables[512 * v23];
      *a2 = v112[(2 * v110) | 1];
      a2[1] = v112[(2 * v111) | 1];
      return 2;
    case 4:
      v28 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      v29 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      v30 = (int)(float)(v28 + 0.5);
      if (a3 >= 19)
      {
        v32 = 2 * v30;
        v34 = (a3 - 4);
        v37 = (int)(float)(v29 + 0.5);
        v31 = (int)(float)(v15.f32[3] + 0.5);
        v40 = 2 * v37;
        v33 = 2 * v31;
        v38 = (int)(float)(v16.f32[3] + 0.5);
        v41 = 2 * v38;
      }
      else
      {
        v31 = (int)(float)(v15.f32[3] + 0.5);
        v32 = 2 * v30;
        v33 = 2 * v31;
        v34 = a3 - 4;
        v35 = &color_unquant_to_uquant_tables[512 * v34];
        v36 = v35[(4 * ((int)(float)(v28 + 0.5) & 0x7F)) | 1];
        v37 = (int)(float)(v29 + 0.5);
        v38 = (int)(float)(v16.f32[3] + 0.5);
        v39 = v36 | (((v30 >> 7) & 1) << 8);
        v40 = 2 * v37;
        v41 = 2 * v38;
        v42 = 2 * v37 - v39;
        if ((v42 - 64) >= 0xFFFFFF80)
        {
          v43 = v35[(4 * ((int)(float)(v15.f32[3] + 0.5) & 0x7F)) | 1];
          v44 = v43 & 0xFFFFFEFF | (((v31 >> 7) & 1) << 8);
          if (v41 - v44 - 64 >= 0xFFFFFF80)
          {
            v45 = v42 & 0x7F | ((unsigned __int16)(v32 & 0x100) >> 1);
            v46 = &color_unquant_to_uquant_tables[512 * v34];
            v47 = v46[(2 * v45) | 1];
            if ((v45 ^ v47) <= 0x3F)
            {
              v48 = ((_BYTE)v41 - (_BYTE)v43) & 0x7F | ((unsigned __int16)(v33 & 0x100) >> 1);
              v49 = v46[(2 * v48) | 1];
              if ((v48 ^ v49) <= 0x3F
                && (v47 & 0x7F) + v39 + (((int)(v47 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF
                && (v49 & 0x7F) + v44 + (((int)(v49 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF)
              {
                *a2 = v36;
                a2[1] = v47;
                a2[2] = v43;
                v8 = 5;
                a2[3] = v49;
                return v8;
              }
            }
          }
        }
      }
      v113 = v32 | ((float)(v28 - (float)v30) >= -0.1);
      v114 = &color_unquant_to_uquant_tables[512 * v34];
      *a2 = v114[v113];
      a2[1] = v114[v40 | ((float)(v29 - (float)v37) >= -0.1)];
      a2[2] = v114[v33 | ((float)(v15.f32[3] - (float)v31) >= -0.1)];
      a2[3] = v114[v41 | ((float)(v16.f32[3] - (float)v38) >= -0.1)];
      return 4;
    case 6:
      quantize_rgbs(a2, a3, a6);
      return 6;
    case 7:
      v50 = (float32x4_t)vdupq_laneq_s32(a7, 3);
      *(float32x2_t *)v51.f32 = vadd_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v50.f32);
      v51.i32[3] = vextq_s8(*(int8x16_t *)&a7, *(int8x16_t *)&a7, 8uLL).i32[1];
      v51.i32[2] = vaddq_f32(*(float32x4_t *)&a7, v50).i32[2];
      v52 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(v51, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x477FFF00u));
      if (*(float *)v52.i32 <= *(float *)&v52.i32[1] || *(float *)v52.i32 <= *(float *)&v52.i32[2])
      {
        v116 = (float32x4_t)vrev64q_s32(v52);
        if (*(float *)&v52.i32[1] <= *(float *)&v52.i32[2])
        {
          v116 = (float32x4_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 0xCuLL);
          v115 = 2;
        }
        else
        {
          v116.i64[1] = v52.i64[1];
          v115 = 1;
        }
      }
      else
      {
        v115 = 0;
        v116 = (float32x4_t)v52;
      }
      v142 = 0;
      LODWORD(v143) = vsubq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1)).u32[0];
      LODWORD(v144) = vsubq_f32(v116, (float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2)).u32[0];
      v145 = 4 * v115;
      v146 = v115 | 0xC;
      v147 = a3 - 4;
      v148 = (float32x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL).u64[0];
      v149 = (float32x2_t)vdup_n_s32(0x477FFF00u);
      while (1)
      {
        v150 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v142];
        v151 = v143 <= v150 && v144 <= v150;
        if (v151 && v116.f32[3] <= quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v142 + 1])
        {
          v152 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_scales[v142];
          v153 = v142 >= 4 ? v146 : v145 | v142;
          v154 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_rscales[v142];
          v155 = (char *)&quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_bits + 12 * v142;
          v157 = *((_DWORD *)v155 + 1);
          v156 = *((_DWORD *)v155 + 2);
          v158 = (int)(float)((float)(v116.f32[0] * v152) + 0.5);
          v159 = v158 & 0x3F | (v153 << 6);
          do
          {
            v160 = color_unquant_to_uquant_tables[512 * v147 + ((2 * v159) | 1u)];
            v161 = v159 & 0xC0;
            v159 -= v161 != (v160 & 0xC0);
          }
          while (v161 != (v160 & 0xC0));
          *(float *)v7.i32 = v154 * (float)(int)(v158 & 0xFFFFFFC0 | v160 & 0x3F);
          v162 = (float32x2_t)vdup_lane_s32(v7, 0);
          v163 = vsub_f32(v162, v148);
          v164 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v163, v149), (int8x8_t)v149, (int8x8_t)vmaxnm_f32(v163, 0)), v152), (float32x2_t)0x3F0000003F000000));
          if (1 << v157 > v164.i32[0] && 1 << v157 > v164.i32[1])
          {
            if (v142 > 5)
            {
              v166 = 0;
            }
            else if (((1 << v142) & 5) != 0)
            {
              v166 = (v158 >> 9) & 1;
            }
            else
            {
              v166 = ((1 << v142) & 0xA) != 0 ? (v158 >> 8) & 1 : ((unsigned __int32)v164.i32[0] >> 6) & 1;
            }
            if (v142 >= 4)
              v167 = (v142 - 4) < 2 && ((unsigned __int32)v164.i32[1] >> 6) & 1;
            else
              v167 = (v158 >> 7) & 1;
            if (v142 > 5)
              v168 = 0;
            else
              v168 = ((1 << v142) & 0x3A) != 0 ? ((unsigned __int32)v164.i32[0] >> 5) & 1 : (v158 >> 8) & 1;
            switch((int)v142)
            {
              case 0:
                v169 = (v158 >> 10) & 1;
                break;
              case 1:
              case 3:
              case 4:
              case 5:
                v169 = ((unsigned __int32)v164.i32[1] >> 5) & 1;
                break;
              case 2:
                v169 = (v158 >> 6) & 1;
                break;
              default:
                v169 = 0;
                break;
            }
            v170 = 1 << v156;
            v171 = v164.i8[0] & 0x1F | (((v153 >> 2) & 1) << 7) | (v166 << 6) | (32 * v168);
            do
            {
              v172 = color_unquant_to_uquant_tables[512 * v147 + ((2 * v171) | 1u)];
              v173 = v171 & 0xF0;
              v171 -= v173 != (v172 & 0xF0);
            }
            while (v173 != (v172 & 0xF0));
            v174 = v164.i8[4] & 0x1F | (((v153 >> 3) & 1) << 7) | (v167 << 6) | (32 * v169);
            do
            {
              v175 = color_unquant_to_uquant_tables[512 * v147 + ((2 * v174) | 1u)];
              v176 = v174 & 0xF0;
              v174 -= v176 != (v175 & 0xF0);
            }
            while (v176 != (v175 & 0xF0));
            v177.i32[0] = v172 & 0x1F;
            v177.i32[1] = v175 & 0xFFFFFF1F;
            v178 = vsub_f32(vsub_f32(v162, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v164 & 0xFFFFFFE0FFFFFFE0), v177)), v154)), v148);
            v178.f32[0] = v116.f32[3]
                        + (float)((float)((float)((float)(*(float *)v7.i32 - v116.f32[0]) + v178.f32[0]) + v178.f32[1])
                                * 0.33333);
            v179 = fmaxf(v178.f32[0], 0.0);
            v180 = v178.f32[0] <= 1000000000.0 ? v179 : *(float *)"(knN";
            v181 = (int)(float)((float)(v152 * v180) + 0.5);
            if (v170 > v181)
              break;
          }
        }
        if (++v142 == 5)
        {
          v182 = 0;
          v242 = (uint32x4_t)v52;
          do
          {
            v183 = *(float *)&v242.i32[v182];
            v184 = fmaxf(v183, 0.0);
            if (v183 <= 65020.0)
              v185 = v184;
            else
              v185 = 65020.0;
            *(float *)&v242.i32[v182] = v185;
            v186 = (float)(v185 * 0.0019531) + 0.5;
            v241.i32[v182] = (int)v186;
            *(float *)&v239.i32[v182++] = (float)(int)v186 * 512.0;
          }
          while (v182 != 3);
          v187 = 0;
          v188 = *(float *)&v242.i32[3]
               + (float)((float)((float)((float)(*(float *)v239.i32 - *(float *)v242.i32)
                                       + (float)(*(float *)&v239.i32[1] - *(float *)&v242.i32[1]))
                               + (float)(*(float *)&v239.i32[2] - *(float *)&v242.i32[2]))
                       * 0.33333);
          v189 = (float)(v188 * 0.0019531) + 0.5;
          if (v188 <= 0.0)
            v189 = 0.5;
          v190 = 127.49;
          if (v188 <= 65020.0)
            v190 = v189;
          *(int8x8_t *)v240.i8 = vorr_s8(vand_s8(*(int8x8_t *)v241.i8, (int8x8_t)0x7F0000003FLL), (int8x8_t)0x80000000C0);
          v240.i32[2] = v241.i8[8] & 0x7F | 0x80;
          v240.i32[3] = (2 * v241.i32[0]) & 0x80 | (int)v190 & 0x7F;
          v191 = &color_unquant_to_uquant_tables[512 * v147];
          do
          {
            v192 = v240.i32[v187];
            do
            {
              v193 = v191[(2 * v192) | 1];
              v194 = v192 & 0xF0;
              v192 -= v194 != (v193 & 0xF0);
            }
            while (v194 != (v193 & 0xF0));
            a2[v187++] = v193;
          }
          while (v187 != 4);
          return 7;
        }
      }
      v221 = v158 >> 9;
      v222 = v181 >> 6;
      if ((_DWORD)v142 == 4)
        LOBYTE(v222) = (int)v158 >> 7;
      if ((_DWORD)v142 == 1)
      {
        v223 = v158 >> 10;
      }
      else
      {
        LOBYTE(v221) = v181 >> 5;
        v223 = v222;
      }
      if ((_DWORD)v142 == 2)
        v224 = v181 >> 7;
      else
        v224 = v158 >> 6;
      v225 = (int)(float)((float)(v152 * v180) + 0.5) & 0x1F | (v224 << 7) | (32 * (v221 & 1)) & 0xBF | ((v223 & 1) << 6);
      v226 = &color_unquant_to_uquant_tables[512 * v147];
      do
      {
        v227 = v226[(2 * v225) | 1];
        v228 = v225 & 0xF0;
        v225 -= v228 != (v227 & 0xF0);
      }
      while (v228 != (v227 & 0xF0));
      *a2 = v160;
      a2[1] = v172;
      a2[2] = v175;
      v8 = 7;
      a2[3] = v227;
      return v8;
    case 8:
      v231 = v15;
      v234 = v16;
      if (a3 > 18)
      {
        v8 = 0;
        v229 = 1.0e30;
        if (a3 != 19)
          goto LABEL_187;
      }
      else
      {
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v242, &v241, a3, v15, v16))
        {
          rgba_delta_unpack(&v240, &v239, v242, v241);
          v54 = vsubq_f32(v231, vcvtq_f32_s32(v240));
          v55 = vsubq_f32(v234, vcvtq_f32_s32(v239));
          v56 = (int8x16_t)vaddq_f32(vmulq_f32(v54, v54), vmulq_f32(v55, v55));
          *(float32x2_t *)v56.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), *(float32x2_t *)v56.i8);
          LODWORD(v229) = vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8).u32[0];
          v8 = 9;
          v57 = v234;
          v58 = v231;
        }
        else
        {
          v8 = 0;
          v229 = 1.0e30;
          v58 = v231;
          v57 = v234;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v240, (int8x16_t *)&v239, a3, v58, v57))
        {
          rgba_delta_unpack(&v238, &v237, (uint32x4_t)v240, (int8x16_t)v239);
          v15 = v231;
          v16 = v234;
          v195 = vsubq_f32(v231, vcvtq_f32_s32(v238));
          v196 = vsubq_f32(v234, vcvtq_f32_s32(v237));
          v197 = (int8x16_t)vaddq_f32(vmulq_f32(v195, v195), vmulq_f32(v196, v196));
          *(float32x2_t *)v197.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL), *(float32x2_t *)v197.i8);
          v198 = vpadd_f32(*(float32x2_t *)v197.i8, *(float32x2_t *)v197.i8).f32[0];
          if (v198 < v229)
          {
            v241 = (int8x16_t)v239;
            v242 = (uint32x4_t)v240;
            v8 = 9;
            v229 = v198;
          }
        }
        else
        {
          v15 = v231;
          v16 = v234;
        }
      }
      if (try_quantize_rgb_blue_contract(&v240, &v239, a3, v15, v16))
      {
        v199 = v239;
        v200 = v240;
        v201 = vdupq_laneq_s32(v240, 2);
        v202 = vdupq_laneq_s32(v239, 2);
        if ((vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v201), vaddq_s32(vaddq_s32(v239, vdupq_lane_s32(*(int32x2_t *)v239.i8, 1)), v202))).u8[0] & 1) != 0)
        {
          v203.i64[0] = -1;
          v203.i64[1] = -1;
          v204.i64[0] = vshlq_s32(vaddq_s32(v201, v240), v203).u64[0];
          v204.i64[1] = v240.i64[1];
          v200.i64[0] = vshlq_s32(vaddq_s32(v202, v239), v203).u64[0];
          v200.i64[1] = v239.i64[1];
          v199 = v204;
        }
        v15 = v231;
        v16 = v234;
        v205 = vsubq_f32(v231, vcvtq_f32_s32(v200));
        v206 = vsubq_f32(v234, vcvtq_f32_s32(v199));
        v207 = (int8x16_t)vaddq_f32(vmulq_f32(v205, v205), vmulq_f32(v206, v206));
        *(float32x2_t *)v207.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL), *(float32x2_t *)v207.i8);
        v208 = vpadd_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v207.i8).f32[0];
        if (v208 < v229)
        {
          v241 = (int8x16_t)v239;
          v242 = (uint32x4_t)v240;
          v8 = 8;
          v229 = v208;
        }
      }
      else
      {
        v15 = v231;
        v16 = v234;
      }
LABEL_187:
      quantize_rgb(&v240, &v239, a3, v15, v16);
      v209 = v239;
      v210 = v240;
      v211 = vdupq_laneq_s32(v240, 2);
      v212 = vdupq_laneq_s32(v239, 2);
      if ((vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v211), vaddq_s32(vaddq_s32(v239, vdupq_lane_s32(*(int32x2_t *)v239.i8, 1)), v212))).u8[0] & 1) != 0)
      {
        v213.i64[0] = -1;
        v213.i64[1] = -1;
        v214.i64[0] = vshlq_s32(vaddq_s32(v211, v240), v213).u64[0];
        v214.i64[1] = v240.i64[1];
        v210.i64[0] = vshlq_s32(vaddq_s32(v212, v239), v213).u64[0];
        v210.i64[1] = v239.i64[1];
        v209 = v214;
      }
      v215 = vsubq_f32(v231, vcvtq_f32_s32(v210));
      v216 = vsubq_f32(v234, vcvtq_f32_s32(v209));
      v217 = (int8x16_t)vaddq_f32(vmulq_f32(v215, v215), vmulq_f32(v216, v216));
      *(float32x2_t *)v217.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL), *(float32x2_t *)v217.i8);
      if (vpadd_f32(*(float32x2_t *)v217.i8, *(float32x2_t *)v217.i8).f32[0] < v229)
      {
        v241 = (int8x16_t)v239;
        v242 = (uint32x4_t)v240;
        v8 = 8;
      }
      v219 = v241;
      v218 = v242;
      *a2 = v242.i8[0];
      a2[1] = v219.i8[0];
      a2[2] = v218.u8[4];
      a2[3] = v219.u8[4];
      a2[4] = v218.u8[8];
      a2[5] = v219.u8[8];
      return v8;
    case 10:
      v59 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      a2[4] = v59[((float)(v15.f32[3] - (float)(int)(float)(v15.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v15.f32[3] + 0.5))];
      a2[5] = v59[((float)(v16.f32[3] - (float)(int)(float)(v16.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v16.f32[3] + 0.5))];
      quantize_rgbs(a2, a3, a6);
      return 10;
    case 11:
      quantize_hdr_rgb(a2, a3, v12, v13);
      return 11;
    case 12:
      v60 = v15.f32[3];
      v61 = v16.f32[3];
      v232 = (__n128)v15;
      v235 = (__n128)v16;
      if (a3 > 18)
      {
        v8 = 0;
        v230 = 1.0e30;
        if (a3 != 19)
          goto LABEL_109;
      }
      else
      {
        v230 = 1.0e30;
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v242, &v241, a3, v15, v16)
          && try_quantize_alpha_delta((uint64_t)&v242, (uint64_t)&v241, a3, v235, v232))
        {
          rgba_delta_unpack(&v240, &v239, v242, v241);
          v62 = vsubq_f32((float32x4_t)v232, vcvtq_f32_s32(v240));
          v63 = vsubq_f32((float32x4_t)v235, vcvtq_f32_s32(v239));
          v64 = (int8x16_t)vaddq_f32(vmulq_f32(v62, v62), vmulq_f32(v63, v63));
          *(float32x2_t *)v64.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v64.i8);
          LODWORD(v230) = vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).u32[0];
          v8 = 13;
          v65 = (float32x4_t)v235;
          v66 = (float32x4_t)v232;
        }
        else
        {
          v8 = 0;
          v66 = (float32x4_t)v232;
          v65 = (float32x4_t)v235;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v240, (int8x16_t *)&v239, a3, v66, v65)
          && try_quantize_alpha_delta((uint64_t)&v240, (uint64_t)&v239, a3, v232, v235))
        {
          rgba_delta_unpack(&v238, &v237, (uint32x4_t)v240, (int8x16_t)v239);
          v15 = (float32x4_t)v232;
          v16 = (float32x4_t)v235;
          v117 = vsubq_f32((float32x4_t)v232, vcvtq_f32_s32(v238));
          v118 = vsubq_f32((float32x4_t)v235, vcvtq_f32_s32(v237));
          v119 = (int8x16_t)vaddq_f32(vmulq_f32(v117, v117), vmulq_f32(v118, v118));
          *(float32x2_t *)v119.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v119.i8);
          v120 = vpadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8).f32[0];
          if (v120 < v230)
          {
            v241 = (int8x16_t)v239;
            v242 = (uint32x4_t)v240;
            v8 = 13;
            v230 = v120;
          }
        }
        else
        {
          v15 = (float32x4_t)v232;
          v16 = (float32x4_t)v235;
        }
      }
      if (try_quantize_rgb_blue_contract(&v240, &v239, a3, v15, v16))
      {
        v121 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
        v240.i32[3] = v121[((float)(v61 - (float)(int)(float)(v61 + 0.5)) >= -0.1) | (2 * (int)(float)(v61 + 0.5))];
        v239.i32[3] = v121[((float)(v60 - (float)(int)(float)(v60 + 0.5)) >= -0.1) | (2 * (int)(float)(v60 + 0.5))];
        v122 = v239;
        v123 = v240;
        v124 = vdupq_laneq_s32(v240, 2);
        v125 = vdupq_laneq_s32(v239, 2);
        if ((vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v124), vaddq_s32(vaddq_s32(v239, vdupq_lane_s32(*(int32x2_t *)v239.i8, 1)), v125))).u8[0] & 1) != 0)
        {
          v126.i64[0] = -1;
          v126.i64[1] = -1;
          v127.i64[0] = vshlq_s32(vaddq_s32(v124, v240), v126).u64[0];
          v127.i64[1] = v240.i64[1];
          v123.i64[0] = vshlq_s32(vaddq_s32(v125, v239), v126).u64[0];
          v123.i64[1] = v239.i64[1];
          v122 = v127;
        }
        v15 = (float32x4_t)v232;
        v16 = (float32x4_t)v235;
        v128 = vsubq_f32((float32x4_t)v232, vcvtq_f32_s32(v123));
        v129 = vsubq_f32((float32x4_t)v235, vcvtq_f32_s32(v122));
        v130 = (int8x16_t)vaddq_f32(vmulq_f32(v128, v128), vmulq_f32(v129, v129));
        *(float32x2_t *)v130.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), *(float32x2_t *)v130.i8);
        v131 = vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8).f32[0];
        if (v131 < v230)
        {
          v241 = (int8x16_t)v239;
          v242 = (uint32x4_t)v240;
          v8 = 12;
          v230 = v131;
        }
      }
      else
      {
        v15 = (float32x4_t)v232;
        v16 = (float32x4_t)v235;
      }
LABEL_109:
      quantize_rgb(&v240, &v239, a3, v15, v16);
      v132 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      v240.i32[3] = v132[((float)(v60 - (float)(int)(float)(v60 + 0.5)) >= -0.1) | (2 * (int)(float)(v60 + 0.5))];
      v239.i32[3] = v132[((float)(v61 - (float)(int)(float)(v61 + 0.5)) >= -0.1) | (2 * (int)(float)(v61 + 0.5))];
      v133 = v239;
      v134 = v240;
      v135 = vdupq_laneq_s32(v240, 2);
      v136 = vdupq_laneq_s32(v239, 2);
      if ((vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v135), vaddq_s32(vaddq_s32(v239, vdupq_lane_s32(*(int32x2_t *)v239.i8, 1)), v136))).u8[0] & 1) != 0)
      {
        v137.i64[0] = -1;
        v137.i64[1] = -1;
        v138.i64[0] = vshlq_s32(vaddq_s32(v135, v240), v137).u64[0];
        v138.i64[1] = v240.i64[1];
        v134.i64[0] = vshlq_s32(vaddq_s32(v136, v239), v137).u64[0];
        v134.i64[1] = v239.i64[1];
        v133 = v138;
      }
      v139 = vsubq_f32((float32x4_t)v232, vcvtq_f32_s32(v134));
      v140 = vsubq_f32((float32x4_t)v235, vcvtq_f32_s32(v133));
      v141 = (int8x16_t)vaddq_f32(vmulq_f32(v139, v139), vmulq_f32(v140, v140));
      *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL), *(float32x2_t *)v141.i8);
      if (vpadd_f32(*(float32x2_t *)v141.i8, *(float32x2_t *)v141.i8).f32[0] < v230)
      {
        v241 = (int8x16_t)v239;
        v242 = (uint32x4_t)v240;
        v8 = 12;
      }
      v244.val[1] = v241;
      v244.val[0] = (int8x16_t)v242;
      *(_QWORD *)a2 = vqtbl2q_s8(v244, (int8x16_t)xmmword_2261A6540).u64[0];
      return v8;
    case 14:
      v67 = vmul_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), (float32x2_t)vdup_n_s32(0x3B7F00FFu));
      v68 = (float32x2_t)vdup_n_s32(0x437F0000u);
      v69 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v67, v68), (int8x8_t)v68, (int8x8_t)vmaxnm_f32(v67, 0));
      v70 = vcvt_s32_f32(vadd_f32(v69, (float32x2_t)0x3F0000003F000000));
      v71 = vcge_f32(vsub_f32(v69, vcvt_f32_s32(v70)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
      v72 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      a2[6] = v72[2 * v70.i32[1] - v71.i32[1]];
      a2[7] = v72[2 * v70.i32[0] - v71.i32[0]];
      quantize_hdr_rgb(a2, a3, v12, v13);
      return 14;
    case 15:
      v233 = v12.f32[3];
      v236 = v13.f32[3];
      quantize_hdr_rgb(a2, a3, v12, v13);
      v73 = 0.5;
      v74 = v233 + 0.5;
      if (v233 <= 0.0)
        v74 = 0.5;
      if (v236 > 0.0)
        v73 = v236 + 0.5;
      v75 = 65280.0;
      if (v233 > 65280.0)
        v74 = 65280.0;
      v76 = (int)v74;
      if (v236 <= 65280.0)
        v75 = v73;
      v77 = (int)v75;
      v78 = a3 - 4;
      v79 = -3;
      v80 = 256;
      v81 = 2;
      v82 = 0x80;
      while (1)
      {
        v83 = (int)((0x80u >> v81) + v76) >> (v79 + 9);
        v84 = color_unquant_to_uquant_tables[512 * v78 + ((2 * (v80 & 0x80 | v83 & 0x7F)) | 1u)];
        if (((v80 ^ v84) & 0x80) == 0)
        {
          v85 = ((int)((0x80u >> v81) + v77) >> (v79 + 9)) - (v83 & 0xFFFFFF80 | v84 & 0x7F);
          v86 = 0x20u >> v81;
          if (v85 >= (signed int)-(0x20u >> v81) && v85 < v86)
          {
            v88 = (v83 >> 7 << (v79 + 7)) | v82 & 0x80 | v85 & (2 * v86 - 1);
            v89 = color_unquant_to_uquant_tables[512 * v78 + 1 + 2 * v88];
            if (((v88 ^ v89) & quantize_hdr_alpha(float,float,unsigned char *,quant_method)::testbits[v81]) == 0)
              break;
          }
        }
        --v81;
        v82 -= 64;
        v80 -= 128;
        v109 = __CFADD__(v79++, 1);
        if (v109)
        {
          v90 = &color_unquant_to_uquant_tables[512 * v78];
          a2[6] = v90[((uint64_t)(v76 + 256) >> 8) | 0x101];
          LOBYTE(v89) = v90[((uint64_t)(v77 + 256) >> 8) | 0x101];
          goto LABEL_193;
        }
      }
      a2[6] = v84;
LABEL_193:
      a2[7] = v89;
      return 15;
    default:
      return v8;
  }
}

uint64_t try_quantize_rgb_delta_blue_contract(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x8_t v8;
  unsigned __int8 v9;
  uint32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  uint32x4_t v21;
  unsigned __int8 v22;
  uint32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unsigned __int8 *v30;
  int8x16_t v31;
  int32x4_t v32;
  unsigned __int8 v33;
  int8x16_t v34;
  uint32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  unsigned __int8 v42;
  int32x4_t v43;
  int8x16_t v44;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int v62;
  uint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x8_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;

  v5 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  v6 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtq_f32(v6, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v5, v7), (int8x16_t)vcltzq_f32(v5))));
  v10 = (uint32x4_t *)&unk_255825000;
  if ((v9 & 1) == 0)
  {
    v70 = a2;
    v74 = a1;
    v62 = a3;
    v66 = v8;
    v55 = v5;
    v58 = v6;
    v5 = v55;
    v6 = v58;
    v8 = v66;
    v10 = (uint32x4_t *)&unk_255825000;
    a3 = v62;
    v47 = v46;
    a2 = v70;
    a1 = v74;
    if (v47)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v5 = v55;
      v6 = v58;
      v8 = v66;
      v10 = (uint32x4_t *)&unk_255825000;
      a3 = v62;
      a2 = v70;
      a1 = v74;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v10[202])))
    return 0;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vcvtq_s32_f32(vaddq_f32(v5, v11));
  v13 = (int8x16_t)vaddq_s32(v12, v12);
  v14 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)vdupq_n_s32(0x1FEu));
  v15 = a3 - 4;
  v16 = &color_unquant_to_uquant_tables[512 * v15];
  v17.i32[0] = v16[v14.i32[0] | 1];
  v17.i32[1] = v16[v14.i32[1] | 1];
  v17.i64[1] = v16[v14.i32[2] | 1];
  v14.i64[0] = 0x10000000100;
  v14.i64[1] = 0x10000000100;
  v18 = vandq_s8(v13, v14);
  v19 = vcvtq_s32_f32(vaddq_f32(v6, v11));
  v20 = (int8x16_t)vsubq_s32(vaddq_s32(v19, v19), (int32x4_t)vorrq_s8(v17, v18));
  v20.i32[3] = 0;
  v19.i64[0] = 0x3F0000003FLL;
  v19.i64[1] = 0x3F0000003FLL;
  v21 = (uint32x4_t)vaddq_s32((int32x4_t)v20, v19);
  if ((v22 & 1) == 0)
  {
    v71 = a2;
    v75 = a1;
    v63 = a3 - 4;
    v67 = v17;
    v56 = v20;
    v59 = v18;
    v54 = v21;
    v21 = v54;
    v20 = v56;
    v18 = v59;
    v17 = v67;
    v15 = v63;
    v10 = (uint32x4_t *)&unk_255825000;
    v49 = v48;
    a2 = v71;
    a1 = v75;
    if (v49)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v21 = v54;
      v20 = v56;
      v18 = v59;
      v17 = v67;
      v15 = v63;
      v10 = (uint32x4_t *)&unk_255825000;
      a2 = v71;
      a1 = v75;
    }
  }
  v23.i64[0] = 0x7F0000007FLL;
  v23.i64[1] = 0x7F0000007FLL;
  v24 = (int8x16_t)vcgtq_u32(v23, v21);
  v25.i64[0] = 0x100000001;
  v25.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v24, v25), v10[202])))
    return 0;
  v26.i64[0] = 0x7F0000007FLL;
  v26.i64[1] = 0x7F0000007FLL;
  v27.i64[0] = -1;
  v27.i64[1] = -1;
  v28 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v18, v27), vandq_s8(v20, v26));
  v29 = (int8x16_t)vaddq_s32((int32x4_t)v28, (int32x4_t)v28);
  v30 = &color_unquant_to_uquant_tables[512 * v15];
  v31.i32[0] = v30[v29.i32[0] | 1];
  v31.i32[1] = v30[v29.i32[1] | 1];
  v31.i64[1] = v30[v29.i32[2] | 1];
  v29.i64[0] = 0xC0000000C0;
  v29.i64[1] = 0xC0000000C0;
  v32 = (int32x4_t)vandq_s8(veorq_s8(v31, v28), v29);
  v32.i32[3] = 0;
  if ((v33 & 1) == 0)
  {
    v72 = a2;
    v76 = a1;
    v68 = v17;
    v60 = v32;
    v64 = v31;
    v32 = v60;
    v31 = v64;
    v17 = v68;
    v10 = (uint32x4_t *)&unk_255825000;
    v51 = v50;
    a2 = v72;
    a1 = v76;
    if (v51)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v32 = v60;
      v31 = v64;
      v17 = v68;
      v10 = (uint32x4_t *)&unk_255825000;
      a2 = v72;
      a1 = v76;
    }
  }
  v34.i64[0] = 0x100000001;
  v34.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v34, (int8x16_t)vceqzq_s32(v32)), v10[202])))
    return 0;
  v35.i64[0] = -1;
  v35.i64[1] = -1;
  v36 = (int8x16_t)vshlq_u32((uint32x4_t)v31, v35);
  v37.i64[0] = 0x3F0000003FLL;
  v37.i64[1] = 0x3F0000003FLL;
  v38.i64[0] = 0x2000000020;
  v38.i64[1] = 0x2000000020;
  v39 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v36, v38) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v36, v37));
  if ((vaddq_s32(vaddq_s32(v39, vdupq_lane_s32(*(int32x2_t *)v39.i8, 1)), vdupq_laneq_s32(v39, 2)).u32[0] & 0x80000000) == 0)
    return 0;
  v40 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v17, v35), (int8x16_t)(*(_OWORD *)&v31 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v39);
  v41 = (int8x16_t)vshrq_n_u32((uint32x4_t)v40, 0x1FuLL);
  if ((v42 & 1) == 0)
  {
    v73 = a2;
    v77 = a1;
    v69 = v17;
    v61 = v40;
    v65 = v31;
    v57 = v41;
    v41 = v57;
    v40 = v61;
    v31 = v65;
    v17 = v69;
    v10 = (uint32x4_t *)&unk_255825000;
    v53 = v52;
    a2 = v73;
    a1 = v77;
    if (v53)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v41 = v57;
      v40 = v61;
      v31 = v65;
      v17 = v69;
      v10 = (uint32x4_t *)&unk_255825000;
      a2 = v73;
      a1 = v77;
    }
  }
  v43.i64[0] = 0xFF000000FFLL;
  v43.i64[1] = 0xFF000000FFLL;
  v44 = (int8x16_t)vcgtq_s32(v40, v43);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v41, v44), (int32x4_t)v44), v10[202])))
    return 0;
  *a1 = v17;
  *a2 = v31;
  return 1;
}

uint64_t try_quantize_rgb_delta(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int8x16_t v14;
  uint32x4_t v15;
  unsigned __int8 v16;
  uint32x4_t *v17;
  uint32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned __int8 *v25;
  int8x16_t v26;
  int32x4_t v27;
  unsigned __int8 v28;
  int8x16_t v29;
  uint32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  unsigned __int8 v38;
  int32x4_t v39;
  int8x16_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;

  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = vcvtq_s32_f32(vaddq_f32(a4, v5));
  v7 = (int8x16_t)vaddq_s32(v6, v6);
  v8 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)vdupq_n_s32(0x1FEu));
  v9 = a3 - 4;
  v10 = &color_unquant_to_uquant_tables[512 * v9];
  v11.i32[0] = v10[v8.i32[0] | 1];
  v11.i32[1] = v10[v8.i32[1] | 1];
  v11.i64[1] = v10[v8.i32[2] | 1];
  v8.i64[0] = 0x10000000100;
  v8.i64[1] = 0x10000000100;
  v12 = vandq_s8(v7, v8);
  v13 = vcvtq_s32_f32(vaddq_f32(a5, v5));
  v14 = (int8x16_t)vsubq_s32(vaddq_s32(v13, v13), (int32x4_t)vorrq_s8(v11, v12));
  v14.i32[3] = 0;
  v13.i64[0] = 0x3F0000003FLL;
  v13.i64[1] = 0x3F0000003FLL;
  v15 = (uint32x4_t)vaddq_s32((int32x4_t)v14, v13);
  v17 = (uint32x4_t *)&unk_255825000;
  if ((v16 & 1) == 0)
  {
    v59 = a2;
    v62 = a1;
    v53 = a3 - 4;
    v56 = v11;
    v48 = v14;
    v50 = v12;
    v47 = v15;
    v15 = v47;
    v14 = v48;
    v12 = v50;
    v11 = v56;
    v9 = v53;
    v17 = (uint32x4_t *)&unk_255825000;
    v42 = v41;
    a2 = v59;
    a1 = v62;
    if (v42)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v15 = v47;
      v14 = v48;
      v12 = v50;
      v11 = v56;
      v9 = v53;
      v17 = (uint32x4_t *)&unk_255825000;
      a2 = v59;
      a1 = v62;
    }
  }
  v18.i64[0] = 0x7F0000007FLL;
  v18.i64[1] = 0x7F0000007FLL;
  v19 = (int8x16_t)vcgtq_u32(v18, v15);
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v19, v20), v17[202])))
    return 0;
  v21.i64[0] = 0x7F0000007FLL;
  v21.i64[1] = 0x7F0000007FLL;
  v22.i64[0] = -1;
  v22.i64[1] = -1;
  v23 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v12, v22), vandq_s8(v14, v21));
  v24 = (int8x16_t)vaddq_s32((int32x4_t)v23, (int32x4_t)v23);
  v25 = &color_unquant_to_uquant_tables[512 * v9];
  v26.i32[0] = v25[v24.i32[0] | 1];
  v26.i32[1] = v25[v24.i32[1] | 1];
  v26.i64[1] = v25[v24.i32[2] | 1];
  v24.i64[0] = 0xC0000000C0;
  v24.i64[1] = 0xC0000000C0;
  v27 = (int32x4_t)vandq_s8(veorq_s8(v26, v23), v24);
  v27.i32[3] = 0;
  if ((v28 & 1) == 0)
  {
    v60 = a2;
    v63 = a1;
    v57 = v11;
    v51 = v27;
    v54 = v26;
    v27 = v51;
    v26 = v54;
    v11 = v57;
    v17 = (uint32x4_t *)&unk_255825000;
    v44 = v43;
    a2 = v60;
    a1 = v63;
    if (v44)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v27 = v51;
      v26 = v54;
      v11 = v57;
      v17 = (uint32x4_t *)&unk_255825000;
      a2 = v60;
      a1 = v63;
    }
  }
  v29.i64[0] = 0x100000001;
  v29.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v29, (int8x16_t)vceqzq_s32(v27)), v17[202])))
    return 0;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  v32 = (int8x16_t)vshlq_u32((uint32x4_t)v26, v31);
  v33.i64[0] = 0x3F0000003FLL;
  v33.i64[1] = 0x3F0000003FLL;
  v34.i64[0] = 0x2000000020;
  v34.i64[1] = 0x2000000020;
  v35 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v32, v34) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v32, v33));
  if ((vaddq_s32(vaddq_s32(v35, vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)), vdupq_laneq_s32(v35, 2)).u32[0] & 0x80000000) != 0)
    return 0;
  v36 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v11, v31), (int8x16_t)(*(_OWORD *)&v26 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v35);
  v37 = (int8x16_t)vshrq_n_u32((uint32x4_t)v36, 0x1FuLL);
  if ((v38 & 1) == 0)
  {
    v61 = a2;
    v64 = a1;
    v58 = v11;
    v52 = v36;
    v55 = v26;
    v49 = v37;
    v37 = v49;
    v36 = v52;
    v26 = v55;
    v11 = v58;
    v17 = (uint32x4_t *)&unk_255825000;
    v46 = v45;
    a2 = v61;
    a1 = v64;
    if (v46)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v37 = v49;
      v36 = v52;
      v26 = v55;
      v11 = v58;
      v17 = (uint32x4_t *)&unk_255825000;
      a2 = v61;
      a1 = v64;
    }
  }
  v39.i64[0] = 0xFF000000FFLL;
  v39.i64[1] = 0xFF000000FFLL;
  v40 = (int8x16_t)vcgtq_s32(v36, v39);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v37, v40), (int32x4_t)v40), v17[202])))
    return 0;
  *a1 = v11;
  *a2 = v26;
  return 1;
}

uint64_t try_quantize_rgb_blue_contract(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x8_t v8;
  unsigned __int8 v9;
  uint32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  __int128 v21;
  __int128 v22;
  int v24;
  int v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  _OWORD *v29;
  int8x8_t v30;
  _OWORD *v31;

  v5 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  v6 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgtq_f32(v5, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v6, v7), (int8x16_t)vcltzq_f32(v6))));
  v10 = (uint32x4_t *)&unk_255825000;
  if ((v9 & 1) == 0)
  {
    v31 = a1;
    v29 = a2;
    v28 = a3;
    v30 = v8;
    v26 = v5;
    v27 = v6;
    v5 = v26;
    v6 = v27;
    v10 = (uint32x4_t *)&unk_255825000;
    v8 = v30;
    a3 = v28;
    a2 = v29;
    v25 = v24;
    a1 = v31;
    if (v25)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v5 = v26;
      v6 = v27;
      v10 = (uint32x4_t *)&unk_255825000;
      v8 = v30;
      a3 = v28;
      a1 = v31;
      a2 = v29;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v10[202])))
    return 0;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vcvtq_s32_f32(vaddq_f32(v5, v11));
  v13 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  v14 = vsubq_s32(vaddq_s32(v12, v12), vcgeq_f32(vsubq_f32(v5, vcvtq_f32_s32(v12)), v13));
  v15 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
  v16 = v15[v14.i32[0]];
  v17 = v15[v14.i32[1]];
  v18 = v15[v14.i32[2]];
  v19 = vcvtq_s32_f32(vaddq_f32(v6, v11));
  v20 = vsubq_s32(vaddq_s32(v19, v19), vcgeq_f32(vsubq_f32(v6, vcvtq_f32_s32(v19)), v13));
  if (v15[v20.i32[1]] + v15[v20.i32[0]] + v15[v20.i32[2]] <= v17 + v16 + v18)
    return 0;
  LODWORD(v21) = v15[v20.i32[0]];
  DWORD1(v21) = v15[v20.i32[1]];
  *((_QWORD *)&v21 + 1) = v15[v20.i32[2]];
  *(_QWORD *)&v22 = __PAIR64__(v17, v16);
  *((_QWORD *)&v22 + 1) = v18;
  *a1 = v21;
  *a2 = v22;
  return 1;
}

__n128 quantize_rgb(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  char *v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int32x4_t v16;
  int32x4_t v17;
  __int128 v18;
  __int128 v19;
  __n128 result;

  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  v7 = (char *)&color_unquant_to_uquant_tables + 512 * a3 - 2048;
  v8 = (float32x4_t)vdupq_n_s32(0xBE4CCCCD);
  v9.i64[0] = 0xFF000000FFLL;
  v9.i64[1] = 0xFF000000FFLL;
  v10 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
  do
  {
    v11 = vmaxq_s32(vcvtq_s32_f32(vaddq_f32(a4, v5)), (int32x4_t)0);
    v12 = vsubq_s32(vaddq_s32(v11, v11), vcgeq_f32(vsubq_f32(a4, vcvtq_f32_s32(v11)), v6));
    v13 = v7[v12.i32[0]];
    v14 = v7[v12.i32[1]];
    v15 = v7[v12.i32[2]];
    a4 = vaddq_f32(a4, v8);
    v16 = vminq_s32(vcvtq_s32_f32(vaddq_f32(a5, v5)), v9);
    v17 = vsubq_s32(vaddq_s32(v16, v16), vcgeq_f32(vsubq_f32(a5, vcvtq_f32_s32(v16)), v6));
    a5 = vaddq_f32(a5, v10);
  }
  while (v14 + v13 + v15 > v7[v17.i32[1]]
                          + v7[v17.i32[0]]
                          + v7[v17.i32[2]]);
  LODWORD(v18) = v7[v17.i32[0]];
  DWORD1(v18) = v7[v17.i32[1]];
  *((_QWORD *)&v18 + 1) = v7[v17.i32[2]];
  *(_QWORD *)&v19 = __PAIR64__(v14, v13);
  *((_QWORD *)&v19 + 1) = v15;
  *a1 = v19;
  *a2 = v18;
  result.n128_u64[0] = v19;
  result.n128_u32[2] = DWORD2(v19);
  return result;
}

_BYTE *quantize_rgbs(_BYTE *result, int a2, int8x16_t a3)
{
  float v3;
  float32x2_t v4;
  float v5;
  float32x2_t v6;
  char *v7;
  int v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  BOOL v17;
  BOOL v18;
  float v19;
  int v20;

  v3 = fmaxf(0.0038911 * *(float *)a3.i32, 0.0);
  v4 = (float32x2_t)vdup_n_s32(0x437F0000u);
  if ((float)(0.0038911 * *(float *)a3.i32) <= 255.0)
    v5 = v3;
  else
    v5 = 255.0;
  v6.i32[1] = a3.i32[1];
  v6.i32[0] = vextq_s8(a3, a3, 8uLL).u32[0];
  v7 = (char *)&color_unquant_to_uquant_tables + 512 * (uint64_t)a2 - 2048;
  v8 = v7[((float)(v5 - (float)(int)(float)(v5 + 0.5)) >= -0.1) | (2 * (int)(float)(v5 + 0.5))];
  v9 = vmul_f32(v6, (float32x2_t)vdup_n_s32(0x3B7F00FFu));
  v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v4, (int8x8_t)vmaxnm_f32(v9, 0));
  v11 = vcvt_s32_f32(vadd_f32(v10, (float32x2_t)0x3F0000003F000000));
  v12 = vcge_f32(vsub_f32(v10, vcvt_f32_s32(v11)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
  v13 = v7[2 * v11.i32[1] - v12.i32[1]];
  v14 = v7[2 * v11.i32[0] - v12.i32[0]];
  v15 = vmuls_lane_f32((float)(0.0038911* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)a3, 2), vaddq_f32((float32x4_t)a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 1))).f32[0])+ 1.0e-10, (float32x4_t)a3, 3)/ (float)((float)(v13 + v8 + v14) + 1.0e-10);
  v16 = (float)(v15 * 256.0) + 0.5;
  if (v15 <= 0.0)
    v16 = 0.5;
  v17 = v15 == 1.0;
  v18 = v15 < 1.0;
  v19 = 256.5;
  if (v18 || v17)
    v19 = v16;
  v20 = (int)v19 & ~((int)v19 >> 31);
  if (v20 >= 255)
    v20 = 255;
  *result = v8;
  result[1] = v13;
  result[2] = v14;
  result[3] = v7[(2 * v20) | 1];
  return result;
}

_BYTE *quantize_hdr_rgb(_BYTE *result, int a2, float32x4_t a3, float32x4_t a4)
{
  float32x2_t v4;
  float32x4_t v5;
  float32x2x2_t v6;
  int32x4_t v7;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  float v29;
  float v30;
  _DWORD *v31;
  unsigned int v32;
  int v33;
  float v34;
  float v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned __int8 v40;
  int v41;
  float32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned __int8 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int8x8_t v54;
  float32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  uint64_t i;
  char v64;
  uint64_t v65;
  char *v66;
  char v67;
  unsigned int v68;
  char v69;
  int v70;
  unsigned int v71;
  int v72;
  int32x2_t v73;
  unsigned int v74;
  char v75;
  unsigned __int8 v76;
  int v77;
  int v78;
  char *v79;
  char v80;
  int v81;
  _DWORD v82[6];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v5 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v6 = (float32x2x2_t)vminnmq_f32(vmaxnmq_f32(a3, (float32x4_t)0), v5);
  v7 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v5);
  if (*(float *)v7.i32 <= *(float *)&v7.i32[1] || *(float *)v7.i32 <= *(float *)&v7.i32[2])
  {
    v11 = (int8x16_t)vrev64q_s32((int32x4_t)v6);
    v10 = (int8x16_t)vrev64q_s32(v7);
    if (*(float *)&v7.i32[1] <= *(float *)&v7.i32[2])
    {
      v11 = vextq_s8(v11, v11, 0xCuLL);
      v10 = vextq_s8(v10, v10, 0xCuLL);
      v9 = 2;
    }
    else
    {
      v11.i64[1] = (uint64_t)v6.val[1];
      v10.i64[1] = v7.i64[1];
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
    v10 = (int8x16_t)v7;
    v11 = (int8x16_t)v6;
  }
  v12 = fmaxf(*(float *)v10.i32, 0.0);
  if (*(float *)v10.i32 > 65535.0)
    v12 = 65535.0;
  v13 = v12 - *(float *)&v10.i32[1];
  v14 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v10.i32[1])) - (float)(v12 - *(float *)v11.i32), *(float *)&v11.i32[1]);
  v15 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v10.i32[2])) - (float)(v12 - *(float *)v11.i32), *(float *)&v11.i32[2]);
  v16 = a2 - 4;
  v17 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  v18 = (float32x2_t)vextq_s8(v10, v10, 4uLL).u64[0];
  v19 = 7;
  v20 = (float32x2_t)vdup_n_s32(0x477FFF00u);
  v21 = (float32x2_t)vdup_n_s32(0xC77FFF00);
  while (1)
  {
    v22 = v19;
    v23 = (float *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_cutoffs + 16 * v19);
    v24 = v23[2];
    v25 = v13 <= *v23 && (float)(v12 - *(float *)&v10.i32[2]) <= *v23;
    v26 = v25 && (float)(v12 - *(float *)v11.i32) <= v23[1];
    v27 = v26 && v14 <= v24;
    if (v27 && v15 <= v24)
    {
      v29 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_scales[v19];
      v30 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_rscales[v19];
      v31 = (_DWORD *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_bits + 16 * v19);
      v32 = (int)(float)((float)(v12 * v29) + 0.5);
      v33 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v32) | 1u)];
      v4.f32[0] = v30 * (float)(int)(v32 & 0xFFFFFF00 | v33);
      v34 = fmaxf(v4.f32[0] - *(float *)v11.i32, 0.0);
      v35 = (float)(v4.f32[0] - *(float *)v11.i32) <= 65535.0 ? v34 : 65535.0;
      v36 = (int)(float)((float)(v29 * v35) + 0.5);
      if (1 << v31[2] > (int)v36)
      {
        v37 = 1 << v31[1];
        v38 = 1 << (v31[3] - 1);
        v39 = (int)(float)((float)(v29 * v35) + 0.5) & 0x3F | ((_DWORD)v22 << 7) | (v32 >> 2) & 0x40;
        do
        {
          v40 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v39) | 1u)];
          v41 = v39 & 0xC0;
          v39 -= v41 != (v40 & 0xC0);
        }
        while (v41 != (v40 & 0xC0));
        v4 = (float32x2_t)vdup_lane_s32((int32x2_t)v4, 0);
        v42 = vsub_f32(v4, v18);
        v43 = vcgt_f32(v42, v20);
        v44 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)v43, (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v42, 0)), v29), (float32x2_t)0x3F0000003F000000));
        if (v37 > v44.i32[0] && v37 > v44.i32[1])
        {
          if (v22 > 7)
            v46 = 0;
          else
            v46 = ((1 << v22) & 0x5B) != 0 ? ((unsigned __int32)v44.i32[0] >> 6) & 1 : (v32 >> 9) & 1;
          if (v22 > 7)
          {
            v47 = 0;
          }
          else if (((1 << v22) & 0x5B) != 0)
          {
            v47 = ((unsigned __int32)v44.i32[1] >> 6) & 1;
          }
          else
          {
            v47 = ((1 << v22) & 0xA0) != 0 ? (v32 >> 10) & 1 : (v36 >> 6) & 1;
          }
          v48 = v44.i8[0] & 0x3F | (v46 << 6) & 0xFFFFFF7F | (((v22 >> 1) & 1) << 7);
          do
          {
            v49 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v48) | 1u)];
            v50 = v48 & 0xC0;
            v48 -= v50 != (v49 & 0xC0);
          }
          while (v50 != (v49 & 0xC0));
          v51 = v44.i8[4] & 0x3F | (v47 << 6) | (32 * (_BYTE)v22) & 0x80;
          do
          {
            v52 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v51) | 1u)];
            v53 = v51 & 0xC0;
            v51 -= v53 != (v52 & 0xC0);
          }
          while (v53 != (v52 & 0xC0));
          v54.i32[0] = v49 & 0x3F;
          v54.i32[1] = v52 & 0xFFFFFF3F;
          *(float *)v43.i32 = v30 * (float)(int)(v36 & 0xFFFFFFC0 | v40 & 0x3F);
          v55 = vsub_f32(vsub_f32(vsub_f32(v4, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v44 & 0xFFFFFFC0FFFFFFC0), v54)), v30)), (float32x2_t)vdup_lane_s32(v43, 0)), v17);
          v56 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v55, v20), (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v55, v21)), v29), (float32x2_t)0x3F0000003F000000));
          v4 = (float32x2_t)vabs_s32(v56);
          v57 = vcgt_s32(vdup_n_s32(v38), (int32x2_t)v4);
          if ((v57.i32[0] & v57.i32[1] & 1) != 0)
            break;
        }
      }
    }
    v19 = v22 - 1;
    if (!v22)
    {
      v58 = 0;
      v59 = (float *)v82;
      vst2_f32(v59, v6);
      v59 += 4;
      *v59 = v6.val[1].f32[0];
      v82[5] = v7.i32[2];
      do
      {
        v60 = *(float *)&v82[v58];
        v61 = fmaxf(v60, 0.0);
        if (v60 <= 65020.0)
          v62 = v61;
        else
          v62 = 65020.0;
        *(float *)&v82[v58++] = v62;
      }
      while (v58 != 6);
      for (i = 0; i != 4; ++i)
        result[i] = color_unquant_to_uquant_tables[512 * v16
                                                 + 1
                                                 + 2 * (int)(float)((float)(*(float *)&v82[i] * 0.0039062) + 0.5)];
      v64 = 0;
      v65 = 4;
      v66 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        v67 = v64;
        v68 = (int)(float)((float)(*(float *)&v82[v65] * 0.0019531) + 0.5) ^ 0xFFFFFF80;
        do
        {
          v69 = v66[(2 * v68) | 1];
          v70 = v68 & 0xC0;
          v68 -= v70 != (v69 & 0xC0);
        }
        while (v70 != (v69 & 0xC0));
        result[v65] = v69;
        v64 = 1;
        v65 = 5;
      }
      while ((v67 & 1) == 0);
      return result;
    }
  }
  switch((int)v22)
  {
    case 0:
    case 2:
      v71 = ((unsigned __int32)v56.i32[0] >> 6) & 1;
      goto LABEL_71;
    case 1:
    case 4:
      v71 = ((unsigned __int32)v44.i32[0] >> 7) & 1;
      goto LABEL_71;
    case 3:
      v71 = (v32 >> 9) & 1;
      goto LABEL_77;
    case 5:
      v71 = (v36 >> 7) & 1;
      goto LABEL_77;
    case 6:
    case 7:
      v71 = (v32 >> 11) & 1;
      goto LABEL_71;
    default:
      v71 = 0;
LABEL_71:
      if (v22 > 7)
      {
        v72 = 0;
      }
      else if (((1 << v22) & 0xE8) != 0)
      {
LABEL_77:
        v72 = (v36 >> 6) & 1;
      }
      else
      {
        v72 = ((unsigned __int32)v56.i32[1] >> 6) & 1;
        if (((1 << v22) & 5) == 0)
          v72 = ((unsigned __int32)v44.i32[1] >> 7) & 1;
      }
      if ((v22 | 2) == 6)
        v73 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v32), (uint32x2_t)0xFFFFFFF6FFFFFFF7);
      else
        v73 = vshr_n_s32(v56, 5uLL);
      v74 = v56.i8[0] & 0x1F | (v71 << 6) | (32 * (v73.i8[0] & 1)) | (v9 << 7);
      v75 = (_BYTE)v9 << 6;
      do
      {
        v76 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v74) | 1u)];
        v77 = v74 & 0xF0;
        v74 -= v77 != (v76 & 0xF0);
      }
      while (v77 != (v76 & 0xF0));
      v78 = (32 * v73.i8[4]) & 0x20 | v75 & 0x80 | v56.i8[4] & 0x1F | (v72 << 6);
      v79 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        v80 = v79[(2 * v78) | 1];
        v81 = v78 & 0xF0;
        v78 -= v81 != (v80 & 0xF0);
      }
      while (v81 != (v80 & 0xF0));
      *result = v33;
      result[1] = v40;
      result[2] = v49;
      result[3] = v52;
      result[4] = v76;
      result[5] = v80;
      break;
  }
  return result;
}

uint64_t try_quantize_alpha_delta(uint64_t a1, uint64_t a2, int a3, __n128 a4, __n128 a5)
{
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = (int)(float)(a4.n128_f32[3] + 0.5);
  v6 = &color_unquant_to_uquant_tables[512 * a3 - 2048];
  v7 = v6[(4 * (v5 & 0x7F)) | 1];
  v8 = v7 | (((v5 >> 7) & 1) << 8);
  v9 = 2 * (int)(float)(a5.n128_f32[3] + 0.5) - v8;
  if ((v9 - 64) < 0xFFFFFF80)
    return 0;
  v10 = v9 & 0x7F | (((2 * v5) & 0x100) >> 1);
  v11 = v6[(2 * v10) | 1];
  if ((v10 ^ v11) > 0x3F || (v11 & 0x7F) + v8 + ((v11 << 25 >> 31) & 0xFFFFFF80) > 0x1FF)
    return 0;
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a2 + 12) = v11;
  return 1;
}

uint64_t unpack_weights(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int32x4_t v6;
  int32x4_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint32x4_t v15;
  const float *v16;
  uint8x8_t v17;
  uint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  const float *v22;
  uint8x8_t v23;
  int8x16_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint32x4_t v29;
  const float *v30;
  uint8x8_t v31;
  uint64_t v32;
  int32x4_t v33;
  uint64_t v34;
  const float *v35;
  uint8x8_t v36;

  v8 = *(_OWORD *)(a2 + 52);
  v9 = *(_OWORD *)(a2 + 68);
  v10 = *(_OWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 100);
  if ((a4 & 1) != 0)
  {
    if (*(_BYTE *)(result + 3))
    {
      v12 = 0;
      v13 = a3 + 6;
      v14.i64[0] = 0xFFFFFF00FFFFFF00;
      v14.i64[1] = 0xFFFFFF00FFFFFF00;
      v15.i64[0] = 0x300000003;
      v15.i64[1] = 0x300000003;
      do
      {
        v16 = (const float *)(v13 + v12);
        v17 = (uint8x8_t)vld1_dup_f32(v16);
        v18 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v17)));
        v19.i64[0] = 0x800000008;
        v19.i64[1] = 0x800000008;
        v20 = a3;
        v21.i64[0] = 0x800000008;
        v21.i64[1] = 0x800000008;
        do
        {
          v22 = (const float *)(v20 + 222);
          v23 = (uint8x8_t)vld1_dup_f32(v22);
          v7.i32[0] = *(_DWORD *)(v20 + 1086);
          v7 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.i8));
          v24 = vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v23)), v14);
          v19 = vmlaq_s32(v19, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v8, v24));
          v21 = vmlaq_s32(v21, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v10, v24));
          v20 += 216;
          --v18;
        }
        while (v18);
        v25 = 4 * v12;
        *(uint32x4_t *)(a5 + v25) = vshlq_u32((uint32x4_t)v19, v15);
        *(uint32x4_t *)(a6 + v25) = vshlq_u32((uint32x4_t)v21, v15);
        v12 += 4;
        a3 += 4;
      }
      while (v12 < *(unsigned __int8 *)(result + 3));
    }
  }
  else if (*(_BYTE *)(result + 3))
  {
    v26 = 0;
    v27 = a3 + 6;
    v28.i64[0] = 0xFFFFFF00FFFFFF00;
    v28.i64[1] = 0xFFFFFF00FFFFFF00;
    v29.i64[0] = 0x300000003;
    v29.i64[1] = 0x300000003;
    do
    {
      v30 = (const float *)(v27 + v26);
      v31 = (uint8x8_t)vld1_dup_f32(v30);
      v32 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)));
      v33.i64[0] = 0x800000008;
      v33.i64[1] = 0x800000008;
      v34 = a3;
      do
      {
        v35 = (const float *)(v34 + 222);
        v36 = (uint8x8_t)vld1_dup_f32(v35);
        v6.i32[0] = *(_DWORD *)(v34 + 1086);
        v6 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v6.i8));
        v33 = vmlaq_s32(v33, v6, (int32x4_t)vqtbl4q_s8(*(int8x16x4_t *)&v8, vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v36)), v28)));
        v34 += 216;
        --v32;
      }
      while (v32);
      *(uint32x4_t *)(a5 + 4 * v26) = vshlq_u32((uint32x4_t)v33, v29);
      v26 += 4;
      a3 += 4;
    }
    while (v26 < *(unsigned __int8 *)(result + 3));
  }
  return result;
}

float32_t compute_symbolic_block_difference_2plane(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  unsigned int v8;
  __n128 v9;
  double v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  int8x8_t v17;
  int8x8_t v18;
  float v19;
  float32x4_t v20;
  const float *v21;
  const float *v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32_t result;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  __int16 v44;
  int32x4_t v45;
  int32x4_t v46;
  _BYTE v47[864];
  _BYTE v48[864];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)a3)
    return 1.0e30;
  unpack_weights(a2, a3, a2+ 129888* *(unsigned __int8 *)(a2 + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a3 + 4) + 11300848) + 11304946)+ 592, 1, (uint64_t)v48, (uint64_t)v47);
  v8 = *(char *)(a3 + 3);
  v44 = 0;
  unpack_color_endpoints(*(_DWORD *)a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v44 + 1, &v44, (uint64_t)&v46, (__n128 *)&v45, v9, v10, v11, v12);
  v16 = *(unsigned __int8 *)(a2 + 3);
  if (*(_BYTE *)(a2 + 3))
  {
    v13.i32[0] = 0;
    v14.i32[0] = *(_DWORD *)a1;
    v17 = (int8x8_t)vdup_lane_s32(vceq_s32(v14, v13), 0);
    v15.i32[0] = a4[222].u8[1];
    v18 = (int8x8_t)vdup_lane_s32(vceq_s32(v15, v13), 0);
    v19 = *(float *)(a1 + 40);
    v20 = a4[221];
    v21 = (const float *)v48;
    v22 = (const float *)v47;
    v23 = (int8x16_t)vceqq_s32(vdupq_n_s32(v8), (int32x4_t)xmmword_2260FF480);
    v24.i64[0] = 0x4000000040;
    v24.i64[1] = 0x4000000040;
    v25.i64[0] = 0x2000000020;
    v25.i64[1] = 0x2000000020;
    v26.i64[0] = 0x500000005;
    v26.i64[1] = 0x500000005;
    v27.i64[0] = 0x700000007;
    v27.i64[1] = 0x700000007;
    v28 = vdupq_n_s32(0x101u);
    v29 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8(vand_s8(vand_s8(v17, v18), (int8x8_t)0xFFFFFFFFFFFFLL), v18)), 0x1FuLL));
    v30 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
    v31 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
    result = -1.0e30;
    v33 = 0uLL;
    do
    {
      v34 = (int8x16_t)vld1q_dup_f32(v21++);
      v35 = (int8x16_t)vld1q_dup_f32(v22++);
      v36 = (int32x4_t)vbslq_s8(v23, v35, v34);
      v38 = (float32x4_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v24, v36), v46), v36, v45), v25), v26);
      v37 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v38, v27), v28), (int8x16_t)v38));
      v38.i32[0] = a4->i32[0];
      v39 = a4[162].f32[0];
      if ((*(_DWORD *)(a1 + 4) & 0x40) != 0)
      {
        if (v37.f32[3] == 0.0)
          return result;
        *(float32x2_t *)v40.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v37.f32, v37, 3), v19);
        v40.f32[2] = v19 * vmuls_lane_f32(v37.f32[3], v37, 2);
        v40.i32[3] = 1.0;
        v38.i32[1] = a4[54].i32[0];
        *(float32x2_t *)v38.f32 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v38.f32, v39), v19);
        v38.f32[2] = v19 * (float)(a4[108].f32[0] * v39);
        v38.i32[3] = 1.0;
        v37 = v40;
      }
      else
      {
        v38.i32[1] = a4[54].i32[0];
        v38.i32[2] = a4[108].i32[0];
        v38.i32[3] = a4[162].i32[0];
      }
      v41 = vsubq_f32(v38, v37);
      v42 = vminnmq_f32(vmaxq_f32(v41, vsubq_f32((float32x4_t)0, v41)), v30);
      v43 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v42, v42));
      *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v43.i8);
      v33 = vaddq_f32(v33, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), 0), v31));
      a4 = (float32x4_t *)((char *)a4 + 4);
      --v16;
    }
    while (v16);
  }
  else
  {
    v33.i32[0] = 0;
  }
  return v33.f32[0];
}

double compute_symbolic_block_difference_1plane(int *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t a5)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int8x8_t v19;
  int8x8_t v20;
  uint64_t v21;
  int32x4_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int v29;
  const float *v30;
  int32x4_t v31;
  float32x4_t v32;
  float *v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  __int16 v46;
  int32x4_t v47;
  int32x4_t v48;
  _DWORD v49[216];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a3)
  {
    v9 = *(unsigned __int8 *)(a3 + 1);
    if (v9 < 2)
      v10 = 0;
    else
      v10 = *(unsigned __int16 *)(a2
                                + ((unint64_t)(v9 - 2) << 11)
                                + 2 * *(unsigned __int16 *)(a3 + 6)
                                + 14660656);
    if ((_DWORD)v9 == 1)
      v11 = 3072;
    else
      v11 = ((_DWORD)v9 << 10) - 2048;
    unpack_weights(a2, a3, a2+ 129888* *(unsigned __int8 *)(a2+ 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a3 + 4) + 11300848)+ 11304946)+ 592, 0, (uint64_t)v49, 0);
    if (!(_DWORD)v9)
    {
      a5.i16[0] = 0;
      a5.i8[2] = 0;
      a5.i8[3] = 0;
      a5.i8[4] = 0;
      a5.i8[5] = 0;
      a5.i8[6] = 0;
      a5.i8[7] = 0;
      return *(double *)a5.i64;
    }
    v12.i32[0] = 0;
    v16 = 0;
    v13.i32[0] = *a1;
    v17 = (int8x8_t)vdup_lane_s32(vceq_s32(v13, v12), 0);
    v18 = a2 + 1088 * v11 + 11317232;
    v14.i32[0] = a4[222].u8[1];
    v19 = (int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v14.i8, v12), 0);
    v14.i64[0] = 0xFFFFFFFFFFFFLL;
    v20 = vand_s8(vand_s8(v17, v19), (int8x8_t)0xFFFFFFFFFFFFLL);
    v21 = 1088 * v10 + 1088 * v11 + a2 + 11317456;
    v22 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8(v20, v19)), 0x1FuLL));
    a5 = 0uLL;
    v43 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
    v44 = vdupq_n_s32(0x101u);
    v41 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
    v42 = (int8x16_t)v22;
    do
    {
      v45 = a5;
      v46 = 0;
      unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + v16 + 8), (unsigned __int8 *)(a3 + 20 + 8 * v16), (unsigned __int8 *)&v46 + 1, &v46, (uint64_t)&v48, (__n128 *)&v47, (__n128)a5, *(double *)&v20, v14, (int32x4_t)v15);
      v23 = *(unsigned __int8 *)(v18 + 1088 * v10 + v16 + 4);
      if (*(_BYTE *)(v18 + 1088 * v10 + v16 + 4))
      {
        v20 = *(int8x8_t *)v47.i8;
        v14.i32[0] = a1[10];
        v24 = (unsigned __int8 *)v21;
        v15 = a4[221];
        a5 = v45;
        v25.i64[0] = 0x4000000040;
        v25.i64[1] = 0x4000000040;
        v26.i64[0] = 0x2000000020;
        v26.i64[1] = 0x2000000020;
        v27.i64[0] = 0x500000005;
        v27.i64[1] = 0x500000005;
        v28.i64[0] = 0x700000007;
        v28.i64[1] = 0x700000007;
        while (1)
        {
          v29 = *v24++;
          v30 = (const float *)&v49[v29];
          v31 = (int32x4_t)vld1q_dup_f32(v30);
          v34 = (float32x4_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v25, v31), v48), v31, v47), v26), v27);
          v32 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v42, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v34, v28), v44), (int8x16_t)v34));
          v33 = &a4->f32[v29];
          v34.f32[0] = *v33;
          v35 = v33[648];
          if ((a1[1] & 0x40) != 0)
          {
            if (v32.f32[3] == 0.0)
            {
              a5.i32[0] = -246811958;
              return *(double *)a5.i64;
            }
            *(float32x2_t *)v36.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v32.f32, v32, 3), *(float *)v14.i32);
            v36.f32[2] = *(float *)v14.i32 * vmuls_lane_f32(v32.f32[3], v32, 2);
            v36.i32[3] = 1.0;
            v34.f32[1] = v33[216];
            *(float32x2_t *)v34.f32 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v34.f32, v35), *(float *)v14.i32);
            v34.f32[2] = *(float *)v14.i32 * (float)(v33[432] * v35);
            v34.i32[3] = 1.0;
            v32 = v36;
          }
          else
          {
            v34.f32[1] = v33[216];
            v34.f32[2] = v33[432];
            v34.f32[3] = v33[648];
          }
          v37 = vsubq_f32(v34, v32);
          v38 = vminnmq_f32(vmaxq_f32(v37, vsubq_f32((float32x4_t)0, v37)), v43);
          v39 = (int8x16_t)vmulq_f32(v15, vmulq_f32(v38, v38));
          *(float32x2_t *)v39.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), *(float32x2_t *)v39.i8);
          a5 = vaddq_f32(a5, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), 0), v41));
          if (!--v23)
            goto LABEL_20;
        }
      }
      a5 = v45;
LABEL_20:
      ++v16;
      v21 += 216;
    }
    while (v16 != v9);
  }
  else
  {
    a5.i32[0] = 1900671690;
  }
  return *(double *)a5.i64;
}

void compute_symbolic_block_difference_1plane_1partition(int *a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  __n128 v8;
  double v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  unsigned int v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  unsigned int v36;
  int8x16_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int32x4_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  __int16 v66;
  int32x4_t v67;
  int32x4_t v68;
  _BYTE v69[872];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a3)
  {
    unpack_weights(a2, a3, a2+ 129888* *(unsigned __int8 *)(a2+ 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a3 + 4) + 11300848)+ 11304946)+ 592, 0, (uint64_t)v69, 0);
    v66 = 0;
    unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v66 + 1, &v66, (uint64_t)&v68, (__n128 *)&v67, v8, v9, v10, v11);
    v15 = *(unsigned __int8 *)(a2 + 3);
    if (*(_BYTE *)(a2 + 3))
    {
      v12.i32[0] = 0;
      v13.i32[0] = 0;
      v16 = 0;
      v14.i8[0] = a4[222].i8[1];
      v17 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v14, v12), 0);
      v14.i32[0] = *a1;
      v18 = vornq_s8(vandq_s8(vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v14, v13), 0), v17), (int8x16_t)xmmword_2261A6760), v17);
      v19 = v18.i32[1];
      v20 = v18.i32[2];
      v21 = v18.i32[3];
      if (v18.i32[0])
        v22 = -1;
      else
        v22 = 0;
      v23 = (int8x16_t)vdupq_n_s32(v22);
      if (v19)
        v24 = -1;
      else
        v24 = 0;
      v25 = (int8x16_t)vdupq_n_s32(v24);
      if (v20)
        v26 = -1;
      else
        v26 = 0;
      v27 = (int8x16_t)vdupq_n_s32(v26);
      v28 = vdupq_lane_s32(*(int32x2_t *)v67.i8, 0);
      v29 = vdupq_lane_s32(*(int32x2_t *)v67.i8, 1);
      v30 = vdupq_laneq_s32(v67, 2);
      v31 = vdupq_laneq_s32(v67, 3);
      v32 = vdupq_lane_s32(*(int32x2_t *)v68.i8, 0);
      v33 = vdupq_lane_s32(*(int32x2_t *)v68.i8, 1);
      v34 = vdupq_laneq_s32(v68, 2);
      v35 = vdupq_laneq_s32(v68, 3);
      if (v21)
        v36 = -1;
      else
        v36 = 0;
      v37 = (int8x16_t)vdupq_n_s32(v36);
      v38 = a4[221];
      v39 = vdupq_n_s32(v15);
      v40 = vdupq_n_s32(0x101u);
      v41 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
      v42 = (int32x4_t)xmmword_2260FF480;
      v43 = (int32x4_t *)v69;
      v44.i64[0] = 0x4000000040;
      v44.i64[1] = 0x4000000040;
      v45.i64[0] = 0x2000000020;
      v45.i64[1] = 0x2000000020;
      v46.i64[0] = 0x500000005;
      v46.i64[1] = 0x500000005;
      v47.i64[0] = 0x700000007;
      v47.i64[1] = 0x700000007;
      v48.i64[0] = 0x400000004;
      v48.i64[1] = 0x400000004;
      v49 = 0uLL;
      do
      {
        v50 = *v43++;
        v51 = vsubq_s32(v44, v50);
        v52 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v32), v50, v28), v45), v46);
        v53 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v33), v50, v29), v45), v46);
        v54 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v34), v50, v30), v45), v46);
        v55 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v35), v50, v31), v45), v46);
        v56 = vsubq_f32(*a4, vcvtq_f32_s32((int32x4_t)vbslq_s8(v23, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v52, v47), v40), v52)));
        v57 = vminnmq_f32(vmaxq_f32(v56, vsubq_f32((float32x4_t)0, v56)), v41);
        v58 = vsubq_f32(a4[54], vcvtq_f32_s32((int32x4_t)vbslq_s8(v25, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v53, v47), v40), v53)));
        v59 = vsubq_f32(a4[108], vcvtq_f32_s32((int32x4_t)vbslq_s8(v27, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v54, v47), v40), v54)));
        v60 = vminnmq_f32(vmaxq_f32(v58, vsubq_f32((float32x4_t)0, v58)), v41);
        v61 = vminnmq_f32(vmaxq_f32(v59, vsubq_f32((float32x4_t)0, v59)), v41);
        v62 = vsubq_f32(a4[162], vcvtq_f32_s32((int32x4_t)vbslq_s8(v37, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v55, v47), v40), v55)));
        v63 = vminnmq_f32(vmaxq_f32(v62, vsubq_f32((float32x4_t)0, v62)), v41);
        v64 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_f32(v57, v57), v38.f32[0]), vmulq_lane_f32(vmulq_f32(v60, v60), *(float32x2_t *)v38.f32, 1)), vmulq_laneq_f32(vmulq_f32(v61, v61), v38, 2)), vmulq_laneq_f32(vmulq_f32(v63, v63), v38, 3));
        v65 = (int8x16_t)vcgtq_s32(v39, v42);
        v42 = vaddq_s32(v42, v48);
        v49 = vaddq_f32(v49, (float32x4_t)vandq_s8(v64, v65));
        v16 += 4;
        ++a4;
      }
      while (v16 < v15);
    }
  }
}

void prepare_angular_tables(void)
{
  uint64_t v0;
  int *v1;
  int *v2;
  uint64_t v3;
  float *v4;
  float *v5;
  __float2 v6;

  v0 = 0;
  v1 = &cos_table;
  v2 = &sin_table;
  do
  {
    v3 = 0;
    ++v0;
    v4 = (float *)v2;
    v5 = (float *)v1;
    do
    {
      v6 = __sincosf_stret((float)((float)v0 * 0.099733) * (float)v3);
      *v4 = v6.__sinval;
      v4 += 32;
      *v5 = v6.__cosval;
      v5 += 32;
      ++v3;
    }
    while (v3 != 64);
    ++v1;
    ++v2;
  }
  while (v0 != 32);
}

void compute_angular_endpoints_1plane(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  float *v11;
  unsigned __int8 *v12;
  _WORD *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  float v22;

  v7 = 0;
  v8 = ~(-1 << (a4 + 1));
  v9 = 8;
  if (a1)
    v9 = 4;
  v10 = (unint64_t)*(unsigned int *)(a2 + v9) << 6;
  v11 = (float *)(a5 + 207008);
  v12 = (unsigned __int8 *)(a2 + 594);
  v13 = (_WORD *)(a2 + 66);
  do
  {
    if ((*v13 & (unsigned __int16)v8) != 0)
    {
      v14 = *((unsigned __int8 *)v13 - 2);
      if (v14 >= 7)
        v14 = 7;
      if (v14 >= a4)
        v15 = a4;
      else
        v15 = v14;
      compute_angular_endpoints_for_quant_levels(*v12, (const float *)(a3 + 4 * (v7 & 0xFFFFFFC0)), v15, v11 - 696, v11);
    }
    v7 += 64;
    v11 += 8;
    v12 += 129888;
    v13 += 3;
  }
  while (v10 != v7);
  v16 = 20;
  if (a1)
    v16 = 16;
  v17 = *(unsigned int *)(a2 + v16);
  v18 = (float *)(a5 + 187840);
  v19 = (unsigned __int8 *)(a2 + 11304947);
  do
  {
    v20 = *v19;
    if (v20 > 7)
    {
      *v18 = 0.0;
      v22 = 1.0;
    }
    else
    {
      v21 = a5 + 32 * *(v19 - 1) + 4 * v20;
      *v18 = *(float *)(v21 + 204224);
      v22 = *(float *)(v21 + 207008);
    }
    v18[2048] = v22;
    ++v18;
    v19 += 6;
    --v17;
  }
  while (v17);
}

void compute_angular_endpoints_for_quant_levels(unsigned int a1, const float *a2, int a3, float *a4, float *a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v25;
  int8x16_t v26;
  uint32x4_t *v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  unint64_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  const float *v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float32x4_t v71;
  unint64_t v72;
  int v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  char *v80;
  uint64_t v81;
  unsigned int v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  const float *v97;
  unint64_t v98;
  _BYTE __b[1352];
  uint64_t v100;

  v8 = 0;
  v9 = 0;
  v100 = *MEMORY[0x24BDAC8D0];
  v10 = steps_for_quant_level[a3];
  v11 = (float32x4_t)vdupq_n_s32(0x427C0000u);
  v12 = a1;
  v13 = (float32x4_t)vdupq_n_s32(0x4B400000u);
  v14.i64[0] = 0x3F0000003FLL;
  v14.i64[1] = 0x3F0000003FLL;
  do
  {
    *(int8x16_t *)&__b[v8 * 4] = vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)&a2[v8], v11), v13), v14);
    v9 += 4;
    v8 += 4;
  }
  while (v9 < a1);
  v15 = 0;
  v16 = 4 * a1;
  v17 = (int8x16_t)vdupq_n_s32(0x3FC90FDBu);
  v18 = 0uLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3E8F5C29u);
  __asm { FMOV            V22.4S, #1.0 }
  v25 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v26.i64[0] = 0x8000000080000000;
  v26.i64[1] = 0x8000000080000000;
  v27 = (uint32x4_t *)&qword_254123000;
  v28 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
  do
  {
    v29 = 0;
    v30 = 0uLL;
    v31 = 0uLL;
    do
    {
      v32 = (uint64_t)*(int *)&__b[v29] << 7;
      v30 = vaddq_f32(v30, *(float32x4_t *)((char *)&cos_table[v15] + v32));
      v31 = vaddq_f32(v31, *(float32x4_t *)((char *)&sin_table[v15] + v32));
      v29 += 4;
    }
    while (v16 != v29);
    v33 = atomic_load((unsigned __int8 *)_MergedGlobals_504);
    if ((v33 & 1) == 0)
    {
      v97 = a2;
      v98 = v15;
      v95 = v12;
      v96 = v16;
      v93 = v17;
      v94 = _Q22;
      v91 = v25;
      v92 = v19;
      v89 = v30;
      v90 = v28;
      v88 = v31;
      v41 = __cxa_guard_acquire(_MergedGlobals_504);
      v31 = v88;
      v30 = v89;
      v28 = v90;
      v25 = v91;
      v26.i64[0] = 0x8000000080000000;
      v26.i64[1] = 0x8000000080000000;
      v19 = v92;
      v17 = v93;
      v18 = 0uLL;
      _Q22 = v94;
      v27 = (uint32x4_t *)&qword_254123000;
      v12 = v95;
      v16 = v96;
      a2 = v97;
      v15 = v98;
      if (v41)
      {
        xmmword_254123EE0 = (__int128)v26;
        __cxa_guard_release(_MergedGlobals_504);
        v31 = v88;
        v30 = v89;
        v28 = v90;
        v25 = v91;
        v26.i64[0] = 0x8000000080000000;
        v26.i64[1] = 0x8000000080000000;
        v19 = v92;
        v17 = v93;
        v18 = 0uLL;
        _Q22 = v94;
        v27 = (uint32x4_t *)&qword_254123000;
        v12 = v95;
        v16 = v96;
        a2 = v97;
        v15 = v98;
      }
    }
    v34 = vdivq_f32(v31, v30);
    v35 = vmaxq_f32(v34, vsubq_f32(v18, v34));
    v36 = (int8x16_t)vcgtq_f32(vmaxq_f32(v35, vsubq_f32(v18, v35)), _Q22);
    v37 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v35, v26), v17);
    v38 = (float32x4_t)vbslq_s8(v36, (int8x16_t)vdivq_f32(_Q22, v35), (int8x16_t)v35);
    v39 = vdivq_f32(v38, vaddq_f32(vmulq_f32(vmulq_f32(v38, v38), v19), _Q22));
    v40 = (float32x4_t)vbslq_s8(v36, (int8x16_t)vsubq_f32(v37, v39), (int8x16_t)v39);
    *(float32x4_t *)&__b[4 * v15 + 1216] = vmulq_f32((float32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_u32(v27[238], (uint32x4_t)v30), (int8x16_t)v40, (int8x16_t)vsubq_f32(v25, v40)), vandq_s8((int8x16_t)v31, v26)), v28);
    v15 += 4;
  }
  while (v15 < v10);
  v42 = 0;
  v43 = (float32x4_t)xmmword_2261A6780;
  v44 = vdupq_n_s32((int)v10 + 3);
  v45.i64[0] = 0x200000002;
  v45.i64[1] = 0x200000002;
  __asm { FMOV            V3.4S, #4.0 }
  do
  {
    v47.i64[0] = 0xC3000000C3000000;
    v47.i64[1] = 0xC3000000C3000000;
    v48.i64[0] = 0x4300000043000000;
    v48.i64[1] = 0x4300000043000000;
    v49 = 0uLL;
    v50 = a2;
    v51 = v12;
    v52 = 0uLL;
    v53 = 0uLL;
    do
    {
      v54 = *v50++;
      v55 = vsubq_f32(vmulq_n_f32(v43, v54), *(float32x4_t *)&__b[4 * v42 + 1216]);
      v56 = vrndnq_f32(v55);
      v57 = vsubq_f32(v55, v56);
      v53 = vaddq_f32(v53, vmulq_f32(v57, v57));
      v58 = (int8x16_t)vcgtq_f32(v48, v56);
      v48 = (float32x4_t)vbslq_s8(v58, (int8x16_t)v56, (int8x16_t)v48);
      v59 = (float32x4_t)vbicq_s8((int8x16_t)v49, v58);
      v60 = vaddq_f32(v57, v57);
      v49 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v56, v48), (int8x16_t)vsubq_f32(vaddq_f32(v59, _Q22), v60), (int8x16_t)v59);
      v61 = (int8x16_t)vcgtq_f32(v56, v47);
      v47 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v56, (int8x16_t)v47);
      v62 = (float32x4_t)vbicq_s8((int8x16_t)v52, v61);
      v52 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v56, v47), (int8x16_t)vaddq_f32(v60, vaddq_f32(v62, _Q22)), (int8x16_t)v62);
      --v51;
    }
    while (v51);
    *(float32x4_t *)&__b[4 * v42 + 1088] = v48;
    *(int32x4_t *)&__b[4 * v42 + 960] = vmaxq_s32(vminq_s32(vcvtq_s32_f32(vaddq_f32(vsubq_f32(v47, v48), _Q22)), v44), v45);
    v63 = vdivq_f32(_Q22, v43);
    v64 = vmulq_f32(v63, v63);
    *(float32x4_t *)&__b[4 * v42 + 832] = vmulq_f32(v64, v53);
    *(float32x4_t *)&__b[4 * v42 + 704] = vmulq_f32(v64, v49);
    *(float32x4_t *)&__b[4 * v42 + 576] = vmulq_f32(v64, v52);
    v43 = vaddq_f32(v43, _Q3);
    v42 += 4;
  }
  while (v42 < v10);
  memset_pattern16(__b, &unk_2261A6790, 16 * v10 + 64);
  v67 = 0;
  if (v10 <= 1)
    v68 = 1;
  else
    v68 = v10;
  do
  {
    v69 = *(int *)&__b[4 * v67 + 960];
    v65.i32[0] = *(_DWORD *)&__b[4 * v67 + 832];
    v66.f32[0] = v65.f32[0] + *(float *)&__b[4 * v67 + 704];
    v70 = *(float *)&__b[4 * v67 + 576];
    v71 = *(float32x4_t *)&__b[16 * v69];
    LODWORD(v72) = v65.i32[0];
    *((float *)&v72 + 1) = (float)v67;
    v73 = v69 - 1;
    v74 = *(float32x4_t *)&__b[16 * (int)v69 - 16];
    *(int16x4_t *)v75.i8 = vdup_lane_s16(vmovn_s32(vcgtq_f32(v71, v65)), 0);
    v65.f32[0] = v65.f32[0] + v70;
    v76.i64[1] = 1065353216;
    v76.i32[0] = v66.i32[0];
    *(float *)&v76.i32[1] = (float)v67;
    v77 = vdup_lane_s16(vmovn_s32(vcgtq_f32(v74, v66)), 0);
    v66.f32[0] = v66.f32[0] + v70;
    v78 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v77), v76, (int8x16_t)v74);
    *(int8x16_t *)&__b[16 * v69] = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v75.i8), (int8x16_t)v72, (int8x16_t)v71);
    LODWORD(v72) = v65.i32[0];
    *((float *)&v72 + 1) = (float)v67;
    LODWORD(v69) = v69 - 2;
    v79 = *(float32x4_t *)&__b[16 * (int)v69];
    v75.i64[1] = 1065353216;
    v75.i32[0] = v66.i32[0];
    *(float *)&v75.i32[1] = (float)v67;
    v66 = (float32x4_t)vcgtq_f32(v79, v66);
    *(int16x4_t *)v66.f32 = vdup_lane_s16(vmovn_s32((int32x4_t)v66), 0);
    *(int8x16_t *)&__b[16 * v73] = vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(vmovn_s32(vcgtq_f32(v78, v65)), 0)), (int8x16_t)v72, (int8x16_t)v78);
    v65 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v66.f32), v75, (int8x16_t)v79);
    *(float32x4_t *)&__b[16 * (int)v69] = v65;
    ++v67;
  }
  while (v68 != v67);
  v80 = steps_for_quant_level;
  if ((a3 + 1) > 1)
    v81 = (a3 + 1);
  else
    v81 = 1;
  do
  {
    v82 = *v80++;
    v83 = (float *)&__b[16 * v82];
    v84 = v83[2];
    LODWORD(v83) = (int)v83[1] & ~((int)v83[1] >> 31);
    v85 = *(float *)&__b[4 * v83 + 1088] + v84;
    v86 = 1.0 / (float)((float)(int)v83 + 1.0);
    v87 = *(float *)&__b[4 * v83 + 1216];
    *a4++ = (float)(v87 + v85) * v86;
    *a5++ = v86 * (float)(v87 + (float)((float)(v85 + (float)v82) + -1.0));
    --v81;
  }
  while (v81);
}

void compute_angular_endpoints_2planes(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  unsigned __int8 *v20;
  _DWORD *v21;
  unint64_t v22;
  float *v23;
  float v24;
  int v28;

  v5 = 0;
  v6 = 0;
  v7 = a1[2];
  v28 = ~(-1 << (a3 + 1));
  v8 = (float *)(a4 + 228960);
  v9 = (float *)(a4 + 204224);
  v10 = (unsigned __int8 *)a1 + 65;
  v11 = (unsigned __int8 *)a1 + 594;
  do
  {
    if ((*(_WORD *)(v10 + 3) & (unsigned __int16)v28) != 0)
    {
      v12 = *v11;
      v13 = *v10;
      if (v13 >= 7)
        v13 = 7;
      if (v13 >= a3)
        v14 = a3;
      else
        v14 = v13;
      compute_angular_endpoints_for_quant_levels(*v11, (const float *)(a2 + 4 * (v5 & 0xFFFFFFC0)), v14, v9, v9 + 696);
      compute_angular_endpoints_for_quant_levels(v12, (const float *)(a2 + 4 * (v5 & 0xFFFFFFC0) + 128), v14, v8 - 696, v8);
      v7 = a1[2];
    }
    ++v6;
    v8 += 8;
    v9 += 8;
    v5 += 64;
    v10 += 6;
    v11 += 129888;
  }
  while (v6 < v7);
  v16 = a1[5];
  v15 = a1[6];
  if (v16 < v15)
  {
    v17 = v15 - v16;
    v18 = a4 + 4 * v16;
    v19 = (float *)(v18 + 217984);
    v20 = (unsigned __int8 *)a1 + 6 * v16 + 11304947;
    v21 = (_DWORD *)(v18 + 187840);
    do
    {
      v22 = *v20;
      if (v22 > 7)
      {
        *v21 = 0;
        v21[2048] = 1065353216;
        v24 = 1.0;
        *(v19 - 2048) = 0.0;
      }
      else
      {
        v23 = (float *)(a4 + 32 * *(v20 - 1) + 4 * v22);
        *v21 = *((_DWORD *)v23 + 51056);
        v21[2048] = *((_DWORD *)v23 + 51752);
        *(v19 - 2048) = v23[56544];
        v24 = v23[57240];
      }
      *v19++ = v24;
      v20 += 6;
      ++v21;
      --v17;
    }
    while (v17);
  }
}

void init_partition_tables(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a1 + 11317232;
  v7 = a1 + 12431344;
  v8 = a1 + 13545456;
  generate_one_partition_info_entry((unsigned __int8 *)a1, 1, 0, 0, a1 + 14659568);
  *(_DWORD *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 48) = 1;
  v9 = operator new[]();
  build_partition_table_for_one_partition_count((unsigned __int8 *)a1, a2, a3, 2u, v6, v9);
  build_partition_table_for_one_partition_count((unsigned __int8 *)a1, a2, a3, 3u, v7, v9);
  build_partition_table_for_one_partition_count((unsigned __int8 *)a1, a2, a3, 4u, v8, v9);
  JUMPOUT(0x227693394);
}

BOOL generate_one_partition_info_entry(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  char v31;
  char v32;
  unsigned int v33;
  char v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  char v45;
  char v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int16x8_t v70;
  uint64_t v71;
  uint64_t i;
  uint64_t v73;
  __int16 v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  char v89;
  int32x4_t v90;
  uint64_t v91;

  v76 = a3;
  v91 = *MEMORY[0x24BDAC8D0];
  v8 = a1[3];
  v90 = 0uLL;
  v9 = a1[2];
  if (a1[2])
  {
    v10 = 0;
    v11 = 65537
        * ((-287438703 * (a3 + (a2 << 10) - 1024)) ^ ((-287438703 * (a3 + (a2 << 10) - 1024)) >> 5));
    v12 = v11 ^ (v11 >> 7) ^ ((v11 ^ (v11 >> 7)) >> 3);
    v13 = v12 ^ (v12 << 6);
    v14 = v13 ^ (v13 >> 17);
    v15 = a5 + 8;
    v16 = v8 < 0x20;
    v17 = (v14 & 0xF) * (v14 & 0xF);
    HIDWORD(v18) = v14;
    LODWORD(v18) = v14;
    v19 = (v14 >> 4) * (v14 >> 4);
    v20 = ((v14 >> 8) & 0xF) * ((v14 >> 8) & 0xF);
    v21 = ((unsigned __int16)v14 >> 12) * ((unsigned __int16)v14 >> 12);
    v22 = (HIWORD(v13) & 0xF) * (HIWORD(v13) & 0xF);
    v23 = ((v13 >> 20) & 0xF) * ((v13 >> 20) & 0xF);
    v24 = (HIBYTE(v13) & 0xF) * (HIBYTE(v13) & 0xF);
    v25 = (v13 >> 28) * (v13 >> 28);
    v26 = ((v13 >> 18) & 0xF) * ((v13 >> 18) & 0xF);
    v27 = ((v13 >> 22) & 0xF) * ((v13 >> 22) & 0xF);
    v28 = ((v13 >> 26) & 0xF) * ((v13 >> 26) & 0xF);
    v29 = ((v18 >> 30) & 0xF) * ((v18 >> 30) & 0xF);
    if ((v76 & 2) != 0)
      v30 = 4;
    else
      v30 = 5;
    v84 = v14 >> 14;
    v83 = v14 >> 10;
    if (a2 == 3)
      v31 = 6;
    else
      v31 = 5;
    v81 = v14 >> 2;
    v82 = v14 >> 6;
    if ((v76 & 1) != 0)
      v32 = v30;
    else
      v32 = v31;
    v33 = v17 >> v32;
    if ((v76 & 1) != 0)
      v34 = v31;
    else
      v34 = v30;
    if ((v76 & 0x10) != 0)
      v35 = v32;
    else
      v35 = v34;
    v36 = v20 >> v32;
    v88 = v21 >> v34;
    v89 = v19 >> v34;
    v37 = v22 >> v32;
    v38 = v24 >> v32;
    v86 = v25 >> v34;
    v87 = v23 >> v34;
    v79 = v27 >> v35;
    v80 = v26 >> v35;
    v78 = v28 >> v35;
    v39 = 0;
    v77 = v29 >> v35;
    v40 = a1[1];
    v41 = v40;
    do
    {
      if (v41)
      {
        v42 = 0;
        v85 = v39;
        v43 = v39 << v16;
        v44 = *a1;
        v45 = v84 + v43 * v78;
        v46 = v83 + v43 * v77;
        v47 = v82 + v43 * v80;
        v48 = v81 + v43 * v79;
        do
        {
          if (v44)
          {
            v49 = 0;
            do
            {
              v50 = 0;
              v51 = (v45 + (v42 << v16) * v89 + ((_DWORD)v49 << v16) * (_BYTE)v33) & 0x3F;
              v52 = (v46
                   + (v42 << v16) * (_BYTE)v88
                   + ((_DWORD)v49 << v16) * (_BYTE)v36) & 0x3F;
              v53 = (v47 + (v42 << v16) * v87 + ((_DWORD)v49 << v16) * v37) & 0x3F;
              v54 = (v48
                   + (v42 << v16) * (_BYTE)v86
                   + ((_DWORD)v49 << v16) * (_BYTE)v38) & 0x3F;
              if (a2 < 4)
                v54 = 0;
              if (a2 < 3)
                v53 = 0;
              if (a2 < 2)
                v52 = 0;
              if (v51 < v52 || v51 < v53 || v51 < v54)
              {
                if (v52 >= v53 && v52 >= v54)
                {
                  v50 = 1;
                }
                else if (v53 >= v54)
                {
                  v50 = 2;
                }
                else
                {
                  v50 = 3;
                }
              }
              v58 = v90.i32[v50];
              v90.i32[v50] = v58 + 1;
              *(_BYTE *)(a5 + 216 * v50 + v58 + 224) = v10 + v49;
              *(_BYTE *)(v15 + v49) = v50;
              v44 = *a1;
              ++v49;
            }
            while (v49 < v44);
            v40 = a1[1];
            v15 += v49;
            v10 += v49;
          }
          ++v42;
        }
        while (v42 < v40);
        v9 = a1[2];
        v41 = v40;
        v39 = v85;
      }
      ++v39;
    }
    while (v39 < v9);
  }
  if (a2)
  {
    v59 = 0;
    v60 = a5 + 224;
    do
    {
      v61 = v90.i32[v59];
      v62 = (v61 + 3) & 0xFFFFFFFC;
      if ((int)v61 < v62)
      {
        v63 = (_BYTE *)(a5 + 216 * v59 + v61 + 223);
        v64 = v62 - v61;
        v65 = (_BYTE *)(v60 + v61);
        do
        {
          *v65++ = *v63;
          --v64;
        }
        while (v64);
      }
      ++v59;
      v60 += 216;
    }
    while (v59 != a2);
  }
  if (v90.i32[0])
  {
    if (v90.i32[1])
    {
      if (v90.i32[2])
      {
        if (v90.i32[3])
          v66 = 4;
        else
          v66 = 3;
      }
      else
      {
        v66 = 2;
      }
    }
    else
    {
      v66 = 1;
    }
  }
  else
  {
    v66 = 0;
  }
  *(_WORD *)a5 = v66;
  *(_WORD *)(a5 + 2) = v76;
  v67 = (uint64_t)&a1[24 * a4 + 14683248];
  v68 = (uint64_t)&a1[16 * a4 + 14666864];
  if (a2 != 2)
    v68 = 0;
  if (a2 != 3)
    v67 = v68;
  if (a2 == 4)
    v69 = &a1[32 * a4 + 14707824];
  else
    v69 = (unsigned __int8 *)v67;
  v70.i64[1] = v90.i64[1];
  *(int16x4_t *)v70.i8 = vmovn_s32(v90);
  *(_DWORD *)(a5 + 4) = vmovn_s16(v70).u32[0];
  if (v69)
  {
    if (a2)
      bzero(v69, 8 * a2);
    if (a1[3] >= 0x40u)
      v71 = 64;
    else
      v71 = a1[3];
    if ((_DWORD)v71)
    {
      for (i = 0; i != v71; ++i)
      {
        v73 = *(unsigned __int8 *)(a5 + a1[i + 14666800] + 8);
        *(_QWORD *)&v69[8 * v73] |= 1 << i;
      }
    }
  }
  return v66 == a2;
}

void build_partition_table_for_one_partition_count(unsigned __int8 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  _BOOL4 one_partition_info_entry;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _BYTE v30[1024];
  _QWORD v31[4];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v10 = &a1[4 * a4 - 4];
  *((_DWORD *)v10 + 12) = 0;
  v29 = v10 + 48;
  *((_DWORD *)v10 + 8) = 0;
  v27 = v10 + 32;
  if (a2)
  {
    if (a4 > a3)
      return;
    v11 = 1;
  }
  else
  {
    v11 = 2;
  }
  v26 = v11;
  bzero(v30, 0x400uLL);
  v12 = 0;
  v13 = 0;
  v28 = a4 - 2;
  do
  {
    for (i = 0; i != 1024; ++i)
    {
      if (v13 == 1)
      {
        if (v30[i])
          continue;
        v15 = v12;
        one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
LABEL_12:
        v17 = a1[3];
        v18 = a6 + 56 * v12;
        *(_QWORD *)(v18 + 48) = 0;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
        v31[0] = -1;
        v31[1] = -1;
        if (v17)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = *(unsigned __int8 *)(a5 + 1088 * v15 + 8 + v20);
            v23 = *((_DWORD *)v31 + v22);
            if (v23 < 0)
            {
              *((_DWORD *)v31 + v22) = v21;
              v23 = v21++;
            }
            *(_QWORD *)(v18 + 8 * (v20++ >> 5)) |= (uint64_t)v23 << (v19 & 0x3E);
            v19 += 2;
          }
          while (v17 != v20);
        }
        if (v12)
        {
          v24 = 0;
          while (1)
          {
            v25 = (_QWORD *)(a6 + 8 * v24);
            if (*(_QWORD *)v18 == *v25
              && *(_QWORD *)(v18 + 8) == v25[1]
              && *(_QWORD *)(v18 + 16) == v25[2]
              && *(_QWORD *)(v18 + 24) == v25[3]
              && *(_QWORD *)(v18 + 32) == v25[4]
              && *(_QWORD *)(v18 + 40) == v25[5]
              && *(_QWORD *)(v18 + 48) == v25[6])
            {
              break;
            }
            v24 += 7;
            if (!--v15)
              goto LABEL_27;
          }
        }
        else
        {
LABEL_27:
          if (one_partition_info_entry)
          {
            if (v13)
              continue;
            *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
            ++*v27;
            ++*v29;
            v30[i] = 1;
LABEL_32:
            ++v12;
            continue;
          }
        }
        if (v13 != 1)
          continue;
        *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
        ++*v29;
        goto LABEL_32;
      }
      v15 = v12;
      one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
      if (v13 || one_partition_info_entry)
        goto LABEL_12;
    }
    ++v13;
  }
  while (v13 != v26);
}

uint64_t find_best_partition_candidates(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7, double a8, double a9, double a10)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  float32x4_t v20;
  int v21;
  uint64_t v22;
  __int32 *v23;
  __int128 v24;
  unsigned __int8 *v25;
  __int32 *v26;
  unint64_t v27;
  unsigned int v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  __int32 *v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  int8x16_t v39;
  float v40;
  unsigned int v41;
  char v42;
  BOOL v43;
  char v44;
  unint64_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  __int32 *v57;
  float32x4_t v58;
  float *v59;
  __int32 *v60;
  unint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 v76;
  unsigned __int16 v77;
  uint64_t v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  _BYTE *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  __int128 v101;
  _BYTE *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  unsigned __int16 v113;
  unsigned __int16 v114;
  unsigned __int16 v115;
  unsigned __int16 v116;
  _QWORD *v117;
  unsigned __int16 v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  uint64_t v142;
  float v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  unsigned __int8 v154;
  int16x4_t v155;
  uint16x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  uint32x4_t v159;
  double v160;
  int v161;
  unsigned int v162;
  size_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  unsigned int v173;
  unsigned __int16 *v174;
  uint64_t v175;
  _BYTE *v176;
  float32x4_t v177;
  int8x16_t v178;
  int32x2_t v179;
  float32x4_t v180;
  _BYTE *v181;
  float32x4_t v182;
  int8x16_t v183;
  int32x2_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  __int128 v190;
  unint64_t v191;
  float v192;
  float v193;
  unsigned __int8 *v194;
  unsigned int v195;
  float v196;
  float v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  uint64_t v202;
  unsigned __int16 *v203;
  unint64_t v204;
  float32x4_t v205;
  int8x16_t v206;
  int32x2_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  __int128 v211;
  int8x16_t v212;
  _OWORD *f32;
  float32x4_t *v214;
  float32x4_t v215;
  int8x16_t v216;
  int32x2_t v217;
  float32x4_t *v218;
  float v219;
  uint64_t v220;
  float v221;
  float v222;
  uint64_t v223;
  float v224;
  float v225;
  float32x4_t v226;
  float32x4_t v227;
  int8x16_t v228;
  int8x16_t v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t result;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v247;
  uint64_t v248;
  uint64_t v250;
  uint64_t v252;
  uint64_t v254;
  unsigned __int16 v255;
  uint64_t v256;
  unsigned int v257[4];
  unsigned __int16 v258;
  unsigned int v259;
  unsigned int v260[4];
  uint64_t v261;
  float v262[4];
  __int128 v263;
  __int128 v264;
  float32x4_t v265[8];
  unsigned int v266[8];
  float v267[8];
  unsigned int v268[8];
  float __b[8];
  float32x4_t v270[128];
  _DWORD v271[16];
  _BYTE v272[960];
  _BYTE v273[224];
  _DWORD v274[34];
  uint64_t v275;

  v12 = a1;
  v275 = *MEMORY[0x24BDAC8D0];
  v13 = (_QWORD *)(a1 + 14707848);
  v14 = (uint64_t *)(a1 + 14683264);
  v15 = (_QWORD *)(a1 + 14666872);
  v16 = *(unsigned __int8 *)(a1 + 3);
  v17 = a3;
  if (v16 >= 0x15)
  {
    if (v16 >= 0x20)
      v18 = flt_2261A67B0[v16 < 0x2A];
    else
      v18 = 0.04;
  }
  else
  {
    v18 = 0.03;
  }
  v19 = 0;
  v20 = *(float32x4_t *)(a2 + 3536);
  if (a3 <= 2)
    v21 = 2;
  else
    v21 = a3;
  v22 = (v21 - 1);
  v23 = (__int32 *)(a2 + 4 * (0x239E9 % v16));
  v24 = 0uLL;
  LODWORD(a10) = 1.0;
  do
  {
    if (v19)
    {
      memset(v270, 0, 64);
      v25 = v273;
      v26 = (__int32 *)a2;
      v27 = v16;
      v271[0] = 0;
      do
      {
        v28 = *v25++;
        v29.i32[0] = *v26;
        v29.i32[1] = v26[216];
        v29.i32[2] = v26[432];
        v29.i32[3] = v26[648];
        v30 = vaddq_f32(v270[v28], v29);
        v270[v28] = v30;
        ++*((_BYTE *)v271 + v28);
        ++v26;
        --v27;
      }
      while (v27);
      v31 = 0;
      do
      {
        v30.i8[0] = *((_BYTE *)v271 + v31);
        v30 = vmulq_n_f32(v270[v31], 1.0 / (float)v30.u32[0]);
        v265[v31++] = v30;
      }
      while (a3 != v31);
    }
    else
    {
      v45 = 0;
      v46.i32[0] = *v23;
      v46.i32[1] = v23[216];
      v46.i32[2] = v23[432];
      v46.i32[3] = v23[648];
      v265[0] = v46;
      v47 = 0.0;
      do
      {
        v48.i32[0] = *(_DWORD *)(a2 + v45);
        v48.i32[1] = *(_DWORD *)(a2 + v45 + 864);
        v48.i32[2] = *(_DWORD *)(a2 + v45 + 1728);
        v48.i32[3] = *(_DWORD *)(a2 + v45 + 2592);
        v49 = vsubq_f32(v48, v46);
        v50 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v49, v49));
        *(float32x2_t *)v50.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), *(float32x2_t *)v50.i8);
        *(float *)v50.i32 = vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8).f32[0];
        v47 = v47 + *(float *)v50.i32;
        v270[0].i32[v45 / 4] = v50.i32[0];
        v45 += 4;
      }
      while (4 * v16 != v45);
      v51 = 1;
      v52 = 3 * a3 - 6;
      while (1)
      {
        v53 = 0;
        v54 = flt_2261A67B8[v52++];
        v55 = v47 * v54;
        v56 = 0.0;
        while (1)
        {
          v56 = v56 + v270[0].f32[v53];
          if (v56 >= v55)
            break;
          if (v16 == ++v53)
          {
            LODWORD(v53) = v16;
            break;
          }
        }
        if (v53 >= (int)v16 - 1)
          LODWORD(v53) = v16 - 1;
        v57 = (__int32 *)(a2 + 4 * v53);
        v58.i32[0] = *v57;
        v58.i32[1] = v57[216];
        v58.i32[2] = v57[432];
        v58.i32[3] = v57[648];
        v265[v51] = v58;
        if (v51 == v22)
          break;
        ++v51;
        v47 = 0.0;
        v59 = (float *)v270;
        v60 = (__int32 *)a2;
        v61 = v16;
        do
        {
          v62.i32[0] = *v60;
          v62.i32[1] = v60[216];
          v62.i32[2] = v60[432];
          v62.i32[3] = v60[648];
          v63 = vsubq_f32(v62, v58);
          v64 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v63, v63));
          *(float32x2_t *)v64.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v64.i8);
          v65 = vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
          if (v65 >= *v59)
            v65 = *v59;
          v47 = v47 + v65;
          *v59++ = v65;
          ++v60;
          --v61;
        }
        while (v61);
      }
    }
    v32 = 0;
    v270[0].i32[0] = 0;
    do
    {
      v33 = 0;
      v34 = 0;
      v35 = (__int32 *)(a2 + 4 * v32);
      v36.i32[0] = *v35;
      v36.i32[1] = v35[216];
      v36.i32[2] = v35[432];
      v36.i32[3] = v35[648];
      v37 = 3.4028e38;
      do
      {
        v38 = vsubq_f32(v36, v265[v33]);
        v39 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v38, v38));
        *(float32x2_t *)v39.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), *(float32x2_t *)v39.i8);
        v40 = vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8).f32[0];
        if (v40 < v37)
        {
          v34 = v33;
          v37 = v40;
        }
        ++v33;
      }
      while (a3 != v33);
      v273[v32] = v34;
      ++v270[0].i8[v34];
      ++v32;
    }
    while (v32 != v16);
    v41 = 0;
    v42 = 0;
    do
    {
      while (!v270[0].i8[v41])
      {
        --v270[0].i8[v273[v41]];
        ++v270[0].i8[v41];
        v273[v41] = v41;
        v42 = v41 + 1 < a3;
        if (v41 + 1 < a3)
          ++v41;
        else
          v41 = 0;
      }
      v43 = v41 + 1 < a3;
      v44 = v43 | v42;
      if (v41 + 1 < a3)
        ++v41;
      else
        v41 = 0;
      v42 &= v43;
    }
    while ((v44 & 1) != 0);
    ++v19;
  }
  while (v19 != 3);
  v66 = 0;
  if (v16 >= 0x40)
    v67 = 64;
  else
    v67 = v16;
  v263 = 0uLL;
  v264 = 0uLL;
  do
  {
    v68 = v273[*(unsigned __int8 *)(a1 + 14666800 + v66)];
    *((_QWORD *)&v263 + v68) |= 1 << v66++;
  }
  while (v67 != v66);
  v69 = *(unsigned int *)(a1 + 4 * (a3 - 1) + 32);
  if (a3 == 2)
  {
    v95 = v271;
    v96 = v263;
    v97 = *(unsigned int *)(a1 + 36);
    do
    {
      v98 = *(v15 - 1);
      v99 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v15 ^ *((_QWORD *)&v96 + 1))))
          + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v98 ^ v96)));
      v100 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v98 ^ *((_QWORD *)&v96 + 1))))
           + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v15 ^ v96)));
      if (v99 < v100)
        v100 = v99;
      *v95++ = v100 >> 1;
      v15 += 2;
      --v97;
    }
    while (v97);
  }
  else if (a3 == 3)
  {
    v70 = v263;
    v71 = v271;
    v72 = *(unsigned int *)(a1 + 40);
    v73 = v264;
    do
    {
      v74 = *(v14 - 2);
      v75 = *(v14 - 1);
      v76 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v74 ^ v70)));
      v77 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v75 ^ v70)));
      v78 = *v14;
      v14 += 3;
      v79 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v78 ^ v70)));
      v80 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v74 ^ *((_QWORD *)&v70 + 1))));
      v81 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v75 ^ *((_QWORD *)&v70 + 1))));
      v82 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v78 ^ *((_QWORD *)&v70 + 1))));
      v83 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v74 ^ v73)));
      v84 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v75 ^ v73)));
      v85 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v78 ^ v73)));
      v86 = v85 + v81;
      if (v86 >= v84 + v82)
        v86 = v84 + v82;
      v87 = v86 + v76;
      v88 = v85 + v80;
      v89 = v83 + v82;
      if (v88 >= v89)
        v88 = v89;
      v90 = v88 + v77;
      v91 = v84 + v80;
      v92 = v83 + v81;
      if (v91 < v92)
        v92 = v91;
      v93 = v92 + v79;
      if (v87 >= v90)
        v94 = v90;
      else
        v94 = v87;
      if (v94 < (int)v93)
        v93 = v94;
      *v71++ = v93 >> 1;
      --v72;
    }
    while (v72);
  }
  else
  {
    v245 = v67;
    v247 = *(unsigned int *)(a1 + 4 * (a3 - 1) + 32);
    v101 = v263;
    v102 = v271;
    v103 = v247;
    v104 = v264;
    do
    {
      v105 = *(v13 - 3);
      v106 = *(v13 - 2);
      v107 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ v101)));
      v108 = *(v13 - 1);
      v109 = *v13;
      v110 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v106 ^ v101)));
      v258 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ v101)));
      v255 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v13 ^ v101)));
      v111 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ *((_QWORD *)&v101 + 1))));
      v112 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v106 ^ *((_QWORD *)&v101 + 1))));
      v113 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ *((_QWORD *)&v101 + 1))));
      v114 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v13 ^ *((_QWORD *)&v101 + 1))));
      *(int8x8_t *)&v24 = vcnt_s8((int8x8_t)(v106 ^ v104));
      LOWORD(v24) = vaddlv_u8(*(uint8x8_t *)&v24);
      v115 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ v104)));
      v116 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ v104)));
      v117 = v13;
      v118 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v13 ^ v104)));
      v119 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ *((_QWORD *)&v104 + 1))));
      v120 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v106 ^ *((_QWORD *)&v104 + 1))));
      v121 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ *((_QWORD *)&v104 + 1))));
      v122 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v109 ^ *((_QWORD *)&v104 + 1))));
      v123 = v122 + v116;
      if (v123 >= v121 + v118)
        v123 = v121 + v118;
      v124 = v120 + v118;
      if (v122 + (unsigned __int16)v24 < v124)
        v124 = v122 + (unsigned __int16)v24;
      v125 = v120 + v116;
      v126 = v122 + v115;
      if (v121 + (unsigned __int16)v24 < v125)
        v125 = v121 + (unsigned __int16)v24;
      v127 = v119 + v118;
      if (v126 < v127)
        v127 = v126;
      v128 = v119 + v116;
      if (v121 + v115 < v128)
        v128 = v121 + v115;
      v129 = v119 + (unsigned __int16)v24;
      if (v129 >= v120 + v115)
        v129 = v120 + v115;
      v130 = v124 + v113;
      if (v123 + v112 < v130)
        v130 = v123 + v112;
      if (v130 >= v125 + v114)
        v130 = v125 + v114;
      v131 = v130 + v107;
      v132 = v123 + v111;
      if (v132 >= v127 + v113)
        v132 = v127 + v113;
      if (v132 >= v128 + v114)
        v132 = v128 + v114;
      v133 = v127 + v112;
      v134 = v124 + v111;
      v135 = v129 + v114;
      v136 = v132 + v110;
      if (v133 < v134)
        v134 = v133;
      v137 = v128 + v112;
      if (v134 >= v135)
        v134 = v135;
      v138 = v125 + v111;
      if (v137 >= v129 + v113)
        v137 = v129 + v113;
      if (v137 < v138)
        v138 = v137;
      v139 = v134 + v258;
      v140 = v138 + v255;
      if (v131 >= v136)
        v141 = v136;
      else
        v141 = v131;
      if ((int)v139 >= v140)
        v139 = v140;
      if (v141 < (int)v139)
        v139 = v141;
      *v102++ = v139 >> 1;
      v13 = v117 + 4;
      --v103;
    }
    while (v103);
    v69 = v247;
    v12 = a1;
    v67 = v245;
  }
  v142 = 0;
  v143 = v18 * v18;
  memset(v274, 0, 128);
  do
    ++*((_WORD *)v274 + *((unsigned __int8 *)v271 + v142++));
  while (v69 != v142);
  v144 = 0;
  v145 = 0;
  do
  {
    v146 = *(unsigned __int16 *)((char *)v274 + v144);
    *(_WORD *)((char *)v274 + v144) = v145;
    v145 += v146;
    v144 += 2;
  }
  while (2 * v67 != v144);
  v147 = 0;
  do
  {
    v148 = *((unsigned __int8 *)v271 + v147);
    v149 = *((unsigned __int16 *)v274 + v148);
    *((_WORD *)v274 + v148) = v149 + 1;
    v270[0].i16[v149] = v147++;
  }
  while (v69 != v147);
  if (a4 >= v69)
    v150 = v69;
  else
    v150 = a4;
  if (v150 >= a6)
    v151 = a6;
  else
    v151 = v150;
  v152 = *(float32x4_t *)(a2 + 3488);
  v153 = *(float32x4_t *)(a2 + 3520);
  if ((v154 & 1) == 0)
  {
    v243 = v12;
    *(_OWORD *)v257 = *(_OWORD *)(a2 + 3520);
    *(_OWORD *)v260 = *(_OWORD *)(a2 + 3488);
    v153 = *(float32x4_t *)v257;
    v152 = *(float32x4_t *)v260;
    v12 = v243;
    if (v244)
    {
      mask(vmask4)::shift = xmmword_2260FF480;
      v153 = *(float32x4_t *)v257;
      v152 = *(float32x4_t *)v260;
      v12 = v243;
    }
  }
  v155 = vmovn_s32(vceqq_f32(v152, v153));
  v156.i32[0] = 0;
  v156.i16[2] = 0;
  v156.i16[3] = v155.i16[3];
  v157 = (int8x16_t)vmovl_u16(v156);
  v158.i64[0] = 0x100000001;
  v158.i64[1] = 0x100000001;
  v159 = (uint32x4_t)vandq_s8(v157, v158);
  v160 = *(double *)&mask(vmask4)::shift;
  v161 = vaddvq_s32((int32x4_t)vshlq_u32(v159, (uint32x4_t)mask(vmask4)::shift));
  v256 = v151;
  if ((_DWORD)v151)
  {
    v162 = a6;
    if (v69 < a6)
      v162 = v69;
    if (v162 >= a4)
      v162 = a4;
    v163 = 4 * v162;
    v164 = v12;
    memset_pattern16(__b, &xmmword_2261A28B0, v163);
    memset_pattern16(v267, &xmmword_2261A28B0, v163);
    v12 = v164;
  }
  v165 = (a3 << 10) - 2048;
  if (a3 == 1)
    v165 = 3072;
  v166 = v12 + 1088 * v165 + 11317232;
  if (v150 <= 1)
    v167 = 1;
  else
    v167 = v150;
  v252 = v167;
  v254 = v12 + 1088 * v165 + 11317232;
  if (v161)
  {
    v168 = 0;
    v169 = 32 * v17;
    v170 = 144 * v17;
    v171 = v12 + 1088 * v165 + 11317236;
    v172 = 0.0000755373765;
    do
    {
      v173 = v270[0].u16[v168];
      v174 = (unsigned __int16 *)(v166 + 1088 * v270[0].u16[v168]);
      compute_avgs_and_dirs_3_comp_rgb(v174, a2, (uint64_t)v273, v172, v160, *(double *)&v24, a10, v36);
      v175 = 0;
      v176 = v272;
      do
      {
        v177 = *(float32x4_t *)&v273[v175 + 16];
        *((_OWORD *)v176 - 4) = *(_OWORD *)&v273[v175];
        v178 = (int8x16_t)vmulq_f32(v177, v177);
        *(float32x2_t *)v178.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL), *(float32x2_t *)v178.i8);
        v179 = (int32x2_t)vpadd_f32(*(float32x2_t *)v178.i8, *(float32x2_t *)v178.i8);
        v180 = (float32x4_t)xmmword_2261A28D0;
        if (*(float *)v179.i32 != 0.0)
          v180 = vdivq_f32(v177, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v179, 0)));
        *((float32x4_t *)v176 - 3) = v180;
        v181 = v176 - 48;
        *((_QWORD *)v181 + 2) = 0;
        *((_QWORD *)v181 + 3) = 0;
        v182 = *(float32x4_t *)&v273[v175];
        v183 = (int8x16_t)vmulq_f32(v182, v182);
        *(float32x2_t *)v183.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v183, v183, 8uLL), *(float32x2_t *)v183.i8);
        v184 = (int32x2_t)vpadd_f32(*(float32x2_t *)v183.i8, *(float32x2_t *)v183.i8);
        v185 = (float32x4_t)xmmword_2261A28D0;
        if (*(float *)v184.i32 != 0.0)
          v185 = vdivq_f32(v182, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v184, 0)));
        *((float32x4_t *)v176 - 1) = v185;
        v186 = *((float32x4_t *)v176 - 4);
        v187 = vmulq_f32(v180, v186);
        v188 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v187, 2), vaddq_f32(v187, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v187.f32, 1))), 0);
        v188.i32[3] = 0;
        v189 = vsubq_f32(v186, vmulq_f32(v180, v188));
        v190 = *(_OWORD *)v181;
        *(float32x4_t *)v176 = v189;
        *((_OWORD *)v176 + 1) = v190;
        *((_QWORD *)v176 + 4) = 0;
        *((_QWORD *)v176 + 5) = 0;
        *((_OWORD *)v176 + 3) = *((_OWORD *)v176 - 1);
        v175 += 32;
        v176 += 144;
      }
      while (v169 != v175);
      v274[0] = 0;
      v265[0].i32[0] = 0;
      compute_error_squared_rgb(v174, (float32x4_t *)a2, (uint64_t)v271, v274, v265);
      v191 = 0;
      v192 = *(float *)v274;
      v193 = v265[0].f32[0];
      v194 = (unsigned __int8 *)(v171 + 1088 * v173);
      do
      {
        v195 = *v194++;
        v196 = v143 * (float)v195;
        v197 = *(float *)&v272[v191 + 64];
        v198 = vmulq_n_f32(*(float32x4_t *)&v271[v191 / 4 + 4], v197);
        v199 = vmulq_n_f32(*(float32x4_t *)&v271[v191 / 4 + 12], v197);
        v200 = vmulq_n_f32(vmulq_f32(v198, v198), v196);
        v201 = vmulq_n_f32(vmulq_f32(v199, v199), v196);
        v192 = v192
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v200, 2), vaddq_f32(v200, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v200.f32, 1))).f32[0];
        v193 = v193
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v201, 2), vaddq_f32(v201, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.f32, 1))).f32[0];
        v191 += 144;
      }
      while (v170 != v191);
      insert_result(v256, v192, v173, __b, v268);
      insert_result(v256, v193, v173, v267, v266);
      ++v168;
      v166 = v254;
    }
    while (v168 != v252);
  }
  else
  {
    v202 = 0;
    v248 = v12 + 1088 * v165 + 11317236;
    do
    {
      v250 = v202;
      v259 = v270[0].u16[v202];
      v203 = (unsigned __int16 *)(v166 + 1088 * v270[0].u16[v202]);
      compute_avgs_and_dirs_4_comp(v203, (float32x4_t *)a2, (uint64_t)v271);
      v204 = 0;
      do
      {
        v205 = *(float32x4_t *)&v271[v204 / 4 + 4];
        *(_OWORD *)&v273[v204] = *(_OWORD *)&v271[v204 / 4];
        v206 = (int8x16_t)vmulq_f32(v205, v205);
        *(float32x2_t *)v206.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v206, v206, 8uLL), *(float32x2_t *)v206.i8);
        v207 = (int32x2_t)vpadd_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8);
        v208.i64[0] = 0x3F0000003F000000;
        v208.i64[1] = 0x3F0000003F000000;
        v209.i64[0] = 0x3F0000003F000000;
        v209.i64[1] = 0x3F0000003F000000;
        if (*(float *)v207.i32 != 0.0)
          v209 = vdivq_f32(v205, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v207, 0)));
        *(float32x4_t *)&v273[v204 + 16] = v209;
        v210 = *(float32x4_t *)&v273[v204];
        v211 = *(_OWORD *)&v273[v204 + 16];
        v212 = (int8x16_t)vmulq_f32(v209, v210);
        *(float32x2_t *)v212.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v212, v212, 8uLL), *(float32x2_t *)v212.i8);
        f32 = (_OWORD *)v265[v204 / 0x10].f32;
        *f32 = vsubq_f32(v210, vmulq_n_f32(v209, vpadd_f32(*(float32x2_t *)v212.i8, *(float32x2_t *)v212.i8).f32[0]));
        f32[1] = v211;
        v214 = (float32x4_t *)&v274[v204 / 4];
        v214->i64[0] = 0;
        v214->i64[1] = 0;
        v215 = *(float32x4_t *)&v271[v204 / 4];
        v216 = (int8x16_t)vmulq_f32(v215, v215);
        *(float32x2_t *)v216.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL), *(float32x2_t *)v216.i8);
        v217 = (int32x2_t)vpadd_f32(*(float32x2_t *)v216.i8, *(float32x2_t *)v216.i8);
        if (*(float *)v217.i32 != 0.0)
          v208 = vdivq_f32(v215, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v217, 0)));
        v214[1] = v208;
        v218 = (float32x4_t *)((char *)&v263 + v204);
        v218->i64[0] = 0;
        v218->i64[1] = 0;
        v218[1] = v214[1];
        v204 += 32;
      }
      while (32 * v17 != v204);
      v261 = 0;
      compute_error_squared_rgba(v203, (float32x4_t *)a2, (uint64_t)v265, (uint64_t)&v263, (uint64_t)v262, (_DWORD *)&v261 + 1, &v261);
      v220 = 0;
      v221 = *((float *)&v261 + 1);
      v222 = *(float *)&v261;
      v223 = 4;
      do
      {
        LOBYTE(v219) = *(_BYTE *)(v248 + 1088 * v259 + v220);
        v224 = v143 * (float)LODWORD(v219);
        v225 = v262[v220];
        v226 = vmulq_n_f32(*(float32x4_t *)&v273[v223 * 4], v225);
        v227 = vmulq_n_f32(*(float32x4_t *)&v274[v223], v225);
        v228 = (int8x16_t)vmulq_n_f32(vmulq_f32(v226, v226), v224);
        *(float32x2_t *)v228.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v228, v228, 8uLL), *(float32x2_t *)v228.i8);
        v221 = v221 + vpadd_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8).f32[0];
        v229 = (int8x16_t)vmulq_n_f32(vmulq_f32(v227, v227), v224);
        *(float32x2_t *)v229.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v229, v229, 8uLL), *(float32x2_t *)v229.i8);
        v219 = vpadd_f32(*(float32x2_t *)v229.i8, *(float32x2_t *)v229.i8).f32[0];
        v222 = v222 + v219;
        ++v220;
        v223 += 8;
      }
      while (v17 != v220);
      insert_result(v256, v221, v259, __b, v268);
      insert_result(v256, v222, v259, v267, v266);
      v202 = v250 + 1;
      v166 = v254;
    }
    while (v250 + 1 != v252);
  }
  if (!(_DWORD)v256)
    return 0;
  v230 = 0;
  v231 = v266;
  v232 = v268;
  do
  {
    v233 = *v232++;
    *(_DWORD *)&v273[4 * v230] = *(unsigned __int16 *)(v166 + 1088 * v233 + 2);
    v234 = *v231++;
    *(_DWORD *)&v273[4 * (v230 + 1)] = *(unsigned __int16 *)(v166 + 1088 * v234 + 2);
    v230 += 2;
  }
  while (2 * v256 != v230);
  memset(v272, 0, 64);
  v235 = (2 * v256);
  memset(v271, 0, sizeof(v271));
  if (!(_DWORD)v235)
    return 0;
  result = 0;
  v237 = (unsigned int *)v273;
  while (1)
  {
    v239 = *v237++;
    v238 = v239;
    v240 = (unint64_t)v239 >> 6;
    v241 = *(_QWORD *)&v271[2 * v240];
    v242 = 1 << v239;
    if (((1 << v239) & v241) == 0)
    {
      *(_DWORD *)(a5 + 4 * result) = v238;
      *(_QWORD *)&v271[2 * v240] = v242 | v241;
      result = (result + 1);
      if ((_DWORD)result == (_DWORD)v256)
        break;
    }
    if (!--v235)
      return result;
  }
  return v256;
}

uint64_t insert_result(uint64_t result, float a2, unsigned int a3, float *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float *v9;
  unsigned int *v10;

  v5 = (result - 1);
  if (a4[v5] > a2)
  {
    v6 = 0;
    while (a4[v6] < a2)
    {
      if (result == ++v6)
        return result;
    }
    if (v5 > v6)
    {
      v7 = (result - 2);
      v8 = result - 1;
      v9 = a4;
      v10 = a5;
      do
      {
        v9[v5] = v9[v7];
        v10[v5] = v10[v7];
        --v10;
        --v9;
        --v8;
      }
      while (v8 > v6);
    }
    a4[v6] = a2;
    a5[v6] = a3;
  }
  return result;
}

unsigned __int8 *encode_ise(unsigned __int8 *result, unsigned int a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  _BYTE *v23;
  char v24;
  _BYTE *v25;
  int v26;
  int v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  int v55;
  char v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;

  v5 = btq_counts[result];
  v6 = v5 & 0x3F;
  v7 = ~(-1 << v5);
  if ((v5 & 0x40) != 0)
  {
    if (a2 >= 5)
    {
      v10 = 0;
      v11 = a2 / 5;
      v12 = v6 + 2;
      v13 = ~(-4 << v6);
      v14 = ~(-2 << v6);
      v15 = 2 * v6 + 4;
      v16 = 3 * v6 + 5;
      result = a3 + 4;
      do
      {
        v17 = &result[v10];
        v18 = result[v10 - 2] >> v6;
        v19 = result[v10 - 3] >> v6;
        v20 = a3[v10];
        v21 = integer_of_trits[81 * (result[v10] >> v6)
                             + 27 * (result[v10 - 1] >> v6)
                             + 8 * v18
                             + 2 * v19
                             + v18
                             + v19
                             + (v20 >> v6)];
        *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v13 << (a5 & 7)) | (((((v21 & 3) << v6) | v20 & v7) & v13) << (a5 & 7));
        v22 = a5 + v12;
        v23 = (_BYTE *)(a4 + (v22 >> 3));
        LOBYTE(v20) = (a5 + v12) & 7;
        LODWORD(v18) = ((result[v10 - 3] & v7 | (((v21 >> 2) & 3) << v6)) & v13) << v20;
        v24 = v23[1];
        *v23 = *v23 & ~(v13 << v20) | v18;
        v23[1] = v24 & ((unsigned __int16)~((_WORD)v13 << v20) >> 8) | BYTE1(v18);
        v25 = (_BYTE *)(a4 + ((unint64_t)(v15 + a5) >> 3));
        LOBYTE(v18) = (v15 + a5) & 7;
        v26 = v14 << v18;
        v27 = ~(v14 << v18);
        LODWORD(v18) = ((result[v10 - 2] & v7 | (((v21 >> 4) & 1) << v6)) & v14) << v18;
        LOBYTE(v23) = *v25 & ~(_BYTE)v26 | v18;
        LOBYTE(v18) = v25[1] & BYTE1(v27) | BYTE1(v18);
        *v25 = (_BYTE)v23;
        v25[1] = v18;
        v28 = (_BYTE *)(a4 + ((unint64_t)(v16 + a5) >> 3));
        LOBYTE(v18) = (v16 + a5) & 7;
        LODWORD(v23) = ((result[v10 - 1] & v7 | (((v21 >> 5) & 3) << v6)) & v13) << v18;
        LODWORD(v18) = v13 << v18;
        *v28 = *v28 & ~(_BYTE)v18 | v23;
        v10 += 5;
        v28[1] = v28[1] & ((unsigned __int16)~(_WORD)v18 >> 8) | BYTE1(v23);
        v29 = 4 * v6 + 7 + a5;
        LODWORD(v17) = (*v17 & v7 | (v21 >> 7 << v6)) & v14;
        v30 = (_BYTE *)(a4 + (v29 >> 3));
        LOBYTE(v29) = v29 & 7;
        LODWORD(v18) = v14 << v29;
        LODWORD(v29) = (_DWORD)v17 << v29;
        LOBYTE(v28) = v30[1];
        *v30 = *v30 & ~(_BYTE)v18 | v29;
        v30[1] = v28 & ((unsigned __int16)~(_WORD)v18 >> 8) | BYTE1(v29);
        a5 = v22 + v12 + v6 + 1 + v12 + v6 + 1;
        --v11;
      }
      while (v11);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    if (a2 != (_DWORD)v10)
    {
      v31 = (int)v10 + 3 >= a2 ? 0 : a3[(v10 + 3)] >> v6;
      v33 = (int)v10 + 2 >= a2 ? 0 : a3[(v10 + 2)] >> v6;
      v34 = (int)v10 + 1 >= a2 ? 0 : a3[(v10 + 1)] >> v6;
      v35 = a2 - v10;
      if (a2 > v10)
      {
        v36 = &a3[v10];
        v37 = integer_of_trits[27 * v31 + 9 * v33 + 3 * v34 + (*v36 >> v6)];
        v38 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        v39 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        do
        {
          v40 = *v36++;
          v41 = v40 & v7;
          LOBYTE(v40) = *v39++;
          v42 = v37 >> v40;
          v43 = *v38++;
          result = (unsigned __int8 *)(a4 + ((unint64_t)a5 >> 3));
          *(_WORD *)result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v43 + v6)) << (a5 & 7)) | (((((v42 & ~(-1 << v43)) << v6) | v41) & ~(-1 << (v43 + v6))) << (a5 & 7));
          a5 += v43 + v6;
          --v35;
        }
        while (v35);
      }
    }
  }
  else if ((btq_counts[result] & 0x80) != 0)
  {
    if (a2 >= 3)
    {
      v32 = 0;
      v44 = a2 / 3;
      v45 = v6 + 3;
      v46 = ~(-8 << v6);
      v47 = ~(-4 << v6);
      v48 = a3 + 2;
      result = integer_of_quints;
      do
      {
        v50 = &v48[v32];
        v51 = a3[v32];
        v52 = v48[v32 - 1] >> v6;
        v53 = integer_of_quints[25 * (v48[v32] >> v6) + 4 * v52 + v52 + (v51 >> v6)];
        LODWORD(v52) = (((v53 & 7) << v6) | v51 & v7) & v46;
        v54 = (_BYTE *)(a4 + ((unint64_t)a5 >> 3));
        v55 = v46 << (a5 & 7);
        LODWORD(v52) = (_DWORD)v52 << (a5 & 7);
        v56 = v54[1];
        *v54 = *v54 & ~(_BYTE)v55 | v52;
        v54[1] = v56 & ((unsigned __int16)~(_WORD)v55 >> 8) | BYTE1(v52);
        v57 = (unsigned __int8 *)(a4 + ((unint64_t)(v45 + a5) >> 3));
        LOBYTE(v52) = (v45 + a5) & 7;
        v58 = *v57 & ~(v47 << v52);
        v59 = ~(v47 << v52);
        LODWORD(v52) = ((v48[v32 - 1] & v7 | (((v53 >> 3) & 3) << v6)) & v47) << v52;
        *v57 = v58 | v52;
        v57[1] = v57[1] & BYTE1(v59) | BYTE1(v52);
        v32 += 3;
        v49 = 2 * v6 + 5;
        *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) = *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) & ~(unsigned __int16)(v47 << ((v49 + a5) & 7)) | (((*v50 & v7 | (((v53 >> 5) & 3) << v6)) & v47) << ((v49 + a5) & 7));
        a5 += 3 * v6 + 7;
        --v44;
      }
      while (v44);
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (a2 != (_DWORD)v32)
    {
      if ((int)v32 + 1 >= a2)
        v60 = 0;
      else
        v60 = a3[(v32 + 1)] >> v6;
      v61 = a2 - v32;
      if (a2 > v32)
      {
        v62 = &a3[v32];
        v63 = integer_of_quints[5 * v60 + (*v62 >> v6)];
        v64 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        v65 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        do
        {
          v66 = *v62++;
          v67 = v66 & v7;
          LOBYTE(v66) = *v65++;
          v68 = v63 >> v66;
          v69 = *v64++;
          result = (unsigned __int8 *)(a4 + ((unint64_t)a5 >> 3));
          *(_WORD *)result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v69 + v6)) << (a5 & 7)) | (((((v68 & ~(-1 << v69)) << v6) | v67) & ~(-1 << (v69 + v6))) << (a5 & 7));
          a5 += v69 + v6;
          --v61;
        }
        while (v61);
      }
    }
  }
  else
  {
    v8 = a2;
    do
    {
      v9 = *a3++;
      *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v7 << (a5 & 7)) | ((v9 & v7) << (a5 & 7));
      a5 += v6;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t compute_pixel_region_variance(uint64_t a1, uint64_t *a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  int v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t k;
  int v27;
  int v28;
  float32x4_t *v29;
  float32x4_t *v30;
  uint64_t v31;
  int v32;
  uint16x4_t v33;
  float32x4_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t *v44;
  uint64_t i;
  int v46;
  int v47;
  float32x4_t *v48;
  float32x4_t *v49;
  uint64_t v50;
  int v51;
  float16x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int32 *v59;
  uint64_t v60;
  uint64_t v61;
  __int32 *v62;
  __int32 *v63;
  int v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  uint64_t j;
  int v69;
  int v70;
  float32x4_t *v71;
  float32x4_t *v72;
  uint64_t v73;
  int v74;
  float32x4_t v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  _OWORD *v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t m;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  _OWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)*a2;
  v3 = *((unsigned int *)a2 + 2);
  v4 = *((unsigned int *)a2 + 3);
  v5 = *((unsigned int *)a2 + 4);
  v6 = *((unsigned int *)a2 + 5);
  v139 = *((_DWORD *)a2 + 11);
  v138 = *((_DWORD *)a2 + 12);
  v137 = *((_DWORD *)a2 + 13);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *(_QWORD *)(a1 + 136);
  v153 = (_OWORD *)a2[7];
  v154 = *((unsigned int *)a2 + 8);
  v9 = (2 * v7) | 1;
  v142 = *((unsigned __int8 *)a2 + 24);
  v143 = *((unsigned int *)a2 + 10);
  v144 = v9;
  v145 = v7;
  if (*((_BYTE *)a2 + 24))
    result = v7;
  else
    result = 0;
  v11 = (v9 + *((_DWORD *)a2 + 8));
  v155 = *((unsigned int *)a2 + 9);
  if (*((_BYTE *)a2 + 24))
    v12 = (2 * v7) | 1;
  else
    v12 = 0;
  v156 = (v9 + *((_DWORD *)a2 + 9));
  v150 = v11 * (v9 + *((_DWORD *)a2 + 9));
  v151 = (v12 + *((_DWORD *)a2 + 10));
  v13 = v150 * (int)v151;
  v152 = *v2;
  v14 = v2[3];
  v135 = v2[1];
  v140 = v150 * v151;
  if (v14 == 1)
  {
    DWORD2(v157) = 1006632960;
    if ((int)v151 > (int)v142)
    {
      v35 = v138 + ~v7;
      v36 = v142;
      v148 = v137 - v142 - result;
      v37 = (int)v11 + (int)v142 * (uint64_t)v150;
      result = (uint64_t)&v153[v37 + 1 + v13];
      v38 = 16 * v150;
      v39 = 16 * (int)v11;
      v40 = (uint64_t)&v153[v37 + 1];
      do
      {
        if (v148 + (int)v36 <= v2[2] - 1)
          v41 = (v148 + v36) & ~((v148 + (int)v36) >> 31);
        else
          v41 = v2[2] - 1;
        if ((int)v156 >= 2)
        {
          v42 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v41);
          v43 = (float32x4_t *)v40;
          v44 = (float32x4_t *)result;
          for (i = 1; i != v156; ++i)
          {
            if (v35 + (int)i <= v2[1] - 1)
              v46 = (v35 + i) & ~((v35 + (int)i) >> 31);
            else
              v46 = v2[1] - 1;
            v47 = v139 - v145;
            v48 = v43;
            v49 = v44;
            v50 = v11 - 1;
            if ((int)v11 >= 2)
            {
              do
              {
                v51 = v47 & ~(v47 >> 31);
                if (v47 > *v2 - 1)
                  v51 = *v2 - 1;
                *(_QWORD *)&v157 = *(_QWORD *)(v42 + 2 * (4 * v51 + 4 * *v2 * v46));
                v52.i16[0] = *((_WORD *)&v157 + v3);
                v52.i16[1] = *((_WORD *)&v157 + v4);
                v52.i16[2] = *((_WORD *)&v157 + v5);
                v52.i16[3] = *((_WORD *)&v157 + v6);
                v53 = vcvtq_f32_f16(v52);
                *v48++ = v53;
                *v49++ = vmulq_f32(v53, v53);
                ++v47;
                --v50;
              }
              while (v50);
            }
            v44 = (float32x4_t *)((char *)v44 + v39);
            v43 = (float32x4_t *)((char *)v43 + v39);
          }
        }
        ++v36;
        result += v38;
        v40 += v38;
      }
      while (v36 != v151);
    }
  }
  else if (v14)
  {
    v158 = 0x3F80000000000000;
    if ((int)v151 > (int)v142)
    {
      v54 = v142;
      v55 = (int)v11 + (int)v142 * (uint64_t)v150;
      v56 = 16 * v150;
      v57 = v138 + ~v7;
      v58 = 16 * (int)v11;
      result = (v137 - v142 - result);
      v149 = result;
      v59 = (__int32 *)&v157 + v4;
      v60 = (uint64_t)&v153[v55 + 1 + v13];
      v61 = (uint64_t)&v153[v55 + 1];
      v62 = (__int32 *)&v157 + v5;
      v63 = (__int32 *)&v157 + v6;
      do
      {
        if (v149 + (int)v54 <= v2[2] - 1)
          v64 = (v149 + v54) & ~((v149 + (int)v54) >> 31);
        else
          v64 = v2[2] - 1;
        if ((int)v156 >= 2)
        {
          v65 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v64);
          v66 = (float32x4_t *)v61;
          v67 = (float32x4_t *)v60;
          for (j = 1; j != v156; ++j)
          {
            if (v57 + (int)j <= v2[1] - 1)
              v69 = (v57 + j) & ~((v57 + (int)j) >> 31);
            else
              v69 = v2[1] - 1;
            v70 = v139 - v7;
            v71 = v66;
            v72 = v67;
            v73 = v11 - 1;
            if ((int)v11 >= 2)
            {
              do
              {
                v74 = v70 & ~(v70 >> 31);
                if (v70 > *v2 - 1)
                  v74 = *v2 - 1;
                result = 4 * (4 * v74 + 4 * *v2 * v69);
                v157 = *(_OWORD *)(v65 + result);
                v75.i32[0] = *((_DWORD *)&v157 + v3);
                v75.i32[1] = *v59;
                v75.i32[2] = *v62;
                v75.i32[3] = *v63;
                *v71++ = v75;
                *v72++ = vmulq_f32(v75, v75);
                ++v70;
                --v73;
              }
              while (v73);
            }
            v67 = (float32x4_t *)((char *)v67 + v58);
            v66 = (float32x4_t *)((char *)v66 + v58);
          }
        }
        ++v54;
        v60 += v56;
        v61 += v56;
      }
      while (v54 != v151);
    }
  }
  else
  {
    WORD2(v157) = -256;
    if ((int)v151 > (int)v142)
    {
      v15 = v138 + ~v7;
      v16 = v142;
      v147 = v137 - v142 - result;
      v17 = (int)v11 + (int)v142 * (uint64_t)v150;
      v18 = (uint64_t)&v153[v17 + 1 + v13];
      v19 = 16 * v150;
      v20 = 16 * (int)v11;
      v21 = (uint64_t)&v153[v17 + 1];
      v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
      do
      {
        v23 = v2[2] - 1;
        if (v147 + (int)v16 <= v23)
          result = (v147 + (_DWORD)v16) & ~((v147 + (int)v16) >> 31);
        else
          result = v23;
        if ((int)v156 >= 2)
        {
          v24 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * (int)result);
          v25 = (float32x4_t *)v21;
          result = v18;
          for (k = 1; k != v156; ++k)
          {
            if (v15 + (int)k <= v2[1] - 1)
              v27 = (v15 + k) & ~((v15 + (int)k) >> 31);
            else
              v27 = v2[1] - 1;
            v28 = v139 - v145;
            v29 = v25;
            v30 = (float32x4_t *)result;
            v31 = v11 - 1;
            if ((int)v11 >= 2)
            {
              do
              {
                v32 = v28 & ~(v28 >> 31);
                if (v28 > *v2 - 1)
                  v32 = *v2 - 1;
                LODWORD(v157) = *(_DWORD *)(v24 + (4 * v32 + 4 * *v2 * v27));
                v33.i16[0] = *((unsigned __int8 *)&v157 + v3);
                v33.i16[1] = *((unsigned __int8 *)&v157 + v4);
                v33.i16[2] = *((unsigned __int8 *)&v157 + v5);
                v33.i16[3] = *((unsigned __int8 *)&v157 + v6);
                v34 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v33)), v22);
                *v29++ = v34;
                *v30++ = vmulq_f32(v34, v34);
                ++v28;
                --v31;
              }
              while (v31);
            }
            result += v20;
            v25 = (float32x4_t *)((char *)v25 + v20);
          }
        }
        ++v16;
        v18 += v19;
        v21 += v19;
      }
      while (v16 != v151);
    }
  }
  v76 = &v153[v140];
  v136 = v151 - 1;
  if ((int)v151 >= 1)
  {
    v77 = 0;
    v78 = 16 * v150;
    v79 = &v153[v140];
    v80 = v153;
    do
    {
      v81 = v80;
      v82 = v156;
      if ((int)v156 >= 1)
      {
        do
        {
          *v81 = 0uLL;
          v81[v13] = 0uLL;
          v81 += (int)v11;
          --v82;
        }
        while (v82);
      }
      if ((int)v11 >= 1)
      {
        v83 = 0;
        do
        {
          v80[v83] = 0uLL;
          v79[v83++] = 0uLL;
        }
        while (v11 != v83);
      }
      ++v77;
      v80 = (_OWORD *)((char *)v80 + v78);
      v79 = (_OWORD *)((char *)v79 + v78);
    }
    while (v77 != v151);
  }
  if ((_DWORD)v142 && (int)v156 >= 1)
  {
    v84 = 0;
    v85 = v153;
    do
    {
      v86 = v85;
      v87 = v11;
      if ((int)v11 >= 1)
      {
        do
        {
          *v86 = 0uLL;
          v86[v13] = 0uLL;
          ++v86;
          --v87;
        }
        while (v87);
      }
      ++v84;
      v85 += (int)v11;
    }
    while (v84 != v156);
  }
  v141 = 2 * v145;
  if ((int)v151 > (int)v142)
  {
    v88 = v153;
    v89 = v154 + v150 * v142 + v141 + 2;
    v90 = v142;
    do
    {
      v91 = v89;
      v92 = v156 - 1;
      if ((int)v156 >= 2)
      {
        do
        {
          brent_kung_prefix_sum((uint64_t)&v88[v91], (int)v11 - 1, 1);
          result = brent_kung_prefix_sum((uint64_t)&v76[v91], (int)v11 - 1, 1);
          v88 = v153;
          v91 += v11;
          --v92;
        }
        while (v92);
      }
      ++v90;
      v89 += v150;
    }
    while (v90 != (_DWORD)v151);
    v93 = (int)v156 - 1;
    v94 = v142;
    v95 = (int)v11 + (int)v142 * (uint64_t)v150;
    v96 = (uint64_t)&v88[v95 + 1 + v13];
    v146 = 16 * v150;
    v97 = (uint64_t)&v88[v95 + 1];
    do
    {
      v98 = v97;
      v99 = v96;
      v100 = v11 - 1;
      if ((int)v11 >= 2)
      {
        do
        {
          brent_kung_prefix_sum(v98, v93, v11);
          result = brent_kung_prefix_sum(v99, v93, v11);
          v99 += 16;
          v98 += 16;
          --v100;
        }
        while (v100);
      }
      ++v94;
      v96 += v146;
      v97 += v146;
    }
    while (v94 != v151);
  }
  if ((_DWORD)v142 && (int)v156 >= 2)
  {
    v101 = (v155 + v141 + 2) * v11;
    for (m = 1; m != v156; ++m)
    {
      if ((int)v11 >= 2)
      {
        v103 = (uint64_t)&v153[v101 + 1];
        v104 = v11 - 1;
        do
        {
          brent_kung_prefix_sum(v103, v136, v150);
          result = brent_kung_prefix_sum(v103 + 16 * v13, v136, v150);
          v103 += 16;
          --v104;
        }
        while (v104);
      }
      v101 += v11;
    }
  }
  if ((_DWORD)v142)
    v105 = (float)v144;
  else
    v105 = 1.0;
  v106 = 1.0 / (float)((float)(v105 * (float)v144) * (float)v144);
  if ((_DWORD)v142)
  {
    if ((int)v143 >= 1)
    {
      v107 = 0;
      v108 = (uint64_t)v153 + 12;
      v109 = v11 * (v141 + 1);
      v110 = 16 * (int)v11;
      v111 = (v141 + 1 + v154 + v150) * (v141 + 1);
      LODWORD(result) = v109 * v156;
      v112 = v139 + v152 * (v138 + v137 * v135);
      v113 = (uint64_t)v153 + 12;
      do
      {
        if ((int)v155 >= 1)
        {
          v114 = 0;
          v115 = v108 + 16 * (int)result;
          v116 = v112;
          v117 = v111;
          v118 = v113;
          v119 = v109;
          do
          {
            if ((int)v154 >= 1)
            {
              v120 = 0;
              v121 = v141 + 1;
              v122 = v116;
              do
              {
                *(float *)(v8 + 4 * v122) = v106
                                            * (float)((float)((float)((float)(*(float *)(v115 + v120)
                                                                            - *(float *)(v108
                                                                                       + 16
                                                                                       * (v114 * (int)v11
                                                                                        + v150 * (v144 + (int)v107)
                                                                                        + v121)))
                                                                    - *(float *)(v108 + 16 * v117 + v120))
                                                            + *(float *)(v108 + 16 * (v117 + v121)))
                                                    - (float)((float)((float)(*(float *)(v118 + v120)
                                                                            - *(float *)(v108
                                                                                       + 16
                                                                                       * (v114 * (int)v11
                                                                                        + v107 * v150
                                                                                        + v121)))
                                                                    - *(float *)(v108 + 16 * v119 + v120))
                                                            + *(float *)(v108 + 16 * (v119 + v121))));
                v120 += 16;
                ++v122;
                ++v121;
              }
              while (16 * v154 != v120);
            }
            ++v114;
            v119 += v11;
            v118 += v110;
            v117 += v11;
            v115 += v110;
            v116 += v152;
          }
          while (v114 != v155);
        }
        ++v107;
        v109 += v150;
        v113 += 16 * v150;
        v111 += v150;
        result = (result + v150);
        v112 += v135 * v152;
      }
      while (v107 != v143);
    }
  }
  else if ((int)v155 >= 1)
  {
    v123 = 0;
    v124 = (uint64_t)v153 + 12;
    v125 = v11 * v144;
    v126 = v139 + v138 * v152;
    v127 = (uint64_t)v153 + 12;
    do
    {
      if ((int)v154 >= 1)
      {
        v128 = v144;
        v129 = v126;
        result = v127;
        v130 = v154;
        v131 = (float *)(v124 + 16 * v125);
        do
        {
          v132 = *(float *)result;
          result += 16;
          v133 = v132 - *(float *)(v124 + 16 * (v123 * (int)v11 + v128));
          v134 = *v131;
          v131 += 4;
          *(float *)(v8 + 4 * v129++) = v106
                                        * (float)((float)(v133 - v134) + *(float *)(v124 + 16 * (v125 + v128++)));
          --v130;
        }
        while (v130);
      }
      ++v123;
      v125 += v11;
      v127 += 16 * (int)v11;
      v126 += v152;
    }
    while (v123 != v155);
  }
  return result;
}

uint64_t brent_kung_prefix_sum(uint64_t result, unint64_t a2, int a3)
{
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a2 >= 2)
  {
    v3 = 2;
    v4 = 1;
    do
    {
      v5 = a2 >> v4;
      if (a2 >> v4)
      {
        v6 = result;
        do
        {
          *(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)) = vaddq_f32(*(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)), *(float32x4_t *)(v6 + a3 * (16 * v3 - 16 * (v3 >> 1) - 16)));
          v6 += 16 * (a3 << v4);
          --v5;
        }
        while (v5);
      }
      ++v4;
      v3 *= 2;
    }
    while (v3 <= a2);
    do
    {
      --v4;
      v7 = v3 >> 1;
      v8 = (a2 - (v3 >> 2)) >> v4;
      if (v8)
      {
        v10 = result;
        do
        {
          v9 = 16 * a3 * (v7 + (v3 >> 2) - 1);
          *(float32x4_t *)(v10 + v9) = vaddq_f32(*(float32x4_t *)(v10 + v9), *(float32x4_t *)(v10 + a3 * (16 * v7 - 16)));
          v10 += 16 * (a3 << v4);
          --v8;
        }
        while (v8);
      }
      v11 = v3 > 5;
      v3 >>= 1;
    }
    while (v11);
  }
  return result;
}

uint64_t init_compute_averages(int *a1, int a2, _OWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  char v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  if (v6 <= 1)
    v7 = 32;
  else
    v7 = 16;
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = 16;
  if (v6 <= 1)
    v9 = 0;
  else
    v9 = (2 * a2) | 1;
  if (v6 > 1)
    v10 = 4;
  else
    v10 = 5;
  if (v6 < v8)
    v8 = a1[2];
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)a4 = a1;
  *(_OWORD *)(a4 + 8) = *a3;
  *(_BYTE *)(a4 + 24) = v6 > 1;
  *(_DWORD *)(a4 + 28) = a2;
  *(_DWORD *)(a4 + 64) = v4;
  *(_DWORD *)(a4 + 68) = v5;
  *(_DWORD *)(a4 + 72) = v6;
  *(_DWORD *)(a4 + 76) = v7;
  *(_DWORD *)(a4 + 80) = v8;
  *(_DWORD *)(a4 + 84) = 2 * (v7 + ((2 * a2) | 1)) * (v7 + ((2 * a2) | 1)) * (v8 + v9);
  return (v6 + v8 - 1) / v8 * ((v5 + v7 - 1) >> v10);
}

int8x16_t compute_avgs_and_dirs_4_comp(_BYTE *a1, float32x4_t *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unsigned __int8 *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  __int32 *v17;
  float32x4_t v18;
  float32x4_t v19;
  int16x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t result;
  float32x4_t v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 224;
  v7 = *(unsigned __int16 *)a1;
  compute_partition_averages_rgba(a1, a2, v33);
  v8 = 0;
  do
  {
    v9 = a1[v8 + 4];
    v10 = v33[v8];
    *(float32x4_t *)(a3 + 32 * v8) = v10;
    v11 = 0uLL;
    v12 = v6;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = *v12++;
      v17 = &a2->i32[v16];
      v18.i32[0] = *v17;
      v18.i32[1] = v17[216];
      v18.i32[2] = v17[432];
      v18.i32[3] = v17[648];
      v19 = vsubq_f32(v18, v10);
      v20 = vmovn_s32(vcgtzq_f32(v19));
      v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 0))));
      v13 = vaddq_f32(v13, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 1))));
      v14 = vaddq_f32(v14, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 2))));
      v15 = vaddq_f32(v15, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 3))));
      --v9;
    }
    while (v9);
    v21 = (int8x16_t)vmulq_f32(v11, v11);
    *(float32x2_t *)v21.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)v21.i8);
    v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), 0);
    v23 = (int8x16_t)vmulq_f32(v13, v13);
    *(float32x2_t *)v23.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), *(float32x2_t *)v23.i8);
    v24 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), 0);
    v25 = (int8x16_t)vmulq_f32(v14, v14);
    *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(float32x2_t *)v25.i8);
    v26 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), 0);
    v27 = (int8x16_t)vmulq_f32(v15, v15);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    v28 = (int8x16_t)vcgtq_f32(v24, v22);
    v29 = vbslq_s8(v28, (int8x16_t)v13, (int8x16_t)v11);
    v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)v22);
    v31 = (int8x16_t)vcgtq_f32(v26, v30);
    result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), 0), (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v30)), (int8x16_t)v15, vbslq_s8(v31, (int8x16_t)v14, v29));
    *(int8x16_t *)(a3 + 32 * v8++ + 16) = result;
    v6 += 216;
  }
  while (v8 != v7);
  return result;
}

float32x4_t compute_partition_averages_rgba(_BYTE *a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  const float *v18;
  uint8x8_t v19;
  int16x4_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t result;
  unint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int8x16_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  const float *v51;
  uint8x8_t v52;
  int8x8_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  unint64_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  int8x16_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  const float *v80;
  uint8x8_t v81;
  int16x4_t v82;
  int8x8_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  unsigned __int32 v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  int32x2_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;

  v3 = *(unsigned __int16 *)a1;
  if (v3 == 1)
  {
    result = a2[219];
    *a3 = result;
  }
  else
  {
    v4 = a2[216].u8[0];
    if (v3 == 2)
    {
      v42 = 0;
      v43 = (int32x4_t)xmmword_2260FF480;
      v44 = vdupq_n_s32(v4);
      v45 = 0uLL;
      v46.i64[0] = 0x400000004;
      v46.i64[1] = 0x400000004;
      v47 = (int8x16_t *)a2;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      do
      {
        v51 = (const float *)&a1[v42 + 8];
        v52 = (uint8x8_t)vld1_dup_f32(v51);
        v53 = (int8x8_t)vmovn_s32(vcgtq_s32(v44, v43));
        v43 = vaddq_s32(v43, v46);
        v54 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v52)), v53));
        v50 = vaddq_f32(v50, (float32x4_t)vandq_s8(*v47, v54));
        v49 = vaddq_f32(v49, (float32x4_t)vandq_s8(v47[54], v54));
        v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(v47[108], v54));
        v45 = vaddq_f32(v45, (float32x4_t)vandq_s8(v47[162], v54));
        v42 += 4;
        ++v47;
      }
      while (v42 < v4);
      v55 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), *(float32x2_t *)v50.f32);
      v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), *(float32x2_t *)v49.f32);
      v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v48.f32);
      v58 = (int32x2_t)vpadd_f32(v57, v57);
      v59 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), *(float32x2_t *)v45.f32);
      *(int32x2_t *)v60.f32 = vzip1_s32((int32x2_t)vpadd_f32(v55, v55), (int32x2_t)vpadd_f32(v56, v56));
      v60.i64[1] = __PAIR64__(vpadd_f32(v59, v59).u32[0], v58.u32[0]);
      v61 = vsubq_f32(vmulq_n_f32(a2[219], (float)v4), v60);
      v58.i8[0] = a1[4];
      *(float *)v58.i32 = (float)v58.u32[0];
      v62 = vdivq_f32(v60, (float32x4_t)vdupq_lane_s32(v58, 0));
      *a3 = v62;
      v62.i8[0] = a1[5];
      v62.f32[0] = (float)v62.u32[0];
      result = vdivq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0));
      a3[1] = result;
    }
    else if (v3 == 3)
    {
      v5 = 0;
      v6 = vdupq_n_s32(v4);
      v7 = 0uLL;
      v8.i64[0] = 0x400000004;
      v8.i64[1] = 0x400000004;
      v9 = 0uLL;
      v10 = (int32x4_t)xmmword_2260FF480;
      v11 = (int8x16_t *)a2;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      do
      {
        v18 = (const float *)&a1[v5 + 8];
        v19 = (uint8x8_t)vld1_dup_f32(v18);
        v20 = (int16x4_t)vmovl_u8(v19).u64[0];
        v21 = (int8x8_t)vmovn_s32(vcgtq_s32(v6, v10));
        v10 = vaddq_s32(v10, v8);
        v22 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v20), v21));
        v23 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v20, (int16x4_t)0x1000100010001), v21));
        v17 = vaddq_f32(v17, (float32x4_t)vandq_s8(*v11, v22));
        v13 = vaddq_f32(v13, (float32x4_t)vandq_s8(*v11, v23));
        v24 = v11[54];
        v16 = vaddq_f32(v16, (float32x4_t)vandq_s8(v24, v22));
        v12 = vaddq_f32(v12, (float32x4_t)vandq_s8(v24, v23));
        v25 = v11[108];
        v15 = vaddq_f32(v15, (float32x4_t)vandq_s8(v25, v22));
        v9 = vaddq_f32(v9, (float32x4_t)vandq_s8(v25, v23));
        v26 = v11[162];
        v14 = vaddq_f32(v14, (float32x4_t)vandq_s8(v26, v22));
        v7 = vaddq_f32(v7, (float32x4_t)vandq_s8(v26, v23));
        v5 += 4;
        ++v11;
      }
      while (v5 < v4);
      v27 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v17.f32);
      v28 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
      v29 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), *(float32x2_t *)v15.f32);
      v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), *(float32x2_t *)v14.f32);
      *(int32x2_t *)v31.f32 = vzip1_s32((int32x2_t)vpadd_f32(v27, v27), (int32x2_t)vpadd_f32(v28, v28));
      v31.i32[2] = vpadd_f32(v29, v29).u32[0];
      v31.i32[3] = vpadd_f32(v30, v30).u32[0];
      v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), *(float32x2_t *)v13.f32);
      v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), *(float32x2_t *)v12.f32);
      v34 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), *(float32x2_t *)v9.f32);
      v35 = (int32x2_t)vpadd_f32(v34, v34);
      v36 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), *(float32x2_t *)v7.f32);
      *(int32x2_t *)v37.f32 = vzip1_s32((int32x2_t)vpadd_f32(v32, v32), (int32x2_t)vpadd_f32(v33, v33));
      v37.i32[2] = v35.i32[0];
      v37.i32[3] = vpadd_f32(v36, v36).u32[0];
      v38 = vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v4), v31), v37);
      v35.i8[0] = a1[4];
      *(float *)v35.i32 = (float)v35.u32[0];
      v39 = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v35, 0));
      *a3 = v39;
      v39.i8[0] = a1[5];
      v39.f32[0] = (float)v39.u32[0];
      v40 = vdivq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      a3[1] = v40;
      v40.i8[0] = a1[6];
      v40.f32[0] = (float)v40.u32[0];
      result = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
      a3[2] = result;
    }
    else
    {
      v63 = 0;
      v64 = vdupq_n_s32(v4);
      v65 = 0uLL;
      v66.i64[0] = 0x400000004;
      v66.i64[1] = 0x400000004;
      v67 = (int32x4_t)xmmword_2260FF480;
      v68 = 0uLL;
      v69 = (int8x16_t *)a2;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      v76 = 0uLL;
      v77 = 0uLL;
      v78 = 0uLL;
      v79 = 0uLL;
      do
      {
        v80 = (const float *)&a1[v63 + 8];
        v81 = (uint8x8_t)vld1_dup_f32(v80);
        v82 = (int16x4_t)vmovl_u8(v81).u64[0];
        v83 = (int8x8_t)vmovn_s32(vcgtq_s32(v64, v67));
        v67 = vaddq_s32(v67, v66);
        v84 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v82), v83));
        v85 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x1000100010001), v83));
        v86 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x2000200020002), v83));
        v65 = vaddq_f32(v65, (float32x4_t)vandq_s8(*v69, v84));
        v72 = vaddq_f32(v72, (float32x4_t)vandq_s8(*v69, v85));
        v76 = vaddq_f32(v76, (float32x4_t)vandq_s8(*v69, v86));
        v87 = v69[54];
        v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(v87, v84));
        v73 = vaddq_f32(v73, (float32x4_t)vandq_s8(v87, v85));
        v77 = vaddq_f32(v77, (float32x4_t)vandq_s8(v87, v86));
        v88 = v69[108];
        v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(v88, v84));
        v74 = vaddq_f32(v74, (float32x4_t)vandq_s8(v88, v85));
        v78 = vaddq_f32(v78, (float32x4_t)vandq_s8(v88, v86));
        v89 = v69[162];
        v71 = vaddq_f32(v71, (float32x4_t)vandq_s8(v89, v84));
        v75 = vaddq_f32(v75, (float32x4_t)vandq_s8(v89, v85));
        v79 = vaddq_f32(v79, (float32x4_t)vandq_s8(v89, v86));
        v63 += 4;
        ++v69;
      }
      while (v63 < v4);
      v90 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), *(float32x2_t *)v65.f32);
      v91 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v68.f32);
      v92 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
      v93 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v71.f32);
      v94 = vpadd_f32(v93, v93).u32[0];
      *(int32x2_t *)v95.f32 = vzip1_s32((int32x2_t)vpadd_f32(v90, v90), (int32x2_t)vpadd_f32(v91, v91));
      v95.i64[1] = __PAIR64__(v94, vpadd_f32(v92, v92).u32[0]);
      v96 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), *(float32x2_t *)v72.f32);
      v97 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), *(float32x2_t *)v73.f32);
      v98 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), *(float32x2_t *)v74.f32);
      v99 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), *(float32x2_t *)v75.f32);
      *(int32x2_t *)v100.f32 = vzip1_s32((int32x2_t)vpadd_f32(v96, v96), (int32x2_t)vpadd_f32(v97, v97));
      v100.i32[2] = vpadd_f32(v98, v98).u32[0];
      v100.i32[3] = vpadd_f32(v99, v99).u32[0];
      v101 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), *(float32x2_t *)v76.f32);
      v102 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), *(float32x2_t *)v77.f32);
      v103 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), *(float32x2_t *)v78.f32);
      v104 = (int32x2_t)vpadd_f32(v103, v103);
      v105 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), *(float32x2_t *)v79.f32);
      *(int32x2_t *)v106.f32 = vzip1_s32((int32x2_t)vpadd_f32(v101, v101), (int32x2_t)vpadd_f32(v102, v102));
      v106.i32[2] = v104.i32[0];
      v106.i32[3] = vpadd_f32(v105, v105).u32[0];
      v107 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v4), v95), v100), v106);
      v104.i8[0] = a1[4];
      *(float *)v104.i32 = (float)v104.u32[0];
      v108 = vdivq_f32(v95, (float32x4_t)vdupq_lane_s32(v104, 0));
      *a3 = v108;
      v108.i8[0] = a1[5];
      v108.f32[0] = (float)v108.u32[0];
      v109 = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0));
      a3[1] = v109;
      v109.i8[0] = a1[6];
      v109.f32[0] = (float)v109.u32[0];
      v110 = vdivq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 0));
      a3[2] = v110;
      v110.i8[0] = a1[7];
      v110.f32[0] = (float)v110.u32[0];
      result = vdivq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0));
      a3[3] = result;
    }
  }
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp(_BYTE *a1, float32x4_t *a2, int a3, uint64_t a4)
{
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  int8x16_t v11;
  float32x4_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unsigned __int8 *v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  float32x4_t v29;
  int16x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t result;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  compute_partition_averages_rgba(a1, a2, (float32x4_t *)&v37);
  v9 = a2 + 54;
  if (a3 == 2)
  {
    v13.i64[0] = v37.i64[0];
    v14.i64[0] = v38.i64[0];
    v13.i64[1] = v37.u32[3];
    v14.i64[1] = v38.u32[3];
    v15.i64[0] = v39.i64[0];
    v16.i64[0] = v40.i64[0];
    v15.i64[1] = v39.u32[3];
    v16.i64[1] = v40.u32[3];
    v37 = v13;
    v38 = v14;
    v39 = v15;
    v40 = v16;
    v12 = a2 + 162;
    v10 = a2 + 54;
  }
  else
  {
    v10 = a2 + 108;
    if (a3 != 1)
    {
      if (a3)
      {
        v37.i32[3] = 0;
        v38.i32[3] = 0;
        v12 = a2 + 108;
        v10 = a2 + 54;
        v9 = a2;
        v39.i32[3] = 0;
        v40.i32[3] = 0;
      }
      else
      {
        v11 = vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL);
        v37 = vextq_s8(v37, v11, 4uLL);
        v38 = vextq_s8(v38, v11, 4uLL);
        v39 = vextq_s8(v39, v11, 4uLL);
        v40 = vextq_s8(v40, v11, 4uLL);
        v12 = a2 + 162;
      }
      goto LABEL_9;
    }
    v17.i64[0] = __PAIR64__(v37.u32[2], v37.u32[0]);
    v17.i64[1] = v37.u32[3];
    v18.i64[0] = __PAIR64__(v38.u32[2], v38.u32[0]);
    v18.i64[1] = v38.u32[3];
    v37 = v17;
    v38 = v18;
    v17.i64[0] = __PAIR64__(v39.u32[2], v39.u32[0]);
    v17.i64[1] = v39.u32[3];
    v18.i64[0] = __PAIR64__(v40.u32[2], v40.u32[0]);
    v18.i64[1] = v40.u32[3];
    v39 = v17;
    v40 = v18;
    v12 = a2 + 162;
  }
  v9 = a2;
LABEL_9:
  v19 = 0;
  v20 = a1 + 224;
  v21 = *(unsigned __int16 *)a1;
  do
  {
    v22 = a1[v19 + 4];
    v23 = *((float32x4_t *)&v37 + v19);
    *(float32x4_t *)(a4 + 32 * v19) = v23;
    v24 = 0uLL;
    v25 = v20;
    v26 = 0uLL;
    v27 = 0uLL;
    do
    {
      v28 = *v25++;
      v8.i32[0] = v9->i32[v28];
      v8.i32[1] = v10->i32[v28];
      v8.i32[2] = v12->i32[v28];
      v29 = vsubq_f32(v8, v23);
      v30 = vmovn_s32(vcgtzq_f32(v29));
      v24 = vaddq_f32(v24, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 0))));
      v26 = vaddq_f32(v26, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 1))));
      v8 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 2)));
      v27 = vaddq_f32(v27, v8);
      --v22;
    }
    while (v22);
    v31 = (int8x16_t)vmulq_f32(v24, v24);
    *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
    v32 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), 0);
    v33 = (int8x16_t)vmulq_f32(v26, v26);
    *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
    v8 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), 0);
    v34 = (int8x16_t)vmulq_f32(v27, v27);
    *(float32x2_t *)v34.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v34.i8);
    v35 = (int8x16_t)vcgtq_f32(v8, v32);
    result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), 0), (float32x4_t)vbslq_s8(v35, (int8x16_t)v8, (int8x16_t)v32)), (int8x16_t)v27, vbslq_s8(v35, (int8x16_t)v26, (int8x16_t)v24));
    *(int8x16_t *)(a4 + 32 * v19++ + 16) = result;
    v20 += 216;
  }
  while (v19 != v21);
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp_rgb(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  const float *v21;
  uint8x8_t v22;
  int16x4_t v23;
  int8x8_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int8x16_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  const float *v49;
  uint8x8_t v50;
  int8x8_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  int32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unint64_t v60;
  int32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int8x16_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  const float *v73;
  uint8x8_t v74;
  int16x4_t v75;
  int8x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  int32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  unsigned __int8 *v102;
  float32x4_t v103;
  float32x4_t v104;
  unsigned int v105;
  unsigned __int32 *v106;
  float32x4_t v107;
  int16x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t result;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int16 *)a1;
  if ((_DWORD)v8 == 1)
  {
    v40 = *(float32x4_t *)(a2 + 3504);
    v40.i32[3] = 0;
    v115 = v40;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a2 + 3456);
    if ((_DWORD)v8 == 2)
    {
      v41 = 0;
      v42 = vdupq_n_s32(v9);
      v43 = (int32x4_t)xmmword_2260FF480;
      v44 = 0uLL;
      v45.i64[0] = 0x400000004;
      v45.i64[1] = 0x400000004;
      v46 = (int8x16_t *)a2;
      v47 = 0uLL;
      v48 = 0uLL;
      do
      {
        v49 = (const float *)&a1[v41 + 8];
        v50 = (uint8x8_t)vld1_dup_f32(v49);
        v51 = (int8x8_t)vmovn_s32(vcgtq_s32(v42, v43));
        v43 = vaddq_s32(v43, v45);
        v52 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v50)), v51));
        v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(*v46, v52));
        v47 = vaddq_f32(v47, (float32x4_t)vandq_s8(v46[54], v52));
        v44 = vaddq_f32(v44, (float32x4_t)vandq_s8(v46[108], v52));
        v41 += 4;
        ++v46;
      }
      while (v41 < v9);
      v53 = *(float32x4_t *)(a2 + 3504);
      v53.i32[3] = 0;
      *(float32x2_t *)v54.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v48.f32);
      v54.i32[0] = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32).u32[0];
      v55 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), *(float32x2_t *)v47.f32);
      v56 = (int32x2_t)vpadd_f32(v55, v55);
      a8 = (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL);
      v57 = vadd_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v44.f32);
      v54.i32[1] = v56.i32[0];
      v54.i64[1] = vpadd_f32(v57, v57).u32[0];
      v58 = vsubq_f32(vmulq_n_f32(v53, (float)v9), v54);
      v56.i8[0] = a1[4];
      *(float *)v56.i32 = (float)v56.u32[0];
      v59 = vdivq_f32(v54, (float32x4_t)vdupq_lane_s32(v56, 0));
      v54.i8[0] = a1[5];
      v54.f32[0] = (float)v54.u32[0];
      v115 = v59;
      v116 = vdivq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0));
    }
    else if ((_DWORD)v8 == 3)
    {
      v10 = 0;
      v11 = vdupq_n_s32(v9);
      v12 = 0uLL;
      v13.i64[0] = 0x400000004;
      v13.i64[1] = 0x400000004;
      v14 = (int32x4_t)xmmword_2260FF480;
      v15 = (int8x16_t *)a2;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = (const float *)&a1[v10 + 8];
        v22 = (uint8x8_t)vld1_dup_f32(v21);
        v23 = (int16x4_t)vmovl_u8(v22).u64[0];
        v24 = (int8x8_t)vmovn_s32(vcgtq_s32(v11, v14));
        v14 = vaddq_s32(v14, v13);
        v25 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v23), v24));
        v26 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v23, (int16x4_t)0x1000100010001), v24));
        v20 = vaddq_f32(v20, (float32x4_t)vandq_s8(*v15, v25));
        v17 = vaddq_f32(v17, (float32x4_t)vandq_s8(*v15, v26));
        v27 = v15[54];
        v19 = vaddq_f32(v19, (float32x4_t)vandq_s8(v27, v25));
        v16 = vaddq_f32(v16, (float32x4_t)vandq_s8(v27, v26));
        v28 = v15[108];
        v18 = vaddq_f32(v18, (float32x4_t)vandq_s8(v28, v25));
        v12 = vaddq_f32(v12, (float32x4_t)vandq_s8(v28, v26));
        v10 += 4;
        ++v15;
      }
      while (v10 < v9);
      v29 = *(float32x4_t *)(a2 + 3504);
      v29.i32[3] = 0;
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), *(float32x2_t *)v20.f32);
      v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), *(float32x2_t *)v19.f32);
      v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v18.f32);
      v30.i32[0] = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).u32[0];
      v30.i32[1] = vpadd_f32(v31, v31).u32[0];
      v30.i64[1] = vpadd_f32(v32, v32).u32[0];
      v33 = vmulq_n_f32(v29, (float)v9);
      *(float32x2_t *)v34.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v17.f32);
      v34.i32[0] = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).u32[0];
      v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
      v36 = (int32x2_t)vpadd_f32(v35, v35);
      a8 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL);
      v37 = vadd_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v12.f32);
      v34.i32[1] = v36.i32[0];
      v34.i64[1] = vpadd_f32(v37, v37).u32[0];
      v38 = vsubq_f32(vsubq_f32(v33, v30), v34);
      v36.i8[0] = a1[4];
      *(float *)v36.i32 = (float)v36.u32[0];
      v39 = vdivq_f32(v30, (float32x4_t)vdupq_lane_s32(v36, 0));
      v33.i8[0] = a1[5];
      v33.f32[0] = (float)v33.u32[0];
      v115 = v39;
      v116 = vdivq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0));
      v39.i8[0] = a1[6];
      v39.f32[0] = (float)v39.u32[0];
      v117 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
    }
    else
    {
      v60 = 0;
      v61 = vdupq_n_s32(v9);
      v62 = 0uLL;
      v63.i64[0] = 0x400000004;
      v63.i64[1] = 0x400000004;
      v64 = (int32x4_t)xmmword_2260FF480;
      v65 = 0uLL;
      v66 = (int8x16_t *)a2;
      v67 = 0uLL;
      v68 = 0uLL;
      a8 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      do
      {
        v73 = (const float *)&a1[v60 + 8];
        v74 = (uint8x8_t)vld1_dup_f32(v73);
        v75 = (int16x4_t)vmovl_u8(v74).u64[0];
        v76 = (int8x8_t)vmovn_s32(vcgtq_s32(v61, v64));
        v64 = vaddq_s32(v64, v63);
        v77 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v75), v76));
        v78 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v75, (int16x4_t)0x1000100010001), v76));
        v79 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v75, (int16x4_t)0x2000200020002), v76));
        v62 = vaddq_f32(v62, (float32x4_t)vandq_s8(*v66, v77));
        v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(*v66, v78));
        v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(*v66, v79));
        v80 = v66[54];
        v65 = vaddq_f32(v65, (float32x4_t)vandq_s8(v80, v77));
        a8 = vaddq_f32(a8, (float32x4_t)vandq_s8(v80, v78));
        v71 = vaddq_f32(v71, (float32x4_t)vandq_s8(v80, v79));
        v81 = v66[108];
        v67 = vaddq_f32(v67, (float32x4_t)vandq_s8(v81, v77));
        v69 = vaddq_f32(v69, (float32x4_t)vandq_s8(v81, v78));
        v72 = vaddq_f32(v72, (float32x4_t)vandq_s8(v81, v79));
        v60 += 4;
        ++v66;
      }
      while (v60 < v9);
      v82 = *(float32x4_t *)(a2 + 3504);
      v82.i32[3] = 0;
      *(float32x2_t *)v83.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), *(float32x2_t *)v62.f32);
      v84 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), *(float32x2_t *)v65.f32);
      v85 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v67.f32);
      v83.i32[0] = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32).u32[0];
      v83.i32[1] = vpadd_f32(v84, v84).u32[0];
      v83.i64[1] = vpadd_f32(v85, v85).u32[0];
      *(float32x2_t *)v86.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v68.f32);
      v86.i32[0] = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).u32[0];
      v87 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), *(float32x2_t *)a8.f32);
      v88 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), *(float32x2_t *)v69.f32);
      v86.i32[1] = vpadd_f32(v87, v87).u32[0];
      v86.i64[1] = vpadd_f32(v88, v88).u32[0];
      *(float32x2_t *)v89.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
      v89.i32[0] = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).u32[0];
      v90 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v71.f32);
      v91 = (int32x2_t)vpadd_f32(v90, v90);
      v92 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
      v93 = vadd_f32(v92, *(float32x2_t *)v72.f32);
      v89.i32[1] = v91.i32[0];
      v89.i64[1] = vpadd_f32(v93, v93).u32[0];
      v94 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(v82, (float)v9), v83), v86), v89);
      v91.i8[0] = a1[4];
      *(float *)v91.i32 = (float)v91.u32[0];
      v95 = vdivq_f32(v83, (float32x4_t)vdupq_lane_s32(v91, 0));
      v92.i8[0] = a1[5];
      v92.f32[0] = (float)v92.u32[0];
      v115 = v95;
      v116 = vdivq_f32(v86, (float32x4_t)vdupq_lane_s32((int32x2_t)v92, 0));
      v95.i8[0] = a1[6];
      v95.f32[0] = (float)v95.u32[0];
      v96 = vdivq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 0));
      v89.i8[0] = a1[7];
      v89.f32[0] = (float)v89.u32[0];
      v117 = v96;
      v118 = vdivq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0));
    }
  }
  v97 = 0;
  v98 = a1 + 224;
  do
  {
    v99 = a1[v97 + 4];
    v100 = *(&v115 + v97);
    *(float32x4_t *)(a3 + 32 * v97) = v100;
    v101 = 0uLL;
    v102 = v98;
    v103 = 0uLL;
    v104 = 0uLL;
    do
    {
      v105 = *v102++;
      v106 = (unsigned __int32 *)(a2 + 4 * v105);
      a8.i32[0] = *v106;
      a8.i32[1] = v106[216];
      a8.i32[2] = v106[432];
      v107 = vsubq_f32(a8, v100);
      v108 = vmovn_s32(vcgtzq_f32(v107));
      v101 = vaddq_f32(v101, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vmovl_s16(vdup_lane_s16(v108, 0))));
      v103 = vaddq_f32(v103, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vmovl_s16(vdup_lane_s16(v108, 1))));
      a8 = (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vmovl_s16(vdup_lane_s16(v108, 2)));
      v104 = vaddq_f32(v104, a8);
      --v99;
    }
    while (v99);
    v109 = (int8x16_t)vmulq_f32(v101, v101);
    *(float32x2_t *)v109.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL), *(float32x2_t *)v109.i8);
    v110 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), 0);
    v111 = (int8x16_t)vmulq_f32(v103, v103);
    *(float32x2_t *)v111.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL), *(float32x2_t *)v111.i8);
    a8 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), 0);
    v112 = (int8x16_t)vmulq_f32(v104, v104);
    *(float32x2_t *)v112.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), *(float32x2_t *)v112.i8);
    v113 = (int8x16_t)vcgtq_f32(a8, v110);
    result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8), 0), (float32x4_t)vbslq_s8(v113, (int8x16_t)a8, (int8x16_t)v110)), (int8x16_t)v104, vbslq_s8(v113, (int8x16_t)v103, (int8x16_t)v101));
    *(int8x16_t *)(a3 + 32 * v97++ + 16) = result;
    v98 += 216;
  }
  while (v97 != v8);
  return result;
}

unsigned __int16 *compute_avgs_and_dirs_2_comp(unsigned __int16 *result, int32x4_t *a2, int a3, int a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t *v11;
  int32x4_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  int16x4_t v26;
  int8x16_t v27;
  int8x16_t v28;

  if (a3 || a4 != 1)
  {
    v12 = a2[219];
    if (a3 || a4 != 2)
    {
      v9.i64[1] = 0;
      v10 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)0, 4uLL).u64[0];
      v11 = a2 + 108;
      a2 += 54;
    }
    else
    {
      v9 = (float32x4_t)vzip2q_s32((int32x4_t)0, (int32x4_t)0);
      v10 = (float32x4_t)vuzp1q_s32(v12, (int32x4_t)v9);
      v11 = a2 + 108;
    }
  }
  else
  {
    v10 = (float32x4_t)a2[219];
    v9.i64[1] = 0;
    v10.i64[1] = 0;
    v11 = a2 + 54;
  }
  v13 = 0;
  v14 = result + 112;
  v15 = *result;
  do
  {
    v16 = *((unsigned __int8 *)result + v13 + 4);
    if (v15 >= 2)
    {
      v17 = 0uLL;
      v18 = v14;
      v19 = *((unsigned __int8 *)result + v13 + 4);
      do
      {
        v20 = *(unsigned __int8 *)v18;
        v18 = (unsigned __int16 *)((char *)v18 + 1);
        v9.i32[0] = a2->i32[v20];
        v9.i32[1] = v11->i32[v20];
        v17 = vaddq_f32(v17, v9);
        --v19;
      }
      while (v19);
      v9.f32[0] = (float)v16;
      v10 = vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
    }
    v21 = 0;
    *(float32x4_t *)(a5 + 32 * v13) = v10;
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = *((unsigned __int8 *)v14 + v21);
      a9.i32[0] = a2->i32[v24];
      a9.i32[1] = v11->i32[v24];
      v25 = vsubq_f32((float32x4_t)a9, v10);
      v26 = vmovn_s32(vcgtzq_f32(v25));
      v22 = vaddq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vmovl_s16(vdup_lane_s16(v26, 0))));
      a9 = (int32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vmovl_s16(vdup_lane_s16(v26, 1)));
      v23 = vaddq_f32(v23, (float32x4_t)a9);
      ++v21;
    }
    while (v16 != v21);
    v27 = (int8x16_t)vmulq_f32(v22, v22);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    v28 = (int8x16_t)vmulq_f32(v23, v23);
    *(float32x2_t *)v28.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), *(float32x2_t *)v28.i8);
    a9 = vmovl_s16(vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)), 0));
    v9 = (float32x4_t)vbslq_s8((int8x16_t)a9, (int8x16_t)v23, (int8x16_t)v22);
    *(float32x4_t *)(a5 + 32 * v13++ + 16) = v9;
    v14 += 108;
  }
  while (v13 != v15);
  return result;
}

float32x2_t compute_error_squared_rgba(unsigned __int16 *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  float32x4_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  int32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  _OWORD *v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 *v39;
  float32x4_t v40;
  __int32 *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t result;

  v8 = 0;
  v9 = a1 + 112;
  v10 = *a1;
  v11 = 0uLL;
  v12 = vdupq_n_s32(0xD01502F9);
  v13 = vdupq_n_s32(0x501502F9u);
  v14 = a2 + 54;
  v15 = a2 + 108;
  v16 = a2 + 162;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18 = 0uLL;
  do
  {
    v19 = 0;
    v20 = (_OWORD *)(a3 + 32 * v8);
    v22 = *(int32x4_t *)v20;
    v21 = *((float32x4_t *)v20 + 1);
    v23 = *(float32x4_t *)(a4 + 32 * v8 + 16);
    v24 = *((unsigned __int8 *)a1 + v8 + 4);
    v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
    v27 = (float32x4_t)vdupq_laneq_s32(v22, 2);
    v28 = (float32x4_t)vdupq_laneq_s32(v22, 3);
    v29 = a2[221];
    v30 = vdupq_n_s32(v24);
    v31 = (int32x4_t)xmmword_2260FF480;
    v32 = (float32x4_t)v13;
    v33 = (float32x4_t)v12;
    do
    {
      v7.i32[0] = *(_DWORD *)&v9[v19 / 2];
      v34 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.f32));
      v35 = v34.u32[1];
      v36 = v34.u32[3];
      v37 = v34.u32[0];
      v38 = v34.u32[2];
      v34.i32[0] = a2->i32[v34.u32[0]];
      v39 = &v14->i32[v34.u32[1]];
      v34.i32[1] = a2->i32[v34.u32[1]];
      v40.i32[0] = v14->i32[v37];
      v40.i32[1] = *v39;
      v34.i32[2] = a2->i32[v34.u32[2]];
      v41 = &v14->i32[v34.u32[3]];
      v40.i32[2] = v14->i32[v38];
      v34.i32[3] = a2->i32[v34.u32[3]];
      v42.i32[0] = v15->i32[v37];
      v40.i32[3] = *v41;
      v42.i32[1] = v15->i32[v35];
      v42.i32[2] = v15->i32[v38];
      v43.i32[0] = v16->i32[v37];
      v42.i32[3] = v15->i32[v36];
      v43.i32[1] = v16->i32[v35];
      v43.i32[2] = v16->i32[v38];
      v43.i32[3] = v16->i32[v36];
      v44 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v34, v21.f32[0]), vmulq_lane_f32(v40, *(float32x2_t *)v21.f32, 1)), vmulq_laneq_f32(v42, v21, 2)), vmulq_laneq_f32(v43, v21, 3));
      v32 = vminnmq_f32(v44, v32);
      v33 = vmaxnmq_f32(v44, v33);
      v45 = vaddq_f32(vsubq_f32(v25, v34), vmulq_n_f32(v44, v21.f32[0]));
      v46 = vaddq_f32(vsubq_f32(v26, v40), vmulq_lane_f32(v44, *(float32x2_t *)v21.f32, 1));
      v47 = vaddq_f32(vsubq_f32(v27, v42), vmulq_laneq_f32(v44, v21, 2));
      v48 = vaddq_f32(vsubq_f32(v28, v43), vmulq_laneq_f32(v44, v21, 3));
      v49 = (int8x16_t)vcgtq_s32(v30, v31);
      v50 = vaddq_f32(vmulq_f32(v45, vmulq_n_f32(v45, v29.f32[0])), vmulq_f32(v46, vmulq_lane_f32(v46, *(float32x2_t *)v29.f32, 1)));
      v51 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v34, v23.f32[0]), vmulq_lane_f32(v40, *(float32x2_t *)v23.f32, 1)), vmulq_laneq_f32(v42, v23, 2)), vmulq_laneq_f32(v43, v23, 3));
      v52 = vsubq_f32(vmulq_n_f32(v51, v23.f32[0]), v34);
      v53 = vsubq_f32(vmulq_lane_f32(v51, *(float32x2_t *)v23.f32, 1), v40);
      v54 = vsubq_f32(vmulq_laneq_f32(v51, v23, 2), v42);
      v55 = vsubq_f32(vmulq_laneq_f32(v51, v23, 3), v43);
      v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v48, vmulq_laneq_f32(v48, v29, 3)), vaddq_f32(vmulq_f32(v47, vmulq_laneq_f32(v47, v29, 2)), v50)), v49));
      v7 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v55, vmulq_laneq_f32(v55, v29, 3)), vaddq_f32(vmulq_f32(v54, vmulq_laneq_f32(v54, v29, 2)), vaddq_f32(vmulq_f32(v52, vmulq_n_f32(v52, v29.f32[0])), vmulq_f32(v53, vmulq_lane_f32(v53, *(float32x2_t *)v29.f32, 1))))), v49);
      v18 = vaddq_f32(v18, v7);
      v31 = vaddq_s32(v31, v17);
      v19 += 4;
    }
    while (v19 < v24);
    *(float *)(a5 + 4 * v8++) = fmaxf(vmaxvq_f32(v33) - vminvq_f32(v32), 0.0000001);
    v9 += 108;
  }
  while (v8 != v10);
  v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v11.f32);
  *a6 = vpadd_f32(v56, v56).u32[0];
  v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v18.f32);
  result = vpadd_f32(v57, v57);
  *a7 = result.i32[0];
  return result;
}

float32x2_t compute_error_squared_rgb(unsigned __int16 *a1, float32x4_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  float32x4_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  _OWORD *v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  __int32 *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t result;

  v6 = 0;
  v7 = a1 + 112;
  v8 = *a1;
  v9 = a2 + 54;
  v10 = a2 + 108;
  v11 = 0uLL;
  v12 = vdupq_n_s32(0xD01502F9);
  v13 = vdupq_n_s32(0x501502F9u);
  v14.i64[0] = 0x400000004;
  v14.i64[1] = 0x400000004;
  v15 = 0uLL;
  do
  {
    v16 = 0;
    v17 = (_OWORD *)(a3 + 144 * v6);
    v19 = *((int32x4_t *)v17 + 4);
    v18 = *((float32x4_t *)v17 + 5);
    v20 = *((float32x4_t *)v17 + 7);
    v21 = *((unsigned __int8 *)a1 + v6 + 4);
    v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1);
    v24 = (float32x4_t)vdupq_laneq_s32(v19, 2);
    v25 = a2[221];
    v26 = vdupq_n_s32(v21);
    v27 = (int32x4_t)xmmword_2260FF480;
    v28 = (float32x4_t)v13;
    v29 = (float32x4_t)v12;
    do
    {
      v5.i32[0] = *(_DWORD *)&v7[v16 / 2];
      v30 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v5.f32));
      v31 = v30.u32[1];
      v32 = v30.u32[1];
      v33 = v30.u32[0];
      v34 = v30.u32[3];
      v35 = v30.u32[2];
      v30.i32[0] = a2->i32[v30.u32[0]];
      v30.i32[1] = a2->i32[v30.u32[1]];
      v36.i32[0] = v9->i32[v33];
      v30.i32[2] = a2->i32[v30.u32[2]];
      v36.i32[1] = v9->i32[v31];
      v37 = &v9->i32[v30.u32[3]];
      v30.i32[3] = a2->i32[v30.u32[3]];
      v36.i32[2] = v9->i32[v35];
      v36.i32[3] = *v37;
      v38.i32[0] = v10->i32[v33];
      v38.i32[1] = v10->i32[v32];
      v38.i32[2] = v10->i32[v35];
      v38.i32[3] = v10->i32[v34];
      v39 = vaddq_f32(vaddq_f32(vmulq_n_f32(v30, v18.f32[0]), vmulq_lane_f32(v36, *(float32x2_t *)v18.f32, 1)), vmulq_laneq_f32(v38, v18, 2));
      v28 = vminnmq_f32(v39, v28);
      v29 = vmaxnmq_f32(v39, v29);
      v40 = vaddq_f32(vsubq_f32(v22, v30), vmulq_n_f32(v39, v18.f32[0]));
      v41 = vaddq_f32(vsubq_f32(v23, v36), vmulq_lane_f32(v39, *(float32x2_t *)v18.f32, 1));
      v42 = vaddq_f32(vsubq_f32(v24, v38), vmulq_laneq_f32(v39, v18, 2));
      v43 = (int8x16_t)vcgtq_s32(v26, v27);
      v44 = vaddq_f32(vmulq_f32(v40, vmulq_n_f32(v40, v25.f32[0])), vmulq_f32(v41, vmulq_lane_f32(v41, *(float32x2_t *)v25.f32, 1)));
      v45 = vaddq_f32(vaddq_f32(vmulq_n_f32(v30, v20.f32[0]), vmulq_lane_f32(v36, *(float32x2_t *)v20.f32, 1)), vmulq_laneq_f32(v38, v20, 2));
      v46 = vsubq_f32(vmulq_n_f32(v45, v20.f32[0]), v30);
      v47 = vsubq_f32(vmulq_lane_f32(v45, *(float32x2_t *)v20.f32, 1), v36);
      v48 = vsubq_f32(vmulq_laneq_f32(v45, v20, 2), v38);
      v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v42, vmulq_laneq_f32(v42, v25, 2)), v44), v43));
      v5 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v48, vmulq_laneq_f32(v48, v25, 2)), vaddq_f32(vmulq_f32(v46, vmulq_n_f32(v46, v25.f32[0])), vmulq_f32(v47, vmulq_lane_f32(v47, *(float32x2_t *)v25.f32, 1)))), v43);
      v15 = vaddq_f32(v15, v5);
      v27 = vaddq_s32(v27, v14);
      v16 += 4;
    }
    while (v16 < v21);
    *(float *)(a3 + 144 * v6++ + 128) = fmaxf(vmaxvq_f32(v29) - vminvq_f32(v28), 0.0000001);
    v7 += 108;
  }
  while (v6 != v8);
  v49 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v11.f32);
  *a4 = vpadd_f32(v49, v49).u32[0];
  v50 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), *(float32x2_t *)v15.f32);
  result = vpadd_f32(v50, v50);
  *a5 = result.i32[0];
  return result;
}

double physx::PxcNpCacheWrite<physx::PxcLocalContactsCache>(physx::PxcNpCacheStreamPair *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;

  *(_WORD *)(a2 + 8) = 64;
  v5 = physx::PxcNpCacheStreamPair::reserve(a1, 64);
  *(_QWORD *)a2 = v5;
  if (v5)
  {
    if (v5 == -1)
    {
      *(_QWORD *)a2 = 0;
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)a3;
      *(_OWORD *)(v5 + 16) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(a3 + 32);
      result = *(double *)(a3 + 48);
      *(double *)(v5 + 48) = result;
      *(_QWORD *)(v5 + 56) = *(unsigned int *)(a3 + 56);
    }
  }
  return result;
}

uint64_t physx::PxcInvalidContactPair()
{
  return 0;
}

uint64_t physx::PxcGetMaterialHeightField(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;

  if (*(unsigned __int16 *)(a1 + 88) > 1u)
  {
    v7 = *(unsigned int *)(a3 + 4656);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 48);
      v10 = (_WORD *)(a4 + 2 * a2);
      v11 = (unsigned int *)(a3 + 612);
      do
      {
        v12 = *v11;
        v11 += 16;
        v13 = v9 + ((2 * v12) & 0x1FFFFFFFCLL);
        v14 = (_BYTE *)(v13 + 2);
        v15 = (_BYTE *)(v13 + 3);
        if ((v12 & 1) != 0)
          v16 = v15;
        else
          v16 = v14;
        *v10 = *(_WORD *)(v8 + 2 * (*v16 & 0x7F));
        v10 += 2;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    v4 = *(unsigned int *)(a3 + 4656);
    if ((_DWORD)v4)
    {
      v5 = *(_WORD *)(a1 + 34);
      v6 = (_WORD *)(a4 + 2 * a2);
      do
      {
        *v6 = v5;
        v6 += 2;
        --v4;
      }
      while (v4);
    }
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShapeHeightField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;

  if (*(unsigned __int16 *)(a2 + 88) > 1u)
  {
    v8 = *(unsigned int *)(a3 + 4656);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(a2 + 80);
      v10 = *(_WORD *)(a1 + 34);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 48);
      v12 = (_WORD *)(a4 + 2);
      v13 = (unsigned int *)(a3 + 612);
      do
      {
        *(v12 - 1) = v10;
        v14 = *v13;
        v13 += 16;
        v15 = v11 + ((2 * v14) & 0x1FFFFFFFCLL);
        v16 = (_BYTE *)(v15 + 2);
        v17 = (_BYTE *)(v15 + 3);
        if ((v14 & 1) != 0)
          v18 = v17;
        else
          v18 = v16;
        *v12 = *(_WORD *)(v9 + 2 * (*v18 & 0x7F));
        v12 += 2;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v4 = *(unsigned int *)(a3 + 4656);
    if ((_DWORD)v4)
    {
      v5 = *(_WORD *)(a1 + 34);
      v6 = *(_WORD *)(a2 + 34);
      v7 = (_WORD *)(a4 + 2);
      do
      {
        *(v7 - 1) = v5;
        *v7 = v6;
        v7 += 2;
        --v4;
      }
      while (v4);
    }
  }
  return 1;
}

uint64_t physx::PxcGetMaterialMesh(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = *(unsigned int *)(a3 + 4656);
  if (*(unsigned __int16 *)(a1 + 112) >= 2u)
  {
    if ((_DWORD)v4)
    {
      v7 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 104);
      v9 = (_WORD *)(a4 + 2 * a2);
      v10 = (unsigned int *)(a3 + 612);
      do
      {
        v11 = *v10;
        v10 += 16;
        *v9 = *(_WORD *)(v8 + 2 * *(unsigned __int16 *)(v7 + 2 * v11));
        v9 += 2;
        --v4;
      }
      while (v4);
    }
  }
  else if ((_DWORD)v4)
  {
    v5 = *(_WORD *)(a1 + 34);
    v6 = (_WORD *)(a4 + 2 * a2);
    do
    {
      *v6 = v5;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShapeMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  _WORD *v7;
  __int16 v8;
  _WORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v4 = *(unsigned int *)(a3 + 4656);
  if (*(unsigned __int16 *)(a2 + 112) >= 2u)
  {
    if ((_DWORD)v4)
    {
      v8 = *(_WORD *)(a1 + 34);
      v9 = (_WORD *)(a4 + 2);
      v10 = (unsigned int *)(a3 + 612);
      v11 = *(_QWORD *)(a2 + 96);
      v12 = *(_QWORD *)(a2 + 104);
      do
      {
        *(v9 - 1) = v8;
        v13 = *v10;
        v10 += 16;
        *v9 = *(_WORD *)(v12 + 2 * *(unsigned __int16 *)(v11 + 2 * v13));
        v9 += 2;
        --v4;
      }
      while (v4);
    }
  }
  else if ((_DWORD)v4)
  {
    v5 = *(_WORD *)(a1 + 34);
    v6 = *(_WORD *)(a2 + 34);
    v7 = (_WORD *)(a4 + 2);
    do
    {
      *(v7 - 1) = v5;
      *v7 = v6;
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShape(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;
  _WORD *v6;

  v4 = *(unsigned int *)(a3 + 4656);
  if ((_DWORD)v4)
  {
    v5 = *(_WORD *)(a1 + 34);
    v6 = (_WORD *)(a4 + 2 * a2);
    do
    {
      *v6 = v5;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShapeShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  _WORD *v7;

  v4 = *(unsigned int *)(a3 + 4656);
  if ((_DWORD)v4)
  {
    v5 = *(_WORD *)(a1 + 34);
    v6 = *(_WORD *)(a2 + 34);
    v7 = (_WORD *)(a4 + 2);
    do
    {
      *(v7 - 1) = v5;
      *v7 = v6;
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

void physx::PxcDiscreteNarrowPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL4 v15;
  _BOOL4 v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v26;
  void (*v31)(uint64_t, uint64_t, float *, float *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  int v51;
  int v52;
  size_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  int v92;
  uint64_t v93;
  char *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  int v135;
  uint64_t v136;
  uint64_t v140;
  char *v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  uint64_t v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  _BOOL4 v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  int v185;
  int v186;
  int v187;
  int v188;
  float v189;
  unint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  physx::PxcNpCacheStreamPair *v195;
  float v196;
  float v197;
  float v198;
  float *v199;
  uint64_t v200;
  unint64_t v201;
  float v202;
  int v203;
  unsigned __int16 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  void (*v212)(uint64_t, uint64_t, uint64_t, float *);
  size_t __n;
  char *__src;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  int v235;
  float v236;
  char v237;
  float v238;
  float v239;
  uint64_t v240;
  float v241;
  uint64_t v242;
  float v243;
  float v244;
  float v245;
  float v246;
  uint64_t v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  _BYTE v253[24];
  uint64_t v254;
  float v255;
  __int16 v256;
  char v257;
  char v258;
  uint64_t v259;

  v259 = *MEMORY[0x24BDAC8D0];
  v4 = *(_WORD *)(a2 + 48);
  if ((v4 & 0x200) == 0)
    return;
  v9 = *(unsigned __int8 *)(a2 + 54);
  v10 = *(unsigned __int8 *)(a2 + 55);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 7168) + 8);
  v13 = *(unsigned int *)(a2 + 64);
  v12 = *(unsigned int *)(a2 + 68);
  v14 = *(_BYTE *)(a4 + 26);
  if (v4 & 0x80 | v14 & 0x20)
  {
LABEL_9:
    v17 = (float *)(v11 + 32 * v13);
    v18 = (float *)(v11 + 32 * v12);
    *(_BYTE *)(a4 + 26) = v14 & 0xDF;
    v19 = a1 + 7136;
    *(float *)(a1 + 7136) = *(float *)(*(_QWORD *)(a1 + 7176) + 4 * v13) + *(float *)(*(_QWORD *)(a1 + 7176) + 4 * v12);
    if (v9 > v10)
      v20 = v10;
    else
      v20 = v9;
    if (v9 > v10)
      v21 = v9;
    else
      v21 = v10;
    if (v9 > v10)
      v22 = v18;
    else
      v22 = v17;
    if (v9 > v10)
      v23 = v17;
    else
      v23 = v18;
    if (v9 > v10)
      v24 = *(_QWORD *)(a2 + 24);
    else
      v24 = *(_QWORD *)(a2 + 16);
    if (v9 > v10)
      _X12 = *(_QWORD *)(a2 + 16);
    else
      _X12 = *(_QWORD *)(a2 + 24);
    v26 = a1 + 28 * v20 + 4 * v21;
    ++*(_DWORD *)(v26 + 120);
    *(_DWORD *)(a1 + 4656) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 23) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    __asm { PRFM            #0, [X12] }
    v31 = (void (*)(uint64_t, uint64_t, float *, float *, uint64_t, uint64_t, uint64_t, uint64_t))*(&physx::g_ContactMethodTable[7 * v20] + v21);
    v247 = _X12;
    if (!*(_BYTE *)(a1 + 7185) || !physx::g_CanUseContactCache[8 * v20 - v20 + v21])
    {
      v173 = v20;
      v31(v24 + 40, _X12 + 40, v22, v23, v19, a3, a1 + 560, a1 + 8);
      v172 = v173;
LABEL_121:
      v212 = (void (*)(uint64_t, uint64_t, uint64_t, float *))*(&physx::g_GetMaterialMethodTable[7 * v172] + v21);
      if (v212)
        v212(v24, v247, a1, &v248);
      if (v9 > v10)
        flipContacts(a1, (uint64_t)&v248);
      finishContacts(*(unsigned __int16 *)(a2 + 48), a4, a1, (unsigned __int16 *)&v248, v21 > 4);
      return;
    }
    _X9 = *(_QWORD *)a3;
    v218 = v21;
    v219 = v24;
    v217 = v20;
    if (*(_QWORD *)a3)
    {
      __asm { PRFM            #0, [X9] }
      if ((unint64_t)((_X9 & 0x7F) + *(unsigned __int16 *)(a3 + 8)) >= 0x81)
        __asm { PRFM            #0, [X9,#0x80] }
      v35 = a1 + 560;
      *(_DWORD *)(a1 + 4656) = 0;
      v37 = *(float *)_X9;
      v36 = *(float *)(_X9 + 4);
      v248 = *(float *)_X9;
      v249 = v36;
      v38 = *(float *)(_X9 + 8);
      v39 = *(float *)(_X9 + 12);
      v250 = v38;
      v251 = v39;
      v41 = *(float *)(_X9 + 20);
      v252 = *(float *)(_X9 + 16);
      v40 = v252;
      *(float *)v253 = v41;
      v42 = *(float *)(_X9 + 28);
      *(_DWORD *)&v253[4] = *(_DWORD *)(_X9 + 24);
      v43 = *(float *)&v253[4];
      *(float *)&v253[8] = v42;
      v45 = *(float *)(_X9 + 36);
      *(_DWORD *)&v253[12] = *(_DWORD *)(_X9 + 32);
      v44 = *(float *)&v253[12];
      *(float *)&v253[16] = v45;
      v47 = *(float *)(_X9 + 44);
      *(_DWORD *)&v253[20] = *(_DWORD *)(_X9 + 40);
      v46 = *(float *)&v253[20];
      *(float *)&v254 = v47;
      v49 = *(float *)(_X9 + 52);
      HIDWORD(v254) = *(_DWORD *)(_X9 + 48);
      v48 = *((float *)&v254 + 1);
      v255 = v49;
      v50 = *(unsigned __int16 *)(_X9 + 56);
      v256 = *(_WORD *)(_X9 + 56);
      v51 = *(unsigned __int8 *)(_X9 + 58);
      v257 = *(_BYTE *)(_X9 + 58);
      v52 = *(unsigned __int8 *)(_X9 + 59);
      v258 = *(_BYTE *)(_X9 + 59);
      v53 = *(unsigned int *)(_X9 + 60);
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
      v54 = *v23;
      v55 = v23[1];
      v56 = v23[2];
      v57 = v23[3];
      v58 = v22[4] - v23[4];
      v59 = v22[5] - v23[5];
      v60 = v22[6] - v23[6];
      v61 = v58 + v58;
      v62 = v59 + v59;
      v63 = v60 + v60;
      v64 = (float)(v57 * v57) + -0.5;
      v65 = (float)((float)-(float)(v55 * v62) - (float)(*v23 * v61)) - (float)(v56 * v63);
      v66 = (float)((float)(v57 * (float)((float)(v56 * v62) - (float)(v55 * v63))) + (float)(v61 * v64))
          - (float)(*v23 * v65);
      v67 = (float)((float)(v57 * (float)((float)(*v23 * v63) - (float)(v56 * v61))) + (float)(v62 * v64))
          - (float)(v55 * v65);
      v68 = (float)((float)(v57 * (float)((float)(v55 * v61) - (float)(*v23 * v62))) + (float)(v63 * v64))
          - (float)(v56 * v65);
      v243 = v41;
      v245 = v40;
      v238 = v48;
      v239 = v47;
      v241 = v43;
      v236 = v49;
      v69 = (float)(v40 - v47) + (float)(v40 - v47);
      v70 = (float)(v41 - v48) + (float)(v41 - v48);
      v71 = (float)(v43 - v49) + (float)(v43 - v49);
      v72 = (float)(v46 * v46) + -0.5;
      v73 = (float)((float)-(float)(v44 * v70) - (float)(v42 * v69)) - (float)(v45 * v71);
      v74 = (float)((float)(v46 * (float)((float)(v45 * v70) - (float)(v44 * v71))) + (float)(v69 * v72))
          - (float)(v42 * v73);
      v75 = (float)((float)(v46 * (float)((float)(v42 * v71) - (float)(v45 * v69))) + (float)(v70 * v72))
          - (float)(v44 * v73);
      v76 = (float)((float)(v46 * (float)((float)(v44 * v69) - (float)(v42 * v70))) + (float)(v71 * v72))
          - (float)(v45 * v73);
      v77 = vabds_f32(v66, v74);
      v78 = vabds_f32(v67, v75);
      if (v77 <= v78)
        v77 = v78;
      v79 = vabds_f32(v68, v76);
      if (v77 <= v79)
        v80 = v79;
      else
        v80 = v77;
      if (v80 < (float)(*(float *)(a1 + 7144) * 0.01))
      {
        v81 = -v55;
        v82 = v22[2];
        v83 = v22[3];
        v84 = v22[1];
        v85 = (float)((float)((float)(v54 * *v22) + (float)(v57 * v83)) + (float)(v55 * v84)) + (float)(v56 * v82);
        v86 = (float)((float)((float)(v83 * (float)-v56) + (float)(v57 * v82)) + (float)((float)-v54 * v84))
            + (float)(*v22 * v55);
        v87 = (float)((float)(v83 * v81) + (float)(v57 * v84)) + (float)((float)-v56 * *v22);
        v88 = vabds_f32((float)((float)((float)(v83 * (float)-v54) + (float)(v57 * *v22)) + (float)(v81 * v82))+ (float)(v84 * v56), (float)((float)((float)(v39 * (float)-v42) + (float)(v46 * v37)) + (float)((float)-v44 * v38))+ (float)(v36 * v45));
        v89 = vabds_f32(v87 + (float)(v82 * v54), (float)((float)((float)(v39 * (float)-v44) + (float)(v46 * v36)) + (float)((float)-v45 * v37))+ (float)(v38 * v42));
        if (v88 <= v89)
          v88 = v89;
        v90 = vabds_f32(v86, (float)((float)((float)(v39 * (float)-v45) + (float)(v46 * v38)) + (float)((float)-v42 * v36))+ (float)(v37 * v44));
        if (v88 <= v90)
          v88 = v90;
        v91 = vabds_f32(v85, (float)((float)((float)(v37 * v42) + (float)(v46 * v39)) + (float)(v44 * v36)) + (float)(v45 * v38));
        if (v88 <= v91)
          v88 = v91;
        if (v88 < 0.01)
        {
          v215 = v51;
          v216 = v50;
          v234 = v37;
          __n = v53;
          __src = (char *)(_X9 + 64);
          v92 = (v53 + 79) & 0xFFFFFFF0;
          *(_WORD *)(a3 + 8) = (v53 + 79) & 0xFFF0;
          v93 = physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a1 + 536), (v53 + 79) & 0xFFF0);
          if (v93 == -1)
            _X8 = 0;
          else
            _X8 = v93;
          *(_QWORD *)a3 = _X8;
          __asm { PRFM            #0, [X8] }
          if ((_X8 & 0x7F) + v92 >= 0x81)
            __asm { PRFM            #0, [X8,#0x80] }
          *(_DWORD *)(a1 + 4656) = v216;
          v24 = v219;
          if (v216)
          {
            v97 = 0;
            v98 = *v23;
            v99 = v23[1];
            v100 = v23[2];
            v101 = v23[3];
            v102 = v99 + v99;
            v103 = v100 + v100;
            v104 = v99 * (float)(v99 + v99);
            v105 = v100 * (float)(v100 + v100);
            v106 = (float)(v98 + v98) * v99;
            v107 = (float)(v98 + v98) * v100;
            v108 = (float)(v98 + v98) * v101;
            v109 = v102 * v100;
            v110 = v102 * v101;
            v111 = v103 * v101;
            v232 = v106 + v111;
            v233 = (float)(1.0 - v104) - v105;
            v230 = v106 - v111;
            v231 = v107 - v110;
            v112 = 1.0 - (float)(v98 * (float)(v98 + v98));
            v228 = v109 + v108;
            v229 = v112 - v105;
            v226 = v109 - v108;
            v227 = v107 + v110;
            v224 = v23[4];
            v225 = v112 - v104;
            v222 = v23[6];
            v223 = v23[5];
            v113 = *v22;
            v114 = v22[1];
            v115 = v22[2];
            v116 = v22[3];
            v117 = v114 + v114;
            v118 = v115 + v115;
            v119 = v114 * (float)(v114 + v114);
            v120 = v115 * (float)(v115 + v115);
            v121 = (float)(v113 + v113) * v114;
            v122 = (float)(v113 + v113) * v115;
            v123 = (float)(v113 + v113) * v116;
            v124 = v117 * v115;
            v125 = v117 * v116;
            v126 = v118 * v116;
            v221 = (float)(1.0 - v119) - v120;
            v220 = v122 - v125;
            v127 = 1.0 - (float)(v113 * (float)(v113 + v113));
            v128 = v127 - v120;
            v129 = v122 + v125;
            v130 = v127 - v119;
            v131 = v22[4];
            v132 = v22[5];
            v133 = v22[6];
            v134 = (float)(v39 * v39) + -0.5;
            v135 = v216;
            v136 = 560;
            _X14 = __src;
            do
            {
              if (v135 != 1)
                __asm { PRFM            #0, [X14,#0x80] }
              if (v52)
                _ZF = (_DWORD)v136 == 560;
              else
                _ZF = 1;
              if (_ZF)
                v140 = 12;
              else
                v140 = 0;
              v141 = &_X14[v140];
              v142 = *((float *)v141 + 1);
              v143 = *((float *)v141 + 2);
              v144 = (float)(*(float *)v141 - v245) + (float)(*(float *)v141 - v245);
              v145 = (float)(v142 - v243) + (float)(v142 - v243);
              v146 = (float)(v143 - v241) + (float)(v143 - v241);
              v147 = (float)((float)(v36 * v145) + (float)(v234 * v144)) + (float)(v38 * v146);
              v148 = (float)((float)(v144 * v134)
                           - (float)((float)((float)(v145 * (float)-v38) + (float)(v36 * v146)) * v39))
                   + (float)(v234 * v147);
              v149 = (float)((float)(v145 * v134)
                           - (float)((float)((float)(v146 * (float)-v234) + (float)(v38 * v144)) * v39))
                   + (float)(v36 * v147);
              v150 = (float)((float)(v146 * v134)
                           - (float)((float)((float)(v144 * (float)-v36) + (float)(v234 * v145)) * v39))
                   + (float)(v38 * v147);
              v151 = (float)(v129 * v150) + (float)((float)(v221 * v148) + (float)((float)(v121 - v126) * v149));
              v152 = (float)((float)(v124 - v123) * v150)
                   + (float)((float)((float)(v121 + v126) * v148) + (float)(v128 * v149));
              v153 = (float)(v130 * v150) + (float)((float)(v220 * v148) + (float)((float)(v124 + v123) * v149));
              v154 = (float)(*(float *)v141 - v239) + (float)(*(float *)v141 - v239);
              v155 = (float)(v142 - v238) + (float)(v142 - v238);
              v156 = (float)(v143 - v236) + (float)(v143 - v236);
              v157 = (float)((float)(v44 * v155) + (float)(v42 * v154)) + (float)(v45 * v156);
              v158 = (float)((float)(v154 * v72)
                           - (float)((float)((float)(v155 * (float)-v45) + (float)(v44 * v156)) * v46))
                   + (float)(v42 * v157);
              v159 = (float)((float)(v155 * v72)
                           - (float)((float)((float)(v156 * (float)-v42) + (float)(v45 * v154)) * v46))
                   + (float)(v44 * v157);
              v160 = (float)((float)(v156 * v72)
                           - (float)((float)((float)(v154 * (float)-v44) + (float)(v42 * v155)) * v46))
                   + (float)(v45 * v157);
              v161 = (float)(v231 * v158) + (float)(v228 * v159);
              v162 = (float)(v227 * v160) + (float)((float)(v233 * v158) + (float)(v230 * v159));
              v163 = (float)(v226 * v160) + (float)((float)(v232 * v158) + (float)(v229 * v159));
              v164 = *((float *)v141 + 3);
              v165 = a1 + v136;
              if (_ZF)
                v97 = _X14;
              v166 = v131 + v151;
              v167 = v132 + v152;
              v168 = v224 + v162;
              v169 = v223 + v163;
              *(_QWORD *)v165 = *(_QWORD *)v97;
              *(_DWORD *)(v165 + 8) = *((_DWORD *)v97 + 2);
              *(float *)(v165 + 16) = (float)(v166 + v168) * 0.5;
              *(float *)(v165 + 20) = (float)(v167 + v169) * 0.5;
              v170 = v222 + (float)((float)(v225 * v160) + v161);
              *(float *)(v165 + 24) = (float)((float)(v133 + v153) + v170) * 0.5;
              *(float *)(v165 + 12) = v164
                                    + (float)((float)((float)(*((float *)v97 + 1) * (float)(v167 - v169))
                                                    + (float)((float)(v166 - v168) * *(float *)v97))
                                            + (float)((float)((float)(v133 + v153) - v170) * *((float *)v97 + 2)));
              if (v215)
              {
                _X14 = v141 + 20;
                v171 = *((_DWORD *)v141 + 4);
              }
              else
              {
                _X14 = v141 + 16;
                v171 = -1;
              }
              *(_DWORD *)(v165 + 52) = v171;
              v136 += 64;
              --v135;
            }
            while (v135);
          }
          if (_X8)
          {
            *(float *)_X8 = v234;
            *(float *)(_X8 + 4) = v36;
            *(float *)(_X8 + 8) = v38;
            *(float *)(_X8 + 12) = v39;
            *(float *)(_X8 + 16) = v245;
            *(float *)(_X8 + 20) = v243;
            *(float *)(_X8 + 24) = v241;
            *(_OWORD *)(_X8 + 28) = *(_OWORD *)&v253[8];
            *(_QWORD *)(_X8 + 44) = v254;
            *(float *)(_X8 + 52) = v255;
            *(_WORD *)(_X8 + 56) = v216;
            *(_BYTE *)(_X8 + 58) = v215;
            *(_BYTE *)(_X8 + 59) = v52;
            *(_DWORD *)(_X8 + 60) = __n;
            memcpy((void *)(_X8 + 64), __src, __n);
          }
          ++*(_DWORD *)(a1 + 7192);
          v172 = v217;
          v21 = v218;
          goto LABEL_121;
        }
      }
    }
    else
    {
      v35 = a1 + 560;
      *(_DWORD *)(a1 + 4656) = 0;
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
    }
    v31(v24 + 40, _X12 + 40, v22, v23, v19, a3, v35, a1 + 8);
    v177 = *v22;
    v178 = v22[1];
    v248 = *v22;
    v249 = v178;
    v179 = v22[2];
    v180 = v22[3];
    v250 = v179;
    v251 = v180;
    v181 = v22[4];
    v252 = v181;
    v182 = *(_QWORD *)(v22 + 5);
    v183 = *(_QWORD *)v23;
    *(_QWORD *)&v184 = v182;
    *((_QWORD *)&v184 + 1) = *(_QWORD *)v23;
    *(_OWORD *)v253 = v184;
    v185 = *((_DWORD *)v23 + 2);
    *(_DWORD *)&v253[16] = v185;
    v186 = *((_DWORD *)v23 + 3);
    *(_DWORD *)&v253[20] = v186;
    v187 = *((_DWORD *)v23 + 4);
    LODWORD(v254) = v187;
    v188 = *((_DWORD *)v23 + 5);
    HIDWORD(v254) = v188;
    v189 = v23[6];
    v255 = v189;
    v190 = *(unsigned int *)(a1 + 4656);
    if (!(_DWORD)v190)
    {
      v256 = 0;
      v257 = 0;
      v195 = (physx::PxcNpCacheStreamPair *)(a1 + 536);
      goto LABEL_119;
    }
    v240 = v183;
    v242 = v182;
    v244 = v178;
    v246 = v177;
    v191 = *(_DWORD *)(a1 + 612);
    v257 = v191 != -1;
    if ((_DWORD)v190 != 1)
    {
      v196 = *(float *)(a1 + 560);
      v192 = 1;
      if (*(float *)(a1 + 624) != v196
        || (v197 = *(float *)(a1 + 564), *(float *)(a1 + 628) != v197)
        || (v198 = *(float *)(a1 + 568), *(float *)(a1 + 632) != v198))
      {
LABEL_99:
        v237 = 0;
        v258 = 0;
        if (v191 == -1)
          v203 = 28;
        else
          v203 = 32;
        v194 = v203 * v190;
        goto LABEL_103;
      }
      v199 = (float *)(a1 + 696);
      v200 = 2;
      while (v190 != v200)
      {
        v201 = v200;
        if (*(v199 - 2) == v196 && *(v199 - 1) == v197)
        {
          v202 = *v199;
          v199 += 16;
          ++v200;
          if (v202 == v198)
            continue;
        }
        v192 = v201 < v190;
        goto LABEL_99;
      }
    }
    v192 = 0;
    v237 = 1;
    v258 = 1;
    if (v191 == -1)
      v193 = 16;
    else
      v193 = 20;
    v194 = v193 * v190 + 12;
LABEL_103:
    v195 = (physx::PxcNpCacheStreamPair *)(a1 + 536);
    v235 = v194;
    v204 = v194 + 79;
    *(_WORD *)(a3 + 8) = v204 & 0xFFF0;
    v205 = physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a1 + 536), v204 & 0xFFF0);
    if (v205 == -1)
      v206 = 0;
    else
      v206 = v205;
    *(_QWORD *)a3 = v206;
    if (v206)
    {
      v207 = 0;
      *(_BYTE *)(v206 + 58) = v191 != -1;
      *(float *)v206 = v246;
      *(float *)(v206 + 4) = v244;
      *(float *)(v206 + 8) = v179;
      *(float *)(v206 + 12) = v180;
      *(float *)(v206 + 16) = v181;
      *(_QWORD *)&v208 = v242;
      *((_QWORD *)&v208 + 1) = v240;
      *(_OWORD *)(v206 + 20) = v208;
      *(_DWORD *)(v206 + 36) = v185;
      *(_DWORD *)(v206 + 40) = v186;
      *(_DWORD *)(v206 + 44) = v187;
      *(_DWORD *)(v206 + 48) = v188;
      *(float *)(v206 + 52) = v189;
      *(_WORD *)(v206 + 56) = v190;
      *(_BYTE *)(v206 + 59) = v237;
      *(_DWORD *)(v206 + 60) = v235;
      v209 = v206 + 64;
      if (v190 <= 1)
        v210 = 1;
      else
        v210 = v190;
      v211 = (unint64_t)v210 << 6;
      v172 = v217;
      v21 = v218;
      do
      {
        if (((v207 != 0) & ~v192) == 0)
        {
          *(_QWORD *)v209 = *(_QWORD *)(a1 + v207 + 560);
          *(_DWORD *)(v209 + 8) = *(_DWORD *)(a1 + v207 + 568);
          v209 += 12;
        }
        *(int8x16_t *)v209 = vextq_s8(*(int8x16_t *)(a1 + v207 + 572), *(int8x16_t *)(a1 + v207 + 572), 4uLL);
        if (v191 == -1)
        {
          v209 += 16;
        }
        else
        {
          *(_DWORD *)(v209 + 16) = *(_DWORD *)(a1 + v207 + 612);
          v209 += 20;
        }
        v207 += 64;
      }
      while (v211 != v207);
      goto LABEL_120;
    }
    v256 = 0;
LABEL_119:
    physx::PxcNpCacheWrite<physx::PxcLocalContactsCache>(v195, a3, (uint64_t)&v248);
    v172 = v217;
    v21 = v218;
LABEL_120:
    v24 = v219;
    goto LABEL_121;
  }
  if ((v4 & 0x20) != 0)
  {
    v15 = (*(_BYTE *)(v11 + 32 * v13 + 28) & 1) == 0;
    if ((v4 & 0x40) != 0)
      goto LABEL_5;
  }
  else
  {
    v15 = 0;
    if ((v4 & 0x40) != 0)
    {
LABEL_5:
      v16 = (*(_BYTE *)(v11 + 32 * v12 + 28) & 1) == 0;
      goto LABEL_8;
    }
  }
  v16 = 0;
LABEL_8:
  if (v15 || v16)
    goto LABEL_9;
  if (v9 <= v10)
    v174 = *(unsigned __int8 *)(a2 + 55);
  else
    v174 = *(unsigned __int8 *)(a2 + 54);
  if (*(_BYTE *)(a1 + 7185))
  {
    if (v9 >= v10)
      v175 = *(unsigned __int8 *)(a2 + 55);
    else
      v175 = *(unsigned __int8 *)(a2 + 54);
    v176 = physx::g_CanUseContactCache[8 * v175 - v175 + v174] != 0;
  }
  else
  {
    v176 = 0;
  }
  if (*(_BYTE *)(a4 + 24))
    ++*(_DWORD *)(a1 + 7196);
  copyBuffers(a4, a3, a1, v176, v174 > 4);
}

void physx::PxcDiscreteNarrowPhasePCM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v28;
  int v34;
  int v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, unsigned __int16 *);
  _BYTE *v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int128 v49;
  unsigned int v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  unint64_t v58;
  unsigned int *v59;
  _DWORD *v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  _OWORD *v66;
  char v67;
  unsigned int v68;
  unsigned __int16 v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *(_WORD *)(a2 + 48);
  if ((v4 & 0x200) == 0)
    return;
  v9 = *(unsigned __int8 *)(a2 + 54);
  v10 = *(unsigned __int8 *)(a2 + 55);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 7168) + 8);
  v13 = *(unsigned int *)(a2 + 64);
  v12 = *(unsigned int *)(a2 + 68);
  v14 = *(_BYTE *)(a4 + 26);
  if (v4 & 0x80 | v14 & 0x20)
    goto LABEL_9;
  if ((v4 & 0x20) != 0)
  {
    v15 = (*(_BYTE *)(v11 + 32 * v13 + 28) & 1) == 0;
    if ((v4 & 0x40) != 0)
      goto LABEL_5;
  }
  else
  {
    v15 = 0;
    if ((v4 & 0x40) != 0)
    {
LABEL_5:
      v16 = (*(_BYTE *)(v11 + 32 * v12 + 28) & 1) == 0;
      goto LABEL_8;
    }
  }
  v16 = 0;
LABEL_8:
  if (v15 || v16)
  {
LABEL_9:
    v17 = v11 + 32 * v13;
    v18 = v11 + 32 * v12;
    *(_BYTE *)(a4 + 26) = v14 & 0xDF;
    v19 = a1 + 7136;
    *(float *)(a1 + 7136) = *(float *)(*(_QWORD *)(a1 + 7176) + 4 * v13) + *(float *)(*(_QWORD *)(a1 + 7176) + 4 * v12);
    if (v9 > v10)
      v20 = v10;
    else
      v20 = v9;
    if (v9 > v10)
      v21 = v9;
    else
      v21 = v10;
    if (v9 > v10)
      v22 = v18;
    else
      v22 = v17;
    if (v9 > v10)
      v23 = v17;
    else
      v23 = v18;
    if (v9 > v10)
      v24 = *(_QWORD *)(a2 + 24);
    else
      v24 = *(_QWORD *)(a2 + 16);
    if (v9 > v10)
      v25 = *(_QWORD *)(a2 + 16);
    else
      v25 = *(_QWORD *)(a2 + 24);
    v26 = (_OWORD *)(a1 + 4672);
    v67 = *(_BYTE *)(a3 + 11);
    v68 = v21;
    if ((v67 & 2) != 0)
    {
      v65 = v10;
      v39 = v22;
      v40 = v23;
      v41 = v20;
      physx::Gu::MultiplePersistentContactManifold::fromBuffer(a1 + 4672, *(unsigned __int8 **)a3);
      v26 = (_OWORD *)(a1 + 4672);
      v20 = v41;
      v23 = v40;
      v22 = v39;
      v19 = a1 + 7136;
      v10 = v65;
      *(_QWORD *)a3 = a1 + 4672;
      *(_BYTE *)(a3 + 11) |= 3u;
    }
    else if ((*(_BYTE *)(a3 + 11) & 1) != 0)
    {
      _X8 = *(unsigned __int8 **)a3;
      v28 = *(_QWORD *)a3 >> 5;
      __asm { PRFM            #0, [X8] }
      v34 = ~((unint64_t)(*(_QWORD *)a3 + 127) >> 5) + v28;
      _X11 = *(unsigned __int8 **)a3;
      do
      {
        __asm { PRFM            #0, [X11] }
        _X11 += 32;
        _CF = __CFADD__(v34++, 1);
      }
      while (!_CF);
      v37 = ~((unint64_t)(_X8 + 255) >> 5) + v28;
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
        _CF = __CFADD__(v37++, 1);
      }
      while (!_CF);
    }
    v66 = v26;
    v42 = a1 + 28 * v20 + 4 * v68;
    ++*(_DWORD *)(v42 + 120);
    *(_DWORD *)(a1 + 4656) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 23) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v43 = 7 * v20;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&physx::g_PCMContactMethodTable[v43]
                                                                                                  + v68))(v24 + 40, v25 + 40, v22, v23, v19, a3, a1 + 560, a1 + 8);
    v44 = (void (*)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))*(&physx::g_GetMaterialMethodTable[v43]
                                                                              + v68);
    if (v44)
      v44(v24, v25, a1, v69);
    if (v9 > v10)
      flipContacts(a1, (uint64_t)v69);
    if ((v67 & 2) != 0)
    {
      v45 = (_BYTE *)(a1 + 4734);
      v46 = 48 * *(unsigned __int8 *)(a1 + 4735) + 16 * *(unsigned __int8 *)(a1 + 4734);
      v47 = v46 + 48;
      v48 = physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a1 + 536), v46 + 48);
      if (v48)
      {
        *(_DWORD *)(v48 + 32) = *v45;
        v49 = v66[1];
        *(_OWORD *)v48 = *v66;
        *(_OWORD *)(v48 + 16) = v49;
        v50 = *v45;
        if (*v45)
        {
          v51 = 0;
          v52 = (_DWORD *)(v48 + 48);
          v53 = a1 + 4672;
          do
          {
            v54 = *(unsigned __int8 *)(v53 + v51 + 56);
            v55 = v53 + 400 * *(unsigned __int8 *)(v53 + v51 + 56);
            v56 = *(_DWORD *)(v55 + 448);
            *v52 = v56;
            v57 = v52 + 4;
            if (v56)
            {
              v58 = 0;
              v59 = (unsigned int *)(v55 + 448);
              v60 = v52 + 7;
              v61 = (_DWORD *)(a1 + 4784 + 400 * v54);
              do
              {
                *(_OWORD *)(v60 - 3) = *((_OWORD *)v61 - 3);
                *(_OWORD *)(v60 + 1) = *((_OWORD *)v61 - 2);
                *(_OWORD *)(v60 + 5) = *((_OWORD *)v61 - 1);
                v62 = *v61;
                v61 += 16;
                *v60 = v62;
                v60 += 12;
                ++v58;
                v63 = *v59;
              }
              while (v58 < v63);
              v50 = *v45;
            }
            else
            {
              LODWORD(v63) = 0;
            }
            v52 = &v57[12 * v63];
            ++v51;
          }
          while (v51 < v50);
        }
        *(_WORD *)(a3 + 8) = v47;
      }
      *(_QWORD *)a3 = v48;
      *(_BYTE *)(a3 + 11) |= 3u;
    }
    finishContacts(*(unsigned __int16 *)(a2 + 48), a4, a1, v69, v68 > 4);
    return;
  }
  if (v9 <= v10)
    v64 = *(unsigned __int8 *)(a2 + 55);
  else
    v64 = *(unsigned __int8 *)(a2 + 54);
  if (*(_BYTE *)(a4 + 24))
    ++*(_DWORD *)(a1 + 7196);
  copyBuffers(a4, a3, a1, 0, v64 > 4);
}

float flipContacts(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float result;
  unint64_t v6;

  v2 = *(unsigned int *)(a1 + 4656);
  if ((_DWORD)v2)
  {
    v3 = a2 + 2;
    v4 = (float *)(a1 + 568);
    do
    {
      result = -*v4;
      *((float32x2_t *)v4 - 1) = vneg_f32(*(float32x2_t *)(v4 - 2));
      *v4 = result;
      v4 += 16;
      HIDWORD(v6) = *(_DWORD *)(v3 - 2);
      LODWORD(v6) = HIDWORD(v6);
      *(_DWORD *)(v3 - 2) = v6 >> 16;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t finishContacts(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int a5)
{
  unsigned int v6;
  char v7;
  int v9;
  int v10;
  __int16 v11;

  v6 = *(_DWORD *)(a3 + 4656);
  *(_BYTE *)(a2 + 24) = v6;
  v7 = *(_BYTE *)(a2 + 26) & 0xFC;
  if (v6)
  {
    ++*(_DWORD *)(a3 + 7196);
    *(_BYTE *)(a2 + 26) = v7 | 2;
    v11 = 0;
    if ((result & 1) != 0 || *(_BYTE *)(a3 + 7186))
      v9 = 1;
    else
      v9 = BYTE1(result) & 1;
    if (v9 | a5)
      v10 = 4 * v6;
    else
      v10 = 0;
    result = physx::writeCompressedContact((float *)(a3 + 560), v6, a3, (_BYTE *)(a2 + 24), (_QWORD *)a2, (float *)(a2 + 8), &v11, (uint64_t *)(a2 + 16), v10, *(_QWORD **)(a3 + 7256), (result & 0x80) != 0, 0, a4, (_BYTE *)(a2 + 25), 0, 0, 0, *(_BYTE *)(a3 + 7187), *(_QWORD *)(a3 + 7224),
               *(_QWORD *)(a3 + 7232),
               *(_QWORD *)(a3 + 7240),
               a5);
    if (*(_DWORD *)(a3 + 4656))
    {
      if (!*(_BYTE *)(a2 + 24))
      {
        *(_BYTE *)(a2 + 26) = *(_BYTE *)(a2 + 26) & 0xFC | 1;
        *(_WORD *)(a2 + 24) = 0;
        --*(_DWORD *)(a3 + 7196);
      }
    }
  }
  else
  {
    *(_BYTE *)(a2 + 26) = v7 | 1;
    *(_WORD *)(a2 + 24) = 0;
  }
  return result;
}

void copyBuffers(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  size_t v8;
  const void *v11;
  uint64_t v12;
  char v13;
  size_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BOOL4 v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned __int16 v39;
  unsigned int v40;
  const void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  char *v48;
  int v49;
  const void *v50;
  void *v51;
  void *v52;
  BOOL v53;
  void *v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  int v58;

  v7 = *(unsigned __int8 *)(a1 + 24);
  v8 = 16 * v7 + 48 * *(unsigned __int8 *)(a1 + 25);
  if ((_DWORD)v8)
  {
    v11 = *(const void **)a1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = 2;
    if (a5)
      v13 = 3;
    v14 = v7 << v13;
    v15 = *(_QWORD *)(a3 + 7224);
    if (v15)
    {
      v16 = *(const void **)(a1 + 8);
      v17 = 48 * *(unsigned __int8 *)(a1 + 25);
      v8 = (16 * v7);
      v18 = (unsigned int *)(v15 + 8);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 + v8;
      }
      while (__stlxr(v20, v18));
      v21 = *(_QWORD *)(a3 + 7224);
      v22 = *(unsigned int *)(v21 + 12);
      v23 = *(_DWORD *)(v21 + 16) + *(_DWORD *)(v21 + 8);
      v24 = (char *)(*(_QWORD *)v21 + v22 - v20);
      v25 = (unsigned int *)(*(_QWORD *)(a3 + 7232) + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 + v17;
      }
      while (__stlxr(v27, v25));
      v28 = *(uint64_t **)(a3 + 7232);
      v29 = *((unsigned int *)v28 + 3);
      v31 = *((_DWORD *)v28 + 4) + *((_DWORD *)v28 + 2) >= v29 || v23 >= v22;
      v32 = *v28;
      if ((_DWORD)v14)
      {
        v33 = (unsigned int *)(*(_QWORD *)(a3 + 7240) + 8);
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 + v14;
        }
        while (__stlxr(v35, v33));
        v36 = *(_QWORD *)(a3 + 7240);
        v37 = *(unsigned int *)(v36 + 12);
        if (*(_DWORD *)(v36 + 16) + *(_DWORD *)(v36 + 8) >= v37)
          LOBYTE(v31) = 1;
        if (!v31)
        {
          v57 = v12;
          v58 = a4;
          v38 = (char *)(*(_QWORD *)v36 + v37 - v35);
LABEL_30:
          v43 = (char *)(v32 + v29 - v27);
          memcpy(v43, v11, v17);
          v48 = v24;
          v11 = v16;
LABEL_37:
          memcpy(v48, v11, v8);
          if (a5)
            memcpy(&v38[4 * *(unsigned __int8 *)(a1 + 24)], (const void *)(v57 + 4 * *(unsigned __int8 *)(a1 + 24)), 4 * *(unsigned __int8 *)(a1 + 24));
          a4 = v58;
          if ((_DWORD)v14 && v38)
          {
            bzero(v38, v14);
            a4 = v58;
          }
          goto LABEL_43;
        }
      }
      else if (!v31)
      {
        v57 = v12;
        v58 = a4;
        v38 = 0;
        goto LABEL_30;
      }
      v38 = 0;
      v24 = 0;
      v43 = 0;
      *(_WORD *)(a1 + 24) = 0;
    }
    else
    {
      v39 = v14 + v8 + 15;
      v40 = v39 & 0xFFF0;
      v57 = *(_QWORD *)(a1 + 16);
      v58 = a4;
      if (v40 <= 0x4000)
      {
        v44 = *(_QWORD *)(a3 + 520);
        if (v44 && (v45 = *(unsigned int *)(a3 + 528), v45 + v40 <= 0x4000))
        {
          v43 = (char *)(v44 + v45);
          *(_DWORD *)(a3 + 528) = v45 + v40;
        }
        else
        {
          v46 = *(const void **)a1;
          v47 = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)(a3 + 512), *(_QWORD *)(a3 + 512) + 16 * *(unsigned int *)(*(_QWORD *)(a3 + 512) + 188) + 24, 0, 0, 1);
          v11 = v46;
          v43 = (char *)v47;
          *(_QWORD *)(a3 + 520) = v47;
          *(_DWORD *)(a3 + 528) = v40;
        }
      }
      else
      {
        v41 = *(const void **)a1;
        v42 = physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(*(pthread_mutex_t ***)(a3 + 512), v39 & 0xFFF0);
        v11 = v41;
        v43 = (char *)v42;
      }
      if ((_DWORD)v14)
        v38 = &v43[v8];
      else
        v38 = 0;
      if (v43)
      {
        v24 = &v43[48 * *(unsigned __int8 *)(a1 + 25)];
        v48 = v43;
        goto LABEL_37;
      }
      v38 = 0;
      v24 = 0;
      *(_WORD *)(a1 + 24) = 0;
      a4 = v58;
    }
LABEL_43:
    *(_QWORD *)a1 = v43;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = v38;
  }
  v49 = *(unsigned __int16 *)(a2 + 8);
  if (!*(_WORD *)(a2 + 8))
    return;
  if ((*(_BYTE *)(a2 + 11) & 2) != 0)
  {
    v54 = (void *)physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a3 + 536), v49);
    v55 = v54;
    v56 = *(const void **)a2;
    if (v54 && v56)
    {
      memcpy(v54, v56, *(unsigned __int16 *)(a2 + 8));
      v56 = *(const void **)a2;
    }
    if (v56)
    {
      *(_QWORD *)a2 = v55;
      *(_BYTE *)(a2 + 11) |= 3u;
    }
  }
  else
  {
    if (!a4)
      return;
    v50 = *(const void **)a2;
    v51 = (void *)physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a3 + 536), (unsigned __int16)(v49 + 15) & 0xFFF0);
    v52 = v51;
    if (v51)
      v53 = v50 == 0;
    else
      v53 = 1;
    if (!v53)
    {
      memcpy(v51, v50, *(unsigned __int16 *)(a2 + 8));
LABEL_59:
      *(_QWORD *)a2 = v52;
      return;
    }
    if (v50)
      goto LABEL_59;
  }
}

uint64_t physx::PxcNpCacheStreamPair::reserve(physx::PxcNpCacheStreamPair *this, int a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v5;

  v2 = (a2 + 15) & 0xFFFFFFF0;
  if (v2 > 0x4000)
    return -1;
  result = *((_QWORD *)this + 1);
  if (!result || (v5 = *((_DWORD *)this + 4), v5 + v2 > 0x4000))
  {
    result = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)this, *(_QWORD *)this + 16 * *(unsigned int *)(*(_QWORD *)this + 176) + 88, 0, 0, 0);
    *((_QWORD *)this + 1) = result;
    *((_DWORD *)this + 4) = 0;
    if (!result)
      return result;
    v5 = 0;
  }
  result += v5;
  *((_DWORD *)this + 4) = v5 + v2;
  return result;
}

uint64_t physx::writeCompressedContact(float *a1, unsigned int a2, uint64_t a3, _BYTE *a4, _QWORD *a5, float *a6, _WORD *a7, uint64_t *a8, int a9, _QWORD *a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int16 *a13, _BYTE *a14, unsigned int a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22)
{
  uint64_t v24;
  size_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  unsigned int v53;
  int v54;
  unsigned __int8 v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  char v64;
  int v65;
  char v67;
  size_t v68;
  int v69;
  unsigned int v70;
  pthread_mutex_t **v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v83;
  int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v90;
  char v91;
  char *v92;
  _WORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v108;
  uint64_t v111;
  float32x2_t *v112;
  uint64_t v113;
  float32x2_t *v114;
  float v115;
  unint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t *v120;
  int v121;
  unsigned __int16 *v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  char v128;
  float *v129;
  __int128 v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  float32x2_t *v138;
  float32x2_t *v139;
  unsigned int v140;
  float32x4_t v141;
  uint64_t i;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int8x16_t *v147;
  int8x16_t v148;
  int v149;
  uint64_t j;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  float v159;
  unsigned __int16 *v161;
  int v162;
  char v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  float *v168;
  float *v169;
  uint64_t v171;
  unint64_t v172;
  unsigned __int16 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  float32x2_t *v178;
  float32x2_t *v179;
  float *v180;
  unsigned int v181;
  float32x4_t v182;
  uint64_t k;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int8x16_t *v188;
  int8x16_t v189;
  float32x4_t v190;
  uint64_t v191;
  uint64_t m;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  float *v199;
  uint64_t v200;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  unsigned int v213;
  __int128 v214;
  size_t v215;
  _BYTE *v216;
  float *v217;
  int v218;
  _QWORD *v219;
  int v220;
  unsigned __int16 *v221;
  uint64_t *v222;
  uint64_t v223;
  unsigned __int8 *v224;
  BOOL v225;
  uint64_t v226;

  v226 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v27 = 0;
    *a4 = 0;
    *a5 = 0;
    *(_QWORD *)a6 = 0;
    *a8 = 0;
    *a7 = 0;
    *a14 = 0;
    return v27;
  }
  v222 = a8;
  *(_QWORD *)&v212 = a3;
  v219 = a7;
  *(_QWORD *)&v214 = a5;
  v216 = a4;
  v217 = a6;
  v24 = a2;
  v25 = 5 * a2;
  v225 = v25 > 0x400;
  if (v25 < 0x401)
  {
    MEMORY[0x24BDAC7A8](a1);
    v26 = (unsigned __int8 *)&v206 - ((v25 + 15) & 0x1FFFFFFF0);
    bzero(v26, v25);
  }
  else
  {
    v26 = (unsigned __int8 *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v223, 5 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpContactPrepShared.cpp", 87);
  }
  v224 = v26;
  if (a2 < 2)
  {
    v29 = 0;
    v28 = 0;
    v38 = 1;
    v37 = 1;
    v36 = 1;
    v35 = 1;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = a13[1];
    v31 = *a13;
    v33 = a1[1];
    v32 = a1[2];
    v34 = 1;
    v35 = 1;
    v36 = 1;
    v37 = a2;
    v38 = 1;
    v39 = *a1;
    do
    {
      v40 = &a1[16 * v34];
      v41 = *v40;
      v42 = v40[1];
      v43 = v40[2];
      if ((float)((float)((float)(v33 * v42) + (float)(v39 * *v40)) + (float)(v32 * v43)) < 0.999
        || a13[2 * v34] != v31
        || a13[2 * v34 + 1] != v30)
      {
        v44 = &v26[5 * v35 - 5];
        *v44 = v28;
        v44[1] = v34;
        v44[2] = -1;
        v45 = v34 - v28;
        v44[3] = v45;
        v44[4] = v38;
        if (v29)
          v29[3] += v45;
        if (v35 < 2)
        {
LABEL_20:
          v29 = 0;
          v38 = 1;
        }
        else
        {
          v46 = 0;
          v38 = 0;
          v47 = &a13[2 * v34];
          v29 = v26;
          while (1)
          {
            if (v29[4])
            {
              v48 = *v29;
              if ((float)((float)((float)(v42 * a1[16 * v48 + 1]) + (float)(v41 * a1[16 * v48]))
                         + (float)(v43 * a1[16 * v48 + 2])) >= 0.999
                && *v47 == a13[2 * v48]
                && v47[1] == a13[2 * v48 + 1])
              {
                break;
              }
            }
            v29 += 5;
            v38 = v46 + 2 >= (unint64_t)v35;
            if (v35 - 1 == ++v46)
              goto LABEL_20;
          }
          do
          {
            v51 = &v26[5 * v46];
            v53 = v51[2];
            v52 = v51 + 2;
            v46 = v53;
          }
          while (v53 != 255);
          *v52 = v35;
        }
        v49 = &a13[2 * v34];
        v31 = *v49;
        v30 = v49[1];
        if (v45 > 1)
          v50 = a18;
        else
          v50 = 0;
        v37 += v50;
        ++v35;
        v36 += v38;
        v28 = v34;
        v32 = v43;
        v33 = v42;
        v39 = v41;
      }
      ++v34;
    }
    while (v34 != v24);
  }
  v54 = a11 & ~a12;
  v55 = a2 - v28;
  if (a2 - v28 > 1)
    v56 = a18;
  else
    v56 = 0;
  v57 = v37 + v56;
  v58 = &v26[5 * v35 - 5];
  *v58 = v28;
  if (((a9 != 0) & a18) != 0)
    v59 = 4 * (v57 - a2);
  else
    v59 = 0;
  v58[1] = a2;
  v58[2] = -1;
  v58[3] = v55;
  v58[4] = v38;
  if (v29)
    v29[3] += v55;
  v60 = a22;
  v61 = v59 + a9;
  *(_QWORD *)&v211 = a14;
  *a14 = v36;
  if (v54)
    v62 = v57;
  else
    v62 = v36;
  v63 = a15 + 48 * v62;
  if (v54)
    v64 = 6;
  else
    v64 = 4;
  v65 = v57 << v64;
  if (a15)
    _ZF = 1;
  else
    _ZF = a19 == 0;
  if (_ZF)
    v67 = 1;
  else
    v67 = a11 & ~a12;
  v221 = a13;
  v220 = a18;
  v218 = a22;
  v215 = v25;
  v209 = v57;
  v207 = a12;
  v210 = a15;
  if ((v67 & 1) != 0)
  {
    v68 = (v61 << a22);
    v213 = (v63 + v65 + 15) & 0xFFFFFFF0;
    v69 = v213 + v68;
    if (a16)
    {
      v70 = (v69 + 15) & 0xFFFFFFF0;
      if (v70 <= 0x4000)
      {
        v96 = *(_QWORD *)(a17 + 8);
        if (v96 && (v97 = *(unsigned int *)(a17 + 16), v97 + v70 <= 0x4000))
        {
          _X19 = v96 + v97;
          *(_DWORD *)(a17 + 16) = v97 + v70;
        }
        else
        {
          v98 = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)a17, a16, (_DWORD *)(*(_QWORD *)a17 + 244), (int *)(*(_QWORD *)a17 + 240), 1);
          v60 = v218;
          _X19 = v98;
          *(_QWORD *)(a17 + 8) = v98;
          *(_DWORD *)(a17 + 16) = v70;
        }
        goto LABEL_87;
      }
      v71 = *(pthread_mutex_t ***)a17;
    }
    else
    {
      v70 = (v69 + 15) & 0xFFFFFFF0;
      if (v70 <= 0x4000)
      {
        v99 = v212;
        v100 = *(_QWORD *)(v212 + 520);
        if (v100 && (v101 = *(unsigned int *)(v212 + 528), v101 + v70 <= 0x4000))
        {
          _X19 = v100 + v101;
          *(_DWORD *)(v212 + 528) = v101 + v70;
        }
        else
        {
          v102 = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)(v212 + 512), *(_QWORD *)(v212 + 512) + 16 * *(unsigned int *)(*(_QWORD *)(v212 + 512) + 188) + 24, 0, 0, 1);
          v60 = v218;
          _X19 = v102;
          *(_QWORD *)(v99 + 520) = v102;
          *(_DWORD *)(v99 + 528) = v70;
        }
        goto LABEL_87;
      }
      v71 = *(pthread_mutex_t ***)(v212 + 512);
    }
    v95 = physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(v71, v70);
    v60 = v218;
    _X19 = v95;
LABEL_87:
    _X23 = _X19 + v63;
    if ((_DWORD)v68)
    {
      v94 = v213;
      if (_X19)
      {
        v103 = (char *)(_X19 + v213);
        if (v60)
          _X24 = &v103[4 * v24];
        else
          _X24 = 0;
        v208 = _X19 + v213;
        bzero(v103, v68);
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X23]
        }
        v93 = v219;
        v108 = v212;
        goto LABEL_96;
      }
      _X24 = (char *)_X23;
      goto LABEL_163;
    }
    _X24 = 0;
    v208 = 0;
    v94 = v213;
LABEL_94:
    v93 = v219;
    goto LABEL_95;
  }
  v72 = (unsigned int *)(a19 + 8);
  do
  {
    v73 = __ldaxr(v72);
    v74 = v73 + v65;
  }
  while (__stlxr(v74, v72));
  v75 = *(unsigned int *)(a19 + 12);
  v76 = *(_DWORD *)(a19 + 16) + *(_DWORD *)(a19 + 8);
  _X23 = *(_QWORD *)a19 + v75 - v74;
  v78 = (unsigned int *)(a20 + 8);
  do
  {
    v79 = __ldaxr(v78);
    v80 = v79 + v63;
  }
  while (__stlxr(v80, v78));
  v81 = *(unsigned int *)(a20 + 12);
  v83 = *(_DWORD *)(a20 + 16) + *(_DWORD *)(a20 + 8) >= v81 || v76 >= v75;
  _X19 = *(_QWORD *)a20 + v81 - v80;
  if (!v61)
  {
    _X24 = 0;
    if (v83)
    {
LABEL_163:
      v93 = v219;
LABEL_164:
      _X8 = 0;
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X24]
      }
      goto LABEL_165;
    }
    v94 = v63 + v65;
    v208 = 0;
    goto LABEL_94;
  }
  v85 = v61 << a22;
  v86 = (unsigned int *)(a21 + 8);
  do
  {
    v87 = __ldaxr(v86);
    v88 = v87 + v85;
  }
  while (__stlxr(v88, v86));
  _X24 = 0;
  v90 = *(unsigned int *)(a21 + 12);
  v91 = *(_DWORD *)(a21 + 16) + *(_DWORD *)(a21 + 8) >= v90 || v83;
  v208 = *(_QWORD *)a21 + v90 - v88;
  v92 = (char *)(v208 + 4 * v24);
  if (!a22)
    v92 = 0;
  v93 = v219;
  if ((v91 & 1) != 0)
    goto LABEL_164;
  v94 = v63 + v65;
  _X24 = v92;
LABEL_95:
  __asm
  {
    PRFM            #0, [X19]
    PRFM            #0, [X23]
  }
  v108 = v212;
  if (_X19)
  {
LABEL_96:
    v206 = a11 & ~a12;
    v219 = a10;
    if (v108)
    {
      *(_DWORD *)(v108 + 7188) += v94;
      *(_DWORD *)(v108 + 7216) += v94;
    }
    v213 = v94;
    *v93 = v94;
    v111 = *v221;
    v112 = (float32x2_t *)(*v219 + 32 * v111);
    v113 = v221[1];
    v114 = (float32x2_t *)(*v219 + 32 * v113);
    v115 = physx::PxsMaterialCombiner::combineRestitution((uint64_t)v112, (uint64_t)v114);
    __asm { FMOV            V9.2S, #1.0 }
    v223 = _D9;
    v117 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v223, v112, v114);
    v119 = HIDWORD(v117);
    *(_QWORD *)v214 = _X19;
    v120 = (uint64_t *)(_X19 + v210);
    *(_QWORD *)v217 = _X23;
    *v222 = v208;
    if ((v206 & 1) != 0)
    {
      if (v207)
        v121 = 6;
      else
        v121 = 2;
      v122 = v221;
      v123 = v220;
      if (v35)
      {
        v124 = v111;
        v125 = v113;
        v126 = 0;
        v127 = 0;
        v128 = v121 | v218;
        v129 = a1 + 3;
        __asm { FMOV            V2.4S, #1.0 }
        v131 = xmmword_2261A69E0;
        v132 = v35;
        v218 |= v121;
        v217 = a1 + 3;
        v214 = _Q2;
        v212 = xmmword_2261A69E0;
        *(_QWORD *)&v211 = v35;
        do
        {
          if (v26[5 * v126 + 4])
          {
            v133 = &v122[2 * v26[5 * v126]];
            v134 = *v133;
            v135 = v133[1];
            if ((_DWORD)v134 != v124 || (_DWORD)v135 != v125)
            {
              v137 = *v219 + 32 * v134;
              v138 = (float32x2_t *)(*v219 + 32 * v135);
              v222 = v120;
              v115 = physx::PxsMaterialCombiner::combineRestitution(v137, (uint64_t)v138);
              v223 = _D9;
              v139 = (float32x2_t *)v137;
              v122 = v221;
              v117 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v223, v139, v138);
              v132 = v211;
              v131 = v212;
              _Q2 = v214;
              v129 = v217;
              v128 = v218;
              v120 = v222;
              v123 = v220;
              v119 = HIDWORD(v117);
              v124 = v134;
              v125 = v135;
            }
            v140 = v26[5 * v126 + 3];
            *((_BYTE *)v120 + 41) = v140;
            *((_BYTE *)v120 + 40) = v127;
            *((_BYTE *)v120 + 42) = v118;
            *((_DWORD *)v120 + 8) = v119;
            *((_DWORD *)v120 + 9) = v117;
            *((float *)v120 + 7) = v115;
            *((_WORD *)v120 + 22) = v134;
            *((_WORD *)v120 + 23) = v135;
            v120[2] = *(_QWORD *)a1;
            *((float *)v120 + 6) = a1[2];
            *(_OWORD *)v120 = _Q2;
            *((_BYTE *)v120 + 43) = v128;
            if (v123 && v140 >= 2)
            {
              v141 = 0uLL;
              if (v126 != 255)
              {
                for (i = v126; i != 255; i = v143[2])
                {
                  v143 = &v26[5 * i];
                  v144 = *v143;
                  v145 = v143[1];
                  if (v144 < v145)
                  {
                    v146 = v145 - v144;
                    v147 = (int8x16_t *)&v129[16 * v144];
                    do
                    {
                      v148 = *v147;
                      v147 += 4;
                      v141 = vaddq_f32(v141, (float32x4_t)vextq_s8(v148, v148, 4uLL));
                      --v146;
                    }
                    while (v146);
                  }
                }
              }
              if (_X24)
              {
                *(float *)_X24 = a1[16 * (unint64_t)v26[1275] + 13];
                _X24 += 4;
              }
              *((_BYTE *)v120 + 41) = v140 + 1;
              *(float32x4_t *)_X23 = vmulq_n_f32(v141, 1.0 / (float)v140);
              *(_QWORD *)(_X23 + 32) = *(_QWORD *)a1;
              v149 = *((_DWORD *)a1 + 2);
              *(_OWORD *)(_X23 + 16) = v131;
              *(_DWORD *)(_X23 + 56) = v117;
              *(_DWORD *)(_X23 + 60) = v119;
              *(_DWORD *)(_X23 + 40) = v149;
              *(float *)(_X23 + 44) = v115;
              *(_DWORD *)(_X23 + 48) = v118;
              *(_WORD *)(_X23 + 52) = v134;
              *(_WORD *)(_X23 + 54) = v135;
              __asm { PRFM            #0, [X23,#0xC0] }
              _X23 += 64;
              ++v127;
            }
            v120 += 6;
            if (v126 != 255)
            {
              for (j = v126; j != 255; j = v152[2])
              {
                v152 = &v26[5 * j];
                v153 = *v152;
                v154 = v152[1];
                if (v153 < v154)
                {
                  v155 = 0;
                  v156 = v154 - *v152;
                  v157 = &a1[16 * v153];
                  do
                  {
                    _X15 = _X23 + v155 * 4;
                    *(_OWORD *)_X15 = *(_OWORD *)&v157[v155 + 4];
                    *(float *)(_X15 + 12) = v157[v155 + 3];
                    *(_QWORD *)(_X15 + 32) = *(_QWORD *)&v157[v155];
                    v159 = v157[v155 + 2];
                    *(_OWORD *)(_X15 + 16) = v131;
                    *(_DWORD *)(_X15 + 56) = v117;
                    *(_DWORD *)(_X15 + 60) = v119;
                    *(float *)(_X15 + 40) = v159;
                    *(float *)(_X15 + 44) = v115;
                    *(_DWORD *)(_X15 + 48) = v118;
                    *(_WORD *)(_X15 + 52) = v134;
                    *(_WORD *)(_X15 + 54) = v135;
                    if (_X24)
                    {
                      *(float *)_X24 = v157[v155 + 13];
                      _X24 += 4;
                    }
                    __asm { PRFM            #0, [X15,#0xC0] }
                    v155 += 16;
                    --v156;
                  }
                  while (v156);
                  v127 = v127 - v153 + v154;
                  _X23 += v155 * 4;
                }
              }
            }
          }
          ++v126;
        }
        while (v126 != v132);
      }
    }
    else
    {
      v161 = v221;
      v162 = v220;
      v163 = v218;
      if (v35)
      {
        v164 = v111;
        v165 = v113;
        v166 = 0;
        v167 = 0;
        v168 = a1 + 3;
        v169 = a1 + 13;
        __asm { FMOV            V2.4S, #1.0 }
        v171 = v35;
        *(_QWORD *)&v214 = a1 + 3;
        *(_QWORD *)&v212 = a1 + 13;
        v211 = _Q2;
        v210 = v35;
        do
        {
          if (v26[5 * v166 + 4])
          {
            v172 = v26[5 * v166];
            v173 = &v161[2 * v172];
            v174 = *v173;
            v175 = v173[1];
            if ((_DWORD)v174 != v164 || (_DWORD)v175 != v165)
            {
              v177 = *v219 + 32 * v174;
              v178 = (float32x2_t *)(*v219 + 32 * v175);
              v222 = v120;
              v217 = (float *)v172;
              v115 = physx::PxsMaterialCombiner::combineRestitution(v177, (uint64_t)v178);
              v223 = _D9;
              v179 = (float32x2_t *)v177;
              v161 = v221;
              v117 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v223, v179, v178);
              v172 = (unint64_t)v217;
              v171 = v210;
              _Q2 = v211;
              v169 = (float *)v212;
              v168 = (float *)v214;
              v163 = v218;
              v120 = v222;
              v162 = v220;
              v119 = HIDWORD(v117);
              v164 = v174;
              v165 = v175;
            }
            v180 = &a1[16 * v172];
            v120[2] = *(_QWORD *)v180;
            *((float *)v120 + 6) = v180[2];
            v181 = v26[5 * v166 + 3];
            *((_BYTE *)v120 + 41) = v181;
            *((_BYTE *)v120 + 40) = v167;
            *((_DWORD *)v120 + 8) = v119;
            *((_DWORD *)v120 + 9) = v117;
            *((float *)v120 + 7) = v115;
            *((_WORD *)v120 + 22) = v174;
            *((_WORD *)v120 + 23) = v175;
            *((_BYTE *)v120 + 42) = v118;
            *((_BYTE *)v120 + 43) = v163;
            *(_OWORD *)v120 = _Q2;
            if (v162 && v181 >= 2)
            {
              *((_BYTE *)v120 + 41) = v181 + 1;
              v182 = 0uLL;
              if (v166 != 255)
              {
                for (k = v166; k != 255; k = v184[2])
                {
                  v184 = &v26[5 * k];
                  v185 = *v184;
                  v186 = v184[1];
                  if (v185 < v186)
                  {
                    v187 = v186 - v185;
                    v188 = (int8x16_t *)&v168[16 * v185];
                    do
                    {
                      v189 = *v188;
                      v188 += 4;
                      v182 = vaddq_f32(v182, (float32x4_t)vextq_s8(v189, v189, 4uLL));
                      --v187;
                    }
                    while (v187);
                  }
                }
              }
              if (_X24)
              {
                *(float *)_X24 = a1[16 * (unint64_t)v26[1275] + 13];
                _X24 += 4;
              }
              v190 = vmulq_n_f32(v182, 1.0 / (float)v181);
              v191 = _X23 + 16;
              *(float32x4_t *)_X23 = v190;
              _X23 = _X23 + 144;
              ++v167;
              __asm { PRFM            #0, [X23] }
              _X23 = v191;
            }
            v120 += 6;
            if (v166 != 255)
            {
              for (m = v166; m != 255; m = v195[2])
              {
                v195 = &v26[5 * m];
                v196 = *v195;
                v197 = v195[1];
                if (v196 < v197)
                {
                  v198 = v197 - *v195;
                  v199 = &v169[16 * v196];
                  do
                  {
                    *(_OWORD *)_X23 = *(_OWORD *)(v199 - 9);
                    *(float *)(_X23 + 12) = *(v199 - 10);
                    if (_X24)
                    {
                      *(float *)_X24 = *v199;
                      _X24 += 4;
                    }
                    v200 = _X23 + 16;
                    __asm { PRFM            #0, [X23,#0x90] }
                    v199 += 16;
                    _X23 += 16;
                    --v198;
                  }
                  while (v198);
                  v167 = v167 - v196 + v197;
                  _X23 = v200;
                }
              }
            }
          }
          ++v166;
        }
        while (v166 != v171);
      }
    }
    *v216 = v209;
    v27 = v213;
    goto LABEL_166;
  }
LABEL_165:
  v27 = 0;
  *v216 = 0;
  *(_QWORD *)v214 = 0;
  *(_QWORD *)v217 = 0;
  *v222 = 0;
  *v93 = 0;
  *(_BYTE *)v211 = 0;
LABEL_166:
  if (v215 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v224, (char *)v26);
  return v27;
}

uint64_t physx::PxcNpMemBlockPool::setBlockCount(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)this);
  v4 = *(_DWORD *)(v3 + 204);
  v5 = a2 - v4;
  if (a2 > v4)
  {
    do
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 0x4000, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp", 105);
      v7 = this;
      v6 = *(unsigned int *)(v3 + 160);
      if ((*(_DWORD *)(v3 + 164) & 0x7FFFFFFFu) <= v6)
      {
        this = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v3 + 152, &v7);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 152) + 8 * v6) = this;
        *(_DWORD *)(v3 + 160) = v6 + 1;
      }
      ++*(_DWORD *)(v3 + 192);
      --v5;
    }
    while (v5);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)v3);
  return this;
}

uint64_t physx::PxcNpMemBlockPool::releaseUnusedBlocks(uint64_t this)
{
  uint64_t v1;
  int i;
  uint64_t v3;

  v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)this);
  for (i = *(_DWORD *)(v1 + 160); i; --*(_DWORD *)(v1 + 192))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * --i);
    *(_DWORD *)(v1 + 160) = i;
    if (v3)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      i = *(_DWORD *)(v1 + 160);
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)v1);
  return this;
}

uint64_t physx::PxcNpMemBlockPool::releaseConstraintMemory(uint64_t this)
{
  uint64_t v1;
  int i;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t j;
  unint64_t v11;
  unint64_t v12;

  v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)this);
  *(_QWORD *)(v1 + 240) = 0;
  for (i = *(_DWORD *)(v1 + 16); i; i = *(_DWORD *)(v1 + 16))
  {
    v12 = 0;
    v3 = i - 1;
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * (i - 1));
    *(_DWORD *)(v1 + 16) = v3;
    v12 = v4;
    v5 = *(_QWORD *)(v1 + 232);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 > v4 || v6 + *(unsigned int *)(v5 + 32) <= v4)
    {
      v8 = *(unsigned int *)(v1 + 160);
      if ((*(_DWORD *)(v1 + 164) & 0x7FFFFFFFu) <= v8)
      {
        this = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v1 + 152, &v12);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * v8) = v4;
        *(_DWORD *)(v1 + 160) = v8 + 1;
      }
      --*(_DWORD *)(v1 + 204);
    }
    else
    {
      v7 = *(unsigned int *)(v1 + 128);
      if ((*(_DWORD *)(v1 + 132) & 0x7FFFFFFFu) <= v7)
      {
        this = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v1 + 120, &v12);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v1 + 120) + 8 * v7) = v4;
        *(_DWORD *)(v1 + 128) = v7 + 1;
      }
    }
  }
  v9 = *(unsigned int *)(v1 + 144);
  if ((_DWORD)v9)
  {
    for (j = 0; j < v9; ++j)
    {
      if (*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * j))
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v9 = *(unsigned int *)(v1 + 144);
      }
    }
  }
  *(_DWORD *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  v11 = *(_QWORD *)(v1 + 216);
  if (v11)
  {
    this = physx::PxcScratchAllocator::free(*(_QWORD *)(v1 + 232), v11);
    *(_QWORD *)(v1 + 216) = 0;
    *(_DWORD *)(v1 + 224) = 0;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)v1);
  return this;
}

uint64_t physx::PxcNpMemBlockPool::releaseContacts(physx::PxcNpMemBlockPool *this)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  int v6;
  unsigned int v7;
  uint64_t v8;

  result = physx::PxcNpMemBlockPool::release((uint64_t)this, (uint64_t)this + 16 * (1 - *((_DWORD *)this + 47)) + 24, 0);
  *((_DWORD *)this + 47) = 1 - *((_DWORD *)this + 47);
  v3 = *((_DWORD *)this + 40);
  if (*((_DWORD *)this + 42) <= v3)
  {
    v4 = *((_DWORD *)this + 43) + 1;
    *((_DWORD *)this + 43) = v4;
    if (v3 >= 0x281 && v4 >= 0xB)
    {
      v6 = 10;
      while (1)
      {
        v3 = *((_DWORD *)this + 40);
        if (v3 < 0x281)
          break;
        v7 = v3 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v7);
        *((_DWORD *)this + 40) = v7;
        if (v8)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        if (!--v6)
        {
          v3 = *((_DWORD *)this + 40);
          break;
        }
      }
    }
  }
  else
  {
    *((_DWORD *)this + 43) = 0;
  }
  *((_DWORD *)this + 42) = v3;
  return result;
}

uint64_t physx::PxcNpMemBlockPool::acquireConstraintMemory(pthread_mutex_t ***this)
{
  pthread_mutex_t *v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v10 = 0;
  v2 = physx::PxcScratchAllocator::allocAll(this[29], &v10);
  v3 = v10;
  v10 &= 0xFFFFC000;
  this[27] = (pthread_mutex_t **)v2;
  *((_DWORD *)this + 56) = v3 >> 14;
  v9 = 0;
  result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::resize((uint64_t)(this + 15), v3 >> 14, &v9);
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v5 << 14;
    do
    {
      this[15][v6] = (pthread_mutex_t *)&this[27][v7 / 8];
      v7 += 0x4000;
      ++v6;
    }
    while (v8 != v7);
  }
  return result;
}

pthread_mutex_t *physx::PxcScratchAllocator::allocAll(pthread_mutex_t **this, unsigned int *a2)
{
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;
  unsigned int v6;
  uint64_t v7;
  pthread_mutex_t *v8;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*this);
  v4 = this[1];
  v5 = this[3];
  v6 = *(&v4->__sig + (*((_DWORD *)this + 4) - 1)) - (_DWORD)v5;
  *a2 = v6;
  if (v6)
  {
    v7 = *((unsigned int *)this + 4);
    if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v7)
    {
      physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)(this + 1), this + 3);
    }
    else
    {
      *(&v4->__sig + v7) = (uint64_t)v5;
      *((_DWORD *)this + 4) = v7 + 1;
    }
    v8 = this[3];
  }
  else
  {
    v8 = 0;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*this);
  return v8;
}

uint64_t physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::PxcScratchAllocator::free(uint64_t this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(this + 24);
  if (v3 > a2 || (v4 = this, v3 + *(unsigned int *)(this + 32) <= a2))
  {
    if (a2)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, a2);
  }
  else
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      this = pthread_mutex_lock(*(pthread_mutex_t **)this);
    v5 = 0;
    v6 = *(_DWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 8);
    v8 = v6 - 1;
    do
      v9 = v8 + v5--;
    while (*(_QWORD *)(v7 + 8 * v9) < a2);
    v10 = v6 + v5 + 1;
    if (v10 < v6)
    {
      v11 = ~v5;
      v12 = 8 * v10;
      v13 = (_QWORD *)(v7 + 8 * v9);
      do
      {
        *v13++ = *(_QWORD *)(*(_QWORD *)(v4 + 8) + v12);
        v12 += 8;
        --v11;
      }
      while (v11);
    }
    *(_DWORD *)(v4 + 16) = v8;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      return pthread_mutex_unlock(*(pthread_mutex_t **)v4);
  }
  return this;
}

uint64_t physx::PxcNpMemBlockPool::acquire(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4, int a5)
{
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)a1);
  if (a3 && a4)
  {
    if (*a3 + 1 > *a4)
      v10 = *a3 + 1;
    else
      v10 = *a4;
    *a4 = v10;
    ++*a3;
  }
  if (!a5 || (v11 = *(_DWORD *)(a1 + 128)) == 0)
  {
    v15 = *(_DWORD *)(a1 + 160);
    if (v15)
    {
      v16 = v15 - 1;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v16);
      *(_DWORD *)(a1 + 160) = v16;
      v22 = v13;
    }
    else
    {
      ++*(_DWORD *)(a1 + 192);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 0x4000, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp", 244);
      v22 = v13;
      if (!v13)
      {
        --*(_DWORD *)(a1 + 192);
        goto LABEL_26;
      }
    }
    v17 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v17)
    {
      physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(a2, &v22);
      v13 = v22;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v13;
      *(_DWORD *)(a2 + 8) = v17 + 1;
    }
    v18 = *(_DWORD *)(a1 + 204);
    v19 = v18 + 1;
    if ((v18 + 1) > *(_DWORD *)(a1 + 208))
      v20 = v18 + 1;
    else
      v20 = *(_DWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 204) = v19;
    *(_DWORD *)(a1 + 208) = v20;
    goto LABEL_26;
  }
  v12 = v11 - 1;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v12);
  *(_DWORD *)(a1 + 128) = v12;
  v22 = v13;
  v14 = *(unsigned int *)(a2 + 8);
  if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v14)
  {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(a2, &v22);
    v13 = v22;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
    *(_DWORD *)(a2 + 8) = v14 + 1;
  }
LABEL_26:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return v13;
}

uint64_t physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(pthread_mutex_t **this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!a2)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp", 260);
  v7 = v3;
  if (v3)
  {
    v4 = v3;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*this);
    v5 = *((unsigned int *)this + 36);
    if ((*((_DWORD *)this + 37) & 0x7FFFFFFFu) <= v5)
    {
      physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)(this + 17), &v7);
    }
    else
    {
      *(&this[17]->__sig + v5) = v4;
      *((_DWORD *)this + 36) = v5 + 1;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*this);
  }
  return v7;
}

uint64_t physx::PxcNpMemBlockPool::release(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)result);
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v5 + 204) -= v6;
  if (a3)
  {
    *a3 -= v6;
    v6 = *(_DWORD *)(a2 + 8);
  }
  for (; v6; v6 = *(_DWORD *)(a2 + 8))
  {
    v10 = 0;
    v7 = v6 - 1;
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v6 - 1));
    *(_DWORD *)(a2 + 8) = v7;
    v10 = v8;
    v9 = *(unsigned int *)(v5 + 160);
    if ((*(_DWORD *)(v5 + 164) & 0x7FFFFFFFu) <= v9)
    {
      result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v5 + 152, &v10);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v5 + 152) + 8 * v9) = v8;
      *(_DWORD *)(v5 + 160) = v9 + 1;
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)v5);
  return result;
}

uint64_t physx::PxcNpMemBlockPool::releaseConstraintBlocks(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int i;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)result);
  for (i = *(_DWORD *)(a2 + 8); i; i = *(_DWORD *)(a2 + 8))
  {
    v11 = 0;
    v5 = i - 1;
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (i - 1));
    *(_DWORD *)(a2 + 8) = v5;
    v11 = v6;
    v7 = *(_QWORD *)(v3 + 232);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8 > v6 || v8 + *(unsigned int *)(v7 + 32) <= v6)
    {
      v10 = *(unsigned int *)(v3 + 160);
      if ((*(_DWORD *)(v3 + 164) & 0x7FFFFFFFu) <= v10)
      {
        result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v3 + 152, &v11);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 152) + 8 * v10) = v6;
        *(_DWORD *)(v3 + 160) = v10 + 1;
      }
      --*(_DWORD *)(v3 + 204);
    }
    else
    {
      v9 = *(unsigned int *)(v3 + 128);
      if ((*(_DWORD *)(v3 + 132) & 0x7FFFFFFFu) <= v9)
      {
        result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v3 + 120, &v11);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v9) = v6;
        *(_DWORD *)(v3 + 128) = v9 + 1;
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)v3);
  return result;
}

double physx::PxcNpThreadContext::PxcNpThreadContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 44) = 1065353216;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 1065353216;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_QWORD *)(a1 + 112) = a2 + 296;
  *(_QWORD *)(a1 + 512) = a2 + 40;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = a2 + 40;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  v2 = -2400;
  *(_WORD *)(a1 + 4734) = 0;
  do
  {
    *(_DWORD *)(a1 + v2 + 7520) = 0;
    v2 += 400;
  }
  while (v2);
  *(_OWORD *)(a1 + 4688) = xmmword_2261A69F0;
  *(_OWORD *)(a1 + 4672) = xmmword_2260E5D70;
  *(_DWORD *)(a1 + 7136) = 0;
  *(_QWORD *)(a1 + 7140) = *(_QWORD *)(a2 + 288);
  result = 0.0;
  *(_OWORD *)(a1 + 7152) = 0u;
  *(_WORD *)(a1 + 7184) = 0;
  *(_BYTE *)(a1 + 7186) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 7212) = 0;
  *(_QWORD *)(a1 + 7187) = 0;
  *(_QWORD *)(a1 + 7192) = 0;
  *(_QWORD *)(a1 + 7224) = *(_QWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 7232) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 7256) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 7264) = 0;
  *(_DWORD *)(a1 + 7272) = 0;
  *(_QWORD *)(a1 + 7280) = 0;
  *(_DWORD *)(a1 + 7288) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 7296) = 0u;
  return result;
}

double physx::PxcNpThreadContext::reset(physx::PxcNpThreadContext *this, int a2)
{
  char *v4;
  double result;

  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_DWORD *)this + 138) = 0;
  v4 = (char *)this + 7264;
  bzero(*((void **)this + 908), (4 * *((_DWORD *)this + 1818)));
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v4, a2);
  bzero(*((void **)this + 910), (4 * *((_DWORD *)this + 1822)));
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 7280, a2);
  result = 0.0;
  *((_OWORD *)this + 456) = 0u;
  return result;
}

uint64_t physx::PxsCCDContext::PxsCCDContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  pthread_mutex_t *v30;
  __int128 v32;

  v10 = *(_QWORD *)(a2 + 2616);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_24ED8B910;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 40) = a1;
  *(_QWORD *)(a1 + 48) = "PxsContext.postCCDSweep";
  v11 = *(_QWORD *)(a2 + 2616);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 56) = off_24ED8B9A0;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 96) = a1;
  *(_QWORD *)(a1 + 104) = "PxsContext.postCCDAdvance";
  v12 = *(_QWORD *)(a2 + 2616);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 112) = off_24ED8BA30;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 152) = a1;
  *(_QWORD *)(a1 + 160) = "PxsContext.postCCDDepenetrate";
  *(_BYTE *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v13 = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::Block>:"
          ":getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::Block]";
  else
    v15 = "<allocation names disabled>";
  *(_QWORD *)&v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, 0x2000, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  DWORD2(v32) = 0;
  v16 = *(unsigned int *)(a1 + 200);
  if ((*(_DWORD *)(a1 + 204) & 0x7FFFFFFFu) <= v16)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo>>::growAndPushBack(v13, &v32);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 192) + 16 * v16) = v32;
    ++*(_DWORD *)(a1 + 200);
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Bloc"
          "k>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Block]";
  else
    v18 = "<allocation names disabled>";
  *(_QWORD *)&v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v17 + 24) + 16))(v17 + 24, 2048, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  DWORD2(v32) = 0;
  v19 = *(unsigned int *)(a1 + 224);
  if ((*(_DWORD *)(a1 + 228) & 0x7FFFFFFFu) <= v19)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo>>::growAndPushBack(a1 + 216, &v32);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 216) + 16 * v19) = v32;
    ++*(_DWORD *)(a1 + 224);
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  v20 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block>"
          "::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block]";
  else
    v21 = "<allocation names disabled>";
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v20 + 24) + 16))(v20 + 24, 15360, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  v23 = -15360;
  do
  {
    *(_DWORD *)(v22 + v23 + 15472) = -128;
    v23 += 120;
  }
  while (v23);
  *(_QWORD *)&v32 = v22;
  DWORD2(v32) = 0;
  v24 = *(unsigned int *)(a1 + 248);
  if ((*(_DWORD *)(a1 + 252) & 0x7FFFFFFFu) <= v24)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo>>::growAndPushBack(a1 + 240, &v32);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 240) + 16 * v24) = v32;
    ++*(_DWORD *)(a1 + 248);
  }
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = -3233808384;
  *(_QWORD *)(a1 + 360) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*> const,physx::PxsCCDShape *>,physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 312, 0x40u, 0);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  v25 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v26 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::Block>:"
          ":getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::Block]";
  else
    v26 = "<allocation names disabled>";
  *(_QWORD *)&v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v25 + 24) + 16))(v25 + 24, 17408, v26, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  DWORD2(v32) = 0;
  v27 = *(unsigned int *)(a1 + 376);
  if ((*(_DWORD *)(a1 + 380) & 0x7FFFFFFFu) <= v27)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo>>::growAndPushBack(a1 + 368, &v32);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 368) + 16 * v27) = v32;
    ++*(_DWORD *)(a1 + 376);
  }
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 436) = 1;
  *(_QWORD *)(a1 + 440) = a2;
  *(_QWORD *)(a1 + 448) = a3;
  *(_QWORD *)(a1 + 456) = a4;
  v28 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v29 = "<allocation names disabled>";
  v30 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v28 + 24) + 16))(v28 + 24, 72, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 464) = v30;
  physx::shdfnd::MutexImpl::MutexImpl(v30);
  *(float *)(a1 + 472) = a5;
  return a1;
}

void physx::PxsCCDContext::~PxsCCDContext(pthread_mutex_t **this)
{
  int v2;
  int v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  int v9;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t j;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t k;
  int v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t m;
  int v27;

  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 58);
  v2 = *((_DWORD *)this + 105);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && this[51] != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 101);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && this[49] != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((unsigned int *)this + 94);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i < v6; ++i)
    {
      if (*(uint64_t *)((char *)&this[46]->__sig + v7))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v6 = *((unsigned int *)this + 94);
      }
      v7 += 16;
    }
  }
  *((_DWORD *)this + 96) = 0;
  v9 = *((_DWORD *)this + 95);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && this[46] != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (this[39])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 77);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && this[37])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v12 = *((_DWORD *)this + 73);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && this[35])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v13 = *((_DWORD *)this + 69);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && this[33])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v14 = *((unsigned int *)this + 62);
  if ((_DWORD)v14)
  {
    v15 = 0;
    for (j = 0; j < v14; ++j)
    {
      if (*(uint64_t *)((char *)&this[30]->__sig + v15))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v14 = *((unsigned int *)this + 62);
      }
      v15 += 16;
    }
  }
  *((_DWORD *)this + 64) = 0;
  v17 = *((_DWORD *)this + 63);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && this[30] != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v19 = *((unsigned int *)this + 56);
  if ((_DWORD)v19)
  {
    v20 = 0;
    for (k = 0; k < v19; ++k)
    {
      if (*(uint64_t *)((char *)&this[27]->__sig + v20))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v19 = *((unsigned int *)this + 56);
      }
      v20 += 16;
    }
  }
  *((_DWORD *)this + 58) = 0;
  v22 = *((_DWORD *)this + 57);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && this[27] != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v24 = *((unsigned int *)this + 50);
  if ((_DWORD)v24)
  {
    v25 = 0;
    for (m = 0; m < v24; ++m)
    {
      if (*(uint64_t *)((char *)&this[24]->__sig + v25))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v24 = *((unsigned int *)this + 50);
      }
      v25 += 16;
    }
  }
  *((_DWORD *)this + 52) = 0;
  v27 = *((_DWORD *)this + 51);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && this[24] != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  this[14] = (pthread_mutex_t *)off_24ED8BB00;
  this[16] = 0;
  this[7] = (pthread_mutex_t *)off_24ED8BB00;
  this[9] = 0;
  *this = (pthread_mutex_t *)off_24ED8BB00;
  this[2] = 0;
}

_QWORD *physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::PxsCCDContext::create(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 480, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsCCD.cpp", 266);
  if (result)
    return physx::PxsCCDContext::PxsCCDContext(result, a1, a2, a3, a4);
  return result;
}

float *physx::PxsCCDShape::getAbsPose(float *result, uint64_t a2, uint64_t a3)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  if (a3)
  {
    v3 = *(float **)(a3 + 40);
    v4 = v3[12] * -2.0;
    v5 = v3[13] * -2.0;
    v6 = v3[14] * -2.0;
    v8 = v3[10];
    v7 = v3[11];
    v9 = (float)(v7 * v7) + -0.5;
    v10 = v3[8];
    v11 = v3[9];
    v12 = (float)((float)(v5 * v11) + (float)(v10 * v4)) + (float)(v8 * v6);
    v13 = (float)((float)(v4 * v9) - (float)((float)((float)(v11 * v6) - (float)(v8 * v5)) * v7)) + (float)(v10 * v12);
    v14 = (float)((float)(v5 * v9) - (float)((float)((float)(v8 * v4) - (float)(v10 * v6)) * v7)) + (float)(v11 * v12);
    v15 = (float)((float)(v6 * v9) - (float)((float)((float)(v10 * v5) - (float)(v11 * v4)) * v7)) + (float)(v8 * v12);
    v16 = v13 + v13;
    v17 = v15 + v15;
    v19 = v3[2];
    v18 = v3[3];
    v20 = (float)(v18 * v18) + -0.5;
    v21 = v3[1];
    v22 = (float)((float)(v21 * (float)(v14 + v14)) + (float)(*v3 * v16)) + (float)(v19 * v17);
    v23 = (float)((float)(v18 * (float)((float)(v21 * v17) - (float)(v19 * (float)(v14 + v14)))) + (float)(v16 * v20))
        + (float)(*v3 * v22);
    v24 = (float)((float)(v18 * (float)((float)(v19 * v16) - (float)(*v3 * v17))) + (float)((float)(v14 + v14) * v20))
        + (float)(v21 * v22);
    v25 = (float)((float)(v18 * (float)((float)(*v3 * (float)(v14 + v14)) - (float)(v21 * v16))) + (float)(v17 * v20))
        + (float)(v19 * v22);
    v26 = v3[4] + v23;
    v27 = v3[5] + v24;
    v28 = v3[6] + v25;
    v29 = (float)((float)((float)(v7 * *v3) - (float)(v18 * v10)) - (float)(v21 * v8)) + (float)(v11 * v19);
    v30 = (float)((float)((float)(v7 * v21) - (float)(v18 * v11)) - (float)(v19 * v10)) + (float)(v8 * *v3);
    v31 = (float)((float)((float)(v7 * v19) - (float)(v18 * v8)) - (float)(*v3 * v11)) + (float)(v10 * v21);
    v32 = (float)((float)((float)(v10 * *v3) + (float)(v18 * v7)) + (float)(v21 * v11)) + (float)(v19 * v8);
    v33 = *(float **)(a2 + 96);
    v34 = v33[4] + v33[4];
    v35 = v33[5] + v33[5];
    v36 = v33[6] + v33[6];
    v37 = (float)(v32 * v32) + -0.5;
    v38 = (float)((float)(v30 * v35) + (float)(v29 * v34)) + (float)(v31 * v36);
    v39 = (float)((float)(v32 * (float)((float)(v30 * v36) - (float)(v31 * v35))) + (float)(v34 * v37))
        + (float)(v29 * v38);
    v40 = (float)((float)(v32 * (float)((float)(v31 * v34) - (float)(v29 * v36))) + (float)(v35 * v37))
        + (float)(v30 * v38);
    v41 = (float)((float)(v32 * (float)((float)(v29 * v35) - (float)(v30 * v34))) + (float)(v36 * v37))
        + (float)(v31 * v38);
    v42 = v26 + v39;
    v43 = v27 + v40;
    v44 = v28 + v41;
    v46 = v33[2];
    v45 = v33[3];
    v47 = v33[1];
    v48 = (float)((float)((float)(v29 * v45) + (float)(v32 * *v33)) + (float)(v30 * v46)) - (float)(v47 * v31);
    v49 = (float)((float)((float)(v30 * v45) + (float)(v32 * v47)) + (float)(v31 * *v33)) - (float)(v46 * v29);
    v50 = (float)((float)((float)(v31 * v45) + (float)(v32 * v46)) + (float)(v29 * v47)) - (float)(*v33 * v30);
    v51 = (float)((float)((float)(v32 * v45) - (float)(v29 * *v33)) - (float)(v30 * v47)) - (float)(v31 * v46);
  }
  else
  {
    v53 = *(float **)(a2 + 96);
    v52 = *(float **)(a2 + 104);
    v54 = v53[4] + v53[4];
    v55 = v53[5] + v53[5];
    v56 = v53[6] + v53[6];
    v58 = v52[2];
    v57 = v52[3];
    v59 = (float)(v57 * v57) + -0.5;
    v60 = v52[1];
    v61 = (float)((float)(v55 * v60) + (float)(*v52 * v54)) + (float)(v58 * v56);
    v62 = (float)((float)(v57 * (float)((float)(v60 * v56) - (float)(v58 * v55))) + (float)(v54 * v59))
        + (float)(*v52 * v61);
    v63 = (float)((float)(v57 * (float)((float)(v58 * v54) - (float)(*v52 * v56))) + (float)(v55 * v59))
        + (float)(v60 * v61);
    v64 = (float)((float)(v57 * (float)((float)(*v52 * v55) - (float)(v60 * v54))) + (float)(v56 * v59))
        + (float)(v58 * v61);
    v42 = v52[4] + v62;
    v43 = v52[5] + v63;
    v44 = v52[6] + v64;
    v66 = v53[2];
    v65 = v53[3];
    v67 = v53[1];
    v48 = (float)((float)((float)(*v52 * v65) + (float)(v57 * *v53)) + (float)(v60 * v66)) - (float)(v67 * v58);
    v49 = (float)((float)((float)(v60 * v65) + (float)(v57 * v67)) + (float)(v58 * *v53)) - (float)(v66 * *v52);
    v50 = (float)((float)((float)(v58 * v65) + (float)(v57 * v66)) + (float)(*v52 * v67)) - (float)(*v53 * v60);
    v51 = (float)((float)((float)(v57 * v65) - (float)(*v52 * *v53)) - (float)(v60 * v67)) - (float)(v58 * v66);
  }
  *result = v48;
  result[1] = v49;
  result[2] = v50;
  result[3] = v51;
  result[4] = v42;
  result[5] = v43;
  result[6] = v44;
  return result;
}

float physx::PxsCCDShape::getLastCCDAbsPose(float *a1, float *a2, uint64_t a3)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float result;

  v3 = *(float **)(a3 + 40);
  v4 = v3[12] * -2.0;
  v5 = v3[13] * -2.0;
  v6 = v3[14] * -2.0;
  v8 = v3[10];
  v7 = v3[11];
  v9 = (float)(v7 * v7) + -0.5;
  v10 = v3[8];
  v11 = v3[9];
  v12 = (float)((float)(v5 * v11) + (float)(v10 * v4)) + (float)(v8 * v6);
  v13 = (float)((float)(v4 * v9) - (float)((float)((float)(v11 * v6) - (float)(v8 * v5)) * v7)) + (float)(v10 * v12);
  v14 = (float)((float)(v5 * v9) - (float)((float)((float)(v8 * v4) - (float)(v10 * v6)) * v7)) + (float)(v11 * v12);
  v15 = (float)((float)(v6 * v9) - (float)((float)((float)(v10 * v5) - (float)(v11 * v4)) * v7)) + (float)(v8 * v12);
  v16 = v13 + v13;
  v17 = v15 + v15;
  v19 = *(float *)(a3 + 8);
  v18 = *(float *)(a3 + 12);
  v20 = (float)(v18 * v18) + -0.5;
  v21 = *(float *)(a3 + 4);
  v22 = (float)((float)(v21 * (float)(v14 + v14)) + (float)(*(float *)a3 * v16)) + (float)(v19 * v17);
  v23 = (float)((float)(v18 * (float)((float)(v21 * v17) - (float)(v19 * (float)(v14 + v14)))) + (float)(v16 * v20))
      + (float)(*(float *)a3 * v22);
  v24 = (float)((float)(v18 * (float)((float)(v19 * v16) - (float)(*(float *)a3 * v17)))
              + (float)((float)(v14 + v14) * v20))
      + (float)(v21 * v22);
  v25 = (float)((float)(v18 * (float)((float)(*(float *)a3 * (float)(v14 + v14)) - (float)(v21 * v16)))
              + (float)(v17 * v20))
      + (float)(v19 * v22);
  v26 = *(float *)(a3 + 16) + v23;
  v27 = *(float *)(a3 + 24) + v25;
  v28 = (float)((float)((float)(v7 * *(float *)a3) - (float)(v18 * v10)) - (float)(v21 * v8)) + (float)(v11 * v19);
  v29 = (float)((float)((float)(v7 * v21) - (float)(v18 * v11)) - (float)(v19 * v10)) + (float)(v8 * *(float *)a3);
  v30 = (float)((float)((float)(v7 * v19) - (float)(v18 * v8)) - (float)(*(float *)a3 * v11)) + (float)(v10 * v21);
  v31 = (float)((float)((float)(v10 * *(float *)a3) + (float)(v18 * v7)) + (float)(v21 * v11)) + (float)(v19 * v8);
  v32 = a2[4] + a2[4];
  v33 = a2[5] + a2[5];
  v34 = a2[6] + a2[6];
  v35 = (float)(v31 * v31) + -0.5;
  v36 = (float)((float)(v29 * v33) + (float)(v28 * v32)) + (float)(v30 * v34);
  v37 = (float)((float)(v31 * (float)((float)(v29 * v34) - (float)(v30 * v33))) + (float)(v32 * v35))
      + (float)(v28 * v36);
  v38 = (float)((float)(v31 * (float)((float)(v30 * v32) - (float)(v28 * v34))) + (float)(v33 * v35))
      + (float)(v29 * v36);
  v39 = (float)((float)(v31 * (float)((float)(v28 * v33) - (float)(v29 * v32))) + (float)(v34 * v35))
      + (float)(v30 * v36);
  v40 = v26 + v37;
  v41 = (float)(*(float *)(a3 + 20) + v24) + v38;
  v43 = a2[2];
  v42 = a2[3];
  v44 = a2[1];
  v45 = (float)((float)((float)(v28 * v42) + (float)(v31 * *a2)) + (float)(v29 * v43)) - (float)(v44 * v30);
  v46 = (float)((float)((float)(v29 * v42) + (float)(v31 * v44)) + (float)(v30 * *a2)) - (float)(v43 * v28);
  v47 = (float)((float)((float)(v30 * v42) + (float)(v31 * v43)) + (float)(v28 * v44)) - (float)(*a2 * v29);
  v48 = (float)((float)((float)(v31 * v42) - (float)(v28 * *a2)) - (float)(v29 * v44)) - (float)(v30 * v43);
  *a1 = v45;
  a1[1] = v46;
  a1[2] = v47;
  a1[3] = v48;
  result = v27 + v39;
  a1[4] = v40;
  a1[5] = v41;
  a1[6] = result;
  return result;
}

void physx::PxsCCDPair::updateShapes(physx::PxsCCDPair *this)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int32x4_t v17;
  float v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int32x4_t v37;
  float v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int32 v42;
  __int32 v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  int v49;
  float32x2_t v50;
  float v51;
  __int128 v52;
  int32x2_t v53;
  __int32 v54;
  uint64_t v55;
  uint64_t v56;
  float32x2_t v57;
  float v58;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 2);
    if (*(_DWORD *)(*(_QWORD *)(v2 + 32) + 56) != *(_DWORD *)(v3 + 92))
    {
      physx::PxsCCDShape::getAbsPose((float *)&v55, *((_QWORD *)this + 2), v2);
      v4 = *(float **)(v3 + 96);
      physx::PxsCCDShape::getLastCCDAbsPose((float *)&v52, v4, v2);
      v5 = v58;
      v6 = v58 - *(float *)&v54;
      v7.i32[0] = vdup_lane_s32(v53, 1).u32[0];
      v7.i32[1] = v54;
      v42 = v53.i32[0];
      v44 = v7.i64[0];
      *(float32x2_t *)v8.f32 = v57;
      v46 = v57;
      v9 = vsub_f32(v57, (float32x2_t)v53);
      physx::Gu::computeBoundsWithCCDThreshold((float *)&v50, (float *)&v48, (uint64_t)(v4 + 10), (uint64_t)&v55, 0, v10, v11, v12, v8, v7, *(double *)&v53, v13, v14, v15, v16, v17);
      v18 = v51 - v6;
      v19 = *((_QWORD *)this + 2);
      *(float32x2_t *)(v19 + 80) = vsub_f32(v50, v9);
      *(float *)(v19 + 88) = v18;
      *(_QWORD *)(v19 + 68) = v48;
      *(_DWORD *)(v19 + 76) = v49;
      *(_OWORD *)(v19 + 12) = v52;
      *(_QWORD *)&v20 = v44;
      *(_DWORD *)(v19 + 28) = v42;
      *(_QWORD *)&v21 = v56;
      *((_QWORD *)&v20 + 1) = v55;
      *((float32x2_t *)&v21 + 1) = v46;
      *(_OWORD *)(v19 + 32) = v20;
      *(_OWORD *)(v19 + 48) = v21;
      *(float *)(v19 + 64) = v5;
      *(_DWORD *)(v19 + 92) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 56);
    }
  }
  v22 = *((_QWORD *)this + 1);
  if (v22)
  {
    v23 = *((_QWORD *)this + 3);
    if (*(_DWORD *)(*(_QWORD *)(v22 + 32) + 56) != *(_DWORD *)(v23 + 92))
    {
      physx::PxsCCDShape::getAbsPose((float *)&v55, *((_QWORD *)this + 3), *((_QWORD *)this + 1));
      v24 = *(float **)(v23 + 96);
      physx::PxsCCDShape::getLastCCDAbsPose((float *)&v52, v24, v22);
      v25 = v58;
      v26 = v58 - *(float *)&v54;
      v27.i32[0] = vdup_lane_s32(v53, 1).u32[0];
      v27.i32[1] = v54;
      v43 = v53.i32[0];
      v45 = v27.i64[0];
      *(float32x2_t *)v28.f32 = v57;
      v47 = v57;
      v29 = vsub_f32(v57, (float32x2_t)v53);
      physx::Gu::computeBoundsWithCCDThreshold((float *)&v50, (float *)&v48, (uint64_t)(v24 + 10), (uint64_t)&v55, 0, v30, v31, v32, v28, v27, *(double *)&v53, v33, v34, v35, v36, v37);
      v38 = v51 - v26;
      v39 = *((_QWORD *)this + 3);
      *(float32x2_t *)(v39 + 80) = vsub_f32(v50, v29);
      *(float *)(v39 + 88) = v38;
      *(_QWORD *)(v39 + 68) = v48;
      *(_DWORD *)(v39 + 76) = v49;
      *(_OWORD *)(v39 + 12) = v52;
      *(_QWORD *)&v40 = v45;
      *(_DWORD *)(v39 + 28) = v43;
      *(_QWORD *)&v41 = v56;
      *((_QWORD *)&v40 + 1) = v55;
      *((float32x2_t *)&v41 + 1) = v47;
      *(_OWORD *)(v39 + 32) = v40;
      *(_OWORD *)(v39 + 48) = v41;
      *(float *)(v39 + 64) = v25;
      *(_DWORD *)(v39 + 92) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56);
    }
  }
}

