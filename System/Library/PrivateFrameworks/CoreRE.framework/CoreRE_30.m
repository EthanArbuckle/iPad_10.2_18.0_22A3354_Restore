int32x4_t **physx::Dy::solve1D4(unsigned int *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  *(float *)&a4 = a5;
  return physx::Dy::solve1DStep4((int32x4_t **)(a2 + 48 * *a1), a3, *(int32x2_t *)&a4);
}

_DWORD *physx::Dy::writeBack1D4(_DWORD *result, uint64_t a2)
{
  int32x2_t *v2;
  int32x2_t *v3;
  int32x2_t *v4;
  int32x2_t *v5;
  float32x4_t *v9;
  __int32 v10;
  float32x4_t v11;
  float32x4_t *v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v36;
  float32x4_t v37;
  int v38;
  int8x16_t v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;

  v2 = *(int32x2_t **)(a2 + 48 * *result + 40);
  v3 = *(int32x2_t **)(a2 + 48 * (*result + 1) + 40);
  v4 = *(int32x2_t **)(a2 + 48 * (*result + 2) + 40);
  v5 = *(int32x2_t **)(a2 + 48 * (*result + 3) + 40);
  if (v2)
    _ZF = 0;
  else
    _ZF = v3 == 0;
  if (!_ZF || v4 != 0 || v5 != 0)
  {
    v9 = *(float32x4_t **)(a2 + 48 * *result + 32);
    v10 = v9->i32[1];
    if (v10)
    {
      v11 = 0uLL;
      v12 = v9 + 40;
      v13.i64[0] = 0x200000002;
      v13.i64[1] = 0x200000002;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      do
      {
        v19 = (float32x4_t)vbicq_s8((int8x16_t)v12[19], (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v12[22], v13)));
        v11 = vmlaq_f32(v11, v19, *v12);
        v14 = vmlaq_f32(v14, v19, v12[1]);
        v15 = vmlaq_f32(v15, v19, v12[2]);
        v16 = vmlaq_f32(v16, v19, v12[8]);
        v18 = vmlaq_f32(v18, v19, v12[9]);
        v17 = vmlaq_f32(v17, v19, v12[10]);
        v12 += 23;
        --v10;
      }
      while (v10);
    }
    else
    {
      v18 = 0uLL;
      v17 = 0uLL;
      v16 = 0uLL;
      v15 = 0uLL;
      v14 = 0uLL;
      v11 = 0uLL;
    }
    v20 = v9[7];
    v21 = v9[8];
    v22 = vsubq_f32(v16, vmlsq_f32(vmulq_f32(v15, v21), v14, v20));
    v23 = v9[9];
    v24 = vsubq_f32(v18, vmlsq_f32(vmulq_f32(v11, v23), v15, v21));
    v25 = vmlsq_f32(vmulq_f32(v14, v20), v11, v23);
    v26 = vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v11), v14, v14), v15, v15);
    v27 = vmlaq_f32(vmulq_f32(v22, v22), v24, v24);
    v28 = vrsqrteq_f32(v26);
    v29 = 4;
    do
    {
      v28 = vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v28, v28), v26));
      --v29;
    }
    while (v29);
    v30 = vsubq_f32(v17, v25);
    v31 = vmlaq_f32(v27, v30, v30);
    __asm { FMOV            V16.4S, #1.0 }
    v36 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v26), _Q16, (int8x16_t)v28);
    v37 = vrsqrteq_f32(v31);
    v38 = 4;
    do
    {
      v37 = vmulq_f32(v37, vrsqrtsq_f32(vmulq_f32(v37, v37), v31));
      --v38;
    }
    while (v38);
    v39 = vorrq_s8((int8x16_t)vcgtq_f32(vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v31), _Q16, (int8x16_t)v37)), v9[2]), (int8x16_t)vcgtq_f32(vmulq_f32(v26, v36), v9[1]));
    if (v2)
    {
      *v2 = vzip1_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v14.f32);
      v2[1].i32[0] = v15.i32[0];
      v2[2] = vzip1_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v24.f32);
      v2[3].i32[0] = v30.i32[0];
      if (v9->i8[12])
        v40 = v39.i32[0] == 0;
      else
        v40 = 1;
      v41 = !v40;
      v2[1].i32[1] = v41;
    }
    if (v3)
    {
      *v3 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v14.f32);
      v3[1].i32[0] = v15.i32[1];
      v3[2] = vzip2_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v24.f32);
      v3[3].i32[0] = v30.i32[1];
      if (v9->i8[13])
        v42 = v39.i32[1] == 0;
      else
        v42 = 1;
      v43 = !v42;
      v3[1].i32[1] = v43;
    }
    v44 = (int32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    v45 = (int32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    v46 = (int32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v47 = (int32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    if (v4)
    {
      *v4 = vzip1_s32(v45, v44);
      v4[1].i32[0] = v15.i32[2];
      v4[2] = vzip1_s32(v47, v46);
      v4[3].i32[0] = v30.i32[2];
      if (v9->i8[14])
        v48 = v39.i32[2] == 0;
      else
        v48 = 1;
      v49 = !v48;
      v4[1].i32[1] = v49;
    }
    if (v5)
    {
      *v5 = vzip2_s32(v45, v44);
      v5[1].i32[0] = v15.i32[3];
      v5[2] = vzip2_s32(v47, v46);
      v5[3].i32[0] = v30.i32[3];
      if (v9->i8[15])
        v50 = v39.i32[3] == 0;
      else
        v50 = 1;
      v51 = !v50;
      v5[1].i32[1] = v51;
    }
  }
  return result;
}

int32x4_t **physx::Dy::solveConcludeContact4(unsigned int *a1, uint64_t a2, int32x2_t a3)
{
  float v3;

  v3 = *(float *)a3.i32;
  a3.i32[0] = -8388609;
  return physx::Dy::solveContact4_Block((int32x4_t **)(a2 + 48 * *a1), a3, v3);
}

int32x4_t **physx::Dy::solveConclude1D4(unsigned int *a1, uint64_t a2, uint64_t a3, int32x2_t a4)
{
  int32x4_t **result;
  int8x16_t *v7;
  unsigned __int32 v8;
  int8x16_t v10;

  result = physx::Dy::solve1DStep4((int32x4_t **)(a2 + 48 * *a1), a3, a4);
  v7 = *(int8x16_t **)(a2 + 48 * *a1 + 32);
  if (v7 && v7->i32[1])
  {
    v8 = 0;
    _X10 = v7 + 47;
    v10.i64[0] = 0x400000004;
    v10.i64[1] = 0x400000004;
    do
    {
      __asm { PRFM            #0, [X10,#0x100] }
      *_X10 = vbicq_s8(*_X10, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(_X10[15], v10)));
      ++v8;
      _X10 += 23;
    }
    while (v8 < v7->i32[1]);
  }
  return result;
}

void physx::Dy::BlockAllocator::~BlockAllocator(physx::Dy::BlockAllocator *this)
{
  JUMPOUT(0x2276933B8);
}

unsigned __int8 *physx::Dy::BlockAllocator::findInputPatches(physx::Dy::BlockAllocator *this, unsigned __int8 *a2)
{
  return a2;
}

uint64_t physx::Dy::DynamicsContext::setSimulationController(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

void physx::Dy::PxsPreIntegrateTask::~PxsPreIntegrateTask(physx::Dy::PxsPreIntegrateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsPreIntegrateTask::getName(physx::Dy::PxsPreIntegrateTask *this)
{
  return "PxsDynamics.preIntegrate";
}

void physx::Dy::PxsSolverCreateFinalizeConstraintsTask::~PxsSolverCreateFinalizeConstraintsTask(physx::Dy::PxsSolverCreateFinalizeConstraintsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsSolverCreateFinalizeConstraintsTask::getName(physx::Dy::PxsSolverCreateFinalizeConstraintsTask *this)
{
  return "PxsDynamics.solverCreateFinalizeConstraints";
}

void physx::Dy::SolverCoreGeneral::~SolverCoreGeneral(physx::Dy::SolverCoreGeneral *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::Dy::SolverCoreGeneralPF::~SolverCoreGeneralPF(physx::Dy::SolverCoreGeneralPF *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::Dy::PxsSolverStartTask::~PxsSolverStartTask(physx::Dy::PxsSolverStartTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsSolverStartTask::getName(physx::Dy::PxsSolverStartTask *this)
{
  return "PxsDynamics.solverStart";
}

void physx::Dy::PxsSolverStartTask::runInternal(physx::Dy::PxsSolverStartTask *this)
{
  physx::Dy::PxsSolverStartTask *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  physx::Dy::PxsSolverStartTask *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int j;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int k;
  uint64_t v86;
  unsigned int v87;
  uint64_t m;
  uint64_t v89;
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  __int128 *v110;
  __int128 *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  BOOL v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  void *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  physx::Dy::PxsSolverStartTask *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int n;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t *v171;
  uint64_t *v172;
  void **v173;
  unsigned int v174;
  size_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  unsigned int v181;
  physx::Dy::PxsSolverStartTask *v182;
  uint64_t v183;
  unsigned int v184;
  _DWORD *v185;
  uint64_t v186;
  int v187;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  _DWORD *v205;
  uint64_t v206;
  int v207;
  int v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  int v216;
  int v217;
  uint64_t *v218;
  __int128 *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  int v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  unsigned int v250;
  uint64_t v251;
  int v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  _OWORD *v256;
  uint64_t v257;
  _OWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  unsigned int v272;
  __int16 v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  _OWORD *v279;
  unsigned int v280;
  unsigned int v281;
  physx::Dy::PxsSolverStartTask *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  int v287;
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  void (**v296)(physx::Dy::PxsSolverConstraintPostProcessTask *__hidden);
  _DWORD *v297;
  uint64_t v298;
  int v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  physx::Dy::PxsSolverStartTask *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  void (**v312)(physx::Dy::SolverArticulationUpdateTask *__hidden);
  _OWORD *v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int v340;
  physx::Dy::PxsSolverStartTask *v341;
  uint64_t v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t *v345;
  _BYTE v346[4];
  uint64_t v347;
  __int128 *v348;
  char v349;
  void *v350;
  char v351;
  _DWORD v352[2];
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;

  v1 = this;
  v361 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 400));
  v341 = v1;
  if (!v3)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v5 = "<allocation names disabled>";
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 12343, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v3 - 8) = v3 - v6;
    }
    else
    {
      v3 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v3, *(physx::PxcNpMemBlockPool **)(v2 + 408));
    v1 = v341;
  }
  v7 = *((_QWORD *)v1 + 6);
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v3 + 12240) = 0;
  *(_DWORD *)(v3 + 12212) = 0;
  *(_QWORD *)(v3 + 12280) = *(_QWORD *)(v3 + 12064);
  *(_DWORD *)(v3 + 12048) = 0;
  *(_DWORD *)(v3 + 12024) = 0;
  *(_DWORD *)(v3 + 12256) = 0;
  *(_QWORD *)(v3 + 11896) = 0;
  *(_QWORD *)(v3 + 11912) = 0;
  *(_QWORD *)(v3 + 11904) = 0;
  v8 = *((_QWORD *)v1 + 15);
  *(_QWORD *)(v3 + 12016) = v8;
  *(_QWORD *)(v3 + 12032) = *((_QWORD *)v1 + 16);
  *(_QWORD *)(v3 + 12264) = v8;
  *(_QWORD *)(v3 + 12056) = *((_QWORD *)v1 + 17);
  *(_QWORD *)(v3 + 12040) = *((_QWORD *)v1 + 18);
  *(_QWORD *)(v3 + 11992) = *((_QWORD *)v1 + 19);
  *(_QWORD *)(v3 + 11968) = *((_QWORD *)v1 + 20);
  v9 = (char *)v1 + 56;
  *(_OWORD *)(v3 + 11976) = *(_OWORD *)((char *)v1 + 56);
  *(_OWORD *)(v3 + 12000) = *(_OWORD *)((char *)v1 + 104);
  if (*(_DWORD *)(*((_QWORD *)v1 + 5) + 148))
    v10 = *(_DWORD *)(v7 + 16);
  else
    v10 = 0;
  physx::Dy::ThreadContext::resizeArrays(v3, v10, *(_DWORD *)(v7 + 12) & 0x7FFFFFFF);
  v11 = *(_QWORD *)(v3 + 11968);
  v12 = *(_QWORD *)(v3 + 11976);
  v13 = *(_QWORD *)(v3 + 12000);
  v14 = *(_QWORD *)(v3 + 12008);
  v15 = v341;
  v16 = *((unsigned int *)v341 + 24);
  v17 = *((_QWORD *)v341 + 11);
  v18 = *((_QWORD *)v341 + 22);
  if ((_DWORD)v16)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(v3 + 11984);
    do
    {
      v23 = *(_DWORD *)(*(_QWORD *)(v18 + 344) + 44 * *(unsigned int *)(v17 + 4 * v19));
      if (v23 <= 0xFFFFFF7F)
      {
        do
        {
          v24 = v23 >> 7;
          v25 = *(_QWORD *)(v18 + 248);
          v26 = v25 + 32 * v24;
          if (*(_BYTE *)(v26 + 5) == 1)
            *(_QWORD *)(v22 + 8 * v21++) = *(_QWORD *)(v26 + 24);
          else
            *(_DWORD *)(v14 + 4 * v20++) = v24;
          v23 = *(_DWORD *)(v25 + 32 * v24 + 8);
        }
        while (v23 < 0xFFFFFF80);
      }
      ++v19;
    }
    while (v19 != v16);
  }
  else
  {
    v20 = 0;
  }
  if (*((_BYTE *)v341 + 208))
  {
    physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v14, v20, (uint64_t)&v353, (uint64_t)v346, 32);
    v15 = v341;
  }
  if (v20)
  {
    for (i = 0; i != v20; *(_DWORD *)(v13 + 4 * *(unsigned int *)(*(_QWORD *)(v18 + 264) + 4 * v28)) = i++)
    {
      v28 = *(_DWORD *)(v14 + 4 * i) & 0x1FFFFFF;
      v29 = *(_QWORD *)(*(_QWORD *)(v18 + 248) + 32 * v28 + 24);
      *(_QWORD *)(v12 + 8 * i) = v29;
      *(_QWORD *)(v11 + 8 * i) = *(_QWORD *)(v29 + 40);
    }
  }
  v313 = v9;
  v30 = *((_QWORD *)v15 + 10);
  if ((_DWORD)v16)
  {
    v342 = v13;
    v31 = 0;
    v32 = 0;
    v333 = v17;
    v337 = v16;
    do
    {
      for (j = *(_DWORD *)(*(_QWORD *)(v18 + 344) + 44 * *(unsigned int *)(v17 + 4 * v31) + 20);
            j != -1;
            j = *(_DWORD *)(v35 + 16 * (j % v34) + 8))
      {
        v34 = *(_DWORD *)(v18 + 304);
        v35 = *(_QWORD *)(*(_QWORD *)(v18 + 280) + 8 * (j / v34));
        v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 22) + 176)
                                    + 8 * (j / *(_DWORD *)(*((_QWORD *)v15 + 22) + 200)))
                        + 8 * (j % *(_DWORD *)(*((_QWORD *)v15 + 22) + 200)));
        if (v36)
        {
          v37 = *(uint64_t **)(v18 + 832);
          v38 = *((_DWORD *)v37 + 6);
          v39 = *v37;
          v40 = *(unsigned int *)(*(_QWORD *)(*v37 + 8 * (2 * j / v38)) + 4 * (2 * j % v38));
          v41 = *(unsigned int *)(*(_QWORD *)(v39 + 8 * (((2 * j) | 1) / v38)) + 4 * (((2 * j) | 1) % v38));
          v42 = v30 + 32 * v32;
          *(_QWORD *)(v42 + 24) = v36;
          v43 = v40 >> 7;
          v44 = *(_QWORD *)(v18 + 248) + 32 * (v40 >> 7);
          if (*(_BYTE *)(v44 + 5) == 1)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v44 + 24) + 376))(*(_QWORD *)(v44 + 24), (v40 >> 1) & 0x3F, v30 + 32 * v32, v42 + 16);
          }
          else
          {
            if ((*(_BYTE *)(v44 + 4) & 4) != 0)
            {
              *(_BYTE *)(v42 + 16) = 1;
              v45 = *(unsigned int *)(*(_QWORD *)(v18 + 264) + 4 * v43);
            }
            else
            {
              *(_BYTE *)(v42 + 16) = 0;
              v45 = *(unsigned int *)(v342 + 4 * *(unsigned int *)(*(_QWORD *)(v18 + 264) + 4 * v43));
            }
            *(_QWORD *)v42 = v45;
          }
          ++v32;
          if (v41 < 0xFFFFFF80)
          {
            v46 = v41 >> 7;
            v47 = *(_QWORD *)(v18 + 248) + 32 * (v41 >> 7);
            if (*(_BYTE *)(v47 + 5) == 1)
            {
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v47 + 24) + 376))(*(_QWORD *)(v47 + 24), (v41 >> 1) & 0x3F, v42 + 8, v42 + 17);
            }
            else
            {
              if ((*(_BYTE *)(v47 + 4) & 4) != 0)
              {
                *(_BYTE *)(v42 + 17) = 1;
                v48 = *(_QWORD *)(v18 + 264);
              }
              else
              {
                *(_BYTE *)(v42 + 17) = 0;
                v46 = *(unsigned int *)(*(_QWORD *)(v18 + 264) + 4 * v46);
                v48 = v342;
              }
              *(_QWORD *)(v42 + 8) = *(unsigned int *)(v48 + 4 * v46);
            }
          }
          else
          {
            *(_BYTE *)(v42 + 17) = 3;
          }
          v15 = v341;
        }
      }
      ++v31;
      v17 = v333;
    }
    while (v31 != v337);
  }
  else
  {
    v32 = 0;
  }
  if (*((_BYTE *)v15 + 208))
  {
    v351 = 0;
    v350 = &v353;
    v347 = 0x2000000000;
    v348 = &v353;
    v349 = 0;
    v49 = v32 - 1;
    if ((int)(v32 - 1) >= 1)
    {
      v50 = 0;
      v51 = 0;
      v359 = 0u;
      v360 = 0u;
      v357 = 0u;
      v358 = 0u;
      v355 = 0u;
      v356 = 0u;
      v52 = &v353;
      v353 = 0u;
      v354 = 0u;
      while (1)
      {
        if (v49 > v51)
        {
          if ((v49 - v51) >= 5)
          {
            while (1)
            {
              v53 = (__int128 *)(v30 + 32 * ((uint64_t)(v49 + v51 + (v49 + v51 < 0)) >> 1));
              v54 = (__int128 *)(v30 + 32 * v51);
              v55 = *((_QWORD *)v53 + 3);
              v56 = (uint64_t *)v54 + 3;
              v57 = *((_QWORD *)v54 + 3);
              v58 = *(_DWORD *)(v55 + 96);
              v59 = *(_DWORD *)(v57 + 96);
              if (v58 < v59
                || v58 == v59 && (v59 = *(_DWORD *)(v55 + 96), *(_DWORD *)(v55 + 100) < *(_DWORD *)(v57 + 100)))
              {
                v61 = *v54;
                v60 = v54[1];
                v62 = v53[1];
                *v54 = *v53;
                v54[1] = v62;
                *v53 = v61;
                v53[1] = v60;
                v57 = *v56;
                v59 = *(_DWORD *)(*v56 + 96);
              }
              v63 = (__int128 *)(v30 + 32 * v49);
              v65 = (uint64_t *)v63 + 3;
              v64 = *((_QWORD *)v63 + 3);
              v66 = *(_DWORD *)(v64 + 96);
              if (v66 < v59)
                break;
              if (v66 == v59)
              {
                if (*(_DWORD *)(v64 + 100) < *(_DWORD *)(v57 + 100))
                  break;
              }
              else
              {
                v59 = *(_DWORD *)(v64 + 96);
              }
LABEL_65:
              v70 = *((_QWORD *)v53 + 3);
              v71 = *(_DWORD *)(v70 + 96);
              if (v59 < v71 || v59 == v71 && *(_DWORD *)(v64 + 100) < *(_DWORD *)(v70 + 100))
              {
                v73 = *v53;
                v72 = v53[1];
                v74 = v63[1];
                *v53 = *v63;
                v53[1] = v74;
                *v63 = v73;
                v63[1] = v72;
              }
              v75 = (_OWORD *)(v30 + 32 * (v49 - 1));
              v77 = *v53;
              v76 = v53[1];
              v78 = v75[1];
              *v53 = *v75;
              v53[1] = v78;
              *v75 = v77;
              v75[1] = v76;
              v79 = (char *)v75 + 24;
              v80 = v51;
              v81 = v49 - 1;
              while (1)
              {
                v82 = *(_QWORD *)v79;
                v83 = *(_DWORD *)(*(_QWORD *)v79 + 96);
                v84 = v30 + 32 + 32 * v80;
                for (k = v80; ; ++k)
                {
                  v86 = *(_QWORD *)(v84 + 24);
                  v87 = *(_DWORD *)(v86 + 96);
                  if (v87 >= v83 && (v87 != v83 || *(_DWORD *)(v86 + 100) >= *(_DWORD *)(v82 + 100)))
                    break;
                  v84 += 32;
                }
                v80 = k + 1;
                for (m = v30 - 32 + 32 * v81; ; m -= 32)
                {
                  --v81;
                  v89 = *(_QWORD *)(m + 24);
                  v90 = *(_DWORD *)(v89 + 96);
                  if (v83 >= v90 && (v83 != v90 || *(_DWORD *)(v82 + 100) >= *(_DWORD *)(v89 + 100)))
                    break;
                }
                if (v80 >= v81)
                  break;
                v92 = *(_OWORD *)v84;
                v91 = *(_OWORD *)(v84 + 16);
                v93 = *(_OWORD *)(m + 16);
                *(_OWORD *)v84 = *(_OWORD *)m;
                *(_OWORD *)(v84 + 16) = v93;
                *(_OWORD *)m = v92;
                *(_OWORD *)(m + 16) = v91;
              }
              v95 = *(_OWORD *)v84;
              v94 = *(_OWORD *)(v84 + 16);
              v96 = v75[1];
              *(_OWORD *)v84 = *v75;
              *(_OWORD *)(v84 + 16) = v96;
              *v75 = v95;
              v75[1] = v94;
              v97 = HIDWORD(v347) - 1;
              if (k - v51 + 1 >= v49 - 1 - k)
              {
                if (v50 >= v97)
                {
                  physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::grow((uint64_t)v346);
                  v50 = v347;
                  v52 = v348;
                }
                *((_DWORD *)v52 + v50) = k + 2;
                v99 = v50 + 1;
                v50 += 2;
                LODWORD(v347) = v50;
                *((_DWORD *)v52 + v99) = v49;
                v49 = k;
              }
              else
              {
                if (v50 >= v97)
                {
                  physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::grow((uint64_t)v346);
                  v50 = v347;
                  v52 = v348;
                }
                *((_DWORD *)v52 + v50) = v51;
                v98 = v50 + 1;
                v50 += 2;
                LODWORD(v347) = v50;
                *((_DWORD *)v52 + v98) = k;
                v51 = k + 2;
              }
              if (v49 <= v51)
                goto LABEL_101;
              if ((v49 - v51) <= 4)
                goto LABEL_91;
            }
            v68 = *v54;
            v67 = v54[1];
            v69 = v63[1];
            *v54 = *v63;
            v54[1] = v69;
            *v63 = v68;
            v63[1] = v67;
            v64 = *v65;
            v59 = *(_DWORD *)(*v65 + 96);
            goto LABEL_65;
          }
LABEL_91:
          v100 = v51;
          v101 = v51 + 1;
          v102 = v30 + 56 + 32 * v51;
          do
          {
            v103 = 0;
            v104 = v100++;
            v105 = v102;
            v106 = v104;
            do
            {
              v107 = *(_QWORD *)(v30 + 32 * v106 + 24);
              v108 = *(_DWORD *)(*(_QWORD *)v105 + 96);
              v109 = *(_DWORD *)(v107 + 96);
              if (v108 < v109 || v108 == v109 && *(_DWORD *)(*(_QWORD *)v105 + 100) < *(_DWORD *)(v107 + 100))
                v106 = v101 + v103;
              ++v103;
              v105 += 32;
            }
            while (v104 + v103 < v49);
            if (v106 != (_DWORD)v104)
            {
              v110 = (__int128 *)(v30 + 32 * v106);
              v111 = (__int128 *)(v30 + 32 * v104);
              v113 = *v110;
              v112 = v110[1];
              v114 = v111[1];
              *v110 = *v111;
              v110[1] = v114;
              *v111 = v113;
              v111[1] = v112;
            }
            ++v101;
            v102 += 32;
          }
          while (v100 != v49);
        }
LABEL_101:
        if (!v50)
          break;
        LODWORD(v347) = v50 - 1;
        v49 = *((_DWORD *)v52 + v50 - 1);
        v50 -= 2;
        LODWORD(v347) = v50;
        v51 = *((_DWORD *)v52 + v50);
      }
      if (v349)
        v115 = v52 == 0;
      else
        v115 = 1;
      if (!v115)
      {
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v52);
        if (v351)
          physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v350, (char *)v350);
      }
    }
    v15 = v341;
  }
  v116 = (uint64_t *)*((_QWORD *)v15 + 6);
  *((_DWORD *)v116 + 4) = v32;
  v117 = *((_QWORD *)v15 + 5);
  v118 = *((unsigned int *)v15 + 42);
  v334 = (void *)(*(_QWORD *)(v117 + 544) + 32 * v118);
  v338 = *((_DWORD *)v116 + 2);
  v119 = v338 + 255;
  if (v338 + 255 >= 0x100)
  {
    v323 = 0;
    v120 = 0;
    v121 = *v116;
    v319 = *(_QWORD *)(v117 + 560) + 112 * v118;
    v122 = *(_DWORD *)(v117 + 88);
    v318 = *(_QWORD *)(v121 + 11968);
    v317 = *(_QWORD *)(v121 + 12008);
    v316 = v121 + 12240;
    v315 = v121 + 12244;
    v123 = *((_QWORD *)v341 + 3);
    v124 = v119 >> 8;
    v322 = v338;
    v125 = v119 >> 8;
    v314 = v119 >> 8;
    v325 = v123;
    v327 = *((_QWORD *)v15 + 5);
    v126 = *((_QWORD *)v341 + 7);
    do
    {
      v320 = v125;
      v321 = v120;
      if (v125 >= 0x40uLL)
        v127 = 64;
      else
        v127 = v125;
      if (v124 - v120 >= 0x40)
        v128 = 64;
      else
        v128 = v124 - v120;
      v129 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v117 + 744), 136 * v128, 0x10u);
      v130 = v334;
      v131 = v338;
      v133 = v315;
      v132 = v316;
      if (v128)
      {
        v134 = 0;
        v329 = 136 * v127;
        v331 = v129;
        v135 = v322;
        v136 = v323;
        do
        {
          v343 = v135 - 256;
          if (v135 >= 0x100)
            v135 = 256;
          v137 = v129 + v134;
          v138 = *(_QWORD *)(v117 + 768);
          *(_QWORD *)(v137 + 16) = 0;
          *(_QWORD *)(v137 + 24) = 0;
          *(_DWORD *)(v137 + 32) = 0;
          *(_QWORD *)v137 = &off_24ED8CE78;
          *(_QWORD *)(v137 + 8) = v138;
          *(_QWORD *)(v137 + 40) = v117;
          *(_QWORD *)(v137 + 48) = v318;
          *(_QWORD *)(v137 + 56) = v126;
          *(_QWORD *)(v137 + 64) = v317;
          *(_QWORD *)(v137 + 72) = v130;
          *(_QWORD *)(v137 + 80) = v319;
          *(_DWORD *)(v137 + 88) = v122;
          *(_DWORD *)(v137 + 92) = v131;
          *(_QWORD *)(v137 + 96) = v132;
          *(_QWORD *)(v137 + 104) = v133;
          *(_DWORD *)(v137 + 112) = v136;
          *(_DWORD *)(v137 + 116) = v135;
          *(_QWORD *)(v137 + 120) = *(_QWORD *)(v117 + 104);
          *(_DWORD *)(v137 + 128) = *(_DWORD *)(v117 + 112);
          *(_DWORD *)(v137 + 32) = 1;
          *(_QWORD *)(v137 + 24) = v123;
          v139 = *(void (**)(uint64_t))(*(_QWORD *)v123 + 32);
          v140 = v123;
          v141 = v132;
          v142 = v133;
          v139(v140);
          *(_QWORD *)(v137 + 16) = *(_QWORD *)(*(_QWORD *)(v137 + 24) + 16);
          (*(void (**)(uint64_t))(*(_QWORD *)v137 + 40))(v137);
          v133 = v142;
          v132 = v141;
          v130 = v334;
          v131 = v338;
          v123 = v325;
          v117 = v327;
          v129 = v331;
          v134 += 136;
          v136 += 256;
          v135 = v343;
        }
        while (v329 != v134);
      }
      v120 = v321 + 64;
      v125 = v320 - 64;
      v322 -= 0x4000;
      v323 += 0x4000;
      v124 = v314;
    }
    while (v321 + 64 < v314);
  }
  bzero(v334, 32 * v338);
  v143 = v341;
  v144 = **((_QWORD **)v341 + 6);
  v145 = *(_QWORD *)(v144 + 12264);
  v324 = v144;
  v328 = *((unsigned int *)v341 + 24);
  if ((_DWORD)v328)
  {
    v146 = 0;
    v326 = *((_QWORD *)v341 + 11);
    v147 = *((_QWORD *)v341 + 22);
    v344 = v147;
    while (1)
    {
      v330 = v146;
      for (n = *(_DWORD *)(*(_QWORD *)(v147 + 344) + 44 * *(unsigned int *)(v326 + 4 * v146) + 24);
            n != -1;
            n = *(_DWORD *)(v150 + 16 * (n % v149) + 8))
      {
        v149 = *(_DWORD *)(v147 + 304);
        v150 = *(_QWORD *)(*(_QWORD *)(v147 + 280) + 8 * (n / v149));
        v152 = *((_QWORD *)v143 + 22);
        v151 = *((_QWORD *)v143 + 23);
        v153 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 176) + 8 * (n / *(_DWORD *)(v152 + 200)))
                         + 8 * (n % *(_DWORD *)(v152 + 200)));
        v154 = *((_QWORD *)v143 + 5);
        v155 = *((_DWORD *)v143 + 42);
        v156 = 2 * n;
        v157 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v152 + 832)
                                           + 8 * (v156 / *(_DWORD *)(*(_QWORD *)(v152 + 832) + 24)))
                               + 4 * (v156 % *(_DWORD *)(*(_QWORD *)(v152 + 832) + 24)));
        if (v157 >= 0xFFFFFF80)
        {
          *(_QWORD *)v145 = v154 + 256;
          *(_DWORD *)(v145 + 20) = 0;
LABEL_137:
          *(_WORD *)(v145 + 16) = -1;
          goto LABEL_138;
        }
        v158 = *(_QWORD *)(v152 + 248) + 32 * (v157 >> 7);
        if (*(_BYTE *)(v158 + 5) != 1)
        {
          v161 = *(unsigned int *)(*(_QWORD *)(v152 + 264) + 4 * (v157 >> 7));
          if ((*(_BYTE *)(v158 + 4) & 4) == 0)
            LODWORD(v161) = *(_DWORD *)(v151 + 4 * v161) + v155;
          *(_QWORD *)v145 = *(_QWORD *)(v154 + 544) + 32 * v161;
          *(_DWORD *)(v145 + 20) = v161 + 1;
          goto LABEL_137;
        }
        v332 = *((_DWORD *)v143 + 42);
        v335 = *((_QWORD *)v143 + 23);
        v339 = *(_QWORD *)(*(_QWORD *)(v147 + 280) + 8 * (n / v149));
        v159 = *(_QWORD *)(v158 + 24);
        *(_QWORD *)&v353 = 0;
        v346[0] = 0;
        v160 = (v157 >> 1) & 0x3F;
        (*(void (**)(uint64_t, uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v159 + 376))(v159, v160, &v353, v346);
        if (v346[0] != 2)
        {
          v159 = v154 + 256;
          *(_DWORD *)(v145 + 20) = 0;
          LOWORD(v160) = -1;
        }
        *(_QWORD *)v145 = v159;
        *(_WORD *)(v145 + 16) = v160;
        v143 = v341;
        v147 = v344;
        v151 = v335;
        v150 = v339;
        v155 = v332;
LABEL_138:
        v162 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v152 + 832)
                                           + 8 * ((v156 | 1) / *(_DWORD *)(*(_QWORD *)(v152 + 832) + 24)))
                               + 4 * ((v156 | 1) % *(_DWORD *)(*(_QWORD *)(v152 + 832) + 24)));
        if (v162 >= 0xFFFFFF80)
        {
          *(_QWORD *)(v145 + 8) = v154 + 256;
          *(_DWORD *)(v145 + 24) = 0;
LABEL_147:
          *(_WORD *)(v145 + 18) = -1;
          goto LABEL_148;
        }
        v163 = *(_QWORD *)(v152 + 248) + 32 * (v162 >> 7);
        if (*(_BYTE *)(v163 + 5) != 1)
        {
          v167 = *(unsigned int *)(*(_QWORD *)(v152 + 264) + 4 * (v162 >> 7));
          if ((*(_BYTE *)(v163 + 4) & 4) == 0)
            LODWORD(v167) = *(_DWORD *)(v151 + 4 * v167) + v155;
          *(_QWORD *)(v145 + 8) = *(_QWORD *)(v154 + 544) + 32 * v167;
          *(_DWORD *)(v145 + 24) = v167 + 1;
          goto LABEL_147;
        }
        v164 = v150;
        v165 = *(_QWORD *)(v163 + 24);
        *(_QWORD *)&v353 = 0;
        v346[0] = 0;
        v166 = (v162 >> 1) & 0x3F;
        (*(void (**)(uint64_t, uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v165 + 376))(v165, v166, &v353, v346);
        if (v346[0] != 2)
        {
          v165 = v154 + 256;
          *(_DWORD *)(v145 + 24) = 0;
          LOWORD(v166) = -1;
        }
        v143 = v341;
        v147 = v344;
        v150 = v164;
        *(_QWORD *)(v145 + 8) = v165;
        *(_WORD *)(v145 + 18) = v166;
LABEL_148:
        *(_QWORD *)(v145 + 32) = v153;
        *(_WORD *)(v145 + 30) = 2;
        v145 += 48;
      }
      v146 = v330 + 1;
      if (v330 + 1 == v328)
      {
        v144 = v324;
        v168 = *(_QWORD *)(v324 + 12264);
        goto LABEL_152;
      }
    }
  }
  v168 = *(_QWORD *)(v144 + 12264);
LABEL_152:
  physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ConstraintLess,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(v168, -1431655765 * ((unint64_t)(v145 - v168) >> 4), (uint64_t)v346, (uint64_t)&v353, 32);
  *(_DWORD *)(v144 + 12120) = 0;
  v169 = *((_QWORD *)v341 + 6);
  v170 = *(_DWORD *)(v169 + 16);
  if ((*(_DWORD *)(v144 + 12124) & 0x7FFFFFFFu) < v170)
  {
    physx::shdfnd::Array<physx::PxsIndexedContactManager const*,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::recreate(v144 + 12112, v170);
    v169 = *((_QWORD *)v341 + 6);
    v170 = *(_DWORD *)(v169 + 16);
  }
  *(_DWORD *)(v144 + 12120) = v170;
  v171 = (uint64_t *)(v144 + 12128);
  *(_DWORD *)(v144 + 12136) = 0;
  if ((*(_DWORD *)(v144 + 12140) & 0x7FFFFFFFu) < v170)
  {
    physx::shdfnd::Array<physx::PxsIndexedContactManager const*,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::recreate(v144 + 12128, v170);
    v169 = *((_QWORD *)v341 + 6);
    v170 = *(_DWORD *)(v169 + 16);
  }
  *(_DWORD *)(v144 + 12136) = v170;
  v172 = *(uint64_t **)(v144 + 12112);
  *(_DWORD *)(v144 + 12104) = 0;
  if (!v170)
  {
    v182 = v341;
    goto LABEL_294;
  }
  v173 = (void **)(v144 + 12144);
  *(_DWORD *)(v144 + 12152) = 0;
  v352[0] = *(_DWORD *)(*((_QWORD *)v341 + 5) + 680);
  v352[1] = 0;
  v174 = v352[0] + *(_DWORD *)(v169 + 8) + 1;
  if ((*(_DWORD *)(v144 + 12156) & 0x7FFFFFFFu) < v174)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v144 + 12144, v174);
  *(_DWORD *)(v144 + 12152) = v174;
  v175 = 4 * v174;
  bzero(*(void **)(v144 + 12144), v175);
  v176 = *((_QWORD *)v341 + 6);
  v177 = *(unsigned int *)(v176 + 16);
  if ((_DWORD)v177)
  {
    v178 = 0;
    v179 = (_BYTE *)(*((_QWORD *)v341 + 10) + 17);
    do
    {
      v180 = *(v179 - 1);
      if (v180 != 2 && *v179 != 2)
      {
        v181 = v352[v180] + *(_DWORD *)(v179 - 17);
        ++*((_DWORD *)*v173 + v181);
        v177 = *(unsigned int *)(v176 + 16);
      }
      ++v178;
      v179 += 32;
    }
    while (v178 < v177);
  }
  else
  {
    v177 = 0;
  }
  v183 = *(unsigned int *)(v144 + 12152);
  if ((_DWORD)v183)
  {
    v184 = 0;
    v185 = *v173;
    v186 = v183 - 1;
    do
    {
      v187 = v185[v186];
      v185[v186] = v184;
      v184 += v187;
    }
    while ((unint64_t)v186--);
    if (!*(_DWORD *)(v176 + 16))
      goto LABEL_180;
  }
  else
  {
    v184 = 0;
    if (!v177)
      goto LABEL_180;
  }
  v189 = 0;
  v190 = 0;
  do
  {
    v191 = *((_QWORD *)v341 + 10) + v189;
    v192 = *(unsigned __int8 *)(v191 + 16);
    if (v192 == 2 || *(_BYTE *)(v191 + 17) == 2)
    {
      v193 = v184++;
    }
    else
    {
      v194 = v352[v192] + *(_DWORD *)v191;
      v193 = *((_DWORD *)*v173 + v194);
      *((_DWORD *)*v173 + v194) = v193 + 1;
    }
    *(_QWORD *)(*v171 + 8 * v193) = v191;
    ++v190;
    v189 += 32;
  }
  while (v190 < *(unsigned int *)(*((_QWORD *)v341 + 6) + 16));
LABEL_180:
  bzero(*v173, v175);
  v195 = *((_QWORD *)v341 + 6);
  v196 = *(unsigned int *)(v195 + 16);
  if ((_DWORD)v196)
  {
    v197 = 0;
    v198 = *v171;
    v199 = 16;
    do
    {
      v200 = *(_QWORD *)(v198 + 8 * v197);
      v201 = *(unsigned __int8 *)(v200 + 17);
      if ((_DWORD)v201 != 2 && *(_BYTE *)(*((_QWORD *)v341 + 10) + v199) != 2)
      {
        if ((_DWORD)v201 == 3)
          v202 = 0;
        else
          v202 = v352[v201] + *(_DWORD *)(v200 + 8);
        ++*((_DWORD *)*v173 + v202);
        v196 = *(unsigned int *)(v195 + 16);
      }
      ++v197;
      v199 += 32;
    }
    while (v197 < v196);
  }
  else
  {
    v196 = 0;
  }
  v203 = *(unsigned int *)(v144 + 12152);
  if ((_DWORD)v203)
  {
    v204 = 0;
    v205 = *v173;
    v206 = v203 - 1;
    do
    {
      v207 = v205[v206];
      v205[v206] = v204;
      v204 += v207;
    }
    while ((unint64_t)v206--);
    v196 = *(unsigned int *)(v195 + 16);
  }
  else
  {
    v204 = 0;
  }
  v209 = v204;
  if (v196)
  {
    v210 = 0;
    v211 = 16;
    v209 = v204;
    do
    {
      v212 = *(_QWORD *)(*v171 + 8 * v210);
      v213 = *(unsigned __int8 *)(v212 + 17);
      if ((_DWORD)v213 == 2 || *(_BYTE *)(*((_QWORD *)v341 + 10) + v211) == 2)
      {
        v214 = v209++;
      }
      else
      {
        if ((_DWORD)v213 == 3)
          v215 = 0;
        else
          v215 = v352[v213] + *(_DWORD *)(v212 + 8);
        v214 = *((_DWORD *)*v173 + v215);
        *((_DWORD *)*v173 + v215) = v214 + 1;
      }
      v172[v214] = v212;
      ++v210;
      v211 += 32;
    }
    while (v210 < *(unsigned int *)(*((_QWORD *)v341 + 6) + 16));
  }
  v336 = v144 + 12096;
  v351 = 0;
  v350 = &v353;
  v347 = 0x2000000000;
  v348 = &v353;
  v349 = 0;
  v216 = v209 + ~v204;
  if (v216 >= 1)
  {
    v217 = 0;
    v359 = 0u;
    v360 = 0u;
    v218 = &v172[v204];
    v357 = 0u;
    v358 = 0u;
    v355 = 0u;
    v356 = 0u;
    v353 = 0u;
    v354 = 0u;
    v219 = &v353;
    while (1)
    {
      if (v216 <= v217)
        goto LABEL_241;
      if ((v216 - v217) <= 4)
      {
        v241 = v217;
        v242 = v217 + 1;
        v243 = (uint64_t)&v218[v217 + 1];
        do
        {
          v244 = 0;
          v245 = v241++;
          v246 = v245;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v243 + 8 * v244) + 24) + 88) < *(_DWORD *)(*(_QWORD *)(v218[v246] + 24)
                                                                                                  + 88))
              v246 = v242 + v244;
            ++v244;
          }
          while (v245 + v244 < v216);
          if (v246 != (_DWORD)v245)
          {
            v247 = v218[v246];
            v218[v246] = v218[v245];
            v218[v245] = v247;
          }
          ++v242;
          v243 += 8;
        }
        while (v241 != v216);
LABEL_241:
        v248 = v347;
        if (!(_DWORD)v347)
        {
          if (v349)
            v249 = v219 == 0;
          else
            v249 = 1;
          if (!v249)
          {
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v219);
            if (v351)
              physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v350, (char *)v350);
          }
          break;
        }
        LODWORD(v347) = v347 - 1;
        v216 = *((_DWORD *)v219 + (v248 - 1));
        LODWORD(v347) = v248 - 2;
        v217 = *((_DWORD *)v219 + (v248 - 2));
      }
      else
      {
        v220 = v217 + v216;
        if (v217 + v216 < 0 != __OFADD__(v217, v216))
          ++v220;
        v221 = (uint64_t)v220 >> 1;
        v222 = v218[v220 >> 1];
        v223 = v218[v217];
        v224 = *(_DWORD *)(*(_QWORD *)(v223 + 24) + 88);
        if (*(_DWORD *)(*(_QWORD *)(v222 + 24) + 88) < v224)
        {
          v218[v217] = v222;
          v218[v221] = v223;
          v222 = v223;
          v223 = v218[v217];
          v224 = *(_DWORD *)(*(_QWORD *)(v223 + 24) + 88);
        }
        v225 = v218[v216];
        v226 = *(_DWORD *)(*(_QWORD *)(v225 + 24) + 88);
        if (v226 >= v224)
        {
          v223 = v218[v216];
        }
        else
        {
          v218[v217] = v225;
          v218[v216] = v223;
          v226 = *(_DWORD *)(*(_QWORD *)(v223 + 24) + 88);
          v222 = v218[v221];
        }
        if (v226 < *(_DWORD *)(*(_QWORD *)(v222 + 24) + 88))
        {
          v218[v221] = v223;
          v218[v216] = v222;
          v222 = v218[v221];
        }
        v227 = v216 - 1;
        v218[v221] = v218[v227];
        v218[v227] = v222;
        v228 = v217;
        v229 = v216 - 1;
        while (1)
        {
          v230 = *(_DWORD *)(*(_QWORD *)(v222 + 24) + 88);
          v231 = &v218[v228];
          do
          {
            v233 = v231[1];
            ++v231;
            v232 = v233;
            ++v228;
          }
          while (*(_DWORD *)(*(_QWORD *)(v233 + 24) + 88) < v230);
          v234 = &v218[v229];
          do
          {
            v236 = *--v234;
            v235 = v236;
            --v229;
          }
          while (v230 < *(_DWORD *)(*(_QWORD *)(v236 + 24) + 88));
          if (v228 >= v229)
            break;
          *v231 = v235;
          *v234 = v232;
          v222 = v218[v227];
        }
        *v231 = v222;
        v218[v227] = v232;
        v237 = v347;
        v238 = HIDWORD(v347) - 1;
        if (v228 - v217 >= v216 - v228)
        {
          if (v347 >= v238)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::grow((uint64_t)v346);
            v237 = v347;
            v219 = v348;
          }
          LODWORD(v347) = v237 + 1;
          *((_DWORD *)v219 + v237) = v228 + 1;
          v240 = v347;
          LODWORD(v347) = v347 + 1;
          *((_DWORD *)v219 + v240) = v216;
          v216 = v228 - 1;
        }
        else
        {
          if (v347 >= v238)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::grow((uint64_t)v346);
            v237 = v347;
            v219 = v348;
          }
          LODWORD(v347) = v237 + 1;
          *((_DWORD *)v219 + v237) = v217;
          v239 = v347;
          LODWORD(v347) = v347 + 1;
          *((_DWORD *)v219 + v239) = v228 - 1;
          v217 = v228 + 1;
        }
      }
    }
  }
  *(_QWORD *)(v144 + 12272) = v145;
  if ((*(_DWORD *)(v144 + 12108) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(v336, 0x400u);
  *(_DWORD *)(v144 + 12104) = 0;
  physx::Dy::DynamicsContext::setDescFromIndices(*((_QWORD *)v341 + 5), v145, *v172, *((_DWORD *)v341 + 42));
  v182 = v341;
  *(_QWORD *)(v145 + 32) = *(_QWORD *)(*v172 + 24);
  *(_WORD *)(v145 + 30) = 1;
  v345 = v172;
  v250 = *(_DWORD *)(*(_QWORD *)(*v172 + 24) + 108);
  v251 = *(_QWORD *)(*((_QWORD *)v182 + 25) + 32)
       + 32 * (*(_DWORD *)(*((_QWORD *)v182 + 25) + 4 * (v250 & 7)) + (v250 >> 3));
  v252 = *(unsigned __int8 *)(v251 + 24);
  LODWORD(v253) = *(_DWORD *)(*((_QWORD *)v341 + 6) + 16);
  if (v253 < 2)
  {
    v254 = 0;
    v272 = 0;
    if (*(_BYTE *)(v251 + 24))
      goto LABEL_274;
  }
  else
  {
    v340 = 0;
    v254 = 0;
    v255 = 1;
    v256 = (_OWORD *)v145;
    do
    {
      v257 = v251;
      v258 = (_OWORD *)(v145 + 48);
      physx::Dy::DynamicsContext::setDescFromIndices(*((_QWORD *)v182 + 5), v145 + 48, v345[v255], *((_DWORD *)v182 + 42));
      v182 = v341;
      v259 = *(_QWORD *)(v345[v255] + 24);
      v260 = *((_QWORD *)v341 + 25);
      v261 = *(_QWORD *)(v260 + 32);
      v262 = (*(_DWORD *)(v260 + 4 * (*(_DWORD *)(v259 + 108) & 7)) + (*(_DWORD *)(v259 + 108) >> 3));
      v251 = v261 + 32 * v262;
      *(_QWORD *)(v145 + 80) = v259;
      *(_WORD *)(v145 + 78) = 1;
      if (!v252)
      {
        v263 = *v258;
        v264 = *(_OWORD *)(v145 + 80);
        v256[1] = *(_OWORD *)(v145 + 64);
        v256[2] = v264;
        *v256 = v263;
        v257 = v261 + 32 * v262;
        v254 = v255;
      }
      if (*(_QWORD *)v256 == *(_QWORD *)v258
        && *((_QWORD *)v256 + 1) == *(_QWORD *)(v145 + 56)
        && *((__int16 *)v256 + 8) == -1
        && *((__int16 *)v256 + 9) == -1
        && v252 + *(unsigned __int8 *)(v261 + 32 * v262 + 24) <= 0x40
        && (*(_BYTE *)(v259 + 16) & 1) == 0)
      {
        v258 = v256;
        v251 = v257;
      }
      else if (v252)
      {
        if ((v255 - v254) <= 1)
        {
          v252 = 0;
          v254 = v255;
          v145 += 48;
        }
        else
        {
          v265 = *(_DWORD *)(v324 + 12108) & 0x7FFFFFFF;
          v266 = *(_DWORD *)(v324 + 12104);
          if (v265 <= v266)
          {
            if (v265)
              v267 = 2 * *(_DWORD *)(v324 + 12108);
            else
              v267 = 1;
            physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(v336, v267);
            v182 = v341;
            v266 = *(_DWORD *)(v324 + 12104);
          }
          ++v340;
          v268 = *(_QWORD *)(v324 + 12096);
          *(_DWORD *)(v324 + 12104) = v266 + 1;
          v269 = v268 + ((unint64_t)v266 << 6);
          *(_DWORD *)v269 = v254;
          *(_WORD *)(v269 + 4) = v255 - v254;
          *(_WORD *)(v269 + 6) = v252;
          *(_QWORD *)(v269 + 8) = *(_QWORD *)(v345[v254] + 24) + 32;
          *(_QWORD *)(v269 + 16) = v257;
          *(_OWORD *)(v269 + 24) = *(_OWORD *)v257;
          *(_WORD *)(v269 + 40) = *(_WORD *)(v257 + 24);
          *(_QWORD *)(v269 + 48) = *(_QWORD *)(v257 + 16);
          *(_BYTE *)(v269 + 42) = *(_BYTE *)(v257 + 26);
          v254 = v255;
          v145 += 48;
          v252 = 0;
        }
      }
      else
      {
        v270 = *v258;
        v271 = *(_OWORD *)(v145 + 80);
        v256[1] = *(_OWORD *)(v145 + 64);
        v256[2] = v271;
        *v256 = v270;
        v258 = v256;
        v254 = v255;
      }
      v252 += *(unsigned __int8 *)(v261 + 32 * v262 + 24);
      ++v255;
      v253 = *(unsigned int *)(*((_QWORD *)v182 + 6) + 16);
      v256 = v258;
    }
    while (v255 < v253);
    v272 = v340;
    if (v252)
    {
LABEL_274:
      v273 = v253 - v254;
      if ((v253 - v254) >= 2)
      {
        ++v272;
        v274 = *(_DWORD *)(v324 + 12108) & 0x7FFFFFFF;
        v275 = *(_DWORD *)(v324 + 12104);
        if (v274 <= v275)
        {
          if (v274)
            v276 = 2 * *(_DWORD *)(v324 + 12108);
          else
            v276 = 1;
          physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(v336, v276);
          v182 = v341;
          v275 = *(_DWORD *)(v324 + 12104);
        }
        v277 = *(_QWORD *)(v324 + 12096);
        *(_DWORD *)(v324 + 12104) = v275 + 1;
        v278 = v277 + ((unint64_t)v275 << 6);
        *(_DWORD *)v278 = v254;
        *(_WORD *)(v278 + 4) = v273;
        *(_WORD *)(v278 + 6) = v252;
        *(_QWORD *)(v278 + 8) = *(_QWORD *)(v345[v254] + 24) + 32;
        *(_QWORD *)(v278 + 16) = v251;
        *(_OWORD *)(v278 + 24) = *(_OWORD *)v251;
        *(_WORD *)(v278 + 40) = *(_WORD *)(v251 + 24);
        *(_QWORD *)(v278 + 48) = *(_QWORD *)(v251 + 16);
        *(_BYTE *)(v278 + 42) = *(_BYTE *)(v251 + 26);
      }
      v279 = v313;
      v145 += 48;
      if (!v272)
        goto LABEL_293;
      goto LABEL_285;
    }
  }
  v279 = v313;
  if (v272)
  {
LABEL_285:
    v280 = 0;
    v281 = v272;
    do
    {
      v282 = v182;
      v283 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)v182 + 5) + 744), 200, 0x10u);
      v284 = v283;
      v285 = *((_QWORD *)v282 + 5);
      v286 = *((_DWORD *)v282 + 42);
      if (v281 >= 8)
        v287 = 8;
      else
        v287 = v281;
      v288 = *(_QWORD *)(v285 + 768);
      v289 = *((_OWORD *)v282 + 12);
      *(_QWORD *)(v283 + 16) = 0;
      *(_QWORD *)(v283 + 24) = 0;
      *(_DWORD *)(v283 + 32) = 0;
      *(_QWORD *)v283 = &off_24ED8D088;
      *(_QWORD *)(v283 + 8) = v288;
      *(_QWORD *)(v283 + 40) = v285;
      *(_QWORD *)(v283 + 48) = v324;
      v291 = v279[5];
      v290 = v279[6];
      v292 = v279[4];
      *(_OWORD *)(v283 + 104) = v279[3];
      *(_OWORD *)(v283 + 120) = v292;
      *(_OWORD *)(v283 + 136) = v291;
      *(_OWORD *)(v283 + 152) = v290;
      v294 = v279[1];
      v293 = v279[2];
      *(_OWORD *)(v283 + 56) = *v279;
      *(_OWORD *)(v283 + 72) = v294;
      *(_OWORD *)(v283 + 88) = v293;
      *(_DWORD *)(v283 + 168) = v286;
      *(_DWORD *)(v283 + 172) = v280;
      *(_DWORD *)(v283 + 176) = v287;
      *(_OWORD *)(v283 + 184) = v289;
      v295 = *((_QWORD *)v282 + 3);
      *(_DWORD *)(v284 + 32) = 1;
      *(_QWORD *)(v284 + 24) = v295;
      if (v295)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v295 + 32))(v295);
        *(_QWORD *)(v284 + 16) = *(_QWORD *)(*(_QWORD *)(v284 + 24) + 16);
        v296 = *(void (***)(physx::Dy::PxsSolverConstraintPostProcessTask *__hidden))v284;
      }
      else
      {
        v296 = &off_24ED8D088;
      }
      v296[5]((physx::Dy::PxsSolverConstraintPostProcessTask *)v284);
      v280 += 8;
      v281 -= 8;
      v182 = v341;
    }
    while (v280 < v272);
  }
LABEL_293:
  v144 = v324;
LABEL_294:
  *(_DWORD *)(v144 + 12024) = -1431655765 * ((unint64_t)(v145 - *(_QWORD *)(v144 + 12016)) >> 4);
  *(_QWORD *)(v144 + 12264) = v145;
  v297 = (_DWORD *)*((_QWORD *)v182 + 6);
  if ((v297[3] & 0x7FFFFFFF) != 0)
  {
    v298 = 0;
    v299 = 0;
    v300 = 0;
    v301 = 0;
    v302 = *(_QWORD *)v297;
    v303 = *(_QWORD *)(*(_QWORD *)v297 + 12288);
    do
    {
      v304 = v182;
      v305 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)v182 + 5) + 744), 88, 0x10u);
      v306 = v305;
      v307 = *((_QWORD *)v304 + 8) + v298;
      v308 = *((_QWORD *)v304 + 5);
      v309 = v299 + (*(_DWORD *)(*((_QWORD *)v304 + 6) + 12) & 0x7FFFFFFF);
      if (v309 >= 0x20)
        v309 = 32;
      v310 = *(_QWORD *)(v308 + 768);
      *(_QWORD *)(v305 + 16) = 0;
      *(_QWORD *)(v305 + 24) = 0;
      *(_DWORD *)(v305 + 32) = 0;
      *(_QWORD *)v305 = &off_24ED8D0F8;
      *(_QWORD *)(v305 + 8) = v310;
      *(_QWORD *)(v305 + 40) = v302;
      *(_QWORD *)(v305 + 48) = v307;
      *(_QWORD *)(v305 + 56) = v303;
      *(_DWORD *)(v305 + 64) = v309;
      *(_QWORD *)(v305 + 72) = v308;
      *(_DWORD *)(v305 + 80) = v300;
      v311 = *((_QWORD *)v304 + 3);
      *(_DWORD *)(v306 + 32) = 1;
      *(_QWORD *)(v306 + 24) = v311;
      if (v311)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v311 + 32))(v311);
        *(_QWORD *)(v306 + 16) = *(_QWORD *)(*(_QWORD *)(v306 + 24) + 16);
        v312 = *(void (***)(physx::Dy::SolverArticulationUpdateTask *__hidden))v306;
      }
      else
      {
        v312 = &off_24ED8D0F8;
      }
      v312[5]((physx::Dy::SolverArticulationUpdateTask *)v306);
      v301 += 32;
      v182 = v341;
      v300 += 2048;
      v299 -= 32;
      v303 += 3072;
      v298 += 256;
    }
    while (v301 < (*(_DWORD *)(*((_QWORD *)v341 + 6) + 12) & 0x7FFFFFFFu));
  }
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>::getName() [T = physx:"
           ":PxsIndexedContactManager]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ConstraintLess,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  size_t v11;
  int v12;
  int i;
  int v14;
  _OWORD *v15;
  __int128 *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  unsigned int v43;
  __int128 *v44;
  unsigned int v45;
  _OWORD *v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unsigned int v77;
  BOOL v78;
  _BYTE v79[4];
  unsigned int v80;
  int v81;
  _QWORD *v82;
  char v83;
  char *v84;
  BOOL v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v8 = (4 * a5);
  v9 = v8 > 0x400;
  v85 = v8 > 0x400;
  if (v8 < 0x401)
  {
    MEMORY[0x24BDAC7A8](a1);
    v10 = &v79[-((v11 + 15) & 0x1FFFFFFF0)];
    bzero(v10, v11);
  }
  else
  {
    v10 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v79, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSort.h", 65);
  }
  v84 = (char *)v10;
  v80 = 0;
  v81 = a5;
  v82 = v10;
  v12 = a2 - 1;
  v83 = 0;
  if (a2 - 1 < 1)
    goto LABEL_45;
  for (i = 0; ; i = *((_DWORD *)v10 + v77 - 2))
  {
    while (1)
    {
      if (v12 <= i)
        goto LABEL_38;
      if ((v12 - i) <= 4)
        break;
      v14 = i + v12;
      if (i + v12 < 0 != __OFADD__(i, v12))
        ++v14;
      v15 = (_OWORD *)(a1 + 48 * (v14 >> 1));
      v16 = (__int128 *)(a1 + 48 * i);
      v17 = *(_DWORD *)(*((_QWORD *)v16 + 4) + 72);
      if (*(_DWORD *)(*((_QWORD *)v15 + 4) + 72) > v17)
      {
        v18 = *v16;
        v19 = v16[1];
        v20 = v16[2];
        v22 = v15[1];
        v21 = v15[2];
        *v16 = *v15;
        v16[1] = v22;
        v16[2] = v21;
        v15[1] = v19;
        v15[2] = v20;
        *v15 = v18;
        v17 = *(_DWORD *)(*((_QWORD *)v16 + 4) + 72);
      }
      v23 = (__int128 *)(a1 + 48 * v12);
      v24 = *(_DWORD *)(*((_QWORD *)v23 + 4) + 72);
      if (v24 > v17)
      {
        v25 = *v16;
        v26 = v16[1];
        v27 = v16[2];
        v29 = v23[1];
        v28 = v23[2];
        *v16 = *v23;
        v16[1] = v29;
        v16[2] = v28;
        v23[1] = v26;
        v23[2] = v27;
        *v23 = v25;
        v24 = *(_DWORD *)(*((_QWORD *)v23 + 4) + 72);
      }
      if (v24 > *(_DWORD *)(*((_QWORD *)v15 + 4) + 72))
      {
        v30 = *v15;
        v31 = v15[1];
        v32 = v15[2];
        v34 = v23[1];
        v33 = v23[2];
        *v15 = *v23;
        v15[1] = v34;
        v15[2] = v33;
        v23[1] = v31;
        v23[2] = v32;
        *v23 = v30;
      }
      v35 = v12 - 1;
      v36 = *v15;
      v37 = v15[1];
      v38 = (_OWORD *)(a1 + 48 * v35);
      v39 = v15[2];
      v41 = v38[1];
      v40 = v38[2];
      *v15 = *v38;
      v15[1] = v41;
      v15[2] = v40;
      v38[1] = v37;
      v38[2] = v39;
      *v38 = v36;
      v42 = i;
      while (1)
      {
        v43 = *(_DWORD *)(*((_QWORD *)v38 + 4) + 72);
        v44 = (__int128 *)(a1 + 48 * v42);
        do
        {
          v45 = *(_DWORD *)(*((_QWORD *)v44 + 10) + 72);
          ++v42;
          v44 += 3;
        }
        while (v45 > v43);
        v46 = (_OWORD *)(a1 + 48 * (int)v35);
        do
        {
          v47 = *(_DWORD *)(*((_QWORD *)v46 - 2) + 72);
          v46 -= 3;
          LODWORD(v35) = v35 - 1;
        }
        while (v43 > v47);
        if (v42 >= (int)v35)
          break;
        v48 = *v44;
        v49 = v44[1];
        v50 = v44[2];
        v52 = v46[1];
        v51 = v46[2];
        *v44 = *v46;
        v44[1] = v52;
        v44[2] = v51;
        v46[1] = v49;
        v46[2] = v50;
        *v46 = v48;
      }
      v53 = *v44;
      v54 = v44[1];
      v55 = v44[2];
      v57 = v38[1];
      v56 = v38[2];
      *v44 = *v38;
      v44[1] = v57;
      v44[2] = v56;
      v38[1] = v54;
      v38[2] = v55;
      *v38 = v53;
      v58 = v80;
      v59 = v81 - 1;
      if (v42 - i >= v12 - v42)
      {
        if (v80 >= v59)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v79);
          v58 = v80;
          v10 = v82;
        }
        v80 = v58 + 1;
        *((_DWORD *)v10 + v58) = v42 + 1;
        v61 = v80++;
        *((_DWORD *)v10 + v61) = v12;
        v12 = v42 - 1;
      }
      else
      {
        if (v80 >= v59)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v79);
          v58 = v80;
          v10 = v82;
        }
        v80 = v58 + 1;
        *((_DWORD *)v10 + v58) = i;
        v60 = v80++;
        *((_DWORD *)v10 + v60) = v42 - 1;
        i = v42 + 1;
      }
    }
    v62 = i;
    v63 = i + 1;
    v64 = a1 + 80 + 48 * i;
    do
    {
      v65 = 0;
      v66 = v62++;
      v67 = (uint64_t *)v64;
      v68 = v66;
      do
      {
        v69 = *v67;
        v67 += 6;
        if (*(_DWORD *)(v69 + 72) > *(_DWORD *)(*(_QWORD *)(a1 + 48 * v68 + 32) + 72))
          v68 = v63 + v65;
        ++v65;
      }
      while (v66 + v65 < v12);
      if (v68 != (_DWORD)v66)
      {
        v70 = (__int128 *)(a1 + 48 * v68);
        v71 = *v70;
        v72 = v70[1];
        v73 = (__int128 *)(a1 + 48 * v66);
        v74 = v70[2];
        v76 = v73[1];
        v75 = v73[2];
        *v70 = *v73;
        v70[1] = v76;
        v70[2] = v75;
        v73[1] = v72;
        v73[2] = v74;
        *v73 = v71;
      }
      ++v63;
      v64 += 48;
    }
    while (v62 != v12);
LABEL_38:
    v77 = v80;
    if (!v80)
      break;
    --v80;
    v12 = *((_DWORD *)v10 + v77 - 1);
    v80 = v77 - 2;
  }
  if (v83)
    v78 = v10 == 0;
  else
    v78 = 1;
  if (!v78)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
    v9 = v85;
  }
LABEL_45:
  if (v9)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v84, v84);
}

uint64_t physx::shdfnd::Array<physx::PxsIndexedContactManager const*,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxsIndexedContactManager *>::getName() [T "
           "= const physx::PxsIndexedContactManager *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxsIndexedContactManager *>::getName() [T "
           "= const physx::PxsIndexedContactManager *]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>::getName() [T = phys"
           "x::Dy::CompoundContactManager]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, (unint64_t)a2 << 6, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[4 * v7];
    v10 = v6;
    do
    {
      v11 = *v8;
      v12 = v8[1];
      v13 = v8[3];
      v10[2] = v8[2];
      v10[3] = v13;
      *v10 = v11;
      v10[1] = v12;
      v10 += 4;
      v8 += 4;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

void physx::Dy::PxsSolverConstraintPostProcessTask::~PxsSolverConstraintPostProcessTask(physx::Dy::PxsSolverConstraintPostProcessTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsSolverConstraintPostProcessTask::getName(physx::Dy::PxsSolverConstraintPostProcessTask *this)
{
  return "PxsDynamics.solverConstraintPostProcess";
}

uint64_t physx::Dy::PxsSolverConstraintPostProcessTask::runInternal(physx::Dy::PxsSolverConstraintPostProcessTask *this)
{
  physx::Dy::PxsSolverConstraintPostProcessTask *v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  char v37;
  __int16 v38;
  __int16 v39;
  int32x2_t v40;
  int v41;
  uint64_t v42;
  float *v43;
  int v44;
  int v45;
  float *v46;
  float *v47;
  __int128 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  float *v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  unsigned int v56;
  float *v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  float *v65;
  float v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  char *v96;
  char *v97;
  float *v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float *v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float *v139;
  float v140;
  float v141;
  float v142;
  float v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float *v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float *v156;
  float v157;
  float v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float *v163;
  float v164;
  float *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  char *v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unsigned int v182;
  float *v183;
  __int128 v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v189;
  pthread_mutex_t ***v190;
  physx::Dy::PxsSolverConstraintPostProcessTask *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  _BYTE v208[4];
  __int128 v209;
  int *v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  _BYTE v220[4];
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  _WORD v226[2];
  int v227;
  _QWORD v228[32];
  int v229;
  unint64_t v230;
  _DWORD *v231;
  unsigned int v232;
  _DWORD v233[64];
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  _WORD v240[8];
  float v241;
  float v242;
  uint64_t v243;

  v1 = this;
  v243 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 44) + *((_DWORD *)this + 43);
  v3 = *((_QWORD *)this + 5);
  v4 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v3 + 400));
  if (!v4)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v6 = "<allocation names disabled>";
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 12343, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v7)
    {
      v4 = (v7 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v4 - 8) = v4 - v7;
    }
    else
    {
      v4 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v4, *(physx::PxcNpMemBlockPool **)(v3 + 408));
  }
  *(_QWORD *)(v4 + 11880) = 0;
  v192 = (_QWORD *)v4;
  *(_DWORD *)(v4 + 11888) = 0;
  v8 = *((unsigned int *)v1 + 43);
  if (v8 >= v2)
    goto LABEL_171;
  v9 = (float *)(v4 + 16);
  v190 = (pthread_mutex_t ***)(v4 + 11872);
  v191 = v1;
  v189 = v2;
  do
  {
    v10 = *((_QWORD *)v1 + 6);
    v11 = *(_QWORD *)(v10 + 12096);
    v12 = *(unsigned __int16 *)(v11 + (v8 << 6) + 4);
    v193 = v11;
    v194 = v8;
    if (*(_WORD *)(v11 + (v8 << 6) + 4))
    {
      v13 = 0;
      v14 = 0;
      v204 = *(_DWORD *)(v11 + (v8 << 6));
      v200 = *((_QWORD *)v1 + 24);
      v202 = *(_QWORD *)(v10 + 12112);
      v198 = *(_QWORD *)(v200 + 32);
      do
      {
        v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * (v204 + v13)) + 24) + 108);
        v16 = (__int128 *)(v198 + 32 * (*(_DWORD *)(v200 + 4 * (v15 & 7)) + (v15 >> 3)));
        v17 = *v16;
        v18 = *((_QWORD *)v16 + 2);
        v19 = *((unsigned __int8 *)v16 + 24);
        v20 = *((unsigned __int8 *)v16 + 25);
        v206 = 0;
        v207 = 0;
        if ((_QWORD)v17)
        {
          v21 = *(unsigned __int8 *)(v17 + 43);
          v22 = v21 & 1;
          v209 = v17;
          v210 = (int *)(v18 + 4 * v19);
          if ((v21 & 2) != 0)
            v23 = 64;
          else
            v23 = 16;
          if ((v21 & 0x80u) == 0)
            v24 = v23;
          else
            v24 = 32;
          v25 = (v21 >> 2) & 1;
          if ((v21 & 0x80u) == 0)
            v26 = (v21 & 2) >> 1;
          else
            v26 = 2;
        }
        else
        {
          v24 = 0;
          v22 = 0;
          v26 = 0;
          v25 = 1;
        }
        v219 = v22;
        v217 = v26;
        v218 = v25;
        v215 = 48;
        v216 = v24;
        v212 = v19;
        v211 = v20;
        if (!v25 && v20)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v31 = *((_QWORD *)&v209 + 1);
          v30 = v209;
          v32 = v210;
          do
          {
            if (v27)
            {
              v33 = *(unsigned __int8 *)(v30 + 41);
              v34 = v33 > v28;
              LODWORD(v35) = (v33 - v28) * v24;
              if (v34)
                v35 = v35;
              else
                v35 = 0;
              v31 += v35;
              v30 += 48;
            }
            v214 = ++v27;
            v213 = 0;
            v28 = *(unsigned __int8 *)(v30 + 41);
            if (*(_BYTE *)(v30 + 41))
            {
              v36 = *(_DWORD *)(v30 + 36);
              v37 = *(_BYTE *)(v30 + 42);
              v38 = *(_WORD *)(v30 + 44);
              v39 = *(_WORD *)(v30 + 46);
              v40 = vrev64_s32(*(int32x2_t *)(v30 + 28));
              v41 = *(unsigned __int8 *)(v30 + 41);
              do
              {
                v32 += v29 != 0;
                if (v29)
                  v42 = v24;
                else
                  v42 = 0;
                v43 = &v9[16 * (unint64_t)v14];
                *((_DWORD *)v43 + 11) = v36;
                *((int32x2_t *)v43 + 7) = v40;
                if (v22)
                  v44 = *v32;
                else
                  v44 = -1;
                v31 += v42;
                *((_DWORD *)v43 + 13) = v44;
                *((_BYTE *)v43 + 48) = v37;
                if (v26)
                {
                  v45 = *(_DWORD *)(v31 + 28);
                  v46 = (float *)(v31 + 16);
                }
                else
                {
                  v46 = (float *)&v206;
                  v45 = 2139095039;
                }
                v47 = &v9[16 * (unint64_t)v14];
                *((_DWORD *)v47 + 7) = v45;
                *((_QWORD *)v47 + 4) = *(_QWORD *)v46;
                v47[10] = v46[2];
                *(_QWORD *)&v48 = *(_QWORD *)(v30 + 16);
                DWORD2(v48) = *(_DWORD *)(v30 + 24);
                HIDWORD(v48) = *(_DWORD *)(v31 + 12);
                *(_OWORD *)v43 = v48;
                *((_QWORD *)v47 + 2) = *(_QWORD *)v31;
                v47[6] = *(float *)(v31 + 8);
                LOWORD(v233[v14]) = v38;
                HIWORD(v233[v14++]) = v39;
                v29 = 1;
                --v41;
              }
              while (v41);
            }
            v213 = v28;
          }
          while (v27 != v20);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    else
    {
      v14 = 0;
    }
    v221 = 0;
    v229 = 0;
    v230 = v4 + 16;
    v231 = v233;
    v232 = v14;
    v222 = *(_QWORD *)(v4 + 16);
    v223 = *(_DWORD *)(v4 + 24);
    v224 = 0;
    v226[0] = 0;
    v227 = 0;
    v225 = *(_DWORD *)(v4 + 28);
    if (v14 < 2)
    {
      v50 = 1;
      v49 = 1;
      goto LABEL_70;
    }
    v49 = 1;
    v50 = 1;
    while (1)
    {
      v51 = &v9[16 * (unint64_t)v50];
      if (v49)
      {
        v52 = (unsigned __int16 *)&v231[v50];
        v55 = *v52;
        v53 = v52 + 1;
        v54 = v55;
        v56 = v49 - 1;
        v57 = (float *)(&v222 + 5 * v56);
        do
        {
          v58 = *((unsigned __int16 *)v57 + 14);
          if (LOWORD(v231[v58]) == v54
            && HIWORD(v231[v58]) == *v53
            && (float)((float)((float)(v57[1] * v51[1]) + (float)(*v57 * *v51)) + (float)(v57[2] * v51[2])) >= 0.995)
          {
            break;
          }
          v57 -= 10;
          --v56;
        }
        while (v56 != -1);
      }
      else
      {
        v56 = -1;
      }
      v59 = v49 - 1;
      if (v56 != v59)
        break;
LABEL_66:
      if (v14 <= ++v50)
        goto LABEL_70;
    }
    v226[20 * v59 + 1] = v50 - v226[20 * v59];
    if (v49 != 32)
    {
      v60 = &v206 + 5 * v49;
      v61 = v60 + 22;
      *((_WORD *)v60 + 102) = v50;
      v60[24] = 0;
      if (v56 == -1)
      {
        v63 = *(_QWORD *)v51;
        v64 = *((_DWORD *)v51 + 2);
        *(float *)&v226[20 * v49 - 2] = v9[16 * (unint64_t)v50 + 3];
        LOWORD(v51) = v49;
      }
      else
      {
        v62 = &v222 + 5 * (int)v56;
        LODWORD(v51) = *((unsigned __int16 *)v62 + 16);
        v62[2] = (uint64_t)v61;
        v63 = *v62;
        v64 = *((_DWORD *)v62 + 2);
        v65 = (float *)(&v222 + 5 * v51);
        v66 = v65[6];
        if (v66 >= v9[16 * (unint64_t)v50 + 3])
          v66 = v9[16 * (unint64_t)v50 + 3];
        *(float *)&v226[20 * v49 - 2] = v66;
        v65[6] = v66;
      }
      v67 = &v206 + 5 * v49;
      *((_WORD *)v67 + 104) = (_WORD)v51;
      *v61 = v63;
      *((_DWORD *)v60 + 46) = v64;
      *((_WORD *)v67 + 105) = v49++;
      goto LABEL_66;
    }
    v49 = 32;
LABEL_70:
    *(_WORD *)&v220[40 * v49 + 2] = v50 - *(_WORD *)&v220[40 * v49];
    v68 = v49;
    if (!v49)
    {
      physx::shdfnd::sort<physx::Dy::ContactPatch *,physx::Dy::SortBoundsPredicateManifold,physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>((char *)v228, 0);
      v167 = 0;
      v221 = 0;
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      goto LABEL_157;
    }
    v69 = &v222;
    v70 = (uint64_t **)v228;
    v71 = v68;
    do
    {
      *v70++ = v69;
      v69 += 5;
      --v71;
    }
    while (v71);
    v197 = v68;
    physx::shdfnd::sort<physx::Dy::ContactPatch *,physx::Dy::SortBoundsPredicateManifold,physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>((char *)v228, v68);
    v72 = v197;
    v73 = 0;
    v74 = 0;
    v75 = v230;
    v76 = v230 + 24;
    v195 = v230 + 12;
    v196 = v230 + 24;
    while (2)
    {
      v77 = v228[v73];
      if (*(unsigned __int16 *)(v77 + 32) != *(unsigned __int16 *)(v77 + 34))
        goto LABEL_145;
      if (v74 == 6)
      {
        v221 = 6;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        goto LABEL_150;
      }
      v78 = 0;
      v79 = v228[v73];
      do
      {
        v78 += *(unsigned __int16 *)(v79 + 30);
        v79 = *(_QWORD *)(v79 + 16);
      }
      while (v79);
      v80 = v74;
      v81 = v74 + 1;
      v82 = (unsigned int *)&v206 + 7 * v74;
      if (v78 > 6)
      {
        v87 = 0;
        v88 = 0.0;
        v89 = v228[v73];
        do
        {
          v90 = *(unsigned __int16 *)(v89 + 30);
          if (*(_WORD *)(v89 + 30))
          {
            v91 = *(unsigned __int16 *)(v89 + 28);
            v92 = (float *)(v230 + 24 + (v91 << 6));
            do
            {
              v93 = (float)(*(v92 - 1) * *(v92 - 1)) + (float)(*(v92 - 2) * *(v92 - 2));
              v94 = *v92;
              v92 += 16;
              v95 = v93 + (float)(v94 * v94);
              if (v88 < v95)
              {
                v87 = v91;
                v88 = v95;
              }
              LODWORD(v91) = v91 + 1;
              --v90;
            }
            while (v90);
          }
          v89 = *(_QWORD *)(v89 + 16);
        }
        while (v89);
        v96 = (char *)&v206 + 28 * v74;
        *((_DWORD *)v96 + 1) = v87;
        v97 = v96 + 4;
        v98 = (float *)(v75 + ((unint64_t)v87 << 6));
        v99 = v98[4];
        v100 = v98[5];
        v101 = v98[6];
        v102 = 0.0;
        v103 = v77;
        do
        {
          v104 = *(unsigned __int16 *)(v103 + 30);
          if (*(_WORD *)(v103 + 30))
          {
            v105 = *(unsigned __int16 *)(v103 + 28);
            v106 = (float *)(v76 + (v105 << 6));
            do
            {
              v107 = v99 - *(v106 - 2);
              v108 = v100 - *(v106 - 1);
              v109 = *v106;
              v106 += 16;
              v110 = (float)((float)(v108 * v108) + (float)(v107 * v107))
                   + (float)((float)(v101 - v109) * (float)(v101 - v109));
              if (v110 > v102)
              {
                v87 = v105;
                v102 = v110;
              }
              LODWORD(v105) = v105 + 1;
              --v104;
            }
            while (v104);
          }
          v103 = *(_QWORD *)(v103 + 16);
        }
        while (v103);
        v111 = (float *)(v75 + ((unint64_t)v87 << 6));
        v112 = v111[4];
        v113 = v111[5];
        v114 = v111[6];
        *((_DWORD *)&v206 + 7 * v80 + 2) = v87;
        v115 = v99 - v112;
        v116 = v100 - v113;
        v117 = v101 - v114;
        v119 = *(float *)(v77 + 4);
        v118 = *(float *)(v77 + 8);
        v120 = (float)(v116 * v118) - (float)(v117 * v119);
        v121 = (float)(v117 * *(float *)v77) - (float)(v115 * v118);
        v122 = (float)(v115 * v119) - (float)(v116 * *(float *)v77);
        v123 = 0.0;
        v124 = v77;
        do
        {
          v125 = *(unsigned __int16 *)(v124 + 30);
          if (*(_WORD *)(v124 + 30))
          {
            v126 = *(unsigned __int16 *)(v124 + 28);
            v127 = (float *)(v76 + (v126 << 6));
            do
            {
              v128 = *(v127 - 2) - v99;
              v129 = *(v127 - 1) - v100;
              v130 = *v127;
              v127 += 16;
              v131 = (float)((float)(v121 * v129) + (float)(v128 * v120)) + (float)((float)(v130 - v101) * v122);
              if (v131 > v123)
              {
                v87 = v126;
                v123 = v131;
              }
              LODWORD(v126) = v126 + 1;
              --v125;
            }
            while (v125);
          }
          v124 = *(_QWORD *)(v124 + 16);
        }
        while (v124);
        *(_DWORD *)&v208[28 * v80] = v87;
        v132 = -v120;
        v133 = -v121;
        v134 = -v122;
        v135 = 0.0;
        v136 = v77;
        do
        {
          v137 = *(unsigned __int16 *)(v136 + 30);
          if (*(_WORD *)(v136 + 30))
          {
            v138 = *(unsigned __int16 *)(v136 + 28);
            v139 = (float *)(v76 + (v138 << 6));
            do
            {
              v140 = *(v139 - 2) - v99;
              v141 = *(v139 - 1) - v100;
              v142 = *v139;
              v139 += 16;
              v143 = (float)((float)(v141 * v133) + (float)(v140 * v132)) + (float)((float)(v142 - v101) * v134);
              if (v143 > v135)
              {
                v87 = v138;
                v135 = v143;
              }
              LODWORD(v138) = v138 + 1;
              --v137;
            }
            while (v137);
          }
          v136 = *(_QWORD *)(v136 + 16);
        }
        while (v136);
        v205 = v73;
        *((_DWORD *)&v209 + 7 * v80) = v87;
        v199 = 28 * v80;
        v238 = *(_OWORD *)((char *)&v206 + 28 * v80 + 4);
        do
        {
          *(float *)((char *)v240 + v136) = *(float *)(v75 + ((unint64_t)*(unsigned int *)&v97[v136] << 6) + 12)
                                          + -0.001;
          v136 += 4;
        }
        while (v136 != 16);
        v144 = v77;
        do
        {
          v145 = *(unsigned __int16 *)(v144 + 30);
          if (*(_WORD *)(v144 + 30))
          {
            v146 = 0;
            v147 = *(unsigned __int16 *)(v144 + 28);
            do
            {
              v148 = 0;
              LODWORD(v149) = 0;
              v150 = v146 + v147;
              v151 = (float *)(v75 + ((v146 + v147) << 6));
              v152 = v151[4];
              v153 = v151[5];
              v154 = v151[6];
              v155 = 3.4028e38;
              do
              {
                v156 = (float *)(v75 + ((unint64_t)*(unsigned int *)&v97[4 * v148] << 6));
                v157 = v156[6] - v154;
                v158 = (float)(v156[5] - v153) * (float)(v156[5] - v153);
                if (v155 <= (float)((float)(v158 + (float)((float)(v156[4] - v152) * (float)(v156[4] - v152)))
                                   + (float)(v157 * v157)))
                {
                  v149 = v149;
                }
                else
                {
                  v155 = (float)(v158 + (float)((float)(v156[4] - v152) * (float)(v156[4] - v152)))
                       + (float)(v157 * v157);
                  v149 = v148;
                }
                ++v148;
              }
              while (v148 != 4);
              v159 = *(float *)(v75 + (v150 << 6) + 12);
              if (*(float *)&v240[2 * v149] > v159)
              {
                *((_DWORD *)&v238 + v149) = v150;
                *(float *)&v240[2 * v149] = v159;
              }
              ++v146;
            }
            while (v146 != v145);
          }
          v144 = *(_QWORD *)(v144 + 16);
        }
        while (v144);
        v201 = v82;
        v203 = v81;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        do
        {
          v160 = *(unsigned int *)((char *)&v238 + v144);
          if (v160 <= 0x3F)
          {
            *(_DWORD *)&v97[v144] = v160;
            *((_BYTE *)&v234 + v160) = 1;
          }
          v144 += 4;
        }
        while (v144 != 16);
        v239 = 0;
        memset_pattern16(&v241, &unk_2261A7270, 8uLL);
        v72 = v197;
        v73 = v205;
        v76 = v196;
        while (1)
        {
          v161 = *(unsigned __int16 *)(v77 + 30);
          if (*(_WORD *)(v77 + 30))
            break;
LABEL_143:
          v77 = *(_QWORD *)(v77 + 16);
          if (!v77)
          {
            *(_QWORD *)((char *)&v209 + v199 + 4) = v239;
            *v201 = 6;
            v74 = v203;
            goto LABEL_145;
          }
        }
        v162 = *(unsigned __int16 *)(v77 + 28);
        v163 = (float *)(v195 + (v162 << 6));
        while (2)
        {
          if (!*((_BYTE *)&v234 + v162))
          {
            v164 = *v163;
            if (*v163 < v241)
            {
              v242 = v241;
              HIDWORD(v239) = v239;
              v165 = &v241;
              v166 = 4;
              goto LABEL_141;
            }
            if (v164 < v242)
            {
              v165 = &v242;
              v166 = 5;
LABEL_141:
              *v165 = v164;
              *((_DWORD *)&v238 + v166) = v162;
            }
          }
          ++v162;
          v163 += 16;
          if (!--v161)
            goto LABEL_143;
          continue;
        }
      }
      v83 = 0;
      do
      {
        v84 = *(unsigned __int16 *)(v77 + 30);
        if (*(_WORD *)(v77 + 30))
        {
          v85 = *(unsigned __int16 *)(v77 + 28);
          do
          {
            v86 = (v83 + 1);
            *((_DWORD *)&v206 + 7 * v80 + v83 + 1) = v85++;
            LODWORD(v83) = v83 + 1;
            --v84;
          }
          while (v84);
        }
        else
        {
          v86 = v83;
        }
        v77 = *(_QWORD *)(v77 + 16);
        v83 = v86;
      }
      while (v77);
      *v82 = v78;
      v74 = v81;
LABEL_145:
      if (++v73 != v72)
        continue;
      break;
    }
    v221 = v74;
    v236 = 0u;
    v237 = 0u;
    v234 = 0u;
    v235 = 0u;
    if (!v74)
    {
      v167 = 0;
      goto LABEL_157;
    }
LABEL_150:
    v168 = 0;
    v169 = 0;
    v170 = (char *)&v206 + 4;
    do
    {
      v171 = *((unsigned int *)&v206 + 7 * v168);
      v172 = (unsigned int *)v170;
      v173 = v171;
      if ((_DWORD)v171)
      {
        do
        {
          v174 = *v172++;
          *((_BYTE *)&v234 + v174) = 1;
          --v173;
        }
        while (v173);
        v169 += v171;
      }
      ++v168;
      v170 += 28;
    }
    while (v168 != v74);
    v167 = (2 * v169 + 15) & 0xFFFFFFF0;
    if (v167 > 0x4000)
    {
      v175 = physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(*v190, v167);
      goto LABEL_161;
    }
LABEL_157:
    v176 = *(_QWORD *)(v4 + 11880);
    if (v176 && (v177 = *(unsigned int *)(v4 + 11888), v177 + v167 <= 0x4000))
    {
      v175 = v176 + v177;
      *(_DWORD *)(v4 + 11888) = v177 + v167;
    }
    else
    {
      v175 = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)(v4 + 11872), *((_QWORD *)v191 + 6) + 11848, (_DWORD *)(*(_QWORD *)(v4 + 11872) + 244), (int *)(*(_QWORD *)(v4 + 11872) + 240), 1);
      *(_QWORD *)(v4 + 11880) = v175;
      *(_DWORD *)(v4 + 11888) = v167;
    }
LABEL_161:
    v178 = v193 + (v194 << 6);
    *(_QWORD *)(v178 + 56) = v175;
    if (v14)
    {
      v179 = 0;
      v180 = 0;
      v181 = v4 + 60;
      v1 = v191;
      v182 = v189;
      do
      {
        if (*((_BYTE *)&v234 + v179))
        {
          if (v179 != v180)
          {
            v183 = &v9[16 * (unint64_t)v180];
            *(_OWORD *)v183 = *(_OWORD *)(v181 - 44);
            *((_OWORD *)v183 + 1) = *(_OWORD *)(v181 - 28);
            *((_QWORD *)v183 + 4) = *(_QWORD *)(v181 - 12);
            v183[10] = *(float *)(v181 - 4);
            v184 = *(_OWORD *)v181;
            v183[15] = *(float *)(v181 + 16);
            *(_OWORD *)(v183 + 11) = v184;
            v233[v180] = v233[v179];
          }
          *(_WORD *)(v175 + 2 * v180++) = v179;
        }
        ++v179;
        v181 += 64;
      }
      while (v14 != v179);
    }
    else
    {
      v180 = 0;
      v1 = v191;
      v182 = v189;
    }
    v185 = (_QWORD *)*((_QWORD *)v1 + 23);
    v186 = *(_QWORD *)(*((_QWORD *)v1 + 24) + 32)
         + 32
         * (*(_DWORD *)(*((_QWORD *)v1 + 24) + 4 * (*(_DWORD *)(*(_QWORD *)(v178 + 8) + 76) & 7))
                        + (*(_DWORD *)(*(_QWORD *)(v178 + 8) + 76) >> 3));
    v240[0] = 0;
    physx::writeCompressedContact(v9, v180, 0, (_BYTE *)(v186 + 24), (_QWORD *)v186, (float *)(v186 + 8), v240, (uint64_t *)(v186 + 16), 4 * v180, v185, 0, 0, (unsigned __int16 *)v233, (_BYTE *)(v186 + 25), 0, *((_QWORD *)v1 + 6) + 11848, (uint64_t)v190, 0, 0,
      0,
      0,
      0);
    v8 = v194 + 1;
  }
  while (v182 != (_DWORD)v194 + 1);
LABEL_171:
  v187 = *(_QWORD *)(*((_QWORD *)v1 + 5) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v187 + 8));
  *v192 = *(_QWORD *)v187;
  *(_QWORD *)v187 = v192;
  return pthread_mutex_unlock((pthread_mutex_t *)(v187 + 8));
}

char *physx::shdfnd::sort<physx::Dy::ContactPatch *,physx::Dy::SortBoundsPredicateManifold,physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>(char *result, int a2)
{
  char *v2;
  int v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  _BYTE v36[4];
  uint64_t v37;
  _OWORD *v38;
  char v39;
  void *v40;
  char v41;
  _OWORD v42[8];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v40 = v42;
  v37 = 0x2000000000;
  v38 = v42;
  v39 = 0;
  if (a2 < 2)
    return result;
  v2 = result;
  v3 = 0;
  v4 = a2 - 1;
  v5 = result + 8;
  v6 = v42;
  memset(v42, 0, sizeof(v42));
  while (1)
  {
    while (1)
    {
      if (v4 <= v3)
        goto LABEL_36;
      if ((v4 - v3) <= 4)
        break;
      v7 = v3 + v4;
      if (v3 + v4 < 0 != __OFADD__(v3, v4))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v2[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v2[8 * v3];
      v11 = *(float *)(v10 + 24);
      if (*(float *)(v9 + 24) < v11)
      {
        *(_QWORD *)&v2[8 * v3] = v9;
        *(_QWORD *)&v2[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v2[8 * v3];
        v11 = *(float *)(v10 + 24);
      }
      v12 = *(_QWORD *)&v2[8 * v4];
      if (*(float *)(v12 + 24) >= v11)
      {
        v11 = *(float *)(v12 + 24);
        v10 = *(_QWORD *)&v2[8 * v4];
      }
      else
      {
        *(_QWORD *)&v2[8 * v3] = v12;
        *(_QWORD *)&v2[8 * v4] = v10;
        v9 = *(_QWORD *)&v2[8 * v8];
      }
      if (v11 < *(float *)(v9 + 24))
      {
        *(_QWORD *)&v2[8 * v8] = v10;
        *(_QWORD *)&v2[8 * v4] = v9;
        v9 = *(_QWORD *)&v2[8 * v8];
      }
      v13 = v4 - 1;
      *(_QWORD *)&v2[8 * v8] = *(_QWORD *)&v2[8 * v13];
      *(_QWORD *)&v2[8 * v13] = v9;
      v14 = v3;
      v15 = v4 - 1;
      while (1)
      {
        v16 = *(float *)(v9 + 24);
        v17 = &v2[8 * v14];
        do
        {
          v19 = *((_QWORD *)v17 + 1);
          v17 += 8;
          v18 = v19;
          ++v14;
        }
        while (*(float *)(v19 + 24) < v16);
        v20 = &v2[8 * v15];
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          v21 = v22;
          --v15;
        }
        while (v16 < *(float *)(v22 + 24));
        if (v14 >= v15)
          break;
        *(_QWORD *)v17 = v21;
        *(_QWORD *)v20 = v18;
        v9 = *(_QWORD *)&v2[8 * v13];
      }
      *(_QWORD *)v17 = v9;
      *(_QWORD *)&v2[8 * v13] = v18;
      v23 = v37;
      v24 = HIDWORD(v37) - 1;
      if (v14 - v3 >= v4 - v14)
      {
        if (v37 >= v24)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>::grow((uint64_t)v36);
          v23 = v37;
          v6 = v38;
        }
        LODWORD(v37) = v23 + 1;
        *((_DWORD *)v6 + v23) = v14 + 1;
        v26 = v37;
        LODWORD(v37) = v37 + 1;
        *((_DWORD *)v6 + v26) = v4;
        v4 = v14 - 1;
      }
      else
      {
        if (v37 >= v24)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>::grow((uint64_t)v36);
          v23 = v37;
          v6 = v38;
        }
        LODWORD(v37) = v23 + 1;
        *((_DWORD *)v6 + v23) = v3;
        v25 = v37;
        LODWORD(v37) = v37 + 1;
        *((_DWORD *)v6 + v25) = v14 - 1;
        v3 = v14 + 1;
      }
    }
    v27 = v3;
    v28 = v3 + 1;
    v29 = &v5[8 * v3];
    do
    {
      v30 = 0;
      v31 = v27++;
      v32 = v31;
      do
      {
        if (*(float *)(*(_QWORD *)&v29[8 * v30] + 24) < *(float *)(*(_QWORD *)&v2[8 * v32] + 24))
          v32 = v28 + v30;
        ++v30;
      }
      while (v31 + v30 < v4);
      if (v32 != (_DWORD)v31)
      {
        v33 = *(_QWORD *)&v2[8 * v32];
        *(_QWORD *)&v2[8 * v32] = *(_QWORD *)&v2[8 * v31];
        *(_QWORD *)&v2[8 * v31] = v33;
      }
      ++v28;
      v29 += 8;
    }
    while (v27 != v4);
LABEL_36:
    v34 = v37;
    if (!(_DWORD)v37)
      break;
    LODWORD(v37) = v37 - 1;
    v4 = *((_DWORD *)v6 + (v34 - 1));
    LODWORD(v37) = v34 - 2;
    v3 = *((_DWORD *)v6 + (v34 - 2));
  }
  if (v39)
    v35 = v6 == 0;
  else
    v35 = 1;
  if (!v35)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v41)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v40, (char *)v40);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>::getName() [T = physx::Dy::ContactPatch *]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void physx::Dy::SolverArticulationUpdateTask::~SolverArticulationUpdateTask(physx::Dy::SolverArticulationUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SolverArticulationUpdateTask::getName(physx::Dy::SolverArticulationUpdateTask *this)
{
  return "SolverArticulationUpdateTask";
}

uint64_t physx::Dy::SolverArticulationUpdateTask::runInternal(physx::Dy::SolverArticulationUpdateTask *this)
{
  physx::Dy::SolverArticulationUpdateTask *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(float);
  physx::Dy::SolverArticulationUpdateTask *v31;
  unint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v57;
  unint64_t v58;

  v1 = this;
  v2 = *((_QWORD *)this + 9);
  v3 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 400));
  if (!v3)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v5 = "<allocation names disabled>";
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 12343, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v3 - 8) = v3 - v6;
    }
    else
    {
      v3 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v3, *(physx::PxcNpMemBlockPool **)(v2 + 408));
  }
  *(_QWORD *)(v3 + 11880) = 0;
  *(_DWORD *)(v3 + 11888) = 0;
  if (*((_DWORD *)v1 + 16))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v1 + 7);
    do
    {
      v11 = *(_OWORD **)(*((_QWORD *)v1 + 6) + 8 * v8);
      v12 = (_OWORD *)(v10 + v7);
      v13 = v11[8];
      v15 = v11[5];
      v14 = v11[6];
      v12[4] = v11[7];
      v12[5] = v13;
      v12[2] = v15;
      v12[3] = v14;
      v16 = v11[4];
      *v12 = v11[3];
      v12[1] = v16;
      v10 = *((_QWORD *)v1 + 7);
      if (v9 <= *(unsigned __int8 *)(v10 + v7 + 92))
        v9 = *(unsigned __int8 *)(v10 + v7 + 92);
      ++v8;
      v7 += 96;
    }
    while (v8 < *((unsigned int *)v1 + 16));
    *(_DWORD *)(v3 + 12168) = 0;
    if ((*(_DWORD *)(v3 + 12172) & 0x7FFFFFFFu) < v9)
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12160, v9);
    *(_DWORD *)(v3 + 12168) = v9;
    v17 = v3 + 12176;
    *(_DWORD *)(v3 + 12184) = 0;
    if ((*(_DWORD *)(v3 + 12188) & 0x7FFFFFFFu) < v9)
    {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12176, v9);
      v17 = v3 + 12176;
    }
  }
  else
  {
    v9 = 0;
    *(_DWORD *)(v3 + 12168) = 0;
    v17 = v3 + 12176;
  }
  *(_DWORD *)(v3 + 12184) = v9;
  v18 = *((_DWORD *)v1 + 20);
  v19 = *((_QWORD *)v1 + 5);
  v20 = *((unsigned int *)v1 + 16);
  if ((_DWORD)v20)
  {
    v57 = v9;
    v58 = v3;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = *((_QWORD *)v1 + 7);
    do
    {
      v28 = *(_QWORD *)(*((_QWORD *)v1 + 6) + 8 * v22);
      v29 = *((_QWORD *)v1 + 9);
      v30 = (uint64_t (*)(float))physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocities[*(unsigned int *)(*(_QWORD *)(v27 + v21) + 40)];
      if (v30)
      {
        v31 = v1;
        v32 = v17;
        v33 = v30(*(float *)(v29 + 88));
        v17 = v32;
        v1 = v31;
        v27 = *((_QWORD *)v31 + 7);
        v20 = *((unsigned int *)v31 + 16);
      }
      else
      {
        v33 = 0;
      }
      *(_BYTE *)(v27 + v21 + 93) = v33;
      if (v25 <= *(unsigned __int16 *)(v27 + v21 + 88))
        v25 = *(unsigned __int16 *)(v27 + v21 + 88);
      if (v26 <= *(unsigned __int16 *)(v27 + v21 + 90))
        v26 = *(unsigned __int16 *)(v27 + v21 + 90);
      v34 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 112) + 12);
      if (v34 >> 8 > v23)
        v23 = v34 >> 8;
      if (*(_WORD *)(*(_QWORD *)(v28 + 112) + 12) > v24)
        v24 = *(_WORD *)(*(_QWORD *)(v28 + 112) + 12);
      v18 += 64;
      ++v22;
      v21 += 96;
    }
    while (v22 < v20);
    v19 = *((_QWORD *)v1 + 5);
    v3 = v58;
    v9 = v57;
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
  }
  v35 = (unsigned int *)(v19 + 12240);
LABEL_36:
  v36 = *v35;
  if ((int)*v35 <= (int)v24)
    v37 = v24;
  else
    v37 = *v35;
  do
  {
    v38 = __ldaxr(v35);
    if (v38 != v36)
    {
      __clrex();
      goto LABEL_36;
    }
  }
  while (__stlxr(v37, v35));
  v39 = (unsigned int *)(*((_QWORD *)v1 + 5) + 12244);
LABEL_43:
  v40 = *v39;
  if ((int)*v39 <= (int)v23)
    v41 = v23;
  else
    v41 = *v39;
  do
  {
    v42 = __ldaxr(v39);
    if (v42 != v40)
    {
      __clrex();
      goto LABEL_43;
    }
  }
  while (__stlxr(v41, v39));
  v43 = (unsigned int *)(*((_QWORD *)v1 + 5) + 12248);
LABEL_50:
  v44 = *v43;
  if ((int)*v43 <= (int)v25)
    v45 = v25;
  else
    v45 = *v43;
  do
  {
    v46 = __ldaxr(v43);
    if (v46 != v44)
    {
      __clrex();
      goto LABEL_50;
    }
  }
  while (__stlxr(v45, v43));
  v47 = (unsigned int *)(*((_QWORD *)v1 + 5) + 12252);
LABEL_57:
  v48 = *v47;
  if ((int)*v47 <= (int)v26)
    v49 = v26;
  else
    v49 = *v47;
  do
  {
    v50 = __ldaxr(v47);
    if (v50 != v48)
    {
      __clrex();
      goto LABEL_57;
    }
  }
  while (__stlxr(v49, v47));
  v51 = (unsigned int *)(*((_QWORD *)v1 + 5) + 12256);
LABEL_64:
  v52 = *v51;
  if ((int)*v51 <= (int)v9)
    v53 = v9;
  else
    v53 = *v51;
  do
  {
    v54 = __ldaxr(v51);
    if (v54 != v52)
    {
      __clrex();
      goto LABEL_64;
    }
  }
  while (__stlxr(v53, v51));
  v55 = *(_QWORD *)(*((_QWORD *)v1 + 9) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v55 + 8));
  *(_QWORD *)v3 = *(_QWORD *)v55;
  *(_QWORD *)v55 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v55 + 8));
}

void physx::Dy::PxsSolverEndTask::~PxsSolverEndTask(physx::Dy::PxsSolverEndTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsSolverEndTask::getName(physx::Dy::PxsSolverEndTask *this)
{
  return "PxsDynamics.solverEnd";
}

uint64_t physx::Dy::PxsSolverEndTask::runInternal(physx::Dy::PxsSolverEndTask *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v2 = **((_QWORD **)this + 6);
  *(_DWORD *)(v2 + 12316) += *(_DWORD *)(v2 + 12212);
  v3 = *(unsigned int *)(v2 + 12104);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 12096);
    do
    {
      v6 = (int *)(v5 + (v4 << 6));
      v7 = *((_QWORD *)v6 + 2);
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(unsigned __int8 *)(v7 + 24);
      *(_OWORD *)v7 = *(_OWORD *)(v6 + 6);
      *(_BYTE *)(v7 + 24) = *((_BYTE *)v6 + 40);
      *(_WORD *)(v7 + 25) = *(_WORD *)((char *)v6 + 41);
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 6);
      v10 = *((unsigned __int16 *)v6 + 2);
      if (v10 >= 2)
      {
        v11 = *(_QWORD *)(v2 + 12112);
        v12 = *((_QWORD *)v6 + 1);
        v13 = v10 - 1;
        v14 = *v6 + 1;
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * v14) + 24);
          *(_QWORD *)(v15 + 72) = *(_QWORD *)(v12 + 40);
          *(_BYTE *)(v15 + 82) = *(_BYTE *)(v12 + 50);
          ++v14;
          --v13;
        }
        while (v13);
      }
      if (v8)
        v16 = (_DWORD)v9 == 0;
      else
        v16 = 1;
      if (!v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = *v6;
        v21 = *(_QWORD *)(v5 + (v4 << 6) + 56);
        v22 = *(_QWORD *)(v2 + 12112);
        v23 = *((_QWORD *)this + 22);
        v24 = *(_QWORD *)(v23 + 32);
        do
        {
          v25 = *(unsigned __int16 *)(v21 + 2 * v17);
LABEL_12:
          v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8 * v20) + 24) + 108);
          v27 = *(_DWORD *)(v23 + 4 * (v26 & 7)) + (v26 >> 3);
          while (1)
          {
            v28 = v25 - v19;
            v29 = v25 <= v19 ? 0 : *(unsigned __int8 *)(v24 + 32 * v27 + 24);
            if (v25 <= v19 && *(_BYTE *)(v24 + 32 * v27 + 24))
              break;
            if (v28 >= v29 - v18)
              v28 = v29 - v18;
            v19 += v28;
            v18 += v28;
            if (v18 == v29)
            {
              v18 = 0;
              ++v20;
              goto LABEL_12;
            }
          }
          v30 = *(_QWORD *)(v24 + 32 * v27 + 16);
          if (v30)
            *(_DWORD *)(v30 + 4 * v18) = *(_DWORD *)(v8 + 4 * v17);
          ++v17;
        }
        while (v17 != v9);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(v2 + 12104) = 0;
  physx::PxcNpMemBlockPool::releaseConstraintBlocks(*(_QWORD *)(v2 + 11864), v2 + 11848);
  v31 = *(_QWORD *)(*((_QWORD *)this + 5) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v31 + 8));
  *(_QWORD *)v2 = *(_QWORD *)v31;
  *(_QWORD *)v31 = v2;
  return pthread_mutex_unlock((pthread_mutex_t *)(v31 + 8));
}

void physx::Dy::PxsSolverSetupSolveTask::~PxsSolverSetupSolveTask(physx::Dy::PxsSolverSetupSolveTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsSolverSetupSolveTask::getName(physx::Dy::PxsSolverSetupSolveTask *this)
{
  return "PxsDynamics.solverSetupSolve";
}

void physx::Dy::PxsSolverSetupSolveTask::runInternal(physx::Dy::PxsSolverSetupSolveTask *this)
{
  physx::Dy::PxsSolverSetupSolveTask *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (**v89)(physx::Dy::PxsParallelSolverTask *__hidden);
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  float *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v106;
  uint64_t v111;
  uint64_t v115;
  physx::Dy::PxsSolverSetupSolveTask *v118;
  uint64_t v119;
  float v120;
  __int16 v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float32x2_t v142;
  float v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  BOOL v150;
  float v151;
  float v152;
  __float2 v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v159;
  float32x4_t v160;
  int32x4_t v161;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  unsigned int v186;
  float v187;
  int v188;
  float v189;
  float v190;
  unsigned int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v204;
  float v205;
  float v206;
  float v207;
  float32x2_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  __int16 *v238;
  char v239;
  int v240;
  __int16 v241;
  float v242;
  char v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  uint64_t v256;
  unint64_t v257;
  void (*v258)(float);
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  physx::Dy::PxsSolverSetupSolveTask *v262;
  __int128 v263;
  uint64_t v264;
  float v265;
  int v266;

  v1 = this;
  v2 = *((_QWORD *)this + 5);
  v3 = **((_QWORD **)this + 6);
  v4 = *(_QWORD *)(v3 + 12032);
  v261 = *(_QWORD *)(v2 + 544) + 32 * *((unsigned int *)this + 42);
  v5 = *(_QWORD *)(v2 + 560);
  if (*(_DWORD *)(v3 + 11928))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(v3 + 11920);
    v12 = *(_QWORD *)(v3 + 12032);
    do
    {
      v13 = *(_DWORD *)(v11 + 4 * v6) + v10;
      if (v10 >= v13)
      {
        v14 = 0;
        v10 += *(_DWORD *)(v11 + 4 * v6);
      }
      else
      {
        v14 = 0;
        v15 = v10;
        do
        {
          v16 = *(_WORD *)(*(_QWORD *)(v3 + 12040) + 8 * v15 + 4);
          if (v16)
          {
            v17 = v16 + v8;
            v18 = v7;
            do
            {
              v19 = (__int128 *)(v4 + 48 * v8);
              if (*((_WORD *)v19 + 15))
              {
                if (v8 != (_DWORD)v18)
                {
                  v20 = (_OWORD *)(v4 + 48 * v18);
                  v21 = *v19;
                  v22 = v19[2];
                  v20[1] = v19[1];
                  v20[2] = v22;
                  *v20 = v21;
                }
                v18 = (v18 + 1);
                v12 += 48;
              }
              else
              {
                --v16;
              }
              ++v8;
            }
            while (v17 != (unsigned __int16)v8);
            if (v16)
            {
              v23 = *(_QWORD *)(v3 + 12040);
              v24 = v23 + 8 * v9;
              *(_DWORD *)v24 = v7;
              *(_WORD *)(v24 + 4) = v16;
              v25 = **(unsigned __int8 **)(v4 + 48 * v7 + 32);
              if (v25 == 5)
              {
                if (v16 < 2u)
                {
                  LOBYTE(v25) = 5;
                }
                else
                {
                  v26 = v16 - 1;
                  v27 = v7 + 1;
                  LOBYTE(v25) = 5;
                  do
                  {
                    if (**(_BYTE **)(v4 + 48 * v27 + 32) == 1)
                      LOBYTE(v25) = 1;
                    ++v27;
                    --v26;
                  }
                  while (v26);
                }
              }
              *(_WORD *)(v23 + 8 * v9++ + 6) = v25;
              ++v14;
            }
            v7 = v18;
          }
          ++v15;
        }
        while (v15 != v13);
        v11 = *(_QWORD *)(v3 + 11920);
        v10 += *(_DWORD *)(v11 + 4 * v6);
      }
      *(_DWORD *)(v11 + 4 * v6++) = v14;
    }
    while (v6 < *(unsigned int *)(v3 + 11928));
    v2 = *((_QWORD *)v1 + 5);
  }
  else
  {
    v9 = 0;
    LODWORD(v7) = 0;
    v12 = *(_QWORD *)(v3 + 12032);
  }
  v28 = -1431655765 * ((unint64_t)(v12 - v4) >> 4);
  *(_DWORD *)(v3 + 11896) = v28;
  *(_DWORD *)(v3 + 12048) = v9;
  *(_DWORD *)(v3 + 11904) = v7 - v28;
  *(_DWORD *)(v3 + 12200) = v7;
  if (*(_DWORD *)(v2 + 148))
  {
    v262 = v1;
    v29 = *(_QWORD *)(v3 + 12064);
    *(_DWORD *)(v3 + 12088) = 0;
    if ((*(_DWORD *)(v3 + 12092) & 0x7FFFFFFFu) < v9)
      physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate(v3 + 12080, v9);
    v30 = *(_QWORD *)(v3 + 12080);
    v264 = v3 + 11936;
    *(_DWORD *)(v3 + 11944) = 0;
    v31 = *(_DWORD *)(v3 + 11932) & 0x7FFFFFFF;
    if ((*(_DWORD *)(v3 + 11948) & 0x7FFFFFFFu) < v31)
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v264, v31);
    v259 = v29;
    v260 = v5;
    if (*(_DWORD *)(v3 + 11928))
    {
      v32 = 0;
      v33 = 0;
      LODWORD(v34) = 0;
      v35 = 0;
      do
      {
        v36 = (*(_DWORD *)(*(_QWORD *)(v3 + 11920) + 4 * v32) + v34);
        if (v34 >= v36)
        {
          v37 = v35;
        }
        else
        {
          v34 = v34;
          v37 = v35;
          do
          {
            v38 = (unsigned int *)(*(_QWORD *)(v3 + 12040) + 8 * v34);
            v39 = *((unsigned __int16 *)v38 + 3);
            if (v39 <= 8)
            {
              v40 = *((unsigned __int16 *)v38 + 2);
              v41 = 1 << v39;
              if ((v41 & 0x2A) != 0)
              {
                if (*((_WORD *)v38 + 2))
                {
                  v42 = 0;
                  v43 = 0;
                  do
                  {
                    v44 = v29 + v42;
                    v45 = v4 + 48 * (v43 + *v38);
                    v46 = *(_QWORD *)(v45 + 32);
                    v47 = *(unsigned __int16 *)(v46 + 2);
                    *(_WORD *)(v44 + 30) = (16 * *(unsigned __int16 *)(v45 + 30) - v47) >> 4;
                    *(_QWORD *)(v44 + 32) = v46 + v47;
                    *(_QWORD *)v44 = *(_QWORD *)v45;
                    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
                    *(_QWORD *)(v44 + 20) = *(_QWORD *)(v45 + 20);
                    *(_DWORD *)(v44 + 16) = *(_DWORD *)(v45 + 16);
                    *(_QWORD *)(v44 + 40) = 0;
                    *(_WORD *)(v44 + 28) = 0;
                    ++v43;
                    v42 += 48;
                  }
                  while (48 * v40 != (_DWORD)v42);
                  v48 = *(unsigned __int8 *)(v46 + v47);
                  v29 += v42;
                  v49 = v40;
                }
                else
                {
                  v49 = 0;
                  v48 = 0;
                }
                *(_DWORD *)v30 = v33;
                *(_WORD *)(v30 + 4) = v40;
                *(_WORD *)(v30 + 6) = v48;
                v30 += 8;
                v37 = (v37 + 1);
                v33 += v49;
              }
              else if ((v41 & 0x180) != 0)
              {
                v50 = 0;
                v51 = 0;
                v52 = v4 + 48 * *v38;
                v53 = *(_QWORD *)(v52 + 32);
                v54 = *(unsigned __int16 *)(v53 + 2);
                v55 = (unsigned __int8 *)(v53 + v54);
                v56 = 16 * *(unsigned __int16 *)(v52 + 30) - v54;
                v57 = *v55;
                do
                {
                  v58 = v29 + v50;
                  v59 = v4 + 48 * (v51 + *v38);
                  *(_WORD *)(v58 + 30) = v56 >> 4;
                  *(_QWORD *)(v58 + 32) = v55;
                  *(_QWORD *)v58 = *(_QWORD *)v59;
                  *(_QWORD *)(v58 + 8) = *(_QWORD *)(v59 + 8);
                  *(_QWORD *)(v58 + 20) = *(_QWORD *)(v59 + 20);
                  *(_DWORD *)(v58 + 16) = *(_DWORD *)(v59 + 16);
                  *(_QWORD *)(v58 + 40) = 0;
                  *(_WORD *)(v58 + 28) = 0;
                  ++v51;
                  v50 += 48;
                }
                while ((_DWORD)v50 != 192);
                *(_DWORD *)v30 = v33;
                *(_WORD *)(v30 + 4) = v40;
                *(_WORD *)(v30 + 6) = v57;
                v30 += 8;
                v37 = (v37 + 1);
                v33 += v40;
                v29 += v50;
              }
            }
            ++v34;
          }
          while (v34 != v36);
        }
        _CF = v37 >= v35;
        v61 = v37 - v35;
        if (v61 != 0 && _CF)
        {
          v266 = v61;
          v62 = *(unsigned int *)(v3 + 11944);
          if ((*(_DWORD *)(v3 + 11948) & 0x7FFFFFFFu) <= v62)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v264, &v266);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v3 + 11936) + 4 * v62) = v61;
            ++*(_DWORD *)(v3 + 11944);
          }
        }
        ++v32;
        LODWORD(v34) = v36;
        v35 = v37;
      }
      while (v32 < *(unsigned int *)(v3 + 11928));
    }
    else
    {
      v33 = 0;
    }
    v63 = -1431655765 * ((unint64_t)(v29 - v259) >> 4);
    *(_DWORD *)(v3 + 12088) = (unint64_t)(v30 - *(_QWORD *)(v3 + 12080)) >> 3;
    *(_DWORD *)(v3 + 11912) = v33 - v63;
    *(_DWORD *)(v3 + 11900) = v63;
    *(_DWORD *)(v3 + 12204) = v33;
    v1 = v262;
    v2 = *((_QWORD *)v262 + 5);
    v5 = v260;
  }
  v64 = *(_QWORD *)(v3 + 12032);
  v65 = *(_QWORD *)(v3 + 12064);
  v66 = v2 + 684;
  v67 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 744), 248, 0x10u);
  *(_QWORD *)v67 = *(_QWORD *)(v3 + 12240);
  v68 = *((_DWORD *)v1 + 42);
  *(_DWORD *)(v67 + 24) = *(_DWORD *)(*((_QWORD *)v1 + 6) + 8);
  *(_DWORD *)(v67 + 28) = v68;
  *(_QWORD *)(v67 + 32) = *(_QWORD *)(v3 + 12288);
  *(_DWORD *)(v67 + 40) = *(_DWORD *)(v3 + 12296);
  *(_QWORD *)(v67 + 128) = 0;
  *(_QWORD *)(v67 + 136) = 0;
  *(_QWORD *)(v67 + 120) = 0;
  *(_DWORD *)(v67 + 144) = 0;
  v69 = *((_QWORD *)v1 + 5);
  v70 = *(_QWORD *)(v69 + 8);
  *(_QWORD *)(v67 + 200) = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v67 + 8) = v261;
  *(_QWORD *)(v67 + 16) = v5;
  *(_DWORD *)(v67 + 208) = *(_DWORD *)(v70 + 16);
  *(_QWORD *)(v67 + 216) = v66;
  *(_QWORD *)(v67 + 88) = *(_QWORD *)(v3 + 11992);
  v71 = *(_QWORD *)(v3 + 11968);
  *(_DWORD *)(v67 + 148) = 0;
  v72 = *(_QWORD *)(v3 + 12040);
  *(_QWORD *)(v67 + 48) = v64;
  *(_QWORD *)(v67 + 56) = v72;
  *(_DWORD *)(v67 + 64) = *(_DWORD *)(v3 + 12048);
  *(_QWORD *)(v67 + 72) = *(_QWORD *)(v3 + 11920);
  *(_DWORD *)(v67 + 80) = *(_DWORD *)(v3 + 11928);
  v73 = *((_QWORD *)v1 + 7);
  *(_QWORD *)(v67 + 104) = v71;
  *(_QWORD *)(v67 + 112) = v73;
  *(_QWORD *)(v67 + 184) = *(_QWORD *)(v3 + 11936);
  LODWORD(v71) = *(_DWORD *)(v3 + 11944);
  v74 = *(_QWORD *)(v3 + 12080);
  *(_DWORD *)(v67 + 176) = *(_DWORD *)(v3 + 12088);
  *(_DWORD *)(v67 + 192) = v71;
  *(_DWORD *)(v67 + 196) = 0;
  *(_QWORD *)(v67 + 160) = v65;
  *(_QWORD *)(v67 + 168) = v74;
  *(_DWORD *)(v67 + 224) = *(_DWORD *)(v3 + 12256);
  *(_QWORD *)(v67 + 152) = *(_QWORD *)(v69 + 88);
  if ((8 * *(_DWORD *)(v3 + 12232)) <= 1)
    v75 = 1;
  else
    v75 = 8 * *(_DWORD *)(v3 + 12232);
  v76 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 2) + 8))(*((_QWORD *)v1 + 2));
  v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v78 = (v75 + *(_DWORD *)(v3 + 12048) - 1) / v75;
  if (v78 >= v77)
    v79 = v77;
  else
    v79 = (v75 + *(_DWORD *)(v3 + 12048) - 1) / v75;
  if (v79 <= 1)
    v80 = 1;
  else
    v80 = v79;
  if (v79 >= 2)
  {
    v81 = 8 * v78 / (2 * v80);
    if (v81 <= 8)
      v81 = 8;
    *(_DWORD *)(v67 + 96) = v81;
    v82 = 1 - v80;
    do
    {
      v83 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)v1 + 5) + 744), 72, 0x10u);
      v84 = *((_QWORD *)v1 + 5);
      v85 = *(_DWORD *)(v84 + 148);
      v86 = *((_QWORD *)v1 + 22);
      v87 = *(_QWORD *)(v84 + 768);
      *(_QWORD *)(v83 + 16) = 0;
      *(_QWORD *)(v83 + 24) = 0;
      *(_DWORD *)(v83 + 32) = 0;
      *(_QWORD *)v83 = &off_24ED8D248;
      *(_QWORD *)(v83 + 8) = v87;
      *(_QWORD *)(v83 + 40) = v67;
      *(_QWORD *)(v83 + 48) = v84;
      *(_DWORD *)(v83 + 56) = v85;
      *(_QWORD *)(v83 + 64) = v86;
      v88 = *((_QWORD *)v1 + 3);
      *(_DWORD *)(v83 + 32) = 1;
      *(_QWORD *)(v83 + 24) = v88;
      if (v88)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 32))(v88);
        *(_QWORD *)(v83 + 16) = *(_QWORD *)(*(_QWORD *)(v83 + 24) + 16);
        v89 = *(void (***)(physx::Dy::PxsParallelSolverTask *__hidden))v83;
      }
      else
      {
        v89 = &off_24ED8D248;
      }
      v89[5]((physx::Dy::PxsParallelSolverTask *)v83);
      _CF = __CFADD__(v82++, 1);
    }
    while (!_CF);
    physx::Dy::solveParallel(*((_QWORD *)v1 + 5), v67, *((_QWORD *)v1 + 22));
    v90 = (*(_DWORD *)(*((_QWORD *)v1 + 6) + 12) & 0x7FFFFFFF) + *(_DWORD *)(*((_QWORD *)v1 + 6) + 8);
    if (*(_DWORD *)(v67 + 148) < v90)
    {
      v91 = 30000;
      while (*(_DWORD *)(v67 + 148) < v90)
      {
        if (!--v91)
        {
          sched_yield();
          v91 = 10000;
        }
      }
    }
    return;
  }
  *(_DWORD *)(v3 + 12168) = 0;
  v92 = *(_DWORD *)(v3 + 12256);
  if ((*(_DWORD *)(v3 + 12172) & 0x7FFFFFFFu) < v92)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12160, v92);
    v92 = *(_DWORD *)(v3 + 12256);
  }
  *(_DWORD *)(v3 + 12168) = v92;
  *(_DWORD *)(v3 + 12184) = 0;
  if ((*(_DWORD *)(v3 + 12188) & 0x7FFFFFFFu) < v92)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12176, v92);
    v92 = *(_DWORD *)(v3 + 12256);
  }
  *(_DWORD *)(v3 + 12184) = v92;
  v93 = *(_QWORD *)(v3 + 12176);
  *(_QWORD *)(v67 + 232) = *(_QWORD *)(v3 + 12160);
  *(_QWORD *)(v67 + 240) = v93;
  v94 = *(_QWORD *)(*((_QWORD *)v1 + 5) + 8 * *(unsigned int *)(*((_QWORD *)v1 + 5) + 148) + 608);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 32))(v94, v67);
  v96 = *((_QWORD *)v1 + 6);
  v97 = *(_DWORD *)(v96 + 8);
  if (v97)
  {
    v98 = 0;
    v99 = 0;
    v100 = v97 - 1;
    v101 = (float *)(v5 + 112 * *((unsigned int *)v1 + 42) + 220);
    v102 = v261;
    do
    {
      v103 = v99 + 4;
      if ((int)v99 + 4 >= v100)
        v103 = v100;
      _X9 = (uint64_t *)(*(_QWORD *)(v3 + 11968) + 8 * v103);
      v106 = *_X9;
      _X9 += 16;
      _X10 = v106;
      __asm { PRFM            #0, [X10] }
      v111 = *(_QWORD *)(v3 + 11992);
      _X27 = v111 + v98;
      __asm
      {
        PRFM            #0, [X27,#0x80]
        PRFM            #0, [X9]
      }
      v115 = *((_QWORD *)v1 + 7);
      _X8 = v115 + 8 * v103;
      __asm { PRFM            #0, [X8] }
      v118 = v1;
      v119 = *((_QWORD *)v1 + 5);
      v120 = *(float *)(v119 + 88);
      v121 = *(_WORD *)v101;
      if (!*(_WORD *)v101)
        goto LABEL_102;
      if ((v121 & 1) != 0)
      {
        *(_DWORD *)(v111 + v98) = 0;
        *(_DWORD *)(v102 + v98) = 0;
        if ((v121 & 2) == 0)
        {
LABEL_97:
          if ((v121 & 4) == 0)
            goto LABEL_98;
          goto LABEL_150;
        }
      }
      else if ((v121 & 2) == 0)
      {
        goto LABEL_97;
      }
      *(_DWORD *)(v111 + v98 + 4) = 0;
      *(_DWORD *)(v102 + v98 + 4) = 0;
      if ((v121 & 4) == 0)
      {
LABEL_98:
        if ((v121 & 8) != 0)
          goto LABEL_151;
        goto LABEL_99;
      }
LABEL_150:
      *(_DWORD *)(v111 + v98 + 8) = 0;
      *(_DWORD *)(v102 + v98 + 8) = 0;
      if ((v121 & 8) != 0)
      {
LABEL_151:
        *(_DWORD *)(_X27 + 16) = 0;
        *(_DWORD *)(v102 + v98 + 16) = 0;
        if ((v121 & 0x10) == 0)
        {
LABEL_100:
          if ((v121 & 0x20) == 0)
            goto LABEL_102;
LABEL_101:
          *(_DWORD *)(v111 + v98 + 24) = 0;
          *(_DWORD *)(v102 + v98 + 24) = 0;
          goto LABEL_102;
        }
        goto LABEL_152;
      }
LABEL_99:
      if ((v121 & 0x10) == 0)
        goto LABEL_100;
LABEL_152:
      *(_DWORD *)(v111 + v98 + 20) = 0;
      *(_DWORD *)(v102 + v98 + 20) = 0;
      if ((v121 & 0x20) != 0)
        goto LABEL_101;
LABEL_102:
      v122 = *(v101 - 25);
      v123 = v122 + *(float *)(_X27 + 8);
      v124 = *(float *)(_X27 + 16);
      v125 = *(v101 - 17);
      v126 = *(v101 - 14);
      v127 = *(v101 - 11);
      v128 = *(v101 - 21);
      v129 = *(float32x2_t *)(v101 - 27);
      v130 = *(float32x2_t *)(v101 - 3);
      v131 = *(float32x2_t *)(v101 - 19);
      v132 = v124 * v131.f32[0];
      v133 = *(float32x2_t *)(v101 - 16);
      v134 = *(float32x2_t *)(v101 - 13);
      v135 = *(float32x2_t *)(_X27 + 20);
      v136 = (float)((float)((float)(v124 * v125) + (float)(v126 * v135.f32[0])) + vmuls_lane_f32(v127, v135, 1)) + v128;
      *(v101 - 1) = (float)(v120 * v123) + *(v101 - 1);
      *(float32x2_t *)&v95 = vadd_f32(v129, *(float32x2_t *)_X27);
      *(float32x2_t *)(v101 - 3) = vadd_f32(vmul_n_f32(*(float32x2_t *)&v95, v120), v130);
      *(float32x2_t *)(v101 - 27) = vadd_f32(v129, *(float32x2_t *)(v102 + v98));
      *(v101 - 25) = v122 + *(float *)(v102 + v98 + 8);
      v137 = *(float *)(v102 + v98 + 16);
      v138 = *(float *)(v102 + v98 + 20);
      v139 = (float)(v125 * v137) + (float)(v126 * v138);
      v140 = *(float *)(v102 + v98 + 24);
      v141 = v139 + (float)(v127 * v140);
      v142 = vmul_f32(v135, (float32x2_t)vzip2_s32((int32x2_t)v133, (int32x2_t)v134));
      v143 = (float)(vmuls_lane_f32(v124, v131, 1) + v142.f32[0]) + v142.f32[1];
      v144 = *(float32x2_t *)(v101 - 23);
      v145 = (float)((float)(v132 + vmul_f32(v135, v133).f32[0]) + vmuls_lane_f32(v134.f32[0], v135, 1)) + v144.f32[0];
      v146 = v143 + v144.f32[1];
      v147 = (float)((float)(v146 * v146) + (float)(v145 * v145)) + (float)(v136 * v136);
      *(float32x2_t *)(v101 - 23) = vadd_f32(v144, vadd_f32(vadd_f32(vmul_n_f32(v131, v137), vmul_n_f32(v133, v138)), vmul_n_f32(v134, v140)));
      *(v101 - 21) = v128 + v141;
      v265 = v120;
      if (v147 != 0.0)
      {
        v148 = sqrtf(v147);
        v263 = v95;
        if (v148 > 10000000.0)
        {
          v149 = 0.0;
          v150 = v147 <= 0.0;
          v151 = 0.0;
          v152 = 0.0;
          if (!v150)
          {
            v149 = v145 * (float)(1.0 / v148);
            v151 = v146 * (float)(1.0 / v148);
            v152 = v136 * (float)(1.0 / v148);
          }
          v145 = v149 * 10000000.0;
          v146 = v151 * 10000000.0;
          v148 = 10000000.0;
          v136 = v152 * 10000000.0;
        }
        v153 = __sincosf_stret((float)(v120 * v148) * 0.5);
        *(float *)v154.i32 = v145 * (float)(v153.__sinval / v148);
        v155 = *(float32x4_t *)(v101 - 7);
        *(float *)&v154.i32[1] = v146 * (float)(v153.__sinval / v148);
        *(float *)&v154.i32[2] = v136 * (float)(v153.__sinval / v148);
        v156 = (float32x4_t)vextq_s8(vextq_s8(v154, v154, 0xCuLL), v154, 8uLL);
        *(float *)&v154.i32[3] = -*(float *)v154.i32;
        v157 = (float32x4_t)vzip1q_s32((int32x4_t)v155, (int32x4_t)v155);
        v157.i32[0] = *(_QWORD *)(v101 - 5);
        _Q2 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v155, 3), (int8x16_t)v155, 4uLL), (float32x4_t)v154), (float32x4_t)0, v155);
        v159 = vzip2q_s32((int32x4_t)v156, (int32x4_t)v155);
        v160 = vmulq_n_f32(v155, v153.__cosval);
        v155.i32[3] = v156.i32[1];
        v161 = vrev64q_s32((int32x4_t)v156);
        v156.f32[3] = -(float)(v146 * (float)(v153.__sinval / v148));
        _Q0 = vaddq_f32(v160, vmlsq_f32(vmlaq_f32(_Q2, v157, v156), (float32x4_t)vzip1q_s32(v161, v159), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v155, (int32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 0xCuLL)), (int32x4_t)v155)));
        _Q1 = vmulq_f32(_Q0, _Q0);
        _Q2.i32[0] = _Q0.i32[2];
        __asm { FMLA            S1, S2, V0.S[2] }
        _Q2.i32[0] = _Q0.i32[3];
        __asm { FMLA            S1, S2, V0.S[3] }
        _Q1.f32[0] = sqrtf(_Q1.f32[0]);
        *(float32x4_t *)(v101 - 7) = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
        v102 = v261;
        v95 = v263;
      }
      *(_DWORD *)(v111 + v98) = v95;
      *(_DWORD *)(_X27 + 4) = DWORD1(v95);
      *(float *)(_X27 + 8) = v123;
      *(float *)(_X27 + 16) = v145;
      *(float *)(_X27 + 20) = v146;
      *(float *)(_X27 + 24) = v136;
      v164 = *(_QWORD *)(v115 + 8 * v99);
      v165 = *(_QWORD *)(v164 + 40);
      *(_OWORD *)v164 = *(_OWORD *)v165;
      *(_QWORD *)(v164 + 16) = *(_QWORD *)(v165 + 16);
      *(_DWORD *)(v164 + 24) = *(_DWORD *)(v165 + 24);
      v166 = *(v101 - 7);
      v167 = *(v101 - 6);
      *(float *)v165 = v166;
      *(float *)(v165 + 4) = v167;
      _Q6 = *(_OWORD *)(v101 - 5);
      *(_OWORD *)(v165 + 8) = _Q6;
      *(float *)(v165 + 24) = *(v101 - 1);
      v169 = *(v101 - 27);
      v170 = *(v101 - 26);
      *(float *)(v165 + 64) = v169;
      *(float *)(v165 + 68) = v170;
      v171 = *(v101 - 25);
      *(float *)(v165 + 72) = v171;
      v172 = *(v101 - 23);
      v173 = *(v101 - 22);
      *(float *)(v165 + 80) = v172;
      *(float *)(v165 + 84) = v173;
      v174 = *(v101 - 21);
      v175 = *((_QWORD *)v118 + 22);
      v176 = *(unsigned int *)(*(_QWORD *)(v175 + 272) + 4 * (*(_DWORD *)(v101 - 9) & 0x1FFFFFF));
      *(float *)(v165 + 88) = v174;
      v177 = *(_DWORD *)(*(_QWORD *)(v175 + 136) + 4 * v176);
      v178 = *(float *)(v165 + 140);
      if (!*(_BYTE *)(v119 + 100))
      {
        v188 = *(unsigned __int8 *)(v119 + 102);
        v1 = v118;
        v189 = v265;
        if (v188)
        {
          v190 = 1.0;
          if (v177)
          {
            v191 = *(_DWORD *)(v165 + 152);
            if (v191 >= 2)
              v190 = 1.0 / (float)v191;
          }
          *(float *)(v164 + 76) = v190;
        }
        if (v178 < 0.2 || v178 < v265)
        {
          v192 = *(float *)(v165 + 112);
          v193 = *(float *)(v165 + 116);
          v194 = *(float *)(v165 + 120);
          if (v192 <= 0.0)
            v195 = 1.0;
          else
            v195 = 1.0 / v192;
          if (v193 <= 0.0)
            v196 = 1.0;
          else
            v196 = 1.0 / v193;
          if (v194 <= 0.0)
            v197 = 1.0;
          else
            v197 = 1.0 / v194;
          v198 = *(float *)(_X27 + 8);
          v199 = *(float *)(_X27 + 16) + *(float *)(_X27 + 16);
          v200 = *(float *)(_X27 + 20) + *(float *)(_X27 + 20);
          v201 = *(float *)(_X27 + 24) + *(float *)(_X27 + 24);
          _S19 = DWORD1(_Q6);
          __asm { FMLA            S20, S19, V6.S[1] }
          v204 = vmlas_n_f32((float)(v167 * v200) + (float)(v166 * v199), v201, *(float *)&_Q6);
          v205 = (float)(vmuls_lane_f32(-(float)((float)(v167 * v201) - (float)(*(float *)&_Q6 * v200)), *(float32x2_t *)&_Q6, 1)+ (float)(v199 * _S20))+ (float)(v166 * v204);
          v206 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v199) - (float)(v166 * v201)), *(float32x2_t *)&_Q6, 1)+ (float)(v200 * _S20))+ (float)(v167 * v204);
          v207 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v166 * v200) - (float)(v167 * v199)), *(float32x2_t *)&_Q6, 1)+ (float)(v201 * _S20), v204, *(float *)&_Q6);
          v208 = vadd_f32(*(float32x2_t *)(v111 + v98), *(float32x2_t *)(v164 + 48));
          *(float32x2_t *)(v164 + 48) = v208;
          v209 = v198 + *(float *)(v164 + 56);
          *(float *)(v164 + 56) = v209;
          v210 = v205 + *(float *)(v164 + 64);
          v211 = v206 + *(float *)(v164 + 68);
          *(float *)(v164 + 64) = v210;
          *(float *)(v164 + 68) = v211;
          v212 = v207 + *(float *)(v164 + 72);
          *(float *)(v164 + 72) = v212;
          v213 = *(float *)(v165 + 124);
          if (v213 == 0.0)
            v213 = 1.0;
          v214 = (float)((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v208, v208).i32[1]), v208.f32[0], v208.f32[0])
                               + (float)(v209 * v209))
                       + (float)((float)((float)((float)(v196 * (float)(v211 * v211))
                                               + (float)((float)(v210 * v210) * v195))
                                       + (float)((float)(v212 * v212) * v197))
                               * v213))
               * 0.5;
          v215 = (float)(*(_DWORD *)(v165 + 148) + 1);
          v216 = *(float *)(v165 + 132) * v215;
          if (v214 >= v216)
          {
            *(_QWORD *)(v164 + 48) = 0;
            *(_DWORD *)(v164 + 56) = 0;
            v217 = 1.0;
            *(_QWORD *)(v164 + 64) = 0;
            *(_DWORD *)(v164 + 72) = 0;
            if (v216 != 0.0)
            {
              v218 = v214 / v216;
              if (v218 >= 2.0)
                v217 = 1.0;
              else
                v217 = v218 * 0.5;
            }
            v219 = (float)(v265 * (float)(v215 + -1.0)) + (float)(v217 * 0.4);
            *(float *)(v165 + 144) = v219;
            *(_WORD *)(v164 + 28) = 8 * (v178 == 0.0);
            goto LABEL_178;
          }
        }
        goto LABEL_177;
      }
      v179 = *(float *)(v165 + 112);
      v180 = *(float *)(v165 + 116);
      if (v179 <= 0.0)
        v181 = 1.0;
      else
        v181 = 1.0 / v179;
      if (v180 <= 0.0)
        v182 = 1.0;
      else
        v182 = 1.0 / v180;
      v183 = *(float *)(v165 + 120);
      v184 = *(float *)(v165 + 124);
      v150 = v183 <= 0.0;
      v185 = 1.0 / v183;
      if (v150)
        v185 = 1.0;
      if (v184 == 0.0)
        v184 = 1.0;
      if (v177)
      {
        v186 = *(_DWORD *)(v165 + 152);
        if (v186 >= 0xA)
          v186 = 10;
        v187 = (float)v186;
      }
      else
      {
        v187 = 0.0;
      }
      v1 = v118;
      v220 = *(float *)(v111 + v98);
      v222 = *(float *)(_X27 + 4);
      v221 = *(float *)(_X27 + 8);
      v223 = *(float *)(_X27 + 16) + *(float *)(_X27 + 16);
      v224 = *(float *)(_X27 + 20) + *(float *)(_X27 + 20);
      v225 = *(float *)(_X27 + 24) + *(float *)(_X27 + 24);
      _S19 = DWORD1(_Q6);
      __asm { FMLA            S31, S19, V6.S[1] }
      v228 = vmlas_n_f32((float)(v167 * v224) + (float)(v166 * v223), v225, *(float *)&_Q6);
      v229 = (float)(vmuls_lane_f32(-(float)((float)(v167 * v225) - (float)(*(float *)&_Q6 * v224)), *(float32x2_t *)&_Q6, 1)+ (float)(v223 * _S31))+ (float)(v166 * v228);
      v230 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v223) - (float)(v166 * v225)), *(float32x2_t *)&_Q6, 1)+ (float)(v224 * _S31))+ (float)(v167 * v228);
      v231 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v166 * v224) - (float)(v167 * v223)), *(float32x2_t *)&_Q6, 1)+ (float)(v225 * _S31), v228, *(float *)&_Q6);
      v232 = (float)((float)((float)((float)(v222 * v222) + (float)(v220 * v220)) + (float)(v221 * v221))
                   + (float)(v184
                           * (float)((float)((float)(v182 * (float)(v230 * v230)) + (float)((float)(v229 * v229) * v181))
                                   + (float)((float)(v231 * v231) * v185))))
           * 0.5;
      v233 = v187 * *(float *)(v165 + 136);
      v189 = v265;
      v234 = fmaxf(*(float *)(v164 + 60) - v265, 0.0);
      *(float *)(v164 + 60) = v234;
      v235 = v265 + *(float *)(v164 + 76);
      if (v235 > 1.0)
        v235 = 1.0;
      if (v232 >= v233)
      {
        *(_DWORD *)(v164 + 60) = 1069547520;
        if (v177)
          v242 = v235;
        else
          v242 = 1.0;
        goto LABEL_171;
      }
      if (!v177)
      {
        v242 = 1.0;
LABEL_171:
        v238 = (__int16 *)(v164 + 28);
        v243 = *(_WORD *)(v164 + 28);
        *(float *)(v164 + 76) = v242;
        LOWORD(v240) = v243 & 1;
LABEL_172:
        v241 = 4 * v240;
        goto LABEL_173;
      }
      if (v187 > 1.0)
      {
        v236 = (float)(v265 * -0.5) + 1.0;
        *(float *)(v165 + 64) = v236 * v169;
        *(float *)(v165 + 68) = v236 * v170;
        *(float *)(v165 + 72) = v236 * v171;
        *(float *)(v165 + 80) = v236 * v172;
        *(float *)(v165 + 84) = v236 * v173;
        *(float *)(v165 + 88) = v236 * v174;
        v235 = (float)(v235 * 0.75) + 0.025;
      }
      v237 = *(float *)(v165 + 136);
      v238 = (__int16 *)(v164 + 28);
      v239 = *(_WORD *)(v164 + 28);
      *(float *)(v164 + 76) = v235;
      v240 = v239 & 1;
      if (v234 != 0.0 || v232 >= (float)(v237 * 0.25))
        goto LABEL_172;
      if (v240)
        v241 = 1;
      else
        v241 = 3;
      *(_OWORD *)v165 = *(_OWORD *)v164;
      *(_QWORD *)(v165 + 16) = *(_QWORD *)(v164 + 16);
      *(_DWORD *)(v165 + 24) = *(_DWORD *)(v164 + 24);
LABEL_173:
      *v238 = v241;
      if (v178 < 0.2 || v178 < v265)
      {
        v244 = v220 + *(float *)(v164 + 48);
        v245 = v222 + *(float *)(v164 + 52);
        v246 = v221 + *(float *)(v164 + 56);
        v247 = *(float *)(v164 + 68);
        v248 = v229 + *(float *)(v164 + 64);
        *(float *)(v164 + 48) = v244;
        *(float *)(v164 + 52) = v245;
        *(float *)(v164 + 56) = v246;
        v249 = v230 + v247;
        *(float *)(v164 + 64) = v248;
        *(float *)(v164 + 68) = v249;
        v250 = v231 + *(float *)(v164 + 72);
        *(float *)(v164 + 72) = v250;
        v251 = *(float *)(v165 + 132);
        if (v232 >= v251)
        {
          v252 = (float)((float)((float)((float)(v245 * v245) + (float)(v244 * v244)) + (float)(v246 * v246))
                       + (float)(v184
                               * (float)((float)((float)(v182 * (float)(v249 * v249))
                                               + (float)((float)(v248 * v248) * v181))
                                       + (float)((float)(v250 * v250) * v185))))
               * 0.5;
          v253 = (float)(*(_DWORD *)(v165 + 148) + 1);
          if (v252 >= (float)(v251 * v253))
          {
            *(_QWORD *)(v164 + 64) = 0;
            *(_DWORD *)(v164 + 72) = 0;
            v254 = 1.0;
            *(_QWORD *)(v164 + 48) = 0;
            *(_DWORD *)(v164 + 56) = 0;
            if (v251 != 0.0)
            {
              v255 = v252 / (float)(v251 * v253);
              if (v255 >= 2.0)
                v254 = 1.0;
              else
                v254 = v255 * 0.5;
            }
            v219 = (float)(v265 * (float)(v253 + -1.0)) + (float)(v254 * 0.4);
            *(float *)(v165 + 144) = v219;
            if (v178 == 0.0)
              *v238 = v241 | 8;
            goto LABEL_178;
          }
        }
      }
LABEL_177:
      v219 = fmaxf(v178 - v189, 0.0);
      *(float *)(v165 + 144) = v219;
LABEL_178:
      if (v219 == 0.0)
      {
        *(_WORD *)(v164 + 28) |= 0x10u;
        *(_QWORD *)(v164 + 48) = 0;
        *(_DWORD *)(v164 + 56) = 0;
        *(_QWORD *)(v164 + 64) = 0;
        *(_DWORD *)(v164 + 72) = 0;
      }
      ++v99;
      v96 = *((_QWORD *)v1 + 6);
      v101 += 28;
      v98 += 32;
    }
    while (v99 < *(unsigned int *)(v96 + 8));
  }
  if ((*(_DWORD *)(v96 + 12) & 0x7FFFFFFF) != 0)
  {
    v256 = 0;
    v257 = 0;
    do
    {
      v258 = (void (*)(float))physx::Dy::ArticulationPImpl::sUpdateBodies[*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 12288) + v256) + 40)];
      if (v258)
      {
        v258(*(float *)(*((_QWORD *)v1 + 5) + 88));
        v96 = *((_QWORD *)v1 + 6);
      }
      ++v257;
      v256 += 96;
    }
    while (v257 < (*(_DWORD *)(v96 + 12) & 0x7FFFFFFFu));
  }
}

void physx::Dy::PxsParallelSolverTask::~PxsParallelSolverTask(physx::Dy::PxsParallelSolverTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsParallelSolverTask::getName(physx::Dy::PxsParallelSolverTask *this)
{
  return "PxsDynamics.parallelSolver";
}

uint64_t physx::Dy::PxsParallelSolverTask::runInternal(physx::Dy::PxsParallelSolverTask *this)
{
  return physx::Dy::solveParallel(*((_QWORD *)this + 6), *((_QWORD *)this + 5), *((_QWORD *)this + 8));
}

void physx::Dy::PxsSolverConstraintPartitionTask::~PxsSolverConstraintPartitionTask(physx::Dy::PxsSolverConstraintPartitionTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsSolverConstraintPartitionTask::getName(physx::Dy::PxsSolverConstraintPartitionTask *this)
{
  return "PxsDynamics.solverConstraintPartition";
}

void physx::Dy::PxsSolverConstraintPartitionTask::runInternal(physx::Dy::PxsSolverConstraintPartitionTask *this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  __int128 *v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  char v31;

  v1 = (_DWORD *)*((_QWORD *)this + 6);
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 12288);
  v4 = v1[3];
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(unsigned __int8 *)(v3 + 93);
    if ((v4 & 0x7FFFFFFE) != 0)
    {
      v6 = *(_QWORD *)(v2 + 12264);
      v7 = 64;
      v8 = 1;
      do
      {
        v9 = v7;
        v10 = *(unsigned __int8 *)(v3 + 96 * v8 + 93);
        if ((_DWORD)v8 << 6 < (v10 + ((_DWORD)v8 << 6)))
        {
          v11 = (__int128 *)(v6 + 48 * v7);
          v12 = v7 + v10 - (unint64_t)v7;
          do
          {
            v13 = (_OWORD *)(v6 + 48 * v5++);
            v14 = *v11;
            v15 = v11[2];
            v13[1] = v11[1];
            v13[2] = v15;
            *v13 = v14;
            v11 += 3;
            --v12;
          }
          while (v12);
          v1 = (_DWORD *)*((_QWORD *)this + 6);
        }
        ++v8;
        v7 = v9 + 64;
      }
      while (v8 < (v1[3] & 0x7FFFFFFFu));
    }
    v16 = *(_DWORD *)(v2 + 12024) + v5;
    *(_DWORD *)(v2 + 12024) = v16;
  }
  else
  {
    v16 = *(_DWORD *)(v2 + 12024);
  }
  v17 = *(_QWORD *)(v2 + 12016);
  v18 = *(_QWORD *)(*((_QWORD *)this + 5) + 544);
  v19 = *((unsigned int *)this + 42);
  *(_QWORD *)(v2 + 11896) = 0;
  *(_QWORD *)(v2 + 11912) = 0;
  *(_QWORD *)(v2 + 11904) = 0;
  if (v16)
  {
    v21 = v18 + 32 * v19;
    v23 = 32;
    v24 = v3;
    v26 = v17;
    v25 = *(_DWORD *)(v2 + 12296);
    v22 = v1[2];
    v27 = v16;
    v20 = *(_QWORD *)(v2 + 12056);
    v28 = *(_QWORD *)(v2 + 12032);
    v29 = v20;
    memset(v30, 0, 12);
    v30[2] = v2 + 11920;
    v30[3] = v2 + 11952;
    v31 = *((_BYTE *)this + 172);
    *(_DWORD *)(v2 + 12232) = physx::Dy::partitionContactConstraints(&v21);
    *(_DWORD *)(v2 + 11896) = v30[0];
    *(_QWORD *)(v2 + 11904) = *(_QWORD *)((char *)v30 + 4);
  }
  else
  {
    bzero(*(void **)(v2 + 11920), (4 * *(_DWORD *)(v2 + 11932)));
  }
}

void physx::Dy::UpdateContinuationTask::~UpdateContinuationTask(physx::Dy::UpdateContinuationTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::UpdateContinuationTask::getName(physx::Dy::UpdateContinuationTask *this)
{
  return "UpdateContinuationTask";
}

uint64_t physx::Dy::UpdateContinuationTask::runInternal(physx::Dy::UpdateContinuationTask *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int32 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int32x2_t v19;
  BOOL v20;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  pthread_mutex_t **v25;
  uint64_t v26;
  uint64_t NotThreadSafe;
  int v28;
  uint64_t v29;
  physx::Cm::FlushPool *v30;
  unsigned int v31;
  physx::Cm::FlushPool *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  physx::Cm::FlushPool *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  pthread_mutex_t **v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  int32x2_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v1 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 7);
  v58 = *((_QWORD *)this + 6);
  v3 = *(_DWORD *)(v58 + 552);
  v4 = *(_DWORD *)(v1 + 140);
  v5 = *(_DWORD *)(v1 + 144);
  v6 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v1 + 744), 48, 0x10u);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v1 + 768);
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = &off_24ED8D408;
  *(_QWORD *)(v6 + 40) = v1;
  *(_DWORD *)(v6 + 32) = 1;
  *(_QWORD *)(v6 + 24) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  }
  v48 = v6;
  if (v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(v58 + 544);
    v55 = v1 + 696;
    v44 = v12;
    v46 = v4;
    v47 = v3;
    v45 = v5;
    v73 = v1;
    do
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = v11;
      v17 = *(_QWORD *)(v1 + 480) + 32 * v10;
      v72 = *(_QWORD *)(v1 + 496) + 8 * v10;
      v69 = *(_QWORD *)(v1 + 632);
      v71 = v12 + 4 * v11;
      if (v3 <= v11 + 1)
        v18 = v11 + 1;
      else
        v18 = v3;
      v19 = 0;
      v70 = *(_QWORD *)(v1 + 648) + 4 * v10;
      while (1)
      {
        v20 = v15 && v13 >= v4;
        if (v20 || v14 >= v5)
          break;
        v22 = *(_QWORD *)(v58 + 344) + 44 * *(unsigned int *)(v12 + 4 * v11);
        v13 += *(_DWORD *)(v22 + 8);
        v14 += *(_DWORD *)(v22 + 12);
        v19 = vadd_s32(*(int32x2_t *)(v22 + 36), v19);
        v15 = vadd_s32(v19, vdup_lane_s32(v19, 1)).u32[0];
        if (v18 == ++v11)
        {
          v11 = v18;
          break;
        }
      }
      if ((v14 & 0x7FFFFFFF) + v13)
      {
        v63 = *(_QWORD *)(v1 + 464) + 8 * v7;
        v64 = *(_QWORD *)(v1 + 448) + 48 * v7;
        v65 = *(_QWORD *)(v1 + 432) + 48 * v7;
        v66 = *(_QWORD *)(v1 + 416) + 48 * v7;
        v67 = *(_QWORD *)(v1 + 664) + 32 * v8;
        v62 = *(_QWORD *)(v1 + 512) + 8 * v10;
        v68 = *(_QWORD *)(v1 + 528) + 8 * v9;
        v57 = v19;
        v52 = v7;
        v53 = v9;
        v54 = v8;
        v23 = v11 - v16;
        v51 = v10;
        v24 = *(_DWORD *)(v1 + 680) + v10;
        v49 = *(_QWORD *)(v1 + 688);
        v61 = *(_BYTE *)(v1 + 101);
        v25 = *(pthread_mutex_t ***)(v1 + 744);
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
          pthread_mutex_lock(*v25);
        v26 = physx::Cm::FlushPool::allocate(v25, 24, 0x10u);
        *(_QWORD *)v26 = 0;
        *(_DWORD *)(v26 + 8) = v13;
        *(_DWORD *)(v26 + 12) = v14 & 0x7FFFFFFF;
        *(int32x2_t *)(v26 + 16) = v57;
        v59 = v26;
        NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)v25, 216, 0x10u);
        v28 = *(_DWORD *)(v1 + 680);
        v29 = *(_QWORD *)(v1 + 768);
        *(_QWORD *)(NotThreadSafe + 16) = 0;
        *(_QWORD *)(NotThreadSafe + 24) = 0;
        *(_DWORD *)(NotThreadSafe + 32) = 0;
        *(_QWORD *)NotThreadSafe = &off_24ED8D018;
        *(_QWORD *)(NotThreadSafe + 8) = v29;
        *(_QWORD *)(NotThreadSafe + 40) = v1;
        *(_QWORD *)(NotThreadSafe + 48) = v26;
        *(_QWORD *)(NotThreadSafe + 56) = v62;
        *(_QWORD *)(NotThreadSafe + 64) = v68;
        *(_QWORD *)(NotThreadSafe + 72) = 0;
        *(_QWORD *)(NotThreadSafe + 80) = v67;
        *(_QWORD *)(NotThreadSafe + 88) = v71;
        v60 = v23;
        *(_DWORD *)(NotThreadSafe + 96) = v23;
        *(_QWORD *)(NotThreadSafe + 104) = v69;
        *(_QWORD *)(NotThreadSafe + 112) = v70;
        *(_QWORD *)(NotThreadSafe + 120) = v66;
        *(_QWORD *)(NotThreadSafe + 128) = v65;
        *(_QWORD *)(NotThreadSafe + 136) = v64;
        *(_QWORD *)(NotThreadSafe + 144) = v63;
        *(_QWORD *)(NotThreadSafe + 152) = v17;
        *(_QWORD *)(NotThreadSafe + 160) = v72;
        *(_DWORD *)(NotThreadSafe + 168) = v24;
        *(_DWORD *)(NotThreadSafe + 172) = v28;
        *(_QWORD *)(NotThreadSafe + 176) = v58;
        *(_QWORD *)(NotThreadSafe + 184) = v69;
        *(_QWORD *)(NotThreadSafe + 192) = v49;
        v30 = (physx::Cm::FlushPool *)v25;
        v31 = v24;
        *(_QWORD *)(NotThreadSafe + 200) = v55;
        *(_BYTE *)(NotThreadSafe + 208) = v61;
        v32 = v30;
        v33 = physx::Cm::FlushPool::allocateNotThreadSafe(v30, 184, 0x10u);
        v34 = *(_QWORD *)(v73 + 768);
        *(_QWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 24) = 0;
        *(_DWORD *)(v33 + 32) = 0;
        *(_QWORD *)v33 = &off_24ED8D168;
        *(_QWORD *)(v33 + 8) = v34;
        *(_QWORD *)(v33 + 40) = v73;
        *(_QWORD *)(v33 + 48) = v59;
        *(_QWORD *)(v33 + 56) = v62;
        *(_QWORD *)(v33 + 64) = v68;
        *(_QWORD *)(v33 + 72) = 0;
        *(_QWORD *)(v33 + 80) = v67;
        *(_QWORD *)(v33 + 88) = v71;
        *(_DWORD *)(v33 + 96) = v23;
        *(_QWORD *)(v33 + 104) = v69;
        *(_QWORD *)(v33 + 112) = v70;
        *(_QWORD *)(v33 + 120) = v66;
        *(_QWORD *)(v33 + 128) = v65;
        *(_QWORD *)(v33 + 136) = v64;
        *(_QWORD *)(v33 + 144) = v63;
        *(_QWORD *)(v33 + 152) = v17;
        *(_QWORD *)(v33 + 160) = v72;
        *(_DWORD *)(v33 + 168) = v24;
        v56 = v24;
        *(_QWORD *)(v33 + 176) = v55;
        v35 = physx::Cm::FlushPool::allocateNotThreadSafe(v32, 80, 0x10u);
        v36 = *(_QWORD *)(v73 + 768);
        *(_QWORD *)(v35 + 16) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        *(_DWORD *)(v35 + 32) = 0;
        *(_QWORD *)v35 = &off_24ED8CEE8;
        *(_QWORD *)(v35 + 8) = v36;
        *(_QWORD *)(v35 + 40) = v73;
        *(_QWORD *)(v35 + 48) = v59;
        *(_DWORD *)(v35 + 56) = v24;
        *(_QWORD *)(v35 + 64) = v55;
        *(_BYTE *)(v35 + 72) = v61;
        v37 = physx::Cm::FlushPool::allocateNotThreadSafe(v32, 184, 0x10u);
        v38 = *(_QWORD *)(v73 + 768);
        *(_QWORD *)(v37 + 16) = 0;
        *(_QWORD *)(v37 + 24) = 0;
        *(_DWORD *)(v37 + 32) = 0;
        *(_QWORD *)v37 = &off_24ED8D1D8;
        *(_QWORD *)(v37 + 8) = v38;
        *(_QWORD *)(v37 + 40) = v73;
        *(_QWORD *)(v37 + 48) = v59;
        *(_QWORD *)(v37 + 56) = v62;
        *(_QWORD *)(v37 + 64) = v68;
        *(_QWORD *)(v37 + 72) = 0;
        *(_QWORD *)(v37 + 80) = v67;
        *(_QWORD *)(v37 + 88) = v71;
        *(_DWORD *)(v37 + 96) = v60;
        *(_QWORD *)(v37 + 104) = v69;
        *(_QWORD *)(v37 + 112) = v70;
        *(_QWORD *)(v37 + 120) = v66;
        *(_QWORD *)(v37 + 128) = v65;
        *(_QWORD *)(v37 + 136) = v64;
        *(_QWORD *)(v37 + 144) = v63;
        *(_QWORD *)(v37 + 152) = v17;
        *(_QWORD *)(v37 + 160) = v72;
        *(_DWORD *)(v37 + 168) = v31;
        *(_QWORD *)(v37 + 176) = v58 + 224;
        v39 = v32;
        v1 = v73;
        v50 = (pthread_mutex_t **)v39;
        v40 = physx::Cm::FlushPool::allocateNotThreadSafe(v39, 176, 0x10u);
        v41 = *(_QWORD *)(v73 + 768);
        *(_QWORD *)(v40 + 16) = 0;
        *(_QWORD *)(v40 + 24) = 0;
        *(_DWORD *)(v40 + 32) = 0;
        *(_QWORD *)v40 = &off_24ED8D2B8;
        *(_QWORD *)(v40 + 8) = v41;
        *(_QWORD *)(v40 + 40) = v73;
        *(_QWORD *)(v40 + 48) = v59;
        *(_QWORD *)(v40 + 56) = v62;
        *(_QWORD *)(v40 + 64) = v68;
        *(_QWORD *)(v40 + 72) = 0;
        *(_QWORD *)(v40 + 80) = v67;
        *(_QWORD *)(v40 + 88) = v71;
        *(_DWORD *)(v40 + 96) = v60;
        *(_QWORD *)(v40 + 104) = v69;
        *(_QWORD *)(v40 + 112) = v70;
        *(_QWORD *)(v40 + 120) = v66;
        *(_QWORD *)(v40 + 128) = v65;
        *(_QWORD *)(v40 + 136) = v64;
        *(_QWORD *)(v40 + 144) = v63;
        *(_QWORD *)(v40 + 152) = v17;
        *(_QWORD *)(v40 + 160) = v72;
        *(_DWORD *)(v40 + 168) = v56;
        *(_BYTE *)(v40 + 172) = v61;
        *(_DWORD *)(v33 + 32) = 1;
        *(_QWORD *)(v33 + 24) = v48;
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
        *(_QWORD *)(v33 + 16) = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 16);
        *(_DWORD *)(v37 + 32) = 1;
        *(_QWORD *)(v37 + 24) = v33;
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
        *(_QWORD *)(v37 + 16) = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
        *(_DWORD *)(v35 + 32) = 1;
        *(_QWORD *)(v35 + 24) = v37;
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
        *(_QWORD *)(v35 + 16) = *(_QWORD *)(*(_QWORD *)(v35 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
        *(_DWORD *)(v40 + 32) = 1;
        *(_QWORD *)(v40 + 24) = v35;
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
        *(_QWORD *)(v40 + 16) = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        *(_DWORD *)(NotThreadSafe + 32) = 1;
        *(_QWORD *)(NotThreadSafe + 24) = v40;
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
        *(_QWORD *)(NotThreadSafe + 16) = *(_QWORD *)(*(_QWORD *)(NotThreadSafe + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
          pthread_mutex_unlock(*v50);
        (*(void (**)(uint64_t))(*(_QWORD *)NotThreadSafe + 40))(NotThreadSafe);
        v4 = v46;
        v3 = v47;
        v5 = v45;
        v9 = v53;
        v8 = v54;
        v7 = v52;
        v10 = v51;
        v12 = v44;
        v19.i32[0] = v57.i32[0];
      }
      v10 += v13;
      v9 += v14;
      v8 += v19.i32[0];
      v7 += v15 + (v14 << 6);
    }
    while (v11 < v3);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
}

void physx::Dy::KinematicCopyTask::~KinematicCopyTask(physx::Dy::KinematicCopyTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::KinematicCopyTask::getName(physx::Dy::KinematicCopyTask *this)
{
  return "KinematicCopyTask";
}

float physx::Dy::KinematicCopyTask::runInternal(physx::Dy::KinematicCopyTask *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  if (*((_DWORD *)this + 12))
  {
    v2 = 0;
    v3 = 112;
    do
    {
      v4 = (unint64_t)*(unsigned int *)(*((_QWORD *)this + 5) + 4 * v2) >> 7;
      v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 24) + 32 * v4 + 24);
      v6 = *(_QWORD *)(v5 + 40);
      ++v2;
      physx::Dy::copyToSolverBodyData(v6 + 64, v6 + 80, (float *)(v6 + 112), v6, v4, *((_QWORD *)this + 8) + v3, *(unsigned __int8 *)(v6 + 158), *(float *)(v6 + 124), *(float *)(v6 + 76), *(float *)(v6 + 128), *(float *)(v6 + 92));
      v7 = *(_QWORD *)(v5 + 40);
      *(_OWORD *)v5 = *(_OWORD *)v7;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v7 + 16);
      result = *(float *)(v7 + 24);
      *(float *)(v5 + 24) = result;
      v3 += 112;
    }
    while (v2 < *((unsigned int *)this + 12));
  }
  return result;
}

void physx::Dy::PxsForceThresholdTask::~PxsForceThresholdTask(physx::Dy::PxsForceThresholdTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsForceThresholdTask::getName(physx::Dy::PxsForceThresholdTask *this)
{
  return "PxsDynamics.createForceChangeThresholdStream";
}

void physx::Dy::PxsForceThresholdTask::runInternal(physx::Dy::PxsForceThresholdTask *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v2 = *((_QWORD *)this + 5);
  v3 = *(_QWORD *)(v2 + 8);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v2 + 684);
  physx::Dy::ThresholdTable::build(v2 + 24, v3);
  v4 = *((_QWORD *)this + 5);
  v5 = *(unsigned int *)(v4 + 760);
  v6 = *(_QWORD *)(v4 + 576 + 8 * v5);
  v7 = *(_QWORD *)(v4 + 576 + 8 * (1 - v5));
  *(_DWORD *)(v6 + 16) = 0;
  if (*(_DWORD *)(v2 + 64))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (float *)(*(_QWORD *)(v2 + 48) + v8);
      v11 = *(_QWORD *)(v3 + 8) + 32 * *(unsigned int *)v10;
      v12 = v10[1];
      if (v12 > (float)(*(float *)(v11 + 12) * *(float *)(*((_QWORD *)this + 5) + 88)))
      {
        *(float *)(v11 + 24) = v12;
        v13 = *(unsigned int *)(v6 + 16);
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFFFu) <= v13)
        {
          physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack((_QWORD *)v6, (_OWORD *)v11);
        }
        else
        {
          v14 = (_OWORD *)(*(_QWORD *)(v6 + 8) + 32 * v13);
          v15 = *(_OWORD *)(v11 + 16);
          *v14 = *(_OWORD *)v11;
          v14[1] = v15;
          ++*(_DWORD *)(v6 + 16);
        }
      }
      ++v9;
      v8 += 8;
    }
    while (v9 < *(unsigned int *)(v2 + 64));
    v4 = *((_QWORD *)this + 5);
  }
  v16 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v16 + 16) = 0;
  v17 = *(unsigned int *)(v7 + 16);
  v18 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v17)
  {
    if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFFFu) < v18)
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v16, *(_DWORD *)(v6 + 16));
    *(_DWORD *)(v16 + 16) = v18;
    memcpy(*(void **)(v16 + 8), *(const void **)(v6 + 8), (32 * v18));
    return;
  }
  v19 = (void **)(v4 + 592);
  physx::Dy::ThresholdTable::build(v2 + 24, v7);
  v20 = (v18 + v17);
  if ((*(_DWORD *)(v4 + 604) & 0x7FFFFFFFu) >= v20)
  {
    *(_DWORD *)(v4 + 600) = v20;
    if (!(_DWORD)v20)
    {
      v21 = 1;
      if (!(_DWORD)v18)
        goto LABEL_27;
      goto LABEL_17;
    }
  }
  else
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v4 + 592, v18 + v17);
    *(_DWORD *)(v4 + 600) = v20;
  }
  memset_pattern16(*v19, &unk_2261A7260, 4 * (v20 - 1) + 4);
  v21 = 0;
  if (!(_DWORD)v18)
    goto LABEL_27;
LABEL_17:
  v22 = 0;
  v23 = *(_QWORD *)(v6 + 8);
  v24 = *(_QWORD *)(v2 + 32);
  v26 = *(_QWORD *)(v2 + 48);
  v25 = *(_QWORD *)(v2 + 56);
  do
  {
    v27 = v23 + 32 * v22;
    v28 = *(_DWORD *)(v27 + 16);
    v29 = *(unsigned int *)(v27 + 20);
    v30 = ((v29 >> 7) & 0xFE000000FFFFFFFFLL | ((unint64_t)(v28 >> 7) << 32)) + ~(v29 >> 7 << 32);
    v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
    v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
    v33 = *(unsigned int *)(v24
                          + 4
                          * ((((v32 + ~(v32 << 27)) >> 31) ^ ((_DWORD)v32 + ~((_DWORD)v32 << 27)))
                           % *(_DWORD *)(v2 + 40)));
    if ((_DWORD)v33 != -1)
    {
      while (1)
      {
        v34 = *(unsigned int *)(v26 + 8 * v33);
        v35 = *(_QWORD *)(v7 + 8) + 32 * v34;
        if (*(_DWORD *)(v35 + 16) == v28
          && *(_DWORD *)(v35 + 20) == (_DWORD)v29
          && *(_QWORD *)v35 == *(_QWORD *)(v23 + 32 * v22))
        {
          break;
        }
        v33 = *(unsigned int *)(v25 + 4 * v33);
        if ((_DWORD)v33 == -1)
          goto LABEL_23;
      }
      v36 = *v19;
      *((_DWORD *)*v19 + v34) = 0;
      v36[(v17 + v22)] = 0;
    }
LABEL_23:
    ++v22;
  }
  while (v22 != v18);
LABEL_27:
  if ((v21 & 1) == 0)
  {
    v37 = 0;
    v38 = 0;
    while (!*((_DWORD *)*v19 + v38))
    {
      if (v38 < v17)
      {
        v42 = *(_QWORD *)(v7 + 8) + v37;
        goto LABEL_35;
      }
LABEL_39:
      ++v38;
      v37 += 32;
      if (v20 == v38)
        return;
    }
    if (v38 >= v17)
    {
      v42 = *(_QWORD *)(v6 + 8) + 32 * (v38 - v17);
LABEL_35:
      *(_QWORD *)&v48 = 0x7F0000007FLL;
      v43 = *(_OWORD *)(v42 + 16);
      v47 = *(_OWORD *)v42;
      v48 = v43;
      v41 = *(_DWORD *)(v42 + 24);
    }
    else
    {
      v39 = (__int128 *)(*(_QWORD *)(v7 + 8) + v37);
      *(_QWORD *)&v48 = 0x7F0000007FLL;
      v40 = v39[1];
      v47 = *v39;
      v48 = v40;
      v41 = 0;
    }
    DWORD2(v48) = v41;
    v44 = *(unsigned int *)(v16 + 16);
    if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFFFu) <= v44)
    {
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack((_QWORD *)v16, &v47);
    }
    else
    {
      v45 = (_OWORD *)(*(_QWORD *)(v16 + 8) + 32 * v44);
      v46 = v48;
      *v45 = v47;
      v45[1] = v46;
      ++*(_DWORD *)(v16 + 16);
    }
    goto LABEL_39;
  }
}

uint64_t physx::Dy::ThresholdTable::build(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    v5 = (2 * v3) | 1;
    v6 = *(_DWORD *)(result + 44);
    if (v3 <= v6 && v3 >= v6 >> 2)
    {
      v10 = *(void **)(result + 8);
      v8 = 4 * v5;
    }
    else
    {
      if (*(_QWORD *)result)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v8 = 4 * v5;
      if (4 * v5 + 12 * (_DWORD)v3)
        v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5 + 12 * (_DWORD)v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyThresholdTable.h", 198);
      else
        v9 = 0;
      *(_QWORD *)(v2 + 24) = v9;
      *(_QWORD *)(v2 + 32) = v9 + (8 * v3);
      v10 = (void *)(v9 + (12 * v3));
      *(_QWORD *)v2 = v9;
      *(_QWORD *)(v2 + 8) = v10;
      *(_DWORD *)(v2 + 44) = v3;
      *(_DWORD *)(v2 + 20) = v5;
    }
    memset(v10, 255, v8);
    v11 = 0;
    v12 = 0;
    *(_DWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 16) = v5;
    v13 = *(_QWORD *)(v2 + 8);
    v15 = *(_QWORD *)(v2 + 24);
    v14 = *(_QWORD *)(v2 + 32);
    v16 = *(_QWORD *)(a2 + 8);
    do
    {
      v17 = v16 + 32 * v11;
      v18 = *(_DWORD *)(v17 + 16);
      v19 = *(unsigned int *)(v17 + 20);
      v20 = *(float *)(v17 + 8);
      v21 = ((v19 >> 7) & 0xFE000000FFFFFFFFLL | ((unint64_t)(v18 >> 7) << 32)) + ~(v19 >> 7 << 32);
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27))) % v5;
      result = *(unsigned int *)(v13 + 4 * v24);
      if ((_DWORD)result == -1)
      {
LABEL_22:
        *(_DWORD *)(v14 + 4 * v12) = result;
        *(_DWORD *)(v13 + 4 * v24) = v12;
        v27 = v15 + 8 * v12;
        *(_DWORD *)v27 = v11;
        *(float *)(v27 + 4) = v20;
        ++v12;
      }
      else
      {
        v25 = *(unsigned int *)(v13 + 4 * v24);
        while (1)
        {
          v26 = v16 + 32 * *(unsigned int *)(v15 + 8 * v25);
          if (v18 == *(_DWORD *)(v26 + 16) && (_DWORD)v19 == *(_DWORD *)(v26 + 20))
            break;
          v25 = *(unsigned int *)(v14 + 4 * v25);
          if ((_DWORD)v25 == -1)
            goto LABEL_22;
        }
        *(float *)(v15 + 8 * v25 + 4) = v20 + *(float *)(v15 + 8 * v25 + 4);
      }
      ++v11;
    }
    while (v11 != v3);
    *(_DWORD *)(v2 + 40) = v12;
  }
  else
  {
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (*(_QWORD *)result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)v2 = 0;
  }
  return result;
}

void physx::Dy::PxsCreateFinalizeContactsTask::~PxsCreateFinalizeContactsTask(physx::Dy::PxsCreateFinalizeContactsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsCreateFinalizeContactsTask::getName(physx::Dy::PxsCreateFinalizeContactsTask *this)
{
  return "PxsDynamics.createFinalizeContacts";
}

uint64_t physx::Dy::PxsCreateFinalizeContactsTask::runInternal(physx::Dy::PxsCreateFinalizeContactsTask *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  __int128 v25;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  _WORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  _BYTE *v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  float *v61;
  int32x2_t v62;
  _BYTE *v63;
  float v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  unsigned __int16 *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  __int128 *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  _BYTE *v84;
  __int128 v85;
  __int16 v86;
  int v87;
  _WORD *v88;
  unint64_t v89;
  _BYTE *v90;
  __int128 *v91;
  int v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  unint64_t v107;
  uint64_t v108;
  _WORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t (**v113[5])(_QWORD, _QWORD);
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE v118[160];
  _QWORD v119[88];
  float32x2x2_t v120;

  v119[85] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 6);
  v1 = *((_QWORD *)this + 7);
  v3 = *((unsigned int *)this + 20);
  v4 = *((unsigned int *)this + 21);
  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  v7 = *(unsigned int *)(v5 + 148);
  v8 = *(float *)(v5 + 136);
  v9 = *(float *)(v5 + 120);
  v10 = *(float *)(v5 + 124);
  v11 = *(float *)(v5 + 88);
  if (*(float *)(v5 + 96) >= *(float *)(v5 + 92))
    v12 = *(float *)(v5 + 92);
  else
    v12 = *(float *)(v5 + 96);
  v13 = *(float *)(v5 + 128);
  v14 = *(_QWORD *)(v1 + 12032);
  v15 = *(_QWORD *)(v1 + 12040);
  v108 = *((_QWORD *)this + 8);
  v16 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v5 + 400));
  if (!v16)
  {
    v17 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v18 = "<allocation names disabled>";
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v17 + 24) + 16))(v17 + 24, 12343, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v19)
    {
      v16 = (v19 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v16 - 8) = v16 - v19;
    }
    else
    {
      v16 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v16, *(physx::PxcNpMemBlockPool **)(v108 + 408));
  }
  *(_QWORD *)(v16 + 11880) = 0;
  *(_DWORD *)(v16 + 11888) = 0;
  *(_DWORD *)(v16 + 12168) = 0;
  v20 = *(_DWORD *)(v1 + 12256);
  if ((*(_DWORD *)(v16 + 12172) & 0x7FFFFFFFu) < v20)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v16 + 12160, v20);
    v20 = *(_DWORD *)(v1 + 12256);
  }
  *(_DWORD *)(v16 + 12168) = v20;
  v21 = *(_QWORD *)(v16 + 12160);
  v113[0] = (uint64_t (**)(_QWORD, _QWORD))off_24ED8D5D0;
  v113[1] = (uint64_t (**)(_QWORD, _QWORD))(v1 + 11848);
  v107 = v16;
  v113[2] = (uint64_t (**)(_QWORD, _QWORD))(v16 + 11872);
  v113[3] = (uint64_t (**)(_QWORD, _QWORD))(v16 + 11824);
  v113[4] = (uint64_t (**)(_QWORD, _QWORD))(v16 + 12208);
  v22 = v3;
  if (v3 < v4)
  {
    v23 = 0;
    v24 = *(float *)(v108 + 132);
    v104 = v7;
    v25 = xmmword_2260E5D70;
    __asm { FMOV            V15.2S, #1.0 }
    v110 = v4;
    v111 = v21;
    v31 = v15;
    v102 = v2;
    v103 = v15;
    while (1)
    {
      v32 = (unsigned int *)(v31 + 8 * v22);
      v33 = *v32;
      v34 = *(unsigned __int16 *)(v14 + 48 * *v32 + 30);
      if (v34 == 2)
        break;
      if (v34 == 1)
      {
        v114 = 0u;
        v115 = 0u;
        v116 = 0u;
        v117 = 0u;
        v35 = v31 + 8 * v22;
        v38 = *(unsigned __int16 *)(v35 + 4);
        v37 = (_WORD *)(v35 + 4);
        v36 = v38;
        if (v38)
        {
          v109 = v37;
          v106 = (_DWORD *)(v31 + 8 * v22);
          v39 = 0;
          v40 = 0;
          v41 = *(_QWORD *)(v6 + 32);
          do
          {
            v42 = v33 + v40;
            v43 = v14 + 48 * (v33 + v40);
            v44 = *(_QWORD *)(v43 + 32);
            *((_QWORD *)&v116 + v40) = v44;
            v45 = (*(_DWORD *)(v6 + 4 * (*(_DWORD *)(v44 + 108) & 7)) + (*(_DWORD *)(v44 + 108) >> 3));
            *((_QWORD *)&v114 + v40) = v41 + 32 * v45;
            v46 = v2;
            if (*(__int16 *)(v43 + 16) == -1)
              v46 = v2 + 112 * *(unsigned int *)(v14 + 48 * v42 + 20);
            v47 = *(unsigned __int16 *)(v14 + 48 * v42 + 18);
            v48 = v2;
            if (v47 == 0xFFFF)
              v48 = v2 + 112 * *(unsigned int *)(v14 + 48 * v42 + 24);
            v49 = &v118[v39];
            *((_QWORD *)v49 + 5) = v46;
            *((_QWORD *)v49 + 6) = v48;
            v51 = *(_QWORD *)(v44 + 32);
            v50 = *(_QWORD *)(v44 + 40);
            v52 = *(_BYTE *)(v51 + 28);
            if (v50)
              v52 |= *(_BYTE *)(v50 + 28);
            *(_OWORD *)(v49 + 56) = *(_OWORD *)v51;
            *((_QWORD *)v49 + 9) = *(_QWORD *)(v51 + 16);
            *((_DWORD *)v49 + 20) = *(_DWORD *)(v51 + 24);
            if (v50)
            {
              v53 = *(_OWORD *)v50;
              v54 = *(_QWORD *)(v50 + 16);
              v55 = *(_DWORD *)(v50 + 24);
            }
            else
            {
              v54 = 0;
              v55 = 0;
              v53 = v25;
            }
            *(_OWORD *)(v49 + 84) = v53;
            v56 = &v118[v39];
            *(_QWORD *)(v56 + 100) = v54;
            *((_DWORD *)v56 + 27) = v55;
            *((_QWORD *)v56 + 16) = *(_QWORD *)(v44 + 24);
            *((_QWORD *)v56 + 22) = *(_QWORD *)(v41 + 32 * v45 + 16);
            *((_QWORD *)v56 + 2) = v43;
            *((_QWORD *)v56 + 3) = *(_QWORD *)v43;
            *((_QWORD *)v56 + 4) = *(_QWORD *)(v14 + 48 * v42 + 8);
            v57 = *(_WORD *)(v44 + 80);
            v56[150] = HIBYTE(v57) & 1;
            v56[149] = (v57 & 4) != 0;
            if ((v57 & 8) != 0)
              v58 = 8;
            else
              v58 = 1;
            *((_DWORD *)v56 + 28) = v58;
            if ((v57 & 0x10) != 0)
            {
              if (v47 == 0xFFFF)
                v60 = 2;
              else
                v60 = 8;
            }
            else
            {
              if ((v57 & 0x40) != 0)
                v59 = 1;
              else
                v59 = 2;
              if ((v57 & 0x400) != 0)
                v60 = 4;
              else
                v60 = v59;
            }
            *((_DWORD *)v56 + 29) = v60;
            v61 = (float *)&v118[v39];
            v62.i32[0] = *(unsigned __int8 *)(v44 + 84);
            v62.i32[1] = *(unsigned __int8 *)(v44 + 85);
            v120.val[0] = (float32x2_t)vbic_s8(_D15, (int8x8_t)vceqz_s32(v62));
            v120.val[1] = v120.val[0];
            vst2_f32(v61, v120);
            v63 = &v118[v39];
            *((_DWORD *)v63 + 38) = *(_DWORD *)(v44 + 92);
            *((_QWORD *)v63 + 20) = *(_QWORD *)(v44 + 72);
            v63[168] = *(_BYTE *)(v44 + 82);
            v64 = 3.4028e38;
            if ((v52 & 0x20) != 0)
              v64 = v24;
            *((float *)v63 + 39) = v64;
            ++v40;
            v39 += 208;
          }
          while (208 * v36 != v39);
          if (v36 != 4)
          {
LABEL_72:
            v105 = v22;
            v93 = 0;
            v94 = v118;
            do
            {
              v95 = v14 + 48 * (v93 + *v106);
              v96 = *(_QWORD *)(v6 + 32)
                  + 32
                  * (*(_DWORD *)(v6 + 4 * (*(_DWORD *)(*(_QWORD *)(v95 + 32) + 108) & 7))
                                 + (*(_DWORD *)(*(_QWORD *)(v95 + 32) + 108) >> 3));
              ((void (*)(_BYTE *, uint64_t, unint64_t, uint64_t (***)(_QWORD, _QWORD), uint64_t, float, float, float, float, float))physx::Dy::createFinalizeMethods[v104])(v94, v96, v107, v113, v21, v12, v9, v10, v8, v13);
              v21 = v111;
              *(_WORD *)(v95 + 28) = *(unsigned __int8 *)(v96 + 24);
              *(_QWORD *)(v95 + 40) = *(_QWORD *)(v96 + 16);
              ++v93;
              v66 = (unsigned __int16)*v109;
              v94 += 208;
            }
            while (v93 < v66);
            v22 = v105;
            v4 = v110;
            v2 = v102;
            v31 = v103;
            v25 = xmmword_2260E5D70;
LABEL_75:
            if ((_DWORD)v66)
            {
              v66 = v66;
              v97 = &v116;
              v98 = v119;
              do
              {
                v99 = *(_QWORD *)v97;
                v97 = (__int128 *)((char *)v97 + 8);
                *(_QWORD *)(v99 + 72) = *v98;
                *(_BYTE *)(v99 + 82) = *((_BYTE *)v98 + 8);
                v23 += *((unsigned __int16 *)v98 + 19);
                v98 += 26;
                --v66;
              }
              while (v66);
            }
            goto LABEL_80;
          }
          v65 = ((uint64_t (*)(__int128 *, unint64_t, _BYTE *, uint64_t (***)(_QWORD, _QWORD), float, float, float, float, float))physx::Dy::createFinalizeMethods4[v104])(&v114, v107, v118, v113, v12, v9, v10, v8, v13);
          LODWORD(v66) = (unsigned __int16)*v109;
          if (v65 == 2)
          {
            v21 = v111;
            v25 = xmmword_2260E5D70;
            goto LABEL_75;
          }
          v21 = v111;
          if (*v109)
            goto LABEL_72;
          v25 = xmmword_2260E5D70;
        }
      }
LABEL_80:
      if (++v22 == v4)
        goto LABEL_83;
    }
    v116 = v25;
    *(_QWORD *)&v117 = 0;
    DWORD2(v117) = 0;
    v69 = *((unsigned __int16 *)v32 + 2);
    v68 = (unsigned __int16 *)(v32 + 1);
    v67 = v69;
    if (v69)
    {
      v70 = 0;
      v71 = *(_QWORD *)(v108 + 232);
      v72 = &v115;
      do
      {
        v73 = (__int128 *)(v14 + 48 * v33);
        v74 = *((_QWORD *)v73 + 4);
        v75 = *(_QWORD *)(v74 + 40);
        if (v75)
          v76 = *(__int128 **)(v75 + 40);
        else
          v76 = &v116;
        v77 = *(_QWORD *)(v74 + 48);
        if (v77)
          v78 = *(__int128 **)(v77 + 40);
        else
          v78 = &v116;
        if (*(__int16 *)(v14 + 48 * v33 + 16) == -1)
          v79 = *(_DWORD *)(v14 + 48 * v33 + 20);
        else
          v79 = 0;
        if (*(__int16 *)(v14 + 48 * v33 + 18) == -1)
          v80 = *(_DWORD *)(v14 + 48 * v33 + 24);
        else
          v80 = 0;
        v81 = *(_QWORD *)(v74 + 32);
        v82 = *(unsigned __int16 *)(v74 + 8);
        v83 = *v73;
        *((_QWORD *)v72 - 1) = *(_QWORD *)(v74 + 16);
        *(_QWORD *)v72 = v81;
        *((_DWORD *)v72 + 2) = v82;
        *((_QWORD *)v72 - 2) = v74;
        v84 = &v118[v70];
        *((_QWORD *)v84 + 2) = v73;
        *(_OWORD *)(v84 + 56) = *v76;
        *((_DWORD *)v84 + 18) = *((_DWORD *)v76 + 4);
        *(_QWORD *)&v85 = *(_QWORD *)((char *)v76 + 20);
        *((_QWORD *)&v85 + 1) = *(_QWORD *)v78;
        *(_OWORD *)(v84 + 76) = v85;
        *(_OWORD *)(v84 + 92) = *(__int128 *)((char *)v78 + 8);
        *((_DWORD *)v84 + 27) = *((_DWORD *)v78 + 6);
        *((_QWORD *)v84 + 5) = v2 + 112 * v79;
        *((_QWORD *)v84 + 6) = v2 + 112 * v80;
        *(_OWORD *)(v84 + 24) = v83;
        *(_QWORD *)(v84 + 140) = *(_QWORD *)v74;
        *((_QWORD *)v84 + 19) = v71 + 32 * *(unsigned int *)(v74 + 72);
        v86 = *(_WORD *)(v74 + 10);
        v84[160] = HIBYTE(v86) & 1;
        v84[161] = (v86 & 0x80) != 0;
        v84[162] = (v86 & 0x20) != 0;
        v84[163] = (v86 & 0x200) != 0;
        *((_DWORD *)v84 + 37) = *(_DWORD *)(v74 + 76);
        v70 += 176;
        ++v33;
        v72 += 2;
      }
      while (176 * v67 != v70);
      if (v67 == 4)
      {
        v112 = 0;
        v87 = physx::Dy::setupSolverConstraint4((uint64_t)&v114, (uint64_t)v118, &v112, v113, v11, v12);
        v21 = v111;
        v23 += v112;
        v88 = v68;
        if (v87 == 2)
          goto LABEL_70;
      }
      else
      {
        v88 = v68;
      }
      if (*v88)
      {
        v89 = 0;
        v90 = v118;
        v91 = &v114;
        do
        {
          v92 = physx::Dy::SetupSolverConstraint((uint64_t)v91, (uint64_t)v90, v113, v21, v11, v12);
          v21 = v111;
          v23 += v92;
          ++v89;
          v90 += 176;
          v91 += 2;
        }
        while (v89 < *v68);
      }
    }
LABEL_70:
    v4 = v110;
    v25 = xmmword_2260E5D70;
    goto LABEL_80;
  }
  v23 = 0;
LABEL_83:
  *(_DWORD *)(v107 + 12316) += v23;
  v100 = *(_QWORD *)(v108 + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v100 + 8));
  *(_QWORD *)v107 = *(_QWORD *)v100;
  *(_QWORD *)v100 = v107;
  return pthread_mutex_unlock((pthread_mutex_t *)(v100 + 8));
}

void physx::Dy::PxsCreateArticConstraintsTask::~PxsCreateArticConstraintsTask(physx::Dy::PxsCreateArticConstraintsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsCreateArticConstraintsTask::getName(physx::Dy::PxsCreateArticConstraintsTask *this)
{
  return "PxsDynamics.createFinalizeContacts";
}

uint64_t physx::Dy::PxsCreateArticConstraintsTask::runInternal(physx::Dy::PxsCreateArticConstraintsTask *this)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 9);
  v4 = *(float *)(v2 + 132);
  v3 = *(float *)(v2 + 136);
  v5 = *(float *)(v2 + 120);
  v6 = *(float *)(v2 + 124);
  v7 = *(float *)(v2 + 88);
  if (*(float *)(v2 + 96) >= *(float *)(v2 + 92))
    v8 = *(float *)(v2 + 92);
  else
    v8 = *(float *)(v2 + 96);
  v9 = *(float *)(v2 + 128);
  v10 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 400));
  if (!v10)
  {
    v11 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v12 = "<allocation names disabled>";
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v11 + 24) + 16))(v11 + 24, 12343, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v13)
    {
      v10 = (v13 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v10 - 8) = v10 - v13;
    }
    else
    {
      v10 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v10, *(physx::PxcNpMemBlockPool **)(v2 + 408));
  }
  *(_QWORD *)(v10 + 11880) = 0;
  *(_DWORD *)(v10 + 11888) = 0;
  *(_DWORD *)(v10 + 12168) = 0;
  v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 12256);
  if ((*(_DWORD *)(v10 + 12172) & 0x7FFFFFFFu) < v14)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v10 + 12160, v14);
    v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 12256);
  }
  *(_DWORD *)(v10 + 12168) = v14;
  if (*((_DWORD *)this + 12))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v15);
      (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, _QWORD, float, float, float, float, float, float, float))(*(_QWORD *)v16 + 288))(v16, *((_QWORD *)this + 10), v10, *((_QWORD *)this + 7), *((_QWORD *)this + 8) + 11848, *(_QWORD *)(*((_QWORD *)this + 9) + 232), v7, v8, v3, v5, v6, v9, v4);
      ++v15;
    }
    while (v15 < *((unsigned int *)this + 12));
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 9) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v17 + 8));
  *(_QWORD *)v10 = *(_QWORD *)v17;
  *(_QWORD *)v17 = v10;
  return pthread_mutex_unlock((pthread_mutex_t *)(v17 + 8));
}

void physx::Dy::ThreadContext::~ThreadContext(physx::Dy::ThreadContext *this)
{
  int v2;
  int v4;
  int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v2 = *((_DWORD *)this + 3075);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1536) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 3047);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1522) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 3043);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1520) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 3039);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1518))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 3035);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1516))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 3031);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1514))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 3027);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1512))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v12 = *((_DWORD *)this + 3023);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1510))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v13 = *((_DWORD *)this + 3019);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1508))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v14 = *((_DWORD *)this + 2991);
  if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1494))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v15 = *((_DWORD *)this + 2987);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1492))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v16 = *((_DWORD *)this + 2983);
  if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1490))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v17 = *((_DWORD *)this + 2965);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 1481))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>::getName() [T = physx::"
           "PxConstraintBatchHeader]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::recreate(unint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = 32 * a2 + 135;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>::getName() [T = physx::PxSolverBody]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v8 - 8) = v8 - result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)a1 + 2);
  v10 = *a1;
  if ((_DWORD)v9)
  {
    v11 = v8 + 32 * v9;
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v10;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v12 + 12) = *(_DWORD *)(v10 + 12);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v12 + 28) = *(_DWORD *)(v10 + 28);
      v12 += 32;
      v10 += 32;
    }
    while (v12 < v11);
    v10 = *a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v10 - *(_QWORD *)(v10 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::recreate(unint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = a2;
  v4 = 112 * a2 + 135;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>::getName() [T = physx::PxSolverBodyData]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v8 - 8) = v8 - result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = v8 + 112 * v9;
    v12 = v8;
    do
    {
      *(_OWORD *)v12 = *(_OWORD *)v10;
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(v10 + 16);
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v12 + 40) = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v10 + 56);
      *(_DWORD *)(v12 + 64) = *(_DWORD *)(v10 + 64);
      v13 = *(_QWORD *)(v10 + 68);
      *(_DWORD *)(v12 + 76) = *(_DWORD *)(v10 + 76);
      *(_QWORD *)(v12 + 68) = v13;
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(v10 + 80);
      *(_QWORD *)(v12 + 96) = *(_QWORD *)(v10 + 96);
      *(_DWORD *)(v12 + 104) = *(_DWORD *)(v10 + 104);
      *(_DWORD *)(v12 + 108) = *(_DWORD *)(v10 + 108);
      v12 += 112;
      v10 += 112;
    }
    while (v12 < v11);
    v10 = *a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v10 - *(_QWORD *)(v10 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  unsigned int v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v3 = result;
  if (a2
    && ((v4 = physx::shdfnd::Foundation::mInstance,
         !(*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      ? (v5 = "<allocation names disabled>")
      : (v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::getName() [T = physx"
              "::PxSolverConstraintDesc]"),
        (result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 48 * a2 + 135, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553)) != 0))
  {
    v6 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v6 - 8) = v6 - result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(char **)v3;
  if (v7)
  {
    v9 = v6 + 48 * v7;
    v10 = (_OWORD *)v6;
    do
    {
      v11 = *(_OWORD *)v8;
      v12 = *((_OWORD *)v8 + 2);
      v10[1] = *((_OWORD *)v8 + 1);
      v10[2] = v12;
      *v10 = v11;
      v10 += 3;
      v8 += 48;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(char **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, &v8[-*((_QWORD *)v8 - 1)]);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsIndexedContactManager,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>::getName() [T = physx:"
           ":PxsIndexedContactManager]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 32 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[2 * v7];
    v10 = v6;
    do
    {
      v11 = *v8;
      v12 = v8[1];
      v8 += 2;
      *v10 = v11;
      v10[1] = v12;
      v10 += 2;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>::getName() [T = physx::Cm::SpatialVector]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 32 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(_OWORD **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[2 * v7];
    v10 = *(_OWORD **)v3;
    v11 = v6;
    do
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11 += 2;
      v10 += 2;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsBodyCore *,physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>::getName() [T = physx::PxsBodyCore *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>::getName() [T = physx::PxsRigidBody *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationV *,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>::getName() [T = physx::Dy::"
           "ArticulationV *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

float32x2_t physx::Dy::FeatherstoneArticulation::computeLinkAccelerationInv(uint64_t a1, _QWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  float32x2_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  float32x2_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float32x2_t v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float32x2_t v22;
  float v23;
  uint64_t v24;
  _OWORD *v25;
  float32x2_t v27;
  float32x2_t v29;
  float32x2_t v35;
  float32x2_t *v36;
  float32x2_t v37;
  float32x2_t v38;
  float32_t v39;
  float32x2_t *v40;
  float32x2_t v41;

  v2 = (_OWORD *)a2[1];
  v3 = a2[2];
  v4 = a2[7];
  result = 0;
  *v2 = 0u;
  v2[1] = 0u;
  v6 = *(unsigned int *)(a1 + 440);
  if (v6 >= 2)
  {
    v7 = *(_QWORD *)(a1 + 432);
    v8 = *(_QWORD *)(a1 + 352) + 96;
    v9 = *(_QWORD *)(a1 + 448);
    v10 = *(_QWORD *)(a1 + 456);
    for (i = 1; i != v6; ++i)
    {
      v12 = 0;
      v13 = 0.0;
      if (v4)
      {
        v14 = v10 + 80 * i;
        v15 = *(unsigned __int8 *)(v14 + 76);
        v16 = 0.0;
        v17 = 0;
        if (*(_BYTE *)(v14 + 76))
        {
          v18 = (float *)(v4 + 4 * *(unsigned int *)(v14 + 72));
          v19 = (float *)v8;
          do
          {
            v20 = *v18++;
            v21 = v20;
            v12 = vadd_f32(v12, vmul_n_f32(*(float32x2_t *)(v19 - 5), v20));
            v13 = v13 + (float)(v20 * *(v19 - 3));
            v22 = vmul_n_f32(*(float32x2_t *)(v19 - 2), v20);
            v23 = *v19;
            v19 += 6;
            v17 = vadd_f32(v17, v22);
            v16 = v16 + (float)(v21 * v23);
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        v16 = 0.0;
        v17 = 0;
      }
      v24 = v9 + 160 * i;
      v25 = &v2[2 * *(unsigned int *)(v7 + 40 * i + 32)];
      _D6 = *(int32x2_t *)v25;
      v27 = *(float32x2_t *)(v24 + 124);
      _D16.i32[1] = v27.i32[1];
      _D16.i32[0] = *(_DWORD *)(v24 + 120);
      v29 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25, 0);
      __asm { FMLS            S18, S4, V6.S[1] }
      v35.i32[1] = HIDWORD(*(_QWORD *)v25);
      v35.i32[0] = *((_DWORD *)v25 + 2);
      v36 = (float32x2_t *)(v3 + 32 * i);
      v37 = vadd_f32(*(float32x2_t *)v25, *v36);
      v29.i32[0] = v35.i32[0];
      v38 = vadd_f32((float32x2_t)v25[1], vmls_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D16, v35)), v29, v27));
      v39 = v16 + (float)((float)(_S18 + *((float *)v25 + 6)) + v36[3].f32[0]);
      v40 = (float32x2_t *)&v2[2 * i];
      result = vadd_f32(v12, v37);
      v40[1].f32[0] = v13 + (float)(v29.f32[0] + v36[1].f32[0]);
      v40[1].i32[1] = 0;
      v41 = vadd_f32(v17, vadd_f32(v38, v36[2]));
      *v40 = result;
      v40[2] = v41;
      v40[3].f32[0] = v39;
      v40[3].i32[1] = 0;
      v8 += 76;
    }
  }
  return result;
}

float32x2_t *physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(float32x2_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  float32x2_t v10;
  float v11;
  float32x2_t *v12;
  float32_t v14;
  float32x2_t v15;
  float32x2_t v17;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float *v26;

  v3 = (result[55].i32[0] - 1);
  if (result[55].i32[0] != 1)
  {
    v4 = result[54];
    v5 = result[56];
    v6 = result[57];
    v7 = *(_QWORD *)&result[44] + 76 * v3 + 12;
    do
    {
      v8 = *(_QWORD *)&v5 + 160 * v3;
      v9 = (float32x2_t *)(a2 + 32 * v3);
      v10 = v9[2];
      v11 = v9[3].f32[0];
      result = v9 + 3;
      v12 = (float32x2_t *)(a2 + 32 * *(unsigned int *)(*(_QWORD *)&v4 + 40 * v3 + 32));
      _D4 = *v9;
      v14 = v9[1].f32[0] + v12[1].f32[0];
      v15 = *(float32x2_t *)(v8 + 124);
      _D16.i32[1] = v15.i32[1];
      _D16.i32[0] = *(_DWORD *)(v8 + 120);
      v17 = (float32x2_t)vdup_lane_s32((int32x2_t)*v9, 0);
      __asm { FMLA            S18, S2, V4.S[1] }
      _D4.i32[0] = v9[1].i32[0];
      v17.i32[0] = _D4.i32[0];
      *v12 = vadd_f32(*v9, *v12);
      v12[1].f32[0] = v14;
      v12[2] = vadd_f32(vadd_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D4, vneg_f32(_D16))), v17, v15), v10), v12[2]);
      v12[3].f32[0] = (float)(_S18 + v11) + v12[3].f32[0];
      v23 = *(_QWORD *)&v6 + 80 * v3;
      v24 = *(unsigned __int8 *)(v23 + 76);
      if (*(_BYTE *)(v23 + 76))
      {
        v25 = (float *)(a3 + 4 * *(unsigned int *)(v23 + 72));
        v26 = (float *)v7;
        do
        {
          *v25++ = (float)((float)((float)(v26[1] * v9->f32[1]) + (float)(*v26 * v9->f32[0]))
                         + (float)(v26[2] * v9[1].f32[0]))
                 + (float)((float)((float)(*(v26 - 2) * v9[2].f32[1]) + (float)(*(v26 - 3) * v9[2].f32[0]))
                         + (float)(*(v26 - 1) * result->f32[0]));
          v26 += 6;
          --v24;
        }
        while (v24);
      }
      v7 -= 76;
      --v3;
    }
    while ((_DWORD)v3);
  }
  return result;
}

float physx::Dy::FeatherstoneArticulation::computeZAForceInv(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  float *v6;
  float result;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x2_t v40;
  float v41;

  v3 = *(unsigned int *)(a2 + 440);
  if ((_DWORD)v3)
  {
    v4 = (float **)(*(_QWORD *)(a2 + 432) + 16);
    v5 = *(_QWORD *)(a3 + 8) + 16;
    v6 = (float *)(*(_QWORD *)(a3 + 24) + 16);
    result = 1.0;
    do
    {
      v9 = *v4;
      v4 += 5;
      v8 = v9;
      v11 = v9[30];
      v10 = v9[31];
      v12 = 1.0 / v10;
      v13 = v10 == 0.0;
      v14 = v9[28];
      v15 = v9[29];
      if (v13)
        v12 = 0.0;
      v16 = 1.0 / v14;
      v17 = 1.0 / v15;
      v18 = 1.0 / v11;
      v13 = v14 == 0.0;
      v19 = *(float *)(v5 - 16) + *(float *)(v5 - 16);
      v20 = *(float *)(v5 - 12) + *(float *)(v5 - 12);
      v21 = *(float *)(v5 - 8) + *(float *)(v5 - 8);
      v23 = v8[2];
      v22 = v8[3];
      if (v13)
        v16 = 0.0;
      v24 = (float)(v22 * v22) + -0.5;
      v25 = *v8;
      v26 = v8[1];
      v13 = v15 == 0.0;
      v27 = (float)((float)(v20 * v26) + (float)(*v8 * v19)) + (float)(v23 * v21);
      if (v13)
        v17 = 0.0;
      v28 = (float)((float)(v19 * v24) - (float)((float)((float)(v26 * v21) - (float)(v23 * v20)) * v22))
          + (float)(v25 * v27);
      v13 = v11 == 0.0;
      v29 = (float)((float)(v20 * v24) - (float)((float)((float)(v23 * v19) - (float)(v25 * v21)) * v22))
          + (float)(v26 * v27);
      v30 = -(float)((float)((float)(v25 * v20) - (float)(v26 * v19)) * v22);
      if (v13)
        v18 = 0.0;
      v31 = (float)(v30 + (float)(v21 * v24)) + (float)(v23 * v27);
      v32 = (float)(v16 * v28) + (float)(v16 * v28);
      v33 = (float)(v17 * v29) + (float)(v17 * v29);
      v34 = (float)(v18 * v31) + (float)(v18 * v31);
      v35 = (float)((float)(v26 * v33) + (float)(v25 * v32)) + (float)(v23 * v34);
      v36 = (float)((float)(v22 * (float)((float)(v26 * v34) - (float)(v23 * v33))) + (float)(v32 * v24))
          + (float)(v25 * v35);
      v37 = (float)(v22 * (float)((float)(v23 * v32) - (float)(v25 * v34))) + (float)(v33 * v24);
      v38 = (float)((float)(v22 * (float)((float)(v25 * v33) - (float)(v26 * v32))) + (float)(v34 * v24))
          + (float)(v23 * v35);
      v39 = v12 * *(float *)(v5 + 8);
      v40 = *(float32x2_t *)v5;
      v5 += 32;
      *((float32x2_t *)v6 - 2) = vadd_f32(vmul_n_f32(v40, v12), *(float32x2_t *)(v6 - 4));
      *(v6 - 2) = v39 + *(v6 - 2);
      v41 = (float)(v37 + (float)(v26 * v35)) + v6[1];
      *v6 = *v6 + v36;
      v6[1] = v41;
      v6[2] = v38 + v6[2];
      v6 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

float physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float **v5;
  float result;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  if (a2)
  {
    v3 = a2;
    v4 = a3 + 52;
    v5 = (float **)(a1 + 16);
    result = 1.0;
    do
    {
      v8 = *v5;
      v5 += 5;
      v7 = v8;
      v9 = v8[31];
      if (v9 == 0.0)
        v10 = 0.0;
      else
        v10 = 1.0 / v9;
      *(_DWORD *)(v4 - 20) = 0;
      *(_OWORD *)(v4 - 36) = 0uLL;
      *(_OWORD *)(v4 - 52) = 0uLL;
      *(float *)(v4 - 16) = v10;
      *(_QWORD *)(v4 - 12) = 0;
      *(_DWORD *)(v4 - 4) = 0;
      *(float *)v4 = v10;
      *(_QWORD *)(v4 + 4) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      *(float *)(v4 + 16) = v10;
      v11 = *v7;
      v12 = v7[1];
      v13 = v7[2];
      v14 = v7[3];
      v15 = v12 + v12;
      v16 = v13 + v13;
      v17 = v12 * (float)(v12 + v12);
      v18 = v13 * (float)(v13 + v13);
      v19 = (float)(v11 + v11) * v12;
      v20 = (float)(v11 + v11) * v13;
      v21 = (float)(v11 + v11) * v14;
      v22 = v15 * v13;
      v23 = v15 * v14;
      v24 = v16 * v14;
      v25 = (float)(1.0 - v17) - v18;
      v26 = v19 + v24;
      v27 = v20 - v23;
      v28 = v19 - v24;
      v29 = 1.0 - (float)(v11 * (float)(v11 + v11));
      v30 = v29 - v18;
      v31 = v22 + v21;
      v32 = v20 + v23;
      v33 = v22 - v21;
      v34 = v29 - v17;
      v35 = v7[28];
      v36 = v7[29];
      if (v35 == 0.0)
        v37 = 0.0;
      else
        v37 = 1.0 / v35;
      if (v36 == 0.0)
        v38 = 0.0;
      else
        v38 = 1.0 / v36;
      v39 = v7[30];
      if (v39 == 0.0)
        v40 = 0.0;
      else
        v40 = 1.0 / v39;
      v41 = v25 * v37;
      v42 = v26 * v37;
      v43 = v28 * v38;
      v44 = v32 * v40;
      v45 = v33 * v40;
      v46 = (float)((float)(v28 * (float)(v28 * v38)) + (float)((float)(v25 * v37) * v25))
          + (float)((float)(v32 * v40) * v32);
      v47 = (float)((float)(v30 * (float)(v30 * v38)) + (float)((float)(v26 * v37) * v26))
          + (float)((float)(v33 * v40) * v33);
      v48 = (float)((float)(v31 * (float)(v31 * v38)) + (float)((float)(v27 * v37) * v27))
          + (float)((float)(v34 * v40) * v34);
      v49 = (float)((float)(v30 * v43) + (float)(v41 * v26)) + (float)(v44 * v33);
      *(float *)(v4 + 20) = v46;
      *(float *)(v4 + 24) = v49;
      v50 = (float)((float)(v31 * v43) + (float)(v41 * v27)) + (float)(v44 * v34);
      *(float *)(v4 + 28) = v50;
      *(float *)(v4 + 32) = v49;
      v51 = (float)((float)(v31 * (float)(v30 * v38)) + (float)(v42 * v27)) + (float)(v45 * v34);
      *(float *)(v4 + 36) = v47;
      *(float *)(v4 + 40) = v51;
      *(float *)(v4 + 44) = v50;
      *(float *)(v4 + 48) = v51;
      *(float *)(v4 + 52) = v48;
      v4 += 112;
      --v3;
    }
    while (v3);
  }
  return result;
}

float32x2_t *physx::Dy::FeatherstoneArticulation::inverseDynamic(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, int a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int8x8_t v16;
  uint64_t v17;

  physx::Dy::FeatherstoneArticulation::computeLinkVelocities(a1, (uint64_t)a2, (int **)a4);
  if (a5)
    physx::Dy::FeatherstoneArticulation::computeC(a1, (uint64_t)a2, (uint64_t *)a4);
  else
    bzero(*(void **)(a4 + 16), (32 * a2[55].i32[0]));
  physx::Dy::FeatherstoneArticulation::computeZ(v10, v11, v12, v13, v14, v15, v16, a1, (uint64_t)a2, a3, (_QWORD *)a4);
  physx::Dy::FeatherstoneArticulation::computeLinkAccelerationInv((uint64_t)a2, (_QWORD *)a4);
  physx::Dy::FeatherstoneArticulation::computeZAForceInv(v17, (uint64_t)a2, a4);
  return physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(a2, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 64));
}

void physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, int a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  unsigned int *v28;
  float32x2_t *v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  unsigned int v33;
  float32x2_t *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float v42;
  float32x2_t *v43;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v48;
  float32x2_t v49;
  float32_t v55;
  float32x2_t v56;
  float32_t v57;
  int v58;
  float32x2_t *v59;
  uint64_t v60;
  float32x2_t *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  float32x2_t v78;
  float v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float32x2_t v99;
  float32x2_t v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  float v113;
  float v114;
  float v115;
  float v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float v136;
  float v137;
  float32x2_t v138;
  float v139;
  float v140;
  float32x2_t v141;
  float32x2_t v142;
  float v143;
  float32x2_t v144;
  float32x2_t v145;
  float v146;
  float v147;
  uint64_t v148;
  float32x2_t v149;
  int32x2_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  float v158;
  float v159;
  float v160;
  float *v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float32x2_t *v171;
  uint64_t v172;
  float32x2_t v173;
  float v174;
  float v175;
  float32x2_t *v176;
  float32_t v177;
  int32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32_t v183;
  float32x2_t v184;
  uint64_t v185;
  uint64_t v186;
  float *v187;
  float *v188;
  _QWORD *v189;
  _DWORD v190[2];
  float32x2_t v191;
  int v192;
  float v193;
  __int32 v194;
  float v195;
  int v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x2_t v204;
  float32x2_t v205;
  float32x2_t v206;
  float32x2_t v207;
  float32x2_t v208;
  float32x2_t v209;
  float v210;
  float v211;

  physx::Dy::FeatherstoneArticulation::computeLinkVelocities(a1, a2, (int **)a4);
  if (a5)
    physx::Dy::FeatherstoneArticulation::computeC(a1, a2, (uint64_t *)a4);
  else
    bzero(*(void **)(a4 + 16), (32 * *(_DWORD *)(a2 + 440)));
  physx::Dy::FeatherstoneArticulation::computeZ(v10, v11, v12, v13, v14, v15, v16, a1, a2, a3, (_QWORD *)a4);
  physx::Dy::FeatherstoneArticulation::computeLinkAccelerationInv(a2, (_QWORD *)a4);
  physx::Dy::FeatherstoneArticulation::computeZAForceInv(v17, a2, a4);
  v18 = *(_QWORD *)(a4 + 24);
  v189 = (_QWORD *)a4;
  v19 = *(_QWORD *)(a4 + 40);
  v20 = *(_QWORD *)(a2 + 432);
  v21 = *(_DWORD *)(a2 + 440);
  physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(v20, v21, v19);
  v22 = v21 - 1;
  if (v21 != 1)
  {
    v23 = *(_QWORD *)(a2 + 448);
    v24 = v22 - 1;
    v25 = v18 + 32 * v22 + 16;
    v26 = 160 * v22 + 124;
    v27 = (float *)(v19 + 112 * v22 + 108);
    v28 = (unsigned int *)(v20 + 40 * v22 + 32);
    do
    {
      v197 = *(float32x2_t *)(v27 - 27);
      v198 = *(float32x2_t *)(v27 - 25);
      v199 = *(float32x2_t *)(v27 - 23);
      v200 = *(float32x2_t *)(v27 - 21);
      v201 = *(float32x2_t *)(v27 - 19);
      v202 = *(float32x2_t *)(v27 - 17);
      v203 = *(float32x2_t *)(v27 - 15);
      v204 = *(float32x2_t *)(v27 - 13);
      v205 = *(float32x2_t *)(v27 - 11);
      v206 = *(float32x2_t *)(v27 - 9);
      v207 = *(float32x2_t *)(v27 - 7);
      v208 = *(float32x2_t *)(v27 - 5);
      v209 = *(float32x2_t *)(v27 - 3);
      v210 = *(v27 - 1);
      v211 = *v27;
      v29 = (float32x2_t *)(v23 + v26);
      v30 = v29[-1].f32[1];
      v190[0] = 0;
      v31 = *v29;
      v32 = vneg_f32(*v29);
      v190[1] = HIDWORD(*(unint64_t *)v29);
      v191 = v32;
      v192 = 0;
      v193 = v30;
      v194 = v31.i32[0];
      v195 = -v30;
      v196 = 0;
      physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)v190, (uint64_t)&v197);
      v33 = *v28;
      v28 -= 10;
      v34 = (float32x2_t *)(v19 + 112 * v33);
      v35 = v34[1];
      *v34 = vadd_f32(v197, *v34);
      v34[1] = vadd_f32(v198, v35);
      v36 = v34[3];
      v34[2] = vadd_f32(v199, v34[2]);
      v34[3] = vadd_f32(v200, v36);
      v37 = v34[5];
      v34[4] = vadd_f32(v201, v34[4]);
      v34[5] = vadd_f32(v202, v37);
      v38 = v34[7];
      v34[6] = vadd_f32(v203, v34[6]);
      v34[7] = vadd_f32(v204, v38);
      v39 = v34[9];
      v34[8] = vadd_f32(v205, v34[8]);
      v34[9] = vadd_f32(v206, v39);
      v40 = v34[11];
      v34[10] = vadd_f32(v207, v34[10]);
      v34[11] = vadd_f32(v208, v40);
      v34[12] = vadd_f32(v209, v34[12]);
      v34[13].f32[0] = v210 + v34[13].f32[0];
      v23 = *(_QWORD *)(a2 + 448);
      v41 = *(float *)(v25 - 8);
      v42 = *(float *)(v25 + 8);
      v43 = (float32x2_t *)(v18 + 32 * v33);
      _D2 = *(float32x2_t *)(v25 - 16);
      v45 = vadd_f32(_D2, *v43);
      v46 = *(float32x2_t *)(v23 + v26);
      _D7.i32[1] = v46.i32[1];
      v48 = *(float32x2_t *)v25;
      v25 -= 32;
      _D7.i32[0] = *(_DWORD *)(v23 + v26 - 4);
      v49 = (float32x2_t)vdup_lane_s32((int32x2_t)_D2, 0);
      __asm { FMLA            S16, S5, V2.S[1] }
      _D2.f32[0] = v41;
      v49.f32[0] = v41;
      v55 = v41 + v43[1].f32[0];
      *v43 = v45;
      v56 = vadd_f32(vadd_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D2, vneg_f32(_D7))), v49, v46), v48), v43[2]);
      v57 = (float)(_S16 + v42) + v43[3].f32[0];
      v58 = v24--;
      v43[1].f32[0] = v55;
      v43[3].f32[0] = v57;
      v26 -= 160;
      v27 -= 28;
      v43[2] = v56;
    }
    while (v58);
  }
  v59 = (float32x2_t *)v189[1];
  v60 = v189[5];
  v61 = (float32x2_t *)v189[3];
  v62 = *(float *)v60;
  v63 = *(float *)(v60 + 12);
  v64 = *(float *)(v60 + 24);
  v65 = *(float *)(v60 + 76) + *(float *)(v60 + 84);
  v66 = *(float *)(v60 + 92) + *(float *)(v60 + 100);
  v67 = (float)(*(float *)(v60 + 72) + *(float *)(v60 + 72)) * 0.5;
  v68 = v65 * 0.5;
  v69 = (float)(*(float *)(v60 + 80) + *(float *)(v60 + 96)) * 0.5;
  v70 = (float)(*(float *)(v60 + 88) + *(float *)(v60 + 88)) * 0.5;
  v71 = (float)(*(float *)(v60 + 104) + *(float *)(v60 + 104)) * 0.5;
  v72 = *(float32x2_t *)(v60 + 4);
  v73 = *(float32x2_t *)(v60 + 16);
  v74 = *(float32x2_t *)(v60 + 28);
  v75.i32[1] = HIDWORD(*(_QWORD *)(v60 + 64));
  v75.i32[0] = *(_DWORD *)(v60 + 56);
  v76 = (float)(*(float *)(v60 + 40) + *(float *)(v60 + 48)) * 0.5;
  v77 = (float)(*(float *)(v60 + 44) + *(float *)(v60 + 60)) * 0.5;
  v78 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(vadd_f32(v75, *(float32x2_t *)(v60 + 64)), (float32x2_t)0x3F0000003F000000));
  v79 = (float)(v70 * v71) - (float)((float)(v66 * 0.5) * (float)(v66 * 0.5));
  v80.f32[0] = (float)((float)(v66 * 0.5) * v69) - (float)((float)(v65 * 0.5) * v71);
  v81.f32[0] = (float)((float)(v65 * 0.5) * (float)(v66 * 0.5)) - (float)(v70 * v69);
  v82 = (float)((float)((float)(v65 * 0.5) * v80.f32[0]) + (float)(v79 * v67)) + (float)(v81.f32[0] * v69);
  v83 = (float32x2_t)0x3F80000000000000;
  v84 = 0;
  v85 = 1.0;
  v86 = 1.0;
  v87 = (float32x2_t)0x3F80000000000000;
  v88 = 0;
  if (v82 != 0.0)
  {
    v80.f32[1] = (float)(v71 * v67) - (float)(v69 * v69);
    v85 = v79 * (float)(1.0 / v82);
    v87 = vmul_n_f32(v80, 1.0 / v82);
    v81.f32[1] = (float)(v67 * (float)-(float)(v66 * 0.5)) + (float)(v69 * v68);
    v88 = vmul_n_f32(v81, 1.0 / v82);
    v86 = (float)((float)(v68 * (float)-(float)(v65 * 0.5)) + (float)(v67 * v70)) * (float)(1.0 / v82);
  }
  v89 = vneg_f32(v73);
  v90 = (float32x2_t)vdup_lane_s32((int32x2_t)v87, 0);
  v99 = vmul_lane_f32((float32x2_t)__PAIR64__(v90.u32[1], LODWORD(v85)), v72, 1);
  v91 = (float)(vmuls_lane_f32(-v63, v88, 1) - (float)(v62 * v88.f32[0])) - (float)(v64 * v86);
  v92 = vsub_f32(vsub_f32(vmul_n_f32(v87, -v63), vmul_n_f32((float32x2_t)__PAIR64__(v90.u32[1], LODWORD(v85)), v62)), vmul_n_f32(v88, v64));
  v93 = vsub_f32(vsub_f32(vmul_n_f32(v87, v89.f32[0]), vmul_n_f32((float32x2_t)__PAIR64__(v90.u32[1], LODWORD(v85)), v72.f32[0])), vmul_n_f32(v88, v74.f32[0]));
  v94 = vsub_f32(vsub_f32(vmul_lane_f32(v87, v89, 1), v99), vmul_lane_f32(v88, v74, 1));
  v95 = (float)(v62 * v93.f32[0]) + vmuls_lane_f32(v63, v93, 1);
  v96 = (float)(v62 * v94.f32[0]) + vmuls_lane_f32(v63, v94, 1);
  v97 = vmul_f32(v72, v93).f32[0] + vmuls_lane_f32(v73.f32[0], v93, 1);
  _S31 = (float)((float)(*(float *)(v60 + 36) + *(float *)(v60 + 36)) * 0.5)
       + (float)((float)((float)(v62 * v92.f32[0]) + vmuls_lane_f32(v63, v92, 1)) + (float)(v64 * v91));
  v99.f32[0] = v77
             + (float)(vaddv_f32(vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v72, (int32x2_t)v73), v92))
                     + vmuls_lane_f32(v91, v74, 1));
  v100 = vsub_f32(vsub_f32(vmul_lane_f32(v89, v88, 1), vmul_n_f32(v72, v88.f32[0])), vmul_n_f32(v74, v86));
  v101 = v100.f32[1];
  v89.f32[0] = vmul_f32(v74, v100).f32[0];
  v102 = v95 + (float)(v64 * v100.f32[0]);
  v103 = v96 + vmuls_lane_f32(v64, v100, 1);
  v104 = vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v92, (int32x2_t)v94), v72.f32[0]), vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v92, (int32x2_t)v94), v73.f32[0])), vmul_n_f32((float32x2_t)__PAIR64__(v100.u32[1], LODWORD(v91)), v74.f32[0]));
  v105 = vadd_f32(vadd_f32(vmul_lane_f32((float32x2_t)vzip1_s32((int32x2_t)v94, (int32x2_t)v93), v72, 1), vmul_lane_f32((float32x2_t)vzip2_s32((int32x2_t)v94, (int32x2_t)v93), v73, 1)), (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v100, v74, 1)));
  v106 = v76 + v102;
  v107 = v77 + v103;
  v108 = (float)((float)(*(float *)(v60 + 52) + *(float *)(v60 + 52)) * 0.5) + (float)(v97 + v89.f32[0]);
  v109 = vadd_f32((float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v76)), v104);
  v110 = vadd_f32(v78, v105);
  _D1.i32[0] = vdup_lane_s32((int32x2_t)v109, 1).u32[0];
  _D1.f32[1] = v108;
  _D25 = vmla_f32(vmul_f32(v110, vneg_f32(v109)), (float32x2_t)vzip1_s32((int32x2_t)v99, (int32x2_t)v110), _D1);
  v113 = vmlas_n_f32(-(float)(v108 * v99.f32[0]), v110.f32[1], v109.f32[0]);
  __asm { FMLA            S1, S31, V25.S[1] }
  v114 = _D1.f32[0] + (float)(v113 * v107);
  v115 = 1.0;
  v116 = 1.0;
  if (v114 != 0.0)
  {
    v117.f32[0] = (float)(v99.f32[0] * v106) - (float)(v110.f32[1] * _S31);
    v83 = vmul_n_f32(_D25, 1.0 / v114);
    v116 = vmlas_n_f32(-(float)(v99.f32[0] * v107), _S31, v110.f32[0]) * (float)(1.0 / v114);
    v117.f32[1] = v113;
    v84 = vmul_n_f32(v117, 1.0 / v114);
    v115 = (float)((float)(_S31 * v108) - (float)(v106 * v109.f32[0])) * (float)(1.0 / v114);
  }
  v118 = (float32x2_t)__PAIR64__(v93.u32[1], v92.u32[0]);
  v119 = (float32x2_t)vrev64_s32((int32x2_t)v84);
  v120 = (float32x2_t)vrev64_s32((int32x2_t)__PAIR64__(LODWORD(v116), v83.u32[0]));
  v121 = (float32x2_t)__PAIR64__(v92.u32[1], v93.u32[0]);
  v122 = (float)(vmuls_lane_f32(v91, v84, 1) + vmul_f32(v100, v84).f32[0]) + (float)(v100.f32[1] * v115);
  v123 = vadd_f32(vmul_f32(v92, v83), vmul_f32(v93, v120));
  v120.i32[1] = v83.i32[1];
  v124 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v91), v100.u32[0]), v120);
  v125 = vadd_f32(v123, vmul_f32(v94, v84));
  v126 = vadd_f32(vadd_f32(vmul_f32(v92, (float32x2_t)vrev64_s32((int32x2_t)v83)), vmul_f32(v93, (float32x2_t)__PAIR64__(LODWORD(v116), v83.u32[0]))), vmul_f32(v94, v119));
  v127 = vadd_f32(vadd_f32(vmul_f32((float32x2_t)__PAIR64__(v92.u32[1], v93.u32[0]), v84), vmul_f32((float32x2_t)__PAIR64__(v93.u32[1], v92.u32[0]), v119)), vmul_n_f32(v94, v115));
  v128 = vadd_f32(vadd_f32(v124, vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)__PAIR64__(LODWORD(v91), v100.u32[0])), v83.f32[0])), vmul_lane_f32(v84, v100, 1));
  v129 = (float)((float)(v91 * v126.f32[0]) + vmul_f32(v100, v125).f32[0]) + (float)(v100.f32[1] * v127.f32[0]);
  v130 = (float32x2_t)vext_s8((int8x8_t)v125, (int8x8_t)v126, 4uLL);
  v131 = vmul_f32(v92, v130);
  v132 = vmul_f32(v92, (float32x2_t)vrev64_s32((int32x2_t)v130));
  v133 = (float32x2_t)vext_s8((int8x8_t)v126, (int8x8_t)v125, 4uLL);
  v134 = vmul_f32(v93, v133);
  v135 = vadd_f32(v132, vmul_f32(v93, (float32x2_t)vrev64_s32((int32x2_t)v133)));
  v136 = (float)(vmuls_lane_f32(v91, v125, 1) + vmul_lane_f32(v100, v126, 1).f32[0])
       + vmuls_lane_f32(v100.f32[1], v127, 1);
  v137 = vmuls_lane_f32(v91, v128, 1) + vmul_f32(v100, v128).f32[0];
  v138 = vadd_f32(vadd_f32(vmul_f32(v121, v128), vmul_f32(v118, (float32x2_t)vrev64_s32((int32x2_t)v128))), vmul_n_f32(v94, v122));
  v139 = v137 + (float)(v101 * v122);
  v140 = v61[1].f32[0];
  v141 = vadd_f32(v90, vadd_f32(vadd_f32(v131, v134), vmul_f32(v94, (float32x2_t)vrev64_s32((int32x2_t)v127))));
  v87.f32[0] = v85;
  v142 = vadd_f32(v87, vadd_f32(v135, vmul_f32(v94, v127)));
  v143 = v86 + v139;
  v144 = (float32x2_t)vrev64_s32((int32x2_t)*v61);
  v145 = v61[2];
  v135.i32[0] = v61[3].i32[0];
  v146 = (float)((float)(vmuls_lane_f32(COERCE_FLOAT(*v61), v128, 1) + vmul_f32(v128, v144).f32[0])
               + (float)(v122 * v140))
       + (float)((float)((float)((float)(v88.f32[0] + v129) * v145.f32[0]) + vmuls_lane_f32(v88.f32[1] + v136, v145, 1))
               + (float)(v143 * v135.f32[0]));
  v147 = (float)((float)(vmuls_lane_f32(COERCE_FLOAT(*v61), v84, 1) + vmul_f32(v84, v144).f32[0]) + (float)(v115 * v140))
       + (float)(vmlas_n_f32(vmuls_lane_f32(v127.f32[1], v145, 1), v145.f32[0], v127.f32[0])
               + (float)(v122 * v135.f32[0]));
  v148 = v189[8];
  *v59 = vneg_f32(vadd_f32(vadd_f32(vadd_f32(vmul_f32(v125, v144), vmul_f32(v126, *v61)), vmul_n_f32(v127, v140)), vadd_f32(vadd_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v145), v141), vmul_f32(v145, v142)), vmul_n_f32(vadd_f32(v88, v138), v135.f32[0]))));
  v59[1].f32[0] = -v146;
  v149 = vmul_n_f32(v84, v140);
  v150 = (int32x2_t)vmul_n_f32(v144, v83.f32[0]);
  v83.f32[0] = v116;
  v59[2] = vneg_f32((float32x2_t)vrev64_s32((int32x2_t)vadd_f32(vadd_f32(vadd_f32((float32x2_t)vrev64_s32(v150), vmul_f32(v83, v144)), v149), vmla_n_f32(vmla_n_f32(vmul_lane_f32((float32x2_t)vzip2_s32((int32x2_t)v126, (int32x2_t)v125), v145, 1), (float32x2_t)vzip1_s32((int32x2_t)v125, (int32x2_t)v126), v145.f32[0]), v128, v135.f32[0]))));
  v59[3].f32[0] = -v147;
  v59[1].i32[1] = 0;
  v59[3].i32[1] = 0;
  v151 = *(unsigned int *)(a2 + 440);
  if (v151 >= 2)
  {
    v152 = *(_QWORD *)(a2 + 432);
    v153 = *(_QWORD *)(a2 + 352) + 96;
    v154 = 1;
    v155 = *(_QWORD *)(a2 + 448);
    v156 = *(_QWORD *)(a2 + 456);
    do
    {
      v157 = (float *)(v155 + 160 * v154);
      v158 = v157[30];
      v159 = v157[31];
      v160 = v157[32];
      v161 = (float *)&v59[4 * *(unsigned int *)(v152 + 40 * v154 + 32)];
      v163 = v161[1];
      v162 = v161[2];
      v164 = *v161;
      v165 = (float)(v160 * v163) - (float)(v159 * v162);
      v166 = (float)(v158 * v162) - (float)(v160 * *v161);
      v167 = (float)(v159 * *v161) - (float)(v158 * v163);
      v168 = v161[4] + v165;
      v169 = v166 + v161[5];
      v170 = v167 + v161[6];
      v171 = &v59[4 * v154];
      v171->f32[0] = v164;
      v171->f32[1] = v163;
      v171[1].f32[0] = v162;
      v171[1].i32[1] = 0;
      v171[2].f32[0] = v168;
      v171[2].f32[1] = v169;
      v171[3].f32[0] = v170;
      v171[3].i32[1] = 0;
      v172 = v60 + 112 * v154;
      v173.i32[0] = *(_DWORD *)(v172 + 8);
      v174 = *(float *)(v172 + 20);
      v175 = *(float *)(v172 + 32);
      v176 = &v61[4 * v154];
      v177 = (float)((float)((float)((float)(v164 * v173.f32[0]) + (float)(v163 * v174)) + (float)(v162 * v175))
                   + (float)((float)((float)(v168 * *(float *)(v172 + 44)) + (float)(v169 * *(float *)(v172 + 56)))
                           + (float)(v170 * *(float *)(v172 + 68))))
           + v176[1].f32[0];
      v178 = *(int32x2_t *)v172;
      v179 = *(float32x2_t *)(v172 + 12);
      v180 = *(float32x2_t *)(v172 + 24);
      v181 = v176[2];
      v182 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v172, v164), vmul_n_f32(v179, v163)), vmul_n_f32(v180, v162)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v172 + 36), v168), vmul_n_f32(*(float32x2_t *)(v172 + 48), v169)), vmul_n_f32(*(float32x2_t *)(v172 + 60), v170))), *v176);
      v183 = (float)((float)(vmlas_n_f32(vmuls_lane_f32(v169, v180, 1), v168, v180.f32[0]) + (float)(v175 * v170))
                   + (float)((float)((float)(v164 * *(float *)(v172 + 80)) + (float)(v163 * *(float *)(v172 + 92)))
                           + (float)(v162 * *(float *)(v172 + 104))))
           + v176[3].f32[0];
      v176[1].f32[0] = v177;
      v176[1].i32[1] = 0;
      v173.f32[1] = v174;
      v184 = vadd_f32(vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v178, (int32x2_t)v179), v169), (float32x2_t)vzip1_s32(v178, (int32x2_t)v179), v168), v173, v170), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v172 + 72), v164), vmul_n_f32(*(float32x2_t *)(v172 + 84), v163)), vmul_n_f32(*(float32x2_t *)(v172 + 96), v162))), v181);
      *v176 = v182;
      v176[2] = v184;
      v176[3].f32[0] = v183;
      v176[3].i32[1] = 0;
      v185 = v156 + 80 * v154;
      v186 = *(unsigned __int8 *)(v185 + 76);
      if (*(_BYTE *)(v185 + 76))
      {
        v187 = (float *)(v148 + 4 * *(unsigned int *)(v185 + 72));
        v188 = (float *)v153;
        do
        {
          *v187++ = (float)((float)((float)(*(v188 - 1) * v176->f32[1]) + (float)(*(v188 - 2) * v176->f32[0]))
                          + (float)(*v188 * v176[1].f32[0]))
                  + (float)((float)((float)(*(v188 - 4) * v176[2].f32[1]) + (float)(*(v188 - 5) * v176[2].f32[0]))
                          + (float)(*(v188 - 3) * v176[3].f32[0]));
          v188 += 6;
          --v186;
        }
        while (v186);
      }
      ++v154;
      v153 += 76;
    }
    while (v154 != v151);
  }
}

BOOL physx::Dy::FeatherstoneArticulation::applyCacheToDest(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2, uint64_t a3, void *__dst, void *a5, void *a6, void *a7, char *a8)
{
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;

  v15 = *((_DWORD *)this + 222);
  v16 = *a8;
  if ((*a8 & 1) != 0)
  {
    memcpy(__dst, *(const void **)(a3 + 24), (4 * *((_DWORD *)a2 + 119)));
    v17 = *((_DWORD *)this + 222) | 4;
    *((_DWORD *)this + 222) = v17;
    v16 = *a8;
    if ((*a8 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v17 = *((_DWORD *)this + 222);
  if ((*a8 & 2) != 0)
  {
LABEL_5:
    memcpy(a5, *(const void **)(a3 + 32), (4 * *((_DWORD *)a2 + 119)));
    v17 = *((_DWORD *)this + 222) | 8;
    *((_DWORD *)this + 222) = v17;
    v16 = *a8;
  }
LABEL_6:
  if ((v16 & 0x40) == 0)
  {
    if ((v16 & 4) == 0)
      goto LABEL_15;
LABEL_14:
    memcpy(a6, *(const void **)(a3 + 40), (4 * *((_DWORD *)a2 + 119)));
    *((_DWORD *)this + 222) |= 2u;
    v16 = *a8;
    goto LABEL_15;
  }
  v18 = *((_QWORD *)this + 76);
  if ((v16 & 4) != 0)
  {
    v19 = *(float **)(a3 + 72);
    v20 = *(float **)(v18 + 16);
    v21 = v20[12] + v20[12];
    v22 = v20[13] + v20[13];
    v23 = v20[14] + v20[14];
    v25 = v19[2];
    v24 = v19[3];
    v26 = (float)(v24 * v24) + -0.5;
    v27 = v19[1];
    v28 = (float)((float)(v22 * v27) + (float)(*v19 * v21)) + (float)(v25 * v23);
    v29 = (float)((float)(v24 * (float)((float)(v27 * v23) - (float)(v25 * v22))) + (float)(v21 * v26))
        + (float)(*v19 * v28);
    v30 = (float)((float)(v24 * (float)((float)(v25 * v21) - (float)(*v19 * v23))) + (float)(v22 * v26))
        + (float)(v27 * v28);
    v31 = (float)((float)(v24 * (float)((float)(*v19 * v22) - (float)(v27 * v21))) + (float)(v23 * v26))
        + (float)(v25 * v28);
    v32 = v19[4] + v29;
    v33 = v19[5] + v30;
    v35 = v20[10];
    v34 = v20[11];
    v36 = v20[8];
    v37 = v20[9];
    v38 = (float)(*v19 * v34) + (float)(v24 * v36);
    v39 = (float)((float)((float)(v27 * v34) + (float)(v24 * v37)) + (float)(v25 * v36)) - (float)(v35 * *v19);
    v40 = (float)((float)((float)(v25 * v34) + (float)(v24 * v35)) + (float)(*v19 * v37)) - (float)(v36 * v27);
    v41 = -(float)(*v19 * v36);
    v42 = v19[6];
    *v20 = (float)(v38 + (float)(v27 * v35)) - (float)(v37 * v25);
    v20[1] = v39;
    v20[2] = v40;
    v20[3] = (float)((float)(v41 + (float)(v24 * v34)) - (float)(v27 * v37)) - (float)(v25 * v35);
    v20[4] = v32;
    v20[5] = v33;
    v20[6] = v42 + v31;
  }
  if ((v16 & 1) != 0)
  {
    v43 = *(_QWORD *)(a3 + 72);
    v44 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v44 + 64) = *(_QWORD *)(v43 + 28);
    *(_DWORD *)(v44 + 72) = *(_DWORD *)(v43 + 36);
    *(_QWORD *)(v44 + 80) = *(_QWORD *)(v43 + 40);
    *(_DWORD *)(v44 + 88) = *(_DWORD *)(v43 + 48);
  }
  *((_DWORD *)this + 222) = v17 | 0x20;
  if ((v16 & 4) != 0)
    goto LABEL_14;
LABEL_15:
  if ((v16 & 8) != 0)
  {
    memcpy(a7, *(const void **)(a3 + 48), (4 * *((_DWORD *)a2 + 119)));
    *((_DWORD *)this + 222) |= 0x10u;
    v16 = *a8;
  }
  if ((v16 & 4) != 0)
  {
    physx::Dy::FeatherstoneArticulation::teleportLinks(this, a2);
    v16 = *a8;
  }
  if ((v16 & 5) != 0)
    physx::Dy::FeatherstoneArticulation::computeLinkVelocities(this, a2);
  return v15 == 0;
}

uint64_t physx::Dy::FeatherstoneArticulation::packJointData(uint64_t this, const float *a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  float *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(this + 616);
  if (v3 >= 2)
  {
    v4 = *(_QWORD *)(this + 608);
    v5 = *(_QWORD *)(this + 632);
    for (i = 1; i != v3; ++i)
    {
      v7 = 0;
      v8 = 0;
      v9 = &a3[*(unsigned int *)(v5 + 80 * i + 72)];
      v10 = *(_QWORD *)(v4 + 40 * i + 24) + 258;
      do
      {
        this = *(unsigned __int8 *)(v10 + v7);
        if (*(_BYTE *)(v10 + v7))
          v9[v8++] = a2[v7];
        ++v7;
      }
      while (v7 != 6);
      a2 += 6;
    }
  }
  return this;
}

uint64_t physx::Dy::FeatherstoneArticulation::unpackJointData(uint64_t this, const float *a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  const float *v9;
  uint64_t v10;
  float v11;

  v3 = *(unsigned int *)(this + 616);
  if (v3 >= 2)
  {
    v4 = *(_QWORD *)(this + 608);
    v5 = *(_QWORD *)(this + 632);
    for (i = 1; i != v3; ++i)
    {
      v7 = 0;
      v8 = 0;
      v9 = &a2[*(unsigned int *)(v5 + 80 * i + 72)];
      v10 = *(_QWORD *)(v4 + 40 * i + 24) + 258;
      do
      {
        this = *(unsigned __int8 *)(v10 + v7);
        if (*(_BYTE *)(v10 + v7))
          v11 = v9[v8++];
        else
          v11 = 0.0;
        a3[v7++] = v11;
      }
      while (v7 != 6);
      a3 += 6;
    }
  }
  return this;
}

void physx::Dy::FeatherstoneArticulation::initializeCommonData(physx::Dy::FeatherstoneArticulation *this)
{
  char *v2;

  v2 = (char *)this + 176;
  physx::Dy::FeatherstoneArticulation::jcalc(this, (physx::Dy::FeatherstoneArticulation *)((char *)this + 176), 0);
  physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2P((uint64_t)this, (uint64_t)v2);
  physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2B((uint64_t)this, (uint64_t)v2);
  physx::Dy::FeatherstoneArticulation::computeSpatialInertia((uint64_t)this, (uint64_t)v2);
  *((_BYTE *)this + 684) = 0;
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedGravityForce(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  float32x2_t *v12;
  float32x2_t v13;
  float v14;
  pthread_mutex_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  float v23;
  _QWORD v24[11];
  float32x2_t v25;
  float v26;

  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 420, "Articulation::getGeneralisedGravityForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v12 = (float32x2_t *)(a1 + 176);
  v13 = vneg_f32(*a2);
  v14 = -a2[1].f32[0];
  v25 = v13;
  v26 = v14;
  v15 = *(pthread_mutex_t ***)(a3 + 104);
  v16 = *(unsigned int *)(a1 + 616);
  if ((**(_BYTE **)(a1 + 664) & 1) != 0)
  {
    v18 = physx::PxcScratchAllocator::alloc(*(pthread_mutex_t ***)(a3 + 104), 32 * (int)v16, 0);
    v19 = v18;
    if ((_DWORD)v16)
    {
      v20 = v18 + 16;
      v21 = (uint64_t *)(*(_QWORD *)(a1 + 608) + 16);
      do
      {
        v22 = *v21;
        v21 += 5;
        v23 = 1.0 / *(float *)(v22 + 124);
        *(float32x2_t *)(v20 - 16) = vmul_n_f32(v13, v23);
        *(float *)(v20 - 8) = v23 * v14;
        *(_QWORD *)v20 = 0;
        *(_DWORD *)(v20 + 8) = 0;
        v20 += 32;
        --v16;
      }
      while (v16);
    }
    physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(v12, v18, *(_QWORD *)(a3 + 48));
    return physx::PxcScratchAllocator::free((uint64_t)v15, v19);
  }
  else
  {
    v24[9] = 0;
    v24[10] = 0;
    v17 = physx::PxcScratchAllocator::alloc(v15, 240 * (int)v16, 0);
    v24[0] = v17;
    v24[1] = v17 + (32 * v16);
    v24[2] = v17 + ((_DWORD)v16 << 6);
    v24[3] = v17 + (96 * v16);
    v24[6] = 0;
    v24[7] = 0;
    v24[8] = *(_QWORD *)(a3 + 48);
    v24[4] = 0;
    v24[5] = v17 + ((_DWORD)v16 << 7);
    physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v12, &v25, (uint64_t)v24, 0);
    return physx::PxcScratchAllocator::free((uint64_t)v15, v17);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getCoriolisAndCentrifugalForce(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  float32x2_t *v12;
  int v13;
  pthread_mutex_t **v14;
  unint64_t v15;
  float32x2_t v16;
  int v17;
  _QWORD v18[11];

  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 515, "Articulation::getCoriolisAndCentrifugalForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v12 = (float32x2_t *)(a1 + 176);
  v13 = *(_DWORD *)(a1 + 616);
  v14 = (pthread_mutex_t **)a2[13];
  v18[9] = 0;
  v18[10] = 0;
  v15 = physx::PxcScratchAllocator::alloc(v14, 240 * v13, 0);
  v18[0] = v15;
  v18[1] = v15 + (32 * v13);
  v18[2] = v15 + (v13 << 6);
  v18[3] = v15 + (96 * v13);
  v18[6] = a2[3];
  v18[7] = 0;
  v18[8] = a2[6];
  v18[4] = 0;
  v18[5] = v15 + (v13 << 7);
  if ((**(_BYTE **)(a1 + 664) & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v12, &v16, (uint64_t)v18, 1);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v12, &v16, (uint64_t)v18, 1);
  }
  return physx::PxcScratchAllocator::free((uint64_t)v14, v15);
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedExternalForce(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  float32x2_t *v12;
  uint64_t v13;
  pthread_mutex_t **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float **v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float32x2_t v66;
  int v67;
  _QWORD v68[11];

  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 545, "Articulation::getCoriolisAndCentrifugalForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v12 = (float32x2_t *)(a1 + 176);
  v13 = *(unsigned int *)(a1 + 616);
  v14 = (pthread_mutex_t **)a2[13];
  v68[9] = 0;
  v68[10] = 0;
  v15 = physx::PxcScratchAllocator::alloc(v14, 240 * (int)v13, 0);
  v68[0] = v15;
  v68[1] = v15 + (32 * v13);
  v68[2] = v15 + ((_DWORD)v13 << 6);
  v68[3] = v15 + (96 * v13);
  v68[5] = v15 + ((_DWORD)v13 << 7);
  v68[6] = 0;
  v16 = a2[6];
  v68[7] = 0;
  v68[8] = v16;
  v17 = physx::PxcScratchAllocator::alloc(v14, 32 * (int)v13, 0);
  v18 = v17;
  if ((_DWORD)v13)
  {
    v19 = (float **)(*(_QWORD *)(a1 + 608) + 16);
    v20 = (float *)(*a2 + 24);
    v21 = (float *)(v17 + 16);
    do
    {
      v22 = *v19;
      v19 += 5;
      v23 = v22[31];
      v24 = v23 * *(v20 - 4);
      *((float32x2_t *)v21 - 2) = vmul_n_f32(*(float32x2_t *)(v20 - 6), v23);
      *(v21 - 2) = v24;
      v25 = *v22;
      v26 = v22[1];
      v27 = v22[2];
      v28 = v22[3];
      v29 = v26 + v26;
      v30 = v27 + v27;
      v31 = v26 * (float)(v26 + v26);
      v32 = v27 * (float)(v27 + v27);
      v33 = (float)(v25 + v25) * v26;
      v34 = (float)(v25 + v25) * v27;
      v35 = (float)(v25 + v25) * v28;
      v36 = v29 * v27;
      v37 = v29 * v28;
      v38 = v30 * v28;
      v39 = (float)(1.0 - v31) - v32;
      v40 = v33 + v38;
      v41 = v34 - v37;
      v42 = v33 - v38;
      v43 = 1.0 - (float)(v25 * (float)(v25 + v25));
      v44 = v43 - v32;
      v45 = v36 + v35;
      v46 = v34 + v37;
      v47 = v36 - v35;
      v48 = v43 - v31;
      v49 = v22[28];
      v50 = v22[29];
      v51 = v49 * v39;
      v52 = v49 * v40;
      v53 = v50 * v42;
      v54 = v50 * v44;
      v55 = v22[30];
      v56 = v46 * v55;
      v57 = v47 * v55;
      v58 = (float)((float)(v42 * (float)(v50 * v42)) + (float)((float)(v49 * v39) * v39))
          + (float)((float)(v46 * v55) * v46);
      v59 = (float)((float)(v44 * (float)(v50 * v44)) + (float)((float)(v49 * v40) * v40))
          + (float)((float)(v47 * v55) * v47);
      v60 = (float)((float)(v45 * (float)(v50 * v45)) + (float)((float)(v49 * v41) * v41))
          + (float)((float)(v48 * v55) * v48);
      v61 = (float)((float)(v44 * v53) + (float)(v51 * v40)) + (float)(v56 * v47);
      v62 = (float)((float)(v45 * v53) + (float)(v51 * v41)) + (float)(v56 * v48);
      v63 = (float)((float)(v45 * v54) + (float)(v52 * v41)) + (float)(v57 * v48);
      v64 = *(v20 - 2);
      v65 = *(v20 - 1);
      *(float *)&v22 = *v20;
      v20 += 8;
      *v21 = (float)(*(float *)&v22 * v62) + (float)((float)(v64 * v58) + (float)(v65 * v61));
      v21[1] = (float)(*(float *)&v22 * v63) + (float)((float)(v64 * v61) + (float)(v65 * v59));
      v21[2] = (float)(*(float *)&v22 * v60) + (float)((float)(v64 * v62) + (float)(v65 * v63));
      v21 += 8;
      --v13;
    }
    while (v13);
  }
  v68[4] = v17;
  if ((**(_BYTE **)(a1 + 664) & 1) != 0)
  {
    v66 = 0;
    v67 = 0;
    physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v12, &v66, (uint64_t)v68, 0);
  }
  else
  {
    v66 = 0;
    v67 = 0;
    physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v12, &v66, (uint64_t)v68, 0);
  }
  physx::PxcScratchAllocator::free((uint64_t)v14, v15);
  return physx::PxcScratchAllocator::free((uint64_t)v14, v18);
}

uint64_t physx::Dy::FeatherstoneArticulation::getJointForce(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  float32x2_t *v11;
  pthread_mutex_t **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  float32x2_t v17;
  int v18;
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 596, "ArticulationHelper::getJointForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v11 = (float32x2_t *)(a1 + 176);
  v12 = (pthread_mutex_t **)a2[13];
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v13 = a2[4];
  v14 = a2[6];
  v23 = 0;
  *((_QWORD *)&v21 + 1) = v13;
  *(_QWORD *)&v22 = v14;
  v15 = *(_DWORD *)(a1 + 616);
  v16 = physx::PxcScratchAllocator::alloc(v12, 240 * v15, 0);
  v19[0] = v16;
  v19[1] = v16 + (32 * v15);
  v19[2] = v16 + (v15 << 6);
  v19[3] = v16 + (96 * v15);
  *((_QWORD *)&v20 + 1) = v16 + (v15 << 7);
  if ((**(_BYTE **)(a1 + 664) & 1) != 0)
  {
    v17 = 0;
    v18 = 0;
    physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v11, &v17, (uint64_t)v19, 0);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v11, &v17, (uint64_t)v19, 0);
  }
  return physx::PxcScratchAllocator::free((uint64_t)v12, v16);
}

void physx::Dy::FeatherstoneArticulation::getCoefficientMatrix(float32x2_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, int32x4_t a15, char a16)
{
  float v19;
  float32x2_t *v21;
  float32x2_t v22;
  __int32 v23;
  uint64_t v24;
  float v25;
  float *v26;
  pthread_mutex_t **v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  double v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  __int32 v51;
  char *v52;
  char v54;
  uint64_t v55;
  float32x2_t v56;
  int v57;
  char v58[32];
  unint64_t v59;
  float v60;
  int v61;
  float v62;
  float v63;
  float v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;

  if (a1[85].i8[4])
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 893, "ArticulationHelper::getCoefficientMatrix() commonInit need to be called first to initialize data!", a6, a7, a8, a16);
  }
  else
  {
    v19 = *(float *)&a9;
    v21 = a1 + 22;
    physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia((physx::Dy::FeatherstoneArticulation *)a1, (physx::Dy::ArticulationData *)&a1[22], a9, a10, a11, a12, a13, a14, a15);
    v22 = a1[76];
    v23 = a1[77].i32[0];
    v55 = (uint64_t)a1;
    v51 = a1[81].i32[1];
    v52 = *(char **)(a5 + 80);
    bzero(v52, 4 * a4 * v51);
    if (a4)
    {
      v24 = 0;
      v54 = **(_BYTE **)(v55 + 664);
      v50 = (32 * v23);
      v49 = a4;
      v48 = (96 * v23);
      v47 = a5;
      v25 = 1.0 / v19;
      v46 = a3;
      do
      {
        (*(void (**)(uint64_t, float *))(*(_QWORD *)(a3 + 24 * v24) + 320))(a3 + 24 * v24, &v72);
        v26 = *(float **)(*(_QWORD *)&v22 + 40 * a2 + 16);
        v27 = *(pthread_mutex_t ***)(a5 + 104);
        v71 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        v28 = physx::PxcScratchAllocator::alloc(v27, 240 * v23, 0);
        *(_QWORD *)&v66 = v28;
        *((_QWORD *)&v66 + 1) = v28 + v50;
        *(_QWORD *)&v67 = v28 + (v23 << 6);
        *((_QWORD *)&v67 + 1) = v28 + v48;
        *((_QWORD *)&v68 + 1) = v28 + (v23 << 7);
        bzero((void *)(v28 + v48), v50);
        v30 = v26[2];
        v29 = v26[3];
        v31 = (float)(v29 * v29) + -0.5;
        v32 = v26[1];
        v33 = (float)((float)((float)(v73 + v73) * v32) + (float)(*v26 * (float)(v72 + v72)))
            + (float)(v30 * (float)(v74 + v74));
        *(float *)&v34 = (float)((float)((float)(v72 + v72) * v31)
                               - (float)((float)((float)(v32 * (float)(v74 + v74)) - (float)(v30 * (float)(v73 + v73)))
                                       * v29))
                       + (float)(*v26 * v33);
        *(float *)&v35 = (float)((float)((float)(v73 + v73) * v31)
                               - (float)((float)((float)(v30 * (float)(v72 + v72)) - (float)(*v26 * (float)(v74 + v74)))
                                       * v29))
                       + (float)(v32 * v33);
        v36 = (float)((float)((float)(v74 + v74) * v31)
                    - (float)((float)((float)(*v26 * (float)(v73 + v73)) - (float)(v32 * (float)(v72 + v72))) * v29))
            + (float)(v30 * v33);
        v37 = (float)((float)(v32 * (float)(v76 + v76)) + (float)(*v26 * (float)(v75 + v75)))
            + (float)(v30 * (float)(v77 + v77));
        v38 = (float)((float)((float)(v75 + v75) * v31)
                    - (float)((float)((float)(v32 * (float)(v77 + v77)) - (float)(v30 * (float)(v76 + v76))) * v29))
            + (float)(*v26 * v37);
        v39 = (float)((float)((float)(v76 + v76) * v31)
                    - (float)((float)((float)(v30 * (float)(v75 + v75)) - (float)(*v26 * (float)(v77 + v77))) * v29))
            + (float)(v32 * v37);
        v40 = (float)((float)(v77 + v77) * v31)
            - (float)((float)((float)(*v26 * (float)(v76 + v76)) - (float)(v32 * (float)(v75 + v75))) * v29);
        v59 = __PAIR64__(v35, v34);
        v60 = v36;
        v61 = 0;
        v62 = v38;
        v63 = v39;
        v64 = v40 + (float)(v30 * v37);
        v65 = 0;
        physx::Dy::FeatherstoneArticulation::getZ(a2, v21, v28 + v48, (float32x2_t *)&v59);
        v41 = *(unsigned int *)(v55 + 652);
        v42 = (4 * v41);
        v43 = (char *)physx::PxcScratchAllocator::alloc(v27, 8 * (int)v41, 0);
        bzero(v43, v42);
        physx::Dy::FeatherstoneArticulation::getDeltaVWithDeltaJV(v54 & 1, a2, (uint64_t)v21, v28 + v48, (uint64_t)v43, (uint64_t)v58, v44);
        v45 = (float *)v43;
        if ((_DWORD)v41)
        {
          do
          {
            *(float *)((char *)v45 + v42) = v25 * *v45;
            ++v45;
            --v41;
          }
          while (v41);
        }
        physx::Dy::FeatherstoneArticulation::computeSpatialInertia(v55, (uint64_t)v21);
        *(_QWORD *)&v69 = 0;
        *((_QWORD *)&v69 + 1) = &v43[v42];
        *(_QWORD *)&v68 = 0;
        *(_QWORD *)&v70 = &v52[4 * (v51 * v24)];
        v56 = 0;
        v57 = 0;
        if ((v54 & 1) != 0)
          physx::Dy::FeatherstoneArticulation::inverseDynamic(v55, v21, &v56, (uint64_t)&v66, 0);
        else
          physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(v55, (uint64_t)v21, &v56, (uint64_t)&v66, 0);
        a3 = v46;
        a5 = v47;
        physx::PxcScratchAllocator::free((uint64_t)v27, (unint64_t)v43);
        physx::PxcScratchAllocator::free((uint64_t)v27, v28);
        ++v24;
      }
      while (v24 != v49);
    }
  }
}

void physx::Dy::FeatherstoneArticulation::getImpulseSelfResponseInv(uint64_t a1, char a2, unsigned int a3, unsigned __int32 a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, float32x2_t *a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  float v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  float32x2_t v20;
  float32x2_t v21;
  double v23;
  int v24;
  float v25;
  int32x2_t v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  unsigned __int32 v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x2_t *v40;
  float32x2_t v41;
  float32x2_t *v42;
  unsigned int v43;
  float v44;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  float *v53;
  float *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int32x2_t *v58;
  int32x2_t *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  __int32 *v66;
  unsigned int v67;
  float v68;
  int32x2_t v72;
  float v73;
  float v74;
  float32x4_t v82;
  float32x4_t v83;
  int32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  __int32 v93;
  __int32 v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  float v98;
  __int32 v99;
  __int32 v100;
  __int32 v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  unsigned int v107;
  float32x2_t v108;
  __int32 v109;
  int32x2_t v110;
  float v111;
  _BYTE v112[12];
  int v113;
  int32x2_t v114;
  float v115;
  int v116;
  float32x2_t v117;
  float v118;
  int v119;
  float32x2_t v120;
  float v121;
  int v122;
  unint64_t v123;
  float v124;
  int v125;
  float32x2_t v126;
  float v127;
  int v128;
  __int128 v129;
  __int128 v130;
  float32x2_t v131;
  float v132;
  float32x2_t v133;
  float v134;
  uint64_t v135;

  v10 = a3;
  v135 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a1 + 608);
  v13 = a4;
  if (*(_DWORD *)(v12 + 40 * a4 + 32) == a3)
  {
    v16 = a6[1].f32[0];
    v17 = a6[3].f32[0];
    *(float *)&v18 = -a7[1].f32[0];
    *(float *)&v19 = -a7[3].f32[0];
    *(float32x2_t *)&v129 = vneg_f32(*a7);
    *((_QWORD *)&v129 + 1) = v18;
    *(float32x2_t *)&v130 = vneg_f32(a7[2]);
    *((_QWORD *)&v130 + 1) = v19;
    v20 = *a6;
    v21 = a6[2];
    physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(_QWORD *)(a1 + 544) + 96 * a4, (float32x2_t *)(*(_QWORD *)(a1 + 624) + 160 * a4 + 120), *(_QWORD *)(a1 + 528) + 76 * a4, (uint64_t)&v129, (uint64_t)&v131);
    v123 = (unint64_t)vsub_f32(v20, v131);
    v124 = v16 - v132;
    v125 = 0;
    v126 = vsub_f32(v21, v133);
    v127 = v17 - v134;
    v128 = 0;
    physx::Dy::FeatherstoneArticulation::getZ(v10, (_QWORD *)(a1 + 176), a5, (float32x2_t *)&v123);
    physx::Dy::FeatherstoneArticulation::getDeltaVWithDeltaJV(a2, v10, a1 + 176, a5, a10, (uint64_t)v112, v23);
    v117 = *(float32x2_t *)v112;
    v118 = *(float *)&v112[8];
    v119 = 0;
    v120 = (float32x2_t)v114;
    v121 = v115;
    v122 = 0;
    physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)(a1 + 624) + 160 * v13 + 120, (float *)(*(_QWORD *)(a1 + 480) + 112 * v13), (float *)(*(_QWORD *)(a1 + 496) + 36 * v13), *(_QWORD *)(a1 + 528) + 76 * v13, (float *)&v129, a10, &v117, (float32x2_t *)v112);
    v24 = *(_DWORD *)&v112[8];
    v25 = v115;
    v26 = v114;
    v27 = *(_QWORD *)v112;
    *a8 = v120;
    a8[1].f32[0] = v121;
    a8[2] = v117;
    a8[3].f32[0] = v118;
    *(int32x2_t *)a9 = v26;
    *(float *)(a9 + 8) = v25;
    *(_QWORD *)(a9 + 16) = v27;
    *(_DWORD *)(a9 + 24) = v24;
    return;
  }
  v28 = a4;
  v29 = a4;
  if (a3 != a4)
  {
    v30 = a3;
    v29 = a4;
    do
    {
      if (v30 >= v29)
        v30 = *(_DWORD *)(v12 + 40 * v30 + 32);
      else
        v29 = *(_DWORD *)(v12 + 40 * v29 + 32);
    }
    while (v30 != v29);
  }
  v32 = -a6->f32[0];
  v33 = -a6->f32[1];
  v34 = -a6[1].f32[0];
  v35 = -a6[3].f32[0];
  v123 = __PAIR64__(LODWORD(v33), LODWORD(v32));
  v124 = v34;
  v125 = 0;
  v127 = v35;
  v128 = 0;
  v37 = -a7->f32[1];
  v38 = -a7[1].f32[0];
  v39 = -a7[3].f32[0];
  v117.f32[0] = -a7->f32[0];
  v36 = v117.f32[0];
  v117.f32[1] = v37;
  v118 = v38;
  v119 = 0;
  v121 = v39;
  v122 = 0;
  v40 = (float32x2_t *)(&v129 + 2 * a3);
  v40->f32[0] = v32;
  v40->f32[1] = v33;
  v40[1].f32[0] = v34;
  v40[1].i32[1] = 0;
  v41 = vneg_f32(a6[2]);
  v126 = v41;
  v40[2] = v41;
  v40[3].f32[0] = v35;
  v40[3].i32[1] = 0;
  v42 = (float32x2_t *)(&v129 + 2 * a4);
  v42->f32[0] = v36;
  v42->f32[1] = v37;
  v42[1].f32[0] = v38;
  v42[1].i32[1] = 0;
  v120 = vneg_f32(a7[2]);
  v105 = v120;
  v42[2] = v120;
  v42[3].f32[0] = v39;
  v42[3].i32[1] = 0;
  if (v29 == a3)
  {
    v43 = 0;
    v44 = v41.f32[1];
  }
  else
  {
    v45 = 0;
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(_QWORD *)(a1 + 544) + 96 * v10, (float32x2_t *)(*(_QWORD *)(a1 + 624) + 160 * v10 + 120), *(_QWORD *)(a1 + 528) + 76 * v10, (uint64_t)&v123, (uint64_t)v112);
      v33 = *(float *)&v112[4];
      v32 = *(float *)v112;
      v123 = *(_QWORD *)v112;
      v34 = *(float *)&v112[8];
      v44 = *(float *)&v114.i32[1];
      v41.i32[0] = v114.i32[0];
      v124 = *(float *)&v112[8];
      v125 = 0;
      v35 = v115;
      v126 = (float32x2_t)v114;
      v127 = v115;
      v128 = 0;
      v46 = *(unsigned int *)(v12 + 40 * v10 + 32);
      v47 = (float *)(&v129 + 2 * v46);
      *v47 = *(float *)v112;
      v47[1] = v33;
      v47[2] = v34;
      v47[3] = 0.0;
      *((_QWORD *)v47 + 2) = __PAIR64__(LODWORD(v44), v41.u32[0]);
      v47[6] = v35;
      v47[7] = 0.0;
      v43 = v45 + 1;
      v131.i32[v45++] = v10;
      v10 = v46;
    }
    while ((_DWORD)v46 != v29);
  }
  v107 = v43;
  v106 = a8;
  if (v29 == v28)
  {
    v48 = v105.f32[1];
    v49 = v105.f32[0];
    v50 = v43;
  }
  else
  {
    v50 = v43;
    do
    {
      v51 = v50;
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(_QWORD *)(a1 + 544) + 96 * v28, (float32x2_t *)(*(_QWORD *)(a1 + 624) + 160 * v28 + 120), *(_QWORD *)(a1 + 528) + 76 * v28, (uint64_t)&v117, (uint64_t)v112);
      v37 = *(float *)&v112[4];
      v36 = *(float *)v112;
      v117 = *(float32x2_t *)v112;
      v38 = *(float *)&v112[8];
      v48 = *(float *)&v114.i32[1];
      v49 = *(float *)v114.i32;
      v118 = *(float *)&v112[8];
      v119 = 0;
      v39 = v115;
      v120 = (float32x2_t)v114;
      v121 = v115;
      v122 = 0;
      v52 = *(unsigned int *)(v12 + 40 * v28 + 32);
      v53 = (float *)(&v129 + 2 * v52);
      *v53 = *(float *)v112;
      v53[1] = v37;
      v53[2] = v38;
      v53[3] = 0.0;
      *((_QWORD *)v53 + 2) = __PAIR64__(LODWORD(v48), LODWORD(v49));
      v53[6] = v39;
      v53[7] = 0.0;
      ++v50;
      v131.i32[v51] = v28;
      v28 = v52;
    }
    while ((_DWORD)v52 != v29);
    v33 = *((float *)&v123 + 1);
    LODWORD(v32) = v123;
    v34 = v124;
    v44 = v126.f32[1];
    v41.i32[0] = v126.i32[0];
    v35 = v127;
  }
  v54 = (float *)(&v129 + 2 * v29);
  *v54 = v36 + v32;
  v54[1] = v37 + v33;
  v54[2] = v38 + v34;
  v54[3] = 0.0;
  v54[4] = v49 + v41.f32[0];
  v54[5] = v48 + v44;
  v54[6] = v39 + v35;
  v54[7] = 0.0;
  v55 = v50;
  if (v29)
  {
    v56 = v50;
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(_QWORD *)(a1 + 544) + 96 * v29, (float32x2_t *)(*(_QWORD *)(a1 + 624) + 160 * v29 + 120), *(_QWORD *)(a1 + 512) + 76 * v29, (uint64_t)(&v129 + 2 * v29), (uint64_t)v112);
      v57 = *(unsigned int *)(v12 + 40 * v29 + 32);
      v58 = (int32x2_t *)(&v129 + 2 * v57);
      *v58 = *(int32x2_t *)v112;
      v58[1].i32[0] = *(_DWORD *)&v112[8];
      v58[1].i32[1] = 0;
      v58[2] = v114;
      *(float *)v58[3].i32 = v115;
      v58[3].i32[1] = 0;
      v55 = v56 + 1;
      v131.i32[v56++] = v29;
      v29 = v57;
    }
    while ((_DWORD)v57);
  }
  v59 = (int32x2_t *)(a1 + 748);
  if ((**(_BYTE **)(a1 + 664) & 1) != 0)
  {
    v129 = 0u;
    v130 = 0u;
    _S3 = 0.0;
    v63 = 0.0;
    v64 = 0.0;
    v62 = 0.0;
    v61 = 0.0;
    v60 = 0.0;
  }
  else
  {
    v61 = *((float *)&v129 + 1);
    v60 = *(float *)&v129;
    v62 = *((float *)&v129 + 2);
    v63 = *((float *)&v130 + 1);
    v64 = *(float *)&v130;
    _S3 = *((float *)&v130 + 2);
  }
  v66 = (__int32 *)a9;
  v67 = v107;
  v68 = -v61;
  _D6 = *(int32x2_t *)(a1 + 736);
  _D20 = *v59;
  _D7 = *(int32x2_t *)(a1 + 760);
  v72 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 784), -v63), vmul_n_f32(*(float32x2_t *)(a1 + 772), v64)), vmul_n_f32(*(float32x2_t *)(a1 + 796), _S3));
  v73 = (float)((float)((float)-(float)(v61 * *(float *)(a1 + 744)) - (float)(v60 * *(float *)(a1 + 732)))
              - (float)(v62 * *(float *)(a1 + 756)))
      + (float)((float)((float)-(float)(v63 * *(float *)(a1 + 780)) - (float)(v64 * *(float *)(a1 + 768)))
              - (float)(_S3 * *(float *)(a1 + 792)));
  v74 = (float)((float)-(float)(v61 * *(float *)(a1 + 824)) - (float)(v60 * *(float *)(a1 + 812)))
      - (float)(v62 * *(float *)(a1 + 836));
  __asm
  {
    FMLS            S18, S3, V6.S[1]
    FMLS            S19, S3, V20.S[1]
    FMLS            S4, S3, V7.S[1]
  }
  *(int32x2_t *)v82.f32 = vrev64_s32(*(int32x2_t *)(a1 + 816));
  *(int32x2_t *)&v82.u32[2] = vrev64_s32(*v59);
  v83 = vmulq_n_f32(v82, v68);
  v84 = vrev64_s32(_D6);
  *(int32x2_t *)v85.f32 = vrev64_s32(*(int32x2_t *)(a1 + 804));
  *(int32x2_t *)&v85.u32[2] = v84;
  *(int32x2_t *)v86.f32 = vrev64_s32(*(int32x2_t *)(a1 + 828));
  *(int32x2_t *)&v86.u32[2] = vrev64_s32(_D7);
  _Q19.i32[1] = _S18;
  *(int32x2_t *)&_Q19.u32[2] = vrev64_s32(v72);
  v87 = (int8x16_t)vaddq_f32(_Q19, vsubq_f32(vsubq_f32(v83, vmulq_n_f32(v85, v60)), vmulq_n_f32(v86, v62)));
  *(float *)v112 = v73;
  *(int32x2_t *)&v112[4] = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
  v113 = 0;
  v114 = vrev64_s32(*(int32x2_t *)v87.i8);
  v88 = _S4 + v74;
  v115 = _S4 + v74;
  v116 = 0;
  if (v55 > v50)
  {
    v89 = (unsigned int *)&v131 + v55 - 1;
    do
    {
      v90 = *v89--;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)(a1 + 624) + 160 * v90 + 120, (float *)(*(_QWORD *)(a1 + 480) + 112 * v90), (float *)(*(_QWORD *)(a1 + 496) + 36 * v90), *(_QWORD *)(a1 + 528) + 76 * v90, (float *)&v129 + 8 * v90, a10, (float32x2_t *)v112, &v108);
      v73 = v108.f32[0];
      *(float32x2_t *)v112 = v108;
      *(_DWORD *)&v112[8] = v109;
      v113 = 0;
      v114 = v110;
      v88 = v111;
      v115 = v111;
      v116 = 0;
      --v55;
    }
    while (v50 < v55);
    *(int32x2_t *)v87.i8 = vrev64_s32(v110);
    v87.i64[1] = __PAIR64__(v108.u32[1], v109);
    v66 = (__int32 *)a9;
    v67 = v107;
  }
  if (v50 > v67)
  {
    v91 = (unsigned int *)&v131 + v50 - 1;
    do
    {
      v92 = *v91--;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)(a1 + 624) + 160 * v92 + 120, (float *)(*(_QWORD *)(a1 + 480) + 112 * v92), (float *)(*(_QWORD *)(a1 + 496) + 36 * v92), *(_QWORD *)(a1 + 528) + 76 * v92, (float *)&v129 + 8 * v92, a10, (float32x2_t *)v112, &v108);
      --v50;
    }
    while (v67 < v50);
    v93 = v108.i32[1];
    v94 = v108.i32[0];
    v95 = v109;
    v96 = v110.i32[1];
    v97 = v110.i32[0];
    v98 = v111;
    v99 = *(_DWORD *)&v112[4];
    v73 = *(float *)v112;
    v100 = *(_DWORD *)&v112[8];
    v87.i32[0] = v114.i32[1];
    v101 = v114.i32[0];
    v88 = v115;
    v66 = (__int32 *)a9;
    if (!v67)
      goto LABEL_37;
    goto LABEL_34;
  }
  v101 = v87.i32[1];
  v100 = v87.i32[2];
  v98 = v88;
  v96 = v87.i32[0];
  v99 = v87.i32[3];
  v97 = v87.i32[1];
  v93 = v87.i32[3];
  v95 = v87.i32[2];
  v94 = LODWORD(v73);
  if (v67)
  {
LABEL_34:
    v102 = v67 - 1;
    do
    {
      v103 = v102;
      v104 = v131.u32[v102];
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)(a1 + 624) + 160 * v104 + 120, (float *)(*(_QWORD *)(a1 + 480) + 112 * v104), (float *)(*(_QWORD *)(a1 + 496) + 36 * v104), *(_QWORD *)(a1 + 528) + 76 * v104, (float *)&v129 + 8 * v104, a10, (float32x2_t *)v112, &v108);
      --v102;
    }
    while (v103);
    v99 = v108.i32[1];
    v73 = v108.f32[0];
    v100 = v109;
    v87.i32[0] = v110.i32[1];
    v101 = v110.i32[0];
    v88 = v111;
    v66 = (__int32 *)a9;
  }
LABEL_37:
  v106->i32[0] = v101;
  v106->i32[1] = v87.i32[0];
  v106[1].f32[0] = v88;
  v106[2].f32[0] = v73;
  v106[2].i32[1] = v99;
  v106[3].i32[0] = v100;
  *v66 = v97;
  v66[1] = v96;
  *((float *)v66 + 2) = v98;
  v66[4] = v94;
  v66[5] = v93;
  v66[6] = v95;
}

float32_t physx::Dy::FeatherstoneArticulation::getImpulseResponseInv(uint64_t a1, uint64_t a2, char a3, unsigned int a4, float *a5, float32x2_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32_t v15;
  float32x2_t *v16;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t *v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v35;
  float v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  float32x2_t v49;
  __int32 v50;
  float32x2_t v51;
  __int32 v52;

  v12 = a4;
  v13 = *(_QWORD *)(a2 + 608);
  v14 = *(_QWORD *)(a2 + 632);
  bzero(a5, (32 * *(_DWORD *)(a2 + 616)));
  v15 = -a6[3].f32[0];
  v16 = (float32x2_t *)&a5[8 * v12];
  _D2 = vneg_f32(*a6);
  v16[1].f32[0] = -a6[1].f32[0];
  v16[1].i32[1] = 0;
  v18 = vneg_f32(a6[2]);
  *v16 = _D2;
  v16[2] = v18;
  v16[3].f32[0] = v15;
  v16[3].i32[1] = 0;
  if (a4)
  {
    v19 = v12;
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(_QWORD *)(a2 + 544) + 96 * v19, (float32x2_t *)(*(_QWORD *)(a2 + 624) + 160 * v19 + 120), *(_QWORD *)(a2 + 528) + 76 * v19, (uint64_t)&a5[8 * v19], (uint64_t)&v49);
      v19 = *(unsigned int *)(v13 + 40 * v19 + 32);
      v20 = (float32x2_t *)&a5[8 * v19];
      *v20 = v49;
      v20[1].i32[0] = v50;
      v20[1].i32[1] = 0;
      v20[2] = v51;
      v20[3].i32[0] = v52;
      v20[3].i32[1] = 0;
    }
    while ((_DWORD)v19);
  }
  v21 = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((a3 & 1) == 0)
  {
    v22 = *a5;
    v23 = a5[1];
    v24 = -v23;
    v25 = a5[2];
    _D2.f32[0] = a5[4];
    v26 = a5[5];
    v27 = -v26;
    v21.f32[0] = a5[6];
    v28.i32[0] = *(_DWORD *)(a2 + 740);
    v29 = *(float *)(a2 + 752);
    v30 = *(float *)(a2 + 764);
    v31 = (float)((float)((float)-(float)(v23 * v29) - (float)(*a5 * v28.f32[0])) - (float)(v25 * v30))
        + (float)((float)((float)-(float)(v26 * *(float *)(a2 + 788)) - (float)(_D2.f32[0] * *(float *)(a2 + 776)))
                - (float)(v21.f32[0] * *(float *)(a2 + 800)));
    v32 = *(float32x2_t *)(a2 + 732);
    v33 = *(float32x2_t *)(a2 + 744);
    _D22 = *(float32x2_t *)(a2 + 756);
    v35 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v33, -v23), vmul_n_f32(v32, *a5)), vmul_n_f32(_D22, v25)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a2 + 780), v27), vmul_n_f32(*(float32x2_t *)(a2 + 768), _D2.f32[0])), vmul_n_f32(*(float32x2_t *)(a2 + 792), v21.f32[0])));
    __asm { FMLS            S23, S2, V22.S[0] }
    v41 = (float)(_S23 - (float)(v30 * v21.f32[0]))
        + (float)((float)((float)-(float)(v23 * *(float *)(a2 + 824)) - (float)(*a5 * *(float *)(a2 + 812)))
                - (float)(v25 * *(float *)(a2 + 836)));
    *(float32x2_t *)a1 = v35;
    *(float *)(a1 + 8) = v31;
    v28.f32[1] = v29;
    v21 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v32, (int32x2_t)v33), v27), (float32x2_t)vzip1_s32((int32x2_t)v32, (int32x2_t)v33), _D2, 0), v28, v21, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a2 + 816), v24), vmul_n_f32(*(float32x2_t *)(a2 + 804), v22)), vmul_n_f32(*(float32x2_t *)(a2 + 828), v25)));
    *(float32x2_t *)(a1 + 16) = v21;
    *(float *)(a1 + 24) = v41;
  }
  v42 = *(_QWORD *)(v13 + 40 * v12 + 8);
  v43 = v42 - 1;
  if (v42 != 1)
  {
    do
    {
      v44 = __clz(__rbit32(v43));
      LODWORD(v45) = __clz(__rbit32(HIDWORD(v43))) + 32;
      if ((_DWORD)v43)
        v45 = v44;
      else
        v45 = v45;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)(a2 + 624) + 160 * v45 + 120, (float *)(*(_QWORD *)(a2 + 480) + 112 * v45), (float *)(*(_QWORD *)(a2 + 496) + 36 * v45), *(_QWORD *)(a2 + 528) + 76 * v45, &a5[8 * v45], a7 + 4 * *(unsigned int *)(v14 + 80 * v45 + 72), (float32x2_t *)a1, &v49);
      *(float32x2_t *)a1 = v49;
      *(_DWORD *)(a1 + 8) = v50;
      *(_DWORD *)(a1 + 12) = 0;
      *(float32x2_t *)(a1 + 16) = v51;
      v21.i32[0] = v52;
      *(_DWORD *)(a1 + 24) = v52;
      *(_DWORD *)(a1 + 28) = 0;
      v43 &= v43 - 1;
    }
    while (v43);
  }
  return v21.f32[0];
}

uint64_t physx::Dy::FeatherstoneArticulation::getCoefficientMatrixWithLoopJoints(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, int32x4_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t result;
  float32x2_t *v21;
  int v22;
  char v23;
  pthread_mutex_t **v24;
  float *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  float v30;
  uint64_t v31;
  uint64_t i;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int32 v46;
  _BOOL4 v48;
  float32x2_t *v49;
  char v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  float32x2_t *v58;
  uint64_t v59;
  void *v60;
  physx::PxcScratchAllocator *v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  float32x2_t v68[4];
  float32x2_t v69[4];
  float32x2_t v70;
  __int32 v71;
  int v72;
  float32x2_t v73;
  __int32 v74;
  int v75;
  float32x2_t v76;
  __int32 v77;
  int v78;
  float32x2_t v79;
  __int32 v80;
  int v81;
  _BYTE v82[24];
  _BYTE v83[12];
  _BYTE v84[12];
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  _QWORD v93[4];
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[32];
  _QWORD v100[120];

  v100[117] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 1211, "ArticulationHelper::getCoefficientMatrix() commonInit need to be called first to initialize data!", a13, a14, a15, a16);
  v21 = (float32x2_t *)(a1 + 176);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia((physx::Dy::FeatherstoneArticulation *)a1, (physx::Dy::ArticulationData *)(a1 + 176), a5, a6, a7, a8, a9, a10, a11);
  v22 = *(_DWORD *)(a1 + 616);
  v62 = *(_DWORD *)(a1 + 652);
  v63 = *(char **)(a4 + 80);
  bzero(v63, 4 * a3 * v62);
  v23 = **(_BYTE **)(a1 + 664);
  v24 = *(pthread_mutex_t ***)(a4 + 104);
  v98 = 0;
  v96 = 0u;
  v97 = 0u;
  v94 = 0;
  v93[0] = physx::PxcScratchAllocator::alloc(v24, 240 * v22, 0);
  v93[1] = v93[0] + (32 * v22);
  v25 = (float *)(v93[0] + (96 * v22));
  v93[2] = v93[0] + (v22 << 6);
  v93[3] = v25;
  v60 = (void *)v93[0];
  v61 = (physx::PxcScratchAllocator *)v24;
  v95 = v93[0] + (v22 << 7);
  v64 = *(unsigned int *)(a1 + 652);
  result = physx::PxcScratchAllocator::alloc(v24, 8 * (int)v64, 0);
  if (a3)
  {
    v26 = (void *)result;
    v27 = a2;
    v28 = 0;
    v29 = (4 * v64);
    v57 = result + v29;
    v56 = a3;
    v30 = 1.0 / *(float *)(a1 + 648);
    v58 = v21;
    v59 = v27;
    do
    {
      v31 = *(_QWORD *)(v27 + 16 * v28 + 8);
      bzero(v99, 0x3C0uLL);
      for (i = 0; i != 960; i += 80)
      {
        v33 = &v99[i];
        *((_DWORD *)v33 + 11) = -8388609;
        *((_DWORD *)v33 + 15) = 2139095039;
      }
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = xmmword_2260E5D70;
      v38 = 0;
      if (*(_QWORD *)(v31 + 40))
      {
        v39 = *(_QWORD *)(v31 + 56);
        v37 = *(_OWORD *)v39;
        v38 = *(_QWORD *)(v39 + 16);
        v36 = *(_DWORD *)(v39 + 24);
      }
      v90 = v37;
      v91 = v38;
      v92 = v36;
      v40 = xmmword_2260E5D70;
      if (*(_QWORD *)(v31 + 48))
      {
        v41 = *(_QWORD *)(v31 + 64);
        v40 = *(_OWORD *)v41;
        v34 = *(_QWORD *)(v41 + 16);
        v35 = *(_DWORD *)(v41 + 24);
      }
      v42 = (unsigned int *)(v27 + 16 * v28);
      v87 = v40;
      v88 = v34;
      v89 = v35;
      v85 = 0;
      v86 = 0;
      v43 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, _BYTE *, _QWORD, __int128 *, __int128 *, _QWORD, _BYTE *, _BYTE *))(v31 + 16))(v99, &v85, 12, v82, *(_QWORD *)(v31 + 32), &v90, &v87, (*(unsigned __int16 *)(v31 + 10) >> 9) & 1, v84, v83);
      v44 = v28;
      LODWORD(v28) = v43;
      v45 = *v42;
      v65 = v44;
      v46 = *(_DWORD *)(v27 + 16 * v44 + 4);
      bzero(v26, v29);
      if ((_DWORD)v28)
      {
        v48 = v45 != 0x80000000 && v46 != 0x80000000;
        v28 = v28;
        v49 = (float32x2_t *)v100;
        do
        {
          if (v48)
          {
            v76 = v49[-4];
            v77 = v49[-3].i32[0];
            v78 = 0;
            v79 = v49[-2];
            v80 = v49[-1].i32[0];
            v81 = 0;
            v70 = *v49;
            v71 = v49[1].i32[0];
            v72 = 0;
            v73 = v49[2];
            v74 = v49[3].i32[0];
            v75 = 0;
            v50 = v23 & 1;
            if (v45 <= v46)
              physx::Dy::FeatherstoneArticulation::getImpulseSelfResponseInv(a1, v50, v45, v46, (uint64_t)v25, &v76, &v70, v69, (uint64_t)v68, (uint64_t)v26);
            else
              physx::Dy::FeatherstoneArticulation::getImpulseSelfResponseInv(a1, v50, v46, v45, (uint64_t)v25, &v70, &v76, v68, (uint64_t)v69, (uint64_t)v26);
          }
          else
          {
            if (v45 == 0x80000000)
            {
              v76 = *v49;
              v77 = v49[1].i32[0];
              v78 = 0;
              v79 = v49[2];
              v80 = v49[3].i32[0];
              v81 = 0;
              v51 = &v67;
              v52 = a1;
              v53 = v46;
            }
            else
            {
              v76 = v49[-4];
              v77 = v49[-3].i32[0];
              v78 = 0;
              v79 = v49[-2];
              v80 = v49[-1].i32[0];
              v81 = 0;
              v51 = &v66;
              v52 = a1;
              v53 = v45;
            }
            physx::Dy::FeatherstoneArticulation::getImpulseResponseInv((uint64_t)v51, v52, v23 & 1, v53, v25, &v76, (uint64_t)v26);
          }
          v49 += 10;
          --v28;
        }
        while (v28);
      }
      v54 = (float *)v26;
      v55 = v64;
      if ((_DWORD)v64)
      {
        do
        {
          *(float *)((char *)v54 + v29) = v30 * *v54;
          ++v54;
          --v55;
        }
        while (v55);
      }
      physx::Dy::FeatherstoneArticulation::computeSpatialInertia(a1, (uint64_t)v58);
      v94 = 0;
      *(_QWORD *)&v96 = 0;
      *((_QWORD *)&v96 + 1) = v57;
      *(_QWORD *)&v97 = &v63[4 * (v62 * v65)];
      v76 = 0;
      v77 = 0;
      if ((v23 & 1) != 0)
        physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v58, &v76, (uint64_t)v93, 0);
      else
        physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v58, &v76, (uint64_t)v93, 0);
      v27 = v59;
      physx::PxcScratchAllocator::free((uint64_t)v61, (unint64_t)v26);
      result = physx::PxcScratchAllocator::free((uint64_t)v61, (unint64_t)v60);
      v28 = v65 + 1;
    }
    while (v65 + 1 != v56);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getLambda(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t a5, float *a6, float32x2_t *a7, int a8)
{
  float v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  pthread_mutex_t **v14;
  size_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float32x2_t *v20;
  double v21;
  double v22;
  double v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t *v36;
  __int16 v37;
  uint64_t i;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  int j;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  char v74;
  float *v75;
  float *v76;
  uint64_t v77;
  float v78;
  float *v79;
  uint64_t v80;
  float *v81;
  float *v82;
  uint64_t v83;
  float v84;
  float *v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  int8x8_t v95;
  float32_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v102;
  size_t v103;
  unint64_t v104;
  uint64_t v105;
  float32x2_t *v106;
  uint64_t v110;
  void *__b;
  int64x2_t v113;
  __int128 v114;
  unsigned int v115;
  size_t v116;
  void *v117;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  int *v126[5];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131[12];
  _BYTE v132[56];
  uint64_t v133;
  float32x2_t *v134;
  _BYTE v135[64];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[32];
  uint64_t (**v140[2])(_QWORD, _QWORD);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD v145[10];
  unsigned int v146;
  char v147[24];
  char v148[12];
  char v149[12];
  uint64_t v150;
  int v151;
  _BYTE v152[24];
  int v153;
  __int128 v154;
  _QWORD v155[2];
  __int128 v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  __int128 v162;
  int v163;
  __int128 v164;
  __int128 v165;
  int v166;
  uint64_t v167;
  _BYTE *v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  char v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  uint64_t v177;
  int v178;
  _BYTE v179[968];
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  v10 = *(float *)(a1 + 648);
  v110 = *(unsigned int *)(a1 + 652);
  v11 = *(_DWORD *)(a1 + 616);
  v140[0] = (uint64_t (**)(_QWORD, _QWORD))off_24ED8D678;
  v140[1] = (uint64_t (**)(_QWORD, _QWORD))&off_24ED8D6C0;
  v142 = 0;
  v143 = 0;
  v141 = 0;
  v144 = 0;
  v12 = 6;
  do
  {
    v13 = &v140[v12];
    *(_QWORD *)v13 = &off_24ED8D6C0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = 0;
    v13[8] = 0;
    v12 += 5;
  }
  while (v13 + 10 != &v146);
  v146 = 0;
  v14 = (pthread_mutex_t **)a4[13];
  v15 = (32 * v11);
  v16 = physx::PxcScratchAllocator::alloc(v14, 32 * v11, 1);
  v103 = v15;
  v106 = (float32x2_t *)physx::PxcScratchAllocator::alloc(v14, v15, 1);
  __b = (void *)physx::PxcScratchAllocator::alloc(v14, 8 * a3, 1);
  v17 = (float *)a4[11];
  v102 = a4[10];
  memset(v139, 0, sizeof(v139));
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  memset(v135, 0, sizeof(v135));
  HIDWORD(v136) = 2139095039;
  DWORD1(v136) = -8388609;
  HIDWORD(v137) = 1065353216;
  v133 = v16;
  v134 = v106;
  v132[0] = 0;
  v122 = physx::PxcScratchAllocator::alloc(v14, 48 * a3, 1);
  v105 = (uint64_t)v14;
  v18 = physx::PxcScratchAllocator::alloc(v14, 48 * *(_DWORD *)(a1 + 616) - 1, 1);
  v131[0] = a1;
  v130 = 0;
  v104 = v18;
  v117 = (void *)v16;
  v19 = (float *)v16;
  v20 = v106;
  physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocities(v131, v10, (uint64_t)v140, v18, &v130, a7, 0, v19, v106);
  v23 = 0.0;
  v128 = 0u;
  v127 = 0u;
  v129 = 0u;
  v24 = *(int **)(a1 + 336);
  v126[0] = *(int **)(a1 + 320);
  v126[1] = v24;
  v25 = *(int **)(a1 + 368);
  v126[2] = *(int **)(a1 + 352);
  v126[3] = v25;
  v26 = *(_QWORD *)(a1 + 208);
  *((_QWORD *)&v127 + 1) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)&v128 = v26;
  v27 = *(_QWORD *)(a1 + 256);
  *((_QWORD *)&v128 + 1) = *(_QWORD *)(a1 + 272);
  *(_QWORD *)&v129 = v27;
  v28 = v122;
  v126[4] = *(int **)(a1 + 672);
  if (a3)
  {
    v29 = 0;
    v30 = *(float *)(a1 + 648);
    v116 = a3;
    __asm { FMOV            V0.4S, #1.0 }
    v113 = vdupq_n_s64(a1);
    v114 = _Q0;
    v115 = a3;
    while (1)
    {
      v36 = *(uint64_t **)(a2 + 16 * v29 + 8);
      v119 = (uint64_t *)(v28 + 48 * v29);
      v157 = v119;
      v170 = *v36;
      v172 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) + 32 * *((unsigned int *)v36 + 18);
      v37 = *((_WORD *)v36 + 5);
      v173 = HIBYTE(v37) & 1;
      v174 = (v37 & 0x80) != 0;
      v175 = (v37 & 0x20) != 0;
      v176 = (v37 & 0x200) != 0;
      v171 = *((_DWORD *)v36 + 19);
      bzero(v179, 0x3C0uLL);
      for (i = 0; i != 960; i += 80)
      {
        v39 = &v179[i];
        *((_DWORD *)v39 + 11) = -8388609;
        *((_DWORD *)v39 + 15) = 2139095039;
      }
      v156 = v114;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = xmmword_2260E5D70;
      v44 = 0;
      if (v36[5])
      {
        v45 = v36[7];
        v43 = *(_OWORD *)v45;
        v44 = *(_QWORD *)(v45 + 16);
        v42 = *(_DWORD *)(v45 + 24);
      }
      v154 = v43;
      v155[0] = v44;
      LODWORD(v155[1]) = v42;
      v46 = xmmword_2260E5D70;
      if (v36[6])
      {
        v47 = v36[8];
        v46 = *(_OWORD *)v47;
        v40 = *(_QWORD *)(v47 + 16);
        v41 = *(_DWORD *)(v47 + 24);
      }
      *(_OWORD *)v152 = v46;
      *(_QWORD *)&v152[16] = v40;
      v153 = v41;
      v150 = 0;
      v151 = 0;
      v48 = ((uint64_t (*)(_BYTE *, uint64_t *, uint64_t, char *, uint64_t, __int128 *, _BYTE *, _QWORD, char *, char *))v36[2])(v179, &v150, 12, v147, v36[4], &v154, v152, (*((unsigned __int16 *)v36 + 5) >> 9) & 1, v149, v148);
      v177 = v150;
      v178 = v151;
      v162 = v154;
      *(_QWORD *)&v49 = *(_QWORD *)((char *)v155 + 4);
      *((_QWORD *)&v49 + 1) = *(_QWORD *)v152;
      v163 = v155[0];
      v164 = v49;
      v165 = *(_OWORD *)&v152[8];
      v166 = v153;
      v169 = v48;
      v168 = v179;
      v50 = *(_DWORD *)(a2 + 16 * v29);
      v51 = *(_DWORD *)(a2 + 16 * v29 + 4);
      if (v50 != 0x80000000 && v51 != 0x80000000)
        break;
      a3 = v115;
      v28 = v122;
      if (v50 == 0x80000000)
      {
        v55 = v122 + 48 * v29;
        *(_WORD *)(v55 + 16) = -1;
        *(_WORD *)(v55 + 18) = v51;
        v53 = v119;
        *v119 = (uint64_t)v139;
        *(_QWORD *)(v55 + 8) = a1;
        v54 = 0x800000002;
        goto LABEL_18;
      }
      v53 = v119;
      if (v51 == 0x80000000)
      {
        v56 = v122 + 48 * v29;
        *(_WORD *)(v56 + 16) = v50;
        *(_WORD *)(v56 + 18) = -1;
        *v119 = a1;
        *(_QWORD *)(v56 + 8) = v139;
        v54 = 0x200000008;
        goto LABEL_18;
      }
LABEL_19:
      v158 = *v53;
      v159 = *(_QWORD *)(v28 + 48 * v29 + 8);
      v160 = v135;
      v161 = v135;
      physx::Dy::ConstraintHelper::setupSolverConstraint((uint64_t)&v156, v140, (uint64_t)v117, v30, 1.0 / v30);
      if (++v29 == v116)
      {
        memset_pattern16(__b, &unk_2261A7270, 4 * v116);
        v20 = v106;
        goto LABEL_21;
      }
    }
    v28 = v122;
    v52 = v122 + 48 * v29;
    *(_WORD *)(v52 + 16) = v50;
    *(_WORD *)(v52 + 18) = v51;
    v53 = v119;
    *(int64x2_t *)v119 = v113;
    v54 = 0x800000008;
    a3 = v115;
LABEL_18:
    v167 = v54;
    goto LABEL_19;
  }
LABEL_21:
  if (a8)
  {
    v57 = 0;
    v120 = a1 + 176;
    while (1)
    {
      v121 = v57;
      if (a3)
      {
        v59 = 0;
        do
        {
          v60 = *(_QWORD *)(v28 + 48 * v59 + 32);
          v61 = *(unsigned __int8 *)(v60 + 1);
          if (*(_BYTE *)(v60 + 1))
          {
            v62 = (_DWORD *)(v60 + 136);
            do
            {
              *v62 = 0;
              v62 += 40;
              --v61;
            }
            while (v61);
          }
          ++v59;
        }
        while (v59 != a3);
      }
      for (j = 0; j != 4; ++j)
      {
        while (1)
        {
          v64 = v28;
          v65 = a3;
          if (a3)
            break;
          ++j;
          v28 = v122;
          if (j == 4)
          {
            physx::Dy::PxcFsFlushVelocity(a1, v20, v23, v21, v22);
            goto LABEL_61;
          }
        }
        do
        {
          *(float *)&v23 = physx::Dy::solveExt1D(v64, (uint64_t)v132);
          v64 += 48;
          --v65;
        }
        while (v65);
        v28 = v122;
      }
      v66 = 0;
      do
      {
        v67 = *(unsigned __int8 **)(v122 + 48 * v66 + 32);
        if (v67)
        {
          v68 = v67[1];
          if (v67[1])
          {
            v70 = *v67;
            v69 = v67 + 76;
            if (v70 == 4)
              v71 = 160;
            else
              v71 = 96;
            do
            {
              LODWORD(v23) = *v69;
              *(v69 - 4) = *v69;
              v69 = (_DWORD *)((char *)v69 + v71);
              --v68;
            }
            while (v68);
          }
        }
        ++v66;
      }
      while (v66 != a3);
      physx::Dy::PxcFsFlushVelocity(a1, v20, v23, v21, v22);
      v72 = a3;
      do
      {
        physx::Dy::solveExt1D(v28, (uint64_t)v132);
        physx::Dy::writeBack1D(v28);
        v28 += 48;
        --v72;
      }
      while (v72);
      v73 = (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) + 32 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 72));
      v74 = 1;
      v75 = v17;
      v76 = (float *)__b;
      v77 = a3;
      do
      {
        v58 = 1.0 / v10;
        v78 = v10
            * sqrtf((float)((float)((float)(v58 * v73[1]) * (float)(v58 * v73[1]))+ (float)((float)(v58 * *v73) * (float)(v58 * *v73)))+ (float)((float)(v58 * v73[2]) * (float)(v58 * v73[2])));
        *v75++ = v78;
        if (vabds_f32(*v76, v78) > 0.00001)
          v74 = 0;
        *v76++ = v78;
        --v77;
      }
      while (v77);
      if ((v74 & 1) != 0)
        break;
      v79 = (float *)a4[6];
      bzero(v79, (4 * v110));
      v80 = 0;
      do
      {
        while (!(_DWORD)v110)
        {
          if (++v80 == a3)
            goto LABEL_59;
        }
        v81 = (float *)(v102 + 4 * (v110 * v80));
        v82 = v79;
        v83 = v110;
        do
        {
          v84 = *v81++;
          *v82 = *v82 + (float)(v84 * v17[v80]);
          ++v82;
          --v83;
        }
        while (v83);
        ++v80;
      }
      while (v80 != a3);
      v85 = a6;
      v86 = v110;
      do
      {
        v87 = *v85++;
        *v79 = v87 - *v79;
        ++v79;
        --v86;
      }
      while (v86);
LABEL_59:
      v125 = 119;
      v88 = a1;
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 72))(a1, a5, &v125);
      v124 = 8;
      (*(void (**)(uint64_t, _QWORD *, char *))(*(_QWORD *)v88 + 72))(v88, a4, &v124);
      bzero(*(void **)(v88 + 432), (32 * *(_DWORD *)(v88 + 616)));
      bzero(*(void **)(v88 + 240), (4 * *(_DWORD *)(v88 + 652)));
      *(_BYTE *)(a1 + 685) = 0;
      physx::Dy::FeatherstoneArticulation::computeLinkVelocities(a1, v120, v126);
      physx::Dy::FeatherstoneArticulation::computeZ(v89, v90, v91, v92, v93, v94, v95, a1, v120, a7, v126);
      physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(v96, a1, v120, v126);
      physx::Dy::FeatherstoneArticulation::computeLinkAcceleration(a1, v120, (uint64_t)v126);
      bzero(*(void **)(a1 + 368), v103);
      v57 = v121 + 1;
      v28 = v122;
      if (v121 + 1 == a8)
        goto LABEL_62;
    }
    v28 = v122;
  }
  else
  {
LABEL_61:
    v74 = 1;
  }
LABEL_62:
  physx::PxcScratchAllocator::free(v105, v104);
  physx::PxcScratchAllocator::free(v105, (unint64_t)__b);
  physx::PxcScratchAllocator::free(v105, (unint64_t)v117);
  physx::PxcScratchAllocator::free(v105, (unint64_t)v20);
  physx::PxcScratchAllocator::free(v105, v28);
  v97 = 1 - v146;
  v146 = 1 - v146;
  v98 = v143;
  if ((_DWORD)v143)
  {
    v99 = 0;
    do
    {
      if (*(_QWORD *)(v142 + 8 * v99))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v98 = v143;
      }
      ++v99;
    }
    while (v99 < v98);
    v97 = v146;
  }
  LODWORD(v143) = 0;
  v141 = 0;
  v144 = 0;
  physx::Dy::BlockBasedAllocator::release((uint64_t)&v145[5 * v97]);
  v123 = 119;
  (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 72))(a1, a5, &v123);
  physx::Dy::ArticulationBlockAllocator::~ArticulationBlockAllocator((physx::Dy::ArticulationBlockAllocator *)v140);
  return v74 & 1;
}

uint64_t physx::Dy::computeHi(uint64_t a1, unsigned int a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  float *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t *v27;
  float32x2_t *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float32x2_t v33;
  int32x2_t v34;
  float32x2_t v35;
  float32_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  float *v43;
  float *v44;
  float *v45;
  float *v46;
  unsigned int v47;
  float *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;

  result = a2;
  v6 = *(_QWORD *)(a1 + 432);
  v7 = *(_QWORD *)(a1 + 456);
  v8 = *(_DWORD *)(a1 + 476);
  v9 = *(unsigned __int8 *)(v7 + 80 * a2 + 76);
  if (*(_BYTE *)(v7 + 80 * a2 + 76))
  {
    v10 = 0;
    v11 = *(_DWORD *)(v7 + 80 * a2 + 72);
    v12 = v11 + v11 * v8;
    v13 = *(_QWORD *)(a1 + 352) + 76 * a2 + 12;
    do
    {
      v15 = (float *)v13;
      v16 = v12;
      v17 = v9;
      do
      {
        v14 = (float *)&a4[4 * v10];
        *(float *)(a3 + 4 * v16++) = (float)((float)((float)(v15[1] * v14[1]) + (float)(*v15 * *v14))
                                             + (float)(v15[2] * v14[2]))
                                     + (float)((float)((float)(*(v15 - 2) * v14[5]) + (float)(*(v15 - 3) * v14[4]))
                                             + (float)(*(v15 - 1) * v14[6]));
        v15 += 6;
        --v17;
      }
      while (v17);
      ++v10;
      v12 += v8;
    }
    while (v10 != v9);
  }
  v18 = *(unsigned int *)(v6 + 40 * a2 + 32);
  if ((_DWORD)v18)
  {
    v19 = (_DWORD *)(v7 + 80 * a2 + 72);
    v20 = *(_QWORD *)(a1 + 448);
    v21 = *(_QWORD *)(a1 + 352);
    if (v9 <= 1)
      v22 = 1;
    else
      v22 = v9;
    v23 = a4 + 2;
    LOBYTE(v24) = v9;
    do
    {
      v25 = result;
      result = v18;
      if ((_BYTE)v24)
      {
        v26 = v20 + 160 * v25;
        v27 = (float32x2_t *)(v26 + 124);
        v28 = v23;
        v29 = v22;
        do
        {
          v30 = v28[-2].f32[0];
          v31 = *(float *)(v26 + 120);
          v32 = v28[1].f32[0];
          v28[-1].i32[1] = 0;
          v33 = *(float32x2_t *)((char *)v28 - 12);
          v34.i32[1] = HIDWORD(*(unint64_t *)v27);
          *(float *)v34.i32 = v31;
          v35.i32[0] = vdup_lane_s32((int32x2_t)v33, 1).u32[0];
          v35.f32[1] = v30;
          v36 = vmlas_n_f32(-(float)(COERCE_FLOAT(*v27) * v30), v31, v33.f32[0]) + v32;
          *v28 = vadd_f32(vmla_f32(vmul_f32(v33, vneg_f32((float32x2_t)vrev64_s32(v34))), v35, *v27), *v28);
          v28[1].f32[0] = v36;
          v28[1].i32[1] = 0;
          v28 += 4;
          --v29;
        }
        while (v29);
        v24 = v9;
      }
      else
      {
        v24 = 0;
      }
      v37 = v7 + 80 * result;
      v38 = *(unsigned __int8 *)(v37 + 76);
      if (*(_BYTE *)(v37 + 76))
      {
        v39 = 0;
        v40 = v21 + 76 * result;
        v41 = *(_DWORD *)(v7 + 80 * result + 72);
        v42 = v41;
        do
        {
          if (v24)
          {
            v43 = (float *)(v40 + 24 * v39);
            v44 = v43 + 3;
            v45 = v43 + 4;
            v46 = v43 + 5;
            v47 = v42 + v8 * *v19;
            v48 = (float *)v23;
            v49 = v24;
            do
            {
              *(float *)(a3 + 4 * v47) = (float)((float)((float)(*v45 * *(v48 - 3)) + (float)(*v44 * *(v48 - 4)))
                                                 + (float)(*v46 * *(v48 - 2)))
                                         + (float)((float)((float)(*(float *)(v40 + 24 * v39 + 4) * v48[1])
                                                         + (float)(*(float *)(v40 + 24 * v39) * *v48))
                                                 + (float)(*(float *)(v40 + 24 * v39 + 8) * v48[2]));
              v47 += v8;
              v48 += 8;
              --v49;
            }
            while (v49);
          }
          ++v39;
          ++v42;
        }
        while (v39 != v38);
        v50 = 0;
        v51 = v8 * v41;
        do
        {
          if (v24)
          {
            v52 = *v19 + v51;
            v53 = v41 + v8 * *v19;
            v54 = v24;
            do
            {
              *(_DWORD *)(a3 + 4 * v52++) = *(_DWORD *)(a3 + 4 * v53);
              v53 += v8;
              --v54;
            }
            while (v54);
          }
          ++v50;
          v51 += v8;
          ++v41;
        }
        while (v50 != (_DWORD)v38);
      }
      v18 = *(unsigned int *)(v6 + 40 * result + 32);
    }
    while ((_DWORD)v18);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedMassMatrixCRB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v11;
  uint64_t v12;
  void *v13;
  int v15;
  pthread_mutex_t **v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t *v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  float32x2_t *v37;
  float *v38;
  float32x2_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32_t v48;
  int32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32_t v53;
  float32x2_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float v61;
  float v62;
  float v63;
  float32x2_t v64;
  int32x2_t v65;
  float32x2_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  unsigned int v136;
  uint64_t v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float *v154;
  float *v155;
  unsigned int v156;
  uint64_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  float v169;
  float32x2_t v170;
  float32x2_t *v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  uint64_t v178;
  char *v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  float v188;
  float v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x2_t v195;
  float32x2_t v196;
  float v197;
  float32x2_t v198;
  float *v199;
  float32x2_t *v200;
  float32x2_t v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float32_t v208;
  float32_t v209;
  uint64_t v210;
  float v211;
  uint64_t v212;
  float v213;
  uint64_t v214;
  float v215;
  char *v216;
  uint64_t v217;
  float v218;
  uint64_t v219;
  float v220;
  uint64_t v221;
  float v222;
  float v223;
  uint64_t v224;
  uint64_t v225;
  float v226;
  float v227;
  _DWORD v228[2];
  float32x2_t v229;
  int v230;
  float v231;
  __int32 v232;
  float v233;
  int v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  float32x2_t v241;
  float32x2_t v242;
  float32x2_t v243;
  float32x2_t v244;
  float32x2_t v245;
  float32x2_t v246;
  float32x2_t v247;
  float v248;
  int v249;
  float32x2_t v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float32x2_t v257;
  float32x2_t v258;
  float32x2_t v259;
  float32x2_t v260;
  float32x2_t v261;
  float32x2_t v262;
  float v263;
  int v264;
  uint64_t v265;

  v265 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 2004, "ArticulationHelper::getGeneralizedMassMatrix() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v221 = a1 + 176;
  v11 = **(_BYTE **)(a1 + 664);
  v12 = *(unsigned int *)(a1 + 652);
  v13 = *(void **)(a2 + 16);
  bzero(v13, (4 * v12 * v12));
  v15 = *(_DWORD *)(a1 + 616);
  v16 = *(pthread_mutex_t ***)(a2 + 104);
  v219 = *(_QWORD *)(a1 + 608);
  v224 = a1;
  if ((v11 & 1) != 0)
  {
    v216 = (char *)physx::PxcScratchAllocator::alloc(v16, 112 * v15, 0);
    physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(*(_QWORD *)(a1 + 608), *(_DWORD *)(a1 + 616), (uint64_t)v216);
    v165 = (v15 - 1);
    if ((_DWORD)v165)
    {
      v166 = 76 * v165 + 12;
      do
      {
        v167 = &v216[112 * v165];
        v235 = *(float32x2_t *)v167;
        v236 = *(float32x2_t *)(v167 + 8);
        v237 = *(float32x2_t *)(v167 + 16);
        v238 = *(float32x2_t *)(v167 + 24);
        v239 = *(float32x2_t *)(v167 + 32);
        v240 = *(float32x2_t *)(v167 + 40);
        v241 = *(float32x2_t *)(v167 + 48);
        v242 = *(float32x2_t *)(v167 + 56);
        v243 = *(float32x2_t *)(v167 + 64);
        v244 = *(float32x2_t *)(v167 + 72);
        v245 = *(float32x2_t *)(v167 + 80);
        v246 = *(float32x2_t *)(v167 + 88);
        v247 = *(float32x2_t *)(v167 + 96);
        v248 = *((float *)v167 + 26);
        v249 = *((_DWORD *)v167 + 27);
        v168 = *(_QWORD *)(a1 + 624) + 160 * v165;
        v169 = *(float *)(v168 + 120);
        v228[0] = 0;
        v170 = *(float32x2_t *)(v168 + 124);
        v228[1] = v170.i32[1];
        v229 = vneg_f32(v170);
        v230 = 0;
        v231 = v169;
        v232 = v170.i32[0];
        v233 = -v169;
        v234 = 0;
        physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)v228, (uint64_t)&v235);
        v171 = (float32x2_t *)&v216[112 * *(unsigned int *)(v219 + 40 * v165 + 32)];
        v172 = v171[1];
        *v171 = vadd_f32(v235, *v171);
        v171[1] = vadd_f32(v236, v172);
        v173 = v171[3];
        v171[2] = vadd_f32(v237, v171[2]);
        v171[3] = vadd_f32(v238, v173);
        v174 = v171[5];
        v171[4] = vadd_f32(v239, v171[4]);
        v171[5] = vadd_f32(v240, v174);
        v175 = v171[7];
        v171[6] = vadd_f32(v241, v171[6]);
        v171[7] = vadd_f32(v242, v175);
        v176 = v171[9];
        v171[8] = vadd_f32(v243, v171[8]);
        v171[9] = vadd_f32(v244, v176);
        v177 = v171[11];
        v171[10] = vadd_f32(v245, v171[10]);
        v171[11] = vadd_f32(v246, v177);
        v171[12] = vadd_f32(v247, v171[12]);
        v171[13].f32[0] = v248 + v171[13].f32[0];
        v178 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 80 * v165 + 76);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 632) + 80 * v165 + 76))
        {
          v179 = &v216[112 * v165];
          v180 = *((float *)v167 + 8);
          v227 = *((float *)v179 + 11);
          v181 = *((float *)v167 + 14);
          v182 = *((float *)v179 + 17);
          v183 = *((float *)v167 + 20);
          v184 = *((float *)v179 + 23);
          v185 = *(float32x2_t *)(v167 + 72);
          v186 = *(float32x2_t *)(v179 + 84);
          v187 = *(float32x2_t *)(v167 + 96);
          v188 = *((float *)v167 + 26);
          v189 = *((float *)v167 + 2);
          v190 = *(float32x2_t *)(v167 + 24);
          v191 = *(float32x2_t *)(v179 + 36);
          v192 = *(float32x2_t *)(v167 + 48);
          v193 = *(float32x2_t *)(v179 + 60);
          v194 = *(float32x2_t *)v167;
          v195 = *(float32x2_t *)(v167 + 12);
          v201.f32[0] = v189;
          v196 = (float32x2_t)vzip1_s32(*(int32x2_t *)v167, (int32x2_t)v195);
          v197 = *((float *)v167 + 5);
          v198 = (float32x2_t)vzip2_s32(*(int32x2_t *)v167, (int32x2_t)v195);
          v199 = (float *)(*(_QWORD *)(a1 + 528) + v166);
          v200 = &v252;
          v201.f32[1] = v197;
          do
          {
            v202 = *(v199 - 3);
            v203 = *(v199 - 2);
            v204 = *(v199 - 1);
            v205 = *v199;
            v206 = v199[1];
            v207 = v199[2];
            v208 = (float)((float)((float)(v189 * v202) + (float)(v197 * v203)) + (float)(v180 * v204))
                 + (float)((float)((float)(v227 * *v199) + (float)(v181 * v206)) + (float)(v182 * v207));
            v209 = (float)((float)((float)(v183 * v202) + (float)(v184 * v203)) + (float)(v188 * v204))
                 + (float)((float)((float)(v190.f32[1] * v206) + (float)(v190.f32[0] * *v199)) + (float)(v180 * v207));
            v200[-2] = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v194, v202), vmul_n_f32(v195, v203)), vmul_n_f32(v190, v204)), vadd_f32(vadd_f32(vmul_n_f32(v191, *v199), vmul_n_f32(v192, v206)), vmul_n_f32(v193, v207)));
            v200[-1].f32[0] = v208;
            *v200 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v185, v202), vmul_n_f32(v186, v203)), vmul_n_f32(v187, v204)), vmla_n_f32(vmla_n_f32(vmul_n_f32(v198, v206), v196, v205), v201, v207));
            v200[1].f32[0] = v209;
            v200 += 4;
            v199 += 6;
            --v178;
          }
          while (v178);
        }
        physx::Dy::computeHi(v221, v165, (uint64_t)v13, &v250);
        v166 -= 76;
        --v165;
      }
      while ((_DWORD)v165);
    }
    v163 = (uint64_t)v16;
    v164 = (unint64_t)v216;
  }
  else
  {
    v214 = *(_QWORD *)(a1 + 624);
    v17 = (float *)physx::PxcScratchAllocator::alloc(v16, 112 * v15, 0);
    v210 = v12;
    v18 = physx::PxcScratchAllocator::alloc(v16, 32 * (int)v12, 0);
    physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(*(_QWORD *)(a1 + 608), *(_DWORD *)(a1 + 616), (uint64_t)v17);
    v19 = (v15 - 1);
    if (v15 != 1)
    {
      v20 = a1;
      v217 = v18 + 16;
      v225 = 76 * v19 + 12;
      v212 = v18;
      do
      {
        v21 = &v17[28 * v19];
        v250 = *(float32x2_t *)v21;
        v251 = *(float32x2_t *)(v21 + 2);
        v252 = *(float32x2_t *)(v21 + 4);
        v253 = *(float32x2_t *)(v21 + 6);
        v254 = *(float32x2_t *)(v21 + 8);
        v255 = *(float32x2_t *)(v21 + 10);
        v256 = *(float32x2_t *)(v21 + 12);
        v257 = *(float32x2_t *)(v21 + 14);
        v258 = *(float32x2_t *)(v21 + 16);
        v259 = *(float32x2_t *)(v21 + 18);
        v260 = *(float32x2_t *)(v21 + 20);
        v261 = *(float32x2_t *)(v21 + 22);
        v262 = *(float32x2_t *)(v21 + 24);
        v263 = v21[26];
        v264 = *((_DWORD *)v21 + 27);
        v22 = *(_QWORD *)(v20 + 624) + 160 * v19;
        v23 = *(float *)(v22 + 120);
        v235.i32[0] = 0;
        v24 = *(float32x2_t *)(v22 + 124);
        v235.i32[1] = v24.i32[1];
        v236 = vneg_f32(v24);
        v237.i32[0] = 0;
        v237.f32[1] = v23;
        v238.i32[0] = v24.i32[0];
        v238.f32[1] = -v23;
        v239.i32[0] = 0;
        physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)&v235, (uint64_t)&v250);
        v25 = (float32x2_t *)&v17[28 * *(unsigned int *)(v219 + 40 * v19 + 32)];
        v26 = v25[1];
        *v25 = vadd_f32(v250, *v25);
        v25[1] = vadd_f32(v251, v26);
        v27 = v25[3];
        v25[2] = vadd_f32(v252, v25[2]);
        v25[3] = vadd_f32(v253, v27);
        v28 = v25[5];
        v25[4] = vadd_f32(v254, v25[4]);
        v25[5] = vadd_f32(v255, v28);
        v29 = v25[7];
        v25[6] = vadd_f32(v256, v25[6]);
        v25[7] = vadd_f32(v257, v29);
        v30 = v25[9];
        v25[8] = vadd_f32(v258, v25[8]);
        v25[9] = vadd_f32(v259, v30);
        v31 = v25[11];
        v25[10] = vadd_f32(v260, v25[10]);
        v25[11] = vadd_f32(v261, v31);
        v25[12] = vadd_f32(v262, v25[12]);
        v25[13].f32[0] = v263 + v25[13].f32[0];
        v32 = *(_QWORD *)(v224 + 632) + 80 * v19;
        v35 = *(unsigned __int8 *)(v32 + 76);
        v34 = (_BYTE *)(v32 + 76);
        v33 = v35;
        v36 = *((unsigned int *)v34 - 1);
        if (v35)
        {
          v37 = (float32x2_t *)(v217 + 32 * v36);
          v38 = (float *)(*(_QWORD *)(v224 + 528) + v225);
          do
          {
            v39.f32[0] = v21[2];
            v40 = *(v38 - 3);
            v41 = *(v38 - 2);
            v42 = v21[5];
            v43 = *(v38 - 1);
            v44 = *v38;
            v45 = v21[8];
            v46 = v38[1];
            v47 = v38[2];
            v48 = (float)((float)((float)(v40 * v39.f32[0]) + (float)(v41 * v42)) + (float)(v43 * v45))
                + (float)((float)((float)(*v38 * v21[11]) + (float)(v46 * v21[14])) + (float)(v47 * v21[17]));
            v49 = *(int32x2_t *)v21;
            v50 = *(float32x2_t *)(v21 + 3);
            v51 = *(float32x2_t *)(v21 + 6);
            v52 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v21, v40), vmul_n_f32(v50, v41)), vmul_n_f32(v51, v43)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v21 + 9), *v38), vmul_n_f32(*(float32x2_t *)(v21 + 12), v46)), vmul_n_f32(*(float32x2_t *)(v21 + 15), v47)));
            v53 = (float)(vmlas_n_f32(vmuls_lane_f32(v46, v51, 1), *v38, v51.f32[0]) + (float)(v45 * v47))
                + (float)((float)((float)(v40 * v21[20]) + (float)(v41 * v21[23])) + (float)(v43 * v21[26]));
            v37[-1].f32[0] = v48;
            v54 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v21 + 18), v40), vmul_n_f32(*(float32x2_t *)(v21 + 21), v41)), vmul_n_f32(*(float32x2_t *)(v21 + 24), v43));
            v39.f32[1] = v42;
            v37[-2] = v52;
            *v37 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v49, (int32x2_t)v50), v46), (float32x2_t)vzip1_s32(v49, (int32x2_t)v50), v44), v39, v47), v54);
            v37[1].f32[0] = v53;
            v37 += 4;
            v38 += 6;
            --v33;
          }
          while (v33);
        }
        v18 = v212;
        v55 = physx::Dy::computeHi(v221, v19, (uint64_t)v13, (float32x2_t *)(v212 + 32 * v36));
        v56 = *v34;
        if (*v34)
        {
          v57 = v214 + 160 * v55;
          v58 = (float *)(v57 + 96);
          v59 = (float32x2_t *)(v57 + 100);
          v60 = (float32x2_t *)(v217 + 32 * v36);
          do
          {
            v61 = v60[-2].f32[0];
            v62 = *v58;
            v63 = v60[1].f32[0];
            v60[-1].i32[1] = 0;
            v64 = *(float32x2_t *)((char *)v60 - 12);
            v65.i32[1] = HIDWORD(*(unint64_t *)v59);
            *(float *)v65.i32 = v62;
            v66.i32[0] = vdup_lane_s32((int32x2_t)v64, 1).u32[0];
            v66.f32[1] = v61;
            v67 = vmlas_n_f32(-(float)(COERCE_FLOAT(*v59) * v61), v62, v64.f32[0]);
            *v60 = vadd_f32(vmla_f32(vmul_f32(v64, vneg_f32((float32x2_t)vrev64_s32(v65))), v66, *v59), *v60);
            v60[1].f32[0] = v67 + v63;
            v60[1].i32[1] = 0;
            v60 += 4;
            --v56;
          }
          while (v56);
        }
        v20 = v224;
        v225 -= 76;
        --v19;
      }
      while ((_DWORD)v19);
    }
    v69 = *v17;
    v68 = v17[1];
    v71 = v17[2];
    v70 = v17[3];
    v73 = v17[4];
    v72 = v17[5];
    v74 = v17[8];
    v75 = v17[19] + v17[21];
    v76 = v17[23] + v17[25];
    v77 = (float)(v17[18] + v17[18]) * 0.5;
    v78 = v75 * 0.5;
    v79 = (float)(v17[20] + v17[24]) * 0.5;
    v80 = (float)(v17[22] + v17[22]) * 0.5;
    v81 = (float)(v17[26] + v17[26]) * 0.5;
    v222 = (float)(v17[9] + v17[9]) * 0.5;
    v82 = (float)(v17[10] + v17[12]) * 0.5;
    v83 = (float)(v17[11] + v17[15]) * 0.5;
    v84 = (float)(v17[14] + v17[16]) * 0.5;
    v85 = (float)(v80 * v81) - (float)((float)(v76 * 0.5) * (float)(v76 * 0.5));
    v86 = (float)((float)(v76 * 0.5) * v79) - (float)((float)(v75 * 0.5) * v81);
    v87 = (float)((float)(v75 * 0.5) * (float)(v76 * 0.5)) - (float)(v80 * v79);
    v88 = (float)((float)((float)(v75 * 0.5) * v86) + (float)(v85 * v77)) + (float)(v87 * v79);
    v89 = 0.0;
    v90 = 1.0;
    v92 = v17[6];
    v91 = v17[7];
    v93 = 1.0;
    v94 = 0.0;
    v95 = 0.0;
    v96 = 1.0;
    v97 = 0.0;
    v98 = 1.0;
    if (v88 != 0.0)
    {
      v94 = v86 * (float)(1.0 / v88);
      v95 = v87 * (float)(1.0 / v88);
      v93 = v85 * (float)(1.0 / v88);
      v97 = (float)((float)(v77 * (float)-(float)(v76 * 0.5)) + (float)(v79 * v78)) * (float)(1.0 / v88);
      v98 = (float)((float)(v78 * (float)-(float)(v75 * 0.5)) + (float)(v77 * v80)) * (float)(1.0 / v88);
      v96 = (float)((float)(v81 * v77) - (float)(v79 * v79)) * (float)(1.0 / v88);
    }
    v99 = (float)((float)-(float)(v70 * v94) - (float)(v69 * v93)) - (float)(v92 * v95);
    v100 = (float)((float)-(float)(v73 * v94) - (float)(v68 * v93)) - (float)(v91 * v95);
    v101 = (float)((float)-(float)(v72 * v94) - (float)(v71 * v93)) - (float)(v74 * v95);
    v102 = (float)((float)-(float)(v70 * v96) - (float)(v69 * v94)) - (float)(v92 * v97);
    v103 = (float)((float)-(float)(v73 * v96) - (float)(v68 * v94)) - (float)(v91 * v97);
    v104 = (float)((float)-(float)(v72 * v96) - (float)(v71 * v94)) - (float)(v74 * v97);
    v105 = (float)((float)-(float)(v70 * v97) - (float)(v69 * v95)) - (float)(v92 * v98);
    v106 = (float)((float)-(float)(v73 * v97) - (float)(v68 * v95)) - (float)(v91 * v98);
    v211 = v98;
    v107 = (float)((float)-(float)(v72 * v97) - (float)(v71 * v95)) - (float)(v74 * v98);
    v108 = (float)((float)(v69 * v99) + (float)(v70 * v102)) + (float)(v92 * v105);
    v109 = (float)((float)(v69 * v100) + (float)(v70 * v103)) + (float)(v92 * v106);
    v110 = (float)((float)(v69 * v101) + (float)(v70 * v104)) + (float)(v92 * v107);
    v111 = (float)((float)(v68 * v99) + (float)(v73 * v102)) + (float)(v91 * v105);
    v112 = (float)((float)(v68 * v100) + (float)(v73 * v103)) + (float)(v91 * v106);
    v113 = (float)((float)(v68 * v101) + (float)(v73 * v104)) + (float)(v91 * v107);
    v114 = (float)(v71 * v99) + (float)(v72 * v102);
    v115 = (float)(v71 * v100) + (float)(v72 * v103);
    v116 = (float)(v71 * v101) + (float)(v72 * v104);
    v117 = v114 + (float)(v74 * v105);
    v118 = v115 + (float)(v74 * v106);
    v119 = v222 + v108;
    v120 = v82 + v109;
    v121 = v83 + v110;
    v122 = v82 + v111;
    v123 = (float)((float)(v17[13] + v17[13]) * 0.5) + v112;
    v124 = v83 + v117;
    v125 = v84 + v118;
    v126 = (float)((float)(v17[17] + v17[17]) * 0.5) + (float)(v116 + (float)(v74 * v107));
    v127 = (float)(v123 * v126) - (float)((float)(v84 + v113) * (float)(v84 + v118));
    v128 = (float)((float)(v84 + v113) * (float)(v83 + v117)) - (float)(v122 * v126);
    v129 = (float)(v122 * (float)(v84 + v118)) - (float)(v123 * (float)(v83 + v117));
    v130 = (float)((float)(v120 * v128) + (float)(v127 * (float)(v222 + v108))) + (float)(v129 * v121);
    v131 = 0.0;
    v132 = 1.0;
    v133 = 0.0;
    v134 = 1.0;
    if (v130 != 0.0)
    {
      v135 = 1.0 / v130;
      v90 = v127 * v135;
      v89 = v128 * v135;
      v131 = v129 * v135;
      v132 = (float)((float)(v126 * v119) - (float)(v124 * v121)) * v135;
      v133 = (float)((float)(v124 * v120) - (float)(v125 * v119)) * v135;
      v134 = (float)((float)(v119 * v123) - (float)(v120 * v122)) * v135;
    }
    v213 = v131;
    v215 = v89;
    v226 = v90;
    if ((_DWORD)v210)
    {
      v136 = 0;
      v137 = 0;
      v138 = (float)((float)(v99 * v90) + (float)(v100 * v89)) + (float)(v101 * v131);
      v139 = (float)((float)(v99 * v89) + (float)(v100 * v132)) + (float)(v101 * v133);
      v140 = (float)((float)(v99 * v131) + (float)(v100 * v133)) + (float)(v101 * v134);
      v141 = (float)((float)(v102 * v90) + (float)(v103 * v89)) + (float)(v104 * v131);
      v142 = (float)((float)(v102 * v89) + (float)(v103 * v132)) + (float)(v104 * v133);
      v143 = (float)((float)(v102 * v131) + (float)(v103 * v133)) + (float)(v104 * v134);
      v144 = (float)((float)(v105 * v90) + (float)(v106 * v89)) + (float)(v107 * v131);
      v145 = (float)((float)(v105 * v89) + (float)(v106 * v132)) + (float)(v107 * v133);
      v146 = (float)((float)(v105 * v131) + (float)(v106 * v133)) + (float)(v107 * v134);
      v147 = v95;
      v148 = (float)((float)(v99 * v141) + (float)(v100 * v142)) + (float)(v101 * v143);
      v149 = v93 + (float)((float)((float)(v99 * v138) + (float)(v100 * v139)) + (float)(v101 * v140));
      v150 = v94 + (float)((float)((float)(v102 * v138) + (float)(v103 * v139)) + (float)(v104 * v140));
      v223 = v96 + (float)((float)((float)(v102 * v141) + (float)(v103 * v142)) + (float)(v104 * v143));
      v151 = v147 + (float)((float)((float)(v105 * v138) + (float)(v106 * v139)) + (float)(v107 * v140));
      v218 = v147 + (float)((float)((float)(v99 * v144) + (float)(v100 * v145)) + (float)(v101 * v146));
      v220 = v97 + (float)((float)((float)(v102 * v144) + (float)(v103 * v145)) + (float)(v104 * v146));
      v152 = v211 + (float)((float)((float)(v105 * v144) + (float)(v106 * v145)) + (float)(v107 * v146));
      v153 = v97 + (float)((float)((float)(v105 * v141) + (float)(v106 * v142)) + (float)(v107 * v143));
      do
      {
        v155 = (float *)(v18 + 16);
        v156 = v136;
        v157 = v210;
        do
        {
          v158 = *(v155 - 4);
          v159 = *(v155 - 3);
          v160 = *(v155 - 2);
          v161 = v155[1];
          v162 = v155[2];
          v154 = (float *)(v18 + 32 * v137);
          *((float *)v13 + v156) = *((float *)v13 + v156)
                                 - (float)((float)((float)((float)(v154[5]
                                                                 * (float)((float)((float)((float)(v141 * v158)
                                                                                         + (float)(v142 * v159))
                                                                                 + (float)(v143 * v160))
                                                                         + (float)((float)((float)(v150 * *v155)
                                                                                         + (float)(v223 * v161))
                                                                                 + (float)(v220 * v162))))
                                                         + (float)(v154[4]
                                                                 * (float)((float)((float)((float)(v138 * v158)
                                                                                         + (float)(v139 * v159))
                                                                                 + (float)(v140 * v160))
                                                                         + (float)((float)((float)(v149 * *v155)
                                                                                         + (float)((float)(v94 + v148)
                                                                                                 * v161))
                                                                                 + (float)(v218 * v162)))))
                                                 + (float)(v154[6]
                                                         * (float)((float)((float)((float)(v144 * v158)
                                                                                 + (float)(v145 * v159))
                                                                         + (float)(v146 * v160))
                                                                 + (float)((float)((float)(v151 * *v155)
                                                                                 + (float)(v153 * v161))
                                                                         + (float)(v152 * v162)))))
                                         + (float)((float)((float)((float)((float)((float)((float)(v215 * v158)
                                                                                         + (float)(v132 * v159))
                                                                                 + (float)(v133 * v160))
                                                                         + (float)((float)((float)(v142 * v161)
                                                                                         + (float)(v139 * *v155))
                                                                                 + (float)(v145 * v162)))
                                                                 * v154[1])
                                                         + (float)(*v154
                                                                 * (float)((float)((float)((float)(v226 * v158)
                                                                                         + (float)(v215 * v159))
                                                                                 + (float)(v213 * v160))
                                                                         + (float)((float)((float)(v141 * v161)
                                                                                         + (float)(v138 * *v155))
                                                                                 + (float)(v144 * v162)))))
                                                 + (float)(v154[2]
                                                         * (float)((float)((float)((float)(v213 * v158)
                                                                                 + (float)(v133 * v159))
                                                                         + (float)(v134 * v160))
                                                                 + (float)((float)((float)(v143 * v161)
                                                                                 + (float)(v140 * *v155))
                                                                         + (float)(v146 * v162))))));
          ++v156;
          v155 += 8;
          --v157;
        }
        while (v157);
        ++v137;
        v136 += v210;
      }
      while (v137 != v210);
    }
    physx::PxcScratchAllocator::free((uint64_t)v16, (unint64_t)v17);
    v163 = (uint64_t)v16;
    v164 = v18;
  }
  return physx::PxcScratchAllocator::free(v163, v164);
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedMassMatrix(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __int32 v11;
  uint64_t v12;
  pthread_mutex_t **v13;
  char *v14;
  char v15;
  uint64_t i;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  char *v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  uint64_t v27;
  _OWORD *v29;
  float v30;
  float32x2_t v31;
  float32x2_t v33;
  float32x2_t v35;
  float32x2_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  float v46;
  _OWORD *v47;
  uint64_t v48;
  float32x2_t v49;
  float v50;
  float v51;
  float32_t v52;
  float32x2_t *v53;
  int32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32_t v58;
  float32x2_t v59;
  void *v60;
  physx::PxcScratchAllocator *v61;
  uint64_t v62;
  float32x2_t v63;
  int v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if (a1[85].i8[4])
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 2024, "ArticulationHelper::getGeneralizedMassMatrix() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v62 = *(_QWORD *)(a2 + 16);
  v11 = a1[77].i32[0];
  v12 = a1[81].u32[1];
  v13 = *(pthread_mutex_t ***)(a2 + 104);
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v65 = physx::PxcScratchAllocator::alloc(v13, 240 * v11, 0);
  v66 = (_OWORD *)(v65 + (32 * v11));
  v67 = v65 + (v11 << 6);
  v68 = (_OWORD *)(v65 + (96 * v11));
  v60 = (void *)v65;
  v61 = (physx::PxcScratchAllocator *)v13;
  v70 = v65 + (v11 << 7);
  v14 = (char *)physx::PxcScratchAllocator::alloc(v13, 4 * (int)v12, 0);
  v71 = 0;
  v72 = v14;
  v69 = 0;
  v15 = **(_BYTE **)&a1[83];
  bzero(v14, (4 * v12));
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v73 = v62 + 4 * (v12 * i);
      *(_DWORD *)&v14[4 * i] = 1065353216;
      if ((v15 & 1) != 0)
      {
        v17 = a1[77].u32[0];
        v18 = v66;
        v19 = v68;
        v20 = v72;
        *v66 = 0u;
        v18[1] = 0u;
        *v19 = 0u;
        v19[1] = 0u;
        if (v17 >= 2)
        {
          v21 = a1[76];
          v22 = a1[79];
          v23 = a1[78];
          v24 = 76;
          v25 = 1;
          v26 = a1[60];
          do
          {
            v27 = *(_QWORD *)&v23 + 160 * v25;
            _S2 = *(_DWORD *)(v27 + 120);
            v29 = &v18[2 * *(unsigned int *)(*(_QWORD *)&v21 + 40 * v25 + 32)];
            v30 = *(float *)v29;
            v31 = *(float32x2_t *)(v27 + 124);
            _D0 = *(float32x2_t *)((char *)v29 + 4);
            v33.i32[0] = vdup_lane_s32((int32x2_t)v31, 1).u32[0];
            v33.i32[1] = _S2;
            _D5.i32[0] = vdup_lane_s32((int32x2_t)_D0, 1).u32[0];
            _D5.i32[1] = *(_DWORD *)v29;
            v35 = vmls_f32(vmul_f32(v33, _D0), _D5, v31);
            __asm { FMLS            S5, S2, V0.S[0] }
            v40 = vadd_f32((float32x2_t)v29[1], v35);
            v41 = _D5.f32[0] + *((float *)v29 + 6);
            v42 = *(_QWORD *)&v22 + 80 * v25;
            v43 = *(unsigned __int8 *)(v42 + 76);
            if (*(_BYTE *)(v42 + 76))
            {
              v44 = (float *)&v20[4 * *(unsigned int *)(v42 + 72)];
              v45 = *(_QWORD *)&a1[66] + v24;
              do
              {
                v46 = *v44++;
                v30 = v30 + (float)(v46 * *(float *)v45);
                _D0 = vadd_f32(_D0, vmul_n_f32(*(float32x2_t *)(v45 + 4), v46));
                v40 = vadd_f32(v40, vmul_n_f32(*(float32x2_t *)(v45 + 12), v46));
                v41 = v41 + (float)(v46 * *(float *)(v45 + 20));
                v45 += 24;
                --v43;
              }
              while (v43);
            }
            v47 = &v18[2 * v25];
            *(float *)v47 = v30;
            *(float32x2_t *)((char *)v47 + 4) = _D0;
            *((_DWORD *)v47 + 3) = 0;
            *((float32x2_t *)v47 + 2) = v40;
            *((float *)v47 + 6) = v41;
            *((_DWORD *)v47 + 7) = 0;
            v48 = *(_QWORD *)&v26 + 112 * v25;
            v49.i32[0] = *(_DWORD *)(v48 + 8);
            v50 = *(float *)(v48 + 20);
            v51 = *(float *)(v48 + 32);
            v52 = (float)((float)((float)(v30 * v49.f32[0]) + (float)(v50 * _D0.f32[0])) + vmuls_lane_f32(v51, _D0, 1))
                + (float)((float)((float)(*(float *)(v48 + 44) * v40.f32[0])
                                + vmuls_lane_f32(*(float *)(v48 + 56), v40, 1))
                        + (float)(v41 * *(float *)(v48 + 68)));
            v53 = (float32x2_t *)&v19[2 * v25];
            v54 = *(int32x2_t *)v48;
            v55 = *(float32x2_t *)(v48 + 12);
            v56 = *(float32x2_t *)(v48 + 24);
            v57 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v48, v30), vmul_n_f32(v55, _D0.f32[0])), vmul_lane_f32(v56, _D0, 1)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v48 + 36), v40.f32[0]), vmul_lane_f32(*(float32x2_t *)(v48 + 48), v40, 1)), vmul_n_f32(*(float32x2_t *)(v48 + 60), v41)));
            v58 = (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v40, v56).i32[1]), v40.f32[0], v56.f32[0])
                        + (float)(v51 * v41))
                + (float)((float)((float)(v30 * *(float *)(v48 + 80)) + (float)(*(float *)(v48 + 92) * _D0.f32[0]))
                        + vmuls_lane_f32(*(float *)(v48 + 104), _D0, 1));
            v53[1].f32[0] = v52;
            v53[1].i32[1] = 0;
            v49.f32[1] = v50;
            v59 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_lane_f32((float32x2_t)vzip2_s32(v54, (int32x2_t)v55), v40, 1), (float32x2_t)vzip1_s32(v54, (int32x2_t)v55), v40.f32[0]), v49, v41), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v48 + 72), v30), vmul_n_f32(*(float32x2_t *)(v48 + 84), _D0.f32[0])), vmul_lane_f32(*(float32x2_t *)(v48 + 96), _D0, 1)));
            *v53 = v57;
            v53[2] = v59;
            v53[3].f32[0] = v58;
            v53[3].i32[1] = 0;
            ++v25;
            v24 += 76;
          }
          while (v25 != v17);
        }
        physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(a1 + 22, (uint64_t)v68, v73);
      }
      else
      {
        v63 = 0;
        v64 = 0;
        physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase((uint64_t)a1, (uint64_t)&a1[22], &v63, (uint64_t)&v65, 0);
      }
      *(_DWORD *)&v14[4 * i] = 0;
    }
  }
  physx::PxcScratchAllocator::free((uint64_t)v61, (unint64_t)v14);
  return physx::PxcScratchAllocator::free((uint64_t)v61, (unint64_t)v60);
}

uint64_t physx::Dy::writeBackContactCoulomb4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  int v21;
  unsigned int v26;
  float32x4_t v27;
  char v28;
  uint64_t v29;
  unsigned __int8 *v30;
  __int16 *v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  float32x4_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 **)(result + 32);
  v5 = *(_DWORD **)(result + 40);
  v6 = *(_DWORD **)(result + 88);
  v7 = *(_DWORD **)(result + 136);
  v8 = *(_DWORD **)(result + 184);
  v9 = *((unsigned __int16 *)v4 + 1);
  v10 = *v4;
  v43 = 0;
  if (v9)
  {
    v11 = &v4[v9];
    _ZF = v10 == 7;
    v13 = 128;
    if (_ZF)
      v13 = 176;
    v14 = 0uLL;
    _X5 = v4;
    do
    {
      v16 = (float32x4_t *)(_X5 + 176);
      v17 = _X5[8];
      v18 = _X5[9];
      v19 = _X5[10];
      v20 = _X5[11];
      v21 = _X5[1];
      __asm
      {
        PRFM            #0, [X5,#0x1B0]
        PRFM            #0, [X5,#0x230]
      }
      if (_X5[1])
      {
        v26 = 0;
        do
        {
          v27 = v16[3];
          if (v5 && v26 < _X5[4])
            *v5++ = v27.i32[0];
          if (v6 && v26 < _X5[5])
            *v6++ = v27.i32[1];
          if (v7 && v26 < _X5[6])
            *v7++ = v27.i32[2];
          if (v8 && v26 < _X5[7])
            *v8++ = v27.i32[3];
          v16 = (float32x4_t *)((char *)v16 + v13);
          v14 = vaddq_f32(v14, v27);
          ++v26;
        }
        while (v21 != v26);
      }
      _X5 = (unsigned __int8 *)v16;
    }
    while (v16 < (float32x4_t *)v11);
    BYTE1(v43) = v18 & 1;
    BYTE2(v43) = v19 & 1;
    HIBYTE(v43) = v20 & 1;
    v28 = v17 & 1;
  }
  else
  {
    v28 = 0;
    v14 = 0uLL;
  }
  v29 = 0;
  v30 = v4 + 144;
  LOBYTE(v43) = v28;
  v44 = v14;
  v31 = (__int16 *)(result + 18);
  do
  {
    if (*((_BYTE *)&v43 + v29))
    {
      if (*(v31 - 1) == -1 && *v31 == -1)
      {
        v32 = v44.f32[v29];
        if (v32 != 0.0)
        {
          v33 = *(_QWORD *)(a3 + 8 * v29);
          v34 = *(float *)(v33 + 28);
          v35 = *(_QWORD *)(a4 + 8 * v29);
          v36 = *(float *)(v35 + 28);
          if (v34 < 3.4028e38 || v36 < 3.4028e38)
          {
            if (v34 >= v36)
              v34 = *(float *)(v35 + 28);
            v38 = *(_DWORD *)(v33 + 72) << 7;
            v39 = *(_DWORD *)(v35 + 72) << 7;
            v40 = *(_QWORD *)&v30[8 * v29];
            v41 = *(unsigned int *)(a2 + 16);
            *(_DWORD *)(a2 + 16) = v41 + 1;
            result = *(_QWORD *)(a2 + 8) + 32 * v41;
            *(_QWORD *)result = v40;
            if (v39 >= v38)
              v42 = v38;
            else
              v42 = v39;
            if (v39 <= v38)
              v39 = v38;
            *(float *)(result + 8) = v32;
            *(float *)(result + 12) = v34;
            *(_DWORD *)(result + 16) = v42;
            *(_DWORD *)(result + 20) = v39;
          }
        }
      }
    }
    ++v29;
    v31 += 24;
  }
  while (v29 != 4);
  return result;
}

int32x4_t physx::Dy::solveContactCoulomb4_Block(int32x4_t **a1)
{
  int32x4_t *v1;
  float *v2;
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  float *v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float *i32;
  int32x4_t v17;
  float *v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  unsigned int v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  float32x2x2_t v83;
  float32x2x2_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x2x2_t v87;
  float32x2x2_t v88;
  int32x4_t v89;
  int32x4_t v90;
  float32x2x2_t v91;
  float32x2x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2x2_t v95;
  int32x4_t v96;
  float32x2x2_t v97;
  int32x4_t v98;
  int32x4_t result;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;

  v2 = (float *)*a1;
  v1 = a1[1];
  v4 = a1[6];
  v3 = a1[7];
  v6 = a1[12];
  v5 = a1[13];
  v7 = **a1;
  v8 = vzip1q_s32(v7, *v6);
  v10 = a1[18];
  v9 = a1[19];
  v11 = *a1 + 1;
  v13 = v1[1];
  v14 = v4[1];
  v15 = v3[1];
  v17 = v6[1];
  v19 = v5[1];
  v20 = v10[1];
  v21 = v9[1];
  v22 = vzip2q_s32(v7, *v6);
  v23 = vzip1q_s32(*v4, *v10);
  v24 = (float32x4_t)vzip1q_s32(v8, v23);
  v25 = (float32x4_t)vzip2q_s32(v8, v23);
  v106 = vzip2q_s32(*v4, *v10);
  v107 = v22;
  v26 = (float32x4_t)vzip1q_s32(v22, v106);
  v27 = vzip1q_s32(*v1, *v5);
  v28 = vzip1q_s32(*v3, *v9);
  v29 = (float32x4_t)vzip1q_s32(v27, v28);
  v30 = (float32x4_t)vzip2q_s32(v27, v28);
  v104 = vzip2q_s32(*v3, *v9);
  v105 = vzip2q_s32(*v1, *v5);
  v31 = (float32x4_t)vzip1q_s32(v105, v104);
  v32 = vzip1q_s32(*v11, v17);
  v33 = vzip1q_s32(v14, v20);
  v34 = (float32x4_t)vzip1q_s32(v32, v33);
  v35 = (float32x4_t)vzip2q_s32(v32, v33);
  v102 = vzip2q_s32(v14, v20);
  v103 = vzip2q_s32(*v11, v17);
  v36 = (float32x4_t)vzip1q_s32(v103, v102);
  v37 = vzip1q_s32(v13, v19);
  v38 = vzip1q_s32(v15, v21);
  v39 = (float32x4_t)vzip1q_s32(v37, v38);
  v40 = (float32x4_t)vzip2q_s32(v37, v38);
  v100 = vzip2q_s32(v15, v21);
  v101 = vzip2q_s32(v13, v19);
  v41 = (float32x4_t)vzip1q_s32(v101, v100);
  v42 = (float32x4_t *)a1[4];
  if (v42->i16[1])
  {
    v43 = (float32x4_t *)((char *)v42 + v42->u16[1]);
    do
    {
      v44 = v42->u8[1];
      v45 = v42[5];
      v47 = v42[2];
      v46 = v42[3];
      v48 = v42[4];
      v110 = v29;
      v111 = v30;
      v108 = v42[6];
      v109 = v31;
      if (v42->i8[1])
      {
        v49 = 0;
        v50 = v42[7];
        v51 = v42[8];
        v52 = vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v47), v46, v30), v48, v31);
        v53 = vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v47), v46, v25), v48, v26);
        v54 = vnegq_f32(v42[6]);
        v55 = v42->u16[1] + 96;
        v56 = 0uLL;
        do
        {
          _X20 = &v42[v49];
          __asm
          {
            PRFM            #0, [X20,#0x160]
            PRFM            #0, [X20,#0x1E0]
            PRFM            #0, [X20,#0x260]
            PRFM            #0, [X20,#0x2E0]
          }
          v66 = v42[v49 + 11];
          v67 = v42[v49 + 12];
          v69 = v42[v49 + 13];
          v68 = v42[v49 + 14];
          v70 = v42[v49 + 19];
          v71 = v42[v49 + 20];
          v72 = v42[v49 + 21];
          v73 = vminq_f32(vaddq_f32(v68, vmaxq_f32(vmlsq_f32(vmlaq_f32(vnegq_f32(v42[v49 + 17]), v42[v49 + 15], v42[v49 + 16]), v42[v49 + 15], vsubq_f32(vaddq_f32(v53, vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v66), v35, v67), v36, v69)), vaddq_f32(v52, vmlaq_f32(vmlaq_f32(vmulq_f32(v39, v70), v40, v71), v41, v72)))), vnegq_f32(v68))), v42[v49 + 18]);
          v74 = vsubq_f32(v73, v68);
          v53 = vmlaq_f32(v53, v74, v45);
          v52 = vmlaq_f32(v52, v74, v54);
          v56 = vaddq_f32(v56, v74);
          v75 = vmulq_f32(v50, v74);
          v76 = vmulq_f32(v51, v74);
          v34 = vmlaq_f32(v34, v75, v66);
          v39 = vmlsq_f32(v39, v76, v70);
          v35 = vmlaq_f32(v35, v75, v67);
          v40 = vmlsq_f32(v40, v76, v71);
          v36 = vmlaq_f32(v36, v75, v69);
          v41 = vmlsq_f32(v41, v76, v72);
          _X20[14] = v73;
          *(float32x4_t *)((char *)v42 + v55) = v73;
          v55 += 16;
          v49 += 11;
        }
        while (11 * v44 != v49);
      }
      else
      {
        v56 = 0uLL;
      }
      v42 += 11 * v44 + 11;
      v77 = vmulq_f32(v45, v56);
      v78 = vmulq_f32(v108, v56);
      v24 = vmlaq_f32(v24, v77, v47);
      v29 = vmlsq_f32(v110, v78, v47);
      v25 = vmlaq_f32(v25, v77, v46);
      v30 = vmlsq_f32(v111, v78, v46);
      v26 = vmlaq_f32(v26, v77, v48);
      v31 = vmlsq_f32(v109, v78, v48);
    }
    while (v42 < v43);
  }
  v79 = vzip2q_s32(v101, v100);
  v80 = vzip2q_s32(v103, v102);
  v81 = vzip2q_s32(v105, v104);
  v82 = vzip2q_s32(v107, v106);
  v83 = (float32x2x2_t)vzip1q_s32((int32x4_t)v24, (int32x4_t)v26);
  v84 = (float32x2x2_t)vzip2q_s32((int32x4_t)v24, (int32x4_t)v26);
  v85 = vzip1q_s32((int32x4_t)v25, v82);
  v86 = vzip2q_s32((int32x4_t)v25, v82);
  v87 = (float32x2x2_t)vzip1q_s32((int32x4_t)v29, (int32x4_t)v31);
  v88 = (float32x2x2_t)vzip2q_s32((int32x4_t)v29, (int32x4_t)v31);
  vst2_f32(v2, v83);
  v89 = vzip1q_s32((int32x4_t)v30, v81);
  *v4 = vzip2q_s32((int32x4_t)v83, v85);
  v90 = vzip2q_s32((int32x4_t)v30, v81);
  vst2_f32((float *)v6->i32, v84);
  *v10 = vzip2q_s32((int32x4_t)v84, v86);
  vst2_f32((float *)v1->i32, v87);
  v91 = (float32x2x2_t)vzip1q_s32((int32x4_t)v34, (int32x4_t)v36);
  *v3 = vzip2q_s32((int32x4_t)v87, v89);
  v92 = (float32x2x2_t)vzip2q_s32((int32x4_t)v34, (int32x4_t)v36);
  v93 = vzip1q_s32((int32x4_t)v35, v80);
  vst2_f32((float *)v5->i32, v88);
  *v9 = vzip2q_s32((int32x4_t)v88, v90);
  v94 = vzip2q_s32((int32x4_t)v35, v80);
  vst2_f32((float *)v11->i32, v91);
  v4[1] = vzip2q_s32((int32x4_t)v91, v93);
  v95 = (float32x2x2_t)vzip1q_s32((int32x4_t)v39, (int32x4_t)v41);
  i32 = (float *)v6[1].i32;
  vst2_f32(i32, v92);
  v10[1] = vzip2q_s32((int32x4_t)v92, v94);
  v96 = vzip1q_s32((int32x4_t)v40, v79);
  v12 = (float *)v1[1].i32;
  vst2_f32(v12, v95);
  v3[1] = vzip2q_s32((int32x4_t)v95, v96);
  v97 = (float32x2x2_t)vzip2q_s32((int32x4_t)v39, (int32x4_t)v41);
  v98 = vzip2q_s32((int32x4_t)v40, v79);
  result = vzip2q_s32((int32x4_t)v97, v98);
  v18 = (float *)v5[1].i32;
  vst2_f32(v18, v97);
  v9[1] = result;
  return result;
}

int32x4_t physx::Dy::solveContactCoulomb4_StaticBlock(int32x4_t **a1)
{
  float *v1;
  int32x4_t *v2;
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t v5;
  int32x4_t *v6;
  int32x4_t v7;
  float *i32;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x2x2_t v55;
  float32x2x2_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x2x2_t v59;
  float32x2x2_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t result;

  v1 = (float *)*a1;
  v2 = a1[6];
  v3 = a1[12];
  v4 = a1[18];
  v5 = **a1;
  v6 = *a1 + 1;
  v7 = v2[1];
  v9 = v3[1];
  v10 = v4[1];
  v11 = vzip1q_s32(v5, *v3);
  v12 = vzip2q_s32(v5, *v3);
  v13 = vzip1q_s32(*v2, *v4);
  v14 = vzip2q_s32(*v2, *v4);
  v15 = (float32x4_t)vzip1q_s32(v11, v13);
  v16 = (float32x4_t)vzip2q_s32(v11, v13);
  v17 = (float32x4_t)vzip1q_s32(v12, v14);
  v18 = vzip1q_s32(*v6, v9);
  v19 = vzip2q_s32(*v6, v9);
  v20 = vzip1q_s32(v7, v10);
  v21 = vzip2q_s32(v7, v10);
  v22 = (float32x4_t)vzip1q_s32(v18, v20);
  v23 = (float32x4_t)vzip2q_s32(v18, v20);
  v24 = (float32x4_t)vzip1q_s32(v19, v21);
  v25 = (float32x4_t *)a1[4];
  if (v25->i16[1])
  {
    v26 = (float32x4_t *)((char *)v25 + v25->u16[1]);
    do
    {
      v27 = v25->u8[1];
      v29 = v25[2];
      v28 = v25[3];
      v30 = v25[4];
      v31 = v25[5];
      if (v25->i8[1])
      {
        v32 = (float32x4_t *)((char *)v25 + v25->u16[1] + 96);
        v33 = v25[7];
        v34 = vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v29), v28, v16), v30, v17);
        _X0 = v25 + 18;
        v36 = 0uLL;
        v37 = v25->u8[1];
        do
        {
          __asm
          {
            PRFM            #0, [X0,#0x10]
            PRFM            #0, [X0,#0x90]
            PRFM            #0, [X0,#0x110]
          }
          v45 = _X0[-7];
          v46 = _X0[-6];
          v47 = _X0[-5];
          v48 = _X0[-4];
          v49 = vminq_f32(vaddq_f32(v48, vmaxq_f32(vmlsq_f32(vmlaq_f32(vnegq_f32(_X0[-1]), _X0[-3], _X0[-2]), _X0[-3], vaddq_f32(v34, vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v45), v23, v46), v24, v47))), vnegq_f32(v48))), *_X0);
          v50 = vsubq_f32(v49, v48);
          v51 = vmulq_f32(v33, v50);
          v34 = vmlaq_f32(v34, v50, v31);
          v36 = vaddq_f32(v36, v50);
          v22 = vmlaq_f32(v22, v51, v45);
          v23 = vmlaq_f32(v23, v51, v46);
          v24 = vmlaq_f32(v24, v51, v47);
          _X0[-4] = v49;
          *v32++ = v49;
          _X0 += 8;
          --v37;
        }
        while (v37);
      }
      else
      {
        v36 = 0uLL;
      }
      v25 += 8 * v27 + 11;
      v52 = vmulq_f32(v31, v36);
      v15 = vmlaq_f32(v15, v52, v29);
      v16 = vmlaq_f32(v16, v52, v28);
      v17 = vmlaq_f32(v17, v52, v30);
    }
    while (v25 < v26);
  }
  v53 = vzip2q_s32(v19, v21);
  v54 = vzip2q_s32(v12, v14);
  v55 = (float32x2x2_t)vzip1q_s32((int32x4_t)v15, (int32x4_t)v17);
  v56 = (float32x2x2_t)vzip2q_s32((int32x4_t)v15, (int32x4_t)v17);
  v57 = vzip1q_s32((int32x4_t)v16, v54);
  v58 = vzip2q_s32((int32x4_t)v16, v54);
  v59 = (float32x2x2_t)vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
  v60 = (float32x2x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v24);
  v61 = vzip1q_s32((int32x4_t)v23, v53);
  vst2_f32(v1, v55);
  *v2 = vzip2q_s32((int32x4_t)v55, v57);
  v62 = vzip2q_s32((int32x4_t)v23, v53);
  vst2_f32((float *)v3->i32, v56);
  *v4 = vzip2q_s32((int32x4_t)v56, v58);
  vst2_f32((float *)v6->i32, v59);
  v2[1] = vzip2q_s32((int32x4_t)v59, v61);
  result = vzip2q_s32((int32x4_t)v60, v62);
  i32 = (float *)v3[1].i32;
  vst2_f32(i32, v60);
  v4[1] = result;
  return result;
}

float32x4_t *physx::Dy::solveContactCoulombPreBlock_Conclude(uint64_t a1)
{
  physx::Dy::solveContactCoulomb4_Block((int32x4_t **)a1);
  return physx::Dy::concludeContactCoulomb4(*(float32x4_t **)(a1 + 32));
}

float32x4_t *physx::Dy::concludeContactCoulomb4(float32x4_t *result)
{
  float32x4_t *v1;
  uint64_t v2;
  float32x4_t *v3;
  int v4;

  if (result->i16[1])
  {
    v1 = (float32x4_t *)((char *)result + result->u16[1]);
    v2 = 8;
    if (result->i8[0] == 7)
      v2 = 11;
    do
    {
      v3 = result + 11;
      v4 = result->u8[1];
      __asm
      {
        PRFM            #0, [X0,#0x130]
        PRFM            #0, [X0,#0x1B0]
        PRFM            #0, [X0,#0x230]
      }
      if (result->i8[1])
      {
        do
        {
          result = &v3[v2];
          v3[6] = vmaxq_f32(v3[6], (float32x4_t)0);
          v3 = (float32x4_t *)((char *)v3 + v2 * 16);
          --v4;
        }
        while (v4);
      }
      else
      {
        result += 11;
      }
    }
    while (result < v1);
  }
  return result;
}

float32x4_t *physx::Dy::solveContactCoulombPreBlock_ConcludeStatic(uint64_t a1)
{
  physx::Dy::solveContactCoulomb4_StaticBlock((int32x4_t **)a1);
  return physx::Dy::concludeContactCoulomb4(*(float32x4_t **)(a1 + 32));
}

uint64_t physx::Dy::solveContactCoulombPreBlock_WriteBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _QWORD v25[4];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  physx::Dy::solveContactCoulomb4_Block((int32x4_t **)a1);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + 112 * *(unsigned int *)(a1 + 20);
  v7 = v5 + 112 * *(unsigned int *)(a1 + 68);
  v8 = v5 + 112 * *(unsigned int *)(a1 + 116);
  v9 = v5 + 112 * *(unsigned int *)(a1 + 164);
  v10 = v5 + 112 * *(unsigned int *)(a1 + 24);
  v11 = v5 + 112 * *(unsigned int *)(a1 + 72);
  v12 = v5 + 112 * *(unsigned int *)(a1 + 120);
  v13 = v5 + 112 * *(unsigned int *)(a1 + 168);
  v26[0] = v6;
  v26[1] = v7;
  v26[2] = v8;
  v26[3] = v9;
  v25[0] = v10;
  v25[1] = v11;
  v25[2] = v12;
  v25[3] = v13;
  result = physx::Dy::writeBackContactCoulomb4(a1, a3, (uint64_t)v26, (uint64_t)v25);
  v15 = *(_DWORD *)(a3 + 16);
  if (v15 > *(_DWORD *)(a3 + 20) - 4)
  {
    v16 = *(unsigned int **)(a3 + 48);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + v15, v16));
    v18 = *(_DWORD *)(a3 + 16);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = v15 - v18 + v17;
      do
      {
        v22 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v19);
        v23 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v21 + v20));
        v24 = v22[1];
        *v23 = *v22;
        v23[1] = v24;
        ++v20;
        v19 += 32;
      }
      while (v20 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulombPreBlock_WriteBackStatic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _QWORD v25[4];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  physx::Dy::solveContactCoulomb4_StaticBlock((int32x4_t **)a1);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + 112 * *(unsigned int *)(a1 + 20);
  v7 = v5 + 112 * *(unsigned int *)(a1 + 68);
  v8 = v5 + 112 * *(unsigned int *)(a1 + 116);
  v9 = v5 + 112 * *(unsigned int *)(a1 + 164);
  v10 = v5 + 112 * *(unsigned int *)(a1 + 24);
  v11 = v5 + 112 * *(unsigned int *)(a1 + 72);
  v12 = v5 + 112 * *(unsigned int *)(a1 + 120);
  v13 = v5 + 112 * *(unsigned int *)(a1 + 168);
  v26[0] = v6;
  v26[1] = v7;
  v26[2] = v8;
  v26[3] = v9;
  v25[0] = v10;
  v25[1] = v11;
  v25[2] = v12;
  v25[3] = v13;
  result = physx::Dy::writeBackContactCoulomb4(a1, a3, (uint64_t)v26, (uint64_t)v25);
  v15 = *(_DWORD *)(a3 + 16);
  if (v15 > *(_DWORD *)(a3 + 20) - 4)
  {
    v16 = *(unsigned int **)(a3 + 48);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + v15, v16));
    v18 = *(_DWORD *)(a3 + 16);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = v15 - v18 + v17;
      do
      {
        v22 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v19);
        v23 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v21 + v20));
        v24 = v22[1];
        *v23 = *v22;
        v23[1] = v24;
        ++v20;
        v19 += 32;
      }
      while (v20 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

int32x4_t physx::Dy::solveFriction4_Block(int32x4_t **a1)
{
  int32x4_t *v1;
  float *v2;
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  float *v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float *i32;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float *v29;
  int32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int32 v64;
  float32x4_t *v65;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  float32x2x2_t v91;
  float32x2x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2x2_t v95;
  float32x2x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  float32x2x2_t v99;
  float32x2x2_t v100;
  int32x4_t v101;
  int32x4_t v102;
  float32x2x2_t v103;
  int32x4_t v104;
  float32x2x2_t v105;
  int32x4_t v106;
  int32x4_t result;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;

  v2 = (float *)*a1;
  v1 = a1[1];
  v4 = a1[6];
  v3 = a1[7];
  v6 = a1[12];
  v5 = a1[13];
  v7 = **a1;
  v8 = vzip1q_s32(v7, *v6);
  v10 = a1[18];
  v9 = a1[19];
  v11 = *a1 + 1;
  v13 = v1[1];
  v14 = v4[1];
  v15 = v3[1];
  v17 = v6[1];
  v18 = v10[1];
  v19 = vzip2q_s32(v7, *v6);
  v20 = vzip1q_s32(*v4, *v10);
  v21 = v9[1];
  v22 = (float32x4_t)vzip1q_s32(v8, v20);
  v23 = (float32x4_t)vzip2q_s32(v8, v20);
  v113 = vzip2q_s32(*v4, *v10);
  v114 = v19;
  v24 = (float32x4_t)vzip1q_s32(v19, v113);
  v25 = vzip1q_s32(*v1, *v5);
  v26 = vzip1q_s32(*v3, *v9);
  v27 = (float32x4_t)vzip1q_s32(v25, v26);
  v28 = (float32x4_t)vzip2q_s32(v25, v26);
  v30 = v5[1];
  v111 = vzip2q_s32(*v3, *v9);
  v112 = vzip2q_s32(*v1, *v5);
  v31 = (float32x4_t)vzip1q_s32(v112, v111);
  v32 = vzip1q_s32(*v11, v17);
  v33 = vzip1q_s32(v14, v18);
  v34 = (float32x4_t)vzip1q_s32(v32, v33);
  v35 = (float32x4_t)vzip2q_s32(v32, v33);
  v109 = vzip2q_s32(v14, v18);
  v110 = vzip2q_s32(*v11, v17);
  v36 = (float32x4_t)vzip1q_s32(v110, v109);
  v37 = vzip1q_s32(v13, v30);
  v38 = vzip1q_s32(v15, v21);
  v39 = vzip2q_s32(v15, v21);
  v40 = (float32x4_t)vzip1q_s32(v37, v38);
  v41 = (float32x4_t)vzip2q_s32(v37, v38);
  v108 = vzip2q_s32(v13, v30);
  v42 = (float32x4_t)vzip1q_s32(v108, v39);
  if (*((_WORD *)a1 + 15))
  {
    v43 = (float32x4_t *)a1[4];
    v44 = &v43[*((unsigned __int16 *)a1 + 15)];
    do
    {
      v45 = v43 + 6;
      v46 = v43->u8[1];
      _X4 = (uint64_t)&v43[v46 + 6];
      __asm
      {
        PRFM            #0, [X4,#0x80]
        PRFM            #0, [X4,#0x100]
        PRFM            #0, [X4,#0x180]
      }
      v55 = v43->u8[2];
      if (v43->i8[2])
      {
        v56 = 0;
        v57 = 0;
        v58 = v46;
        v59 = v43[1];
        v60 = v43[2];
        v61 = v43[3];
        v62 = v43[4];
        v63 = v43[5];
        v64 = v43->i32[3];
        v65 = &v43[v58];
        do
        {
          _X23 = &v65[v57];
          __asm
          {
            PRFM            #0, [X23,#0x120]
            PRFM            #0, [X23,#0x1A0]
            PRFM            #0, [X23,#0x220]
            PRFM            #0, [X23,#0x2A0]
          }
          v71 = v65[v57 + 6];
          v72 = v65[v57 + 7];
          v73 = v65[v57 + 8];
          v74 = v65[v57 + 9];
          v75 = v65[v57 + 10];
          v76 = v65[v57 + 11];
          v77 = v65[v57 + 16];
          v78 = v65[v57 + 17];
          v79 = v65[v57 + 15];
          v80 = vmulq_f32(v59, v45[v56 >> v64]);
          v81 = vmaxq_f32(vminq_f32(vmlaq_f32(vmlsq_f32(v65[v57 + 12], v65[v57 + 13], v65[v57 + 14]), v65[v57 + 13], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v71), v72, v23), v73, v24), vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v74), v35, v75), v36, v76)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v27, v71), v72, v28), v73, v31), vmlaq_f32(vmlaq_f32(vmulq_f32(v40, v79), v41, v77), v42, v78)))), v80), vnegq_f32(v80));
          v82 = vsubq_f32(v81, v65[v57 + 12]);
          v83 = vmulq_f32(v60, v82);
          v84 = vmulq_f32(v61, v82);
          v22 = vmlaq_f32(v22, v83, v71);
          v27 = vmlsq_f32(v27, v84, v71);
          v23 = vmlaq_f32(v23, v83, v72);
          v28 = vmlsq_f32(v28, v84, v72);
          v24 = vmlaq_f32(v24, v83, v73);
          v31 = vmlsq_f32(v31, v84, v73);
          v85 = vmulq_f32(v62, v82);
          v34 = vmlaq_f32(v34, v85, v74);
          v35 = vmlaq_f32(v35, v85, v75);
          v36 = vmlaq_f32(v36, v85, v76);
          v86 = vmulq_f32(v63, v82);
          v40 = vmlsq_f32(v40, v86, v79);
          v41 = vmlsq_f32(v41, v86, v77);
          v42 = vmlsq_f32(v42, v86, v78);
          _X23[12] = v81;
          v57 += 12;
          ++v56;
        }
        while (12 * v55 != v57);
      }
      v43 = (float32x4_t *)(_X4 + 192 * v55);
    }
    while (v43 < v44);
  }
  v87 = vzip2q_s32(v108, v39);
  v88 = vzip2q_s32(v110, v109);
  v89 = vzip2q_s32(v112, v111);
  v90 = vzip2q_s32(v114, v113);
  v91 = (float32x2x2_t)vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
  v92 = (float32x2x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v24);
  v93 = vzip1q_s32((int32x4_t)v23, v90);
  v94 = vzip2q_s32((int32x4_t)v23, v90);
  v95 = (float32x2x2_t)vzip1q_s32((int32x4_t)v27, (int32x4_t)v31);
  v96 = (float32x2x2_t)vzip2q_s32((int32x4_t)v27, (int32x4_t)v31);
  vst2_f32(v2, v91);
  v97 = vzip1q_s32((int32x4_t)v28, v89);
  *v4 = vzip2q_s32((int32x4_t)v91, v93);
  v98 = vzip2q_s32((int32x4_t)v28, v89);
  vst2_f32((float *)v6->i32, v92);
  *v10 = vzip2q_s32((int32x4_t)v92, v94);
  vst2_f32((float *)v1->i32, v95);
  v99 = (float32x2x2_t)vzip1q_s32((int32x4_t)v34, (int32x4_t)v36);
  *v3 = vzip2q_s32((int32x4_t)v95, v97);
  v100 = (float32x2x2_t)vzip2q_s32((int32x4_t)v34, (int32x4_t)v36);
  v101 = vzip1q_s32((int32x4_t)v35, v88);
  vst2_f32((float *)v5->i32, v96);
  *v9 = vzip2q_s32((int32x4_t)v96, v98);
  v102 = vzip2q_s32((int32x4_t)v35, v88);
  vst2_f32((float *)v11->i32, v99);
  v4[1] = vzip2q_s32((int32x4_t)v99, v101);
  v103 = (float32x2x2_t)vzip1q_s32((int32x4_t)v40, (int32x4_t)v42);
  i32 = (float *)v6[1].i32;
  vst2_f32(i32, v100);
  v10[1] = vzip2q_s32((int32x4_t)v100, v102);
  v104 = vzip1q_s32((int32x4_t)v41, v87);
  v12 = (float *)v1[1].i32;
  vst2_f32(v12, v103);
  v3[1] = vzip2q_s32((int32x4_t)v103, v104);
  v105 = (float32x2x2_t)vzip2q_s32((int32x4_t)v40, (int32x4_t)v42);
  v106 = vzip2q_s32((int32x4_t)v41, v87);
  result = vzip2q_s32((int32x4_t)v105, v106);
  v29 = (float *)v5[1].i32;
  vst2_f32(v29, v105);
  v9[1] = result;
  return result;
}

int32x4_t physx::Dy::solveFriction4_StaticBlock(int32x4_t **a1)
{
  float *v1;
  int32x4_t *v2;
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  float *i32;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int32 v44;
  float32x4_t *v45;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x2x2_t v62;
  float32x2x2_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x2x2_t v66;
  float32x2x2_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t result;

  v1 = (float *)*a1;
  v2 = a1[6];
  v3 = a1[12];
  v4 = a1[18];
  v5 = *a1 + 1;
  v6 = **a1;
  v7 = v2[1];
  v9 = v3[1];
  v10 = v4[1];
  v11 = vzip1q_s32(v6, *v3);
  v12 = vzip2q_s32(v6, *v3);
  v13 = vzip1q_s32(*v2, *v4);
  v14 = vzip2q_s32(*v2, *v4);
  v15 = (float32x4_t)vzip1q_s32(v11, v13);
  v16 = (float32x4_t)vzip2q_s32(v11, v13);
  v17 = (float32x4_t)vzip1q_s32(v12, v14);
  v18 = vzip1q_s32(*v5, v9);
  v19 = vzip2q_s32(*v5, v9);
  v20 = vzip1q_s32(v7, v10);
  v21 = vzip2q_s32(v7, v10);
  v22 = (float32x4_t)vzip1q_s32(v18, v20);
  v23 = (float32x4_t)vzip2q_s32(v18, v20);
  v24 = (float32x4_t)vzip1q_s32(v19, v21);
  if (*((_WORD *)a1 + 15))
  {
    v25 = (float32x4_t *)a1[4];
    v26 = &v25[*((unsigned __int16 *)a1 + 15)];
    do
    {
      v27 = v25 + 6;
      v28 = v25->u8[1];
      _X16 = (uint64_t)&v25[v28 + 6];
      __asm
      {
        PRFM            #0, [X16,#0x80]
        PRFM            #0, [X16,#0x100]
        PRFM            #0, [X16,#0x180]
      }
      v37 = v25->u8[2];
      if (v25->i8[2])
      {
        v38 = 0;
        v39 = 0;
        v40 = v28;
        v41 = v25[1];
        v42 = v25[2];
        v43 = v25[4];
        v44 = v25->i32[3];
        v45 = &v25[v40];
        do
        {
          _X6 = &v45[v39];
          __asm
          {
            PRFM            #0, [X6,#0xF0]
            PRFM            #0, [X6,#0x170]
            PRFM            #0, [X6,#0x1F0]
          }
          v50 = vmulq_f32(v41, v27[v38 >> v44]);
          v51 = v45[v39 + 6];
          v52 = v45[v39 + 7];
          v53 = v45[v39 + 8];
          v54 = v45[v39 + 9];
          v55 = v45[v39 + 10];
          v56 = v45[v39 + 11];
          v57 = vmaxq_f32(vminq_f32(vmlaq_f32(vmlsq_f32(v45[v39 + 12], v45[v39 + 13], v45[v39 + 14]), v45[v39 + 13], vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v51), v52, v16), v53, v17), vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v54), v23, v55), v24, v56))), v50), vnegq_f32(v50));
          v58 = vsubq_f32(v57, v45[v39 + 12]);
          v59 = vmulq_f32(v43, v58);
          v15 = vmlaq_f32(v15, v58, vmulq_f32(v42, v51));
          v22 = vmlaq_f32(v22, v59, v54);
          v16 = vmlaq_f32(v16, v58, vmulq_f32(v42, v52));
          v23 = vmlaq_f32(v23, v59, v55);
          v17 = vmlaq_f32(v17, v58, vmulq_f32(v42, v53));
          v24 = vmlaq_f32(v24, v59, v56);
          _X6[12] = v57;
          v39 += 9;
          ++v38;
        }
        while (9 * v37 != v39);
      }
      v25 = (float32x4_t *)(_X16 + 144 * v37);
    }
    while (v25 < v26);
  }
  v60 = vzip2q_s32(v19, v21);
  v61 = vzip2q_s32(v12, v14);
  v62 = (float32x2x2_t)vzip1q_s32((int32x4_t)v15, (int32x4_t)v17);
  v63 = (float32x2x2_t)vzip2q_s32((int32x4_t)v15, (int32x4_t)v17);
  v64 = vzip1q_s32((int32x4_t)v16, v61);
  v65 = vzip2q_s32((int32x4_t)v16, v61);
  v66 = (float32x2x2_t)vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
  v67 = (float32x2x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v24);
  v68 = vzip1q_s32((int32x4_t)v23, v60);
  vst2_f32(v1, v62);
  *v2 = vzip2q_s32((int32x4_t)v62, v64);
  v69 = vzip2q_s32((int32x4_t)v23, v60);
  vst2_f32((float *)v3->i32, v63);
  *v4 = vzip2q_s32((int32x4_t)v63, v65);
  vst2_f32((float *)v5->i32, v66);
  v2[1] = vzip2q_s32((int32x4_t)v66, v68);
  result = vzip2q_s32((int32x4_t)v67, v69);
  i32 = (float *)v3[1].i32;
  vst2_f32(i32, v67);
  v4[1] = result;
  return result;
}

physx::Dy::ThreadContext *physx::Dy::ThreadContext::ThreadContext(physx::Dy::ThreadContext *this, physx::PxcNpMemBlockPool *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1478) = a2;
  *((_QWORD *)this + 1479) = 0;
  *((_DWORD *)this + 2960) = 0;
  *(_OWORD *)((char *)this + 11848) = 0u;
  *((_QWORD *)this + 1483) = a2;
  *((_QWORD *)this + 1484) = a2;
  *((_QWORD *)this + 1485) = 0;
  *((_DWORD *)this + 2972) = 0;
  *((_DWORD *)this + 2974) = 0;
  *((_QWORD *)this + 1488) = 0;
  *((_DWORD *)this + 3058) = 0;
  *((_QWORD *)this + 1530) = 0;
  *((_DWORD *)this + 3062) = 0;
  *((_QWORD *)this + 1533) = 0;
  *((_OWORD *)this + 745) = 0u;
  *((_OWORD *)this + 746) = 0u;
  *((_OWORD *)this + 747) = 0u;
  *((_OWORD *)this + 761) = 0u;
  *((_OWORD *)this + 760) = 0u;
  *((_OWORD *)this + 759) = 0u;
  *((_OWORD *)this + 758) = 0u;
  *((_OWORD *)this + 757) = 0u;
  *((_OWORD *)this + 756) = 0u;
  *((_OWORD *)this + 755) = 0u;
  *((_OWORD *)this + 754) = 0u;
  *((_OWORD *)this + 763) = 0u;
  *(_OWORD *)((char *)this + 12280) = 0u;
  *(_OWORD *)((char *)this + 12296) = 0u;
  *((_QWORD *)this + 1539) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 11952, 0x200u);
  if ((*((_DWORD *)this + 2983) & 0x7FFFFF80) == 0)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 11920, 0x80u);
  return this;
}

uint64_t physx::Dy::ThreadContext::resizeArrays(uint64_t this, int a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v4 = this;
  *(_DWORD *)(this + 12072) = 0;
  v5 = (a2 + 63) & 0xFFFFFFC0;
  if ((*(_DWORD *)(this + 12076) & 0x7FFFFFFFu) < v5)
    this = physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::recreate(this + 12064, v5);
  *(_DWORD *)(v4 + 12296) = 0;
  v6 = a3 | (a3 >> 1) | ((a3 | (a3 >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = v7 | HIWORD(v7);
  if ((v8 + 1) > 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if ((*(_DWORD *)(v4 + 12300) & 0x7FFFFFFFu) < v9)
    this = physx::shdfnd::Array<physx::Dy::ArticulationSolverDesc,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationSolverDesc>>::recreate(v4 + 12288, v9);
  *(_DWORD *)(v4 + 12296) = a3;
  *(_QWORD *)(v4 + 12264) = *(_QWORD *)(v4 + 12016);
  *(_QWORD *)(v4 + 12280) = *(_QWORD *)(v4 + 12064);
  return this;
}

uint64_t physx::Dy::DynamicsTGSContext::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11, char a12, char a13)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 816, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSDynamics.cpp", 108);
  if (result)
    return physx::Dy::DynamicsTGSContext::DynamicsTGSContext(result, a1, a2, a3, a4, a5, a6, a7, a9, a8, a10, a11, a12, a13);
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::destroy(physx::Dy::DynamicsTGSContext *this)
{
  (*(void (**)(physx::Dy::DynamicsTGSContext *))(*(_QWORD *)this + 56))(this);
  return (*(uint64_t (**)(uint64_t, physx::Dy::DynamicsTGSContext *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                         + 24)
                                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Dy::DynamicsTGSContext::resetThreadContexts(physx::Dy::DynamicsTGSContext *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 54);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  v3 = *(_QWORD **)v2;
  *(_QWORD *)v2 = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    v5 = v3;
    do
    {
      v6 = (_QWORD *)*v5;
      v5[1479] = 0;
      *((_DWORD *)v5 + 2960) = 0;
      v5[1485] = 0;
      *((_DWORD *)v5 + 2972) = 0;
      v5[1533] = v5[1502];
      v5[1535] = v5[1508];
      v5[1530] = 0;
      *((_DWORD *)v5 + 2974) = 0;
      v5[1488] = 0;
      *((_OWORD *)v5 + 763) = 0uLL;
      v5 = v6;
    }
    while (v6);
    do
    {
      v7 = (_QWORD *)*v3;
      v8 = *((_QWORD *)this + 54);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      *v3 = *(_QWORD *)v8;
      *(_QWORD *)v8 = v3;
      result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      v3 = v7;
    }
    while (v7);
  }
  return result;
}

float physx::Dy::copyToSolverBodyDataStep(float *a1, float *a2, float *a3, uint64_t a4, int a5, int a6, char a7, uint64_t a8, float result, float a10, float a11, float a12, float a13, uint64_t a14, uint64_t a15)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;

  v15 = *(float *)a4;
  v16 = *(float *)(a4 + 4);
  v17 = *(float *)(a4 + 8);
  v18 = *(float *)(a4 + 12);
  v19 = v15 * (float)(v15 + v15);
  v20 = v16 * (float)(v16 + v16);
  v21 = v17 * (float)(v17 + v17);
  v22 = (float)(v15 + v15) * v16;
  v23 = (float)(v15 + v15) * v17;
  v24 = (float)(v15 + v15) * v18;
  v25 = (float)(v16 + v16) * v17;
  v26 = (float)(v16 + v16) * v18;
  v27 = (float)(v17 + v17) * v18;
  v28 = (float)(1.0 - v20) - v21;
  v29 = v22 + v27;
  v30 = v23 - v26;
  v31 = v22 - v27;
  v32 = 1.0 - v19;
  v33 = (float)(1.0 - v19) - v21;
  v34 = v25 + v24;
  v35 = v23 + v26;
  v36 = v25 - v24;
  v37 = v32 - v20;
  v38 = a3[1];
  v39 = sqrtf(*a3);
  if (*a3 == 0.0)
    v40 = 0.0;
  else
    v40 = v39;
  v41 = sqrtf(v38);
  if (v38 == 0.0)
    v42 = 0.0;
  else
    v42 = v41;
  v43 = a3[2];
  v44 = sqrtf(v43);
  if (v43 == 0.0)
    v45 = 0.0;
  else
    v45 = v44;
  *(float *)(a14 + 60) = (float)((float)(v34 * (float)(v34 * v42)) + (float)((float)(v30 * v40) * v30))
                       + (float)((float)(v37 * v45) * v37);
  v46 = (float)((float)(v33 * (float)(v31 * v42)) + (float)((float)(v28 * v40) * v29))
      + (float)((float)(v35 * v45) * v36);
  *(float *)(a14 + 28) = (float)((float)(v31 * (float)(v31 * v42)) + (float)((float)(v28 * v40) * v28))
                       + (float)((float)(v35 * v45) * v35);
  *(float *)(a14 + 32) = v46;
  v47 = (float)((float)(v34 * (float)(v31 * v42)) + (float)((float)(v28 * v40) * v30))
      + (float)((float)(v35 * v45) * v37);
  *(float *)(a14 + 36) = v47;
  *(float *)(a14 + 40) = v46;
  v48 = (float)((float)(v34 * (float)(v33 * v42)) + (float)((float)(v29 * v40) * v30))
      + (float)((float)(v36 * v45) * v37);
  *(float *)(a14 + 44) = (float)((float)(v33 * (float)(v33 * v42)) + (float)((float)(v29 * v40) * v29))
                       + (float)((float)(v36 * v45) * v36);
  *(float *)(a14 + 48) = v48;
  *(float *)(a14 + 52) = v47;
  *(float *)(a14 + 56) = v48;
  *(_QWORD *)(a14 + 16) = *(_QWORD *)(a4 + 16);
  *(_DWORD *)(a14 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)a14 = xmmword_2260E5D70;
  v49 = *a1;
  v50 = a1[1];
  v51 = a1[2];
  v52 = *a2;
  v53 = a2[1];
  v54 = a2[2];
  if (a6)
  {
    if ((a6 & 1) != 0)
      v49 = 0.0;
    if ((a6 & 2) != 0)
      v50 = 0.0;
    if ((a6 & 4) != 0)
      v51 = 0.0;
    if ((a6 & 8) != 0)
      v52 = 0.0;
    if ((a6 & 0x10) != 0)
      v53 = 0.0;
    if ((a6 & 0x20) != 0)
      v54 = 0.0;
  }
  if (v45 == 0.0)
    v55 = 0.0;
  else
    v55 = 1.0 / v45;
  v56 = v36 * v55;
  if (v40 == 0.0)
    v57 = 0.0;
  else
    v57 = 1.0 / v40;
  v58 = v29 * v57;
  v59 = 1.0 / v42;
  if (v42 == 0.0)
    v59 = 0.0;
  v60 = (float)((float)(v34 * (float)(v33 * v59)) + (float)(v58 * v30)) + (float)(v56 * v37);
  v61 = (float)((float)(v34 * (float)(v31 * v59)) + (float)((float)(v28 * v57) * v30))
      + (float)((float)(v35 * v55) * v37);
  v62 = (float)((float)(v33 * (float)(v31 * v59)) + (float)((float)(v28 * v57) * v29))
      + (float)((float)(v35 * v55) * v36);
  *(float *)a8 = v49;
  *(float *)(a8 + 4) = v50;
  *(float *)(a8 + 8) = v51;
  *(float *)(a8 + 16) = (float)((float)((float)((float)((float)(v31 * (float)(v31 * v59))
                                                      + (float)((float)(v28 * v57) * v28))
                                              + (float)((float)(v35 * v55) * v35))
                                      * v52)
                              + (float)(v62 * v53))
                      + (float)(v61 * v54);
  *(float *)(a8 + 20) = (float)((float)(v62 * v52)
                              + (float)((float)((float)((float)(v33 * (float)(v33 * v59)) + (float)(v58 * v29))
                                              + (float)(v56 * v36))
                                      * v53))
                      + (float)(v60 * v54);
  *(float *)(a8 + 24) = (float)((float)(v61 * v52) + (float)(v60 * v53))
                      + (float)((float)((float)((float)(v34 * (float)(v34 * v59)) + (float)((float)(v30 * v57) * v30))
                                      + (float)((float)(v37 * v55) * v37))
                              * v54);
  *(_QWORD *)(a8 + 48) = 0;
  *(_DWORD *)(a8 + 56) = 0;
  *(_QWORD *)(a8 + 32) = 0;
  *(_DWORD *)(a8 + 40) = 0;
  *(_WORD *)(a8 + 60) = a6;
  *(_BYTE *)(a8 + 62) = a7;
  *(float *)(a8 + 44) = sqrtf(a13);
  *(_DWORD *)(a8 + 28) = 0;
  *(_DWORD *)(a15 + 36) = a5;
  *(float *)(a15 + 28) = a10;
  *(float *)(a15 + 32) = result;
  *(float *)(a15 + 40) = a12;
  *(float *)a15 = v49;
  *(float *)(a15 + 4) = v50;
  *(float *)(a15 + 8) = v51;
  *(float *)(a15 + 12) = a11;
  *(float *)(a15 + 16) = v52;
  *(float *)(a15 + 20) = v53;
  *(float *)(a15 + 24) = v54;
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::DynamicsTGSContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14)
{
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 72) = a10;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 88) = _D0;
  *(_DWORD *)(a1 + 96) = 2139095039;
  *(_BYTE *)(a1 + 100) = a12;
  *(_BYTE *)(a1 + 101) = a13;
  *(_BYTE *)(a1 + 102) = a14;
  *(_DWORD *)(a1 + 120) = -1073741824;
  *(_DWORD *)(a1 + 140) = 32;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a5;
  v27 = a1 + 256;
  *(_QWORD *)a1 = &off_24ED8D608;
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::SListT((uint64_t *)(a1 + 432));
  *(_QWORD *)(a1 + 440) = a2;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 712) = a8;
  *(_QWORD *)(a1 + 752) = 0;
  *(float *)(a1 + 760) = a9;
  *(_QWORD *)(a1 + 768) = a3;
  *(_QWORD *)(a1 + 776) = a4;
  *(_QWORD *)(a1 + 784) = a6;
  *(_QWORD *)(a1 + 800) = a11;
  v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 262);
  v28[1] = 0;
  v28[2] = 0;
  *v28 = a7;
  *(_QWORD *)(a1 + 8) = v28;
  v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 264);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = a7;
  *(_QWORD *)(a1 + 16) = v29;
  v30 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSDynamics.cpp", 274);
  v30[1] = 0;
  v30[2] = 0;
  *v30 = a7;
  *(_QWORD *)(a1 + 624) = v30;
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSDynamics.cpp", 275);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = a7;
  *(_QWORD *)(a1 + 632) = v31;
  *(_DWORD *)(a1 + 708) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(v27 + 60) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_DWORD *)(a1 + 380) = 0;
  *(_OWORD *)(a1 + 332) = xmmword_2260E5F10;
  *(_QWORD *)(a1 + 416) = 0x1FFFFFF00000000;
  *(_DWORD *)(a1 + 424) = 2139095039;
  *(_OWORD *)(a1 + 384) = xmmword_2261A69E0;
  *(_OWORD *)(a1 + 400) = xmmword_2261A7580;
  return a1;
}

void physx::Dy::DynamicsTGSContext::~DynamicsTGSContext(physx::Dy::DynamicsTGSContext *this)
{
  _QWORD *v2;
  int v3;
  BOOL v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  physx::shdfnd::SListImpl *i;
  physx::Dy::ThreadContext *v31;
  uint64_t v32;

  *(_QWORD *)this = &off_24ED8D608;
  v2 = (_QWORD *)*((_QWORD *)this + 78);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 5);
    if (v3 < 0
      || ((v3 & 0x7FFFFFFF) != 0 ? (v4 = v2[1] == 0) : (v4 = 1),
          v4 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 24))(*v2, v2[1]), *((_QWORD *)this + 78))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 78) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 79);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 5);
    if (v6 < 0
      || ((v6 & 0x7FFFFFFF) != 0 ? (v7 = v5[1] == 0) : (v7 = 1),
          v7 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 24))(*v5, v5[1]), *((_QWORD *)this + 79))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 79) = 0;
  v8 = *((_DWORD *)this + 175);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 86) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 171);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 84))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 167);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 82))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v12 = *((_DWORD *)this + 163);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v13 = *((_DWORD *)this + 155);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0)
  {
    v14 = *((_QWORD *)this + 76);
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14 - *(_QWORD *)(v14 - 8));
  }
  v15 = *((_DWORD *)this + 151);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0)
  {
    v16 = *((_QWORD *)this + 74);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v16 - *(_QWORD *)(v16 - 8));
  }
  v17 = *((_DWORD *)this + 147);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0)
  {
    v18 = *((_QWORD *)this + 72);
    if (v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v18 - *(_QWORD *)(v18 - 8));
  }
  v19 = *((_DWORD *)this + 143);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 70))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v20 = *((_DWORD *)this + 139);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 68))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v21 = *((_DWORD *)this + 135);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 66))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v22 = *((_DWORD *)this + 131);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v23 = *((_DWORD *)this + 127);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 62))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v24 = *((_DWORD *)this + 123);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0)
  {
    v25 = *((_QWORD *)this + 60);
    if (v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v25 - *(_QWORD *)(v25 - 8));
  }
  v26 = *((_DWORD *)this + 119);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0)
  {
    v27 = *((_QWORD *)this + 58);
    if (v27)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v27 - *(_QWORD *)(v27 - 8));
  }
  v28 = *((_DWORD *)this + 115);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0)
  {
    v29 = *((_QWORD *)this + 56);
    if (v29)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v29 - *(_QWORD *)(v29 - 8));
  }
  for (i = (physx::shdfnd::SListImpl *)*((_QWORD *)this + 54); ; i = (physx::shdfnd::SListImpl *)*((_QWORD *)this + 54))
  {
    v31 = (physx::Dy::ThreadContext *)physx::shdfnd::SListImpl::pop(i);
    if (!v31)
      break;
    physx::Dy::ThreadContext::~ThreadContext(v31);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v32 - *(_QWORD *)(v32 - 8));
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 432);
  physx::Dy::Context::~Context(this);
}

{
  physx::Dy::DynamicsTGSContext::~DynamicsTGSContext(this);
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Dy::DynamicsTGSContext::update(physx::Dy::DynamicsTGSContext *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, float a9, uint64_t a10, __int128 *a11, uint64_t a12, uint64_t a13)
{
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v17 = *a11;
  v18 = a11[1];
  *((_QWORD *)this + 94) = *((_QWORD *)a11 + 4);
  *((_OWORD *)this + 45) = v17;
  *((_OWORD *)this + 46) = v18;
  *((float *)this + 22) = a9;
  *((float *)this + 23) = 1.0 / a9;
  *((_QWORD *)this + 13) = *(_QWORD *)a13;
  *((_DWORD *)this + 28) = *(_DWORD *)(a13 + 8);
  v19 = *(_DWORD *)(a2 + 552);
  v20 = *(unsigned int *)(a2 + 432);
  if ((_DWORD)v20)
  {
    v21 = *(unsigned int **)(a2 + 424);
    v22 = *(_DWORD *)(a2 + 200);
    v23 = *(_QWORD *)(a2 + 176);
    do
    {
      v24 = *v21++;
      v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8 * (v24 / v22)) + 8 * (v24 % v22));
      if (v25)
        *(_BYTE *)(v25 + 82) = 0;
      --v20;
    }
    while (v20);
  }
  v26 = (_DWORD *)*((_QWORD *)this + 31);
  v26[152] = *(_DWORD *)(a2 + 416);
  if (v19)
  {
    v26[151] = *(_DWORD *)(a2 + 384);
    v26[150] = *(_DWORD *)(a2 + 460);
    *((_DWORD *)this + 177) = 0;
    physx::Dy::DynamicsTGSContext::resetThreadContexts(this);
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    v27 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 97), 64, 0x10u);
    *(_QWORD *)(v27 + 8) = *((_QWORD *)this + 100);
    *(_QWORD *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 32) = 0;
    *(_QWORD *)v27 = &off_24ED8D6F8;
    *(_QWORD *)(v27 + 40) = this;
    *(_QWORD *)(v27 + 48) = a2;
    *(_QWORD *)(v27 + 56) = a4;
    *(_DWORD *)(v27 + 32) = 1;
    *(_QWORD *)(v27 + 24) = a3;
    if (a3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16);
    }
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    v28 = *(unsigned int *)(a2 + 416);
    v29 = *(_QWORD *)(a2 + 408);
    *((_DWORD *)this + 176) = v28;
    v30 = *(_DWORD *)(a2 + 384);
    v64 = a2;
    v31 = *(_DWORD *)(a2 + 400);
    v63 = v30;
    v32 = v30 + v28;
    v33 = *((_DWORD *)this + 147) & 0x7FFFFFFF;
    if (v32 > v33)
    {
      v34 = (v32 & 0xFFFFFFE0) + 32;
      if ((*((_DWORD *)this + 167) & 0x7FFFFFFFu) < v34)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 656, (v32 & 0xFFFFFFE0) + 32);
        v33 = *((_DWORD *)this + 147) & 0x7FFFFFFF;
      }
      if (v33 < v34)
        physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::recreate((unint64_t *)this + 72, (v32 & 0xFFFFFFE0) + 32);
      if ((*((_DWORD *)this + 151) & 0x7FFFFFFFu) < v34)
        physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::recreate((unint64_t *)this + 74, (v32 & 0xFFFFFFE0) + 32);
      if ((*((_DWORD *)this + 155) & 0x7FFFFFFFu) < v34)
        physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::recreate((unint64_t *)this + 76, (v32 & 0xFFFFFFE0) + 32);
    }
    v62 = v31;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::resize((uint64_t)this + 576, v32 + 1, (uint64_t)&v65);
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::resize((uint64_t)this + 592, v32 + 1, (uint64_t)&v65);
    v66 = 0u;
    v67 = 0u;
    v65 = 0u;
    physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::resize((uint64_t)this + 608, v32 + 1, (uint64_t)&v65);
    LODWORD(v65) = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 656, v32 + 1, &v65);
    v35 = *((_QWORD *)this + 72);
    *(_QWORD *)v35 = *((_QWORD *)this + 32);
    *(_DWORD *)(v35 + 8) = *((_DWORD *)this + 66);
    *(_DWORD *)(v35 + 12) = *((_DWORD *)this + 67);
    *(_QWORD *)(v35 + 16) = *((_QWORD *)this + 34);
    *(_DWORD *)(v35 + 24) = *((_DWORD *)this + 70);
    *(_DWORD *)(v35 + 28) = *((_DWORD *)this + 71);
    *(_OWORD *)(v35 + 32) = *((_OWORD *)this + 18);
    *(_QWORD *)(v35 + 48) = *((_QWORD *)this + 38);
    *(_DWORD *)(v35 + 56) = *((_DWORD *)this + 78);
    *(_DWORD *)(v35 + 60) = *((_DWORD *)this + 79);
    v36 = *((_QWORD *)this + 74);
    *(_OWORD *)v36 = *((_OWORD *)this + 20);
    *(_QWORD *)(v36 + 16) = *((_QWORD *)this + 42);
    *(_QWORD *)(v36 + 24) = *((_QWORD *)this + 43);
    *(_QWORD *)(v36 + 32) = *((_QWORD *)this + 44);
    *(_QWORD *)(v36 + 40) = *((_QWORD *)this + 45);
    *(_QWORD *)(v36 + 48) = *((_QWORD *)this + 46);
    *(_QWORD *)(v36 + 56) = *((_QWORD *)this + 47);
    v37 = *((_QWORD *)this + 76);
    *(_OWORD *)v37 = *((_OWORD *)this + 24);
    *(_QWORD *)(v37 + 16) = *((_QWORD *)this + 50);
    *(_DWORD *)(v37 + 24) = *((_DWORD *)this + 102);
    v38 = *(_OWORD *)((char *)this + 412);
    *(_DWORD *)(v37 + 44) = *((_DWORD *)this + 107);
    *(_OWORD *)(v37 + 28) = v38;
    if ((_DWORD)v28)
    {
      v39 = v29;
      v40 = 0;
      v41 = v28;
      do
      {
        v42 = v28;
        v43 = v41 - 1024;
        if (v41 >= 0x400)
          v44 = 1024;
        else
          v44 = v41;
        v45 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 97), 88, 0x10u);
        v46 = v40 + 1;
        v47 = *((_QWORD *)this + 72) + (v46 << 6);
        v48 = *((_QWORD *)this + 74) + (v46 << 6);
        v49 = *((_QWORD *)this + 76) + 48 * v46;
        *(_QWORD *)(v45 + 8) = *((_QWORD *)this + 100);
        *(_QWORD *)(v45 + 16) = 0;
        *(_DWORD *)(v45 + 32) = 0;
        *(_QWORD *)v45 = &off_24ED8D768;
        *(_QWORD *)(v45 + 40) = v39 + 4 * v40;
        *(_DWORD *)(v45 + 48) = v44;
        *(_QWORD *)(v45 + 56) = v64 + 224;
        *(_QWORD *)(v45 + 64) = v47;
        *(_QWORD *)(v45 + 72) = v48;
        *(_QWORD *)(v45 + 80) = v49;
        *(_DWORD *)(v45 + 32) = 1;
        *(_QWORD *)(v45 + 24) = v27;
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
        *(_QWORD *)(v45 + 16) = *(_QWORD *)(*(_QWORD *)(v45 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
        v40 += 1024;
        v41 = v43;
        v28 = v42;
      }
      while (v40 < v42);
    }
    v50 = *(_DWORD *)(v64 + 456);
    v51 = v50 + (v62 << 6) + *(_DWORD *)(v64 + 460);
    *((_DWORD *)this + 114) = 0;
    v52 = (v51 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 115) & 0x7FFFFFFFu) < v52)
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 448, (v51 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 114) = v51;
    *((_DWORD *)this + 118) = 0;
    if ((*((_DWORD *)this + 119) & 0x7FFFFFFFu) < v52)
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 464, (v51 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 118) = v51;
    *((_DWORD *)this + 126) = 0;
    if ((*((_DWORD *)this + 127) & 0x7FFFFFFFu) < v52)
      physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate((uint64_t)this + 496, (v51 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 126) = v51;
    *((_DWORD *)this + 122) = 0;
    if ((*((_DWORD *)this + 123) & 0x7FFFFFFFu) < v52)
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 480, (v51 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 122) = v51;
    *((_DWORD *)this + 174) = 0;
    v53 = (v50 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 175) & 0x7FFFFFFFu) < v53)
      physx::shdfnd::Array<physx::PxsIndexedContactManager,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::recreate((uint64_t)this + 688, v53);
    *((_DWORD *)this + 174) = v50;
    *((_DWORD *)this + 130) = 0;
    v54 = (v63 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 131) & 0x7FFFFFFFu) < v54)
      physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::recreate((uint64_t)this + 512, (v63 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 130) = v63;
    *((_DWORD *)this + 134) = 0;
    if ((*((_DWORD *)this + 135) & 0x7FFFFFFFu) < v54)
      physx::shdfnd::Array<physx::PxsBodyCore *,physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>>::recreate((uint64_t)this + 528, v54);
    *((_DWORD *)this + 134) = v63;
    *((_DWORD *)this + 138) = 0;
    if ((*((_DWORD *)this + 139) & 0x7FFFFFFFu) < v54)
      physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::recreate((uint64_t)this + 544, v54);
    *((_DWORD *)this + 138) = v63;
    *((_DWORD *)this + 142) = 0;
    v55 = (v62 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 143) & 0x7FFFFFFFu) < v55)
      physx::shdfnd::Array<physx::Dy::ArticulationV *,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>>::recreate((uint64_t)this + 560, v55);
    *((_DWORD *)this + 142) = v62;
    *((_DWORD *)this + 170) = 0;
    if ((*((_DWORD *)this + 171) & 0x7FFFFFFFu) < v54)
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 672, v54);
    *((_DWORD *)this + 170) = v63;
    v56 = *((_QWORD *)this + 1);
    *(_DWORD *)(v56 + 16) = 0;
    v57 = v50 - 1;
    if (!v50)
      v57 = 0;
    v58 = v57 | (v57 >> 1) | ((v57 | (v57 >> 1)) >> 2);
    v59 = v58 | (v58 >> 4) | ((v58 | (v58 >> 4)) >> 8);
    v60 = (v59 | HIWORD(v59)) + 1;
    if ((*(_DWORD *)(v56 + 20) & 0x7FFFFFFFu) < v60)
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v56, v60);
    *((_DWORD *)this + 198) = 1 - *((_DWORD *)this + 198);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  }
  else
  {
    *((_QWORD *)v26 + 75) = 0;
    *((_DWORD *)this + 177) = 0;
    return physx::Dy::DynamicsTGSContext::resetThreadContexts(this);
  }
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::recreate((unint64_t *)result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + ((unint64_t)a2 << 6);
    v8 = *(_QWORD *)v5 + (v6 << 6);
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 12);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(a3 + 28);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(a3 + 48);
      *(_DWORD *)(v8 + 56) = *(_DWORD *)(a3 + 56);
      *(_DWORD *)(v8 + 60) = *(_DWORD *)(a3 + 60);
      v8 += 64;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::recreate((unint64_t *)result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + ((unint64_t)a2 << 6);
    v8 = *(_QWORD *)v5 + (v6 << 6);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)a3;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a3 + 56);
      v8 += 64;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::resize(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;

  v4 = a2;
  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::recreate((unint64_t *)result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    v7 = *(_QWORD *)v5 + 48 * v4;
    v8 = *(_QWORD *)v5 + 48 * v6;
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)a3;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      v9 = *(_OWORD *)(a3 + 28);
      *(_DWORD *)(v8 + 44) = *(_DWORD *)(a3 + 44);
      *(_OWORD *)(v8 + 28) = v9;
      v8 += 48;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

void physx::Dy::DynamicsTGSContext::preIntegrateBodies(float32x2_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, unsigned int a7, float32x2_t *a8, float a9, unsigned int *a10, unsigned int *a11)
{
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float32x2_t v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;

  if (a7)
  {
    v15 = 0;
    v16 = 0;
    v17 = a5 + 48;
    v18 = a4 + 64;
    v19 = a3 + 64;
    v20 = a7;
    v38 = a9;
    do
    {
      v21 = *a1;
      if ((*a1)[3].i16[3] > v15)
        v15 = (*a1)[3].i16[3];
      if (HIBYTE((*a1)[3].u16[3]) > v16)
        v16 = HIBYTE((*a1)[3].u16[3]);
      v22 = v21[8];
      v23 = v21[9].f32[0];
      if (!v21[19].i8[5])
      {
        v24 = *(float *)(*(_QWORD *)a2 + 76);
        v22 = vadd_f32(v22, vmul_n_f32(vmul_n_f32(*a8, a9), v24));
        v23 = v23 + (float)(v24 * (float)(a8[1].f32[0] * a9));
      }
      v25 = v21[12].f32[1];
      v26 = 1.0 - (float)(v21[13].f32[0] * a9);
      v27 = 1.0 - (float)(v21[13].f32[1] * a9);
      if (v26 < 0.0)
        v26 = 0.0;
      if (v27 < 0.0)
        v27 = 0.0;
      v28 = vmul_n_f32(v22, v26);
      v29 = v26 * v23;
      v30 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v28, v28).i32[1]), v28.f32[0], v28.f32[0]) + (float)(v29 * v29);
      if (v30 > v25)
      {
        v31 = sqrtf(v25 / v30);
        v28 = vmul_n_f32(v28, v31);
        v29 = v29 * v31;
      }
      v32 = v21[12].f32[0];
      v33 = vmul_n_f32(v21[10], v27);
      v34 = v27 * v21[11].f32[0];
      v35 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v33, v33).i32[1]), v33.f32[0], v33.f32[0]) + (float)(v34 * v34);
      if (v35 > v32)
      {
        v36 = sqrtf(v32 / v35);
        v33 = vmul_n_f32(v33, v36);
        v34 = v34 * v36;
      }
      v21[8] = v28;
      v21[9].f32[0] = v29;
      v21[10] = v33;
      v21[11].f32[0] = v34;
      v37 = *a6++;
      physx::Dy::copyToSolverBodyDataStep((float *)&v21[8], (float *)&v21[10], (float *)&v21[14], (uint64_t)v21, v37, v21[19].u8[6], 0, v19, v21[15].f32[1], v21[9].f32[1], v21[16].f32[0], v21[11].f32[1], v32, v18, v17);
      v17 += 48;
      v18 += 64;
      v19 += 64;
      a2 += 8;
      ++a1;
      --v20;
      a9 = v38;
    }
    while (v20);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  *a10 = v15;
  *a11 = v16;
}

uint64_t physx::Dy::createFinalizeSolverContactsStep(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, float a5, double a6, double a7, float a8, float a9)
{
  __int32 v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  float v27;
  char v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  float v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  float32x4_t v46;
  float32x4_t v47;

  *(_DWORD *)(a3 + 4112) = 0;
  if (*(_DWORD *)(a1 + 128) == 8 || (v9 = 0, !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 62)))
    v9 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = v9;
  if (*(_DWORD *)(a1 + 132) == 8 || (v10 = 0.0, !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 62)))
    v10 = *(float *)(a1 + 12);
  v11 = a3 + 16;
  *(float *)(a1 + 12) = v10;
  v12 = *a2;
  __asm { FMOV            V7.4S, #1.0 }
  if (!*a2)
  {
    LOBYTE(v22) = 0;
LABEL_44:
    v23 = 0;
    goto LABEL_45;
  }
  v18 = *(_BYTE *)(v12 + 43);
  if ((v18 & 2) != 0)
    v19 = 64;
  else
    v19 = 16;
  if ((*(_BYTE *)(v12 + 43) & 4) != 0)
  {
    LOBYTE(v22) = 0;
    LOBYTE(v12) = 0;
    goto LABEL_44;
  }
  v20 = *((unsigned __int8 *)a2 + 25);
  v21 = v18;
  _Q7 = *(float32x4_t *)v12;
  v22 = (v18 >> 5) & 1;
  v23 = 0;
  if (*((_BYTE *)a2 + 25))
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = *(float *)(a1 + 208);
    _X15 = a2[1];
    if ((v21 & 2) != 0)
      v29 = 6;
    else
      v29 = 4;
    if (v21 < 0)
    {
      v19 = 32;
      v29 = 5;
    }
    v30 = v21 & 0xFFFFFF82;
    while (1)
    {
      if (v24)
      {
        v31 = *(unsigned __int8 *)(v12 + 41);
        _CF = v31 >= v25;
        v33 = v31 - v25;
        v32 = v33 != 0 && _CF;
        LODWORD(v34) = v33 << v29;
        if (v32)
          v34 = v34;
        else
          v34 = 0;
        _X15 += v34;
        v12 += 48;
      }
      v25 = *(unsigned __int8 *)(v12 + 41);
      if (*(_BYTE *)(v12 + 41))
        break;
LABEL_40:
      if (++v24 == v20)
        goto LABEL_41;
    }
    v35 = *(unsigned __int8 *)(v12 + 41);
    while (1)
    {
      if (v26)
        v36 = v19;
      else
        v36 = 0;
      _X15 += v36;
      __asm { PRFM            #0, [X15,#0x80] }
      _X7 = (_OWORD *)(v11 + ((unint64_t)v23 << 6));
      __asm { PRFM            #0, [X7,#0x80] }
      v40 = v27;
      if (v22)
      {
        if (!v30)
        {
          v40 = 3.4028e38;
LABEL_35:
          *(_QWORD *)&v41 = *(_QWORD *)(v12 + 16);
          v42 = v11 + ((unint64_t)v23 << 6);
          DWORD2(v41) = *(_DWORD *)(v12 + 24);
          HIDWORD(v41) = *(_DWORD *)(_X15 + 12);
          *_X7 = v41;
          *(_QWORD *)(v42 + 16) = *(_QWORD *)_X15;
          LODWORD(v41) = *(_DWORD *)(_X15 + 8);
          *(_BYTE *)(v42 + 48) = *(_BYTE *)(v12 + 42);
          *(_DWORD *)(v42 + 24) = v41;
          *(float *)(v42 + 28) = v40;
          *(_DWORD *)(v42 + 44) = *(_DWORD *)(v12 + 36);
          *(int32x2_t *)(v42 + 56) = vrev64_s32(*(int32x2_t *)(v12 + 28));
          if (v30)
          {
            v43 = *(_QWORD *)(_X15 + 16);
            v44 = *(_DWORD *)(_X15 + 24);
          }
          else
          {
            v43 = 0;
            v44 = 0;
          }
          *(_QWORD *)(v42 + 32) = v43;
          *(_DWORD *)(v42 + 40) = v44;
          ++v23;
          goto LABEL_39;
        }
        v40 = *(float *)(_X15 + 28);
      }
      if (v40 != 0.0)
        goto LABEL_35;
LABEL_39:
      v26 = 1;
      if (!--v35)
        goto LABEL_40;
    }
  }
LABEL_41:
  LODWORD(v12) = (v21 >> 4) & 1;
LABEL_45:
  *(_DWORD *)(a3 + 4112) = v23;
  *(_QWORD *)(a1 + 144) = v11;
  *(_DWORD *)(a1 + 152) = v23;
  if (*(_BYTE *)(a1 + 157))
    v45 = 1;
  else
    v45 = v12;
  *(_BYTE *)(a1 + 157) = v45;
  *(_BYTE *)(a1 + 156) = v22;
  v46.i32[0] = *(_DWORD *)a1;
  v46.i32[1] = v9;
  v46.i32[2] = *(_DWORD *)(a1 + 8);
  v46.f32[3] = v10;
  v47 = vmulq_f32(_Q7, v46);
  *(float32x4_t *)a1 = v47;
  return physx::Dy::createFinalizeSolverContactsStep(a1, a3 + 4128, a4, a5, a6, a7, a8, a9, v47.f32[0], v10, _Q7.f32[0]);
}

unint64_t physx::Dy::SetupSolverConstraintStep(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, _QWORD), float a4, float a5, float a6, float a7, float a8)
{
  uint64_t (*v8)(_BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t i;
  _BYTE *v18;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  int v29;
  _BYTE v30[968];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(*(_QWORD *)(a2 + 16) + 30) = 0;
  v8 = *(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8);
  if (!v8)
    return 0;
  bzero(v30, 0x3C0uLL);
  for (i = 0; i != 960; i += 80)
  {
    v18 = &v30[i];
    *((_DWORD *)v18 + 11) = -8388609;
    *((_DWORD *)v18 + 15) = 2139095039;
  }
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a2 = _Q0;
  v29 = 0;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(unsigned __int8 *)(a2 + 171);
  v28 = 0;
  v26 = v8(v30, &v28, 12, a2, v24, a2 + 72, a2 + 100, v25, a2 + 184, a2 + 196);
  *(_QWORD *)(a2 + 136) = v30;
  *(_DWORD *)(a2 + 144) = v26;
  *(_QWORD *)(a2 + 172) = v28;
  *(_DWORD *)(a2 + 180) = v29;
  if (*(_DWORD *)(a2 + 128) != 8 && *(_BYTE *)(*(_QWORD *)(a2 + 24) + 62))
    *(_DWORD *)(a2 + 4) = 0;
  if (*(_DWORD *)(a2 + 132) != 8)
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 62))
      *(_DWORD *)(a2 + 12) = 0;
  }
  return physx::Dy::setupSolverConstraintStep(a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *physx::Dy::solveContactBlock(unsigned int *result, uint64_t a2, int32x2_t a3, int32x2_t a4)
{
  int v4;
  __int32 v5;
  __int32 v6;
  uint64_t v7;

  v4 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v4)
  {
    v5 = a4.i32[0];
    v6 = a3.i32[0];
    v7 = a2 + 48 * *result;
    do
    {
      a3.i32[0] = v6;
      a4.i32[0] = v5;
      result = (unsigned int *)physx::Dy::solveContact(v7, a3, a4);
      v7 += 48;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t **physx::Dy::solve1DBlock(uint64_t **result, uint64_t a2, uint64_t a3, int32x2_t a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  int v9;
  __int32 v10;
  uint64_t **v12;

  v9 = *((unsigned __int16 *)result + 2);
  if (*(_DWORD *)result < (*(_DWORD *)result + v9))
  {
    v10 = LODWORD(a5);
    v12 = (uint64_t **)(a2 + 48 * *(unsigned int *)result);
    do
    {
      a4.i32[0] = v10;
      result = physx::Dy::solve1DStep(v12, a3, a4, a5, a6, a7, a8, a9);
      v12 += 6;
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *physx::Dy::solveExtContactBlock(_DWORD *result, uint64_t a2, float a3, float32_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  char *v10;

  v6 = *((unsigned __int16 *)result + 2);
  if (*result < (*result + v6))
  {
    v10 = (char *)(a2 + 48 * *result);
    do
    {
      result = physx::Dy::solveExtContactStep(v10, a6, a3, a4);
      v10 += 48;
      --v6;
    }
    while (v6);
  }
  return result;
}

_DWORD *physx::Dy::solveExt1DBlock(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  int v6;
  _QWORD *v10;

  v6 = *((unsigned __int16 *)result + 2);
  if (*result < (*result + v6))
  {
    v10 = (_QWORD *)(a2 + 48 * *result);
    do
    {
      result = physx::Dy::solveExt1DStep(v10, a4, a3, a6);
      v10 += 6;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *physx::Dy::writeBackContact(unsigned int *result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v2)
  {
    v3 = a2 + 48 * *result;
    do
    {
      result = (unsigned int *)physx::Dy::writeBackContact(v3);
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

unsigned int *physx::Dy::writeBack1D(unsigned int *result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v2)
  {
    v3 = a2 + 48 * *result;
    do
    {
      result = (unsigned int *)physx::Dy::writeBack1D(v3);
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

unsigned int *physx::Dy::solveConcludeContactBlock(unsigned int *result, uint64_t a2, int32x2_t a3, int32x2_t a4)
{
  int v4;
  __int32 v5;
  uint64_t v6;

  v4 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v4)
  {
    v5 = a3.i32[0];
    v6 = a2 + 48 * *result;
    do
    {
      a3.i32[0] = -8388609;
      a4.i32[0] = v5;
      result = (unsigned int *)physx::Dy::solveContact(v6, a3, a4);
      v6 += 48;
      --v4;
    }
    while (v4);
  }
  return result;
}

_BYTE *physx::Dy::solveConclude1DBlock(_BYTE *result, uint64_t a2, uint64_t a3, int32x2_t a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  int v9;
  __int32 v10;
  uint64_t v12;

  v9 = *((unsigned __int16 *)result + 2);
  if (*(_DWORD *)result < (*(_DWORD *)result + v9))
  {
    v10 = a4.i32[0];
    v12 = a2 + 48 * *(unsigned int *)result;
    do
    {
      a4.i32[0] = v10;
      physx::Dy::solve1DStep((uint64_t **)v12, a3, a4, a5, a6, a7, a8, a9);
      result = physx::Dy::conclude1DStep(*(_BYTE **)(v12 + 32));
      v12 += 48;
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *physx::Dy::solveConcludeContactExtBlock(_DWORD *result, uint64_t a2, float32_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  char *v8;

  v5 = *((unsigned __int16 *)result + 2);
  if (*result < (*result + v5))
  {
    v8 = (char *)(a2 + 48 * *result);
    do
    {
      result = physx::Dy::solveExtContactStep(v8, a5, -3.4028e38, a3);
      v8 += 48;
      --v5;
    }
    while (v5);
  }
  return result;
}

_BYTE *physx::Dy::solveConclude1DBlockExt(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5;
  uint64_t v9;

  v5 = *((unsigned __int16 *)result + 2);
  if (*(_DWORD *)result < (*(_DWORD *)result + v5))
  {
    v9 = a2 + 48 * *(unsigned int *)result;
    do
    {
      physx::Dy::solveExt1DStep((_QWORD *)v9, a4, a3, a5);
      result = physx::Dy::conclude1DStep(*(_BYTE **)(v9 + 32));
      v9 += 48;
      --v5;
    }
    while (v5);
  }
  return result;
}

float32_t physx::Dy::integrateCoreStep(float32x2_t *a1, uint64_t a2, float a3, double a4, __n128 a5)
{
  float v5;
  __int16 v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __float2 v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v24;
  float32_t result;
  __n128 v32;
  float v33;
  float32x2_t v34;
  float v35;

  v5 = a3;
  v8 = a1[7].i16[2];
  if (!v8)
    goto LABEL_9;
  if ((v8 & 1) != 0)
  {
    a1->i32[0] = 0;
    if ((v8 & 2) == 0)
    {
LABEL_4:
      if ((v8 & 4) == 0)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_4;
  }
  a1->i32[1] = 0;
  if ((v8 & 4) == 0)
  {
LABEL_5:
    if ((v8 & 8) == 0)
      goto LABEL_6;
LABEL_15:
    a1[2].i32[0] = 0;
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_14:
  a1[1].i32[0] = 0;
  if ((v8 & 8) != 0)
    goto LABEL_15;
LABEL_6:
  if ((v8 & 0x10) == 0)
    goto LABEL_7;
LABEL_16:
  a1[2].i32[1] = 0;
  if ((v8 & 0x20) != 0)
LABEL_8:
    a1[3].i32[0] = 0;
LABEL_9:
  v9 = vmul_n_f32(*a1, a3);
  v10 = a1[1].f32[0] * a3;
  v11 = a1[2];
  v12 = a1[3].f32[0];
  a5.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a2 + 28), v11.f32[0]), vmul_lane_f32(*(float32x2_t *)(a2 + 40), v11, 1)), vmul_n_f32(*(float32x2_t *)(a2 + 52), v12));
  v13 = (float)((float)(*(float *)(a2 + 36) * v11.f32[0]) + vmuls_lane_f32(*(float *)(a2 + 48), v11, 1))
      + (float)(v12 * *(float *)(a2 + 60));
  v14 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a5).i32[1]), a5.n128_f32[0], a5.n128_f32[0])+ (float)(v13 * v13);
  *(float32x2_t *)(a2 + 16) = vadd_f32(v9, *(float32x2_t *)(a2 + 16));
  *(float *)(a2 + 24) = v10 + *(float *)(a2 + 24);
  if (v14 != 0.0)
  {
    v15 = sqrtf(v14);
    v34 = v11;
    v35 = v5;
    v32 = a5;
    v33 = v12;
    v16 = __sincosf_stret((float)(v15 * v5) * 0.5);
    v17.i32[3] = v32.n128_i32[3];
    *(float32x2_t *)v17.i8 = vmul_n_f32((float32x2_t)v32.n128_u64[0], v16.__sinval / v15);
    v18 = *(int8x16_t *)a2;
    *(float *)&v17.i32[2] = v13 * (float)(v16.__sinval / v15);
    v19 = (float32x4_t)vextq_s8(vextq_s8(v17, v17, 0xCuLL), v17, 8uLL);
    *(float *)&v17.i32[3] = -*(float *)v17.i32;
    v20 = (float32x4_t)vzip1q_s32((int32x4_t)v18, (int32x4_t)v18);
    v20.i32[0] = *(_QWORD *)(a2 + 8);
    v21 = vzip2q_s32((int32x4_t)v19, *(int32x4_t *)a2);
    v18.i32[3] = v19.i32[1];
    v22 = vrev64q_s32((int32x4_t)v19);
    v19.f32[3] = -*(float *)&v17.i32[1];
    _Q2 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3), *(int8x16_t *)a2, 4uLL), (float32x4_t)v17), (float32x4_t)0, *(float32x4_t *)a2), v20, v19);
    v12 = v33;
    v24 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v18, (int32x4_t)vextq_s8(v18, v18, 0xCuLL)), (int32x4_t)v18);
    v11 = v34;
    v5 = v35;
    _Q0 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)a2, v16.__cosval), vmlsq_f32(_Q2, (float32x4_t)vzip1q_s32(v22, v21), v24));
    _Q1 = vmulq_f32(_Q0, _Q0);
    _Q2.i32[0] = _Q0.i32[2];
    __asm { FMLA            S1, S2, V0.S[2] }
    _Q2.i32[0] = _Q0.i32[3];
    __asm { FMLA            S1, S2, V0.S[3] }
    _Q1.f32[0] = sqrtf(_Q1.f32[0]);
    *(float32x4_t *)a2 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  }
  a1[4] = vadd_f32(vmul_n_f32(v11, v5), a1[4]);
  a1[5].f32[0] = (float)(v12 * v5) + a1[5].f32[0];
  a1[6] = vadd_f32(v9, a1[6]);
  result = v10 + a1[7].f32[0];
  a1[7].f32[0] = result;
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::stepArticulations(uint64_t result, uint64_t a2, float a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(float);

  v3 = *(_DWORD *)(a2 + 4);
  if ((v3 & 0x7FFFFFFF) != 0)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = *(_QWORD *)(v6 + 12288) + v7;
      v9 = (uint64_t (*)(float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[*(unsigned int *)(*(_QWORD *)result + 40)];
      if (v9)
      {
        result = v9(a3);
        v3 = *(_DWORD *)(a2 + 4);
      }
      ++v8;
      v7 += 96;
    }
    while (v8 < (v3 & 0x7FFFFFFFu));
  }
  return result;
}

void physx::Dy::DynamicsTGSContext::iterativeSolveIsland(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, float a8, double a9, __n128 a10)
{
  uint64_t v14;
  float v16;
  int i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(float);
  int v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  float v57;
  unsigned int v58;
  void (*v59)(_QWORD *, _QWORD, float);
  void (*v60)(_QWORD *, float);
  int j;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  float32x2_t *v66;
  uint64_t v67;
  uint64_t v68;

  v14 = a1;
  v67 = *(unsigned int *)(a2 + 112);
  if (*(_DWORD *)(a4 + 12048))
  {
    v16 = 0.0;
    if (a5 >= 2)
    {
      v68 = (v67 << 6) + 64;
      for (i = 1; i != a5; ++i)
      {
        if ((a3[1] & 0x7FFFFFFF) != 0)
        {
          v18 = 0;
          v19 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, float, float, float))(**(_QWORD **)(*(_QWORD *)(a4 + 12288) + v18)
                                                                                                 + 272))(*(_QWORD *)(*(_QWORD *)(a4 + 12288) + v18), *(_QWORD *)(a4 + 12160), *(_QWORD *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v16);
            ++v19;
            v18 += 96;
          }
          while (v19 < (a3[1] & 0x7FFFFFFF));
        }
        v20 = *(unsigned int *)(a4 + 12048);
        v21 = *(_QWORD *)(v14 + 592);
        if ((_DWORD)v20)
        {
          v22 = *(_QWORD *)(a2 + 72);
          v23 = *(_QWORD *)(a2 + 88);
          do
          {
            physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v23 + 6)](v23, v22, v21, a7, -3.4028e38, v16);
            v23 += 8;
            --v20;
          }
          while (v20);
          v14 = a1;
          v21 = *(_QWORD *)(a1 + 592);
        }
        v24 = *a3;
        if ((_DWORD)v24)
        {
          v25 = v21 + v68;
          v26 = (float32x2_t *)(*(_QWORD *)(v14 + 576) + v68);
          do
          {
            physx::Dy::integrateCoreStep(v26, v25, a8, a9, a10);
            v25 += 64;
            v26 += 8;
            --v24;
          }
          while (v24);
        }
        physx::Dy::DynamicsTGSContext::stepArticulations(a4, (uint64_t)a3, a8);
        v16 = v16 + a8;
      }
    }
    if ((a3[1] & 0x7FFFFFFF) != 0)
    {
      v27 = 0;
      v28 = 0;
      do
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, float, float, float))(**(_QWORD **)(*(_QWORD *)(a4 + 12288) + v27)
                                                                                             + 272))(*(_QWORD *)(*(_QWORD *)(a4 + 12288) + v27), *(_QWORD *)(a4 + 12160), *(_QWORD *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v16);
        ++v28;
        v27 += 96;
      }
      while (v28 < (a3[1] & 0x7FFFFFFF));
    }
    v29 = *(unsigned int *)(a4 + 12048);
    v30 = *(_QWORD *)(v14 + 592);
    if ((_DWORD)v29)
    {
      v31 = *(_QWORD *)(a2 + 72);
      v32 = *(_QWORD *)(a2 + 88);
      do
      {
        physx::Dy::g_SolveConcludeTGSMethods[*(unsigned __int16 *)(v32 + 6)](v32, v31, v30, a7, v16);
        v32 += 8;
        --v29;
      }
      while (v29);
      v30 = *(_QWORD *)(v14 + 592);
    }
    v33 = *(float *)(v14 + 92);
    v34 = *a3;
    if ((_DWORD)v34)
    {
      v35 = (v67 << 6) + 64;
      v36 = v30 + v35;
      v37 = (float32x2_t *)(*(_QWORD *)(v14 + 576) + v35);
      do
      {
        physx::Dy::integrateCoreStep(v37, v36, a8, a9, a10);
        v36 += 64;
        v37 += 8;
        --v34;
      }
      while (v34);
    }
    physx::Dy::DynamicsTGSContext::stepArticulations(a4, (uint64_t)a3, a8);
    v38 = a3[1];
    if ((v38 & 0x7FFFFFFF) != 0)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = (void (*)(float))physx::Dy::ArticulationPImpl::sSaveVelocityTGS[*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a4 + 12288) + v39) + 40)];
        if (v41)
        {
          v41(v33);
          v38 = a3[1];
        }
        ++v40;
        v39 += 96;
      }
      while (v40 < (v38 & 0x7FFFFFFF));
    }
    if (a6)
    {
      v42 = 0;
      v43 = v16 + a8;
      do
      {
        if ((a3[1] & 0x7FFFFFFF) != 0)
        {
          v44 = 0;
          v45 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, float, float, float))(**(_QWORD **)(*(_QWORD *)(a4 + 12288) + v44)
                                                                                                 + 272))(*(_QWORD *)(*(_QWORD *)(a4 + 12288) + v44), *(_QWORD *)(a4 + 12160), *(_QWORD *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v43);
            ++v45;
            v44 += 96;
          }
          while (v45 < (a3[1] & 0x7FFFFFFF));
        }
        v46 = *(unsigned int *)(a4 + 12048);
        if ((_DWORD)v46)
        {
          v47 = *(_QWORD *)(a2 + 72);
          v48 = *(_QWORD *)(a2 + 88);
          v49 = *(_QWORD *)(v14 + 592);
          do
          {
            physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v48 + 6)](v48, v47, v49, a7, 0.0, v43);
            v48 += 8;
            --v46;
          }
          while (v46);
        }
        ++v42;
      }
      while (v42 != a6);
    }
    v50 = *(unsigned int *)(a4 + 12048);
    if ((_DWORD)v50)
    {
      v51 = *(_QWORD *)(a2 + 88);
      v52 = *(_QWORD *)(a2 + 72);
      do
      {
        physx::Dy::g_WritebackTGSMethods[*(unsigned __int16 *)(v51 + 6)](v51, v52, 0);
        v51 += 8;
        --v50;
      }
      while (v50);
    }
    if ((a3[1] & 0x7FFFFFFF) != 0)
    {
      v53 = 0;
      v54 = 0;
      do
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 12288) + v53) + 280))(*(_QWORD *)(*(_QWORD *)(a4 + 12288) + v53), 1);
        ++v54;
        v53 += 96;
      }
      while (v54 < (a3[1] & 0x7FFFFFFF));
    }
  }
  else
  {
    if ((a3[1] & 0x7FFFFFFF) != 0)
    {
      v55 = 0;
      do
      {
        v56 = (_QWORD *)(*(_QWORD *)(a4 + 12288) + 96 * v55);
        v57 = 0.0;
        if (a5)
        {
          v58 = a5;
          do
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, float, float, float))(*(_QWORD *)*v56
                                                                                                 + 272))(*v56, *(_QWORD *)(a4 + 12160), *(_QWORD *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v57);
            v59 = (void (*)(_QWORD *, _QWORD, float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[*(unsigned int *)(*v56 + 40)];
            if (v59)
              v59(v56, *(_QWORD *)(a4 + 12176), a8);
            v57 = v57 + a8;
            --v58;
          }
          while (v58);
        }
        v60 = (void (*)(_QWORD *, float))physx::Dy::ArticulationPImpl::sSaveVelocityTGS[*(unsigned int *)(*v56 + 40)];
        if (v60)
          v60(v56, *(float *)(v14 + 92));
        for (j = a6; j; --j)
          (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, float, float, float))(*(_QWORD *)*v56 + 272))(*v56, *(_QWORD *)(a4 + 12160), *(_QWORD *)(a4 + 12176), 1, 1, a8, 1.0 / a8, v57);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v56 + 280))(*v56, 1);
        ++v55;
      }
      while (v55 < (a3[1] & 0x7FFFFFFF));
    }
    v62 = *a3;
    if ((_DWORD)v62)
    {
      v63 = *(float *)(v14 + 88);
      v64 = (v67 << 6) + 64;
      v65 = *(_QWORD *)(v14 + 592) + v64;
      v66 = (float32x2_t *)(*(_QWORD *)(v14 + 576) + v64);
      do
      {
        physx::Dy::integrateCoreStep(v66, v65, v63, a9, a10);
        v65 += 64;
        v66 += 8;
        --v62;
      }
      while (v62);
    }
  }
}

float32x2_t *physx::Dy::createImpulseResponseVector(float32x2_t *result, float32x2_t *a2, float *a3, uint64_t a4, __int16 a5)
{
  float32x2_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  __int32 v10;

  if (a5 == -1)
  {
    v7 = a3[1];
    v8 = a3[2];
    v9 = v8 * *(float *)(a4 + 60);
    v5 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a4 + 28), *a3), vmul_n_f32(*(float32x2_t *)(a4 + 40), v7)), vmul_n_f32(*(float32x2_t *)(a4 + 52), v8));
    v6 = (float)((float)(*a3 * *(float *)(a4 + 36)) + (float)(v7 * *(float *)(a4 + 48))) + v9;
  }
  else
  {
    v5 = *(float32x2_t *)a3;
    v6 = a3[2];
  }
  v10 = a2[1].i32[0];
  *result = *a2;
  result[1].i32[0] = v10;
  result[1].i32[1] = 0;
  result[2] = v5;
  result[3].f32[0] = v6;
  result[3].i32[1] = 0;
  return result;
}

float physx::Dy::getImpulseResponse(uint64_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t *a4, float32x2_t *a5, float32x2_t *a6, float a7, float a8, float a9, float a10)
{
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __int32 v50;
  float32x2_t v51;
  float v52;
  int v53;
  float32x2_t v54;
  float v55;
  int v56;
  _BYTE v57[2056];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v15 = *((unsigned __int16 *)a1 + 12);
  if ((_DWORD)v15 == 0xFFFF)
  {
    v25 = *(float *)(a1[2] + 32);
    v21 = (float)(v25 * a2[1].f32[0]) * a7;
    v20 = vmul_n_f32(vmul_n_f32(*a2, v25), a7);
    *a3 = v20;
    a3[1].f32[0] = v21;
    v22 = a2[2].f32[0] * a8;
    v23 = a2[2].f32[1] * a8;
    v24 = a2[3].f32[0] * a8;
    a3[2].f32[0] = v22;
    a3[2].f32[1] = v23;
    a3[3].f32[0] = v24;
    v19 = v20.f32[1];
  }
  else
  {
    v16 = *a1;
    v17 = a2[1].f32[0] * a7;
    v47 = a9;
    v49 = a10;
    v18 = a2[3].f32[0] * a8;
    v51 = vmul_n_f32(*a2, a7);
    v52 = v17;
    v53 = 0;
    v54 = vmul_n_f32(a2[2], a8);
    v55 = v18;
    v56 = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *, float32x2_t *, float32x2_t *))(*(_QWORD *)v16 + 208))(v16, v15, v57, &v51, a3);
    a9 = v47;
    a10 = v49;
    v20.i32[0] = a3->i32[0];
    v19 = a3->f32[1];
    v21 = a3[1].f32[0];
    v22 = a3[2].f32[0];
    v23 = a3[2].f32[1];
    v24 = a3[3].f32[0];
  }
  v26 = a2->f32[0];
  v27 = a2->f32[1];
  v28 = a2[1].f32[0];
  v30 = a2[2].f32[0];
  v29 = a2[2].f32[1];
  v31 = a2[3].f32[0];
  v32 = *((unsigned __int16 *)a4 + 12);
  if ((_DWORD)v32 == 0xFFFF)
  {
    v43 = *(float *)(a4[2] + 32);
    v39 = (float)(v43 * a5[1].f32[0]) * a9;
    v37 = vmul_n_f32(vmul_n_f32(*a5, v43), a9);
    *a6 = v37;
    a6[1].f32[0] = v39;
    v40 = a5[2].f32[0] * a10;
    v41 = a5[2].f32[1] * a10;
    v42 = a5[3].f32[0] * a10;
    a6[2].f32[0] = v40;
    a6[2].f32[1] = v41;
    a6[3].f32[0] = v42;
    v38 = v37.f32[1];
  }
  else
  {
    v33 = *a4;
    v34 = a5[1].f32[0] * a9;
    v35 = a5[3].f32[0] * a10;
    v51 = vmul_n_f32(*a5, a9);
    v52 = v34;
    v53 = 0;
    v54 = vmul_n_f32(a5[2], a10);
    v55 = v35;
    v56 = 0;
    v50 = v20.i32[0];
    v45 = v29;
    v46 = v27;
    v36 = v30;
    v48 = v28;
    (*(void (**)(uint64_t, uint64_t, _BYTE *, float32x2_t *, float32x2_t *))(*(_QWORD *)v33 + 208))(v33, v32, v57, &v51, a6);
    v27 = v46;
    v28 = v48;
    v30 = v36;
    v29 = v45;
    v20.i32[0] = v50;
    v37.i32[0] = a6->i32[0];
    v38 = a6->f32[1];
    v39 = a6[1].f32[0];
    v40 = a6[2].f32[0];
    v41 = a6[2].f32[1];
    v42 = a6[3].f32[0];
  }
  return (float)((float)((float)((float)(v19 * v27) + (float)(v26 * v20.f32[0])) + (float)(v28 * v21))
               + (float)((float)((float)(v23 * v29) + (float)(v30 * v22)) + (float)(v31 * v24)))
       + (float)((float)((float)((float)(v38 * a5->f32[1]) + (float)(a5->f32[0] * v37.f32[0]))
                       + (float)(a5[1].f32[0] * v39))
               + (float)((float)((float)(v41 * a5[2].f32[1]) + (float)(a5[2].f32[0] * v40)) + (float)(a5[3].f32[0] * v42)));
}

float32x2_t physx::Dy::getImpulseResponse(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4, uint64_t *a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, double a9, double a10, float32x2_t a11, _QWORD *a12)
{
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v18 = *((unsigned __int16 *)a1 + 12);
  if ((_DWORD)v18 == 0xFFFF)
  {
    a11.i32[0] = *(_DWORD *)(a1[2] + 32);
    v23 = vmulq_n_f32(*a2, vmul_f32(a11, *(float32x2_t *)&a9).f32[0]);
    v23.i32[3] = 0;
    *a3 = v23;
    v22 = *a4;
    v24 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a4));
    v24.i32[3] = 0;
    a3[1] = v24;
  }
  else
  {
    v19 = *a1;
    v20 = vmulq_n_f32(*a2, *(float *)&a9);
    v20.i32[3] = 0;
    v21 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a4));
    v21.i32[3] = 0;
    v39 = v20;
    v40 = v21;
    (*(void (**)(uint64_t, uint64_t, _QWORD, float32x4_t *, float32x4_t *))(*(_QWORD *)v19 + 216))(v19, v18, 0, &v39, a3);
    v23 = *a3;
    v24 = a3[1];
  }
  v25 = *a2;
  v26 = a2[1];
  v27 = *((unsigned __int16 *)a5 + 12);
  if ((_DWORD)v27 == 0xFFFF)
  {
    v22.i32[0] = *(_DWORD *)(a5[2] + 32);
    v31 = vmulq_n_f32(*a6, vmul_f32(v22, *a8).f32[0]);
    v31.i32[3] = 0;
    *a7 = v31;
    v32 = vmulq_n_f32(a6[1], COERCE_FLOAT(*a12));
    v32.i32[3] = 0;
    a7[1] = v32;
  }
  else
  {
    v28 = *a5;
    v29 = vmulq_n_f32(*a6, COERCE_FLOAT(*a8));
    v29.i32[3] = 0;
    v30 = vmulq_n_f32(a6[1], COERCE_FLOAT(*a12));
    v30.i32[3] = 0;
    v39 = v29;
    v40 = v30;
    v37 = v24;
    v38 = v23;
    v35 = v26;
    v36 = v25;
    (*(void (**)(uint64_t, uint64_t, _QWORD, float32x4_t *, float32x4_t *))(*(_QWORD *)v28 + 216))(v28, v27, 0, &v39, a7);
    v26 = v35;
    v25 = v36;
    v24 = v37;
    v23 = v38;
    v31 = *a7;
    v32 = a7[1];
  }
  v33 = vaddq_f32(vaddq_f32(vmulq_f32(v23, v25), vmulq_f32(v24, v26)), vaddq_f32(vmulq_f32(v31, *a6), vmulq_f32(v32, a6[1])));
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  return vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
}

float physx::Dy::SolverExtBodyStep::projectVelocity(uint64_t a1, float *a2, float *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float result;
  float *v9;
  float32x4_t v10[2];

  if (*(unsigned __int16 *)(a1 + 24) == 0xFFFF)
  {
    v9 = *(float **)(a1 + 16);
    return (float)((float)((float)(v9[1] * a2[1]) + (float)(*v9 * *a2)) + (float)(v9[2] * a2[2]))
         + (float)((float)((float)(v9[5] * a3[1]) + (float)(v9[4] * *a3)) + (float)(v9[6] * a3[2]));
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)a1 + 232))(v10);
    v5.i64[0] = *(_QWORD *)a2;
    v5.i64[1] = *((unsigned int *)a2 + 2);
    v6.i64[0] = *(_QWORD *)a3;
    v6.i64[1] = *((unsigned int *)a3 + 2);
    v7 = vaddq_f32(vmulq_f32(v5, v10[0]), vmulq_f32(v6, v10[1]));
    v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
    LODWORD(result) = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).u32[0];
  }
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContactsStep(uint64_t a1, uint64_t a2, uint64_t a3, float a4, double a5, double a6, float a7, float a8, float a9, float a10, float a11)
{
  int v22;
  int v23;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  char v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  int32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x2_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  char v44;
  unsigned __int16 *v45;
  _DWORD *v46;
  int v47;
  int v48;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  BOOL v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  __int16 v64;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 *v73;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  float v79;
  float v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  unsigned int v92;
  float32x2_t v93;
  int32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x2_t v106;
  float v107;
  float32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int32x4_t v111;
  __int32 v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  float32x2_t *v117;
  const float *v118;
  float32x4_t *v119;
  float32x2_t v121;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  unsigned __int16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x4_t v145;
  unsigned int v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x8_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x8_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  int v165;
  float32x2_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x4_t v174;
  float32x2_t *v176;
  __int8 v177;
  const float *v178;
  float32x4_t v179;
  int8x16_t v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  unsigned int *v184;
  _WORD *v185;
  int8x16_t v186;
  int8x16_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x2_t v195;
  int v196;
  float32x2_t v197;
  float32x2_t v198;
  int v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x2_t v203;
  int8x8_t v204;
  float32x4_t v205;
  float32x2_t v206;
  float32x2_t v207;
  float32x2_t v208;
  int v209;
  float32x2_t v210;
  float32x2_t v211;
  int v212;
  float v213;
  float v214;
  unint64_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x2_t v222;
  float32x4_t v223;
  float32x4_t *v224;
  unsigned int v227;
  uint64_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x2_t v232;
  int8x8_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t v246;
  float32x4_t v247;
  unsigned int v248;
  float32x2_t v249;
  float32x2_t v250;
  int8x8_t v251;
  float32x2_t v252;
  uint64_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x4_t v256;
  float32x4_t v257;
  int8x8_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x2_t v267;
  float32x2_t v268;
  int v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x2_t v274;
  int8x8_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  int8x8_t v281;
  float32x2_t v282;
  float32x2_t v283;
  uint64_t v284;
  float32x4_t v285;
  float32x4_t v286;
  int8x8_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x2_t v296;
  float32x2_t v297;
  int v298;
  float32x2_t v299;
  float32x2_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  unint64_t v307;
  BOOL v308;
  float32x2_t v309;
  int v310;
  float *v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float *v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float32x2_t v337;
  float v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x2_t v348;
  float32x2_t v349;
  int v350;
  float v351;
  int32x2_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x2_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  uint64_t v360;
  _BYTE *v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _BOOL4 v368;
  _BOOL4 v369;
  BOOL v370;
  float v371;
  float v372;
  float32x4_t v373;
  float32x4_t v374;
  uint64_t v375;
  float32x4_t v376;
  float32x4_t v377;
  uint64_t v378;
  unint64_t v382;
  unint64_t v383;
  double v384;
  float32x4_t v385;
  float32x4_t v386;
  int8x16_t v387;
  int8x16_t v388;
  float32x4_t v389;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  char v394;
  float v395;
  float v396;
  float v397;
  char v401;
  float32x4_t *v402;
  float32x4_t v403;
  unsigned int v404;
  uint64_t v405;
  __int32 v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x2_t v409;
  float32x2_t v410;
  float32x2_t v411;
  float32x4_t *v412;
  float32x2_t v413;
  float32x2_t v414;
  float32x2_t v415;
  float32x2_t v416;
  unsigned __int16 *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  float32x2_t v423;
  float32x2_t v424;
  float32x4_t v425;
  int8x16_t v426;
  int8x8_t v427;
  float32x2_t v428;
  float v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  int8x8_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x2_t ImpulseResponse;
  float32x4_t v446;
  float32x4_t v447;
  float32x2_t v448;
  float32x2_t v449;
  int v450;
  float32x4_t v451;
  float32x4_t v452;
  int8x8_t v453;
  float32x2_t v454;
  uint64_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x2_t v458;
  float32x2_t v459;
  float32x4_t v460;
  float32x2_t v461;
  float32x2_t v462;
  float32x2_t v463;
  float32x4_t v464;
  int8x16_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x2_t v468;
  float32x2_t v469;
  int v470;
  float v471;
  int8x16_t v472;
  float32x2_t v473;
  int8x16_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x2_t v481;
  float32x2_t v482;
  int v483;
  float32x2_t v484;
  int v485;
  uint64_t v486;
  unint64_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x2_t v490;
  float32x2_t v491;
  float32x2_t v492;
  float32x2_t v493;
  int8x8_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x2_t v497;
  float32x4_t v498;
  float *v499;
  float v500;
  float v501;
  float v502;
  float v503;
  float v504;
  float v505;
  float v506;
  float v507;
  float v508;
  unsigned int v509;
  unsigned int v510;
  float32_t v511;
  float32x4_t v512;
  float32x4_t *v513;
  float32x2_t v514;
  float32x2_t v515;
  int8x8_t v516;
  float32x2_t v517;
  uint64_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float v525;
  float v526;
  float v527;
  float v528;
  float v529;
  float v530;
  float v531;
  float v532;
  float v533;
  unsigned int v534;
  unsigned int v535;
  float32_t v536;
  float32x4_t v537;
  float32x2_t v538;
  float32x2_t v539;
  int8x8_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x2_t v549;
  float32x2_t v550;
  float32x2_t v551;
  int v552;
  uint64_t v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x2_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x2_t v561;
  int8x8_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  int8x8_t v567;
  float32x2_t v568;
  uint64_t v569;
  __int16 v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  __int16 v581;
  float32x2_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x2_t v586;
  float32x2_t v587;
  int v588;
  uint64_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  float32x2_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  unint64_t v601;
  BOOL v602;
  float32x2_t v603;
  float32x2_t v604;
  int v605;
  float *v606;
  float v607;
  float v608;
  float v609;
  float v610;
  float v611;
  float v612;
  float v613;
  float v614;
  float v615;
  float v616;
  float v617;
  float v618;
  float v619;
  float v620;
  float v621;
  float v622;
  float v623;
  float v624;
  float v625;
  float v626;
  float *v627;
  float v628;
  float v629;
  float v630;
  float v631;
  float v632;
  float v633;
  float v634;
  float32_t v635;
  int32x2_t v636;
  float32x2_t v637;
  float32x2_t v638;
  float32x2_t v639;
  int v640;
  float v641;
  int32x2_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x2_t v647;
  uint64_t v648;
  float *v649;
  float v650;
  BOOL v651;
  unsigned int v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  char *v656;
  uint64_t v657;
  float v658;
  float32x2_t v659;
  float v660;
  uint64_t v661;
  __int32 v662;
  int v663;
  float v664;
  char v665;
  uint64_t v666;
  float32x2_t v667;
  float32x2_t v668;
  int32x2_t v669;
  int8x8_t v670;
  char v671;
  __n128 v672;
  unsigned int v673;
  int32x2_t v674;
  int8x16_t v675;
  BOOL v676;
  float32x2_t v677;
  float v678;
  float32x2_t v679;
  float v680;
  float32x2_t v681;
  float *v682;
  float32x2_t v683;
  int32x2_t v684;
  float32x2_t v685;
  __n128 v686;
  float32x2_t v687;
  float v688;
  float32x2_t v689;
  uint64_t v690;
  float32x2_t v691;
  float32x2_t *v692;
  float32x4_t v693;
  unsigned int v694;
  float32x4_t v695;
  float32x2_t v696;
  float32x4_t v697;
  float32x2_t v698;
  float v699;
  float32x2_t v700;
  float v701;
  unsigned __int16 *v702;
  float32x4_t v703;
  float32x2_t v704;
  float32x4_t v705;
  float32x2_t v706;
  float32x2_t v707;
  float32x2_t v708;
  int32x2_t v709;
  float32x2_t v710;
  uint64_t v711;
  float32x2_t v712;
  float32x2_t v713;
  unint64_t v714;
  float32x2_t v715;
  char v716;
  float32x4_t v717;
  float32x2_t v718;
  unsigned int v719;
  float32x4_t v720;
  float32x2_t v721;
  uint64_t v722;
  float32x2_t v724;
  float32x4_t v725;
  unsigned int *v726;
  float32x2_t v727;
  float32x4_t v728;
  float32x2_t v729;
  float32x4_t v730;
  float v731;
  float v732;
  float32x2_t v733;
  float32x2_t v734;
  double v735;
  float32x2_t v736;
  float32x2_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x2_t v741;
  float32x2_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x2_t v745;
  float32x2_t v746;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  int32x2_t v752;
  float32x2_t v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x2_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x2_t v770;
  float32x4_t v771;
  unsigned __int32 v772;
  int v773;
  float32x4_t v774;
  int32x2_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x2_t v778;
  _BYTE *v780;
  uint64_t v781;
  uint64_t v782;
  __int16 v783;
  _BYTE *v784;
  uint64_t v785;
  uint64_t v786;
  __int16 v787;
  int32x2_t v788;
  int32x2_t v789;
  int32x2_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  int8x16_t v802;

  _X8 = *(_QWORD *)(a1 + 24);
  __asm { PRFM            #0, [X8] }
  _X8 = *(_QWORD *)(a1 + 32);
  __asm { PRFM            #0, [X8] }
  _X26 = a2 + 7684;
  *(_QWORD *)(a2 + 7684) = 0;
  v671 = *(_BYTE *)(a1 + 158);
  v23 = *(_DWORD *)(a1 + 128);
  v22 = *(_DWORD *)(a1 + 132);
  _ZF = v22 == 4 || v22 == 2;
  v25 = _ZF;
  v26 = *(unsigned __int8 *)(a1 + 157);
  v27 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(v27 + 30) = 0;
  v28 = *(_DWORD *)(a1 + 152);
  if (!v28)
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 176) = 0;
    result = 1;
    *(_QWORD *)(v27 + 32) = 0;
    return result;
  }
  v773 = v25;
  if (!v26)
  {
    physx::Dy::getFrictionPatches(a2, *(float **)(a1 + 168), *(unsigned __int8 *)(a1 + 176), (float *)(a1 + 72), (float *)(a1 + 100), a8, a5, a6, a7, a8, a9, a10, a11);
    v28 = *(_DWORD *)(a1 + 152);
  }
  v31 = v23 | v22;
  physx::Dy::createContactPatches(a2, *(_QWORD *)(a1 + 144), v28, 0.999);
  v32 = *(_QWORD *)(a1 + 144);
  v33 = a1;
  v34 = (float *)(a1 + 72);
  physx::Dy::correlatePatches(a2, v32, v34, (float *)(v33 + 100), 0, 0, 0.999);
  physx::Dy::growPatches(a2, *(_QWORD *)(v33 + 144), v34, (float *)(v33 + 100), 0, a8, *(float *)(v33 + 160) + a7);
  v40 = *(unsigned int *)(a2 + 7688);
  v711 = v33;
  if (!(_DWORD)v40)
  {
    _X14 = 0;
    v52 = 0;
    LOBYTE(v42) = 0;
    v54 = 0;
LABEL_59:
    *(_QWORD *)(v33 + 168) = _X14;
    v656 = (char *)v54;
    *(_QWORD *)(v27 + 32) = v54;
    *(_BYTE *)(v33 + 176) = v42;
    *(_WORD *)(v27 + 30) = v52 >> 4;
    v63 = *(_QWORD *)(v33 + 184);
    *(_QWORD *)(v27 + 40) = v63;
    if (v63)
      v64 = *(_WORD *)(v33 + 152);
    else
      v64 = 0;
    *(_WORD *)(v27 + 28) = v64;
    if (_X14)
    {
      __asm
      {
        PRFM            #0, [X14]
        PRFM            #0, [X14,#0x80]
        PRFM            #0, [X14,#0x100]
      }
      v68 = *(_DWORD *)(a2 + 7688);
      if (v68)
      {
        v69 = 0;
        v70 = 104 * v68;
        v71 = 7296;
        _X11 = _X14;
        do
        {
          if (*(_DWORD *)(a2 + v71))
          {
            *(_DWORD *)_X11 = *(_DWORD *)(a2 + v69 + 2816);
            *(_QWORD *)(_X11 + 20) = *(_QWORD *)(a2 + v69 + 2836);
            *(_QWORD *)(_X11 + 32) = *(_QWORD *)(a2 + v69 + 2848);
            *(_QWORD *)(_X11 + 44) = *(_QWORD *)(a2 + v69 + 2860);
            *(_QWORD *)(_X11 + 56) = *(_QWORD *)(a2 + v69 + 2872);
            *(_QWORD *)(_X11 + 68) = *(_QWORD *)(a2 + v69 + 2884);
            *(_OWORD *)(_X11 + 80) = *(_OWORD *)(a2 + v69 + 2896);
            *(_QWORD *)(_X11 + 96) = *(_QWORD *)(a2 + v69 + 2912);
            v73 = (__n128 *)(a2 + v69 + 2820);
            _Q0 = *v73;
            *(__n128 *)(_X11 + 4) = *v73;
            *(_DWORD *)(_X11 + 28) = *(_DWORD *)(a2 + v69 + 2844);
            *(_DWORD *)(_X11 + 40) = *(_DWORD *)(a2 + v69 + 2856);
            *(_DWORD *)(_X11 + 52) = *(_DWORD *)(a2 + v69 + 2868);
            *(_DWORD *)(_X11 + 64) = *(_DWORD *)(a2 + v69 + 2880);
            *(_DWORD *)(_X11 + 76) = *(_DWORD *)(a2 + v69 + 2892);
            __asm { PRFM            #0, [X11,#0x168] }
            _X11 += 104;
          }
          v69 += 104;
          v71 += 4;
        }
        while (v70 != v69);
      }
    }
    if (v656)
    {
      v657 = _X14;
      v652 = v52;
      __asm { FMOV            V0.2S, #1.0 }
      v670 = (int8x8_t)_Q0.n128_u64[0];
      if ((v31 & 8) != 0)
      {
        v360 = *(unsigned __int16 *)(v27 + 16);
        v362 = *(_BYTE **)(v33 + 24);
        v361 = *(_BYTE **)(v33 + 32);
        v363 = *(_QWORD *)(v33 + 40);
        v364 = *(_QWORD *)(v33 + 48);
        v784 = v362;
        v785 = v363;
        v366 = *(_QWORD *)(v33 + 56);
        v365 = *(_QWORD *)(v33 + 64);
        v786 = v366;
        v787 = v360;
        v367 = *(unsigned __int16 *)(v27 + 18);
        v780 = v361;
        v781 = v364;
        v782 = v365;
        v783 = v367;
        v368 = (_DWORD)v360 == 0xFFFF && v362[62] != 0;
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 212);
        v36.i32[0] = *(_DWORD *)(v711 + 216);
        v672 = _Q0;
        v369 = (_DWORD)v367 == 0xFFFF && v361[62] != 0;
        v722 = *(_QWORD *)(v711 + 144);
        _Q0.n128_u32[0] = *(_DWORD *)v711;
        v669 = (int32x2_t)_Q0.n128_u64[0];
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 4);
        v686 = _Q0;
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 8);
        v674 = (int32x2_t)_Q0.n128_u64[0];
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 12);
        v684 = (int32x2_t)_Q0.n128_u64[0];
        v735 = *(double *)(v711 + 160);
        v370 = v672.n128_f32[0] > 0.0;
        v775 = v36;
        if (*(float *)v36.i32 > 0.0)
          v370 = 1;
        v676 = v370;
        if ((_DWORD)v360 == 0xFFFF)
          v371 = *(float *)(v366 + 28);
        else
          v371 = (*(float (**)(_BYTE *, uint64_t, __n128))(*(_QWORD *)v362 + 248))(v362, v360, v672);
        if ((_DWORD)v367 == 0xFFFF)
          v372 = *(float *)(v365 + 28);
        else
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v361 + 248))(v361, v367);
        if (v371 > v372)
          v372 = v371;
        v680 = v372;
        if ((_DWORD)v360 == 0xFFFF)
        {
          v373.i64[0] = *(_QWORD *)v366;
          v373.i64[1] = *(unsigned int *)(v366 + 8);
          v374.i64[0] = *(_QWORD *)(v366 + 16);
          v374.i64[1] = *(unsigned int *)(v366 + 24);
          v793 = v373;
          v794 = v374;
        }
        else
        {
          (*(void (**)(float32x4_t *__return_ptr, _BYTE *, uint64_t))(*(_QWORD *)v362 + 232))(&v793, v362, v360);
        }
        v375 = v722;
        if ((_DWORD)v367 == 0xFFFF)
        {
          v376.i64[0] = *(_QWORD *)v365;
          v376.i64[1] = *(unsigned int *)(v365 + 8);
          v377.i64[0] = *(_QWORD *)(v365 + 16);
          v377.i64[1] = *(unsigned int *)(v365 + 24);
          v791 = v376;
          v792 = v377;
        }
        else
        {
          (*(void (**)(float32x4_t *__return_ptr, _BYTE *, uint64_t))(*(_QWORD *)v361 + 232))(&v791, v361, v367);
        }
        v790 = vdup_lane_s32(v674, 0);
        v789 = vdup_lane_s32((int32x2_t)v686.n128_u64[0], 0);
        v788 = vdup_lane_s32(v684, 0);
        v378 = a2;
        _X8 = a2 + 7556;
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X26]
        }
        v382 = *(unsigned int *)(a2 + 7688);
        if ((_DWORD)v382)
        {
          v383 = 0;
          v694 = 0;
          v384 = COERCE_DOUBLE(vdup_lane_s32(v669, 0));
          v385 = *(float32x4_t *)(v711 + 88);
          v385.i64[1] = *(unsigned int *)(v711 + 96);
          v758 = v385;
          v386 = *(float32x4_t *)(v711 + 116);
          v386.i64[1] = *(unsigned int *)(v711 + 124);
          v756 = v386;
          v733 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          v37.f32[0] = a4 * 0.8;
          v387.i64[0] = 0;
          v387.i32[2] = 0;
          v387.i32[3] = vdupq_lane_s32(v674, 0).i32[3];
          v386.i64[0] = 0;
          v389.i64[1] = v669.u32[0];
          v388 = vorrq_s8(v387, (int8x16_t)v389);
          *(int32x2_t *)v389.f32 = vdup_lane_s32(v775, 0);
          v667 = *(float32x2_t *)v389.f32;
          v729 = v37;
          v731 = -(float)(a4 * 0.8);
          _X12 = v656;
          v678 = a4;
          do
          {
            v391 = v378 + 4 * v383;
            v392 = *(_DWORD *)(v391 + 7296);
            if (v392)
            {
              v393 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *(unsigned int *)(v391 + 7424)) << 6);
              v394 = *(_BYTE *)(v393 + 48);
              v389.i32[0] = 1.0;
              if ((v394 & 4) != 0)
              {
                v389.i16[0] = *(_WORD *)(v378 + 104 * v383 + 2818);
                v389.f32[0] = 1.0 / (float)v389.u32[0];
              }
              v395 = *(float *)(v393 + 44);
              v387.i32[0] = *(_DWORD *)(v393 + 60);
              v752 = *(int32x2_t *)v387.i8;
              v396 = *(float *)(v393 + 56);
              v397 = 0.0;
              if ((*(_BYTE *)(v393 + 48) & 1) == 0)
                v397 = a4;
              __asm
              {
                PRFM            #0, [X12,#0xD0]
                PRFM            #0, [X12,#0x150]
                PRFM            #0, [X12,#0x1D0]
              }
              _X12[2] = v392;
              v714 = v383;
              v719 = v392;
              if ((v394 & 1) != 0)
                v401 = 0;
              else
                v401 = 2 * *(_BYTE *)(v378 + 104 * v383 + 2818);
              v716 = v394;
              v688 = v397;
              *(float *)v388.i32 = v389.f32[0] * v395;
              v389.f32[0] = v389.f32[0] * v396;
              v388.i32[1] = vdupq_lane_s32(*(int32x2_t *)&v389, 0).i32[1];
              v402 = (float32x4_t *)(_X12 + 80);
              _X12[3] = v401;
              *(_WORD *)_X12 = 3;
              v690 = v388.i64[1];
              *((int8x16_t *)_X12 + 1) = v388;
              v403.i64[1] = v686.n128_i64[1];
              *((_DWORD *)_X12 + 1) = v686.n128_u32[0];
              *((_DWORD *)_X12 + 2) = v684.i32[0];
              v726 = (unsigned int *)(v391 + 7424);
              v404 = *(_DWORD *)(v391 + 7424);
              v405 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * v404) << 6);
              v406 = *(_DWORD *)(v405 + 8);
              v403.i64[0] = *(_QWORD *)v405;
              *((_QWORD *)_X12 + 4) = *(_QWORD *)v405;
              v682 = (float *)(_X12 + 32);
              v407 = v403;
              v407.i32[1] = v403.i32[1];
              v407.i32[3] = 0;
              v408 = v407;
              v408.i32[2] = v406;
              *((_DWORD *)_X12 + 10) = v406;
              v692 = (float32x2_t *)_X12;
              *((float *)_X12 + 11) = v680;
              v409 = 0;
              v410 = (float32x2_t)vdup_n_s32(0x38D1B717u);
              v389.i64[0] = vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL).u64[0];
              v745 = *(float32x2_t *)v407.f32;
              v749 = v408;
              v706 = *(float32x2_t *)v389.f32;
              v709 = *(int32x2_t *)v403.f32;
              if (v404 == 0xFFFF)
              {
                v411 = 0;
                v412 = (float32x4_t *)(_X12 + 80);
              }
              else
              {
                v413 = (float32x2_t)vdup_lane_s32(v752, 0);
                v414 = (float32x2_t)vextq_s8((int8x16_t)v408, (int8x16_t)v408, 4uLL).u64[0];
                v415 = vneg_f32(*(float32x2_t *)v389.f32);
                v416 = vneg_f32(*(float32x2_t *)v407.f32);
                v389 = vnegq_f32(v408);
                v389.i32[3] = 0;
                v737 = v414;
                v740 = v389;
                v411 = 0;
                do
                {
                  v417 = (unsigned __int16 *)(v378 + 44 * v404);
                  v418 = *((unsigned __int8 *)v417 + 5);
                  if (*((_BYTE *)v417 + 5))
                  {
                    v419 = 0;
                    v420 = v375 + ((unint64_t)*v417 << 6);
                    do
                    {
                      v421 = v420 + (v419 << 6);
                      v423 = *(float32x2_t *)(v421 + 12);
                      v422 = v421 + 12;
                      v424 = v423;
                      v425.i32[0] = v423.i32[1];
                      v425.i32[1] = *(_DWORD *)(v422 + 8);
                      v425.i64[1] = *(unsigned int *)(v422 + 12);
                      v426 = (int8x16_t)vsubq_f32(v425, v758);
                      v427 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v407.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v426, v426, 8uLL)), *(float32x2_t *)v426.i8, v415);
                      v428 = vmla_f32(vmul_f32(v414, *(float32x2_t *)v426.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v426, v426, 4uLL), v416);
                      v429 = v428.f32[0];
                      *(int8x8_t *)v430.f32 = vext_s8((int8x8_t)v428, v427, 4uLL);
                      v430.i64[1] = v428.u32[0];
                      v431 = v430;
                      if (v787 == -1)
                      {
                        v432 = *(float32x4_t *)(v785 + 40);
                        v433 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v432, 3);
                        v433.i32[1] = *(_DWORD *)(v785 + 56);
                        v433.i32[2] = *(_DWORD *)(v785 + 60);
                        v434 = vmulq_lane_f32(*(float32x4_t *)(v785 + 28), v428, 1);
                        v434.i32[3] = 0;
                        v435 = vmulq_n_f32(v432, *(float *)v427.i32);
                        v435.i32[3] = 0;
                        v436 = vmulq_n_f32(v433, v429);
                        v436.i32[3] = 0;
                        v431 = vaddq_f32(vaddq_f32(v434, v435), v436);
                      }
                      v437 = vsubq_f32(v425, v756);
                      *(float32x2_t *)v438.f32 = vmla_f32(vmul_f32(*(float32x2_t *)v407.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v437, (int8x16_t)v437, 8uLL)), *(float32x2_t *)v437.f32, v415);
                      v439 = (int8x8_t)vmla_f32(vmul_f32(v414, *(float32x2_t *)v437.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v437, (int8x16_t)v437, 4uLL), v416);
                      *(int8x8_t *)v437.f32 = vext_s8(v439, *(int8x8_t *)v438.f32, 4uLL);
                      v437.i64[1] = v439.u32[0];
                      v797 = v408;
                      v798 = v431;
                      v440 = vnegq_f32(v437);
                      v764 = v431;
                      v767 = v437;
                      v776 = v430;
                      if (v783 == -1)
                      {
                        v441 = *(float32x4_t *)(v781 + 40);
                        v442 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v441, 3);
                        v442.i32[1] = *(_DWORD *)(v781 + 56);
                        v442.i32[2] = *(_DWORD *)(v781 + 60);
                        v443 = vmulq_n_f32(*(float32x4_t *)(v781 + 28), v440.f32[0]);
                        v443.i32[3] = 0;
                        v438 = vmulq_lane_f32(v441, *(float32x2_t *)v440.f32, 1);
                        v438.i32[3] = 0;
                        v444 = vmulq_laneq_f32(v442, v440, 2);
                        v444.i32[3] = 0;
                        v440 = vaddq_f32(vaddq_f32(v443, v438), v444);
                      }
                      else
                      {
                        v440.i32[3] = 0;
                      }
                      v412 = v402 + 7;
                      v770 = vsub_f32(v424, *(float32x2_t *)&v735);
                      v795 = v740;
                      v796 = v440;
                      v760 = v440;
                      ImpulseResponse = physx::Dy::getImpulseResponse((uint64_t *)&v784, &v797, &v801, (float32x2_t *)&v789, (uint64_t *)&v780, &v795, &v799, (float32x2_t *)&v790, v384, v735, *(float32x2_t *)v438.f32, &v788);
                      v446 = vmulq_f32(v776, v794);
                      v408 = v749;
                      v447 = vaddq_f32(vmulq_f32(v749, v791), vmulq_f32(v767, v792));
                      v448 = vadd_f32(ImpulseResponse, v410);
                      v449 = vrecpe_f32(v448);
                      v450 = 4;
                      do
                      {
                        v449 = vmul_f32(v449, vrecps_f32(v448, v449));
                        --v450;
                      }
                      while (v450);
                      v451 = vaddq_f32(vmulq_f32(v749, v793), v446);
                      v452 = vsubq_f32(v451, v447);
                      v452.i64[0] = vpaddq_f32(v452, v452).u64[0];
                      *(float32x2_t *)v452.f32 = vpadd_f32(*(float32x2_t *)v452.f32, *(float32x2_t *)v452.f32);
                      v453 = (int8x8_t)vcgt_f32(v733, *(float32x2_t *)v452.f32);
                      v454 = vneg_f32(*(float32x2_t *)v452.f32);
                      v455 = v420 + (v419 << 6);
                      v456.i64[0] = *(_QWORD *)(v455 + 32);
                      v456.i64[1] = *(unsigned int *)(v455 + 40);
                      v457 = vmulq_f32(v749, v456);
                      v457.i64[0] = vpaddq_f32(v457, v457).u64[0];
                      v458 = vadd_f32(vpadd_f32(*(float32x2_t *)v457.f32, *(float32x2_t *)v457.f32), (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v454, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)&a5, v770), 0)), vand_s8((int8x8_t)vcgtz_f32(v413), v453)), 0), (int8x8_t)vmul_n_f32(v454, *(float *)v752.i32)));
                      if (v368)
                      {
                        v459 = (float32x2_t)vpaddq_f32(v451, v451).u64[0];
                        v458 = vsub_f32(v458, vpadd_f32(v459, v459));
                      }
                      *(float32x2_t *)v407.f32 = v745;
                      v414 = v737;
                      v460 = v764;
                      if (v369)
                      {
                        v461 = (float32x2_t)vpaddq_f32(v447, v447).u64[0];
                        v458 = vadd_f32(v458, vpadd_f32(v461, v461));
                      }
                      v462 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(ImpulseResponse, (float32x2_t)0x3400000034000000), 0), (int8x8_t)v449);
                      v463 = vmax_f32(vmla_f32(vmul_f32(vsub_f32(v458, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v729, v770), 0)), v462), v462, v454), 0);
                      v460.i32[3] = vdupq_lane_s32(*(int32x2_t *)&v770, 0).i32[3];
                      v464 = vnegq_f32(v760);
                      v464.i32[3] = v462.i32[1];
                      v402[2].i32[0] = v458.i32[0];
                      v402[2].f32[1] = v731;
                      *v402 = v460;
                      v402[1] = v464;
                      v465 = v802;
                      v466 = v799;
                      v467 = v800;
                      v402[3] = v801;
                      v402[4] = v466;
                      v402[5] = (float32x4_t)v465;
                      v402[6] = v467;
                      v409 = vadd_f32(v409, v463);
                      *(float32x2_t *)v389.f32 = vld1_dup_f32((const float *)v422);
                      v411 = vmin_f32(*(float32x2_t *)v389.f32, v411);
                      ++v419;
                      v402 += 7;
                    }
                    while (v419 != v418);
                  }
                  else
                  {
                    v412 = v402;
                  }
                  v378 = a2;
                  v404 = *(unsigned __int16 *)(a2 + 44 * v404 + 2);
                  v402 = v412;
                  v375 = v722;
                }
                while (v404 != 0xFFFF);
              }
              v389.f32[0] = (float)v719;
              v468 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v389.f32, 0);
              v469 = vrecpe_f32(v468);
              v470 = 4;
              do
              {
                v469 = vmul_f32(v469, vrecps_f32(v468, v469));
                --v470;
              }
              while (v470);
              v692[6].i32[1] = vmul_f32(v409, v469).u32[0];
              bzero(v412, 4 * v719);
              _X12 = &v412->i8[4 * ((v719 + 3) & 0xFFFFFFFC)];
              v692[7].i32[0] = 0;
              v383 = v714;
              v471 = -0.5;
              if ((v716 & 1) == 0)
              {
                v472.i64[1] = v791.i64[1];
                v473 = (float32x2_t)vdup_lane_s32(v709, 1);
                *(int8x8_t *)v474.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v749, 2)), 4uLL);
                v474.i64[1] = v473.u32[0];
                v475 = vsubq_f32(v793, v791);
                *(int8x8_t *)v472.i8 = vext_s8((int8x8_t)vneg_f32(v473), (int8x8_t)v709, 4uLL);
                v476 = vmulq_f32(v749, v475);
                v476.i64[0] = vpaddq_f32(v476, v476).u64[0];
                v477 = vmulq_n_f32(v749, vpadd_f32(*(float32x2_t *)v476.f32, *(float32x2_t *)v476.f32).f32[0]);
                v477.i32[3] = 0;
                v478 = vsubq_f32(v475, v477);
                v479 = vmulq_f32(v478, v478);
                v479.i64[0] = vpaddq_f32(v479, v479).u64[0];
                v389 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v479.f32, *(float32x2_t *)v479.f32), v410), 0), (int8x16_t)v478, vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32((float32x2_t)vdup_n_s32(0x3F3504F3u), vabs_f32((float32x2_t)vdup_lane_s32(v709, 0))), 0), 0x1FuLL)), v474, v472));
                v480 = vmulq_f32(v389, v389);
                v480.i64[0] = vpaddq_f32(v480, v480).u64[0];
                v481 = vpadd_f32(*(float32x2_t *)v480.f32, *(float32x2_t *)v480.f32);
                v482 = vrsqrte_f32(v481);
                v483 = 4;
                do
                {
                  v482 = vmul_f32(v482, vrsqrts_f32(vmul_f32(v482, v482), v481));
                  --v483;
                }
                while (v483);
                v484 = vmul_f32(v481, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v481), 0), v670, (int8x8_t)v482));
                *(float32x2_t *)v387.i8 = vrecpe_f32(v484);
                v485 = 4;
                do
                {
                  *(float32x2_t *)v387.i8 = vmul_f32(*(float32x2_t *)v387.i8, vrecps_f32(v484, *(float32x2_t *)v387.i8));
                  --v485;
                }
                while (v485);
                v692[8] = (float32x2_t)(v657 + 104 * v694);
                v486 = v378 + 104 * v714;
                if (*(_WORD *)(v486 + 2818))
                {
                  v487 = 0;
                  v488 = vmulq_n_f32(v389, *(float *)v387.i32);
                  v489 = v488;
                  v489.i32[3] = 0;
                  v490 = (float32x2_t)vextq_s8((int8x16_t)v489, (int8x16_t)v489, 8uLL).u64[0];
                  v491 = (float32x2_t)vext_s8(*(int8x8_t *)v488.f32, (int8x8_t)v490, 4uLL);
                  v492 = vneg_f32(v490);
                  v493 = vneg_f32(*(float32x2_t *)v488.f32);
                  v777 = v488;
                  v494 = (int8x8_t)vmls_f32(vmul_f32(v745, v491), (float32x2_t)vext_s8((int8x8_t)v745, (int8x8_t)v706, 4uLL), *(float32x2_t *)v488.f32);
                  *(int8x8_t *)v495.f32 = vext_s8(v494, (int8x8_t)vmls_f32(vmul_f32(v706, *(float32x2_t *)v488.f32), v745, v490), 4uLL);
                  v495.i64[1] = v494.u32[0];
                  v702 = (unsigned __int16 *)(v486 + 2818);
                  v496 = vnegq_f32(v489);
                  v496.i32[3] = 0;
                  v738 = v496;
                  v700 = (float32x2_t)vext_s8(*(int8x8_t *)v495.f32, (int8x8_t)v494.u32[0], 4uLL);
                  v698 = vneg_f32((float32x2_t)v494.u32[0]);
                  v704 = *(float32x2_t *)v495.f32;
                  v497 = vneg_f32(*(float32x2_t *)v495.f32);
                  v498 = vnegq_f32(v495);
                  v498.i32[3] = 0;
                  v720 = v498;
                  v765 = v495;
                  v768 = v489;
                  v710 = v491;
                  v707 = v492;
                  v696 = v493;
                  do
                  {
                    v499 = (float *)(v378 + 104 * v714 + 12 * v487);
                    v500 = v499[714] + v499[714];
                    v501 = v499[715] + v499[715];
                    v502 = v499[716] + v499[716];
                    v504 = *(float *)(v711 + 80);
                    v503 = *(float *)(v711 + 84);
                    v505 = v471 + (float)(v503 * v503);
                    v506 = *(float *)(v711 + 72);
                    v507 = *(float *)(v711 + 76);
                    v508 = (float)((float)(v501 * v507) + (float)(v506 * v500)) + (float)(v504 * v502);
                    *(float *)&v509 = (float)((float)(v503 * (float)((float)(v507 * v502) - (float)(v504 * v501)))
                                            + (float)(v500 * v505))
                                    + (float)(v506 * v508);
                    *(float *)&v510 = (float)((float)(v503 * (float)((float)(v504 * v500) - (float)(v506 * v502)))
                                            + (float)(v501 * v505))
                                    + (float)(v507 * v508);
                    v511 = (float)((float)(v503 * (float)((float)(v506 * v501) - (float)(v507 * v500)))
                                 + (float)(v502 * v505))
                         + (float)(v504 * v508);
                    v512 = (float32x4_t)__PAIR64__(v510, v509);
                    v512.f32[2] = v511;
                    v513 = (float32x4_t *)_X12;
                    v514 = (float32x2_t)vextq_s8((int8x16_t)v512, (int8x16_t)v512, 8uLL).u64[0];
                    v515 = (float32x2_t)vext_s8((int8x8_t)__PAIR64__(v510, v509), (int8x8_t)v514, 4uLL);
                    v516 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v777.f32, v514), (float32x2_t)__PAIR64__(v510, v509), v492);
                    v517 = vmla_f32(vmul_f32(v491, (float32x2_t)__PAIR64__(v510, v509)), v515, v493);
                    v518 = v517.u32[0];
                    v761 = (float32x2_t)__PAIR64__(v510, v509);
                    v753 = v514;
                    if (v787 == -1)
                    {
                      v520 = *(float32x4_t *)(v785 + 40);
                      v521 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v520, 3);
                      v521.i32[1] = *(_DWORD *)(v785 + 56);
                      v521.i32[2] = *(_DWORD *)(v785 + 60);
                      v522 = vmulq_lane_f32(*(float32x4_t *)(v785 + 28), v517, 1);
                      v522.i32[3] = 0;
                      v523 = vmulq_n_f32(v520, *(float *)v516.i32);
                      v523.i32[3] = 0;
                      v524 = vmulq_n_f32(v521, *(float *)&v518);
                      v524.i32[3] = 0;
                      v519 = vaddq_f32(vaddq_f32(v522, v523), v524);
                    }
                    else
                    {
                      *(int8x8_t *)v519.f32 = vext_s8((int8x8_t)v517, v516, 4uLL);
                      v519.i64[1] = v517.u32[0];
                    }
                    v525 = v499[720] + v499[720];
                    v526 = v499[721] + v499[721];
                    v527 = v499[722] + v499[722];
                    v529 = *(float *)(v711 + 108);
                    v528 = *(float *)(v711 + 112);
                    v530 = v471 + (float)(v528 * v528);
                    v531 = *(float *)(v711 + 100);
                    v532 = *(float *)(v711 + 104);
                    v533 = (float)((float)(v526 * v532) + (float)(v531 * v525)) + (float)(v529 * v527);
                    *(float *)&v534 = (float)((float)(v528 * (float)((float)(v532 * v527) - (float)(v529 * v526)))
                                            + (float)(v525 * v530))
                                    + (float)(v531 * v533);
                    *(float *)&v535 = (float)((float)(v528 * (float)((float)(v529 * v525) - (float)(v531 * v527)))
                                            + (float)(v526 * v530))
                                    + (float)(v532 * v533);
                    v536 = (float)((float)(v528 * (float)((float)(v531 * v526) - (float)(v532 * v525)))
                                 + (float)(v527 * v530))
                         + (float)(v529 * v533);
                    v537 = (float32x4_t)__PAIR64__(v535, v534);
                    v537.f32[2] = v536;
                    v538 = (float32x2_t)vextq_s8((int8x16_t)v537, (int8x16_t)v537, 8uLL).u64[0];
                    v539 = (float32x2_t)vext_s8((int8x8_t)__PAIR64__(v535, v534), (int8x8_t)v538, 4uLL);
                    v540 = (int8x8_t)vmla_f32(vmul_f32(v491, (float32x2_t)__PAIR64__(v535, v534)), v539, v493);
                    *(int8x8_t *)v541.f32 = vext_s8(v540, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v777.f32, v538), (float32x2_t)__PAIR64__(v535, v534), v492), 4uLL);
                    v541.i64[1] = v540.u32[0];
                    v797 = v489;
                    v798 = v519;
                    v542 = vnegq_f32(v541);
                    v741 = v538;
                    v746 = (float32x2_t)__PAIR64__(v535, v534);
                    v750 = v519;
                    if (v783 == -1)
                    {
                      v543 = *(float32x4_t *)(v781 + 40);
                      v544 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v543, 3);
                      v544.i32[1] = *(_DWORD *)(v781 + 56);
                      v544.i32[2] = *(_DWORD *)(v781 + 60);
                      v545 = vmulq_n_f32(*(float32x4_t *)(v781 + 28), v542.f32[0]);
                      v545.i32[3] = 0;
                      v546 = vmulq_lane_f32(v543, *(float32x2_t *)v542.f32, 1);
                      v546.i32[3] = 0;
                      v547 = vmulq_laneq_f32(v544, v542, 2);
                      v547.i32[3] = 0;
                      v542 = vaddq_f32(vaddq_f32(v545, v546), v547);
                    }
                    else
                    {
                      v542.i32[3] = 0;
                    }
                    v548 = vaddq_f32(v756, v537);
                    v771 = vsubq_f32(vaddq_f32(v758, v512), v548);
                    v795 = v738;
                    v796 = v542;
                    v717 = v542;
                    v549 = physx::Dy::getImpulseResponse((uint64_t *)&v784, &v797, &v801, (float32x2_t *)&v789, (uint64_t *)&v780, &v795, &v799, (float32x2_t *)&v790, v384, *(double *)v548.i64, *(float32x2_t *)v756.f32, &v788);
                    v550 = vadd_f32(v549, v410);
                    v551 = vrecpe_f32(v550);
                    v552 = 4;
                    do
                    {
                      v551 = vmul_f32(v551, vrecps_f32(v550, v551));
                      --v552;
                    }
                    while (v552);
                    v553 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *v726) << 6);
                    v554.i64[0] = *(_QWORD *)(v553 + 32);
                    v554.i64[1] = *(unsigned int *)(v553 + 40);
                    v555 = vmulq_f32(v768, v554);
                    v555.i64[0] = vpaddq_f32(v555, v555).u64[0];
                    v556 = vpadd_f32(*(float32x2_t *)v555.f32, *(float32x2_t *)v555.f32);
                    if (v368)
                    {
                      v557 = vaddq_f32(vmulq_f32(v768, v793), vmulq_f32(v750, v794));
                      v557.i64[0] = vpaddq_f32(v557, v557).u64[0];
                      v556 = vsub_f32(v556, vpadd_f32(*(float32x2_t *)v557.f32, *(float32x2_t *)v557.f32));
                    }
                    if (v369)
                    {
                      v558 = vaddq_f32(vmulq_f32(v738, v791), vmulq_f32(v717, v792));
                      v558.i64[0] = vpaddq_f32(v558, v558).u64[0];
                      v556 = vsub_f32(v556, vpadd_f32(*(float32x2_t *)v558.f32, *(float32x2_t *)v558.f32));
                    }
                    v559 = v777;
                    v560 = vmulq_f32(v768, v771);
                    v560.i64[0] = vpaddq_f32(v560, v560).u64[0];
                    v559.i32[3] = vpadd_f32(*(float32x2_t *)&v560, *(float32x2_t *)&v560).i32[1];
                    v561 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
                    v562 = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v549, (float32x2_t)0x3400000034000000), 0), (int8x8_t)vmul_f32(v551, v561));
                    *v513 = v559;
                    v563 = v798;
                    v564 = v799;
                    v563.i32[3] = v556.i32[1];
                    v513[1] = v563;
                    v565 = vnegq_f32(v796);
                    v565.i32[3] = v562.i32[1];
                    v513[2] = v565;
                    v513[3].i32[1] = 0;
                    v513[3].f32[0] = v688;
                    v566 = v800;
                    v513[4] = v801;
                    v513[5] = v564;
                    v513[6] = (float32x4_t)v802;
                    v513[7] = v566;
                    v567 = (int8x8_t)vmla_f32(vmul_f32(v704, v753), v761, v698);
                    v568 = vmla_f32(vmul_f32(v700, v761), v515, v497);
                    v569 = v568.u32[0];
                    v570 = v787;
                    if ((unsigned __int16)v787 == 0xFFFF)
                    {
                      v572 = *(float32x4_t *)(v785 + 40);
                      v573 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v572, 3);
                      v573.i32[1] = *(_DWORD *)(v785 + 56);
                      v573.i32[2] = *(_DWORD *)(v785 + 60);
                      v574 = vmulq_lane_f32(*(float32x4_t *)(v785 + 28), v568, 1);
                      v574.i32[3] = 0;
                      v575 = vmulq_n_f32(v572, *(float *)v567.i32);
                      v575.i32[3] = 0;
                      v576 = vmulq_n_f32(v573, *(float *)&v569);
                      v576.i32[3] = 0;
                      v571 = vaddq_f32(vaddq_f32(v574, v575), v576);
                    }
                    else
                    {
                      *(int8x8_t *)v571.f32 = vext_s8((int8x8_t)v568, v567, 4uLL);
                      v571.i64[1] = v568.u32[0];
                    }
                    v577.i64[0] = v765.i64[0];
                    *(float32x2_t *)v579.f32 = vmla_f32(vmul_f32(v700, v746), v539, v497);
                    *(int8x8_t *)v578.f32 = vext_s8(*(int8x8_t *)v579.f32, (int8x8_t)vmla_f32(vmul_f32(v704, v741), v746, v698), 4uLL);
                    v579.i32[1] = 0;
                    v578.i64[1] = v579.u32[0];
                    v797 = v765;
                    v798 = v571;
                    v580 = vnegq_f32(v578);
                    v581 = v783;
                    v762 = v571;
                    v582 = v561;
                    if ((unsigned __int16)v783 == 0xFFFF)
                    {
                      v583 = *(float32x4_t *)(v781 + 40);
                      v584 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v583, 3);
                      v584.i32[1] = *(_DWORD *)(v781 + 56);
                      v584.i32[2] = *(_DWORD *)(v781 + 60);
                      v585 = vmulq_n_f32(*(float32x4_t *)(v781 + 28), v580.f32[0]);
                      v585.i32[3] = 0;
                      v579 = vmulq_lane_f32(v583, *(float32x2_t *)v580.f32, 1);
                      v579.i32[3] = 0;
                      v577 = vmulq_laneq_f32(v584, v580, 2);
                      v577.i32[3] = 0;
                      v580 = vaddq_f32(vaddq_f32(v585, v579), v577);
                    }
                    else
                    {
                      v580.i32[3] = 0;
                    }
                    v795 = v720;
                    v796 = v580;
                    v754 = v580;
                    *(float32x2_t *)v389.f32 = physx::Dy::getImpulseResponse((uint64_t *)&v784, &v797, &v801, (float32x2_t *)&v789, (uint64_t *)&v780, &v795, &v799, (float32x2_t *)&v790, v384, *(double *)v579.i64, *(float32x2_t *)v577.f32, &v788);
                    v586 = vadd_f32(*(float32x2_t *)v389.f32, v410);
                    v587 = vrecpe_f32(v586);
                    v588 = 4;
                    do
                    {
                      v587 = vmul_f32(v587, vrecps_f32(v586, v587));
                      --v588;
                    }
                    while (v588);
                    v589 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *v726) << 6);
                    v590.i64[0] = *(_QWORD *)(v589 + 32);
                    v590.i64[1] = *(unsigned int *)(v589 + 40);
                    v591 = v762;
                    v592 = vmulq_f32(v765, v590);
                    v592.i64[0] = vpaddq_f32(v592, v592).u64[0];
                    v593 = vpadd_f32(*(float32x2_t *)v592.f32, *(float32x2_t *)v592.f32);
                    _X12 = (char *)&v513[16];
                    v491 = v710;
                    v471 = -0.5;
                    v492 = v707;
                    v493 = v696;
                    if (v368)
                    {
                      v594 = vaddq_f32(vmulq_f32(v765, v793), vmulq_f32(v762, v794));
                      v594.i64[0] = vpaddq_f32(v594, v594).u64[0];
                      v593 = vsub_f32(v593, vpadd_f32(*(float32x2_t *)v594.f32, *(float32x2_t *)v594.f32));
                    }
                    v489 = v768;
                    if (v369)
                    {
                      v595 = vaddq_f32(vmulq_f32(v720, v791), vmulq_f32(v754, v792));
                      v595.i64[0] = vpaddq_f32(v595, v595).u64[0];
                      v593 = vsub_f32(v593, vpadd_f32(*(float32x2_t *)v595.f32, *(float32x2_t *)v595.f32));
                    }
                    *(int8x8_t *)v389.f32 = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v389.f32, (float32x2_t)0x3400000034000000), 0), (int8x8_t)vmul_f32(v587, v582));
                    v596 = vmulq_f32(v765, v771);
                    v596.i64[0] = vpaddq_f32(v596, v596).u64[0];
                    v597 = v765;
                    v597.i32[3] = vpadd_f32(*(float32x2_t *)&v596, *(float32x2_t *)&v596).i32[1];
                    v591.i32[3] = v593.i32[1];
                    v513[8] = v597;
                    v513[9] = v591;
                    v598 = vnegq_f32(v754);
                    v598.i32[3] = v389.i32[1];
                    v513[10] = v598;
                    v513[11].i32[1] = 0;
                    v513[11].f32[0] = v688;
                    v389.i32[1] = v801.i32[1];
                    v387 = v802;
                    v599 = v799;
                    v600 = v800;
                    v513[12] = v801;
                    v513[13] = v599;
                    v513[14] = (float32x4_t)v387;
                    v513[15] = v600;
                    ++v487;
                    v601 = *v702;
                  }
                  while (v487 < v601);
                  _ZF = (_DWORD)v601 == 1;
                  v602 = v676;
                  if (!_ZF)
                    v602 = 0;
                  v383 = v714;
                  if (v602)
                  {
                    v778 = v582;
                    v603 = vmul_n_f32(vmax_f32(vneg_f32(v411), 0), v672.n128_f32[0]);
                    v604 = vrsqrte_f32(v603);
                    v605 = 4;
                    do
                    {
                      v604 = vmul_f32(v604, vrsqrts_f32(vmul_f32(v604, v604), v603));
                      --v605;
                    }
                    while (v605);
                    ++v692->i8[3];
                    v606 = (float *)(v378 + 104 * v714);
                    v607 = v606[726];
                    v608 = v606[729];
                    v609 = *(float *)(v711 + 72);
                    v610 = *(float *)(v711 + 76);
                    v612 = *(float *)(v711 + 80);
                    v611 = *(float *)(v711 + 84);
                    v613 = v606[728];
                    v614 = v606[727];
                    v615 = (float)((float)((float)(v608 * v609) + (float)(v611 * v607)) + (float)(v610 * v613))
                         - (float)(v614 * v612);
                    v616 = (float)((float)((float)(v608 * v610) + (float)(v611 * v614)) + (float)(v612 * v607))
                         - (float)(v613 * v609);
                    v617 = (float)((float)((float)(v608 * v612) + (float)(v611 * v613)) + (float)(v609 * v614))
                         - (float)(v607 * v610);
                    v618 = (float)((float)((float)(v611 * v608) - (float)(v609 * v607)) - (float)(v610 * v614))
                         - (float)(v612 * v613);
                    v620 = *(float *)(v711 + 108);
                    v619 = *(float *)(v711 + 112);
                    v621 = *(float *)(v711 + 100);
                    v622 = *(float *)(v711 + 104);
                    v623 = (float)((float)((float)(v618 * v621) - (float)(v615 * v619)) - (float)(v616 * v620))
                         + (float)(v622 * v617);
                    v624 = (float)((float)((float)(v618 * v622) - (float)(v616 * v619)) - (float)(v617 * v621))
                         + (float)(v620 * v615);
                    v625 = (float)((float)((float)(v618 * v620) - (float)(v617 * v619)) - (float)(v615 * v622))
                         + (float)(v621 * v616);
                    v626 = (float)((float)((float)(v621 * v615) + (float)(v618 * v619)) + (float)(v616 * v622))
                         + (float)(v617 * v620);
                    v627 = (float *)(v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *v726) << 6));
                    v628 = v627[1];
                    v629 = v627[2];
                    v630 = v623 * *v627;
                    v631 = v624 * v628;
                    v632 = v625 * v629;
                    v633 = sqrtf((float)((float)((float)(v631 * v631) + (float)(v630 * v630)) + (float)(v632 * v632))+ (float)(v626 * v626));
                    if (v633 != 0.0)
                    {
                      v630 = v630 / v633;
                      v631 = v631 / v633;
                      v632 = v632 / v633;
                      v626 = v626 / v633;
                    }
                    v772 = vmax_f32(v667, vmul_f32(v603, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v603), 0), v670, (int8x8_t)v604))).u32[0];
                    v634 = (float)((float)((float)(v628 * v631) + (float)(v630 * *v627)) + (float)(v632 * v629))
                         + (float)(v626 * 0.0);
                    v799.i64[0] = 0;
                    v799.i32[2] = 0;
                    physx::Dy::createImpulseResponseVector((float32x2_t *)&v801, (float32x2_t *)&v799, v682, v785, v570);
                    v797.i64[0] = 0;
                    v797.i32[2] = 0;
                    v635 = -v692[5].f32[0];
                    *(float32x2_t *)v795.f32 = vneg_f32(v692[4]);
                    v795.f32[2] = v635;
                    physx::Dy::createImpulseResponseVector((float32x2_t *)&v799, (float32x2_t *)&v797, v795.f32, v781, v581);
                    *(float *)v636.i32 = physx::Dy::getImpulseResponse((uint64_t *)&v784, (float32x2_t *)&v801, (float32x2_t *)&v797, (uint64_t *)&v780, (float32x2_t *)&v799, (float32x2_t *)&v795, *(float *)v669.i32, v686.n128_f32[0], *(float *)v674.i32, *(float *)v684.i32);
                    v637 = (float32x2_t)vdup_lane_s32(v636, 0);
                    v638 = vadd_f32(v637, v410);
                    v639 = vrecpe_f32(v638);
                    v640 = 4;
                    do
                    {
                      v639 = vmul_f32(v639, vrecps_f32(v638, v639));
                      --v640;
                    }
                    while (v640);
                    v641 = 0.0;
                    if ((float)(v633 + -0.000001) >= 0.0)
                      v641 = v634 / v626;
                    *(float *)v642.i32 = -atanf(v641);
                    v643.i64[0] = 0;
                    v643.i32[2] = 0;
                    v643.i32[3] = vdupq_lane_s32(v642, 0).i32[3];
                    v644.i64[0] = v802.i64[0];
                    v644.i64[1] = v802.u32[2];
                    v513[16] = v643;
                    v513[17] = v644;
                    v644.i64[0] = v800.i64[0];
                    v644.i64[1] = v800.u32[2];
                    v645 = vnegq_f32(v644);
                    v645.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v637, (float32x2_t)0x3400000034000000), 0), (int8x8_t)vmul_f32(v639, v778)).i32[1];
                    v513[18] = v645;
                    v513[19].f32[0] = v688;
                    v513[19].i32[1] = 0;
                    v389.i64[0] = v797.i64[0];
                    v387.i64[0] = v798.i64[0];
                    v389.i32[2] = v797.i32[2];
                    v513[19].i32[2] = v772;
                    v389.i64[1] = v389.u32[2];
                    v646.i64[0] = v795.i64[0];
                    v643.i64[0] = v796.i64[0];
                    v646.i64[1] = v795.u32[2];
                    v513[20] = v389;
                    v513[21] = v646;
                    v387.i64[1] = v798.u32[2];
                    v643.i64[1] = v796.u32[2];
                    v513[22] = (float32x4_t)v387;
                    v513[23] = v643;
                    _X12 = (char *)&v513[24];
                  }
                }
              }
              ++v694;
              v382 = *(unsigned int *)(v378 + 7688);
              a4 = v678;
              v388.i64[1] = v690;
            }
            ++v383;
          }
          while (v383 < v382);
        }
      }
      else
      {
        v76 = *(_QWORD *)(v33 + 56);
        v75 = *(_QWORD *)(v33 + 64);
        _Q0.n128_u32[0] = *(_DWORD *)(v33 + 216);
        v650 = *(float *)(v33 + 212);
        v77 = v650 > 0.0;
        if (_Q0.n128_f32[0] > 0.0)
          v77 = 1;
        v651 = v77;
        if (v773)
          v78 = 5;
        else
          v78 = 1;
        v665 = v78;
        v79 = *(float *)(v76 + 28);
        if (v79 <= *(float *)(v75 + 28))
          v79 = *(float *)(v75 + 28);
        v664 = v79;
        _X8 = a2 + 7556;
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X26]
        }
        v83 = 0.0;
        if (!v26)
          v83 = a4;
        v732 = v83;
        v84 = *(unsigned int *)(a2 + 7688);
        if ((_DWORD)v84)
        {
          v85 = 0;
          v86 = 0;
          v87 = *(_QWORD *)(v33 + 144);
          v661 = *(_QWORD *)(v33 + 136);
          v88 = *(_QWORD *)(v33 + 40);
          v90 = *(float32x2_t *)v33;
          v89 = *(float32x2_t *)(v33 + 8);
          v662 = v89.i32[1];
          v663 = HIDWORD(*(_QWORD *)v33);
          v91 = *(float32x2_t *)(v33 + 160);
          v92 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 24) + 62);
          v93 = vmul_n_f32(vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v89, 0)), COERCE_FLOAT(*(_QWORD *)(v75 + 32)));
          v94 = *(int32x4_t *)(v33 + 72);
          v95 = *(float32x4_t *)(v33 + 88);
          v95.i64[1] = *(unsigned int *)(v33 + 96);
          v96 = *(float32x4_t *)(v33 + 116);
          v96.i64[1] = *(unsigned int *)(v33 + 124);
          v98 = *(float32x4_t *)v76;
          v97 = *(float32x4_t *)(v76 + 16);
          v98.i32[3] = 0;
          v100 = *(float32x4_t *)v75;
          v99 = *(int8x16_t *)(v75 + 16);
          v100.i32[3] = 0;
          v97.i32[3] = 0;
          v99.i32[3] = 0;
          v751 = (float32x4_t)v99;
          v755 = v97;
          v101 = *(int32x4_t *)(v33 + 100);
          v102 = *(float32x4_t *)(v88 + 28);
          v102.i32[3] = 0;
          v774 = v102;
          v103 = *(float32x4_t *)(v88 + 40);
          v648 = *(_QWORD *)(v33 + 48);
          v649 = (float *)v88;
          v99.i32[0] = v103.i32[3];
          v103.i32[3] = 0;
          v99.i32[1] = *(_DWORD *)(v88 + 56);
          v99.i32[2] = *(_DWORD *)(v88 + 60);
          v766 = (float32x4_t)v99;
          v769 = v103;
          v104 = *(float32x4_t *)(v648 + 28);
          v104.i32[3] = 0;
          v763 = v104;
          v105 = *(int8x16_t *)(v648 + 40);
          v99.i32[0] = v105.i32[3];
          v105.i32[3] = 0;
          v99.i32[1] = *(_DWORD *)(v648 + 56);
          v99.i32[2] = *(_DWORD *)(v648 + 60);
          v757 = (float32x4_t)v99;
          v759 = (float32x4_t)v105;
          v106 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          v99.i64[0] = 0;
          v99.i32[2] = 0;
          v99.i32[3] = v93.i32[1];
          v105.i64[0] = 0;
          LODWORD(v660) = vmul_f32(*(float32x2_t *)v33, *(float32x2_t *)(v76 + 32)).u32[0];
          *(float *)&v105.i32[2] = v660;
          v675 = vorrq_s8(v99, v105);
          v107 = a4 * -0.8;
          v108 = v95;
          v109 = (int8x16_t)v94;
          v109.i32[3] = 0;
          v703 = (float32x4_t)vdupq_laneq_s32(v94, 3);
          LODWORD(v699) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v703.f32, *(float32x2_t *)v703.f32).u32[0];
          v110 = (int8x16_t)v101;
          v111 = vdupq_laneq_s32(v101, 3);
          LODWORD(v701) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8).u32[0];
          _X22 = v656;
          v110.i32[3] = 0;
          v647 = (float32x2_t)vdup_lane_s32((int32x2_t)_Q0.n128_u64[0], 0);
          v113 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 32) + 62);
          v659 = v93;
          v658 = -v93.f32[0];
          v654 = v100;
          v655 = v98;
          v653 = vsubq_f32(v98, v100);
          v736 = v89;
          v739 = v96;
          v693 = vsubq_f32(v108, v96);
          v695 = (float32x4_t)v111;
          v705 = (float32x4_t)v109;
          v708 = *(float32x2_t *)v101.i8;
          v712 = *(float32x2_t *)v94.i8;
          v691 = (float32x2_t)vextq_s8(v109, v109, 8uLL).u64[0];
          v689 = (float32x2_t)vext_s8(*(int8x8_t *)v94.i8, (int8x8_t)v691, 4uLL);
          v697 = (float32x4_t)v110;
          v687 = (float32x2_t)vextq_s8(v110, v110, 8uLL).u64[0];
          v685 = (float32x2_t)vext_s8(*(int8x8_t *)v101.i8, (int8x8_t)v687, 4uLL);
          v666 = v87;
          v734 = *(float32x2_t *)v33;
          v730 = v108;
          while (1)
          {
            v114 = a2 + 4 * v85;
            v115 = *(_DWORD *)(v114 + 7296);
            if (v115)
              break;
LABEL_141:
            if (++v85 >= v84)
              goto LABEL_248;
          }
          v116 = *(_DWORD *)(v114 + 7424);
          v117 = (float32x2_t *)(v87 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * v116) << 6));
          v118 = (const float *)&v117[7] + 1;
          v119 = (float32x4_t *)(_X22 + 80);
          __asm { PRFM            #0, [X22,#0xD0] }
          v121 = vld1_dup_f32(v118);
          __asm { PRFM            #0, [X22,#0x150] }
          *((_QWORD *)_X22 + 9) = v661;
          _X22[1] = v671;
          *((float *)_X22 + 3) = v660;
          *((float *)_X22 + 12) = v658;
          *(float32x2_t *)v38.f32 = *v117;
          v123 = v38;
          v123.i32[1] = HIDWORD(*(unint64_t *)v117);
          v123.i32[3] = 0;
          v124 = v123;
          v124.i32[2] = v117[1].i32[0];
          v125 = vmulq_f32(v124, v124);
          v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
          *(float32x2_t *)v125.f32 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
          v126 = vmul_n_f32(*(float32x2_t *)v125.f32, v660);
          v127 = vmul_f32(v659, *(float32x2_t *)v125.f32);
          v668 = *v117;
          *((float32x2_t *)_X22 + 4) = *v117;
          *((_DWORD *)_X22 + 10) = v124.i32[2];
          *((float *)_X22 + 11) = v664;
          v742 = *(float32x2_t *)v123.f32;
          v748 = v124;
          v673 = v86;
          if (v116 == 0xFFFF)
          {
            v128 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          }
          else
          {
            v129 = vmulq_f32(v655, v124);
            v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
            v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
            v131 = vmulq_f32(v654, v124);
            v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
            v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
            v133 = (float32x2_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL).u64[0];
            v134 = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL));
            v128 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            v135 = vneg_f32(*(float32x2_t *)v123.f32);
            _X9 = (float32x4_t *)(_X22 + 80);
            do
            {
              v137 = (unsigned __int16 *)(a2 + 44 * v116);
              v138 = *((unsigned __int8 *)v137 + 5);
              if (*((_BYTE *)v137 + 5))
              {
                v139 = 0;
                v140 = v87 + ((unint64_t)*v137 << 6);
                do
                {
                  __asm { PRFM            #0, [X9,#0x100] }
                  v142 = v140 + (v139 << 6);
                  v143.i64[0] = *(_QWORD *)(v142 + 16);
                  v143.i64[1] = *(unsigned int *)(v142 + 24);
                  v144 = *(float32x2_t *)(v142 + 12);
                  v145.i64[0] = *(_QWORD *)(v142 + 32);
                  v146 = *(_DWORD *)(v142 + 40);
                  v147 = (int8x16_t)vsubq_f32(v143, v108);
                  v148 = (int8x16_t)vsubq_f32(v143, v739);
                  v149 = (int8x8_t)vmla_f32(vmul_f32(v742, (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)), *(float32x2_t *)v147.i8, v134);
                  v150 = vmla_f32(vmul_f32(v133, *(float32x2_t *)v147.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 4uLL), v135);
                  v151 = vmla_f32(vmul_f32(v133, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 4uLL), v135);
                  v152 = vmulq_lane_f32(v774, v150, 1);
                  v152.i32[3] = 0;
                  v153 = vmulq_n_f32(v769, *(float *)v149.i32);
                  v153.i32[3] = 0;
                  v154 = (int8x8_t)vmla_f32(vmul_f32(v742, (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL)), *(float32x2_t *)v148.i8, v134);
                  v155 = vmulq_n_f32(v766, v150.f32[0]);
                  v155.i32[3] = 0;
                  v156 = vaddq_f32(vaddq_f32(v152, v153), v155);
                  v157 = vmulq_lane_f32(v763, v151, 1);
                  v157.i32[3] = 0;
                  v158 = vmulq_n_f32(v759, *(float *)v154.i32);
                  v158.i32[3] = 0;
                  v159 = vmulq_n_f32(v757, v151.f32[0]);
                  v159.i32[3] = 0;
                  v160 = vaddq_f32(vaddq_f32(v157, v158), v159);
                  v161 = vmulq_f32(v156, v156);
                  v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
                  v162 = vmulq_f32(v160, v160);
                  v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
                  v163 = vadd_f32(vadd_f32(v126, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32), v90, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32), v89, 1), v127));
                  v164 = vrecpe_f32(v163);
                  v165 = 4;
                  do
                  {
                    v166 = vrecps_f32(v163, v164);
                    v164 = vmul_f32(v164, v166);
                    --v165;
                  }
                  while (v165);
                  v166.i32[0] = 0;
                  v39.i32[0] = v113;
                  v39 = (float32x2_t)vdup_lane_s8(vceq_s8((int8x8_t)v39, (int8x8_t)v166), 0);
                  *(int8x8_t *)v167.f32 = vext_s8((int8x8_t)v151, v154, 4uLL);
                  v167.i64[1] = v151.u32[0];
                  v168 = vmulq_f32(v751, v167);
                  v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
                  *(float32x2_t *)v168.f32 = vadd_f32(v132, vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32));
                  v169 = (float32x2_t)vbsl_s8((int8x8_t)v39, (int8x8_t)0x8000000080000000, *(int8x8_t *)v168.f32);
                  *(int8x8_t *)v170.f32 = vext_s8((int8x8_t)v150, v149, 4uLL);
                  v170.i64[1] = v150.u32[0];
                  v171 = vmulq_f32(v755, v170);
                  v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
                  *(float32x2_t *)v171.f32 = vadd_f32(v130, vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32));
                  v172 = (float32x2_t)vbsl_s8(vdup_lane_s8(vceq_s8((int8x8_t)__PAIR64__(v751.u32[1], v92), (int8x8_t)v166), 0), 0, *(int8x8_t *)v171.f32);
                  v119 = _X9 + 3;
                  v173 = vsub_f32(v144, v91);
                  *(float32x2_t *)v171.f32 = vsub_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v168.f32);
                  *(float32x2_t *)v168.f32 = vneg_f32(*(float32x2_t *)v171.f32);
                  v145.i64[1] = v146;
                  v174 = vmulq_f32(v748, v145);
                  v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
                  v156.i32[3] = v173.i32[0];
                  v160.i32[3] = vand_s8((int8x8_t)v164, (int8x8_t)vcgtz_f32(v163)).u32[0];
                  *_X9 = v156;
                  _X9[1] = v160;
                  _X9[2].i32[0] = vadd_f32(v169, vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32), (float32x2_t)vbsl_s8(vand_s8(vand_s8((int8x8_t)vcgt_f32(v106, *(float32x2_t *)v171.f32), (int8x8_t)vcgtz_f32(v121)), (int8x8_t)vcgt_f32(*(float32x2_t *)v168.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)&a5, v173), 0))), (int8x8_t)vmul_f32(v121, *(float32x2_t *)v168.f32), 0)), v172)).u32[0];
                  _X9[2].f32[1] = v107;
                  v128 = vmin_f32(v128, (float32x2_t)vdup_lane_s32((int32x2_t)v173, 0));
                  ++v139;
                  _X9 += 3;
                }
                while (v139 != v138);
              }
              else
              {
                v119 = _X9;
              }
              v116 = *(unsigned __int16 *)(a2 + 44 * v116 + 2);
              _X9 = v119;
            }
            while (v116 != 0xFFFF);
          }
          bzero(v119, (4 * v115));
          _X25 = &v119->i8[4 * ((v115 + 3) & 0xFFFFFFFC)];
          v177 = v117[6].i8[0];
          v176 = v117 + 6;
          v178 = (const float *)&v176[1];
          v180.i64[1] = v675.i64[1];
          v180.i32[0] = v176[-1].i32[1];
          v179 = vld1q_dup_f32(v178);
          v180.i32[1] = v179.i32[1];
          if ((v177 & 1) != 0)
          {
            _X22[2] = v115;
            v183 = v673;
          }
          else
          {
            v181 = a2 + 104 * v85;
            v182 = *(unsigned __int16 *)(v181 + 2818);
            _X22[2] = v115;
            v183 = v673;
            if (v182)
            {
              v184 = (unsigned int *)(a2 + 4 * v85 + 7424);
              v185 = (_WORD *)(v181 + 2818);
              _X22[3] = 2 * v182;
              *_X22 = v665;
              *((int8x16_t *)_X22 + 1) = v180;
              *((_DWORD *)_X22 + 1) = v663;
              *((_DWORD *)_X22 + 2) = v662;
              *(int32x2_t *)v180.i8 = vdup_lane_s32((int32x2_t)v668, 1);
              *((_DWORD *)_X22 + 14) = 0;
              v38.i64[1] = 0;
              *(int8x8_t *)v186.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v748, 2)), 4uLL);
              v186.i64[1] = v180.u32[0];
              *(int8x8_t *)v180.i8 = vext_s8((int8x8_t)vneg_f32(*(float32x2_t *)v180.i8), (int8x8_t)v668, 4uLL);
              v187 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32((float32x2_t)vdup_n_s32(0x3F3504F3u), vabs_f32((float32x2_t)vdup_lane_s32((int32x2_t)v668, 0))), 0), 0x1FuLL)), v186, v180);
              v188 = vmulq_f32(v653, v748);
              v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
              v189 = vmulq_n_f32(v748, vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32).f32[0]);
              v189.i32[3] = 0;
              v190 = vsubq_f32(v653, v189);
              v191 = vmulq_f32(v190, v190);
              v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
              v192 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32), (float32x2_t)vdup_n_s32(0x38D1B717u)), 0), (int8x16_t)v190, v187);
              v193 = vmulq_f32(v192, v192);
              v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
              v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
              v195 = vrsqrte_f32(v194);
              v196 = 4;
              v87 = v666;
              v90 = v734;
              v89 = v736;
              v108 = v730;
              do
              {
                v195 = vmul_f32(v195, vrsqrts_f32(vmul_f32(v195, v195), v194));
                --v196;
              }
              while (v196);
              v197 = vmul_f32(v194, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v194), 0), v670, (int8x8_t)v195));
              v198 = vrecpe_f32(v197);
              v199 = 4;
              do
              {
                v198 = vmul_f32(v198, vrecps_f32(v197, v198));
                --v199;
              }
              while (v199);
              v200 = (float32x2_t)vextq_s8((int8x16_t)v748, (int8x16_t)v748, 8uLL).u64[0];
              v201 = vmulq_n_f32(v192, v198.f32[0]);
              v202 = v201;
              v202.i32[3] = 0;
              v203 = (float32x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
              v727 = (float32x2_t)vext_s8(*(int8x8_t *)v201.f32, (int8x8_t)v203, 4uLL);
              v724 = vneg_f32(v203);
              v204 = (int8x8_t)vmls_f32(vmul_f32(v742, v727), (float32x2_t)vext_s8((int8x8_t)v742, (int8x8_t)v200, 4uLL), *(float32x2_t *)v201.f32);
              *(int8x8_t *)v205.f32 = vext_s8(v204, (int8x8_t)vmls_f32(vmul_f32(v200, *(float32x2_t *)v201.f32), v742, v203), 4uLL);
              v205.i64[1] = v204.u32[0];
              v743 = v201;
              v721 = vneg_f32(*(float32x2_t *)v201.f32);
              v206 = vpadd_f32(vmul_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32), vmul_f32((float32x2_t)v204.u32[0], (float32x2_t)v204.u32[0]));
              v207 = vpadd_f32(v206, v206);
              v208 = vrsqrte_f32(v207);
              v209 = 4;
              do
              {
                v208 = vmul_f32(v208, vrsqrts_f32(vmul_f32(v208, v208), v207));
                --v209;
              }
              while (v209);
              v210 = vmul_f32(v207, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v207), 0), v670, (int8x8_t)v208));
              v211 = vrecpe_f32(v210);
              v212 = 4;
              do
              {
                v211 = vmul_f32(v211, vrecps_f32(v210, v211));
                --v212;
              }
              while (v212);
              *((_QWORD *)_X22 + 8) = v657 + 104 * v673;
              v213 = 0.5;
              if (*v185 != 2)
                v213 = 1.0;
              if ((v176->i8[0] & 4) != 0)
                v214 = v213;
              else
                v214 = 1.0;
              if (*v185)
              {
                v215 = 0;
                v216 = vmulq_n_f32(v205, v211.f32[0]);
                v217 = v216;
                v217.i32[3] = 0;
                v218 = vmulq_f32(v655, v202);
                v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
                v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
                v220 = vmulq_f32(v654, v202);
                v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
                v681 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
                v683 = v219;
                v221 = vmulq_f32(v655, v217);
                v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
                v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
                v223 = vmulq_f32(v654, v217);
                v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
                v677 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
                v679 = v222;
                v223.i64[0] = vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
                v718 = (float32x2_t)vext_s8(*(int8x8_t *)v216.f32, *(int8x8_t *)v223.f32, 4uLL);
                v715 = vneg_f32(*(float32x2_t *)v223.f32);
                v713 = vneg_f32(*(float32x2_t *)v216.f32);
                do
                {
                  v224 = (float32x4_t *)_X25;
                  __asm
                  {
                    PRFM            #0, [X25,#0x100]
                    PRFM            #0, [X25,#0x180]
                  }
                  v227 = *(unsigned __int16 *)(a2 + 4 * v85 + 2 * v215 + 7556);
                  if (v227 == 0xFFFF)
                    v227 = *(unsigned __int16 *)(a2 + 44 * *v184);
                  v228 = a2 + 104 * v85 + 12 * v215;
                  v229.i64[0] = *(_QWORD *)(v228 + 2856);
                  v229.i64[1] = *(unsigned int *)(v228 + 2864);
                  v230.i64[0] = *(_QWORD *)(v228 + 2880);
                  v230.i64[1] = *(unsigned int *)(v228 + 2888);
                  v231 = vmulq_n_f32(v229, v699);
                  v231.i32[3] = 0;
                  v232 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
                  v233 = (int8x8_t)vmls_f32(vmul_f32(v712, (float32x2_t)vext_s8(*(int8x8_t *)v229.f32, (int8x8_t)v232, 4uLL)), v689, *(float32x2_t *)v229.f32);
                  *(int8x8_t *)v234.f32 = vext_s8(v233, (int8x8_t)vmls_f32(vmul_f32(v691, *(float32x2_t *)v229.f32), v712, v232), 4uLL);
                  v234.i64[1] = v233.u32[0];
                  v235 = vmlaq_f32(v231, v703, v234);
                  v235.i64[1] = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u32[0];
                  v236 = vmulq_f32(v705, v229);
                  v236.i64[0] = vpaddq_f32(v236, v236).u64[0];
                  v237 = vmlaq_n_f32(v235, v705, vpadd_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32).f32[0]);
                  v238 = vaddq_f32(v237, v237);
                  v239 = v238;
                  v239.i32[3] = 0;
                  v240 = vmulq_n_f32(v230, v701);
                  v240.i32[3] = 0;
                  v229.i64[0] = vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL).u64[0];
                  *(float32x2_t *)v237.f32 = vmls_f32(vmul_f32(v708, (float32x2_t)vext_s8(*(int8x8_t *)v230.f32, *(int8x8_t *)v229.f32, 4uLL)), v685, *(float32x2_t *)v230.f32);
                  *(int8x8_t *)v229.f32 = vext_s8(*(int8x8_t *)v237.f32, (int8x8_t)vmls_f32(vmul_f32(v687, *(float32x2_t *)v230.f32), v708, *(float32x2_t *)v229.f32), 4uLL);
                  v229.i64[1] = v237.u32[0];
                  v241 = vmlaq_f32(v240, v695, v229);
                  v241.i64[1] = vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u32[0];
                  _X25 += 128;
                  v242 = vmulq_f32(v697, v230);
                  v242.i64[0] = vpaddq_f32(v242, v242).u64[0];
                  v243 = vmlaq_n_f32(v241, v697, vpadd_f32(*(float32x2_t *)v242.f32, *(float32x2_t *)v242.f32).f32[0]);
                  v244 = vaddq_f32(v243, v243);
                  v245 = v244;
                  v245.i32[3] = 0;
                  v246 = v666 + ((unint64_t)v227 << 6);
                  v247.i64[0] = *(_QWORD *)(v246 + 32);
                  v248 = *(_DWORD *)(v246 + 40);
                  v249 = (float32x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
                  v250 = (float32x2_t)vext_s8(*(int8x8_t *)v238.f32, (int8x8_t)v249, 4uLL);
                  v251 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v743.f32, v249), *(float32x2_t *)v238.f32, v724);
                  v252 = vmla_f32(vmul_f32(v727, *(float32x2_t *)v238.f32), v250, v721);
                  v253 = v252.u32[0];
                  v254 = (float32x2_t)vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u64[0];
                  v39 = (float32x2_t)vext_s8(*(int8x8_t *)v244.f32, (int8x8_t)v254, 4uLL);
                  v255 = vmla_f32(vmul_f32(v727, *(float32x2_t *)v244.f32), v39, v721);
                  v256 = vmulq_lane_f32(v774, v252, 1);
                  v256.i32[3] = 0;
                  v257 = vmulq_n_f32(v769, *(float *)v251.i32);
                  v257.i32[3] = 0;
                  v258 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v743.f32, v254), *(float32x2_t *)v244.f32, v724);
                  v259 = vmulq_n_f32(v766, v252.f32[0]);
                  v259.i32[3] = 0;
                  v260 = vaddq_f32(vaddq_f32(v256, v257), v259);
                  v261 = vmulq_lane_f32(v763, v255, 1);
                  v261.i32[3] = 0;
                  v262 = vmulq_n_f32(v759, *(float *)v258.i32);
                  v262.i32[3] = 0;
                  v263 = vmulq_n_f32(v757, v255.f32[0]);
                  v263.i32[3] = 0;
                  v264 = vaddq_f32(vaddq_f32(v261, v262), v263);
                  v265 = vmulq_f32(v260, v260);
                  v265.i64[0] = vpaddq_f32(v265, v265).u64[0];
                  v266 = vmulq_f32(v264, v264);
                  v266.i64[0] = vpaddq_f32(v266, v266).u64[0];
                  v267 = vadd_f32(vadd_f32(v126, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32), v734, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v266.f32, *(float32x2_t *)v266.f32), v736, 1), v127));
                  v268 = vrecpe_f32(v267);
                  v269 = 4;
                  do
                  {
                    v268 = vmul_f32(v268, vrecps_f32(v267, v268));
                    --v269;
                  }
                  while (v269);
                  v247.i64[1] = v248;
                  v270 = vmulq_f32(v202, v247);
                  v38 = vpaddq_f32(v270, v270);
                  *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
                  if (v92)
                  {
                    *(int8x8_t *)v271.f32 = vext_s8((int8x8_t)v252, v251, 4uLL);
                    v271.i64[1] = v253;
                    v272 = vmulq_f32(v755, v271);
                    v272.i64[0] = vpaddq_f32(v272, v272).u64[0];
                    *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)v38.f32, vadd_f32(v683, vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v272.f32)));
                  }
                  v273 = vaddq_f32(v693, vsubq_f32(v239, v245));
                  v274 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
                  v275 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v267), 0), (int8x8_t)vmul_f32(v268, v274));
                  if (v113)
                  {
                    *(int8x8_t *)v276.f32 = vext_s8((int8x8_t)v255, v258, 4uLL);
                    v276.i64[1] = v255.u32[0];
                    v277 = vmulq_f32(v751, v276);
                    v277.i64[0] = vpaddq_f32(v277, v277).u64[0];
                    *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, vadd_f32(v681, vpadd_f32(*(float32x2_t *)v277.f32, *(float32x2_t *)v277.f32)));
                  }
                  v90 = v734;
                  v278 = vmulq_f32(v202, v273);
                  v278.i64[0] = vpaddq_f32(v278, v278).u64[0];
                  v279 = v743;
                  v279.i32[3] = vpadd_f32(*(float32x2_t *)&v278, *(float32x2_t *)&v278).i32[1];
                  v260.i32[3] = v38.i32[1];
                  *v224 = v279;
                  v224[1] = v260;
                  v264.i32[3] = v275.i32[1];
                  v224[2] = v264;
                  v224[3].i32[1] = 0;
                  v224[3].f32[2] = v214;
                  v224[3].f32[0] = v732;
                  v280 = vmulq_f32(v217, v247);
                  v281 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v216.f32, v249), *(float32x2_t *)v238.f32, v715);
                  v282 = vmla_f32(vmul_f32(v718, *(float32x2_t *)v238.f32), v250, v713);
                  v283 = vmla_f32(vmul_f32(v718, *(float32x2_t *)v244.f32), v39, v713);
                  v284 = v283.u32[0];
                  v285 = vmulq_lane_f32(v774, v282, 1);
                  v285.i32[3] = 0;
                  v286 = vmulq_n_f32(v769, *(float *)v281.i32);
                  v286.i32[3] = 0;
                  v287 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v216.f32, v254), *(float32x2_t *)v244.f32, v715);
                  v288 = vmulq_n_f32(v766, v282.f32[0]);
                  v288.i32[3] = 0;
                  v289 = vaddq_f32(vaddq_f32(v285, v286), v288);
                  v290 = vmulq_lane_f32(v763, v283, 1);
                  v290.i32[3] = 0;
                  v291 = vmulq_n_f32(v759, *(float *)v287.i32);
                  v291.i32[3] = 0;
                  v292 = vmulq_n_f32(v757, v283.f32[0]);
                  v292.i32[3] = 0;
                  v293 = vaddq_f32(vaddq_f32(v290, v291), v292);
                  v294 = vmulq_f32(v289, v289);
                  v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
                  v295 = vmulq_f32(v293, v293);
                  v295.i64[0] = vpaddq_f32(v295, v295).u64[0];
                  v89 = v736;
                  v296 = vadd_f32(vadd_f32(v126, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32), v734, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v295.f32, *(float32x2_t *)v295.f32), v736, 1), v127));
                  v297 = vrecpe_f32(v296);
                  v298 = 4;
                  do
                  {
                    v297 = vmul_f32(v297, vrecps_f32(v296, v297));
                    --v298;
                  }
                  while (v298);
                  v299 = (float32x2_t)vpaddq_f32(v280, v280).u64[0];
                  v300 = vpadd_f32(v299, v299);
                  v108 = v730;
                  if (v92)
                  {
                    *(int8x8_t *)v301.f32 = vext_s8((int8x8_t)v282, v281, 4uLL);
                    v301.i64[1] = v282.u32[0];
                    v302 = vmulq_f32(v755, v301);
                    v38 = vpaddq_f32(v302, v302);
                    v300 = vsub_f32(v300, vadd_f32(v679, vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32)));
                  }
                  if (v113)
                  {
                    *(int8x8_t *)v303.f32 = vext_s8((int8x8_t)v283, v287, 4uLL);
                    v303.i64[1] = v284;
                    v304 = vmulq_f32(v751, v303);
                    v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
                    v300 = vadd_f32(v300, vadd_f32(v677, vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32)));
                  }
                  v305 = vmulq_f32(v217, v273);
                  v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
                  v306 = v216;
                  v306.i32[3] = vpadd_f32(*(float32x2_t *)&v305, *(float32x2_t *)&v305).i32[1];
                  v289.i32[3] = v300.i32[1];
                  v224[4] = v306;
                  v224[5] = v289;
                  v293.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v296), 0), (int8x8_t)vmul_f32(v297, v274)).i32[1];
                  v224[6] = v293;
                  v224[7].i32[1] = 0;
                  v224[7].f32[2] = v214;
                  v224[7].f32[0] = v732;
                  ++v215;
                  v307 = (unsigned __int16)*v185;
                }
                while (v215 < v307);
                v308 = v651;
                if ((_DWORD)v307 != 1)
                  v308 = 0;
                if (v308)
                {
                  *(float32x2_t *)v217.f32 = vmul_n_f32(vmax_f32(vneg_f32(v128), 0), v650);
                  v309 = vrsqrte_f32(*(float32x2_t *)v217.f32);
                  v310 = 4;
                  do
                  {
                    v309 = vmul_f32(v309, vrsqrts_f32(vmul_f32(v309, v309), *(float32x2_t *)v217.f32));
                    --v310;
                  }
                  while (v310);
                  ++_X22[3];
                  v311 = (float *)(a2 + 104 * v85);
                  v312 = v311[726];
                  v313 = v311[729];
                  v314 = v649[1];
                  v316 = v649[2];
                  v315 = v649[3];
                  v317 = v311[728];
                  v318 = v311[727];
                  v319 = (float)((float)((float)(v313 * *v649) + (float)(v315 * v312)) + (float)(v314 * v317))
                       - (float)(v318 * v316);
                  v320 = (float)((float)((float)(v313 * v314) + (float)(v315 * v318)) + (float)(v316 * v312))
                       - (float)(v317 * *v649);
                  v321 = (float)((float)((float)(v313 * v316) + (float)(v315 * v317)) + (float)(*v649 * v318))
                       - (float)(v312 * v314);
                  v322 = (float)((float)((float)(v315 * v313) - (float)(*v649 * v312)) - (float)(v314 * v318))
                       - (float)(v316 * v317);
                  v324 = *(float *)(v648 + 8);
                  v323 = *(float *)(v648 + 12);
                  v325 = *(float *)(v648 + 4);
                  v326 = (float)((float)((float)(v322 * *(float *)v648) - (float)(v319 * v323)) - (float)(v320 * v324))
                       + (float)(v325 * v321);
                  v327 = (float)((float)((float)(v322 * v325) - (float)(v320 * v323)) - (float)(v321 * *(float *)v648))
                       + (float)(v324 * v319);
                  v328 = (float)((float)((float)(v322 * v324) - (float)(v321 * v323)) - (float)(v319 * v325))
                       + (float)(*(float *)v648 * v320);
                  v329 = (float)((float)((float)(*(float *)v648 * v319) + (float)(v322 * v323)) + (float)(v320 * v325))
                       + (float)(v321 * v324);
                  v330 = (float *)(v666 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *v184) << 6));
                  v331 = v330[1];
                  v332 = v330[2];
                  v333 = v326 * *v330;
                  v334 = v327 * v331;
                  v335 = v328 * v332;
                  v336 = sqrtf((float)((float)((float)(v334 * v334) + (float)(v333 * v333)) + (float)(v335 * v335))+ (float)(v329 * v329));
                  if (v336 != 0.0)
                  {
                    v333 = v333 / v336;
                    v334 = v334 / v336;
                    v335 = v335 / v336;
                    v329 = v329 / v336;
                  }
                  v337 = v274;
                  *(float32x2_t *)v217.f32 = vmax_f32(v647, vmul_f32(*(float32x2_t *)v217.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v217.f32), 0), v670, (int8x8_t)v309)));
                  v744 = v217;
                  _X25 = (char *)&v224[12];
                  v338 = (float)((float)((float)(v331 * v334) + (float)(v333 * *v330)) + (float)(v335 * v332))
                       + (float)(v329 * 0.0);
                  v339 = vmulq_n_f32(v774, v668.f32[0]);
                  v339.i32[3] = 0;
                  v340 = vmulq_lane_f32(v769, v668, 1);
                  v340.i32[3] = 0;
                  v341 = vmulq_laneq_f32(v766, v748, 2);
                  v341.i32[3] = 0;
                  v342 = vaddq_f32(vaddq_f32(v339, v340), v341);
                  v343 = vmulq_n_f32(v763, v668.f32[0]);
                  v343.i32[3] = 0;
                  v344 = vmulq_lane_f32(v759, v668, 1);
                  v344.i32[3] = 0;
                  v345 = vmulq_laneq_f32(v757, v748, 2);
                  v345.i32[3] = 0;
                  v725 = vaddq_f32(vaddq_f32(v343, v344), v345);
                  v728 = v342;
                  v346 = vmulq_f32(v342, v342);
                  v346.i64[0] = vpaddq_f32(v346, v346).u64[0];
                  v347 = vmulq_f32(v725, v725);
                  v347.i64[0] = vpaddq_f32(v347, v347).u64[0];
                  v348 = vadd_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v346.f32, *(float32x2_t *)v346.f32), v734, 1), vmul_lane_f32(vpadd_f32(*(float32x2_t *)v347.f32, *(float32x2_t *)v347.f32), v736, 1));
                  v349 = vrecpe_f32(v348);
                  v350 = 4;
                  do
                  {
                    v349 = vmul_f32(v349, vrecps_f32(v348, v349));
                    --v350;
                  }
                  while (v350);
                  v351 = v338 / v329;
                  if ((float)(v336 + -0.000001) < 0.0)
                    v351 = 0.0;
                  *(float *)v352.i32 = atanf(v351);
                  if (v92)
                  {
                    v353 = v748;
                    v354 = vmulq_f32(v755, v748);
                    v354.i64[0] = vpaddq_f32(v354, v354).u64[0];
                    v355 = vpadd_f32(*(float32x2_t *)v354.f32, *(float32x2_t *)v354.f32);
                    v183 = v673;
                    v87 = v666;
                    v90 = v734;
                    v89 = v736;
                  }
                  else
                  {
                    v355.i32[1] = 0;
                    v183 = v673;
                    v87 = v666;
                    v90 = v734;
                    v89 = v736;
                    v353 = v748;
                  }
                  v38.i64[1] = v744.i64[1];
                  v357 = v725;
                  v356 = v728;
                  if (v113)
                  {
                    v358 = vmulq_f32(v751, v353);
                    v358.i64[0] = vpaddq_f32(v358, v358).u64[0];
                    v355 = vpadd_f32(*(float32x2_t *)v358.f32, *(float32x2_t *)v358.f32);
                  }
                  *(float *)v352.i32 = -*(float *)v352.i32;
                  v359.i64[0] = 0;
                  v359.i32[2] = 0;
                  v359.i32[3] = vdupq_lane_s32(v352, 0).i32[3];
                  v356.i32[3] = v355.i32[1];
                  v224[8] = v359;
                  v224[9] = v356;
                  v357.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v348), 0), (int8x8_t)vmul_f32(v349, v337)).i32[1];
                  v224[10] = v357;
                  v224[11].f32[0] = v732;
                  v224[11].i32[1] = 0;
                  v224[11].i32[2] = v744.i32[0];
                  v108 = v730;
                }
              }
              goto LABEL_140;
            }
          }
          _X22[3] = 0;
          *_X22 = v665;
          *((int8x16_t *)_X22 + 1) = v180;
          *((_DWORD *)_X22 + 1) = v663;
          *((_DWORD *)_X22 + 2) = v662;
          *((_DWORD *)_X22 + 14) = 0;
          v87 = v666;
          v90 = v734;
          v89 = v736;
          v108 = v730;
LABEL_140:
          v86 = v183 + 1;
          v84 = *(unsigned int *)(a2 + 7688);
          _X22 = _X25;
          goto LABEL_141;
        }
      }
LABEL_248:
      *(_DWORD *)&v656[v652] = 0;
    }
    return 1;
  }
  v41 = 0;
  v42 = 0;
  _Q0.n128_u32[0] = *(_DWORD *)(v33 + 212);
  if (_Q0.n128_f32[0] <= *(float *)(v33 + 216))
    _Q0.n128_u32[0] = *(_DWORD *)(v33 + 216);
  if ((v31 & 8) != 0)
    v43 = 112;
  else
    v43 = 48;
  if ((v31 & 8) != 0)
    v44 = 7;
  else
    v44 = 6;
  v45 = (unsigned __int16 *)(a2 + 2818);
  v46 = (_DWORD *)(a2 + 7424);
  do
  {
    if (*v46 != 0xFFFF)
      ++v42;
    v47 = *(v46 - 32);
    if (v47)
    {
      v41 += v47 * v43 + ((4 * v47 + 12) & 0xFFFFFFF0) + 80;
      if ((*((_BYTE *)v45 - 1) & 1) == 0)
      {
        v48 = *v45;
        v50 = _Q0.n128_f32[0] > 0.0 && v48 == 1;
        v41 += (v50 | (2 * v48)) << v44;
      }
    }
    ++v46;
    v45 += 52;
    --v40;
  }
  while (v40);
  v51 = (104 * v42 + 15) & 0xFFFFFFF0;
  v52 = (v41 + 15) & 0xFFFFFFF0;
  if (v52)
  {
    v53 = (**(uint64_t (***)(uint64_t, _QWORD, __n128))a3)(a3, v52 + 16, _Q0);
    if (v53 == -1)
      v54 = 0;
    else
      v54 = v53;
  }
  else
  {
    v54 = 0;
  }
  if (v52)
    v57 = v54 == 0;
  else
    v57 = 0;
  v58 = !v57;
  if (v51)
    v59 = v58 == 0;
  else
    v59 = 1;
  if (v59)
  {
    _X14 = 0;
  }
  else
  {
    v60 = v54;
    v61 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, (104 * v42 + 15) & 0xFFFFFFF0);
    v54 = v60;
    if (v61 == -1)
      _X14 = 0;
    else
      _X14 = v61;
  }
  result = 0;
  if ((v58 & 1) == 0)
  {
    *(_QWORD *)(v711 + 168) = 0;
    *(_BYTE *)(v711 + 176) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    *(_WORD *)(v27 + 30) = 0;
    return result;
  }
  v33 = v711;
  *(_QWORD *)(v711 + 168) = 0;
  *(_BYTE *)(v711 + 176) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_WORD *)(v27 + 30) = 0;
  if (v51)
    v62 = _X14 == 0;
  else
    v62 = 0;
  if (!v62)
    goto LABEL_59;
  return result;
}

uint64_t physx::Dy::solveContact(uint64_t result, int32x2_t a2, int32x2_t a3)
{
  float32x2_t v3;
  float32x2_t v4;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  float32x4_t v8;
  float32x4_t v9;
  _DWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  const float *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v41;
  float *v42;
  uint64_t v43;
  const float *v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  const float *v51;
  float32x2_t v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  char *v60;
  int8x16_t v61;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t v70;
  const float *v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  int8x16_t v81;
  float32x2_t v82;
  float32x2_t v83;

  v6 = *(uint64_t **)result;
  v5 = *(_QWORD *)(result + 8);
  v8.i64[0] = **(_QWORD **)result;
  v7 = (_DWORD *)(*(_QWORD *)result + 8);
  v8.i64[1] = *v7;
  v9.i64[0] = *(_QWORD *)v5;
  v9.i64[1] = *(unsigned int *)(v5 + 8);
  v11.i64[0] = *(_QWORD *)(*(_QWORD *)result + 16);
  v10 = (_DWORD *)(*(_QWORD *)result + 24);
  v11.i64[1] = *v10;
  v12.i64[0] = *(_QWORD *)(v5 + 16);
  v12.i64[1] = *(unsigned int *)(v5 + 24);
  if (*(_WORD *)(result + 30))
  {
    v13 = (float32x2_t)vdup_lane_s32(a2, 0);
    v14.i64[0] = v6[4];
    v14.i64[1] = *((unsigned int *)v6 + 10);
    v15.i64[0] = *(_QWORD *)(v5 + 32);
    v15.i64[1] = *(unsigned int *)(v5 + 40);
    v16.i64[0] = v6[6];
    v16.i64[1] = *((unsigned int *)v6 + 14);
    v17.i64[0] = *(_QWORD *)(v5 + 48);
    v17.i64[1] = *(unsigned int *)(v5 + 56);
    v18 = vsubq_f32(v16, v17);
    v19 = (float32x2_t)vdup_lane_s32(a3, 0);
    _X16 = *(float32x2_t **)(result + 32);
    v21 = &_X16[2 * *(unsigned __int16 *)(result + 30)];
    do
    {
      v22 = _X16->u8[2];
      v23 = _X16->u8[3];
      __asm { PRFM            #0, [X16,#0x50] }
      v29 = 3 * _X16->u8[2];
      result = (uint64_t)&_X16[6 * _X16->u8[2] + 10];
      v4.i32[0] = _X16[1].i32[0];
      v30 = _X16[1].f32[1];
      v31 = _X16[6].f32[0];
      v3.i32[0] = _X16->i32[1];
      if (_X16->i8[2])
      {
        *(float32x2_t *)v32.f32 = _X16[4];
        v32.i64[1] = _X16[5].u32[0];
        v33 = vmulq_n_f32(v32, v30);
        v33.i32[3] = 0;
        v34 = vmulq_f32(v18, v32);
        v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
        v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
        v36 = (const float *)&_X16[5] + 1;
        *(float32x2_t *)v34.f32 = vld1_dup_f32(v36);
        v37 = vmulq_n_f32(v32, v31);
        v37.i32[3] = 0;
        v38 = vnegq_f32(v37);
        v39 = vneg_f32(*(float32x2_t *)v34.f32);
        _X3 = _X16 + 13;
        v41 = 0;
        v42 = (float *)&_X16[6 * _X16->u8[2] + 10];
        v43 = _X16->u8[2];
        v44 = v42;
        do
        {
          __asm { PRFM            #0, [X3,#0x68] }
          *(float32x2_t *)v46.f32 = _X3[-3];
          *(float32x2_t *)v47.f32 = _X3[-1];
          v46.i64[1] = _X3[-2].u32[0];
          v47.i64[1] = _X3->u32[0];
          v48 = vmulq_f32(v14, v46);
          v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
          v49 = vmulq_f32(v15, v47);
          v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
          *(float32x2_t *)v49.f32 = vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32);
          *(float32x2_t *)v48.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), *(float32x2_t *)v49.f32);
          v49.i32[0] = _X3[1].i32[0];
          v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0);
          *(float32x2_t *)v48.f32 = vsub_f32(vadd_f32(v35, *(float32x2_t *)v48.f32), vmul_n_f32(v19, v49.f32[0]));
          v51 = (const float *)&_X3[-2] + 1;
          *(float32x2_t *)v49.f32 = vld1_dup_f32(v51);
          *(float32x2_t *)v48.f32 = vadd_f32(v50, vmin_f32(v39, vmul_n_f32(vmax_f32(v13, vadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v49.f32)), _X3[1].f32[1])));
          v52 = vld1_dup_f32(v44++);
          v53 = vsubq_f32(vmlaq_f32(vmulq_f32(v11, v46), v32, v8), vmlaq_f32(vmulq_f32(v12, v47), v32, v9));
          v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
          *(float32x2_t *)v48.f32 = vmin_f32(vadd_f32(v52, vmax_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)v48.f32, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), _X3->f32[1]), vneg_f32(v52))), (float32x2_t)vdup_n_s32(0x7F7FFFFFu));
          *(float32x2_t *)v49.f32 = vsub_f32(*(float32x2_t *)v48.f32, v52);
          v8 = vmlaq_n_f32(v8, v33, v49.f32[0]);
          v8.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
          v9 = vmlaq_n_f32(v9, v38, v49.f32[0]);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          v11 = vmlaq_n_f32(v11, v46, vmul_f32(v3, *(float32x2_t *)v49.f32).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          v12 = vmlsq_lane_f32(v12, v47, vmul_f32(v4, *(float32x2_t *)v49.f32), 0);
          v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
          *v42 = v48.f32[0];
          v41 = vadd_f32(v41, *(float32x2_t *)v48.f32);
          _X3 += 6;
          v42 = (float *)v44;
          --v43;
        }
        while (v43);
      }
      else
      {
        v41 = 0;
      }
      v54 = (4 * v22 + 12) & 0x7F0;
      if ((_DWORD)v23)
      {
        v55 = 0;
        v56 = _X16[2];
        v57 = vmul_n_f32(v41, v56.f32[0]);
        v58 = vmul_lane_f32(v41, v56, 1);
        v59 = vneg_f32(v58);
        v60 = (char *)&_X16[2 * v29] + v54;
        v61 = 0uLL;
        do
        {
          _X5 = &v60[v55];
          __asm { PRFM            #0, [X5,#0xD0] }
          v64 = *(float *)&v60[v55 + 136];
          v66 = *(float32x4_t *)&v60[v55 + 80];
          v65 = *(float32x4_t *)&v60[v55 + 96];
          v67 = (float32x2_t)vdup_laneq_s32((int32x4_t)v66, 3);
          v66.i32[3] = 0;
          v68 = (float32x2_t)vdup_laneq_s32((int32x4_t)v65, 3);
          v69 = vmul_laneq_f32(v19, v65, 3);
          v65.i32[3] = 0;
          v70 = *(float32x4_t *)&v60[v55 + 112];
          v70.i32[3] = 0;
          v71 = (const float *)&v60[v55 + 132];
          v72 = vld1_dup_f32(v71);
          v73 = vmulq_f32(v14, v65);
          v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
          v74 = vmulq_f32(v15, v70);
          v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
          *(float32x2_t *)v73.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32), vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32));
          v75 = vmulq_f32(v18, v66);
          v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
          v76 = vadd_f32(v67, vsub_f32(vadd_f32(*(float32x2_t *)v73.f32, vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32)), v69));
          v77 = vmulq_n_f32(v66, v30);
          v77.i32[3] = 0;
          v78 = vmulq_n_f32(v66, v31);
          v78.i32[3] = 0;
          v79 = vsubq_f32(vmlaq_f32(vmulq_f32(v11, v65), v66, v8), vmlaq_f32(vmulq_f32(v12, v70), v66, v9));
          v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
          v80 = vmls_laneq_f32(vmls_laneq_f32(v72, vsub_f32(vmul_n_f32(v76, *(float *)&v60[v55 + 128]), v68), *(float32x4_t *)&v60[v55 + 112], 3), vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), *(float32x4_t *)&v60[v55 + 112], 3);
          v81 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v80), vmul_n_f32(v57, v64)), 0);
          v82 = (float32x2_t)vbsl_s8(*(int8x8_t *)v81.i8, (int8x8_t)vmin_f32(vmul_n_f32(v58, v64), vmax_f32(vmul_n_f32(v59, v64), v80)), (int8x8_t)v80);
          v83 = vsub_f32(v82, v72);
          v8 = vmlaq_n_f32(v8, v77, v83.f32[0]);
          v8.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
          v9 = vmlsq_lane_f32(v9, v78, v83, 0);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          v11 = vmlaq_n_f32(v11, v65, vmul_f32(v3, v83).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          v12 = vmlsq_lane_f32(v12, v70, vmul_f32(v4, v83), 0);
          v61 = vorrq_s8(v81, v61);
          v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
          *((_DWORD *)_X5 + 33) = v82.i32[0];
          v55 += 64;
        }
        while (v23 << 6 != v55);
        _X16[7].i32[0] = v61.i32[0];
      }
      _X16 = (float32x2_t *)(result + v54 + (v23 << 6));
    }
    while (_X16 < v21);
  }
  *v6 = v8.i64[0];
  *v7 = v8.i32[2];
  *(_QWORD *)v5 = v9.i64[0];
  *(_DWORD *)(v5 + 8) = v9.i32[2];
  v6[2] = v11.i64[0];
  *v10 = v11.i32[2];
  *(_QWORD *)(v5 + 16) = v12.i64[0];
  *(_DWORD *)(v5 + 24) = v12.i32[2];
  return result;
}

uint64_t physx::Dy::writeBackContact(uint64_t result)
{
  _DWORD *v1;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  char v18;

  if (*(_WORD *)(result + 30))
  {
    _X14 = *(unsigned __int8 **)(result + 32);
    v1 = *(_DWORD **)(result + 40);
    v3 = &_X14[16 * *(unsigned __int16 *)(result + 30)];
    do
    {
      v4 = _X14[2];
      v5 = _X14[3];
      __asm
      {
        PRFM            #0, [X14,#0x150]
        PRFM            #0, [X14,#0x1D0]
      }
      v12 = *_X14;
      if (v12 == 3)
        v13 = 112;
      else
        v13 = 48;
      result = (uint64_t)&_X14[v13 * v4 + 80];
      if (v1 && _X14[2])
      {
        v14 = (int *)result;
        v15 = _X14[2];
        do
        {
          v16 = *v14++;
          *v1++ = v16;
          --v15;
        }
        while (v15);
      }
      if (*((_DWORD *)_X14 + 14))
      {
        v17 = (_BYTE *)*((_QWORD *)_X14 + 8);
        if (v17)
          *v17 = 1;
      }
      if (v12 == 3)
        v18 = 7;
      else
        v18 = 6;
      _X14 = (unsigned __int8 *)(result + ((4 * (_WORD)v4 + 12) & 0x7F0) + (v5 << v18));
    }
    while (_X14 < v3);
  }
  return result;
}

float *physx::Dy::setSolverConstantsStep(float *result, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17)
{
  float v17;
  float v18;
  __int16 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;

  v17 = 1.0 / a10;
  if (a10 <= a11)
    v17 = 0.0;
  v18 = *(float *)(a8 + 12);
  *a7 = v17;
  v19 = *(_WORD *)(a8 + 76);
  if ((v19 & 1) != 0)
  {
    *result = 0.0;
    v21 = *(float *)(a8 + 64);
    v22 = *(float *)(a8 + 68);
    v23 = (float)(v22 + (float)(a14 * v21)) * a14;
    v24 = (float)((float)(v22 * *(float *)(a8 + 28)) - (float)(v21 * v18)) * a14;
    v25 = (float)(v22 + (float)(a13 * v21)) * a13;
    *a4 = a15;
    v26 = 1.0 / (float)((float)(v23 * a10) + 1.0);
    v27 = (float)(v25 * a10) + 1.0;
    v28 = (float)(v24 * v26) * a10;
    v29 = (float)-(float)(v26 * v23) * a10;
    v30 = 1.0 / (float)(v23 + 1.0);
    v31 = v25 + 1.0;
    v32 = v24 * v30;
    v33 = -(float)(v30 * v23);
    if ((v19 & 2) != 0)
      v29 = v33;
    else
      v32 = v28;
    if ((v19 & 2) != 0)
      v26 = v30;
    else
      v31 = v27;
    *a3 = v32;
    *a5 = v29;
    *a6 = 1.0 - v26;
    *a2 = (float)-(float)(a16 * a12) * (float)(1.0 - (float)(1.0 / v31));
  }
  else
  {
    *a5 = -1.0;
    *a6 = 1.0;
    if ((v19 & 4) != 0 && (v20 = -a9, *(float *)(a8 + 68) < v20))
    {
      *result = 0.0;
      *a2 = 0.0;
      *a3 = *(float *)(a8 + 64) * v20;
      *a4 = 0.0;
    }
    else
    {
      *a2 = -(float)(a16 * a12);
      if ((v19 & 0x80) != 0)
      {
        *result = 0.0;
        v34 = *(float *)(a8 + 28) - (float)(v18 * a17);
      }
      else
      {
        *result = v18;
        v34 = *(float *)(a8 + 28);
      }
      *a3 = v34;
      *a4 = a15;
    }
  }
  return result;
}

unint64_t physx::Dy::setupSolverConstraintStep(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD), float a3, float a4, float a5, float a6, float a7)
{
  int v7;
  uint64_t v8;
  int v10;
  _BOOL4 v11;
  unint64_t result;
  uint64_t v13;
  int v14;
  void *v15;
  size_t v16;
  float32x4_t v17;
  double v18;
  double v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  BOOL v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  uint64_t v33;
  __int16 *v34;
  uint64_t i;
  int v36;
  __int16 v37;
  char v38;
  unint64_t v39;
  float *v41;
  float *v42;
  float v43;
  float v44;
  float32x2_t *v49;
  __int16 v50;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  float v58;
  float v59;
  float32_t v60;
  float32_t v61;
  float32_t v62;
  float32_t v63;
  __int32 v64;
  float ImpulseResponse;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32_t v78;
  float32_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float *v92;
  float *v93;
  float v94;
  __int16 v95;
  float v96;
  float v97;
  float v98;
  __int32 v99;
  __int16 v100;
  int v101;
  char v102;
  float v103;
  float32_t v104;
  float32x2_t *v105;
  float v106;
  float32x2_t *v107;
  unsigned int v108;
  _BOOL4 v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  _BOOL4 v113;
  _BOOL4 v114;
  float32x2_t v120;
  float v121;
  float32x2_t v122;
  float v123;
  float32x2_t v124;
  float v125;
  float32x2_t v126;
  float v127;
  float32x2_t v128;
  __int32 v129;
  float32x2_t v130;
  __int32 v131;
  uint64_t v132[3];
  __int16 v133;
  uint64_t v134[3];
  __int16 v135;
  float32x4_t v136;
  float32x4_t v137;
  _OWORD v138[6];
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    result = 0;
    *(_QWORD *)(v8 + 36) = 0;
    *(_QWORD *)(v8 + 28) = 0;
    *(_DWORD *)(v8 + 44) = 0;
    return result;
  }
  v10 = *(unsigned __int16 *)(v8 + 18);
  if (*(__int16 *)(v8 + 16) == -1)
  {
    v11 = v10 != 0xFFFF;
    v114 = *(_BYTE *)(*(_QWORD *)v8 + 62) != 0;
  }
  else
  {
    v114 = 0;
    v11 = 1;
  }
  v113 = v10 == 0xFFFF && *(_BYTE *)(*(_QWORD *)(v8 + 8) + 62) != 0;
  if (v11)
    v13 = 160;
  else
    v13 = 96;
  v14 = v13 * v7;
  v15 = (void *)(**a2)(a2, (v13 * v7 + 192));
  if ((unint64_t)v15 + 1 < 2)
    return 0;
  v16 = (v14 + 176);
  *(_QWORD *)(v8 + 32) = v15;
  *(_WORD *)(v8 + 30) = v16 >> 4;
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(a1 + 160);
  *(_WORD *)(v8 + 28) = 8;
  bzero(v15, v16);
  v21 = *(_QWORD *)(v8 + 32);
  v22 = *(unsigned int *)(a1 + 144);
  if (v11)
    v23 = 4;
  else
    v23 = 2;
  *(_BYTE *)v21 = v23;
  *(_BYTE *)(v21 + 1) = v22;
  *(_BYTE *)(v21 + 2) = 0;
  v24 = *(float *)a1;
  *(_DWORD *)(v21 + 44) = *(_DWORD *)a1;
  *(_DWORD *)(v21 + 60) = *(_DWORD *)(a1 + 4);
  v25 = *(float32x2_t *)(a1 + 8);
  *(float32x2_t *)(v21 + 64) = vneg_f32(v25);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 + 172);
  *(_DWORD *)(v21 + 24) = *(_DWORD *)(a1 + 180);
  v26 = *(float32x2_t *)(a1 + 148);
  *(float32x2_t *)(v21 + 4) = vmul_n_f32(v26, a4);
  v27 = v26.f32[0] != 3.4028e38;
  if (*(float *)(a1 + 152) != 3.4028e38)
    v27 = 1;
  *(_BYTE *)(v21 + 3) = v27;
  v28 = *(float *)(*(_QWORD *)(a1 + 56) + 32);
  *(float *)(v21 + 12) = v24 * v28;
  v29 = *(float *)(*(_QWORD *)(a1 + 64) + 32);
  *(float *)(v21 + 28) = v29 * v25.f32[0];
  v30 = *(float *)(a1 + 192) - *(float *)(a1 + 96);
  *(float32x2_t *)(v21 + 32) = vsub_f32(*(float32x2_t *)(a1 + 184), *(float32x2_t *)(a1 + 88));
  *(float *)(v21 + 40) = v30;
  v31 = *(float *)(a1 + 204) - *(float *)(a1 + 124);
  v17.i64[0] = *(_QWORD *)(a1 + 116);
  v32 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)(a1 + 196), *(float32x2_t *)v17.f32));
  *(double *)(v21 + 48) = v32;
  v107 = (float32x2_t *)v21;
  *(float *)(v21 + 56) = v31;
  memset(v138, 0, sizeof(v138));
  v33 = *(_QWORD *)(a1 + 136);
  if ((_DWORD)v22)
  {
    v34 = (__int16 *)(v33 + 78);
    for (i = v22; i; --i)
    {
      if ((*(v34 - 1) & 0x40) != 0)
      {
        v36 = (unsigned __int16)*v34;
        if (v36 == 2048)
        {
          v37 = 1024;
          goto LABEL_26;
        }
        if (v36 == 2049)
        {
          v37 = 1025;
LABEL_26:
          *v34 = v37;
        }
      }
      v34 += 40;
    }
  }
  if (*(_BYTE *)(a1 + 168))
    v38 = 1;
  else
    v38 = v11;
  physx::Dy::preprocessRows((float **)v138, v33, &v137, &v136, v22, *(_QWORD *)(a1 + 40) + 28, *(_QWORD *)(a1 + 48) + 28, a1, v28, v29, 0.0, v32, v17, v18, v19, v20, v38, *(_BYTE *)(a1 + 169), 0);
  if (!*(_DWORD *)(a1 + 144))
    return 0;
  v39 = 0;
  v108 = 0;
  _X20 = v107 + 22;
  v111 = fminf(a4, 1.0);
  v41 = &v136.f32[2];
  v42 = &v137.f32[2];
  v43 = 1.0;
  v44 = 1.0;
  v112 = v13;
  v110 = v8;
  v109 = v11;
  do
  {
    __asm { PRFM            #0, [X20,#0x80] }
    v49 = (float32x2_t *)*((_QWORD *)v138 + v39);
    v50 = v49[9].i16[2];
    if (*(_BYTE *)(a1 + 170))
      _ZF = (v50 & 0x20) == 0;
    else
      _ZF = 1;
    if (_ZF)
      v52 = 1.0;
    else
      v52 = v111;
    if (v11)
    {
      v53 = *(_QWORD *)(a1 + 32);
      v54 = *(_QWORD *)(a1 + 40);
      v55 = *(_QWORD *)(a1 + 48);
      v134[0] = *(_QWORD *)(a1 + 24);
      v134[1] = v54;
      v56 = *(_QWORD *)(a1 + 64);
      v134[2] = *(_QWORD *)(a1 + 56);
      v135 = *(_WORD *)(v8 + 16);
      v132[0] = v53;
      v132[1] = v55;
      v132[2] = v56;
      v57 = *(_WORD *)(v8 + 18);
      v133 = v57;
      physx::Dy::createImpulseResponseVector(&v128, v49, (float *)&v49[2], v54, v135);
      v58 = -v49[5].f32[0];
      v122 = vneg_f32(v49[4]);
      v123 = v58;
      v59 = -v49[7].f32[0];
      v120 = vneg_f32(v49[6]);
      v121 = v59;
      physx::Dy::createImpulseResponseVector(&v124, &v122, (float *)&v120, v55, v57);
      v60 = -v125;
      v61 = -v127;
      v62 = v52 * v49[5].f32[1];
      v63 = v52 * v49[7].f32[1];
      *_X20 = v128;
      _X20[2] = vneg_f32(v124);
      _X20[1].i32[0] = v129;
      _X20[3].f32[0] = v60;
      _X20[4] = v130;
      v64 = v131;
      _X20[6] = vneg_f32(v126);
      _X20[5].i32[0] = v64;
      _X20[7].f32[0] = v61;
      _X20[8].f32[1] = v62;
      _X20[9].f32[0] = v63;
      _X20[10].i32[1] = 0;
      _X20[9].i32[1] = 0;
      _X20[11].i32[1] = 1065353216;
      ImpulseResponse = physx::Dy::getImpulseResponse(v134, &v128, _X20 + 12, v132, &v124, _X20 + 16, *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
      if (ImpulseResponse >= 0.000001)
        v66 = ImpulseResponse + 0.0001;
      else
        v66 = 0.0;
      v67 = physx::Dy::SolverExtBodyStep::projectVelocity((uint64_t)v134, (float *)_X20, (float *)&_X20[4]);
      v68 = physx::Dy::SolverExtBodyStep::projectVelocity((uint64_t)v132, (float *)&_X20[2], (float *)&_X20[6]);
      v69 = v68;
      if ((v49[9].i16[2] & 0x40) == 0)
        _X20[11].i32[1] = 0;
      v70 = v67 - v68;
      v44 = *(float *)"333?";
      v43 = *(float *)"333?";
      v71 = a6 * 1.5;
      v8 = v110;
      v11 = v109;
    }
    else
    {
      v72 = *(v42 - 2);
      v73 = *(v42 - 1);
      v74 = *v42;
      v75 = *(v41 - 2);
      v76 = *(v41 - 1);
      v77 = *v41;
      v78 = v52 * v49[5].f32[1];
      v79 = v52 * v49[7].f32[1];
      v80 = v49->f32[0];
      _X20->i32[0] = v49->i32[0];
      v81 = v49->f32[1];
      _X20->f32[1] = v81;
      v82 = v49[1].f32[0];
      _X20[1].f32[0] = v82;
      v83 = v49[4].f32[0];
      _X20[2].f32[0] = v83;
      v84 = v49[4].f32[1];
      _X20[2].f32[1] = v84;
      v85 = v49[5].f32[0];
      _X20[3].f32[0] = v85;
      v86 = v49[2].f32[0];
      _X20[4].f32[0] = v86;
      v87 = v49[2].f32[1];
      _X20[4].f32[1] = v87;
      v88 = v49[3].f32[0];
      _X20[5].f32[0] = v88;
      v89 = v49[6].f32[0];
      _X20[6].f32[0] = v89;
      v90 = v49[6].f32[1];
      _X20[6].f32[1] = v90;
      v91 = v49[7].f32[0];
      _X20[7].f32[0] = v91;
      _X20[8].f32[1] = v78;
      _X20[9].f32[0] = v79;
      _X20[10].i32[1] = 0;
      _X20[9].i32[1] = 0;
      _X20[11].i32[1] = 1065353216;
      v92 = *(float **)(a1 + 56);
      v93 = *(float **)(a1 + 64);
      v66 = (float)((float)((float)((float)((float)((float)(v84 * v84) + (float)(v83 * v83)) + (float)(v85 * v85))
                                  * v93[8])
                          * *(float *)(a1 + 8))
                  + (float)((float)((float)((float)((float)(v81 * v81) + (float)(v80 * v80)) + (float)(v82 * v82))
                                  * v92[8])
                          * *(float *)a1))
          + (float)((float)((float)((float)((float)(v73 * v73) + (float)(v72 * v72)) + (float)(v74 * v74))
                          * *(float *)(a1 + 4))
                  + (float)((float)((float)((float)(v76 * v76) + (float)(v75 * v75)) + (float)(v77 * v77))
                          * *(float *)(a1 + 12)));
      v67 = (float)((float)((float)(v81 * v92[1]) + (float)(*v92 * v80)) + (float)(v92[2] * v82))
          + (float)((float)((float)(v87 * v92[5]) + (float)(v92[4] * v86)) + (float)(v92[6] * v88));
      v69 = (float)((float)((float)(v84 * v93[1]) + (float)(*v93 * v83)) + (float)(v93[2] * v85))
          + (float)((float)((float)(v90 * v93[5]) + (float)(v93[4] * v89)) + (float)(v93[6] * v91));
      v70 = v67 - v69;
      if ((v50 & 0x40) != 0)
      {
        v71 = a6 * 15.0;
      }
      else
      {
        _X20[4] = 0;
        _X20[5].i32[0] = 0;
        _X20[6] = 0;
        _X20[7].i32[0] = 0;
        v71 = a6 * 15.0;
        _X20[11].i32[1] = 0;
      }
    }
    LODWORD(v134[0]) = 0;
    v94 = *(float *)(a1 + 156);
    if (v11)
      v94 = 0.00001;
    v95 = v49[9].i16[2];
    if ((v95 & 0x40) != 0)
      v96 = v44;
    else
      v96 = v43;
    v97 = v71 * a7;
    if ((v95 & 0x40) != 0)
      v98 = a6 * 1.5;
    else
      v98 = v97;
    physx::Dy::setSolverConstantsStep((float *)&_X20[1] + 1, (float *)&_X20[3] + 1, (float *)&_X20[8], (float *)&_X20[10], (float *)&_X20[5] + 1, (float *)&_X20[7] + 1, (float *)v134, (uint64_t)v49, v70, v66, v94, v96, a3, a4, v98, a5, a6);
    v99 = v134[0];
    _X20[11].i32[0] = v134[0];
    if (v114)
      _X20[8].f32[0] = _X20[8].f32[0] - v67;
    if (v113)
      _X20[5].f32[1] = v69 + _X20[5].f32[1];
    v100 = v49[9].i16[2];
    if ((v100 & 0x10) != 0)
      _X20[10].i32[1] |= 2u;
    if ((v100 & 8) != 0)
      _X20[10].i32[1] |= 4u;
    v101 = v49[9].u16[3];
    if ((v101 & 1) != 0)
      _X20[10].i32[1] |= 0x40u;
    if (*(_BYTE *)(a1 + 168))
      v102 = 1;
    else
      v102 = v11;
    if ((v102 & 1) == 0)
    {
      if (v101 == 1024)
      {
        _X20[10].i32[1] |= 8u;
        v103 = *(float *)(a1 + 4);
        v104 = v103 * *v42;
        v105 = &v107[2 * v108];
        v105[10] = vmul_n_f32(*(float32x2_t *)(v42 - 2), v103);
        v105[11].f32[0] = v104;
        v105[11].i32[1] = v99;
        v106 = *(float *)(a1 + 12);
        v105[16] = vmul_n_f32(*(float32x2_t *)(v41 - 2), v106);
        v105[17].f32[0] = v106 * *v41;
        v105[17].i32[1] = v49[1].i32[1];
        ++v108;
      }
      else if ((v101 & 0x800) != 0)
      {
        _X20[10].i32[1] |= 0x10u;
      }
    }
    _X20 = (float32x2_t *)((char *)_X20 + v112);
    ++v39;
    result = *(unsigned int *)(a1 + 144);
    v41 += 4;
    v42 += 4;
  }
  while (v39 < result);
  return result;
}

__n128 physx::Dy::solveExt1D(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, int32x2_t a9, float32x4_t *a10, int32x4_t *a11, int32x4_t *a12, float32x4_t *a13, float32x4_t *a14, float32x4_t *a15, __n128 *a16)
{
  int8x16_t v16;
  int32x2_t v17;
  float32x4_t *v18;
  unsigned int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  const float *v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x4_t v67;
  const float *f32;
  float32x2_t v69;
  float32x2_t v70;
  const float *v71;
  float32x2_t v72;
  const float *v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x2_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  __n128 result;

  v18 = *(float32x4_t **)(a1 + 32);
  if (v18->i8[1])
  {
    v19 = 0;
    v20.i64[0] = v18[2].i64[0];
    v21.i64[0] = v18[3].i64[0];
    v22 = (float32x2_t)vdup_lane_s32(a9, 0);
    v20.i64[1] = v18[2].u32[2];
    v21.i64[1] = v18[3].u32[2];
    v23 = *(float32x4_t *)a11;
    v23.i32[3] = 0;
    v24 = (float32x2_t)vdupq_laneq_s32(*a11, 3).u64[0];
    v25 = vmulq_n_f32(v20, vmla_f32((float32x2_t)0xBF000000BF000000, v24, v24).f32[0]);
    v25.i32[3] = 0;
    v26 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v27 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v28 = (float32x2_t)vext_s8(*(int8x8_t *)a11->i8, (int8x8_t)v26, 4uLL);
    v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v27, 4uLL), *(float32x2_t *)a11->i8), v28, *(float32x2_t *)v20.f32);
    *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v26), *(float32x2_t *)a11->i8, v27), 4uLL);
    v30.i64[1] = v29.u32[0];
    v31 = vmlaq_laneq_f32(v25, v30, *(float32x4_t *)a11, 3);
    v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    v32 = vmulq_f32(v20, v23);
    v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
    v33 = vmlaq_n_f32(v31, v23, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
    v34 = vaddq_f32(v33, v33);
    v48.i32[3] = 0;
    v35 = *(float32x4_t *)a12;
    v35.i32[3] = 0;
    v33.i64[0] = vdupq_laneq_s32(*a12, 3).u64[0];
    v36 = vmulq_n_f32(v21, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
    v36.i32[3] = 0;
    v37 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v38 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    v39 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v38, 4uLL), *(float32x2_t *)a12->i8), (float32x2_t)vext_s8(*(int8x8_t *)a12->i8, (int8x8_t)v37, 4uLL), *(float32x2_t *)v21.f32);
    *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, v37), *(float32x2_t *)a12->i8, v38), 4uLL);
    v40.i64[1] = v39.u32[0];
    v41 = vmlaq_laneq_f32(v36, v40, *(float32x4_t *)a12, 3);
    v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
    v42 = vmulq_f32(v21, v35);
    v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
    v43 = vmlaq_n_f32(v41, v35, vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32).f32[0]);
    v44 = vaddq_f32(v43, v43);
    v49.i32[3] = 0;
    v45 = vsubq_f32(vaddq_f32(*a6, v48), v20);
    v46 = vsubq_f32(vaddq_f32(*a7, v49), v21);
    _X15 = v18 + 11;
    v48.i64[0] = 0;
    v48.i32[2] = 0;
    v49.i64[0] = 0;
    v49.i32[2] = 0;
    v50 = 0uLL;
    v51 = 0uLL;
    do
    {
      v28.i32[0] = 0;
      __asm { PRFM            #0, [X15,#0xA0] }
      v57.i64[0] = _X15->i64[0];
      v58.i64[0] = _X15[1].i64[0];
      v57.i64[1] = _X15->u32[2];
      v59.i64[0] = _X15[2].i64[0];
      v58.i64[1] = _X15[1].u32[2];
      v60.i64[0] = _X15[3].i64[0];
      v59.i64[1] = _X15[2].u32[2];
      v60.i64[1] = _X15[3].u32[2];
      v16.i32[0] = _X15[4].i32[0];
      v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 0);
      v62 = vmulq_f32(v59, *a8);
      v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
      v63 = vmulq_f32(v60, *a10);
      v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
      *(float32x2_t *)v62.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32), vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32));
      v64 = &_X15->f32[3];
      *(float32x2_t *)v63.f32 = vld1_dup_f32(v64);
      v65 = vmulq_f32(v45, v57);
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
      v67 = vmulq_f32(v46, v58);
      v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
      *(float32x2_t *)v63.f32 = vadd_f32(*(float32x2_t *)v63.f32, vsub_f32(v66, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32)));
      f32 = _X15[5].f32;
      *(float32x2_t *)v67.f32 = vld1_dup_f32(f32);
      *(float32x2_t *)v62.f32 = vadd_f32(vmul_n_f32(*(float32x2_t *)v62.f32, _X15[5].f32[3]), *(float32x2_t *)v63.f32);
      v63.i32[0] = _X15[5].i32[1] & 0x40;
      *(float32x2_t *)v62.f32 = vmls_lane_f32(*(float32x2_t *)v62.f32, v22, *(float32x2_t *)v16.i8, 0);
      v69 = vneg_f32(*(float32x2_t *)v67.f32);
      v70 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v63.f32, (int32x2_t)v28), 0), (int8x8_t)v69, (int8x8_t)0x80000000800000);
      v69.i32[0] = _X15[4].i32[3];
      v71 = &_X15[4].f32[2];
      v72 = vld1_dup_f32(v71);
      v73 = &_X15[4].f32[1];
      v74 = vadd_f32(v61, vmax_f32(vmin_f32(vmul_n_f32(*(float32x2_t *)v62.f32, _X15[1].f32[3]), *(float32x2_t *)v67.f32), v70));
      *(float32x2_t *)v62.f32 = vld1_dup_f32(v73);
      v75 = vsubq_f32(vmlaq_f32(vmulq_f32(v59, *a4), v57, *a2), vmlaq_f32(vmulq_f32(v60, *a5), v58, *a3));
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      *(float *)v17.i32 = _X15[3].f32[3] * v69.f32[0];
      v76 = vmin_f32(v72, vmax_f32(*(float32x2_t *)v62.f32, vadd_f32((float32x2_t)vdup_lane_s32(v17, 0), vmla_n_f32(vmul_n_f32(v74, _X15[5].f32[2]), vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), _X15[5].f32[2] * _X15[2].f32[3]))));
      _X15[4].i32[3] = v76.i32[0];
      v28 = vsub_f32(v76, v69);
      v48 = vmlaq_n_f32(v48, v57, v28.f32[0]);
      v50 = vmlaq_n_f32(v50, v59, v28.f32[0]);
      v49 = vmlaq_n_f32(v49, v58, v28.f32[0]);
      v77 = (int8x16_t)vmlaq_n_f32(*a2, _X15[6], v28.f32[0]);
      v51 = vmlaq_n_f32(v51, v60, v28.f32[0]);
      v77.i64[1] = vextq_s8(v77, v77, 8uLL).u32[0];
      *a2 = (float32x4_t)v77;
      v78 = (int8x16_t)vmlaq_n_f32(*a4, _X15[7], v28.f32[0]);
      v78.i64[1] = vextq_s8(v78, v78, 8uLL).u32[0];
      v17.i32[1] = 0;
      *a4 = (float32x4_t)v78;
      v16 = (int8x16_t)vmlaq_n_f32(*a3, _X15[8], v28.f32[0]);
      v48.i64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u32[0];
      v16.i64[1] = vextq_s8(v16, v16, 8uLL).u32[0];
      *a3 = (float32x4_t)v16;
      v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
      v79 = (int8x16_t)vmlaq_n_f32(*a5, _X15[9], v28.f32[0]);
      v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
      v79.i64[1] = vextq_s8(v79, v79, 8uLL).u32[0];
      v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
      _X15 += 10;
      *a5 = (float32x4_t)v79;
      ++v19;
    }
    while (v19 < v18->u8[1]);
  }
  else
  {
    v51 = 0uLL;
    v50 = 0uLL;
    v49 = 0uLL;
    v48 = 0uLL;
  }
  v80 = vmulq_n_f32(v48, v18[2].f32[3]);
  v80.i32[3] = 0;
  *a13 = v80;
  v81 = vmulq_n_f32(v49, v18[4].f32[0]);
  v81.i32[3] = 0;
  *a14 = v81;
  v82 = vmulq_n_f32(v50, v18[3].f32[3]);
  v82.i32[3] = 0;
  *a15 = v82;
  result = (__n128)vmulq_n_f32(v51, v18[4].f32[1]);
  result.n128_u32[3] = 0;
  *a16 = result;
  return result;
}

_DWORD *physx::Dy::solveExt1DStep(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  __n128 v17;
  _DWORD *result;
  uint64_t v19;
  __int32 v20;
  uint64_t v21;
  __int32 v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  uint64_t v26;
  __int32 v27;
  int32x4_t v28;
  __n128 v29[2];
  float32x4_t v30[2];
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;

  v7 = *a1;
  if (v7 == a1[1])
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, float32x4_t *, float32x4_t *))(*(_QWORD *)v7 + 304))(v7, *((unsigned __int16 *)a1 + 8), *((unsigned __int16 *)a1 + 9), &v33, &v31);
    v43 = v34;
    v44 = v33;
    v41 = v32;
    v42 = v31;
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 240))(v30, *a1, *((unsigned __int16 *)a1 + 8));
    (*(void (**)(__n128 *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 240))(v29, a1[1], *((unsigned __int16 *)a1 + 9));
    v39 = v30[1];
    v40 = v30[0];
    v37 = (float32x4_t)v29[1];
    v38 = (float32x4_t)v29[0];
    v36 = *(int32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 336))(*a1, *((unsigned __int16 *)a1 + 8));
    v14 = *(int32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[1] + 336))(a1[1], *((unsigned __int16 *)a1 + 9));
  }
  else
  {
    if (*((unsigned __int16 *)a1 + 8) == 0xFFFF)
    {
      v10.i64[0] = *(_QWORD *)v7;
      v10.i64[1] = *(unsigned int *)(v7 + 8);
      v11.i64[0] = *(_QWORD *)(v7 + 16);
      v11.i64[1] = *(unsigned int *)(v7 + 24);
      v12.i64[0] = *(_QWORD *)(v7 + 48);
      v12.i64[1] = *(unsigned int *)(v7 + 56);
      v13.i64[0] = *(_QWORD *)(v7 + 32);
      v13.i64[1] = *(unsigned int *)(v7 + 40);
      v9 = *(int32x4_t *)(a3 + ((unint64_t)*((unsigned int *)a1 + 5) << 6));
    }
    else
    {
      (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)v7 + 312))(&v33);
      v28 = *(int32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 336))(*a1, *((unsigned __int16 *)a1 + 8));
      (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 240))(&v31, *a1, *((unsigned __int16 *)a1 + 8));
      v9 = v28;
      v10 = v33;
      v11 = v34;
      v12 = v31;
      v13 = v32;
    }
    v43 = v11;
    v44 = v10;
    v39 = v13;
    v40 = v12;
    v36 = v9;
    if (*((unsigned __int16 *)a1 + 9) != 0xFFFF)
    {
      (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)a1[1] + 312))(&v33);
      v35 = *(int32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[1] + 336))(a1[1], *((unsigned __int16 *)a1 + 9));
      (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 240))(&v31, a1[1], *((unsigned __int16 *)a1 + 9));
      v41 = v34;
      v42 = v33;
      v37 = v32;
      v38 = v31;
      goto LABEL_10;
    }
    v15 = a1[1];
    v16.i64[0] = *(_QWORD *)v15;
    v16.i64[1] = *(unsigned int *)(v15 + 8);
    v42 = v16;
    v16.i64[0] = *(_QWORD *)(v15 + 16);
    v16.i64[1] = *(unsigned int *)(v15 + 24);
    v41 = v16;
    v16.i64[0] = *(_QWORD *)(v15 + 48);
    v16.i64[1] = *(unsigned int *)(v15 + 56);
    v38 = v16;
    v16.i64[0] = *(_QWORD *)(v15 + 32);
    v16.i64[1] = *(unsigned int *)(v15 + 40);
    v37 = v16;
    v14 = *(int32x4_t *)(a3 + ((unint64_t)*((unsigned int *)a1 + 6) << 6));
  }
  v35 = v14;
LABEL_10:
  v33 = 0u;
  v31 = 0u;
  v30[0] = 0u;
  v29[0] = 0u;
  v17 = physx::Dy::solveExt1D((uint64_t)a1, &v44, &v42, &v43, &v41, &v40, &v38, &v39, (int32x2_t)LODWORD(a4), &v37, &v36, &v35, &v33, &v31, v30, v29);
  result = (_DWORD *)*a1;
  v19 = *((unsigned __int16 *)a1 + 8);
  if (*a1 == a1[1])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, float32x4_t *, float32x4_t *, _QWORD, float32x4_t *, __n128 *, _QWORD, __n128, _QWORD))(*(_QWORD *)result + 264))(result, v19, &v33, v30, *((unsigned __int16 *)a1 + 9), &v31, v29, *(_QWORD *)(a2 + 56), v17, *(_QWORD *)(a2 + 64));
  if ((_DWORD)v19 == 0xFFFF)
  {
    v20 = v44.i32[2];
    *(_QWORD *)result = v44.i64[0];
    result[2] = v20;
    v21 = *a1;
    v22 = v43.i32[2];
    *(_QWORD *)(v21 + 16) = v43.i64[0];
    *(_DWORD *)(v21 + 24) = v22;
  }
  else
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD, _QWORD, float32x4_t, float32x4_t))(*(_QWORD *)result + 256))(result, v19, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v33, v30[0]);
  }
  v23 = *((unsigned __int16 *)a1 + 9);
  if ((_DWORD)v23 != 0xFFFF)
    return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, float32x4_t, __n128))(*(_QWORD *)a1[1] + 256))(a1[1], v23, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v31, v29[0]);
  v24 = a1[1];
  v25 = v42.i32[2];
  *(_QWORD *)v24 = v42.i64[0];
  *(_DWORD *)(v24 + 8) = v25;
  v26 = a1[1];
  v27 = v41.i32[2];
  *(_QWORD *)(v26 + 16) = v41.i64[0];
  *(_DWORD *)(v26 + 24) = v27;
  return result;
}

uint64_t **physx::Dy::solve1DStep(uint64_t **result, uint64_t a2, int32x2_t a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _DWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  _DWORD *v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x2_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  int8x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  int8x8_t v74;
  float32x4_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  const float *v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  const float *v99;
  float32x2_t v100;
  const float *v101;
  float32x2_t v102;
  const float *f32;
  float32x2_t v104;
  const float *v105;
  float32x2_t v106;
  float32x2_t v107;
  const float *v108;
  float32x2_t v109;
  const float *v110;
  float32x2_t v111;
  const float *v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x2_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;

  v11 = (float32x4_t *)result[4];
  if (v11)
  {
    v13 = *result;
    v12 = result[1];
    v15.i64[0] = **result;
    v14 = *result + 1;
    v15.i64[1] = *v14;
    v16.i64[0] = *v12;
    v16.i64[1] = *((unsigned int *)v12 + 2);
    v18.i64[0] = (*result)[2];
    v17 = *result + 3;
    v18.i64[1] = *v17;
    v19.i64[0] = v12[2];
    v19.i64[1] = *((unsigned int *)v12 + 6);
    v20 = v11->u8[1];
    if (v11->i8[1])
    {
      v21 = 0;
      v22 = *((unsigned int *)result + 6);
      v23 = a2 + ((unint64_t)*((unsigned int *)result + 5) << 6);
      v24 = a2 + (v22 << 6);
      a8.i64[0] = *(_QWORD *)(v23 + 28);
      a8.i32[2] = *(_DWORD *)(v23 + 36);
      v160 = a8;
      a8.i64[0] = *(_QWORD *)(v23 + 40);
      a8.i32[2] = *(_DWORD *)(v23 + 48);
      v159 = a8;
      a8.i64[0] = *(_QWORD *)(v23 + 52);
      a8.i32[2] = *(_DWORD *)(v23 + 60);
      v158 = a8;
      a8.i64[0] = *(_QWORD *)(v24 + 28);
      a8.i32[2] = *(_DWORD *)(v24 + 36);
      v157 = a8;
      a8.i64[0] = *(_QWORD *)(v24 + 40);
      a8.i32[2] = *(_DWORD *)(v24 + 48);
      v156 = a8;
      a8.i64[0] = *(_QWORD *)(v24 + 52);
      a8.i32[2] = *(_DWORD *)(v24 + 60);
      v155 = a8;
      v25.i64[0] = v11[2].i64[0];
      v26.i64[0] = v11[3].i64[0];
      v27 = vdup_lane_s32(a3, 0);
      v154 = (float32x2_t)v27;
      v27.i32[0] = v11->i32[3];
      v153 = (float32x2_t)v27;
      v152 = (float32x2_t)vdup_lane_s32(v27, 0);
      v25.i64[1] = v11[2].u32[2];
      v26.i64[1] = v11[3].u32[2];
      v28 = *(float32x4_t *)v23;
      v28.i32[3] = 0;
      v29 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v23, 3).u64[0];
      v30 = vmulq_n_f32(v25, vmla_f32((float32x2_t)0xBF000000BF000000, v29, v29).f32[0]);
      v30.i32[3] = 0;
      v31 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      v32 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23, (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v32, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v23, (int8x8_t)v31, 4uLL), *(float32x2_t *)v25.f32);
      *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v25.f32), *(float32x2_t *)v23, v32), 4uLL);
      v34.i64[1] = v33.u32[0];
      v35 = vmlaq_laneq_f32(v30, v34, *(float32x4_t *)v23, 3);
      v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
      v36 = vmulq_f32(v28, v25);
      v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
      v37 = vmlaq_n_f32(v35, v28, vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0]);
      v38 = vaddq_f32(v37, v37);
      v39 = v38;
      v39.i32[3] = 0;
      v40 = *(float32x4_t *)v24;
      v40.i32[3] = 0;
      v28.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v24, 3).u64[0];
      v41 = vmulq_n_f32(v26, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
      v41.i32[3] = 0;
      v37.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
      v42 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
      v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24, (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v42, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v24, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v26.f32);
      *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v26.f32), *(float32x2_t *)v24, v42), 4uLL);
      v44.i64[1] = v43.u32[0];
      v45 = vmlaq_laneq_f32(v41, v44, *(float32x4_t *)v24, 3);
      v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
      v46 = vmulq_f32(v40, v26);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      v47 = vmlaq_n_f32(v45, v40, vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).f32[0]);
      v48 = vaddq_f32(v47, v47);
      v49 = v48;
      v49.i32[3] = 0;
      v37.i64[0] = v13[4];
      v37.i64[1] = *((unsigned int *)v13 + 10);
      v50.i64[0] = v12[4];
      v50.i64[1] = *((unsigned int *)v12 + 10);
      v44.i64[0] = v13[6];
      v44.i64[1] = *((unsigned int *)v13 + 14);
      v40.i64[0] = v12[6];
      v40.i64[1] = *((unsigned int *)v12 + 14);
      v9.i32[0] = v11[1].i32[3];
      v149 = vsubq_f32(vaddq_f32(v39, v44), v25);
      v56 = v11[8];
      v142 = v11[6];
      v143 = v11[5];
      v51 = v143;
      v51.i32[3] = 0;
      v52 = v142;
      v52.i32[3] = 0;
      v53 = v11[7];
      v53.i32[3] = 0;
      v54 = v11[9];
      v55 = v11[10];
      *(int32x2_t *)v44.f32 = vdup_laneq_s32((int32x4_t)v54, 3);
      v54.i32[3] = 0;
      v148 = vsubq_f32(vaddq_f32(v49, v40), v26);
      *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v55, 3);
      v55.i32[3] = 0;
      *(int32x2_t *)v25.f32 = vdup_laneq_s32((int32x4_t)v56, 3);
      v56.i32[3] = 0;
      v139 = v51;
      v57 = vmulq_f32(v37, v51);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      v140 = v56;
      v141 = v11[7];
      v58 = vmulq_f32(v50, v56);
      v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
      v137 = vadd_f32(*(float32x2_t *)v25.f32, vsub_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)));
      v59 = vmulq_f32(v37, v52);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      v60 = vmulq_f32(v50, v54);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      v136 = vadd_f32(*(float32x2_t *)v44.f32, vsub_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32)));
      v150 = v50;
      v151 = v37;
      v138 = v53;
      v61 = vmulq_f32(v37, v53);
      v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
      v62 = vmulq_f32(v50, v55);
      v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
      v8.i32[0] = v11[3].i32[3];
      v135 = vadd_f32(*(float32x2_t *)v26.f32, vsub_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32), vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32)));
      v10.i32[0] = v11[4].i32[1];
      _X16 = v11 + 11;
      v146 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      v147 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      v144 = (float32x2_t)vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)v146, 4uLL);
      v145 = (float32x2_t)vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)v147, 4uLL);
      do
      {
        __asm { PRFM            #0, [X16,#0x60] }
        v69.i64[0] = _X16->i64[0];
        v69.i64[1] = _X16->u32[2];
        v70.i64[0] = _X16[1].i64[0];
        v70.i64[1] = _X16[1].u32[2];
        v71.i64[0] = _X16[2].i64[0];
        v71.i64[1] = _X16[2].u32[2];
        v72.i64[0] = _X16[3].i64[0];
        v72.i64[1] = _X16[3].u32[2];
        v73 = (float32x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
        v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v38.f32, (float32x2_t)vext_s8(*(int8x8_t *)_X16->f32, (int8x8_t)v73, 4uLL)), v145, *(float32x2_t *)_X16->f32);
        *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v147, *(float32x2_t *)_X16->f32), *(float32x2_t *)v38.f32, v73), 4uLL);
        v75.i64[1] = v74.u32[0];
        v76 = (float32x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
        v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v48.f32, (float32x2_t)vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)v76, 4uLL)), v144, *(float32x2_t *)v70.f32);
        *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v146, *(float32x2_t *)v70.f32), *(float32x2_t *)v48.f32, v76), 4uLL);
        v79 = vaddq_f32(v71, v75);
        v78.i64[1] = v77.u32[0];
        v80 = &_X16->f32[3];
        v81 = vld1_dup_f32(v80);
        v82 = vaddq_f32(v72, v78);
        v83 = vmulq_n_f32(v160, v79.f32[0]);
        v83.i32[3] = 0;
        v84 = vmulq_lane_f32(v159, *(float32x2_t *)v79.f32, 1);
        v84.i32[3] = 0;
        v85 = vmulq_laneq_f32(v158, v79, 2);
        v85.i32[3] = 0;
        v86 = vaddq_f32(v83, v84);
        v87 = vmulq_n_f32(v157, v82.f32[0]);
        v87.i32[3] = 0;
        v88 = vmulq_lane_f32(v156, *(float32x2_t *)v82.f32, 1);
        v88.i32[3] = 0;
        v89 = vaddq_f32(v85, v86);
        v90 = vmulq_laneq_f32(v155, v82, 2);
        v90.i32[3] = 0;
        v91 = vaddq_f32(v90, vaddq_f32(v87, v88));
        if ((_X16[5].i32[1] & 0x10) != 0)
        {
          v92 = vmlaq_f32(vmulq_f32(v140, v91), v139, v89);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          *(float32x2_t *)v92.f32 = vmul_laneq_f32(vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32), v143, 3);
          v87 = vmlaq_f32(vmulq_f32(v54, v91), v52, v89);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          *(float32x2_t *)v87.f32 = vmul_laneq_f32(vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), v142, 3);
          v93 = vmlaq_f32(vmulq_f32(v55, v91), v138, v89);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          *(float32x2_t *)v93.f32 = vmul_laneq_f32(vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32), v141, 3);
          v94 = vmulq_n_f32(v138, v93.f32[0]);
          v94.i32[3] = 0;
          v95 = vmlaq_n_f32(v94, v52, v87.f32[0]);
          v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
          v96 = vmlaq_n_f32(v95, v139, v92.f32[0]);
          v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
          v97 = vmulq_n_f32(v55, v93.f32[0]);
          v97.i32[3] = 0;
          v98 = vmlaq_n_f32(v97, v54, v87.f32[0]);
          v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
          v56 = vmlaq_n_f32(v98, v140, v92.f32[0]);
          v51.i32[1] = 0;
          v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
          v89 = vsubq_f32(v89, v96);
          v91 = vsubq_f32(v91, v56);
          *(float32x2_t *)v93.f32 = vmla_f32(vmul_f32(v135, *(float32x2_t *)v93.f32), *(float32x2_t *)v87.f32, v136);
          v87.i32[1] = v137.i32[1];
          v81 = vsub_f32(v81, vmla_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v92.f32, v137));
        }
        v56.i32[0] = 0;
        v99 = &_X16[5].f32[3];
        v100 = vld1_dup_f32(v99);
        v101 = &_X16[1].f32[3];
        v102 = vld1_dup_f32(v101);
        f32 = _X16[5].f32;
        v104 = vld1_dup_f32(f32);
        v105 = _X16[4].f32;
        v106 = vld1_dup_f32(v105);
        v87.i32[0] = _X16[4].i32[3];
        v107 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 0);
        v108 = &_X16[2].f32[3];
        v109 = vld1_dup_f32(v108);
        v110 = &_X16[4].f32[2];
        v111 = vld1_dup_f32(v110);
        v112 = &_X16[4].f32[1];
        v113 = vld1_dup_f32(v112);
        v51.i32[0] = _X16[5].i32[1] & 0x40;
        v114 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v51.f32, *(int32x2_t *)v56.f32), 0), (int8x8_t)vneg_f32(v104), (int8x8_t)0x80000000800000);
        v115 = vmulq_f32(v151, v89);
        v116 = (float32x2_t)vpaddq_f32(v115, v115).u64[0];
        v117 = vmulq_f32(v150, v91);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        v119 = vmulq_f32(v149, v69);
        v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
        v120 = vmulq_f32(v148, v70);
        v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
        v121 = vadd_f32(v81, vsub_f32(vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32), vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32)));
        v122 = vmulq_f32(v69, v69);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        v123 = vmulq_n_f32(v89, v8.f32[0]);
        v123.i32[3] = 0;
        v124 = vmulq_f32(v89, v123);
        v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
        *(float32x2_t *)v124.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32), vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), v152);
        v125 = vmulq_f32(v70, v70);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        v126 = vmulq_n_f32(v91, v10.f32[0]);
        v126.i32[3] = 0;
        v127 = vmulq_f32(v91, v126);
        v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
        v128 = vadd_f32(*(float32x2_t *)v124.f32, vsub_f32(vmul_n_f32(vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32), v9.f32[0]), vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32)));
        v129 = vrecpe_f32(v128);
        LODWORD(result) = 4;
        do
        {
          v129 = vmul_f32(v129, vrecps_f32(v128, v129));
          result = (uint64_t **)((_DWORD)result - 1);
        }
        while ((_DWORD)result);
        v130 = vmls_f32(vadd_f32(vmul_f32(v100, vsub_f32(vpadd_f32(v116, v116), v118)), v121), v154, v106);
        v131 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v128), 0), (int8x8_t)v129);
        *(float32x2_t *)v51.f32 = vmul_f32(v109, v131);
        v132 = vmul_f32(vadd_f32(v106, vmax_f32(vmin_f32(vmul_f32(v102, v130), v104), v114)), v131);
        v56 = vsubq_f32(vmlaq_f32(vmulq_f32(v18, v89), v69, v15), vmlaq_f32(vmulq_f32(v19, v91), v70, v16));
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        *(float32x2_t *)v56.f32 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
        v87.f32[0] = _X16[3].f32[3] * v87.f32[0];
        v133 = vmax_f32(vmin_f32(vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 0), vmla_f32(v132, *(float32x2_t *)v56.f32, *(float32x2_t *)v51.f32)), v111), v113);
        v134 = vsub_f32(v133, v107);
        v15 = vmlaq_n_f32(v15, v69, vmul_f32(v153, v134).f32[0]);
        v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
        v16 = vmlsq_lane_f32(v16, v70, vmul_f32(v9, v134), 0);
        v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
        v18 = vmlaq_n_f32(v18, v89, vmul_f32(v8, v134).f32[0]);
        v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
        v19 = vmlaq_n_f32(v19, v91, vmul_f32(v10, v134).f32[0]);
        _X16[4].i32[3] = v133.i32[0];
        v19.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
        ++v21;
        _X16 += 6;
      }
      while (v21 != v20);
    }
    *v13 = v15.i64[0];
    *v14 = v15.i32[2];
    v13[2] = v18.i64[0];
    *v17 = v18.i32[2];
    *v12 = v16.i64[0];
    *((_DWORD *)v12 + 2) = v16.i32[2];
    v12[2] = v19.i64[0];
    *((_DWORD *)v12 + 6) = v19.i32[2];
  }
  return result;
}

_BYTE *physx::Dy::conclude1DStep(_BYTE *result)
{
  int v1;
  uint64_t v2;

  if (result)
  {
    v1 = result[1];
    if (result[1])
    {
      v2 = 160;
      if (*result == 2)
        v2 = 96;
      _X10 = result + 272;
      do
      {
        __asm { PRFM            #0, [X10] }
        if ((*(_X10 - 12) & 4) == 0)
          *((_DWORD *)_X10 - 17) = 0;
        _X10 += v2;
        --v1;
      }
      while (v1);
    }
  }
  return result;
}

uint64_t physx::Dy::Articulation::setupSolverConstraintsTGS(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, double a6, float a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v29;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  int v42;
  int v43;
  _BOOL4 v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  _BOOL4 v53;
  float v54;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  unsigned __int16 *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  unsigned int v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  char v102;
  float v103;
  float v104;
  float v105;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _BOOL4 v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unsigned int v119;
  int v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  float32x2_t v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  int v132;
  float v133[4];
  float32x4_t v134[2];
  float32x4_t v135[3];

  v8 = 0;
  v9 = a1[1];
  v110 = *a1;
  v10 = *(unsigned __int16 **)(*a1 + 168);
  v11 = a1[10];
  v12 = *((unsigned __int8 *)a1 + 92);
  *a4 = 0;
  v115 = (uint64_t)v10;
  v13 = *v10;
  if (v13 >= 2)
  {
    v14 = a7;
    v8 = 0;
    v103 = 1.0 / a7;
    v15 = v11 + 144 * v12;
    v16 = v15 + 168;
    v17 = v15 + 251;
    v18 = 1;
    v19 = -0.5;
    __asm { FMOV            V0.2S, #-1.0 }
    v107 = _D0;
    v121 = a2;
    v114 = v9;
    v108 = v15;
    v109 = *v10;
    do
    {
      v25 = *(_QWORD *)(v9 + 40 * v18 + 24);
      v26 = v18 + 1;
      if (v18 + 1 < v13)
      {
        v27 = ~(v17 >> 5) + (v16 >> 5);
        _X9 = *(_QWORD *)(v9 + 40 * v26 + 24);
        v29 = ~((_X9 + 359) >> 5) + (_X9 >> 5);
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v29++, 1);
        }
        while (!_CF);
        _X9 = v15 + 84 * v26;
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v27++, 1);
        }
        while (!_CF);
      }
      if (*(_BYTE *)(v25 + 329) || *(_BYTE *)(v25 + 328))
      {
        v33 = (float *)(v15 + 84 * v18);
        v34 = v33[14];
        v35 = v33[17];
        if (v34 == 0.0)
        {
          v39 = 1.0;
          v37 = 0.0;
          v38 = 0.0;
        }
        else
        {
          v36 = sqrtf((float)((float)(v34 * v34) + 0.0) + (float)(v35 * v35));
          v37 = v34 / v36;
          v38 = 0.0 / v36;
          v39 = v35 / v36;
        }
        v40 = v33[15];
        v41 = v33[16];
        v133[0] = (float)((float)((float)(v34 * v39) - (float)(v35 * v37)) - (float)(v40 * v38)) + (float)(v38 * v41);
        v133[1] = (float)((float)((float)(v39 * v40) - (float)(v35 * v38)) - (float)(v41 * v37)) + (float)(v38 * v34);
        v133[2] = (float)((float)((float)(v39 * v41) - (float)(v35 * v38)) - (float)(v34 * v38)) + (float)(v37 * v40);
        v133[3] = (float)((float)((float)(v34 * v37) + (float)(v35 * v39)) + (float)(v40 * v38)) + (float)(v41 * v38);
        v42 = *(_DWORD *)(v25 + 344);
        v131 = *(_QWORD *)(v25 + 336);
        v132 = v42;
        v127 = 0.0;
        if (*(_BYTE *)(v25 + 328))
        {
          if (physx::Cm::ConeLimitHelper::getLimit((float *)&v131, v133, &v128, &v127))
          {
            if (*(float *)(v25 + 320) <= 0.0)
            {
              v44 = *(float *)(v25 + 324) > 0.0;
              v43 = 1;
            }
            else
            {
              v43 = 1;
              v44 = 1;
            }
          }
          else
          {
            v43 = 0;
            v44 = 0;
          }
          a2 = v121;
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
        v45 = (float *)(v15 + 84 * v18);
        v47 = v45[9];
        v46 = v45[10];
        a8.f32[0] = v19 + (float)(v46 * v46);
        v48 = v45[7];
        v49 = v45[8];
        v50 = (float)((float)(v49 * 0.0) + (float)(v48 * 2.0)) + (float)(v47 * 0.0);
        v125.f32[0] = (float)((float)(v46 * (float)((float)(v47 * -0.0) + (float)(v49 * 0.0))) + (float)(a8.f32[0] * 2.0))
                    + (float)(v48 * v50);
        v125.f32[1] = (float)((float)(v46 * (float)((float)(v48 * -0.0) + (float)(v47 * 2.0))) + (float)(a8.f32[0] * 0.0))
                    + (float)(v49 * v50);
        v126 = (float)((float)(v46 * (float)((float)(v49 * -2.0) + (float)(v48 * 0.0))) + (float)(a8.f32[0] * 0.0))
             + (float)(v47 * v50);
        if (v39 == -1.0)
        {
          if (v37 >= 0.0)
            v51 = 1.8447e19;
          else
            v51 = -1.8447e19;
        }
        else
        {
          v51 = v37 / (float)(v39 + 1.0);
        }
        if (*(_BYTE *)(v25 + 329))
        {
          v52 = *(float *)(v25 + 356);
          v53 = v51 < (float)((float)(*(float *)(v25 + 352) + v52) / (float)(1.0 - (float)(*(float *)(v25 + 352) * v52)));
          v54 = *(float *)(v25 + 348);
          a8.f32[0] = v54 - v52;
          v55 = v51 > (float)((float)(v54 - v52) / (float)((float)(v54 * v52) + 1.0));
        }
        else
        {
          v53 = 0;
          v55 = 0;
        }
        v56 = v44 + v43 + v53 + v55;
        if (v56)
        {
          v117 = v55;
          v57 = a3 + 48 * v8;
          *(_QWORD *)v57 = v110;
          v58 = v9 + 40 * v18;
          v60 = *(_DWORD *)(v58 + 32);
          v59 = (unsigned int *)(v58 + 32);
          *(_WORD *)(v57 + 16) = v60;
          *(_QWORD *)(v57 + 8) = v110;
          *(_WORD *)(v57 + 18) = v18;
          *(_WORD *)(v57 + 30) = (160 * v56 + 176) >> 4;
          v61 = (unsigned __int16 *)(v57 + 30);
          v62 = (160 * (_WORD)v56 + 207) & 0x1FE0;
          v63 = *(_QWORD *)(a2 + 8);
          v119 = v8;
          v120 = v44 + v43 + v53 + v55;
          v116 = v53;
          v112 = v44;
          if (v63 && (v64 = *(unsigned int *)(a2 + 16), (v64 + v62) <= 0x4000))
          {
            v66 = v63 + v64;
            v62 += v64;
          }
          else
          {
            v65 = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)a2, a5, (_DWORD *)(*(_QWORD *)a2 + 244), (int *)(*(_QWORD *)a2 + 240), 1);
            v56 = v120;
            a2 = v121;
            v66 = v65;
            *(_QWORD *)(v121 + 8) = v65;
          }
          v67 = 0;
          *(_DWORD *)(a2 + 16) = v62;
          v68 = a3 + 48 * v119;
          *(_QWORD *)(v68 + 32) = v66;
          *(_QWORD *)(v68 + 40) = 0;
          v69 = (_QWORD *)(v68 + 32);
          v70 = v66 + 176;
          *(_BYTE *)v66 = 4;
          *(_BYTE *)(v66 + 1) = v56;
          *(_BYTE *)(v66 + 2) = 0;
          *(_QWORD *)(v66 + 64) = v107;
          *(_OWORD *)(v66 + 32) = xmmword_2260E5D70;
          *(_OWORD *)(v66 + 48) = xmmword_2260E5D70;
          if (v43)
          {
            a8.f32[0] = v130 + v130;
            v72 = v33[2];
            v71 = v33[3];
            v73 = v19 + (float)(v71 * v71);
            v74 = v33[1];
            v75 = (float)((float)((float)(v129 + v129) * v74) + (float)(*v33 * (float)(v128 + v128)))
                + (float)(v72 * (float)(v130 + v130));
            v76 = (float)((float)(v71
                                * (float)((float)(v72 * (float)(v128 + v128)) - (float)(*v33 * (float)(v130 + v130))))
                        + (float)((float)(v129 + v129) * v73))
                + (float)(v74 * v75);
            v77 = (float)((float)(v71
                                * (float)((float)(*v33 * (float)(v129 + v129)) - (float)(v74 * (float)(v128 + v128))))
                        + (float)((float)(v130 + v130) * v73))
                + (float)(v72 * v75);
            v122 = (float)((float)(v71
                                 * (float)((float)(v74 * (float)(v130 + v130)) - (float)(v72 * (float)(v129 + v129))))
                         + (float)((float)(v128 + v128) * v73))
                 + (float)(*v33 * v75);
            v123 = v76;
            v124 = v77;
            physx::Dy::ArticulationHelper::createHardLimitTGS(v115, v114, v18, v70, (uint64_t)&v122, v127, v14, a8);
            if (v112)
            {
              v78 = v14;
              v79 = (float)(v125.f32[1] * v124) - (float)(v126 * v123);
              v80 = (float)(v126 * v122) - (float)(v125.f32[0] * v124);
              v81 = (float)(v125.f32[0] * v123) - (float)(v125.f32[1] * v122);
              v82 = (float)((float)(v80 * v80) + (float)(v79 * v79)) + (float)(v81 * v81);
              v83 = 0.0;
              v84 = 0.0;
              v85 = 0.0;
              if (v82 > 0.0)
              {
                v86 = 1.0 / sqrtf(v82);
                v83 = v79 * v86;
                v84 = v80 * v86;
                v85 = v81 * v86;
              }
              v104 = v84;
              v105 = v83;
              v113 = v85;
              v87 = *(float *)(v25 + 320);
              v88 = *(float *)(v25 + 324);
              *(_QWORD *)(v66 + 336) = 0;
              *(_DWORD *)(v66 + 344) = 0;
              *(_QWORD *)(v66 + 352) = 0;
              *(_DWORD *)(v66 + 360) = 0;
              *(float *)(v66 + 368) = v83;
              *(float *)(v66 + 372) = v84;
              *(float *)(v66 + 376) = v85;
              *(float *)(v66 + 384) = v83;
              *(float *)(v66 + 388) = v84;
              *(float *)(v66 + 392) = v85;
              *(_DWORD *)(v66 + 404) = -8388609;
              *(_DWORD *)(v66 + 420) = 0;
              *(_QWORD *)(v66 + 408) = 2139095039;
              *(_DWORD *)(v66 + 428) = 1065353216;
              v89 = *v59;
              v135[0] = 0uLL;
              v90.i64[0] = __PAIR64__(LODWORD(v84), LODWORD(v83));
              v90.i64[1] = LODWORD(v85);
              v135[1] = v90;
              v91.i32[3] = 0;
              v91.f32[0] = -v83;
              v91.f32[1] = -v84;
              v91.f32[2] = -v85;
              v134[0] = (float32x4_t)xmmword_2261A71A0;
              v134[1] = v91;
              physx::Dy::ArticulationHelper::getImpulseSelfResponse(v115, v89, v135, (float32x4_t *)(v66 + 432), v18, v134, (float32x4_t *)(v66 + 464));
              v95 = (float)((float)((float)(v104 * *(float *)(v66 + 452)) + (float)(v105 * *(float *)(v66 + 448)))
                          + (float)(v113 * *(float *)(v66 + 456)))
                  - (float)((float)((float)(v104 * *(float *)(v66 + 484)) + (float)(v105 * *(float *)(v66 + 480)))
                          + (float)(v113 * *(float *)(v66 + 488)));
              if (v95 < 0.0)
                physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSContactPrep.cpp", 2965, "Warning: articulation ill-conditioned or under severe stress, tangential spring ignored", v92, v93, v94, v102);
              v96 = 1.0 / v95;
              v97 = (float)(v103 * v88) + (float)((float)(v103 * v103) * v87);
              a8.f32[0] = 1.0 / (float)(v97 + 1.0);
              *(_DWORD *)(v66 + 348) = 0;
              *(_DWORD *)(v66 + 364) = 0;
              *(_DWORD *)(v66 + 416) = 0;
              *(float *)(v66 + 380) = -(float)(a8.f32[0] * v97);
              *(float *)(v66 + 396) = 1.0 - a8.f32[0];
              if (v95 <= 0.0)
                v96 = 0.0;
              *(_DWORD *)(v66 + 400) = 0;
              *(float *)(v66 + 424) = v96;
              v67 = 2;
              v14 = v78;
              v19 = -0.5;
            }
            else
            {
              v67 = 1;
            }
            a2 = v121;
            v56 = v120;
            v70 = v66 + 176;
          }
          if (v117)
          {
            v98 = v67 + 1;
            v99 = v70;
            v9 = v114;
            physx::Dy::ArticulationHelper::createHardLimitTGS(v115, v114, v18, v70 + 160 * v67, (uint64_t)&v125, (float)(*(float *)(v25 + 348) - v51) * 4.0, v14, a8);
            a2 = v121;
            v67 = v98;
            v100 = v119;
            v56 = v120;
          }
          else
          {
            v99 = v70;
            v100 = v119;
            v9 = v114;
          }
          v26 = v18 + 1;
          if (v116)
          {
            *(float32x2_t *)v135[0].f32 = vneg_f32(v125);
            v135[0].f32[2] = -v126;
            physx::Dy::ArticulationHelper::createHardLimitTGS(v115, v9, v18, v99 + 160 * v67, (uint64_t)v135, (float)(*(float *)(v25 + 352) - v51) * -4.0, v14, a8);
            v56 = v120;
            a2 = v121;
          }
          v8 = v100 + 1;
          *(_BYTE *)(*v69 + 16 * *v61) = 0;
          *a4 += v56;
          v15 = v108;
          v13 = v109;
        }
        else
        {
          v26 = v18 + 1;
        }
      }
      v16 += 84;
      v17 += 84;
      v18 = v26;
    }
    while (v26 != v13);
  }
  return v8;
}

double physx::Dy::ArticulationHelper::createHardLimitTGS(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float a6, float a7, float32x4_t a8)
{
  unsigned int v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  double result;
  float32x4_t v20[2];
  float32x4_t v21[2];

  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)a5;
  *(_DWORD *)(a4 + 40) = *(_DWORD *)(a5 + 8);
  *(_QWORD *)(a4 + 48) = *(_QWORD *)a5;
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a5 + 8);
  *(_QWORD *)(a4 + 68) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a4 + 84) = 0;
  *(_DWORD *)(a4 + 76) = 0;
  *(_DWORD *)(a4 + 92) = 1065353216;
  v12 = *(_DWORD *)(a2 + 40 * a3 + 32);
  a8.i64[0] = *(_QWORD *)a5;
  v13.i64[0] = vnegq_f32(a8).u64[0];
  a8.i64[1] = *(unsigned int *)(a5 + 8);
  v13.f32[2] = -a8.f32[2];
  v21[0] = 0u;
  v21[1] = a8;
  v13.i32[3] = 0;
  v20[0] = 0u;
  v20[1] = v13;
  physx::Dy::ArticulationHelper::getImpulseSelfResponse(a1, v12, v21, (float32x4_t *)(a4 + 96), a3, v20, (float32x4_t *)(a4 + 128));
  v17 = (float)((float)((float)(*(float *)(a5 + 4) * *(float *)(a4 + 116)) + (float)(*(float *)a5 * *(float *)(a4 + 112)))
              + (float)(*(float *)(a5 + 8) * *(float *)(a4 + 120)))
      - (float)((float)((float)(*(float *)(a5 + 4) * *(float *)(a4 + 148)) + (float)(*(float *)a5 * *(float *)(a4 + 144)))
              + (float)(*(float *)(a5 + 8) * *(float *)(a4 + 152)));
  if (v17 < 0.0)
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSContactPrep.cpp", 2935, "Warning: articulation ill-conditioned or under severe stress, joint limit ignored", v14, v15, v16, v20[0].i8[0]);
  v18 = 1.0 / v17;
  if (v17 <= 0.0)
    v18 = 0.0;
  *(float *)(a4 + 12) = a6;
  *(float *)(a4 + 28) = a7 * -0.7;
  *(_DWORD *)(a4 + 80) = 2139095039;
  *(_DWORD *)(a4 + 44) = -1082130432;
  *(float *)(a4 + 88) = v18;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a4 + 60) = 1065353216;
  return result;
}

char *physx::Dy::solveExtContactStep(char *result, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, int32x2_t a9, int32x2_t a10, float32x4_t *a11, float32x4_t *a12, float32x4_t *a13, float32x4_t *a14, float32x4_t *a15, char a16)
{
  int8x16_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t *v20;
  float32x4_t v21;
  float32x2_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  const float *v35;
  float32x4_t v36;
  float32x2_t v37;
  uint64_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v46;
  float32x4_t v47;
  const float *v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  const float *v53;
  float32x2_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  const float *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  char *v70;
  int8x16_t v71;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x2_t v85;
  int8x16_t v86;
  float v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;

  if (*((_WORD *)result + 15))
  {
    v18 = (float32x2_t)vdup_lane_s32(a10, 0);
    _X16 = (float32x4_t *)*((_QWORD *)result + 4);
    v20 = &_X16[*((unsigned __int16 *)result + 15)];
    v21 = vsubq_f32(*a6, *a7);
    v22 = (float32x2_t)vdup_lane_s32(a9, 0);
    do
    {
      v23 = _X16->u8[2];
      v24 = _X16->u8[3];
      __asm { PRFM            #0, [X16,#0x50] }
      v30 = 112 * _X16->u8[2];
      if (_X16->i8[2])
      {
        v31 = 0;
        v32.i64[0] = _X16[2].i64[0];
        v32.i64[1] = _X16[2].u32[2];
        v33 = vmulq_f32(v32, vsubq_f32(*a6, *a7));
        v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
        v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
        v35 = &_X16[2].f32[3];
        *(float32x2_t *)v33.f32 = vld1_dup_f32(v35);
        v36 = *a11;
        v37 = vneg_f32(*(float32x2_t *)v33.f32);
        v38 = v30 + 80;
        v39 = 0;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        do
        {
          _X22 = &_X16[v31 / 0x10];
          __asm { PRFM            #0, [X22,#0xC0] }
          v46.i64[0] = _X16[v31 / 0x10 + 5].i64[0];
          v46.i64[1] = _X16[v31 / 0x10 + 5].u32[2];
          v47.i64[0] = _X16[v31 / 0x10 + 6].i64[0];
          v47.i64[1] = _X16[v31 / 0x10 + 6].u32[2];
          v48 = (const float *)((char *)_X16->f32 + v38);
          v49 = vld1_dup_f32(v48);
          v50 = vsubq_f32(vmlaq_f32(vmulq_f32(v46, *a4), v32, *a2), vmlaq_f32(vmulq_f32(v47, *a5), v32, *a3));
          v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
          v51 = vmulq_f32(v46, *a8);
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          v52 = vmulq_f32(v36, v47);
          v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
          v17.i32[0] = _X16[v31 / 0x10 + 7].i32[0];
          v53 = &_X16[v31 / 0x10 + 5].f32[3];
          v54 = vld1_dup_f32(v53);
          *(float32x2_t *)v50.f32 = vmax_f32(vmul_n_f32(vsub_f32(vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 0), vmin_f32(v37, vmul_n_f32(vmax_f32(v22, vadd_f32(vsub_f32(vadd_f32(v34, vsub_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32))), vmul_n_f32(v18, v17.f32[0])), v54)), _X16[v31 / 0x10 + 7].f32[1]))),
                                          vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32)),
                                        _X16[v31 / 0x10 + 6].f32[3]),
                                      vneg_f32(v49));
          v55 = (int8x16_t)vmlaq_n_f32(*a2, _X16[v31 / 0x10 + 8], v50.f32[0]);
          v56 = _X16[v31 / 0x10 + 10];
          v17 = _X16[v31 / 0x10 + 11];
          v55.i64[1] = vextq_s8(v55, v55, 8uLL).u32[0];
          *a2 = (float32x4_t)v55;
          v57 = (int8x16_t)vmlaq_n_f32(*a4, v56, v50.f32[0]);
          v57.i64[1] = vextq_s8(v57, v57, 8uLL).u32[0];
          *a4 = (float32x4_t)v57;
          v58 = (int8x16_t)vmlaq_n_f32(*a3, _X16[v31 / 0x10 + 9], v50.f32[0]);
          v58.i64[1] = vextq_s8(v58, v58, 8uLL).u32[0];
          *a3 = (float32x4_t)v58;
          v16 = (int8x16_t)vmlaq_n_f32(*a5, v17, v50.f32[0]);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u32[0];
          *a5 = (float32x4_t)v16;
          v40 = vmlaq_n_f32(v40, v32, v50.f32[0]);
          v16.i32[1] = 0;
          v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
          v42 = vmlaq_n_f32(v42, v46, v50.f32[0]);
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          v41 = vmlaq_n_f32(v41, v32, v50.f32[0]);
          v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
          v43 = vmlaq_n_f32(v43, v47, v50.f32[0]);
          v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
          v59 = vadd_f32(v49, *(float32x2_t *)v50.f32);
          *(__int32 *)((char *)_X16->i32 + v38) = v59.i32[0];
          v39 = vadd_f32(v39, v59);
          v31 += 112;
          v38 += 4;
        }
        while (v30 != v31);
      }
      else
      {
        v39 = 0;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
      }
      v60 = (4 * (_WORD)v23 + 12) & 0x7F0;
      result = (char *)&_X16[7 * v23 + 5] + v60;
      if (a16 && (_DWORD)v24)
      {
        v61 = 0;
        v62 = &_X16[3].f32[1];
        v63 = vld1_dup_f32(v62);
        v64 = vmax_f32(v39, v63);
        __asm { PRFM            #0, [X0] }
        v66 = *(float32x2_t *)_X16[1].f32;
        v67 = vmul_n_f32(v64, v66.f32[0]);
        v68 = vmul_lane_f32(v64, v66, 1);
        v69 = vneg_f32(v68);
        v70 = (char *)&_X16[(unint64_t)v30 / 0x10] + v60;
        v71 = 0uLL;
        do
        {
          _X22 = &v70[v61];
          __asm { PRFM            #0, [X22,#0xD0] }
          v74 = *(float32x4_t *)&v70[v61 + 80];
          v75 = *(float32x4_t *)&v70[v61 + 96];
          v76 = v75;
          v77 = *(float32x4_t *)&v70[v61 + 112];
          v76.i32[3] = 0;
          v77.i32[3] = 0;
          v16.i32[0] = *(_DWORD *)&v70[v61 + 132];
          v78 = (float32x2_t)vdup_laneq_s32((int32x4_t)v75, 3);
          v79 = (float32x2_t)vdup_laneq_s32((int32x4_t)v74, 3);
          v74.i32[3] = 0;
          v80 = vmulq_f32(v76, *a8);
          v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
          v81 = vmulq_f32(v77, *a11);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          v82 = vmulq_f32(v21, v74);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          v83 = vadd_f32(v79, vmla_laneq_f32(vadd_f32(vsub_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32)), vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32)), v18, v75, 3));
          v84 = vsubq_f32(vmlaq_f32(vmulq_f32(v76, *a4), v74, *a2), vmlaq_f32(vmulq_f32(v77, *a5), v74, *a3));
          v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
          v85 = vmls_laneq_f32(vmls_laneq_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 0), vsub_f32(vmul_n_f32(v83, *(float *)&v70[v61 + 128]), v78), *(float32x4_t *)&v70[v61 + 112], 3), vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), *(float32x4_t *)&v70[v61 + 112], 3);
          v86 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v85), v67), 0);
          *(int8x8_t *)v84.f32 = vbsl_s8(*(int8x8_t *)v86.i8, (int8x8_t)vmin_f32(v68, vmax_f32(v69, v85)), (int8x8_t)v85);
          LODWORD(v87) = vsub_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v16.i8).u32[0];
          v88 = (int8x16_t)vmlaq_n_f32(*a2, *(float32x4_t *)&v70[v61 + 144], v87);
          v88.i64[1] = vextq_s8(v88, v88, 8uLL).u32[0];
          v89 = *(float32x4_t *)&v70[v61 + 176];
          v90 = *(float32x4_t *)&v70[v61 + 192];
          *a2 = (float32x4_t)v88;
          v91 = (int8x16_t)vmlaq_n_f32(*a4, v89, v87);
          v91.i64[1] = vextq_s8(v91, v91, 8uLL).u32[0];
          *a4 = (float32x4_t)v91;
          v17 = vmlaq_n_f32(*a3, *(float32x4_t *)&v70[v61 + 160], v87);
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          v71 = vorrq_s8(v86, v71);
          *a3 = v17;
          v40 = vmlaq_n_f32(v40, v74, v87);
          v16 = (int8x16_t)vmlaq_n_f32(*a5, v90, v87);
          v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
          v42 = vmlaq_n_f32(v42, v76, v87);
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          v41 = vmlaq_n_f32(v41, v74, v87);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u32[0];
          v43 = vmlaq_n_f32(v43, v77, v87);
          v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
          *a5 = (float32x4_t)v16;
          v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
          *((_DWORD *)_X22 + 33) = v84.i32[0];
          v61 += 128;
        }
        while (v24 << 7 != v61);
        _X16[3].i32[2] = v71.i32[0];
      }
      v92 = (int8x16_t)vmlaq_laneq_f32(*a12, v40, _X16[1], 2);
      v92.i64[1] = vextq_s8(v92, v92, 8uLL).u32[0];
      *a12 = (float32x4_t)v92;
      v93 = (int8x16_t)vmlaq_n_f32(*a14, v42, _X16->f32[1]);
      v93.i64[1] = vextq_s8(v93, v93, 8uLL).u32[0];
      *a14 = (float32x4_t)v93;
      v94 = (int8x16_t)vmlsq_laneq_f32(*a13, v41, _X16[1], 3);
      v94.i64[1] = vextq_s8(v94, v94, 8uLL).u32[0];
      *a13 = (float32x4_t)v94;
      v95 = (int8x16_t)vmlsq_lane_f32(*a15, v43, (float32x2_t)_X16->u32[2], 0);
      v95.i64[1] = vextq_s8(v95, v95, 8uLL).u32[0];
      *a15 = (float32x4_t)v95;
      _X16 = (float32x4_t *)&result[128 * v24];
    }
    while (_X16 < v20);
  }
  return result;
}

_DWORD *physx::Dy::solveExtContactStep(char *a1, uint64_t a2, float a3, float32_t a4)
{
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  _DWORD *result;
  uint64_t v18;
  __int32 v19;
  uint64_t v20;
  __int32 v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  uint64_t v25;
  __int32 v26;
  float32x4_t v27[2];
  float32x4_t v28[2];
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v8 = *(_QWORD *)a1;
  if (v8 == *((_QWORD *)a1 + 1))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, float32x4_t *, float32x4_t *))(*(_QWORD *)v8 + 304))(v8, *((unsigned __int16 *)a1 + 8), *((unsigned __int16 *)a1 + 9), &v31, &v29);
    v39 = v32;
    v40 = v31;
    v37 = v30;
    v38 = v29;
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 240))(v28, *(_QWORD *)a1, *((unsigned __int16 *)a1 + 8));
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 240))(v27, *((_QWORD *)a1 + 1), *((unsigned __int16 *)a1 + 9));
    v35 = v28[1];
    v36 = v28[0];
    v13 = v27[0];
    v14 = v27[1];
LABEL_8:
    v34 = v13;
    v33 = v14;
    goto LABEL_10;
  }
  if (*((unsigned __int16 *)a1 + 8) == 0xFFFF)
  {
    v9.i64[0] = *(_QWORD *)v8;
    v9.i64[1] = *(unsigned int *)(v8 + 8);
    v10.i64[0] = *(_QWORD *)(v8 + 16);
    v10.i64[1] = *(unsigned int *)(v8 + 24);
    v11.i64[0] = *(_QWORD *)(v8 + 48);
    v11.i64[1] = *(unsigned int *)(v8 + 56);
    v12.i64[0] = *(_QWORD *)(v8 + 32);
    v12.i64[1] = *(unsigned int *)(v8 + 40);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)v8 + 312))(&v31);
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 240))(&v29, *(_QWORD *)a1, *((unsigned __int16 *)a1 + 8));
    v9 = v31;
    v10 = v32;
    v11 = v29;
    v12 = v30;
  }
  v39 = v10;
  v40 = v9;
  v35 = v12;
  v36 = v11;
  if (*((unsigned __int16 *)a1 + 9) != 0xFFFF)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**((_QWORD **)a1 + 1) + 312))(&v31);
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 240))(&v29, *((_QWORD *)a1 + 1), *((unsigned __int16 *)a1 + 9));
    v37 = v32;
    v38 = v31;
    v13 = v29;
    v14 = v30;
    goto LABEL_8;
  }
  v15 = *((_QWORD *)a1 + 1);
  v16.i64[0] = *(_QWORD *)v15;
  v16.i64[1] = *(unsigned int *)(v15 + 8);
  v14.i64[0] = *(_QWORD *)(v15 + 16);
  v14.i64[1] = *(unsigned int *)(v15 + 24);
  v37 = v14;
  v38 = v16;
  v16.i64[0] = *(_QWORD *)(v15 + 48);
  v16.i64[1] = *(unsigned int *)(v15 + 56);
  v34 = v16;
  v16.i64[0] = *(_QWORD *)(v15 + 32);
  v16.i64[1] = *(unsigned int *)(v15 + 40);
  v33 = v16;
LABEL_10:
  v31 = 0u;
  v29 = 0u;
  v28[0] = 0u;
  v27[0] = 0u;
  v14.f32[0] = a4;
  physx::Dy::solveExtContactStep(a1, &v40, &v38, &v39, &v37, &v36, &v34, &v35, (int32x2_t)LODWORD(a3), *(int32x2_t *)v14.f32, &v33, &v31, &v29, v28, v27, 1);
  result = *(_DWORD **)a1;
  v18 = *((unsigned __int16 *)a1 + 8);
  if (*(_QWORD *)a1 == *((_QWORD *)a1 + 1))
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, float32x4_t *, float32x4_t *, _QWORD, float32x4_t *, float32x4_t *, _QWORD, _QWORD))(*(_QWORD *)result + 264))(result, v18, &v31, v28, *((unsigned __int16 *)a1 + 9), &v29, v27, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  if ((_DWORD)v18 == 0xFFFF)
  {
    v19 = v40.i32[2];
    *(_QWORD *)result = v40.i64[0];
    result[2] = v19;
    v20 = *(_QWORD *)a1;
    v21 = v39.i32[2];
    *(_QWORD *)(v20 + 16) = v39.i64[0];
    *(_DWORD *)(v20 + 24) = v21;
  }
  else
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD, _QWORD, float32x4_t, float32x4_t))(*(_QWORD *)result + 256))(result, v18, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v31, v28[0]);
  }
  v22 = *((unsigned __int16 *)a1 + 9);
  if ((_DWORD)v22 != 0xFFFF)
    return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, float32x4_t, float32x4_t))(**((_QWORD **)a1 + 1) + 256))(*((_QWORD *)a1 + 1), v22, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v29, v27[0]);
  v23 = *((_QWORD *)a1 + 1);
  v24 = v38.i32[2];
  *(_QWORD *)v23 = v38.i64[0];
  *(_DWORD *)(v23 + 8) = v24;
  v25 = *((_QWORD *)a1 + 1);
  v26 = v37.i32[2];
  *(_QWORD *)(v25 + 16) = v37.i64[0];
  *(_DWORD *)(v25 + 24) = v26;
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::setSimulationController(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t physx::Dy::ArticulationBlockAllocator::reserveConstraintData(physx::Dy::ArticulationBlockAllocator *this, int a2)
{
  return physx::Dy::BlockBasedAllocator::allocate((physx::Dy::ArticulationBlockAllocator *)((char *)this + 8), a2);
}

uint64_t physx::Dy::ArticulationBlockAllocator::reserveFrictionData(physx::Dy::ArticulationBlockAllocator *this)
{
  uint64_t (***v1)(uint64_t);

  v1 = (uint64_t (***)(uint64_t))((char *)this + 40 * *((unsigned int *)this + 32));
  return (*v1[6])((uint64_t)(v1 + 6));
}

void physx::Dy::ArticulationBlockAllocator::~ArticulationBlockAllocator(physx::Dy::ArticulationBlockAllocator *this)
{
  physx::Dy::ArticulationBlockAllocator::~ArticulationBlockAllocator(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t i;

  *(_QWORD *)this = off_24ED8D678;
  for (i = 88; i != 8; i -= 40)
    physx::Dy::BlockBasedAllocator::~BlockBasedAllocator((physx::Dy::ArticulationBlockAllocator *)((char *)this + i));
  physx::Dy::BlockBasedAllocator::~BlockBasedAllocator((physx::Dy::ArticulationBlockAllocator *)((char *)this + 8));
}

uint64_t physx::Dy::BlockBasedAllocator::allocate(physx::Dy::BlockBasedAllocator *this, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v5 = (_QWORD *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 0x8000);
    v7 = *(unsigned int *)(v4 + 0x8000);
    v8 = v7 + ((a2 + 15) & 0xFFFFFFF0);
    if (!(v8 >> 15))
      goto LABEL_14;
  }
  v9 = *((unsigned int *)this + 8);
  if (v9 >= *((_DWORD *)this + 6))
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 32772, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 1518);
    *(_DWORD *)(v13 + 0x8000) = 0;
    *((_QWORD *)this + 1) = v13;
    v14 = *((unsigned int *)this + 6);
    if ((*((_DWORD *)this + 7) & 0x7FFFFFFFu) <= v14)
    {
      physx::shdfnd::Array<physx::Dy::BlockBasedAllocator::AllocationPage *,physx::shdfnd::ReflectionAllocator<physx::Dy::BlockBasedAllocator::AllocationPage *>>::growAndPushBack((uint64_t)this + 16, v5);
      v15 = *((_DWORD *)this + 6);
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v14) = v13;
      v15 = v14 + 1;
      *((_DWORD *)this + 6) = v15;
    }
    *((_DWORD *)this + 8) = v15;
    v4 = *((_QWORD *)this + 1);
    v6 = (unsigned int *)(v4 + 0x8000);
    v7 = *(unsigned int *)(v4 + 0x8000);
    v8 = v7 + ((a2 + 15) & 0xFFFFFFF0);
    if (v8 >> 15)
      return 0;
LABEL_14:
    result = v4 + v7;
    *v6 = v8;
    return result;
  }
  *((_DWORD *)this + 8) = v9 + 1;
  v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v9);
  *((_QWORD *)this + 1) = v10;
  if (((a2 + 15) & 0xFFFF8000) != 0)
    v11 = 0;
  else
    v11 = (a2 + 15) & 0xFFFFFFF0;
  *(_DWORD *)(v10 + 0x8000) = v11;
  if (((a2 + 15) & 0xFFFF8000) != 0)
    return 0;
  else
    return v10;
}

void physx::Dy::BlockBasedAllocator::~BlockBasedAllocator(physx::Dy::BlockBasedAllocator *this)
{
  physx::Dy::BlockBasedAllocator::~BlockBasedAllocator(this);
  JUMPOUT(0x2276933B8);
}

{
  int v2;

  *(_QWORD *)this = &off_24ED8D6C0;
  physx::Dy::BlockBasedAllocator::release((uint64_t)this);
  v2 = *((_DWORD *)this + 7);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 2) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::shdfnd::Array<physx::Dy::BlockBasedAllocator::AllocationPage *,physx::shdfnd::ReflectionAllocator<physx::Dy::BlockBasedAllocator::AllocationPage *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::BlockBasedAllocator::AllocationPage *>::getN"
           "ame() [T = physx::Dy::BlockBasedAllocator::AllocationPage *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::Dy::BlockBasedAllocator::release(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;

  v1 = this;
  v2 = *(unsigned int *)(this + 24);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i))
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v2 = *(unsigned int *)(v1 + 24);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

void physx::Dy::UpdateContinuationTGSTask::~UpdateContinuationTGSTask(physx::Dy::UpdateContinuationTGSTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::UpdateContinuationTGSTask::getName(physx::Dy::UpdateContinuationTGSTask *this)
{
  return "UpdateContinuationTask";
}

uint64_t physx::Dy::UpdateContinuationTGSTask::runInternal(physx::Dy::UpdateContinuationTGSTask *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int32x2_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  physx::Dy::ThreadContext *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  physx::Dy::ThreadContext *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int32 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  int32x2_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t i;
  uint64_t v162;

  v2 = *((_QWORD *)this + 5);
  v1 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 7);
  v128 = *(_QWORD *)(v1 + 544);
  v5 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 776), 48, 0x10u);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v2 + 800);
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  *(_QWORD *)v5 = &off_24ED8D7D8;
  *(_QWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 32) = 1;
  *(_QWORD *)(v5 + 24) = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v126 = v5;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = *(unsigned int *)(v1 + 552);
  if ((_DWORD)v6)
  {
    v146 = 0;
    v7 = 0;
    v147 = 0;
    v145 = 0;
    v8 = 0;
    v9 = *(_DWORD *)(v2 + 140);
    v10 = *(_DWORD *)(v2 + 144);
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 1;
    v12 = !v11;
    v122 = v12;
    v123 = *(_DWORD *)(v2 + 144);
    v120 = v2 + 104;
    v121 = v2 + 720;
    v127 = v2;
    v125 = *(unsigned int *)(v1 + 552);
    v124 = *(_DWORD *)(v2 + 140);
    do
    {
      v148 = v8;
      if (v122)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)(v1 + 344) + 44 * *(unsigned int *)(v128 + 4 * v8 + 4 * v13);
          v14 += *(_DWORD *)(v17 + 8);
          v15 += *(_DWORD *)(v17 + 12);
          v16 = vadd_s32(*(int32x2_t *)(v17 + 36), v16);
          ++v13;
        }
        while (v14 < v9 && v13 + (unint64_t)v8 < v6 && v15 < v10);
        v140 = v14;
        v142 = v15;
        v139 = v8 + v13;
        v141 = v16;
        v129 = vadd_s32(v16, vdup_lane_s32(v16, 1)).u32[0];
      }
      else
      {
        v129 = 0;
        v142 = 0;
        v139 = v8;
        v140 = 0;
        v141 = 0;
      }
      v20 = *(_QWORD *)(v2 + 560);
      v150 = *(_QWORD *)(v2 + 544);
      v152 = *(_QWORD *)(v2 + 688);
      v156 = *(_QWORD *)(v2 + 464);
      v159 = *(_QWORD *)(v2 + 448);
      v21 = *(_QWORD *)(v2 + 496);
      v22 = *(_QWORD *)(v2 + 480);
      v23 = *(_QWORD *)(v2 + 512);
      v24 = *(_QWORD *)(v2 + 528);
      v143 = *(_QWORD *)(v2 + 656);
      v25 = *(_QWORD *)(v2 + 672);
      v26 = *(_DWORD *)(v2 + 704);
      v27 = (physx::Dy::ThreadContext *)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 432));
      v28 = v150;
      v29 = v152;
      v30 = v24;
      v31 = v26;
      v32 = v25;
      v33 = v27;
      v34 = v156;
      v35 = v159;
      if (!v33)
      {
        v136 = v23;
        v36 = v32;
        v37 = v7;
        v38 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v39 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::D"
                "y::ThreadContext]";
        else
          v39 = "<allocation names disabled>";
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v38 + 24)
                                                                                               + 16))(v38 + 24, 12343, v39, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
        if (v40)
        {
          v33 = (physx::Dy::ThreadContext *)((v40 + 23) & 0xFFFFFFFFFFFFFFF0);
          *((_QWORD *)v33 - 1) = (char *)v33 - v40;
        }
        else
        {
          v33 = 0;
        }
        v7 = v37;
        v2 = v127;
        physx::Dy::ThreadContext::ThreadContext(v33, *(physx::PxcNpMemBlockPool **)(v127 + 440));
        v32 = v36;
        v31 = v26;
        v23 = v136;
        v30 = v24;
        v34 = v156;
        v35 = v159;
        v28 = v150;
        v29 = v152;
      }
      v151 = (uint64_t)v33;
      v160 = v20 + 8 * v147;
      v41 = v28 + 8 * v145;
      v138 = v7;
      v130 = v29 + 32 * v7;
      v153 = v35 + 48 * v146;
      v133 = v34 + 48 * v146;
      v42 = v22 + 48 * v146;
      v43 = v23 + 32 * v145;
      v132 = v30 + 8 * v145;
      v44 = v31 + v145;
      v45 = v32 + 4 * v145;
      v46 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 776), 192, 0x10u);
      *(_QWORD *)v46 = v151;
      *(_DWORD *)(v46 + 8) = v140;
      v47 = v46 + 8;
      *(_DWORD *)(v46 + 12) = v142 & 0x7FFFFFFF;
      *(int32x2_t *)(v46 + 16) = v141;
      *(_QWORD *)(v46 + 24) = v41;
      v48 = v46;
      *(_QWORD *)(v46 + 32) = v160;
      *(_QWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = v130;
      *(_QWORD *)(v46 + 56) = v128 + 4 * v148;
      *(_DWORD *)(v46 + 64) = v139 - v148;
      *(_QWORD *)(v46 + 72) = v143;
      *(_QWORD *)(v46 + 80) = v45;
      *(_QWORD *)(v46 + 88) = v153;
      *(_QWORD *)(v46 + 96) = v133;
      *(_QWORD *)(v46 + 104) = v42;
      *(_QWORD *)(v46 + 112) = v21 + 8 * v146;
      *(_QWORD *)(v46 + 120) = v43;
      *(_QWORD *)(v46 + 128) = v132;
      *(_QWORD *)(v46 + 144) = 0;
      v49 = v46 + 144;
      v50 = v46 + 148;
      v134 = v44;
      *(_DWORD *)(v46 + 136) = v44;
      *(_QWORD *)(v151 + 12240) = 0;
      *(_DWORD *)(v151 + 12212) = 0;
      *(_QWORD *)(v151 + 12264) = *(_QWORD *)(v151 + 12016);
      *(_QWORD *)(v151 + 12280) = *(_QWORD *)(v151 + 12064);
      *(_DWORD *)(v151 + 12048) = 0;
      *(_DWORD *)(v151 + 12024) = 0;
      *(_QWORD *)(v151 + 11912) = 0;
      *(_QWORD *)(v151 + 11904) = 0;
      *(_QWORD *)(v151 + 11896) = 0;
      v51 = *(_QWORD *)(v46 + 128);
      *(_QWORD *)(v151 + 11992) = *(_QWORD *)(v46 + 120);
      *(_QWORD *)(v151 + 11968) = v51;
      v149 = v46 + 24;
      *(_OWORD *)(v151 + 11976) = *(_OWORD *)(v46 + 24);
      *(_OWORD *)(v151 + 12000) = *(_OWORD *)(v46 + 72);
      physx::Dy::ThreadContext::resizeArrays(v151, 0, *(_DWORD *)(v46 + 12) & 0x7FFFFFFF);
      v52 = *(unsigned int *)(v48 + 64);
      v135 = v48;
      v137 = v47;
      v131 = v50;
      if ((_DWORD)v52)
      {
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = *(_QWORD *)(v151 + 11968);
        v57 = *(_QWORD *)(v151 + 11976);
        v58 = *(_QWORD *)(v151 + 11984);
        v59 = *(_QWORD *)(v151 + 12000);
        v60 = *(_QWORD *)(v151 + 12008);
        v61 = *(_QWORD *)(v48 + 56);
        do
        {
          v62 = *(_DWORD *)(*(_QWORD *)(v1 + 344) + 44 * *(unsigned int *)(v61 + 4 * v53));
          if (v62 <= 0xFFFFFF7F)
          {
            do
            {
              v63 = v62 >> 7;
              v64 = *(_QWORD *)(v1 + 248);
              v65 = v64 + 32 * v63;
              v66 = *(unsigned __int8 *)(v65 + 5);
              v67 = *(_QWORD *)(v65 + 24);
              if (v66 == 1)
              {
                *(_QWORD *)(v58 + 8 * v55++) = v67;
              }
              else
              {
                *(_QWORD *)(v57 + 8 * v54) = v67;
                *(_QWORD *)(v56 + 8 * v54) = *(_QWORD *)(v67 + 40);
                *(_DWORD *)(v60 + 4 * v54) = v63;
                *(_DWORD *)(v59 + 4 * *(unsigned int *)(*(_QWORD *)(v1 + 264) + 4 * v63)) = v54++;
              }
              v62 = *(_DWORD *)(v64 + 32 * v63 + 8);
            }
            while (v62 < 0xFFFFFF80);
          }
          ++v53;
        }
        while (v53 != v52);
        v68 = 0;
        v69 = 0;
        v70 = *(_QWORD *)(v48 + 48);
        v154 = v61;
        v157 = v52;
        do
        {
          v71 = *(_DWORD *)(*(_QWORD *)(v1 + 344) + 44 * *(unsigned int *)(v61 + 4 * v68) + 20);
          for (i = v68; v71 != -1; v71 = *(_DWORD *)(v73 + 16 * (v71 % v72) + 8))
          {
            v72 = *(_DWORD *)(v1 + 304);
            v73 = *(_QWORD *)(*(_QWORD *)(v1 + 280) + 8 * (v71 / v72));
            v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 176) + 8 * (v71 / *(_DWORD *)(v1 + 200)))
                            + 8 * (v71 % *(_DWORD *)(v1 + 200)));
            if (v74)
            {
              v75 = *(uint64_t **)(v1 + 832);
              v76 = *((_DWORD *)v75 + 6);
              v77 = *v75;
              v78 = *(unsigned int *)(*(_QWORD *)(*v75 + 8 * (2 * v71 / v76)) + 4 * (2 * v71 % v76));
              v79 = *(unsigned int *)(*(_QWORD *)(v77 + 8 * (((2 * v71) | 1) / v76)) + 4 * (((2 * v71) | 1) % v76));
              v80 = v70 + 32 * v69;
              *(_QWORD *)(v80 + 24) = v74;
              v81 = v78 >> 7;
              v82 = *(_QWORD *)(v1 + 248) + 32 * (v78 >> 7);
              if (*(_BYTE *)(v82 + 5) == 1)
              {
                (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v82 + 24) + 376))(*(_QWORD *)(v82 + 24), (v78 >> 1) & 0x3F, v70 + 32 * v69, v80 + 16);
              }
              else
              {
                if ((*(_BYTE *)(v82 + 4) & 4) != 0)
                {
                  *(_BYTE *)(v80 + 16) = 1;
                  v83 = *(unsigned int *)(*(_QWORD *)(v1 + 264) + 4 * v81);
                }
                else
                {
                  *(_BYTE *)(v80 + 16) = 0;
                  v83 = *(unsigned int *)(v59 + 4 * *(unsigned int *)(*(_QWORD *)(v1 + 264) + 4 * v81));
                }
                *(_QWORD *)v80 = v83;
              }
              ++v69;
              if (v79 < 0xFFFFFF80)
              {
                v84 = v79 >> 7;
                v85 = *(_QWORD *)(v1 + 248) + 32 * (v79 >> 7);
                if (*(_BYTE *)(v85 + 5) == 1)
                {
                  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v85 + 24) + 376))(*(_QWORD *)(v85 + 24), (v79 >> 1) & 0x3F, v80 + 8, v80 + 17);
                }
                else
                {
                  if ((*(_BYTE *)(v85 + 4) & 4) != 0)
                  {
                    *(_BYTE *)(v80 + 17) = 1;
                    v86 = *(unsigned int *)(*(_QWORD *)(v1 + 264) + 4 * v84);
                  }
                  else
                  {
                    *(_BYTE *)(v80 + 17) = 0;
                    v86 = *(unsigned int *)(v59 + 4 * *(unsigned int *)(*(_QWORD *)(v1 + 264) + 4 * v84));
                  }
                  *(_QWORD *)(v80 + 8) = v86;
                }
              }
              else
              {
                *(_BYTE *)(v80 + 17) = 3;
              }
            }
          }
          v68 = i + 1;
          v61 = v154;
        }
        while (i + 1 != v157);
      }
      else
      {
        v69 = 0;
      }
      *(_DWORD *)(v135 + 16) = v69;
      v2 = v127;
      v155 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 96, 0x10u);
      v87 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v155 + 16) = 0;
      *(_QWORD *)(v155 + 24) = 0;
      *(_DWORD *)(v155 + 32) = 0;
      *(_QWORD *)v155 = &off_24ED8D998;
      *(_QWORD *)(v155 + 8) = v87;
      *(_QWORD *)(v155 + 40) = v135;
      *(_QWORD *)(v155 + 48) = v149;
      *(_QWORD *)(v155 + 56) = v1;
      *(_QWORD *)(v155 + 64) = v143;
      *(_DWORD *)(v155 + 72) = v134;
      *(_QWORD *)(v155 + 80) = v121;
      *(_QWORD *)(v155 + 88) = v127;
      v88 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 136, 0x10u);
      v89 = *(_QWORD *)(v135 + 128);
      v90 = *(_QWORD *)(v135 + 24);
      v91 = *(_QWORD *)(v127 + 576) + (v134 << 6);
      v92 = *(_QWORD *)(v127 + 592) + (v134 << 6);
      v93 = *(_QWORD *)(v127 + 608) + 48 * v134;
      v94 = *(_QWORD *)(v151 + 12008);
      v95 = *(_DWORD *)(v135 + 8);
      v96 = *(_DWORD *)(v127 + 88);
      v97 = *(_QWORD *)(v127 + 800);
      v162 = v88;
      *(_QWORD *)(v88 + 16) = 0;
      *(_QWORD *)(v88 + 24) = 0;
      *(_DWORD *)(v88 + 32) = 0;
      *(_QWORD *)(v88 + 8) = v97;
      *(_QWORD *)v88 = &off_24ED8DA08;
      *(_QWORD *)(v88 + 40) = v89;
      *(_QWORD *)(v88 + 48) = v90;
      *(_QWORD *)(v88 + 56) = v91;
      *(_QWORD *)(v88 + 64) = v92;
      *(_QWORD *)(v88 + 72) = v93;
      *(_QWORD *)(v88 + 80) = v94;
      *(_DWORD *)(v88 + 88) = v95;
      *(_QWORD *)(v88 + 96) = v120;
      *(_DWORD *)(v88 + 104) = v96;
      *(_QWORD *)(v88 + 112) = v49;
      *(_QWORD *)(v88 + 120) = v131;
      *(_QWORD *)(v88 + 128) = v127;
      v158 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 88, 0x10u);
      v98 = *(_DWORD *)(v127 + 88);
      v99 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v158 + 16) = 0;
      *(_QWORD *)(v158 + 24) = 0;
      *(_DWORD *)(v158 + 32) = 0;
      *(_QWORD *)(v158 + 8) = v99;
      *(_QWORD *)v158 = &off_24ED8DAE8;
      *(_QWORD *)(v158 + 40) = v135;
      *(_QWORD *)(v158 + 48) = v120;
      *(_DWORD *)(v158 + 56) = v98;
      *(_QWORD *)(v158 + 64) = v49;
      *(_QWORD *)(v158 + 72) = v131;
      *(_QWORD *)(v158 + 80) = v127;
      v100 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 64, 0x10u);
      v101 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v100 + 16) = 0;
      *(_QWORD *)(v100 + 24) = 0;
      *(_DWORD *)(v100 + 32) = 0;
      *(_QWORD *)(v100 + 8) = v101;
      *(_QWORD *)v100 = &off_24ED8DB58;
      *(_QWORD *)(v100 + 40) = v135;
      *(_QWORD *)(v100 + 48) = v127;
      *(_QWORD *)(v100 + 56) = 0;
      v144 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 72, 0x10u);
      v102 = *(_QWORD *)(v135 + 88);
      v103 = *(_QWORD *)(v127 + 800);
      v104 = *(_QWORD *)(v127 + 88);
      *(_QWORD *)(v144 + 16) = 0;
      *(_QWORD *)(v144 + 24) = 0;
      *(_DWORD *)(v144 + 32) = 0;
      *(_QWORD *)(v144 + 8) = v103;
      *(_QWORD *)v144 = &off_24ED8DBC8;
      *(_QWORD *)(v144 + 40) = v135;
      *(_QWORD *)(v144 + 48) = v104;
      *(_QWORD *)(v144 + 56) = v102;
      *(_QWORD *)(v144 + 64) = v127;
      v105 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 80, 0x10u);
      v106 = *(_QWORD *)(v135 + 88);
      v107 = *(_QWORD *)(v127 + 576) + (v134 << 6) + 64;
      v108 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v105 + 16) = 0;
      *(_QWORD *)(v105 + 24) = 0;
      *(_DWORD *)(v105 + 32) = 0;
      *(_QWORD *)(v105 + 8) = v108;
      *(_QWORD *)v105 = &off_24ED8DC38;
      *(_QWORD *)(v105 + 40) = v135;
      *(_QWORD *)(v105 + 48) = v106;
      *(_QWORD *)(v105 + 56) = v107;
      *(_QWORD *)(v105 + 64) = v151;
      *(_QWORD *)(v105 + 72) = v127;
      v109 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 88, 0x10u);
      v110 = *(_QWORD *)(v135 + 96);
      v111 = *(_DWORD *)(v127 + 88);
      v112 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v109 + 16) = 0;
      *(_QWORD *)(v109 + 24) = 0;
      *(_DWORD *)(v109 + 32) = 0;
      *(_QWORD *)v109 = &off_24ED8DCA8;
      *(_QWORD *)(v109 + 8) = v112;
      *(_QWORD *)(v109 + 40) = v135;
      *(_QWORD *)(v109 + 48) = v110;
      *(_QWORD *)(v109 + 56) = v121;
      *(_QWORD *)(v109 + 64) = v151;
      *(_DWORD *)(v109 + 72) = v111;
      *(_QWORD *)(v109 + 80) = v127;
      v113 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 80, 0x10u);
      v114 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v113 + 16) = 0;
      *(_QWORD *)(v113 + 24) = 0;
      *(_DWORD *)(v113 + 32) = 0;
      *(_QWORD *)v113 = &off_24ED8DDF8;
      *(_QWORD *)(v113 + 8) = v114;
      *(_QWORD *)(v113 + 40) = v135;
      *(_QWORD *)(v113 + 48) = v149;
      *(_QWORD *)(v113 + 56) = v137;
      *(_QWORD *)(v113 + 64) = v151;
      *(_QWORD *)(v113 + 72) = v127;
      v115 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 80, 0x10u);
      v116 = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v115 + 16) = 0;
      *(_QWORD *)(v115 + 24) = 0;
      *(_DWORD *)(v115 + 32) = 0;
      *(_QWORD *)v115 = &off_24ED8DED8;
      *(_QWORD *)(v115 + 8) = v116;
      *(_QWORD *)(v115 + 40) = v151;
      *(_QWORD *)(v115 + 48) = v149;
      *(_QWORD *)(v115 + 56) = v137;
      *(_QWORD *)(v115 + 64) = v1;
      *(_QWORD *)(v115 + 72) = v127;
      v117 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v127 + 776), 56, 0x10u);
      *(_QWORD *)(v117 + 8) = *(_QWORD *)(v127 + 800);
      *(_QWORD *)(v117 + 16) = 0;
      *(_DWORD *)(v117 + 32) = 0;
      *(_QWORD *)v117 = &off_24ED8DF48;
      *(_QWORD *)(v117 + 40) = v151;
      *(_QWORD *)(v117 + 48) = v127;
      *(_DWORD *)(v117 + 32) = 1;
      *(_QWORD *)(v117 + 24) = v126;
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
      *(_QWORD *)(v117 + 16) = *(_QWORD *)(*(_QWORD *)(v117 + 24) + 16);
      *(_DWORD *)(v115 + 32) = 1;
      *(_QWORD *)(v115 + 24) = v117;
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 32))(v117);
      *(_QWORD *)(v115 + 16) = *(_QWORD *)(*(_QWORD *)(v115 + 24) + 16);
      *(_DWORD *)(v113 + 32) = 1;
      *(_QWORD *)(v113 + 24) = v115;
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 32))(v115);
      *(_QWORD *)(v113 + 16) = *(_QWORD *)(*(_QWORD *)(v113 + 24) + 16);
      *(_DWORD *)(v109 + 32) = 1;
      *(_QWORD *)(v109 + 24) = v113;
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 32))(v113);
      *(_QWORD *)(v109 + 16) = *(_QWORD *)(*(_QWORD *)(v109 + 24) + 16);
      *(_DWORD *)(v105 + 32) = 1;
      *(_QWORD *)(v105 + 24) = v109;
      (*(void (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109);
      *(_QWORD *)(v105 + 16) = *(_QWORD *)(*(_QWORD *)(v105 + 24) + 16);
      *(_DWORD *)(v144 + 32) = 1;
      *(_QWORD *)(v144 + 24) = v105;
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 32))(v105);
      *(_QWORD *)(v144 + 16) = *(_QWORD *)(*(_QWORD *)(v144 + 24) + 16);
      *(_DWORD *)(v100 + 32) = 1;
      *(_QWORD *)(v100 + 24) = v144;
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 32))(v144);
      *(_QWORD *)(v100 + 16) = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 16);
      *(_QWORD *)(v100 + 56) = v109;
      (*(void (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109);
      *(_DWORD *)(v158 + 32) = 1;
      *(_QWORD *)(v158 + 24) = v100;
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
      *(_QWORD *)(v158 + 16) = *(_QWORD *)(*(_QWORD *)(v158 + 24) + 16);
      *(_DWORD *)(v162 + 32) = 1;
      *(_QWORD *)(v162 + 24) = v100;
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
      *(_QWORD *)(v162 + 16) = *(_QWORD *)(*(_QWORD *)(v162 + 24) + 16);
      *(_DWORD *)(v155 + 32) = 1;
      *(_QWORD *)(v155 + 24) = v100;
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
      *(_QWORD *)(v155 + 16) = *(_QWORD *)(*(_QWORD *)(v155 + 24) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 40))(v117);
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 40))(v113);
      (*(void (**)(uint64_t))(*(_QWORD *)v109 + 40))(v109);
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 40))(v100);
      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 40))(v162);
      (*(void (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
      v145 += v140;
      v147 += v142;
      v7 = v141.i32[0] + v138;
      v146 += v129 + (v142 << 6);
      v8 = v139;
      v6 = v125;
      v10 = v123;
      v9 = v124;
    }
    while (v139 < v125);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v126 + 40))(v126);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
}

void physx::Dy::KinematicCopyTGSTask::~KinematicCopyTGSTask(physx::Dy::KinematicCopyTGSTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::KinematicCopyTGSTask::getName(physx::Dy::KinematicCopyTGSTask *this)
{
  return "KinematicCopyTask";
}

uint64_t physx::Dy::KinematicCopyTGSTask::runInternal(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int8x16_t v13;
  __int128 v14;
  uint64_t v15;

  if (*(_DWORD *)(this + 48))
  {
    v1 = 0;
    v2 = 0;
    v3 = 62;
    do
    {
      v4 = (unint64_t)*(unsigned int *)(*(_QWORD *)(this + 40) + 4 * v2) >> 7;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 24) + 32 * v4 + 24);
      v6 = *(_QWORD *)(v5 + 40);
      v7 = *(_DWORD *)(v6 + 92);
      v8 = *(_DWORD *)(v6 + 128);
      v9 = (_BYTE *)(*(_QWORD *)(this + 64) + v3);
      v10 = *(_QWORD *)(this + 72) + v3;
      v11 = *(_QWORD *)(this + 80) + v1;
      v12 = sqrtf(*(float *)(v6 + 96));
      v13.i32[0] = *(_DWORD *)(v6 + 76);
      *(_QWORD *)(v10 - 46) = *(_QWORD *)(v6 + 16);
      *(_DWORD *)(v10 - 38) = *(_DWORD *)(v6 + 24);
      *(_OWORD *)(v10 - 62) = xmmword_2260E5D70;
      *(_OWORD *)(v10 - 34) = 0uLL;
      *(_OWORD *)(v10 - 18) = 0uLL;
      *(_DWORD *)(v10 - 2) = 0;
      *(_QWORD *)(v9 - 62) = 0;
      *(_DWORD *)(v9 - 54) = 0;
      *(_QWORD *)(v9 - 46) = 0;
      *(_QWORD *)(v9 - 38) = 0;
      *(_QWORD *)(v9 - 30) = 0;
      *(_DWORD *)(v9 - 22) = 0;
      *(_QWORD *)(v9 - 14) = 0;
      *((_QWORD *)v9 - 1) = 0;
      *v9 = 1;
      *(float *)(v9 - 18) = v12;
      *(_DWORD *)(v11 + 32) = 0;
      *(_DWORD *)(v11 + 36) = v4;
      *(_DWORD *)(v11 + 40) = v7;
      *(_QWORD *)&v14 = *(_QWORD *)(v6 + 64);
      DWORD2(v14) = *(_DWORD *)(v6 + 72);
      HIDWORD(v14) = v8;
      *(_OWORD *)v11 = v14;
      v13.i32[1] = *(_DWORD *)(v6 + 80);
      v13.i64[1] = *(_QWORD *)(v6 + 84);
      *(int8x16_t *)(v11 + 16) = vextq_s8(v13, v13, 4uLL);
      v15 = *(_QWORD *)(v5 + 40);
      *(_OWORD *)v5 = *(_OWORD *)v15;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v15 + 16);
      *(_DWORD *)(v5 + 24) = *(_DWORD *)(v15 + 24);
      ++v2;
      v1 += 48;
      v3 += 64;
    }
    while (v2 < *(unsigned int *)(this + 48));
  }
  return this;
}

void physx::Dy::DynamicsMergeTask::~DynamicsMergeTask(physx::Dy::DynamicsMergeTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::DynamicsMergeTask::getName(physx::Dy::DynamicsMergeTask *this)
{
  return "MergeTask";
}

uint64_t physx::Dy::DynamicsMergeTask::release(physx::Dy::DynamicsMergeTask *this)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void physx::Dy::ArticulationTask::~ArticulationTask(physx::Dy::ArticulationTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::ArticulationTask::getName(physx::Dy::ArticulationTask *this)
{
  return "ArticulationTask";
}

uint64_t physx::Dy::ArticulationTask::runInternal(physx::Dy::ArticulationTask *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(float);
  uint64_t v16;

  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (unsigned __int8 *)(*((_QWORD *)this + 6) + 92);
    do
    {
      v6 = *v4;
      v4 += 96;
      v5 = v6;
      if (v3 <= v6)
        v3 = v5;
      --v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v7 = *((_QWORD *)this + 5);
  v8 = physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v7 + 432));
  if (!v8)
  {
    v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v10 = "<allocation names disabled>";
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 12343, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v11)
    {
      v8 = (_DWORD *)((v11 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((_QWORD *)v8 - 1) = (char *)v8 - v11;
    }
    else
    {
      v8 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v8, *(physx::PxcNpMemBlockPool **)(v7 + 440));
  }
  v8[3042] = 0;
  if ((v8[3043] & 0x7FFFFFFFu) < v3)
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v8 + 3040), v3);
  v8[3042] = v3;
  v8[3046] = 0;
  if ((v8[3047] & 0x7FFFFFFFu) < v3)
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v8 + 3044), v3);
  v8[3046] = v3;
  v12 = *((unsigned int *)this + 14);
  if ((_DWORD)v12)
  {
    v13 = 0;
    for (i = 0; i < v12; ++i)
    {
      v15 = (void (*)(float))physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocitiesTGS[*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 6) + v13) + 40)];
      if (v15)
      {
        v15(*((float *)this + 18));
        v12 = *((unsigned int *)this + 14);
      }
      v13 += 96;
    }
  }
  v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v16 + 8));
  *(_QWORD *)v8 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v8;
  return pthread_mutex_unlock((pthread_mutex_t *)(v16 + 8));
}

void physx::Dy::CopyBackTask::~CopyBackTask(physx::Dy::CopyBackTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::CopyBackTask::getName(physx::Dy::CopyBackTask *this)
{
  return "CopyBackTask";
}

char *physx::Dy::CopyBackTask::runInternal(char *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v47;
  float v48;
  int v49;
  uint64_t v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  BOOL v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  __int16 *v107;
  char v108;
  int v109;
  __int16 v110;
  float v111;
  char v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;

  v2 = *((unsigned int *)this + 22);
  v1 = *((unsigned int *)this + 23);
  if (v2 < v1)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = *((float *)this + 18);
    v5 = *((_QWORD *)this + 10);
    v6 = *(_QWORD *)(v5 + 136);
    v7 = *(_QWORD *)(v5 + 272);
    v8 = *((_QWORD *)this + 12);
    v9 = **((_QWORD **)this + 5) + 8 * v2;
    v10 = v1 - v2;
    v11 = (int *)(*((_QWORD *)this + 8) + 48 * v2 + 84);
    v12 = v2 << 6;
    v13 = *((_QWORD *)this + 6) + 120;
    this = "2Bp28PersistentSelfCollisionPairsE";
    while (1)
    {
      v14 = v4 * *(float *)(v13 + v12 - 8);
      v15 = v4 * *(float *)(v13 + v12 - 4);
      v16 = v4 * *(float *)(v13 + v12);
      v17 = v4 * *(float *)(v13 + v12 - 24);
      v18 = v4 * *(float *)(v13 + v12 - 20);
      v19 = v4 * *(float *)(v13 + v12 - 16);
      v20 = (float)((float)(v17 * *(float *)(v3 + v12 + 92)) + (float)(v18 * *(float *)(v3 + v12 + 104)))
          + (float)(v19 * *(float *)(v3 + v12 + 116));
      v21 = (float)((float)(v17 * *(float *)(v3 + v12 + 96)) + (float)(v18 * *(float *)(v3 + v12 + 108)))
          + (float)(v19 * *(float *)(v3 + v12 + 120));
      v22 = (float)((float)(v17 * *(float *)(v3 + v12 + 100)) + (float)(v18 * *(float *)(v3 + v12 + 112)))
          + (float)(v19 * *(float *)(v3 + v12 + 124));
      v23 = *(_QWORD *)v9;
      v24 = *(_QWORD *)(*(_QWORD *)v9 + 40);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
      v25 = *(float *)(v3 + v12 + 64);
      v26 = *(float *)(v3 + v12 + 68);
      v28 = *(float *)(v24 + 8);
      v27 = *(float *)(v24 + 12);
      v29 = *(float *)(v24 + 4);
      v31 = *(float *)(v3 + v12 + 72);
      v30 = *(float *)(v3 + v12 + 76);
      v32 = (float)((float)((float)(v27 * v25) + (float)(v30 * *(float *)v24)) + (float)(v26 * v28))
          - (float)(v29 * v31);
      v33 = (float)((float)((float)(v27 * v26) + (float)(v30 * v29)) + (float)(v31 * *(float *)v24))
          - (float)(v28 * v25);
      v34 = (float)((float)((float)(v27 * v31) + (float)(v30 * v28)) + (float)(v25 * v29))
          - (float)(*(float *)v24 * v26);
      v35 = (float)((float)((float)(v30 * v27) - (float)(v25 * *(float *)v24)) - (float)(v26 * v29))
          - (float)(v31 * v28);
      v36 = sqrtf((float)((float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v34 * v34)) + (float)(v35 * v35));
      v37 = v32 / v36;
      v38 = v33 / v36;
      v39 = v34 / v36;
      v40 = v35 / v36;
      *(float *)v24 = v32 / v36;
      *(float *)(v24 + 4) = v38;
      *(float *)(v24 + 8) = v34 / v36;
      *(float *)(v24 + 12) = v35 / v36;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v3 + v12 + 80);
      *(_DWORD *)(v24 + 24) = *(_DWORD *)(v3 + v12 + 88);
      v41 = *(float *)(v13 + v12 - 56);
      v42 = *(float *)(v13 + v12 - 52);
      *(float *)(v24 + 64) = v41;
      *(float *)(v24 + 68) = v42;
      v43 = *(float *)(v13 + v12 - 48);
      *(float *)(v24 + 72) = v43;
      v44 = *(float *)(v13 + v12 - 40);
      v45 = *(float *)(v13 + v12 - 36);
      v46 = *(float *)(v13 + v12 - 32);
      v47 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v3 + v12 + 92), v44), vmul_n_f32(*(float32x2_t *)(v3 + v12 + 104), v45)), vmul_n_f32(*(float32x2_t *)(v3 + v12 + 116), v46));
      v48 = (float)((float)(v44 * *(float *)(v3 + v12 + 100)) + (float)(v45 * *(float *)(v3 + v12 + 112)))
          + (float)(v46 * *(float *)(v3 + v12 + 124));
      *(float32x2_t *)(v24 + 80) = v47;
      v49 = *v11;
      v11 += 12;
      v50 = *(unsigned int *)(v7 + 4 * (v49 & 0x1FFFFFF));
      *(float *)(v24 + 88) = v48;
      v51 = *(_DWORD *)(v6 + 4 * v50);
      v52 = *(float *)(v8 + 88);
      v53 = *(float *)(v24 + 140);
      if (!*(_BYTE *)(v8 + 100))
      {
        if (*(_BYTE *)(v8 + 102))
        {
          v64 = 1.0;
          if (v51)
          {
            v65 = *(_DWORD *)(v24 + 152);
            if (v65 >= 2)
              v64 = 1.0 / (float)v65;
          }
          *(float *)(v23 + 76) = v64;
        }
        if (v53 < 0.2 || v53 < v52)
        {
          v66 = *(float *)(v24 + 112);
          v67 = *(float *)(v24 + 116);
          if (v66 <= 0.0)
            v68 = 1.0;
          else
            v68 = 1.0 / v66;
          if (v67 <= 0.0)
            v69 = 1.0;
          else
            v69 = 1.0 / v67;
          v70 = v21 + v21;
          v71 = v22 + v22;
          v72 = (float)(v40 * v40) + -0.5;
          v73 = (float)((float)((float)(v21 + v21) * v38) + (float)(v37 * (float)(v20 + v20)))
              + (float)(v39 * (float)(v22 + v22));
          v74 = (float)((float)(v20 + v20) * v72)
              - (float)((float)((float)(v38 * (float)(v22 + v22)) - (float)(v39 * (float)(v21 + v21))) * v40);
          v75 = (float)((float)((float)(v21 + v21) * v72)
                      - (float)((float)((float)(v39 * (float)(v20 + v20)) - (float)(v37 * (float)(v22 + v22))) * v40))
              + (float)(v38 * v73);
          v76 = -(float)(v38 * (float)(v20 + v20));
          v78 = *(float *)(v24 + 120);
          v77 = *(float *)(v24 + 124);
          v60 = v78 <= 0.0;
          v79 = 1.0 / v78;
          if (v60)
            v79 = 1.0;
          v80 = (float)((float)(v71 * v72) - (float)((float)(v76 + (float)(v37 * v70)) * v40)) + (float)(v39 * v73);
          v81 = v14 + *(float *)(v23 + 48);
          v82 = v15 + *(float *)(v23 + 52);
          *(float *)(v23 + 48) = v81;
          *(float *)(v23 + 52) = v82;
          v83 = v16 + *(float *)(v23 + 56);
          *(float *)(v23 + 56) = v83;
          v84 = (float)(v74 + (float)(v37 * v73)) + *(float *)(v23 + 64);
          v85 = v75 + *(float *)(v23 + 68);
          *(float *)(v23 + 64) = v84;
          *(float *)(v23 + 68) = v85;
          v86 = v80 + *(float *)(v23 + 72);
          *(float *)(v23 + 72) = v86;
          v87 = v77 == 0.0 ? 1.0 : v77;
          v88 = (float)((float)((float)((float)(v82 * v82) + (float)(v81 * v81)) + (float)(v83 * v83))
                      + (float)((float)((float)((float)(v69 * (float)(v85 * v85)) + (float)((float)(v84 * v84) * v68))
                                      + (float)((float)(v86 * v86) * v79))
                              * v87))
              * 0.5;
          v89 = (float)(*(_DWORD *)(v24 + 148) + 1);
          v90 = *(float *)(v24 + 132) * v89;
          if (v88 >= v90)
          {
            *(_QWORD *)(v23 + 48) = 0;
            *(_DWORD *)(v23 + 56) = 0;
            v91 = 1.0;
            *(_QWORD *)(v23 + 64) = 0;
            *(_DWORD *)(v23 + 72) = 0;
            if (v90 != 0.0)
            {
              if ((float)(v88 / v90) >= 2.0)
                v91 = 1.0;
              else
                v91 = (float)(v88 / v90) * 0.5;
            }
            v92 = (float)(v52 * (float)(v89 + -1.0)) + (float)(v91 * 0.4);
            *(float *)(v24 + 144) = v92;
            *(_WORD *)(v23 + 28) = 8 * (v53 == 0.0);
            goto LABEL_69;
          }
        }
        goto LABEL_68;
      }
      v54 = *(float *)(v24 + 112);
      v55 = *(float *)(v24 + 116);
      if (v54 <= 0.0)
        v56 = 1.0;
      else
        v56 = 1.0 / v54;
      if (v55 <= 0.0)
        v57 = 1.0;
      else
        v57 = 1.0 / v55;
      v58 = *(float *)(v24 + 120);
      v59 = *(float *)(v24 + 124);
      v60 = v58 <= 0.0;
      v61 = 1.0 / v58;
      if (v60)
        v61 = 1.0;
      if (v59 == 0.0)
        v59 = 1.0;
      if (v51)
      {
        v62 = *(_DWORD *)(v24 + 152);
        if (v62 >= 0xA)
          v62 = 10;
        v63 = (float)v62;
      }
      else
      {
        v63 = 0.0;
      }
      v93 = v20 + v20;
      v94 = v21 + v21;
      v95 = v22 + v22;
      v96 = (float)(v40 * v40) + -0.5;
      v97 = (float)((float)((float)(v21 + v21) * v38) + (float)(v37 * v93)) + (float)(v39 * (float)(v22 + v22));
      v98 = (float)((float)(v93 * v96)
                  - (float)((float)((float)(v38 * (float)(v22 + v22)) - (float)(v39 * (float)(v21 + v21))) * v40))
          + (float)(v37 * v97);
      v99 = (float)((float)((float)(v21 + v21) * v96) - (float)((float)((float)(v39 * v93) - (float)(v37 * v95)) * v40))
          + (float)(v38 * v97);
      v100 = (float)((float)(v95 * v96) - (float)((float)((float)(v37 * v94) - (float)(v38 * v93)) * v40))
           + (float)(v39 * v97);
      v101 = (float)((float)((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16))
                   + (float)(v59
                           * (float)((float)((float)((float)(v99 * v99) * v57) + (float)((float)(v98 * v98) * v56))
                                   + (float)((float)(v100 * v100) * v61))))
           * 0.5;
      v102 = v63 * *(float *)(v24 + 136);
      v103 = fmaxf(*(float *)(v23 + 60) - v52, 0.0);
      *(float *)(v23 + 60) = v103;
      v104 = (float)(v52 + *(float *)(v23 + 76)) <= 1.0 ? v52 + *(float *)(v23 + 76) : 1.0;
      if (v101 >= v102)
        break;
      if (!v51)
      {
        v111 = 1.0;
LABEL_62:
        v107 = (__int16 *)(v23 + 28);
        v112 = *(_WORD *)(v23 + 28);
        *(float *)(v23 + 76) = v111;
        LOWORD(v109) = v112 & 1;
LABEL_63:
        v110 = 4 * v109;
        goto LABEL_64;
      }
      if (v63 > 1.0)
      {
        v105 = (float)(v52 * -0.5) + 1.0;
        *(float *)(v24 + 64) = v41 * v105;
        *(float *)(v24 + 68) = v42 * v105;
        *(float *)(v24 + 72) = v43 * v105;
        *(float32x2_t *)(v24 + 80) = vmul_n_f32(v47, v105);
        *(float *)(v24 + 88) = v48 * v105;
        v104 = (float)(v104 * 0.75) + 0.025;
      }
      v106 = *(float *)(v24 + 136);
      v107 = (__int16 *)(v23 + 28);
      v108 = *(_WORD *)(v23 + 28);
      *(float *)(v23 + 76) = v104;
      v109 = v108 & 1;
      if (v103 != 0.0 || v101 >= (float)(v106 * 0.25))
        goto LABEL_63;
      if (v109)
        v110 = 1;
      else
        v110 = 3;
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
      *(_DWORD *)(v24 + 24) = *(_DWORD *)(v23 + 24);
LABEL_64:
      *v107 = v110;
      if (v53 < 0.2 || v53 < v52)
      {
        v113 = v14 + *(float *)(v23 + 48);
        v114 = v15 + *(float *)(v23 + 52);
        v115 = v16 + *(float *)(v23 + 56);
        v116 = *(float *)(v23 + 68);
        v117 = v98 + *(float *)(v23 + 64);
        *(float *)(v23 + 48) = v113;
        *(float *)(v23 + 52) = v114;
        *(float *)(v23 + 56) = v115;
        v118 = v99 + v116;
        *(float *)(v23 + 64) = v117;
        *(float *)(v23 + 68) = v118;
        v119 = v100 + *(float *)(v23 + 72);
        *(float *)(v23 + 72) = v119;
        v120 = *(float *)(v24 + 132);
        if (v101 >= v120)
        {
          v121 = (float)((float)((float)((float)(v114 * v114) + (float)(v113 * v113)) + (float)(v115 * v115))
                       + (float)(v59
                               * (float)((float)((float)(v57 * (float)(v118 * v118))
                                               + (float)((float)(v117 * v117) * v56))
                                       + (float)((float)(v119 * v119) * v61))))
               * 0.5;
          v122 = (float)(*(_DWORD *)(v24 + 148) + 1);
          v123 = v120 * v122;
          if (v121 >= (float)(v120 * v122))
          {
            *(_QWORD *)(v23 + 64) = 0;
            *(_DWORD *)(v23 + 72) = 0;
            v124 = 1.0;
            *(_QWORD *)(v23 + 48) = 0;
            *(_DWORD *)(v23 + 56) = 0;
            if (v120 != 0.0)
            {
              if ((float)(v121 / v123) >= 2.0)
                v124 = 1.0;
              else
                v124 = (float)(v121 / v123) * 0.5;
            }
            v92 = (float)(v52 * (float)(v122 + -1.0)) + (float)(v124 * 0.4);
            *(float *)(v24 + 144) = v92;
            if (v53 == 0.0)
              *v107 = v110 | 8;
            goto LABEL_69;
          }
        }
      }
LABEL_68:
      v92 = fmaxf(v53 - v52, 0.0);
      *(float *)(v24 + 144) = v92;
LABEL_69:
      if (v92 == 0.0)
      {
        *(_WORD *)(v23 + 28) |= 0x10u;
        *(_QWORD *)(v23 + 48) = 0;
        *(_DWORD *)(v23 + 56) = 0;
        *(_QWORD *)(v23 + 64) = 0;
        *(_DWORD *)(v23 + 72) = 0;
      }
      v9 += 8;
      v3 += 64;
      v13 += 64;
      if (!--v10)
        return this;
    }
    *(_DWORD *)(v23 + 60) = 1069547520;
    if (v51)
      v111 = v104;
    else
      v111 = 1.0;
    goto LABEL_62;
  }
  return this;
}

void physx::Dy::UpdateArticTask::~UpdateArticTask(physx::Dy::UpdateArticTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::UpdateArticTask::getName(physx::Dy::UpdateArticTask *this)
{
  return "UpdateArticTask";
}

uint64_t physx::Dy::UpdateArticTask::runInternal(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  float v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(float);

  v1 = *(unsigned int *)(this + 48);
  v2 = *(_DWORD *)(this + 52);
  if (v2 > v1)
  {
    v3 = *(float *)(this + 56);
    v4 = *(_QWORD *)(this + 40);
    v5 = v2 - v1;
    v6 = 96 * v1;
    do
    {
      this = *(_QWORD *)(v4 + 12288) + v6;
      v7 = (uint64_t (*)(float))physx::Dy::ArticulationPImpl::sUpdateBodiesTGS[*(unsigned int *)(*(_QWORD *)this + 40)];
      if (v7)
        this = v7(v3);
      v6 += 96;
      --v5;
    }
    while (v5);
  }
  return this;
}

void physx::Dy::SetupDescsTask::~SetupDescsTask(physx::Dy::SetupDescsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SetupDescsTask::getName(physx::Dy::SetupDescsTask *this)
{
  return "SetupDescsTask";
}

void physx::Dy::SetupDescsTask::runInternal(physx::Dy::SetupDescsTask *this)
{
  physx::Dy::SetupDescsTask *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int i;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD v65[2];

  v1 = this;
  v65[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 11);
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  v60 = *((_DWORD *)this + 18);
  v5 = *v4;
  v6 = *(_QWORD *)(v3 + 64);
  v63 = v2;
  v57 = *(unsigned int *)(v3 + 40);
  if ((_DWORD)v57)
  {
    v52 = (uint64_t *)*((_QWORD *)this + 5);
    v53 = *((_QWORD *)this + 6);
    v54 = *v4;
    v7 = 0;
    v56 = *(_QWORD *)(v3 + 32);
    v8 = v2 + 256;
    v9 = *((_QWORD *)this + 7);
    v59 = *((_QWORD *)this + 8);
    v62 = v2 + 256;
    while (1)
    {
      v58 = v7;
      for (i = *(_DWORD *)(*(_QWORD *)(v9 + 344) + 44 * *(unsigned int *)(v56 + 4 * v7) + 24);
            i != -1;
            i = *(_DWORD *)(v13 + 16 * (i - v12 * v11) + 8))
      {
        v11 = *(_DWORD *)(v9 + 304);
        v12 = i / v11;
        v13 = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 8 * (i / v11));
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 176) + 8 * (i / *(_DWORD *)(v9 + 200)))
                        + 8 * (i % *(_DWORD *)(v9 + 200)));
        v15 = *(_QWORD *)(v2 + 576);
        v16 = 2 * i;
        v17 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v9 + 832)
                                          + 8 * (v16 / *(_DWORD *)(*(_QWORD *)(v9 + 832) + 24)))
                              + 4 * (v16 % *(_DWORD *)(*(_QWORD *)(v9 + 832) + 24)));
        if (v17 >= 0xFFFFFF80)
        {
          *(_QWORD *)v6 = v8;
          *(_DWORD *)(v6 + 20) = 0;
LABEL_18:
          *(_WORD *)(v6 + 16) = -1;
          goto LABEL_19;
        }
        v18 = *(_QWORD *)(v9 + 248) + 32 * (v17 >> 7);
        if (*(_BYTE *)(v18 + 5) != 1)
        {
          v26 = *(unsigned int *)(*(_QWORD *)(v9 + 264) + 4 * (v17 >> 7));
          if ((*(_BYTE *)(v18 + 4) & 4) == 0)
            LODWORD(v26) = *(_DWORD *)(v59 + 4 * v26) + v60;
          v27 = (v26 + 1);
          *(_QWORD *)v6 = v15 + (v27 << 6);
          *(_DWORD *)(v6 + 20) = v27;
          goto LABEL_18;
        }
        v19 = *(_QWORD *)(v18 + 24);
        v65[0] = 0;
        v64 = 0;
        v20 = (v17 >> 1) & 0x3F;
        v61 = i / v11;
        v21 = v11;
        v22 = v14;
        v23 = v15;
        (*(void (**)(uint64_t, uint64_t, _QWORD *, char *))(*(_QWORD *)v19 + 376))(v19, v20, v65, &v64);
        v15 = v23;
        v14 = v22;
        v11 = v21;
        v12 = v61;
        v8 = v62;
        v2 = v63;
        if (v64 == 2)
          v24 = v19;
        else
          v24 = v62;
        if (v64 == 2)
          v25 = v20;
        else
          v25 = -1;
        *(_QWORD *)v6 = v24;
        *(_WORD *)(v6 + 16) = v25;
        *(_DWORD *)(v6 + 20) = 0;
LABEL_19:
        v28 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v9 + 832)
                                          + 8 * ((v16 | 1) / *(_DWORD *)(*(_QWORD *)(v9 + 832) + 24)))
                              + 4 * ((v16 | 1) % *(_DWORD *)(*(_QWORD *)(v9 + 832) + 24)));
        if (v28 >= 0xFFFFFF80)
        {
          *(_QWORD *)(v6 + 8) = v8;
          *(_DWORD *)(v6 + 24) = 0;
LABEL_32:
          *(_WORD *)(v6 + 18) = -1;
          goto LABEL_33;
        }
        v29 = *(_QWORD *)(v9 + 248) + 32 * (v28 >> 7);
        if (*(_BYTE *)(v29 + 5) != 1)
        {
          v34 = *(unsigned int *)(*(_QWORD *)(v9 + 264) + 4 * (v28 >> 7));
          if ((*(_BYTE *)(v29 + 4) & 4) == 0)
            LODWORD(v34) = *(_DWORD *)(v59 + 4 * v34) + v60;
          v35 = (v34 + 1);
          *(_QWORD *)(v6 + 8) = v15 + (v35 << 6);
          *(_DWORD *)(v6 + 24) = v35;
          goto LABEL_32;
        }
        v30 = *(_QWORD *)(v29 + 24);
        v65[0] = 0;
        v64 = 0;
        v31 = (v28 >> 1) & 0x3F;
        (*(void (**)(uint64_t, uint64_t, _QWORD *, char *))(*(_QWORD *)v30 + 376))(v30, v31, v65, &v64);
        v8 = v62;
        v2 = v63;
        if (v64 == 2)
          v32 = v30;
        else
          v32 = v62;
        if (v64 == 2)
          v33 = v31;
        else
          v33 = -1;
        *(_QWORD *)(v6 + 8) = v32;
        *(_WORD *)(v6 + 18) = v33;
        *(_DWORD *)(v6 + 24) = 0;
LABEL_33:
        *(_QWORD *)(v6 + 32) = v14;
        *(_WORD *)(v6 + 30) = 2;
        v6 += 48;
      }
      v7 = v58 + 1;
      if (v58 + 1 == v57)
      {
        v3 = v53;
        v5 = v54;
        v36 = *(_QWORD *)(v53 + 64);
        v1 = this;
        v4 = v52;
        goto LABEL_37;
      }
    }
  }
  v36 = *(_QWORD *)(v3 + 64);
LABEL_37:
  physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ConstraintLess,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(v36, -1431655765 * ((unint64_t)(v6 - v36) >> 4), (uint64_t)&v64, (uint64_t)v65, 32);
  if (*((_DWORD *)v4 + 4))
  {
    v37 = 0;
    v38 = *(_QWORD *)(v3 + 24);
    v39 = v6 + 16;
    v40 = 24;
    do
    {
      v41 = v38 + v40;
      v42 = *(_QWORD *)(v63 + 576);
      v65[0] = v60;
      v43 = *(unsigned __int8 *)(v38 + v40 - 8);
      v44 = v63 + 256;
      if ((_DWORD)v43 != 3)
      {
        if ((_DWORD)v43 == 2)
        {
          *(_QWORD *)(v39 - 16) = *(_QWORD *)(v41 - 24) & 0xFFFFFFFFFFFFFFC0;
          *(_WORD *)v39 = *(_WORD *)(v41 - 24) & 0x3F;
          *(_DWORD *)(v39 + 4) = 0;
          goto LABEL_47;
        }
        v44 = v42 + ((unint64_t)(*(_DWORD *)(v41 - 24) + *((_DWORD *)v65 + v43) + 1) << 6);
      }
      *(_QWORD *)(v39 - 16) = v44;
      v45 = *(unsigned __int8 *)(v41 - 8);
      if (v45 == 3)
        v46 = 0;
      else
        v46 = *(_DWORD *)(v41 - 24) + *((_DWORD *)v65 + v45) + 1;
      *(_DWORD *)(v39 + 4) = v46;
      *(_WORD *)v39 = -1;
LABEL_47:
      v47 = *(unsigned __int8 *)(v38 + v40 - 7);
      v48 = v63 + 256;
      if ((_DWORD)v47 == 3)
        goto LABEL_51;
      if ((_DWORD)v47 != 2)
      {
        v48 = v42 + ((unint64_t)(*(_DWORD *)(v38 + v40 - 16) + *((_DWORD *)v65 + v47) + 1) << 6);
LABEL_51:
        *(_QWORD *)(v39 - 8) = v48;
        v50 = *(unsigned __int8 *)(v38 + v40 - 7);
        if (v50 == 3)
          v51 = 0;
        else
          v51 = *(_DWORD *)(v38 + v40 - 16) + *((_DWORD *)v65 + v50) + 1;
        *(_DWORD *)(v39 + 8) = v51;
        *(_WORD *)(v39 + 2) = -1;
        goto LABEL_55;
      }
      v49 = v38 + v40;
      *(_QWORD *)(v39 - 8) = *(_QWORD *)(v49 - 16) & 0xFFFFFFFFFFFFFFC0;
      *(_WORD *)(v39 + 2) = *(_WORD *)(v49 - 16) & 0x3F;
      *(_DWORD *)(v39 + 8) = 0;
LABEL_55:
      v38 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + v40);
      *(_WORD *)(v39 + 14) = 1;
      ++v37;
      v40 += 32;
      v39 += 48;
      v6 += 48;
    }
    while (v37 < *((unsigned int *)v4 + 4));
  }
  *(_DWORD *)(v5 + 12024) = -1431655765 * ((unint64_t)(v6 - *(_QWORD *)(v3 + 64)) >> 4);
  *(_DWORD *)(*((_QWORD *)v1 + 5) + 152) = *(_DWORD *)(**((_QWORD **)v1 + 5) + 12024);
}

void physx::Dy::PreIntegrateTask::~PreIntegrateTask(physx::Dy::PreIntegrateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PreIntegrateTask::getName(physx::Dy::PreIntegrateTask *this)
{
  return "PreIntegrateTask";
}

void physx::Dy::PreIntegrateTask::runInternal(physx::Dy::PreIntegrateTask *this)
{
  unsigned int v2;
  unsigned int *v3;
  signed int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(physx::Dy::PreIntegrateParallelTask *__hidden);
  unsigned int *v25;
  signed int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v2 = *((_DWORD *)this + 22);
  if (v2 < 0x201)
  {
    v30 = 0;
    physx::Dy::DynamicsTGSContext::preIntegrateBodies(*((float32x2_t ***)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((_QWORD *)this + 8), *((_QWORD *)this + 9), *((int **)this + 10), v2, *((float32x2_t **)this + 12), *((float *)this + 26), (unsigned int *)&v30 + 1, (unsigned int *)&v30);
    v3 = (unsigned int *)*((_QWORD *)this + 14);
    v4 = HIDWORD(v30);
    while (1)
    {
      v5 = *v3;
      if ((int)*v3 <= v4)
        v6 = v4;
      else
        v6 = *v3;
      while (1)
      {
        v7 = __ldaxr(v3);
        if (v7 != v5)
          break;
        if (!__stlxr(v6, v3))
        {
          v25 = (unsigned int *)*((_QWORD *)this + 15);
          v26 = v30;
          while (1)
          {
            v27 = *v25;
            if ((int)*v25 <= v26)
              v28 = v26;
            else
              v28 = *v25;
            while (1)
            {
              v29 = __ldaxr(v25);
              if (v29 != v27)
                break;
              if (!__stlxr(v28, v25))
                return;
            }
            __clrex();
          }
        }
      }
      __clrex();
    }
  }
  v8 = 0;
  for (i = 0; i < v2; i += 512)
  {
    if (v2 + v8 >= 0x200)
      v10 = 512;
    else
      v10 = v2 + v8;
    v11 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)this + 16) + 776), 136, 0x10u);
    v12 = *((_QWORD *)this + 5) + 8 * i;
    v13 = *((_QWORD *)this + 7) + ((unint64_t)i << 6);
    v14 = *((_QWORD *)this + 12);
    v15 = *((_DWORD *)this + 26);
    v16 = *((_QWORD *)this + 8) + ((unint64_t)i << 6);
    v17 = *((_QWORD *)this + 16);
    v18 = *(_QWORD *)(v17 + 800);
    v19 = *((_QWORD *)this + 6) + 8 * i;
    v20 = *((_QWORD *)this + 9) + 48 * i;
    v21 = *((_OWORD *)this + 7);
    v22 = *((_QWORD *)this + 10) + 4 * i;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 32) = 0;
    *(_QWORD *)v11 = &off_24ED8DA78;
    *(_QWORD *)(v11 + 8) = v18;
    *(_QWORD *)(v11 + 40) = v12;
    *(_QWORD *)(v11 + 48) = v19;
    *(_QWORD *)(v11 + 56) = v13;
    *(_QWORD *)(v11 + 64) = v16;
    *(_QWORD *)(v11 + 72) = v20;
    *(_QWORD *)(v11 + 80) = v22;
    *(_DWORD *)(v11 + 88) = v10;
    *(_QWORD *)(v11 + 96) = v14;
    *(_DWORD *)(v11 + 104) = v15;
    *(_OWORD *)(v11 + 112) = v21;
    *(_QWORD *)(v11 + 128) = v17;
    v23 = *((_QWORD *)this + 3);
    *(_DWORD *)(v11 + 32) = 1;
    *(_QWORD *)(v11 + 24) = v23;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16);
      v24 = *(void (***)(physx::Dy::PreIntegrateParallelTask *__hidden))v11;
    }
    else
    {
      v24 = &off_24ED8DA78;
    }
    v24[5]((physx::Dy::PreIntegrateParallelTask *)v11);
    v2 = *((_DWORD *)this + 22);
    v8 -= 512;
  }
}

void physx::Dy::PreIntegrateParallelTask::~PreIntegrateParallelTask(physx::Dy::PreIntegrateParallelTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PreIntegrateParallelTask::getName(physx::Dy::PreIntegrateParallelTask *this)
{
  return "PreIntegrateParallelTask";
}

void physx::Dy::PreIntegrateParallelTask::runInternal(physx::Dy::PreIntegrateParallelTask *this)
{
  unsigned int *v2;
  signed int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  signed int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  signed int v12;
  signed int v13;

  v13 = 0;
  v12 = 0;
  physx::Dy::DynamicsTGSContext::preIntegrateBodies(*((float32x2_t ***)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((_QWORD *)this + 8), *((_QWORD *)this + 9), *((int **)this + 10), *((_DWORD *)this + 22), *((float32x2_t **)this + 12), *((float *)this + 26), (unsigned int *)&v13, (unsigned int *)&v12);
  v2 = (unsigned int *)*((_QWORD *)this + 14);
  v3 = v13;
LABEL_2:
  v4 = *v2;
  if ((int)*v2 <= v3)
    v5 = v3;
  else
    v5 = *v2;
  do
  {
    v6 = __ldaxr(v2);
    if (v6 != v4)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(v5, v2));
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  v8 = v12;
LABEL_9:
  v9 = *v7;
  if ((int)*v7 <= v8)
    v10 = v8;
  else
    v10 = *v7;
  do
  {
    v11 = __ldaxr(v7);
    if (v11 != v9)
    {
      __clrex();
      goto LABEL_9;
    }
  }
  while (__stlxr(v10, v7));
}

void physx::Dy::SetupArticulationTask::~SetupArticulationTask(physx::Dy::SetupArticulationTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SetupArticulationTask::getName(physx::Dy::SetupArticulationTask *this)
{
  return "SetupArticulationTask";
}

uint64_t physx::Dy::SetupArticulationTask::runInternal(uint64_t this)
{
  _DWORD *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(physx::Dy::ArticulationTask *__hidden);
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;

  v1 = *(_DWORD **)(this + 40);
  v2 = v1[3];
  v3 = v2 & 0x7FFFFFFF;
  v36 = this;
  if ((v2 & 0x7FFFFFFF) != 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v39 = *(_QWORD *)(this + 48);
    v40 = *(_QWORD *)(this + 80);
    v8 = *(_DWORD *)(this + 56);
    v37 = v2 & 0x7FFFFFFF;
    v38 = *(_QWORD *)(this + 24);
    v9 = *(uint64_t **)(*(_QWORD *)v1 + 11984);
    v10 = 32;
    do
    {
      if (v10 >= v3)
        v11 = v3;
      else
        v11 = v10;
      if (v3 >= (int)v5 + 32)
        v12 = (v5 + 32);
      else
        v12 = v3;
      v41 = v5 + 32;
      v42 = v12;
      if (v5 < v12)
      {
        v13 = v4;
        v14 = v9;
        do
        {
          v15 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 12288) + v13);
          v16 = *v14;
          v17 = *(_OWORD *)(*v14 + 128);
          v19 = *(_OWORD *)(*v14 + 80);
          v18 = *(_OWORD *)(*v14 + 96);
          v15[4] = *(_OWORD *)(*v14 + 112);
          v15[5] = v17;
          v15[2] = v19;
          v15[3] = v18;
          v20 = *(_OWORD *)(v16 + 64);
          *v15 = *(_OWORD *)(v16 + 48);
          v15[1] = v20;
          v21 = *v14++;
          v22 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 112) + 12);
          if (v22 >> 8 > v6)
            v6 = v22 >> 8;
          if (v22 > v7)
            v7 = v22;
          --v11;
          v13 += 96;
        }
        while (v5 != v11);
      }
      v23 = *(_QWORD *)v1;
      v24 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v40 + 776), 80, 0x10u);
      v25 = *(_QWORD *)(v23 + 12288) + 96 * v5;
      v26 = *(_QWORD *)(v40 + 800);
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_DWORD *)(v24 + 32) = 0;
      *(_QWORD *)v24 = &off_24ED8D848;
      *(_QWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 40) = v40;
      *(_QWORD *)(v24 + 48) = v25;
      *(_DWORD *)(v24 + 56) = v42 - v5;
      *(_QWORD *)(v24 + 60) = *(_QWORD *)v39;
      *(_DWORD *)(v24 + 68) = *(_DWORD *)(v39 + 8);
      *(_DWORD *)(v24 + 72) = v8;
      *(_DWORD *)(v24 + 32) = 1;
      *(_QWORD *)(v24 + 24) = v38;
      if (v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 16);
        v27 = *(void (***)(physx::Dy::ArticulationTask *__hidden))v24;
      }
      else
      {
        v27 = &off_24ED8D848;
      }
      v3 = v37;
      this = ((uint64_t (*)(uint64_t))v27[5])(v24);
      v10 += 32;
      v9 += 32;
      v4 += 3072;
      v5 += 32;
    }
    while (v41 < v37);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v28 = *(unsigned int **)(v36 + 64);
LABEL_23:
  v29 = *v28;
  if ((int)*v28 <= (int)v7)
    v30 = v7;
  else
    v30 = *v28;
  do
  {
    v31 = __ldaxr(v28);
    if (v31 != v29)
    {
      __clrex();
      goto LABEL_23;
    }
  }
  while (__stlxr(v30, v28));
  v32 = *(unsigned int **)(v36 + 72);
LABEL_30:
  v33 = *v32;
  if ((int)*v32 <= (int)v6)
    v34 = v6;
  else
    v34 = *v32;
  do
  {
    v35 = __ldaxr(v32);
    if (v35 != v33)
    {
      __clrex();
      goto LABEL_30;
    }
  }
  while (__stlxr(v34, v32));
  return this;
}

void physx::Dy::SetStepperTask::~SetStepperTask(physx::Dy::SetStepperTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SetStepperTask::getName(physx::Dy::SetStepperTask *this)
{
  return "SetStepperTask";
}

uint64_t physx::Dy::SetStepperTask::release(physx::Dy::SetStepperTask *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
}

float physx::Dy::SetStepperTask::runInternal(physx::Dy::SetStepperTask *this)
{
  uint64_t v1;
  float v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  float result;

  v1 = *((_QWORD *)this + 5);
  v2 = *(float *)(*((_QWORD *)this + 6) + 88);
  v3 = *(_DWORD *)(v1 + 148);
  if (v3 >= 4)
    v4 = 4;
  else
    v4 = *(_DWORD *)(v1 + 148);
  v5 = *(_DWORD *)(v1 + 144) + v3 - v4;
  *(_DWORD *)(v1 + 144) = v5;
  *(_DWORD *)(v1 + 148) = v4;
  result = v2 / (float)v5;
  *(float *)(v1 + 156) = result;
  *(float *)(v1 + 160) = 1.0 / result;
  return result;
}

void physx::Dy::SetupArticulationInternalConstraintsTask::~SetupArticulationInternalConstraintsTask(physx::Dy::SetupArticulationInternalConstraintsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SetupArticulationInternalConstraintsTask::getName(physx::Dy::SetupArticulationInternalConstraintsTask *this)
{
  return "SetupArticulationInternalConstraintsTask";
}

uint64_t physx::Dy::SetupArticulationInternalConstraintsTask::runInternal(physx::Dy::SetupArticulationInternalConstraintsTask *this)
{
  uint64_t v1;
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  uint64_t (*v26)(uint64_t, unint64_t, uint64_t, int *, uint64_t, char *, float, float, float);
  int v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  char v33[2048];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  v2 = *((float *)this + 12);
  v3 = *(float *)(v1 + 160);
  v4 = *((_QWORD *)this + 7);
  v5 = *((_QWORD *)this + 8);
  v6 = *(_DWORD *)(v1 + 152);
  v7 = *(uint64_t **)(*(_QWORD *)v1 + 11984);
  v8 = *(_DWORD *)(v1 + 12) & 0x7FFFFFFF;
  v9 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v5 + 432));
  if (!v9)
  {
    v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v11 = "<allocation names disabled>";
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 12343, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v12)
    {
      v9 = (v12 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v9 - 8) = v9 - v12;
    }
    else
    {
      v9 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v9, *(physx::PxcNpMemBlockPool **)(v5 + 440));
  }
  v30 = (_QWORD *)v9;
  v31 = v5;
  *(_QWORD *)(v9 + 11880) = 0;
  *(_DWORD *)(v9 + 11888) = 0;
  if ((_DWORD)v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = v4 + 48 * v6;
    v17 = v9 + 11872;
    v18 = 96 * v8;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)v1 + 12288) + v13;
      v20 = *v7;
      v21 = *(_OWORD *)(*v7 + 128);
      v23 = *(_OWORD *)(*v7 + 80);
      v22 = *(_OWORD *)(*v7 + 96);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(*v7 + 112);
      *(_OWORD *)(v19 + 80) = v21;
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)(v19 + 48) = v22;
      v24 = *(_OWORD *)(v20 + 64);
      *(_OWORD *)v19 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = v24;
      v32 = 0;
      v25 = v15;
      v26 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, int *, uint64_t, char *, float, float, float))physx::Dy::ArticulationPImpl::sSetupInternalConstraintsTGS[*(unsigned int *)(*(_QWORD *)v19 + 40)];
      if (v26)
        v27 = v26(v19, v17, v16 + 48 * v25, &v32, *(_QWORD *)v1 + 11848, v33, *(float *)(v1 + 156), v3, v2);
      else
        v27 = 0;
      *(_BYTE *)(v19 + 93) = v27;
      v14 += v27;
      v15 = v25 + 64;
      v13 += 96;
      ++v7;
    }
    while (v18 != v13);
  }
  else
  {
    v14 = 0;
  }
  v28 = *(_QWORD *)(v31 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v28 + 8));
  *v30 = *(_QWORD *)v28;
  *(_QWORD *)v28 = v30;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v28 + 8));
  *(_DWORD *)(*(_QWORD *)v1 + 12024) += v14;
  return result;
}

void physx::Dy::PartitionTask::~PartitionTask(physx::Dy::PartitionTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PartitionTask::getName(physx::Dy::PartitionTask *this)
{
  return "PartitionTask";
}

uint64_t physx::Dy::PartitionTask::runInternal(physx::Dy::PartitionTask *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 8);
  v3 = *(_QWORD *)(v2 + 12288);
  v4 = *((_QWORD *)this + 5);
  v5 = *(_DWORD *)(v4 + 12);
  if ((v5 & 0x7FFFFFFF) != 0 && (v5 & 0x7FFFFFFE) != 0)
  {
    v6 = *(_DWORD *)(v4 + 152);
    v7 = v6 + *(unsigned __int8 *)(v3 + 93);
    v8 = *((_QWORD *)this + 6);
    v9 = v6 + 64;
    v10 = 1;
    do
    {
      v6 += 64;
      v11 = *(unsigned __int8 *)(v3 + 96 * v10 + 93);
      if (v6 < v6 + v11)
      {
        v12 = (__int128 *)(v8 + 48 * v9);
        do
        {
          v13 = (_OWORD *)(v8 + 48 * v7++);
          v14 = *v12;
          v15 = v12[2];
          v13[1] = v12[1];
          v13[2] = v15;
          *v13 = v14;
          v12 += 3;
          --v11;
        }
        while (v11);
        v4 = *((_QWORD *)this + 5);
      }
      ++v10;
      v9 += 64;
    }
    while (v10 < (*(_DWORD *)(v4 + 12) & 0x7FFFFFFFu));
    v2 = *((_QWORD *)this + 8);
  }
  v16 = *(_DWORD *)(v2 + 12024);
  *(_DWORD *)(v2 + 11928) = 0;
  LODWORD(v54) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v2 + 11920, 1u, &v54);
  v17 = *((_QWORD *)this + 8);
  **(_DWORD **)(v17 + 11920) = 0;
  v54 = *((_QWORD *)this + 7);
  v56 = 64;
  v57 = v3;
  v18 = *((_QWORD *)this + 5);
  v59 = *((_QWORD *)this + 6);
  v58 = *(_DWORD *)(v17 + 12296);
  v55 = *(_DWORD *)(v18 + 8);
  v60 = v16;
  v61 = *(_OWORD *)(v18 + 96);
  v63 = 0;
  v62 = 0;
  v64 = v17 + 11920;
  v65 = v17 + 11952;
  v66 = 0;
  result = physx::Dy::partitionContactConstraints(&v54);
  v20 = *((_QWORD *)this + 8);
  *(_DWORD *)(v20 + 12232) = result;
  v21 = v62;
  v22 = HIDWORD(v62);
  *(_DWORD *)(v20 + 11896) = v62;
  *(_DWORD *)(v20 + 11904) = v22;
  v23 = v63;
  *(_DWORD *)(v20 + 11908) = v63;
  v24 = *(_DWORD *)(v20 + 12024);
  if (v21)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = *(int **)(v20 + 11920);
    v30 = *v29;
    if (v66)
      v31 = 1;
    else
      v31 = 4;
    v32 = *((_QWORD *)this + 5);
    v33 = *(_QWORD *)(v32 + 112);
    v34 = *(_QWORD *)(v32 + 96);
    while (1)
    {
      v35 = v30 - v25 >= v31 ? v31 : v30 - v25;
      if (v35)
        break;
      LOWORD(v39) = 0;
LABEL_27:
      v25 += (unsigned __int16)v39;
      if (v30 != v21 && v30 == v25)
      {
        v29[v27] = v26;
        v26 = 0;
        v30 = v29[++v27];
      }
      if (v25 >= v21)
      {
        v29[v27] = v26;
        result = *(unsigned int *)(v20 + 12232);
        goto LABEL_54;
      }
    }
    v36 = v34 + 48 * v25;
    v37 = *(unsigned __int16 *)(v36 + 30);
    if (*(__int16 *)(v36 + 16) != -1 || *(unsigned __int16 *)(v36 + 18) != 0xFFFF)
    {
      LOWORD(v39) = 1;
LABEL_24:
      v40 = v37;
LABEL_25:
      v41 = v28;
      v42 = (unsigned int *)(v33 + 8 * v28++);
      *v42 = v25;
      v43 = v33 + 8 * v41;
      *(_WORD *)(v43 + 4) = v39;
      *(_WORD *)(v43 + 6) = v40;
      ++v26;
      goto LABEL_27;
    }
    if (v37 == 1)
    {
      v40 = 1;
      LOWORD(v39) = 1;
      if (v27 == -1 || v35 < 2)
        goto LABEL_25;
    }
    else
    {
      LOWORD(v39) = 1;
      if (v35 < 2)
        goto LABEL_24;
      if (v37 != 2 || v27 == -1)
        goto LABEL_24;
    }
    if ((unsigned __int16)v35 <= 2u)
      v45 = 2;
    else
      v45 = (unsigned __int16)v35;
    v39 = 1;
    while (v37 == *(unsigned __int16 *)(v34 + 48 * (v25 + v39) + 30))
    {
      v46 = v34 + 48 * (v25 + v39);
      v47 = *(__int16 *)(v46 + 16);
      v48 = *(unsigned __int16 *)(v46 + 18);
      if (v47 != -1 || v48 != 0xFFFF)
        break;
      if (v45 == ++v39)
      {
        v40 = v37;
        LOWORD(v39) = v35;
        goto LABEL_25;
      }
    }
    goto LABEL_24;
  }
  v28 = 0;
  v33 = *(_QWORD *)(*((_QWORD *)this + 5) + 112);
LABEL_54:
  *(_DWORD *)(v20 + 11928) = result;
  v50 = v28;
  if (v24 != v23 + v21)
  {
    v51 = v24 - v23;
    v52 = v28;
    do
    {
      v50 = v52 + 1;
      v53 = (unsigned int *)(v33 + 8 * v52);
      *v53 = v21;
      v53[1] = 262145;
      ++v21;
      v52 = v50;
    }
    while (v51 != v21);
  }
  *(_DWORD *)(v20 + 12192) = v28;
  *(_DWORD *)(v20 + 12196) = v50 - v28;
  *(_DWORD *)(v20 + 12048) = v50;
  return result;
}

void physx::Dy::SetupSolverConstraintsTask::~SetupSolverConstraintsTask(physx::Dy::SetupSolverConstraintsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SetupSolverConstraintsTask::getName(physx::Dy::SetupSolverConstraintsTask *this)
{
  return "SetupSolverConstraintsTask";
}

uint64_t physx::Dy::SetupSolverConstraintsTask::runInternal(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(physx::Dy::SetupSolverConstraintsSubTask *__hidden);
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (**v39)(physx::Dy::PxsCreateArticConstraintsSubTask *__hidden);

  v1 = this;
  v2 = *(_DWORD **)(this + 40);
  v3 = *(_DWORD *)(*(_QWORD *)v2 + 12048);
  if (v3)
  {
    v4 = 0;
    v5 = *((_QWORD *)v2 + 14);
    v6 = *(_DWORD *)(*(_QWORD *)v2 + 12048);
    do
    {
      v7 = v6 - 64;
      if (v6 >= 0x40)
        v8 = 64;
      else
        v8 = v6;
      v9 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*(_QWORD *)(v1 + 80) + 776), 112, 0x10u);
      v11 = *(_DWORD **)(v1 + 40);
      v10 = *(_QWORD *)(v1 + 48);
      v12 = *(_DWORD *)(v1 + 72);
      v13 = v11[39];
      v14 = v11[40];
      v15 = *(_QWORD *)(v1 + 80);
      v16 = *(_DWORD *)(v15 + 92);
      LODWORD(v11) = v11[36];
      v17 = *(_QWORD *)(v1 + 56);
      v18 = *(_QWORD *)(v1 + 64);
      v19 = *(_QWORD *)(v15 + 800);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      *(_QWORD *)v9 = &off_24ED8DD18;
      *(_QWORD *)(v9 + 8) = v19;
      *(_QWORD *)(v9 + 40) = v10;
      *(_QWORD *)(v9 + 48) = v5 + 8 * v4;
      *(_DWORD *)(v9 + 56) = v8;
      *(_QWORD *)(v9 + 64) = v17;
      *(_DWORD *)(v9 + 72) = v13;
      *(_DWORD *)(v9 + 76) = v12;
      *(_DWORD *)(v9 + 80) = v14;
      *(_DWORD *)(v9 + 84) = v16;
      *(_DWORD *)(v9 + 88) = (_DWORD)v11;
      *(_QWORD *)(v9 + 96) = v15;
      *(_QWORD *)(v9 + 104) = v18;
      v20 = *(_QWORD *)(v1 + 24);
      *(_DWORD *)(v9 + 32) = 1;
      *(_QWORD *)(v9 + 24) = v20;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16);
        v21 = *(void (***)(physx::Dy::SetupSolverConstraintsSubTask *__hidden))v9;
      }
      else
      {
        v21 = &off_24ED8DD18;
      }
      this = ((uint64_t (*)(uint64_t))v21[5])(v9);
      v4 += 64;
      v6 = v7;
    }
    while (v4 < v3);
    v2 = *(_DWORD **)(v1 + 40);
  }
  v22 = v2[3];
  v23 = v22 & 0x7FFFFFFF;
  if ((v22 & 0x7FFFFFFF) != 0)
  {
    v24 = 0;
    v25 = 0;
    v26 = v22 & 0x7FFFFFFF;
    do
    {
      v27 = v26 - 64;
      if (v26 >= 0x40)
        v28 = 64;
      else
        v28 = v26;
      v29 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*(_QWORD *)(v1 + 80) + 776), 104, 0x10u);
      v31 = *(_QWORD *)(v1 + 56);
      v30 = *(_QWORD *)(v1 + 64);
      v32 = *(_QWORD *)(v30 + 11984) + v24;
      v33 = *(_QWORD **)(v1 + 80);
      v34 = v33[76];
      v35 = v33[74];
      v36 = *(_QWORD *)(v1 + 40);
      v37 = v33[100];
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_DWORD *)(v29 + 32) = 0;
      *(_QWORD *)v29 = &off_24ED8DD88;
      *(_QWORD *)(v29 + 8) = v37;
      *(_QWORD *)(v29 + 40) = v32;
      *(_DWORD *)(v29 + 48) = v28;
      *(_QWORD *)(v29 + 56) = v34;
      *(_QWORD *)(v29 + 64) = v35;
      *(_QWORD *)(v29 + 72) = v30;
      *(_QWORD *)(v29 + 80) = v33;
      *(_QWORD *)(v29 + 88) = v31;
      *(_QWORD *)(v29 + 96) = v36;
      v38 = *(_QWORD *)(v1 + 24);
      *(_DWORD *)(v29 + 32) = 1;
      *(_QWORD *)(v29 + 24) = v38;
      if (v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
        *(_QWORD *)(v29 + 16) = *(_QWORD *)(*(_QWORD *)(v29 + 24) + 16);
        v39 = *(void (***)(physx::Dy::PxsCreateArticConstraintsSubTask *__hidden))v29;
      }
      else
      {
        v39 = &off_24ED8DD88;
      }
      this = ((uint64_t (*)(uint64_t))v39[5])(v29);
      v25 += 64;
      v24 += 512;
      v26 = v27;
    }
    while (v25 < v23);
  }
  return this;
}

void physx::Dy::SetupSolverConstraintsSubTask::~SetupSolverConstraintsSubTask(physx::Dy::SetupSolverConstraintsSubTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SetupSolverConstraintsSubTask::getName(physx::Dy::SetupSolverConstraintsSubTask *this)
{
  return "SetupSolverConstraintsSubTask";
}

uint64_t physx::Dy::SetupSolverConstraintsSubTask::runInternal(physx::Dy::SetupSolverConstraintsSubTask *this)
{
  uint64_t v2;
  unint64_t v3;
  int32x2_t v4;
  __int128 v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t (**v17)(_QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int *v26;
  unsigned int v27;
  _WORD *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  double v33;
  int v34;
  _QWORD *v35;
  __int16 *v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  int v53;
  float *v54;
  float *v55;
  float v56;
  float *v57;
  int32x2_t v58;
  float v59;
  int FinalizeSolverContacts4Step;
  uint64_t v61;
  BOOL *v62;
  unsigned __int16 *v63;
  __int128 *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  __int16 v78;
  int32x2_t v79;
  int32x2_t v80;
  int v81;
  _QWORD *v83;
  _BYTE *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v93;
  __int128 *v94;
  uint64_t v95;
  physx::Dy::SetupSolverConstraintsSubTask *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _WORD *v106;
  uint64_t v107;
  uint64_t (**v108[5])(_QWORD, _QWORD);
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[171];
  _BYTE v114[5];
  uint64_t v115;
  _BYTE v116[716];
  float32x2x2_t v117;

  *(_QWORD *)&v116[692] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  v3 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 432));
  if (!v3)
  {
    v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v8 = "<allocation names disabled>";
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, 12343, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v9)
    {
      v3 = (v9 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v3 - 8) = v3 - v9;
    }
    else
    {
      v3 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v3, *(physx::PxcNpMemBlockPool **)(v2 + 440));
  }
  *(_QWORD *)(v3 + 11880) = 0;
  *(_DWORD *)(v3 + 11888) = 0;
  v10 = *((_QWORD *)this + 5);
  v11 = *((_QWORD *)this + 6);
  v12 = *((unsigned int *)this + 14);
  v104 = *((_QWORD *)this + 8);
  v13 = *((_QWORD *)this + 12);
  v14 = *((float *)this + 18);
  v15 = *((float *)this + 19);
  v16 = *((float *)this + 20);
  v17 = (uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 13) + 11848);
  v108[0] = (uint64_t (**)(_QWORD, _QWORD))off_24ED8D5D0;
  v108[1] = v17;
  v108[2] = (uint64_t (**)(_QWORD, _QWORD))(v3 + 11872);
  v108[3] = (uint64_t (**)(_QWORD, _QWORD))(v3 + 11824);
  v108[4] = (uint64_t (**)(_QWORD, _QWORD))(v3 + 12208);
  if ((_DWORD)v12)
  {
    v105 = v3;
    v97 = this;
    v18 = 0;
    v19 = *(_QWORD *)(v13 + 592);
    v20 = *(_QWORD *)(v13 + 608);
    v100 = v10 + 16;
    v21 = xmmword_2260E5D70;
    v99 = v10 + 18;
    v98 = v10 + 40;
    v101 = v12;
    __asm { FMOV            V14.2S, #1.0 }
    v102 = v11;
    v103 = v10;
    while (1)
    {
      v26 = (int *)(v11 + 8 * v18);
      v27 = *v26;
      v30 = *((unsigned __int16 *)v26 + 2);
      v28 = v26 + 1;
      v29 = v30;
      v31 = v27 + v30;
      v32 = *(unsigned __int16 *)(v10 + 48 * v27 + 30);
      if (v32 == 2)
      {
        v107 = v18;
        if (v27 < v31)
        {
          v61 = *(_QWORD *)(v13 + 232);
          v62 = v114;
          v63 = (unsigned __int16 *)(v100 + 48 * v27);
          v64 = &v110;
          v65 = v29;
          do
          {
            v111 = v21;
            *(_QWORD *)&v112 = 0;
            DWORD2(v112) = 0;
            v66 = *((_QWORD *)v63 + 2);
            v67 = *(_QWORD *)(v66 + 40);
            if (v67)
              v68 = *(__int128 **)(v67 + 40);
            else
              v68 = &v111;
            v69 = *(_QWORD *)(v66 + 48);
            if (v69)
              v70 = *(__int128 **)(v69 + 40);
            else
              v70 = &v111;
            v71 = *(_QWORD *)(v66 + 32);
            v72 = *(unsigned __int16 *)(v66 + 8);
            v73 = *((unsigned int *)v63 + 1);
            v74 = *((unsigned int *)v63 + 2);
            *((_QWORD *)v64 - 1) = *(_QWORD *)(v66 + 16);
            *(_QWORD *)v64 = v71;
            *((_DWORD *)v64 + 2) = v72;
            *((_QWORD *)v64 - 2) = v66;
            v75 = *((_DWORD *)v68 + 6);
            v76 = *((_OWORD *)v63 - 1);
            *(_QWORD *)(v62 - 155) = v63 - 8;
            v5 = *v68;
            v77 = *((_QWORD *)v68 + 2);
            *(_OWORD *)(v62 - 99) = *v68;
            *(_QWORD *)(v62 - 83) = v77;
            *(_DWORD *)(v62 - 75) = v75;
            *(_QWORD *)(v62 - 71) = *(_QWORD *)v70;
            *(_DWORD *)(v62 - 63) = *((_DWORD *)v70 + 2);
            *(_QWORD *)(v62 - 59) = *(_QWORD *)((char *)v70 + 12);
            *(_DWORD *)(v62 - 51) = *((_DWORD *)v70 + 5);
            *(_DWORD *)(v62 - 47) = *((_DWORD *)v70 + 6);
            *(_OWORD *)(v62 - 147) = v76;
            *(_QWORD *)(v62 - 131) = v19 + (v73 << 6);
            *(_QWORD *)(v62 - 123) = v19 + (v74 << 6);
            *(_QWORD *)(v62 - 115) = v20 + 48 * v73;
            *(_QWORD *)(v62 - 107) = v20 + 48 * v74;
            *(_QWORD *)(v62 - 23) = *(_QWORD *)v66;
            *(_QWORD *)(v62 - 11) = v61 + 32 * *(unsigned int *)(v66 + 72);
            v78 = *(_WORD *)(v66 + 10);
            *(v62 - 3) = HIBYTE(v78) & 1;
            *(v62 - 2) = (v78 & 0x80) != 0;
            *(v62 - 1) = (v78 & 0x20) != 0;
            *v62 = (v78 & 0x200) != 0;
            *(_DWORD *)(v62 - 15) = *(_DWORD *)(v66 + 76);
            v79.i32[0] = *v63;
            v79.i32[1] = v63[1];
            v80 = vceq_s32(v79, (int32x2_t)0xFFFF0000FFFFLL);
            v4 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)v80);
            *(int32x2_t *)(v62 - 43) = vsub_s32(v4, v80);
            v63 += 24;
            v62 += 208;
            v64 += 2;
            --v65;
          }
          while (v65);
        }
        if (v29 == 4)
          v81 = physx::Dy::setupSolverConstraintStep4((uint64_t)&v109, (uint64_t)v113, (float *)&v111, v108, v14, v15, v16, 1.0 / v15, *(float32_t *)(v13 + 760));
        else
          v81 = 1;
        if (v27 < v31 && v81 != 2)
        {
          v93 = v113;
          v94 = &v109;
          do
          {
            physx::Dy::SetupSolverConstraintStep((uint64_t)v94, (uint64_t)v93, v108, v14, v15, v16, 1.0 / v15, *(float *)(v13 + 760));
            v93 += 208;
            v94 += 2;
            --v29;
          }
          while (v29);
        }
        goto LABEL_67;
      }
      if (v32 == 1)
        break;
LABEL_68:
      if (++v18 == v12)
      {
        v13 = *((_QWORD *)v97 + 12);
        v3 = v105;
        goto LABEL_70;
      }
    }
    v106 = v28;
    v107 = v18;
    HIDWORD(v33) = 0;
    v109 = 0u;
    v110 = 0u;
    v34 = v29;
    v111 = 0u;
    v112 = 0u;
    if (v27 >= v31)
      goto LABEL_36;
    v35 = v116;
    v36 = (__int16 *)(v99 + 48 * v27);
    v37 = *(_QWORD *)(v104 + 32);
    v38 = &v109;
    v39 = &v111;
    v40 = v29;
    while (1)
    {
      v41 = *(_QWORD *)(v36 + 7);
      *(_QWORD *)v39 = v41;
      v42 = v37
          + 32
          * (*(_DWORD *)(v104 + 4 * (*(_DWORD *)(v41 + 108) & 7)) + (*(_DWORD *)(v41 + 108) >> 3));
      *(_QWORD *)v38 = v42;
      v43 = *(_OWORD *)(v36 - 9);
      v45 = *(unsigned int *)(v36 + 1);
      v44 = *(unsigned int *)(v36 + 3);
      v47 = *(_QWORD *)(v41 + 32);
      v46 = *(_QWORD *)(v41 + 40);
      v48 = *(_QWORD *)(v41 + 24);
      v49 = *(_DWORD *)(v47 + 16);
      *(_QWORD *)&v5 = *(_QWORD *)(v47 + 20);
      v50 = *(_QWORD *)(v42 + 16);
      *(_OWORD *)((char *)v35 - 140) = *(_OWORD *)v47;
      *((_DWORD *)v35 - 31) = v49;
      *((_QWORD *)&v5 + 1) = *(_QWORD *)v46;
      *(_OWORD *)(v35 - 15) = v5;
      *(_OWORD *)(v35 - 13) = *(_OWORD *)(v46 + 8);
      *((_DWORD *)v35 - 22) = *(_DWORD *)(v46 + 24);
      *(_QWORD *)((char *)v35 - 76) = v48;
      *(_QWORD *)((char *)v35 - 28) = v50;
      *(_QWORD *)((char *)v35 - 196) = v36 - 9;
      *(_OWORD *)((char *)v35 - 188) = v43;
      *(_QWORD *)((char *)v35 - 172) = v19 + (v45 << 6);
      *(_QWORD *)((char *)v35 - 164) = v19 + (v44 << 6);
      *(_QWORD *)((char *)v35 - 156) = v20 + 48 * v45;
      *(_QWORD *)((char *)v35 - 148) = v20 + 48 * v44;
      v51 = *(_WORD *)(v41 + 80);
      *((_BYTE *)v35 - 54) = HIBYTE(v51) & 1;
      *((_BYTE *)v35 - 55) = (v51 & 4) != 0;
      v52 = (v51 & 8) != 0 ? 8 : 1;
      *((_DWORD *)v35 - 21) = v52;
      if ((v51 & 0x10) == 0)
        break;
      if (*v36 == -1)
      {
        v53 = 2;
LABEL_27:
        *((_DWORD *)v35 - 20) = v53;
        goto LABEL_28;
      }
      *((_DWORD *)v35 - 20) = 8;
LABEL_28:
      v54 = (float *)(v20 + 48 * v45 + 12);
      if ((v51 & 8) != 0)
        v54 = (float *)(*(_QWORD *)(v41 + 32) + 128);
      v56 = *v54;
      v57 = (float *)(v20 + 48 * v44 + 12);
      if ((v51 & 0x10) != 0)
        v57 = (float *)(*(_QWORD *)(v41 + 40) + 128);
      v58.i32[0] = *(unsigned __int8 *)(v41 + 84);
      v58.i32[1] = *(unsigned __int8 *)(v41 + 85);
      v59 = *v57;
      v4 = vceqz_s32(v58);
      v117.val[0] = (float32x2_t)vbic_s8(_D14, (int8x8_t)v4);
      v117.val[1] = v117.val[0];
      v55 = (float *)v35 - 53;
      vst2_f32(v55, v117);
      *((_DWORD *)v35 - 13) = *(_DWORD *)(v41 + 92);
      *(_QWORD *)((char *)v35 - 44) = *(_QWORD *)(v41 + 72);
      *((_BYTE *)v35 - 36) = *(_BYTE *)(v41 + 82);
      *((_DWORD *)v35 - 12) = 2139095039;
      if (v56 >= v59)
        v56 = v59;
      *((float *)v35 - 1) = v56;
      v33 = *(double *)(v41 + 112);
      *(double *)v35 = v33;
      v35 += 28;
      v38 = (__int128 *)((char *)v38 + 8);
      v39 = (__int128 *)((char *)v39 + 8);
      v36 += 24;
      if (!--v40)
      {
        v34 = (unsigned __int16)*v106;
LABEL_36:
        if (v34 == 4)
        {
          LODWORD(v5) = *(_DWORD *)(v13 + 120);
          LODWORD(v6) = *(_DWORD *)(v13 + 128);
          *(float *)&v33 = v16;
          *(float *)v4.i32 = 1.0 / v15;
          FinalizeSolverContacts4Step = physx::Dy::createFinalizeSolverContacts4Step((uint64_t)&v109, v105, (uint64_t)v113, (uint64_t)v108, v33, *(double *)&v4, *(double *)&v5, *(float *)(v13 + 124), *(float *)(v13 + 136), v6);
        }
        else
        {
          FinalizeSolverContacts4Step = 1;
        }
        if (v27 < v31 && FinalizeSolverContacts4Step != 2)
        {
          v83 = (_QWORD *)(v98 + 48 * v27);
          v84 = v113;
          v85 = (uint64_t *)&v109;
          do
          {
            v86 = *v85++;
            LODWORD(v5) = *(_DWORD *)(v13 + 120);
            *(float *)v4.i32 = 1.0 / v15;
            physx::Dy::createFinalizeSolverContactsStep((uint64_t)v84, (uint64_t *)v86, v105, (uint64_t)v108, v16, *(double *)&v4, *(double *)&v5, *(float *)(v13 + 124), *(float *)(v13 + 136));
            *((_WORD *)v83 - 6) = *(unsigned __int8 *)(v86 + 24);
            *v83 = *(_QWORD *)(v86 + 16);
            v83 += 6;
            v84 += 224;
            --v29;
          }
          while (v29);
        }
        v87 = (unsigned __int16)*v106;
        if (*v106)
        {
          v88 = &v111;
          v89 = &v115;
          do
          {
            v91 = *(_QWORD *)v88;
            v88 = (__int128 *)((char *)v88 + 8);
            v90 = v91;
            *(_QWORD *)(v91 + 72) = *(v89 - 1);
            LOBYTE(v91) = *(_BYTE *)v89;
            v89 += 28;
            *(_BYTE *)(v90 + 82) = v91;
            --v87;
          }
          while (v87);
        }
        v11 = v102;
        v10 = v103;
        v12 = v101;
LABEL_67:
        v18 = v107;
        v21 = xmmword_2260E5D70;
        goto LABEL_68;
      }
    }
    if ((v51 & 0x40) != 0)
      v53 = 1;
    else
      v53 = 2;
    if ((v51 & 0x400) != 0)
      v53 = 4;
    goto LABEL_27;
  }
LABEL_70:
  v95 = *(_QWORD *)(v13 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v95 + 8));
  *(_QWORD *)v3 = *(_QWORD *)v95;
  *(_QWORD *)v95 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v95 + 8));
}

void physx::Dy::PxsCreateArticConstraintsSubTask::~PxsCreateArticConstraintsSubTask(physx::Dy::PxsCreateArticConstraintsSubTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::PxsCreateArticConstraintsSubTask::getName(physx::Dy::PxsCreateArticConstraintsSubTask *this)
{
  return "PxsDynamics.PxsCreateArticConstraintsSubTask";
}

uint64_t physx::Dy::PxsCreateArticConstraintsSubTask::runInternal(physx::Dy::PxsCreateArticConstraintsSubTask *this)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)this + 10);
  v3 = *(float *)(v2 + 136);
  v4 = *(float *)(v2 + 120);
  v5 = *(float *)(v2 + 124);
  v6 = *(float *)(v2 + 88);
  if (*(float *)(v2 + 96) >= *(float *)(v2 + 92))
    v7 = *(float *)(v2 + 92);
  else
    v7 = *(float *)(v2 + 96);
  v8 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 432));
  if (!v8)
  {
    v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v10 = "<allocation names disabled>";
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 12343, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v11)
    {
      v8 = (v11 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v8 - 8) = v8 - v11;
    }
    else
    {
      v8 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v8, *(physx::PxcNpMemBlockPool **)(v2 + 440));
  }
  *(_QWORD *)(v8 + 11880) = 0;
  *(_DWORD *)(v8 + 11888) = 0;
  if (*((_DWORD *)this + 12))
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12);
      (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, float, float, float, float, float, float, float, float))(*(_QWORD *)v13 + 296))(v13, *((_QWORD *)this + 11), v8, *((_QWORD *)this + 7), *((_QWORD *)this + 8), *((_QWORD *)this + 9) + 11848, *(_QWORD *)(*((_QWORD *)this + 10) + 232), *(unsigned int *)(*((_QWORD *)this + 12) + 144), *(float *)(*((_QWORD *)this + 12) + 156), v6, *(float *)(*((_QWORD *)this + 12) + 160), v7, v3, v4, v5, *(float *)(*((_QWORD *)this + 10) + 760));
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 12));
  }
  v14 = *(_QWORD *)(*((_QWORD *)this + 10) + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 8));
  *(_QWORD *)v8 = *(_QWORD *)v14;
  *(_QWORD *)v14 = v8;
  return pthread_mutex_unlock((pthread_mutex_t *)(v14 + 8));
}

void physx::Dy::SolveIslandTask::~SolveIslandTask(physx::Dy::SolveIslandTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::SolveIslandTask::getName(physx::Dy::SolveIslandTask *this)
{
  return "SolveIslandTask";
}

void physx::Dy::SolveIslandTask::runInternal(physx::Dy::SolveIslandTask *this, double a2, __n128 a3, __n128 a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void (**v48)(physx::Dy::ParallelSolveTask *__hidden);
  _BYTE v49[56];
  uint64_t v50;
  uint64_t v51;

  v5 = *((_QWORD *)this + 8);
  v6 = *(_DWORD *)(v5 + 11928);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v6 = 0;
    v12 = 0;
    v13 = *((_QWORD *)this + 6);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(_QWORD *)(v13 + 88);
    do
    {
      v16 = *(_QWORD *)(v5 + 11920);
      v17 = *(_DWORD *)(v16 + 4 * v7) + v11;
      if (v11 >= v17)
      {
        v18 = 0;
        v11 += *(_DWORD *)(v16 + 4 * v7);
      }
      else
      {
        v18 = 0;
        v19 = v11;
        do
        {
          v20 = *(_WORD *)(v15 + 8 * v19 + 4);
          if (v20)
          {
            v21 = v20 + v9;
            v22 = v8;
            do
            {
              v23 = (__int128 *)(v14 + 48 * v9);
              if (*((_WORD *)v23 + 15))
              {
                if (v9 != (_DWORD)v22)
                {
                  v24 = v14 + 48 * v22;
                  v25 = *v23;
                  a3 = (__n128)v23[1];
                  a4 = (__n128)v23[2];
                  *(__n128 *)(v24 + 16) = a3;
                  *(__n128 *)(v24 + 32) = a4;
                  *(_OWORD *)v24 = v25;
                }
                v22 = (v22 + 1);
              }
              else
              {
                --v20;
              }
              ++v9;
            }
            while (v21 != (unsigned __int16)v9);
            if (v20)
            {
              v26 = v15 + 8 * v10;
              *(_DWORD *)v26 = v8;
              *(_WORD *)(v26 + 4) = v20;
              v27 = **(unsigned __int8 **)(v14 + 48 * v8 + 32);
              if (v27 == 5)
              {
                if (v20 < 2u)
                {
                  LOBYTE(v27) = 5;
                }
                else
                {
                  v28 = v20 - 1;
                  v29 = v8 + 1;
                  LOBYTE(v27) = 5;
                  do
                  {
                    if (**(_BYTE **)(v14 + 48 * v29 + 32) == 1)
                      LOBYTE(v27) = 1;
                    ++v29;
                    --v28;
                  }
                  while (v28);
                }
              }
              *(_WORD *)(v15 + 8 * v10++ + 6) = v27;
              ++v18;
            }
            v8 = v22;
          }
          ++v19;
        }
        while (v19 != v17);
        v5 = *((_QWORD *)this + 8);
        v16 = *(_QWORD *)(v5 + 11920);
        v11 += *(_DWORD *)(v16 + 4 * v7);
      }
      *(_DWORD *)(v16 + 4 * v6) = v18;
      if (v18)
        ++v6;
      v12 += v18;
      ++v7;
    }
    while (v7 < *(unsigned int *)(v5 + 11928));
  }
  else
  {
    v12 = 0;
  }
  *(_DWORD *)(v5 + 11928) = v6;
  *(_DWORD *)(v5 + 12048) = v12;
  v30 = 0;
  v31 = *(_DWORD *)(*((_QWORD *)this + 7) + 4) & 0x7FFFFFFF;
  if ((_DWORD)v31)
  {
    v32 = (unsigned __int8 *)(*(_QWORD *)(v5 + 12288) + 92);
    do
    {
      v34 = *v32;
      v32 += 96;
      v33 = v34;
      if (v30 <= v34)
        v30 = v33;
      --v31;
    }
    while (v31);
    *(_DWORD *)(v5 + 12168) = 0;
    if ((*(_DWORD *)(v5 + 12172) & 0x7FFFFFFFu) < v30)
    {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v5 + 12160, v30);
      v5 = *((_QWORD *)this + 8);
    }
    *(_DWORD *)(v5 + 12168) = v30;
    *(_DWORD *)(v5 + 12184) = 0;
    if ((*(_DWORD *)(v5 + 12188) & 0x7FFFFFFFu) < v30)
    {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v5 + 12176, v30);
      v5 = *((_QWORD *)this + 8);
    }
  }
  else
  {
    *(_DWORD *)(v5 + 12168) = 0;
    *(_DWORD *)(v5 + 12184) = 0;
  }
  *(_DWORD *)(v5 + 12184) = v30;
  v35 = *(_QWORD *)(v5 + 12176);
  v50 = *(_QWORD *)(v5 + 12160);
  v51 = v35;
  if (*(_DWORD *)(v5 + 11928)
    && ((v36 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2)),
         v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36),
         v5 = *((_QWORD *)this + 8),
         v38 = (v12 + *(_DWORD *)(v5 + 11928) - 1) / *(_DWORD *)(v5 + 11928) + 7,
         v37 >= 2)
      ? (v39 = v38 > 0xF)
      : (v39 = 0),
        v39))
  {
    v40 = *((_QWORD *)this + 5);
    if (v37 >= v38 >> 3)
      v41 = v38 >> 3;
    else
      v41 = v37;
    *(_QWORD *)(v40 + 172) = 0;
    *(_QWORD *)(v40 + 164) = 0;
    *(_QWORD *)(v40 + 180) = 0;
    v42 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)this + 9) + 776), 80 * (int)v41, 0x10u);
    do
    {
      v43 = *((_QWORD *)this + 9);
      v44 = *(_QWORD *)(v43 + 800);
      v45 = *(_OWORD *)((char *)this + 40);
      v46 = *(_OWORD *)((char *)this + 56);
      *(_QWORD *)(v42 + 16) = 0;
      *(_QWORD *)(v42 + 24) = 0;
      *(_DWORD *)(v42 + 32) = 0;
      *(_QWORD *)v42 = &off_24ED8DE68;
      *(_QWORD *)(v42 + 8) = v44;
      *(_OWORD *)(v42 + 40) = v45;
      *(_OWORD *)(v42 + 56) = v46;
      *(_QWORD *)(v42 + 72) = v43;
      v47 = *((_QWORD *)this + 3);
      *(_DWORD *)(v42 + 32) = 1;
      *(_QWORD *)(v42 + 24) = v47;
      if (v47)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
        *(_QWORD *)(v42 + 16) = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 16);
        v48 = *(void (***)(physx::Dy::ParallelSolveTask *__hidden))v42;
      }
      else
      {
        v48 = &off_24ED8DE68;
      }
      v48[5]((physx::Dy::ParallelSolveTask *)v42);
      v42 += 80;
      --v41;
    }
    while (v41);
  }
  else
  {
    physx::Dy::DynamicsTGSContext::iterativeSolveIsland(*((_QWORD *)this + 9), *((_QWORD *)this + 6), *((unsigned int **)this + 7), v5, *(_DWORD *)(*((_QWORD *)this + 5) + 144), *(_DWORD *)(*((_QWORD *)this + 5) + 148), (uint64_t)v49, *(float *)(*((_QWORD *)this + 5) + 156), a3.n128_f64[0], a4);
  }
}

void physx::Dy::ParallelSolveTask::~ParallelSolveTask(physx::Dy::ParallelSolveTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::ParallelSolveTask::getName(physx::Dy::ParallelSolveTask *this)
{
  return "ParallelSolveTask";
}

uint64_t physx::Dy::ParallelSolveTask::runInternal(physx::Dy::ParallelSolveTask *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  __n128 v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  physx::Dy::ThreadContext *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  signed int v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  signed int v27;
  signed int v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  float32x2_t *v58;
  unsigned int v59;
  unsigned int v60;
  signed int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  signed int v66;
  void (*v67)(float);
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  signed int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  int v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  float32x2_t *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  signed int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, float);
  void (*v115)(uint64_t, float);
  unsigned int v116;
  unsigned int v117;
  signed int v118;
  uint64_t v119;
  uint64_t result;
  int v121;
  unsigned int v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  float v127;
  int v128;
  signed int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _QWORD *v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  signed int v173;
  signed int v174;
  unsigned int v175;
  signed int v176;
  signed int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  signed int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  signed int v208;
  signed int v209;
  signed int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE v215[56];
  uint64_t v216;
  uint64_t v217;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 6);
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)this + 5);
  v6 = *(float *)(v5 + 156);
  v165 = *(_DWORD *)(v5 + 144);
  v166 = *(_DWORD *)(v5 + 148);
  v164 = physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v1 + 432));
  if (!v164)
  {
    v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v10 = "<allocation names disabled>";
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 12343, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v11)
    {
      v12 = (physx::Dy::ThreadContext *)((v11 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((_QWORD *)v12 - 1) = (char *)v12 - v11;
    }
    else
    {
      v12 = 0;
    }
    v164 = v12;
    physx::Dy::ThreadContext::ThreadContext(v12, *(physx::PxcNpMemBlockPool **)(v1 + 440));
  }
  v13 = (unsigned int *)(v5 + 164);
  v169 = (unsigned int *)(v5 + 172);
  v196 = (unsigned int *)(v5 + 180);
  v191 = (unsigned int *)(v5 + 168);
  v172 = (unsigned int *)(v5 + 176);
  v187 = (unsigned int *)(v5 + 184);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 4, v13));
  do
    v15 = __ldaxr(v169);
  while (__stlxr(v15 + 128, v169));
  v204 = (unsigned int *)(v5 + 164);
  do
    v16 = __ldaxr(v196);
  while (__stlxr(v16 + 1, v196));
  v162 = *(_DWORD *)(v2 + 12048);
  v17 = v3[1];
  v175 = *v3;
  v214 = *(_QWORD *)(v4 + 72);
  v180 = *(_QWORD *)(v4 + 88);
  v161 = *(_QWORD *)(v1 + 576);
  v163 = v1;
  v213 = *(_QWORD *)(v1 + 592);
  v18 = *(_QWORD *)(v2 + 11920);
  v192 = *(unsigned int *)(v2 + 11928);
  v19 = *(unsigned int *)(v4 + 112);
  v20 = *(_DWORD *)(v2 + 12168);
  v189 = v164 + 1520;
  if ((*((_DWORD *)v164 + 3043) & 0x7FFFFFFFu) < v20)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v164 + 1520), v20);
    v20 = *(_DWORD *)(v2 + 12168);
  }
  v21 = v164 + 1522;
  v188 = v164 + 1522;
  if ((*((_DWORD *)v164 + 3047) & 0x7FFFFFFFu) < v20)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)v21, v20);
    v21 = v164 + 1522;
  }
  v197 = v17 & 0x7FFFFFFF;
  v22 = *v21;
  v216 = *v189;
  v217 = v22;
  v190 = v2;
  v179 = v18;
  v160 = v19 << 6;
  if (v165 < 2)
  {
    v23 = 0;
    v28 = 0;
    LODWORD(v26) = 4;
    v198 = 128;
    v25 = 0.0;
    v168 = v16;
    v27 = 0;
    v181 = v15;
    v29 = v191;
    v30 = v196;
  }
  else
  {
    v23 = 0;
    v24 = (v19 << 6) + 64;
    v171 = v213 + v24;
    v170 = v161 + v24;
    v25 = 0.0;
    v167 = 1;
    v198 = 128;
    v26 = 4;
    v181 = v15;
    v168 = v16;
    v27 = 0;
    v28 = 0;
    v29 = v191;
    v30 = v196;
    do
    {
      v173 = v28;
      if ((int)*v172 < v28)
      {
        v31 = 30000;
        while ((int)*v172 < v173)
        {
          if (!--v31)
          {
            sched_yield();
            v31 = 10000;
          }
        }
      }
      if ((int)*v187 < v23)
      {
        v32 = 30000;
        while ((int)*v187 < v23)
        {
          if (!--v32)
          {
            sched_yield();
            v32 = 10000;
          }
        }
      }
      v33 = v168 - v23;
      v34 = v197;
      if (v168 - v23 < v197)
      {
        v183 = v26;
        v35 = 0;
        do
        {
          v36 = *(_QWORD *)(*(_QWORD *)(v2 + 12288) + 96 * v33);
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, float, float, float))(*(_QWORD *)v36 + 272))(v36, *v189, *v188, 0, 1, v6, 1.0 / v6, v25);
          ++v35;
          do
            v37 = __ldaxr(v30);
          while (__stlxr(v37 + 1, v30));
          v33 = v37 - v23;
          v34 = v197;
        }
        while (v37 - v23 < v197);
        v168 = v37;
        if (v35)
        {
          do
            v38 = __ldaxr(v187);
          while (__stlxr(v38 + v35, v187));
          v26 = v183;
          v34 = v197;
        }
        else
        {
          v26 = v183;
        }
      }
      v176 = v23 + v34;
      if ((int)*v187 < (int)(v23 + v34))
      {
        v39 = 30000;
        while ((int)*v187 < v176)
        {
          if (!--v39)
          {
            sched_yield();
            v39 = 10000;
          }
        }
      }
      if ((_DWORD)v192)
      {
        v200 = 0;
        v193 = 0;
        do
        {
          if ((int)*v29 < v27)
          {
            v40 = 30000;
            while ((int)*v29 < v27)
            {
              if (!--v40)
              {
                sched_yield();
                v40 = 10000;
              }
            }
          }
          v41 = v14 - v27;
          v42 = *(_DWORD *)(v18 + 4 * v200);
          if (v14 - v27 >= v42)
          {
            v29 = v191;
          }
          else
          {
            v208 = v27;
            v43 = 0;
            v205 = *(_DWORD *)(v18 + 4 * v200);
            do
            {
              v44 = v26;
              if (v42 - v41 >= v26)
                v45 = v26;
              else
                v45 = v42 - v41;
              if ((_DWORD)v45)
              {
                v46 = v180 + 8 * v193 + 8 * v41;
                v47 = v45;
                do
                {
                  physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v46 + 6)](v46, v214, v213, (uint64_t)v215, -3.4028e38, v25);
                  v46 += 8;
                  --v47;
                }
                while (v47);
              }
              v26 = (v44 - v45);
              if (v44 == (_DWORD)v45)
              {
                do
                  v14 = __ldaxr(v204);
                while (__stlxr(v14 + 4, v204));
                v41 = v14 - v208;
                v26 = 4;
              }
              else
              {
                v14 += v45;
                v41 += v45;
              }
              v42 = v205;
              v43 += v45;
            }
            while (v41 < v205);
            if (v43)
            {
              v29 = v191;
              do
                v48 = __ldaxr(v191);
              while (__stlxr(v48 + v43, v191));
            }
            else
            {
              v29 = v191;
            }
            v2 = v190;
            v27 = v208;
            v18 = v179;
          }
          v27 += v42;
          v193 += v42;
          ++v200;
          v30 = v196;
        }
        while (v200 != v192);
      }
      if ((int)*v29 < v27)
      {
        v49 = 30000;
        while ((int)*v29 < v27)
        {
          if (!--v49)
          {
            sched_yield();
            v49 = 10000;
          }
        }
      }
      v50 = v181 - v173;
      if (v181 - v173 < v175)
      {
        v184 = v26;
        v209 = v27;
        v51 = 0;
        v52 = v175;
        do
        {
          v53 = v52 - v50;
          if (v53 >= v198)
            v54 = v198;
          else
            v54 = v53;
          v55 = v50;
          if ((_DWORD)v54)
          {
            v56 = v171 + ((unint64_t)v50 << 6);
            v57 = v54;
            v58 = (float32x2_t *)(v170 + ((unint64_t)v50 << 6));
            do
            {
              physx::Dy::integrateCoreStep(v58, v56, v6, v7, v8);
              v56 += 64;
              v58 += 8;
              --v57;
            }
            while (v57);
          }
          v198 -= v54;
          if (v198)
          {
            v181 += v54;
            v50 = v54 + v55;
          }
          else
          {
            do
              v59 = __ldaxr(v169);
            while (__stlxr(v59 + 128, v169));
            v181 = v59;
            v50 = v59 - v173;
            v198 = 128;
          }
          v2 = v190;
          v30 = v196;
          v51 += v54;
          v52 = v175;
        }
        while (v50 < v175);
        if (v51)
        {
          do
            v60 = __ldaxr(v172);
          while (__stlxr(v60 + v51, v172));
        }
        v29 = v191;
        v27 = v209;
        v26 = v184;
      }
      v61 = v176;
      v62 = v168 - v176;
      v63 = v197;
      if (v168 - v176 < v197)
      {
        v64 = v26;
        v65 = 0;
        v66 = v176;
        do
        {
          v67 = (void (*)(float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 12288) + 96 * v62) + 40)];
          if (v67)
          {
            v67(v6);
            v66 = v176;
          }
          ++v65;
          do
            v68 = __ldaxr(v30);
          while (__stlxr(v68 + 1, v30));
          v62 = v68 - v66;
        }
        while (v68 - v66 < v197);
        if (v65)
        {
          do
            v69 = __ldaxr(v187);
          while (__stlxr(v69 + v65, v187));
          v168 = v68;
          v26 = v64;
          v63 = v197;
          v61 = v176;
        }
        else
        {
          v168 = v68;
          v26 = v64;
          v63 = v197;
          v61 = v66;
        }
      }
      v25 = v6 + v25;
      v28 = v173 + v175;
      v23 = v61 + v63;
      ++v167;
    }
    while (v167 != v165);
  }
  v174 = v28;
  if ((int)*v172 < v28)
  {
    v70 = 30000;
    while ((int)*v172 < v174)
    {
      if (!--v70)
      {
        sched_yield();
        v70 = 10000;
      }
    }
  }
  if ((int)*v187 < v23)
  {
    v71 = 30000;
    while ((int)*v187 < v23)
    {
      if (!--v71)
      {
        sched_yield();
        v71 = 10000;
      }
    }
  }
  v185 = v26;
  v72 = v168 - v23;
  v73 = v197;
  if (v168 - v23 < v197)
  {
    v74 = 0;
    do
    {
      v75 = *(_QWORD *)(*(_QWORD *)(v2 + 12288) + 96 * v72);
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, float, float, float))(*(_QWORD *)v75 + 272))(v75, *v189, *v188, 0, 1, v6, 1.0 / v6, v25);
      ++v74;
      do
        v76 = __ldaxr(v30);
      while (__stlxr(v76 + 1, v30));
      v72 = v76 - v23;
    }
    while (v76 - v23 < v197);
    if (v74)
    {
      do
        v77 = __ldaxr(v187);
      while (__stlxr(v77 + v74, v187));
    }
    v168 = v76;
    v29 = v191;
    v73 = v197;
  }
  v78 = v23 + v73;
  if ((int)*v187 < v78)
  {
    v79 = 30000;
    while ((int)*v187 < v78)
    {
      if (!--v79)
      {
        sched_yield();
        v79 = 10000;
      }
    }
  }
  v177 = v78;
  if ((_DWORD)v192)
  {
    v80 = 0;
    v81 = 0;
    v82 = v185;
    do
    {
      if ((int)*v29 < v27)
      {
        v83 = 30000;
        while ((int)*v29 < v27)
        {
          if (!--v83)
          {
            sched_yield();
            v83 = 10000;
          }
        }
      }
      v84 = v14 - v27;
      v85 = *(_DWORD *)(v18 + 4 * v80);
      if (v14 - v27 >= v85)
      {
        v29 = v191;
      }
      else
      {
        v201 = v80;
        v210 = v27;
        v86 = 0;
        v194 = v81;
        v203 = v180 + 8 * v81;
        v87 = v214;
        v206 = *(_DWORD *)(v18 + 4 * v80);
        do
        {
          v88 = v82;
          if (v85 - v84 >= v82)
            v89 = v82;
          else
            v89 = v85 - v84;
          if ((_DWORD)v89)
          {
            v90 = v203 + 8 * v84;
            v91 = v89;
            do
            {
              physx::Dy::g_SolveConcludeTGSMethods[*(unsigned __int16 *)(v90 + 6)](v90, v87, v213, (uint64_t)v215, v25);
              v90 += 8;
              --v91;
            }
            while (v91);
          }
          v82 = v88 - v89;
          if (v88 == (_DWORD)v89)
          {
            do
              v14 = __ldaxr(v204);
            while (__stlxr(v14 + 4, v204));
            v84 = v14 - v210;
            v82 = 4;
          }
          else
          {
            v14 += v89;
            v84 += v89;
          }
          v87 = v214;
          v85 = v206;
          v86 += v89;
        }
        while (v84 < v206);
        if (v86)
        {
          v29 = v191;
          v80 = v201;
          do
            v92 = __ldaxr(v191);
          while (__stlxr(v92 + v86, v191));
          v27 = v210;
          v18 = v179;
        }
        else
        {
          v29 = v191;
          v27 = v210;
          v18 = v179;
          v80 = v201;
        }
        v81 = v194;
      }
      v27 += v85;
      v81 += v85;
      ++v80;
    }
    while (v80 != v192);
  }
  else
  {
    v82 = v185;
  }
  v93 = v190;
  v94 = v187;
  if ((int)*v29 < v27)
  {
    v95 = 30000;
    while ((int)*v29 < v27)
    {
      if (!--v95)
      {
        sched_yield();
        v95 = 10000;
      }
    }
  }
  v211 = v27;
  v96 = *(float *)(v163 + 92);
  v97 = v175;
  v98 = v181 - v174;
  v186 = v82;
  if (v181 - v174 < v175)
  {
    v99 = 0;
    do
    {
      if (v97 - v98 >= v198)
        v100 = v198;
      else
        v100 = v97 - v98;
      v101 = v98;
      if ((_DWORD)v100)
      {
        v102 = v213 + v160 + 64 + ((unint64_t)v98 << 6);
        v103 = v100;
        v104 = (float32x2_t *)(v161 + v160 + 64 + ((unint64_t)v98 << 6));
        do
        {
          physx::Dy::integrateCoreStep(v104, v102, v6, v7, v8);
          v102 += 64;
          v104 += 8;
          --v103;
        }
        while (v103);
      }
      v198 -= v100;
      if (v198)
      {
        v98 = v100 + v101;
      }
      else
      {
        do
          v105 = __ldaxr(v169);
        while (__stlxr(v105 + 128, v169));
        v98 = v105 - v174;
        v198 = 128;
      }
      v97 = v175;
      v99 += v100;
    }
    while (v98 < v175);
    v93 = v190;
    v94 = v187;
    if (v99)
    {
      do
        v106 = __ldaxr(v172);
      while (__stlxr(v106 + v99, v172));
    }
  }
  v107 = v168;
  v108 = v177;
  v109 = v168 - v177;
  v110 = v197;
  if (v168 - v177 < v197)
  {
    v111 = 0;
    do
    {
      v112 = *(_QWORD *)(v93 + 12288) + 96 * v109;
      v113 = *(unsigned int *)(*(_QWORD *)v112 + 40);
      v114 = (void (*)(uint64_t, uint64_t, float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[v113];
      if (v114)
      {
        v114(v112, v217, v6);
        v113 = *(unsigned int *)(*(_QWORD *)v112 + 40);
      }
      v115 = (void (*)(uint64_t, float))physx::Dy::ArticulationPImpl::sSaveVelocityTGS[v113];
      if (v115)
        v115(v112, v96);
      ++v111;
      do
        v116 = __ldaxr(v196);
      while (__stlxr(v116 + 1, v196));
      v109 = v116 - v177;
    }
    while (v116 - v177 < v197);
    if (v111)
    {
      do
        v117 = __ldaxr(v94);
      while (__stlxr(v117 + v111, v94));
    }
    v107 = v116;
    v110 = v197;
    v97 = v175;
    v108 = v177;
  }
  v118 = v174 + v97;
  v195 = v108 + v110;
  v119 = *(_QWORD *)(v163 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v119 + 8));
  *v164 = *(_QWORD *)v119;
  *(_QWORD *)v119 = v164;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v119 + 8));
  if ((int)*v172 < v118)
  {
    v121 = 30000;
    while ((int)*v172 < v118)
    {
      if (!--v121)
      {
        result = sched_yield();
        v121 = 10000;
      }
    }
  }
  v122 = v107;
  v123 = v191;
  v124 = v211;
  v125 = v213;
  if ((int)*v94 < v195)
  {
    v126 = 30000;
    while ((int)*v94 < v195)
    {
      if (!--v126)
      {
        result = sched_yield();
        v126 = 10000;
      }
    }
  }
  if (v166)
  {
    v182 = 0;
    v127 = v6 + v25;
    v178 = v122;
    do
    {
      if ((int)*v123 < (int)v124)
      {
        v128 = 30000;
        while ((int)*v123 < (int)v124)
        {
          if (!--v128)
          {
            result = sched_yield();
            v128 = 10000;
          }
        }
      }
      v129 = v195;
      v130 = v178 - v195;
      v131 = v197;
      if (v178 - v195 < v197)
      {
        v132 = v124;
        v133 = 0;
        do
        {
          v134 = (_QWORD *)(*(_QWORD *)(v93 + 12288) + 96 * v130);
          result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, float, float, float))(*(_QWORD *)*v134 + 272))(*v134, *v189, *v188, 1, 1, v6, 1.0 / v6, v127);
          if (v166 - v182 == 1)
            result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v134 + 280))(*v134, 1);
          ++v133;
          do
            v135 = __ldaxr(v196);
          while (__stlxr(v135 + 1, v196));
          v130 = v135 - v195;
        }
        while (v135 - v195 < v197);
        v178 = v135;
        if (v133)
        {
          v124 = v132;
          v94 = v187;
          do
            v136 = __ldaxr(v187);
          while (__stlxr(v136 + v133, v187));
          v123 = v191;
        }
        else
        {
          v123 = v191;
          v124 = v132;
          v94 = v187;
        }
        v131 = v197;
        v129 = v195;
      }
      v195 = v129 + v131;
      if ((int)*v94 < (int)(v129 + v131))
      {
        v137 = 30000;
        while ((int)*v94 < v195)
        {
          if (!--v137)
          {
            result = sched_yield();
            v137 = 10000;
          }
        }
      }
      if ((_DWORD)v192)
      {
        v138 = 0;
        v202 = 0;
        do
        {
          v199 = v138;
          if ((int)*v123 < (int)v124)
          {
            v139 = 30000;
            while ((int)*v123 < (int)v124)
            {
              if (!--v139)
              {
                result = sched_yield();
                v139 = 10000;
              }
            }
          }
          v140 = v14 - v124;
          v141 = v199;
          v142 = *(_DWORD *)(v18 + 4 * v199);
          if (v14 - v124 >= v142)
          {
            v123 = v191;
          }
          else
          {
            v143 = 0;
            v144 = v186;
            v145 = v214;
            v207 = *(_DWORD *)(v18 + 4 * v199);
            v212 = v124;
            do
            {
              v146 = v144;
              if (v142 - v140 >= v144)
                v147 = v144;
              else
                v147 = v142 - v140;
              if ((_DWORD)v147)
              {
                v148 = v180 + 8 * v202 + 8 * v140;
                v149 = v147;
                do
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _BYTE *, float, float))physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v148 + 6)])(v148, v145, v125, v215, 0.0, v127);
                  v148 += 8;
                  --v149;
                }
                while (v149);
              }
              v144 = v146 - v147;
              if (v146 == (_DWORD)v147)
              {
                LODWORD(v124) = v212;
                v125 = v213;
                v145 = v214;
                do
                  v14 = __ldaxr(v204);
                while (__stlxr(v14 + 4, v204));
                v140 = v14 - v212;
                v144 = 4;
              }
              else
              {
                v14 += v147;
                v140 += v147;
                LODWORD(v124) = v212;
                v125 = v213;
                v145 = v214;
              }
              v143 += v147;
              v142 = v207;
            }
            while (v140 < v207);
            v186 = v144;
            if (v143)
            {
              v123 = v191;
              do
                v150 = __ldaxr(v191);
              while (__stlxr(v150 + v143, v191));
            }
            else
            {
              v123 = v191;
            }
            v93 = v190;
            v94 = v187;
            v18 = v179;
            v141 = v199;
          }
          v124 = v142 + v124;
          v202 += v142;
          v138 = v141 + 1;
        }
        while (v138 != v192);
      }
      ++v182;
    }
    while (v182 != v166);
  }
  if ((int)*v123 < (int)v124)
  {
    v151 = 30000;
    while ((int)*v123 < (int)v124)
    {
      if (!--v151)
      {
        result = sched_yield();
        v151 = 10000;
      }
    }
  }
  v152 = v124;
  v153 = v14 - v124;
  if (v153 < v162)
  {
    v154 = 0;
    do
    {
      if (v162 - v153 >= v186)
        v155 = v186;
      else
        v155 = v162 - v153;
      if ((_DWORD)v155)
      {
        v156 = v180 + 8 * v153;
        v157 = v155;
        do
        {
          result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD))physx::Dy::g_WritebackTGSMethods[*(unsigned __int16 *)(v156 + 6)])(v156, v214, 0);
          v156 += 8;
          --v157;
        }
        while (v157);
      }
      v186 -= v155;
      if (v186)
      {
        v153 += v155;
      }
      else
      {
        do
          v158 = __ldaxr(v204);
        while (__stlxr(v158 + 4, v204));
        v153 = v158 - v152;
        v186 = 4;
      }
      v154 += v155;
    }
    while (v153 < v162);
    if (v154)
    {
      do
        v159 = __ldaxr(v191);
      while (__stlxr(v159 + v154, v191));
    }
  }
  return result;
}

void physx::Dy::FinishSolveIslandTask::~FinishSolveIslandTask(physx::Dy::FinishSolveIslandTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::FinishSolveIslandTask::getName(physx::Dy::FinishSolveIslandTask *this)
{
  return "FinishSolveIslandTask";
}

uint64_t physx::Dy::FinishSolveIslandTask::runInternal(physx::Dy::FinishSolveIslandTask *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(physx::Dy::CopyBackTask *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  void (**v19)(physx::Dy::CopyBackTask *__hidden);
  int v20;
  uint64_t v21;
  void (***v22)(physx::Dy::UpdateArticTask *__hidden);
  unsigned int v23;
  unsigned int v24;
  int v25;
  void (**v26)(physx::Dy::UpdateArticTask *__hidden);

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6);
  v5 = (unsigned int *)*((_QWORD *)this + 7);
  v6 = *((_QWORD *)this + 3);
  result = physx::PxcNpMemBlockPool::releaseConstraintBlocks(*(_QWORD *)(v3 + 11864), v3 + 11848);
  *(_QWORD *)(v3 + 11880) = 0;
  *(_DWORD *)(v3 + 11888) = 0;
  if (*v5)
  {
    v8 = 0;
    v9 = v1 + 224;
    do
    {
      v10 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 776), 104, 0x10u);
      v11 = (void (***)(physx::Dy::CopyBackTask *__hidden))v10;
      v12 = *(unsigned int *)(v4 + 112);
      v13 = *(_QWORD *)(v2 + 576) + (v12 << 6);
      v14 = *(_QWORD *)(v2 + 592) + (v12 << 6);
      v15 = *(_QWORD *)(v2 + 608) + 48 * v12;
      v16 = *(_DWORD *)(v2 + 92);
      v17 = v8 + 512;
      v18 = *v5;
      if (v8 + 512 < *v5)
        v18 = v8 + 512;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v2 + 800);
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_QWORD *)v10 = &off_24ED8D8B8;
      *(_QWORD *)(v10 + 40) = v4;
      *(_QWORD *)(v10 + 48) = v13;
      *(_QWORD *)(v10 + 56) = v14;
      *(_QWORD *)(v10 + 64) = v15;
      *(_DWORD *)(v10 + 72) = v16;
      *(_QWORD *)(v10 + 80) = v9;
      *(_DWORD *)(v10 + 88) = v8;
      *(_DWORD *)(v10 + 92) = v18;
      *(_QWORD *)(v10 + 96) = v2;
      *(_DWORD *)(v10 + 32) = 1;
      *(_QWORD *)(v10 + 24) = v6;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        v11[2] = (void (**)(physx::Dy::CopyBackTask *__hidden))v11[3][2];
        v19 = *v11;
      }
      else
      {
        v19 = &off_24ED8D8B8;
      }
      result = ((uint64_t (*)(_QWORD *))v19[5])(v11);
      v8 += 512;
    }
    while (v17 < *v5);
  }
  if ((v5[1] & 0x7FFFFFFF) != 0)
  {
    v20 = 0;
    do
    {
      v21 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 776), 72, 0x10u);
      v22 = (void (***)(physx::Dy::UpdateArticTask *__hidden))v21;
      v23 = v5[1] & 0x7FFFFFFF;
      v24 = v20 + 64;
      v25 = *(_DWORD *)(v2 + 88);
      if (v23 >= v20 + 64)
        v23 = v20 + 64;
      *(_QWORD *)(v21 + 8) = *(_QWORD *)(v2 + 800);
      *(_QWORD *)(v21 + 16) = 0;
      *(_DWORD *)(v21 + 32) = 0;
      *(_QWORD *)v21 = &off_24ED8D928;
      *(_QWORD *)(v21 + 40) = v3;
      *(_DWORD *)(v21 + 48) = v20;
      *(_DWORD *)(v21 + 52) = v23;
      *(_DWORD *)(v21 + 56) = v25;
      *(_QWORD *)(v21 + 64) = v2;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 24) = v6;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        v22[2] = (void (**)(physx::Dy::UpdateArticTask *__hidden))v22[3][2];
        v26 = *v22;
      }
      else
      {
        v26 = &off_24ED8D928;
      }
      result = ((uint64_t (*)(_QWORD *))v26[5])(v22);
      v20 += 64;
    }
    while (v24 < (v5[1] & 0x7FFFFFFF));
  }
  return result;
}

void physx::Dy::EndIslandTask::~EndIslandTask(physx::Dy::EndIslandTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Dy::EndIslandTask::getName(physx::Dy::EndIslandTask *this)
{
  return "EndIslandTask";
}

uint64_t physx::Dy::EndIslandTask::runInternal(physx::Dy::EndIslandTask *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 5);
  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  *v1 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v1;
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
}

uint64_t physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::getName() [T = physx::P"
           "xSolverConstraintDesc]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 48 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = (unint64_t)&v6[3 * v7];
    v10 = v6;
    do
    {
      v11 = *v8;
      v12 = v8[2];
      v10[1] = v8[1];
      v10[2] = v12;
      *v10 = v11;
      v10 += 3;
      v8 += 3;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationSolverDesc,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationSolverDesc>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  unsigned int v7;
  _OWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationSolverDesc>::getName() [T = phys"
           "x::Dy::ArticulationSolverDesc]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 96 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(_OWORD **)v3;
  if (v7)
  {
    v9 = (unint64_t)&v6[6 * v7];
    v10 = v6;
    do
    {
      v11 = v8[1];
      *v10 = *v8;
      v10[1] = v11;
      v12 = v8[2];
      v13 = v8[3];
      v14 = v8[5];
      v10[4] = v8[4];
      v10[5] = v14;
      v10[2] = v12;
      v10[3] = v13;
      v10 += 6;
      v8 += 6;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(_OWORD **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::recreate(unint64_t *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = ((unint64_t)a2 << 6) + 135;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>::getName() [T = physx::PxTGSSolverBodyVel]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v8 - 8) = v8 - result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)a1 + 2);
  v10 = *a1;
  if ((_DWORD)v9)
  {
    v11 = v8 + (v9 << 6);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v10;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v12 + 12) = *(_DWORD *)(v10 + 12);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v12 + 28) = *(_DWORD *)(v10 + 28);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v10 + 32);
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(v10 + 48);
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(v10 + 56);
      *(_DWORD *)(v12 + 60) = *(_DWORD *)(v10 + 60);
      v12 += 64;
      v10 += 64;
    }
    while (v12 < v11);
    v10 = *a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v10 - *(_QWORD *)(v10 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::recreate(unint64_t *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = ((unint64_t)a2 << 6) + 135;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>::getName() [T = physx::P"
         "xTGSSolverBodyTxInertia]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v8 - 8) = v8 - result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)a1 + 2);
  v10 = *a1;
  if ((_DWORD)v9)
  {
    v11 = v8 + (v9 << 6);
    v12 = *a1;
    v13 = v8;
    do
    {
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v13 + 48) = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v12 + 56);
      v13 += 64;
      v12 += 64;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v10 - *(_QWORD *)(v10 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::recreate(unint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;

  v2 = a2;
  v4 = 48 * a2 + 135;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>::getName() [T = physx::PxTGSSolverBodyData]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v8 - 8) = v8 - result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = v8 + 48 * v9;
    v12 = v8;
    do
    {
      *(_OWORD *)v12 = *(_OWORD *)v10;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
      v13 = *(_OWORD *)(v10 + 28);
      *(_DWORD *)(v12 + 44) = *(_DWORD *)(v10 + 44);
      *(_OWORD *)(v12 + 28) = v13;
      v12 += 48;
      v10 += 48;
    }
    while (v12 < v11);
    v10 = *a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v10 - *(_QWORD *)(v10 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

_QWORD *physx::Sc::ActorSim::setActorsInteractionsDirty(_QWORD *result, char a2, uint64_t a3, int a4, int8x8_t a5)
{
  int v5;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;

  v5 = *((_DWORD *)result + 13);
  if (v5)
  {
    v9 = (unsigned __int8 **)result[5];
    do
    {
      v11 = *v9++;
      v10 = v11;
      if (!a3 || *(_QWORD *)v10 == a3 || *((_QWORD *)v10 + 1) == a3)
      {
        v12 = v10[29];
        if ((v12 & a4) != 0)
        {
          v10[30] |= a2;
          if ((v12 & 8) == 0)
          {
            result = physx::Sc::NPhaseCore::addToDirtyInteractionList(*(int32x2_t **)(*(_QWORD *)(*(_QWORD *)v10 + 72) + 3992), (physx::Sc::Interaction *)v10, a5);
            v10[29] |= 8u;
          }
        }
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  BOOL v5;

  v3 = result;
  *(_DWORD *)(result + 12) = 0;
  v4 = *(void ***)result;
  if (*(_QWORD *)result)
    v5 = v4 == (void **)(a2 + 8);
  else
    v5 = 1;
  if (!v5)
    result = physx::Sc::Scene::deallocatePointerBlock(*(_QWORD *)(a2 + 72), v4, *(_DWORD *)(result + 8));
  *(_DWORD *)(v3 + 8) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

void physx::Sc::ActorSim::~ActorSim(physx::Sc::ActorSim *this)
{
  *(_QWORD *)this = off_24ED8DFB8;
  physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem((uint64_t)this + 40, (uint64_t)this);
}

{
  *(_QWORD *)this = off_24ED8DFB8;
  physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem((uint64_t)this + 40, (uint64_t)this);
  (*(void (**)(uint64_t, physx::Sc::ActorSim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

physx::Sc::Scene **physx::Sc::ActorSim::registerInteractionInActor(physx::Sc::ActorSim *this, physx::Sc::Interaction *a2)
{
  int v3;
  physx::Sc::Scene **result;
  physx::Sc::Interaction *v5;

  v5 = a2;
  v3 = *((_DWORD *)this + 13);
  result = physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::pushBack((physx::Sc::Scene **)this + 5, (uint64_t *)&v5, (physx::Sc::Scene **)this);
  if (*(physx::Sc::ActorSim **)v5 == this)
    *((_DWORD *)v5 + 5) = v3;
  else
    *((_DWORD *)v5 + 6) = v3;
  return result;
}

physx::Sc::Scene **physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::pushBack(physx::Sc::Scene **result, uint64_t *a2, physx::Sc::Scene **this)
{
  physx::Sc::Scene **v4;
  unsigned int v5;
  uint64_t v6;
  physx::Sc::Scene *v7;

  v4 = result;
  v5 = *((_DWORD *)result + 3);
  if (v5 == *((_DWORD *)result + 2))
  {
    result = physx::Sc::ActorSim::reallocInteractions(this, (physx::Sc::Interaction ***)result, (unsigned int *)result + 2, v5, v5 + 1);
    v5 = *((_DWORD *)v4 + 3);
  }
  v6 = *a2;
  v7 = *v4;
  *((_DWORD *)v4 + 3) = v5 + 1;
  *((_QWORD *)v7 + v5) = v6;
  return result;
}

uint64_t physx::Sc::ActorSim::unregisterInteractionFromActor(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = 24;
  if (*a2 == result)
    v2 = 20;
  v3 = *(unsigned int *)((char *)a2 + v2);
  v4 = *(_QWORD *)(result + 40);
  v5 = *(_DWORD *)(result + 52) - 1;
  *(_DWORD *)(result + 52) = v5;
  *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
  if (v3 < v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8 * v3);
    if (*(_QWORD *)v6 == result)
      *(_DWORD *)(v6 + 20) = v3;
    else
      *(_DWORD *)(v6 + 24) = v3;
  }
  return result;
}

physx::Sc::Scene **physx::Sc::ActorSim::reallocInteractions(physx::Sc::Scene **this, physx::Sc::Interaction ***a2, unsigned int *a3, int a4, unsigned int a5)
{
  uint64_t v8;
  physx::Sc::Scene **v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v8 = (uint64_t)this;
  if (a5)
  {
    if (a5 > 4)
    {
      v11 = (a5 - 1) | ((a5 - 1) >> 1) | (((a5 - 1) | ((a5 - 1) >> 1)) >> 2);
      v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
      v10 = (v12 | HIWORD(v12)) + 1;
      this = (physx::Sc::Scene **)physx::Sc::Scene::allocatePointerBlock(this[9], v10);
      v9 = this;
    }
    else
    {
      v9 = this + 1;
      v10 = 4;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  if (*a2)
  {
    this = (physx::Sc::Scene **)memcpy(v9, *a2, (8 * a4));
    if (*a2 != (physx::Sc::Interaction **)(v8 + 8))
      this = (physx::Sc::Scene **)physx::Sc::Scene::deallocatePointerBlock(*(_QWORD *)(v8 + 72), (void **)*a2, *a3);
  }
  *a3 = v10;
  *a2 = v9;
  return this;
}

unsigned __int16 *physx::Sc::ArticulationSim::createDriveCache(physx::Sc::ArticulationSim *this, float a2, unsigned __int16 a3)
{
  unsigned __int16 *v6;
  int v8;
  uint64_t v9;

  physx::Sc::ArticulationSim::checkResize(this);
  v9 = 0;
  v8 = 0;
  (*(void (**)(_QWORD, _QWORD, char *, uint64_t *, int *))(**(_QWORD **)this + 48))(*(_QWORD *)this, *((unsigned int *)this + 8), (char *)&v9 + 4, &v9, &v8);
  if ((_DWORD)v9)
    v6 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24);
  else
    v6 = 0;
  physx::Dy::PxvArticulationDriveCache::initialize(v6, *((unsigned __int16 *)this + 16), *((_QWORD **)this + 3), a3, *(char **)(*(_QWORD *)this + 128), *(unsigned __int16 *)(*(_QWORD *)this + 142), a2);
  return v6;
}

void physx::Sc::ArticulationSim::updateDriveCache(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3, float a4)
{
  physx::Sc::ArticulationSim::checkResize((_QWORD *)a1);
  physx::Dy::PxvArticulationDriveCache::initialize(a2, *(unsigned __int16 *)(a1 + 32), *(_QWORD **)(a1 + 24), a3, *(char **)(*(_QWORD *)a1 + 128), *(unsigned __int16 *)(*(_QWORD *)a1 + 142), a4);
}

void physx::Sc::ArticulationSim::applyImpulse(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  float32x2_t *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x4_t v26[128];
  float32x4_t v27;
  _QWORD v28[256];

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v28[255] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(v9 + 32);
  bzero(v26, (32 * v11));
  bzero(&v27, (32 * v11));
  v14 = *(unsigned int *)(v10 + 48);
  if ((_DWORD)v14)
  {
    v15 = 0;
    while (*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v15) != *v8)
    {
      if (v14 == ++v15)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v15 = 0x80000000;
  }
  v12.i64[0] = *(_QWORD *)v4;
  v16.i64[0] = vnegq_f32(v12).u64[0];
  v16.f32[2] = -*(float *)(v4 + 8);
  v13.i64[0] = *(_QWORD *)v2;
  v17.i64[0] = vnegq_f32(v13).u64[0];
  v17.f32[2] = -*(float *)(v2 + 8);
  v16.i32[3] = 0;
  v18 = &v26[2 * v15];
  v17.i32[3] = 0;
  *v18 = v16;
  v18[1] = v17;
  physx::Dy::Articulation::applyImpulses(v6, v26, &v27);
  if (v11)
  {
    v19 = 0;
    v20 = (float32x2_t *)v28;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v19) + 80);
      v22 = v20[1].f32[0];
      v23 = v20[-1].f32[0] + *(float *)(v21 + 88);
      *(float32x2_t *)(v21 + 80) = vadd_f32(v20[-2], *(float32x2_t *)(v21 + 80));
      *(float *)(v21 + 88) = v23;
      updateBodySim((uint64_t *)v21);
      v24 = v22 + *(float *)(v21 + 104);
      v25 = *v20;
      v20 += 4;
      *(float32x2_t *)(v21 + 96) = vadd_f32(v25, *(float32x2_t *)(v21 + 96));
      *(float *)(v21 + 104) = v24;
      updateBodySim((uint64_t *)v21);
      ++v19;
    }
    while (v19 < *(unsigned int *)(v10 + 32));
  }
}

float physx::Sc::ArticulationSim::computeImpulseResponse(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __int32 v15;
  float result;
  float32x4_t v17[2];
  float32x4_t v18;
  uint64_t v19;
  float v20;

  v9 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = *a2;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11) != v12)
    {
      if (v9 == ++v11)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v11) = 0x80000000;
  }
  v13.i64[0] = *(_QWORD *)a6;
  v13.i64[1] = *(unsigned int *)(a6 + 8);
  v14.i64[0] = *(_QWORD *)a7;
  v14.i64[1] = *(unsigned int *)(a7 + 8);
  v17[0] = v13;
  v17[1] = v14;
  physx::Dy::ArticulationHelper::getImpulseResponse(a5, v11, v17, &v18);
  v15 = v18.i32[2];
  *(_QWORD *)a3 = v18.i64[0];
  *(_DWORD *)(a3 + 8) = v15;
  result = v20;
  *(_QWORD *)a4 = v19;
  *(float *)(a4 + 8) = result;
  return result;
}

_QWORD *physx::Sc::ArticulationSim::createCache(physx::Sc::ArticulationSim *this)
{
  int v2;
  int v3;
  int v4;
  size_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  physx::PxcScratchAllocator *v15;
  physx::PxcScratchAllocator *v16;

  physx::Sc::ArticulationSim::checkResize(this);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 56))(*(_QWORD *)this);
  v3 = *((_DWORD *)this + 8);
  v4 = (24 * v2 + 240) * v3 + (4 * v2 + 16) * v2;
  v5 = (v4 + 196);
  if (v4 == -196)
    v6 = 0;
  else
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 524);
  bzero(v6, v5);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 56))(*(_QWORD *)this);
  v8 = 32 * v3 + 120;
  *v6 = v6 + 15;
  v6[1] = (char *)v6 + (v8 & 0xFFFFFFF8);
  v9 = (v8 + 24 * v3 * (v7 + 6));
  v10 = v9 + 4 * v7 * v7;
  v6[2] = (char *)v6 + v9;
  v6[3] = (char *)v6 + (v10 & 0xFFFFFFFC);
  LODWORD(v9) = v10 + 4 * v7;
  v11 = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 4 * v7;
  v6[4] = v11;
  v6[5] = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 4 * v7;
  v12 = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 4 * v7;
  v6[6] = v12;
  v6[7] = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 32 * v3;
  v6[8] = (char *)v6 + (v9 & 0xFFFFFFFC);
  v6[9] = (char *)v6 + (((_DWORD)v9 + 32 * v3) & 0xFFFFFFFC);
  v6[10] = 0;
  v6[11] = 0;
  v13 = 20 * (*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 56))(*(_QWORD *)this)
      + 272 * *((_DWORD *)this + 8);
  if ((_DWORD)v13)
    v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v13, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 567);
  else
    v14 = 0;
  v6[12] = v14;
  v15 = (physx::PxcScratchAllocator *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 40, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 570);
  v16 = physx::PxcScratchAllocator::PxcScratchAllocator(v15);
  v6[13] = v16;
  physx::PxcScratchAllocator::setBlock((uint64_t)v16, v14, v13);
  return v6;
}

uint64_t physx::Sc::ArticulationCore::getCacheDataSize(physx::Sc::ArticulationCore *this)
{
  _DWORD *v1;
  int v2;

  v1 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 56))(*(_QWORD *)v1);
  return ((24 * v2 + 240) * v1[8] + (4 * v2 + 16) * v2 + 76);
}

void physx::Sc::ArticulationCore::zeroCache(_DWORD **a1, void **a2)
{
  _DWORD *v2;
  int v4;

  v2 = *a1;
  if (*a1)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v2 + 56))(*(_QWORD *)v2);
    bzero(*a2, ((24 * v4 + 240) * v2[8] + (4 * v4 + 16) * v4 + 76));
  }
}

uint64_t physx::Sc::ArticulationSim::applyCache(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *a1;
  v6 = *a3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 72))(v4, a2, &v6);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1[1] + 1904) + 128))(*(_QWORD *)(a1[1] + 1904), *a1, a1 + 9);
  return result;
}

uint64_t physx::Sc::ArticulationSim::releaseCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a2 + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v3 + 8) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)v3);
    if (*(_QWORD *)(a2 + 104))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(a2 + 104) = 0;
  }
  if (*(_QWORD *)(a2 + 96))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(a2 + 96) = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a2);
}

double physx::Sc::ArticulationSim::getLinkVelocity@<D0>(physx::Sc::ArticulationSim *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)this + 360))(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

double physx::Sc::ArticulationSim::getLinkAcceleration@<D0>(physx::Sc::ArticulationSim *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)this + 368))(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t physx::Sc::ArticulationJointCore::ArticulationJointCore(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t i;
  _DWORD *v8;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 272) = 1120403456;
  *(_OWORD *)(result + 8) = xmmword_2260E5D70;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 48) = xmmword_2260E5F10;
  v4 = (_QWORD *)(result + 340);
  *(_DWORD *)(result + 340) = 1028443341;
  *(_BYTE *)(result + 278) = 3;
  *(_WORD *)(result + 270) = 0;
  *(_DWORD *)(result + 266) = 0;
  *(_WORD *)(result + 276) = 256;
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)&v5 = *(_QWORD *)(a2 + 20);
  *((_QWORD *)&v5 + 1) = *(_QWORD *)a3;
  *(_OWORD *)(result + 28) = v5;
  *(_OWORD *)(result + 44) = *(_OWORD *)(a3 + 8);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)(result + 280) = xmmword_2260E5D70;
  *(_BYTE *)(result + 338) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_DWORD *)(result + 312) = 0;
  *(_DWORD *)(result + 316) = 1065353216;
  *(_QWORD *)(result + 320) = 0x3D4CCCCD3F800000;
  if (a4)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    v6 = result + 124;
    for (i = 208; i != 232; i += 4)
    {
      *(_QWORD *)(v6 - 12) = 0;
      *(_QWORD *)(v6 - 4) = 0x400000000;
      v8 = (_DWORD *)(result + i);
      *v8 = 0;
      v6 += 16;
      v8[6] = 0;
    }
    *v4 = 0;
    *(_QWORD *)(result + 348) = 0;
    *(_DWORD *)(result + 364) = 0;
    *(_QWORD *)(result + 356) = 0;
  }
  else
  {
    *(int32x2_t *)(result + 80) = vdup_n_s32(0x3F490FDBu);
    *(_DWORD *)(result + 324) = 1028443341;
    *(_OWORD *)(result + 64) = xmmword_2261A78E0;
    *(_OWORD *)v4 = xmmword_2261A78F0;
    *(_DWORD *)(result + 356) = 1045147567;
    *(_QWORD *)(result + 360) = 0x3C4CCF88BE4BAFAFLL;
  }
  *(_WORD *)(result + 336) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_DWORD *)(result + 256) = 1028443341;
  *(_BYTE *)(result + 278) = 4;
  *(_DWORD *)(result + 266) = 0;
  *(_WORD *)(result + 270) = 0;
  return result;
}

physx::Sc::ArticulationJointSim *physx::Sc::ArticulationJointCore::setParentPose(uint64_t a1, uint64_t a2)
{
  physx::Sc::ArticulationJointSim *result;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 277) |= 2u;
  result = *(physx::Sc::ArticulationJointSim **)a1;
  if (result)
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  return result;
}

physx::Sc::ArticulationJointSim *physx::Sc::ArticulationJointCore::setChildPose(uint64_t a1, uint64_t a2)
{
  physx::Sc::ArticulationJointSim *result;

  *(_OWORD *)(a1 + 36) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 277) |= 2u;
  result = *(physx::Sc::ArticulationJointSim **)a1;
  if (result)
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  return result;
}

uint64_t physx::Sc::ArticulationJointSim::setDirty(physx::Sc::ArticulationJointSim *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = **(_QWORD ***)(*((_QWORD *)this + 4) + 368);
  v2 = v1[1];
  *(_BYTE *)(*v1 + 161) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 1904) + 128))(*(_QWORD *)(v2 + 1904));
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v1[1] + 1904) + 136))(*(_QWORD *)(v1[1] + 1904), *v1, v1 + 9);
}

uint64_t physx::Sc::ArticulationJointSim::ArticulationJointSim(uint64_t a1, uint64_t a2, physx::Sc::ArticulationSim **a3, physx::Sc::BodySim *a4)
{
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 28) = 5;
  *(_BYTE *)(a1 + 30) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  physx::Sc::activateInteraction((physx::Sc *)a1, 0, a3, (int8x8_t)-1);
  physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)a1, (physx::Sc::Interaction *)a1);
  physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)(a1 + 8), (physx::Sc::Interaction *)a1);
  physx::Sc::ArticulationSim::addBody(a3[24], a4, (physx::Sc::BodySim *)a3, (physx::Sc::ArticulationJointSim *)a1);
  **(_QWORD **)(a1 + 32) = a1;
  return a1;
}

void physx::Sc::ArticulationSim::addBody(physx::Sc::ArticulationSim *this, physx::Sc::BodySim *a2, physx::Sc::BodySim *a3, physx::Sc::ArticulationJointSim *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  _BOOL4 v19;
  BOOL v20;
  float v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  uint8x8_t v35;
  __int32 v36;
  int8x8_t v37;
  unsigned __int32 v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  unsigned int v46;
  physx::Sc::BodySim *v47;
  physx::Sc::ArticulationJointSim *v48;

  v47 = a2;
  v48 = a4;
  v8 = *((unsigned int *)this + 12);
  if ((*((_DWORD *)this + 13) & 0x7FFFFFFFu) <= v8)
  {
    physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack((uint64_t)this + 40, &v47);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v8) = a2;
    *((_DWORD *)this + 12) = v8 + 1;
  }
  v9 = *((unsigned int *)this + 16);
  if ((*((_DWORD *)this + 17) & 0x7FFFFFFFu) <= v9)
  {
    physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::growAndPushBack((uint64_t)this + 56, &v48);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v9) = a4;
    *((_DWORD *)this + 16) = v9 + 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
  v10 = *((_DWORD *)this + 8);
  v11 = *((_DWORD *)this + 9) & 0x7FFFFFFF;
  v12 = v10;
  if (v11 <= v10)
  {
    if (v11)
      v13 = 2 * *((_DWORD *)this + 9);
    else
      v13 = 1;
    physx::shdfnd::Array<physx::Dy::ArticulationLink,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>>::recreate((uint64_t)this + 24, v13);
    v12 = *((_DWORD *)this + 8);
  }
  v14 = *((_QWORD *)this + 3);
  *((_DWORD *)this + 8) = v12 + 1;
  v15 = (_QWORD *)(v14 + 40 * v12);
  v16 = *((_QWORD *)a2 + 10);
  v15[2] = v16 + 16;
  *v15 = 0;
  v17 = *(_QWORD *)(v16 + 176);
  if (!v17 || *(_BYTE *)(v17 + 31) == 1)
    v17 = 0;
  if (*(float *)(v16 + 80) != 0.0
    || *(float *)(v16 + 84) != 0.0
    || *(float *)(v16 + 88) != 0.0
    || *(float *)(v16 + 96) != 0.0
    || *(float *)(v16 + 100) != 0.0)
  {
    goto LABEL_44;
  }
  v18 = *(float *)(v16 + 104);
  v19 = v18 == 0.0 && (*((_BYTE *)a2 + 182) & 2) == 0;
  if ((*((_BYTE *)a2 + 182) & 2) != 0 && v18 == 0.0)
  {
    if (!v17)
    {
LABEL_74:
      v20 = 1;
      goto LABEL_45;
    }
    if (*(float *)v17 == 0.0
      && *(float *)(v17 + 4) == 0.0
      && *(float *)(v17 + 8) == 0.0
      && *(float *)(v17 + 16) == 0.0
      && *(float *)(v17 + 20) == 0.0)
    {
      v19 = *(float *)(v17 + 24) == 0.0;
      goto LABEL_32;
    }
LABEL_44:
    v20 = 0;
    goto LABEL_45;
  }
LABEL_32:
  v20 = (*((_BYTE *)a2 + 182) & 4) == 0 && v19;
  if ((*((_BYTE *)a2 + 182) & 4) != 0 && v19)
  {
    if (v17)
    {
      if (*(float *)(v17 + 32) == 0.0
        && *(float *)(v17 + 36) == 0.0
        && *(float *)(v17 + 40) == 0.0
        && *(float *)(v17 + 48) == 0.0
        && *(float *)(v17 + 52) == 0.0)
      {
        v20 = *(float *)(v17 + 56) == 0.0;
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    goto LABEL_74;
  }
LABEL_45:
  v21 = *(float *)(*((_QWORD *)this + 2) + 36);
  if (a3)
  {
    v22 = *((_QWORD *)this + 5);
    v23 = *(_DWORD *)(*(_QWORD *)v22 + 184);
    v24 = (v23 != -3) & __CFADD__(v23, 3);
    v25 = v23 > 0xFFFFFFFD;
    if (v24)
      v26 = v20;
    else
      v26 = 0;
    v27 = *((unsigned int *)this + 12);
    if ((_DWORD)v27)
    {
      v28 = 0;
      while (*(physx::Sc::BodySim **)(v22 + 8 * v28) != a3)
      {
        if (v27 == ++v28)
          goto LABEL_53;
      }
    }
    else
    {
LABEL_53:
      LODWORD(v28) = 0x80000000;
    }
    v29 = v14 + 40 * v12;
    *(_DWORD *)(v29 + 32) = v28;
    v30 = (uint64_t *)(v14 + 40 * v28);
    v31 = *v30;
    v32 = v30[1] | (1 << v10);
    *(_QWORD *)(v29 + 8) = v32;
    *(_QWORD *)(v29 + 24) = *((_QWORD *)a4 + 4) + 8;
    *v30 = v31 | (1 << v10);
  }
  else
  {
    v25 = v21 == 0.0;
    v26 = v21 == 0.0 && v20;
    v33 = v14 + 40 * v12;
    *(_DWORD *)(v33 + 32) = -1;
    v32 = 1;
    *(_QWORD *)(v33 + 8) = 1;
    *(_QWORD *)(v33 + 24) = 0;
  }
  v34 = (int8x8_t)HIDWORD(v32);
  v35 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
  v35.i16[0] = vaddlv_u8(v35);
  v36 = v35.i32[0];
  v37 = vcnt_s8(v34);
  v37.i16[0] = vaddlv_u8((uint8x8_t)v37);
  v38 = v37.i32[0] + v36;
  if (v38 <= *((_DWORD *)this + 24))
    v38 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = v38;
  *(_DWORD *)(*(_QWORD *)this + 164) = v38;
  if (v25 && !v26 && *((_DWORD *)this + 12) != 1)
  {
    v39 = 0;
    do
      physx::Sc::BodySim::internalWakeUpArticulationLink(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v39++), v21);
    while (v39 < (*((_DWORD *)this + 12) - 1));
    v16 = *((_QWORD *)a2 + 10);
  }
  *((_QWORD *)a2 + 24) = this;
  v40 = *((_DWORD *)this + 18) & 0xFFFFFF80 | (2 * v10);
  *((_DWORD *)a2 + 44) = v40 | 1;
  *(float *)(v16 + 156) = v21;
  if ((*(_BYTE *)(v16 + 44) & 0x20) != 0)
  {
    v41 = *((_QWORD *)a2 + 9);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v41 + 7632, (v40 >> 7) + 1);
    *(_DWORD *)(*(_QWORD *)(v41 + 7632) + 4 * (v40 >> 12)) |= 1 << (v40 >> 7);
  }
  if (v26)
  {
    v42 = *((_DWORD *)a2 + 44);
    if (!*((_QWORD *)a2 + 24))
    {
      v43 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 1880);
      physx::IG::IslandSim::deactivateNode(v43 + 224, *((_DWORD *)a2 + 44));
      physx::IG::IslandSim::deactivateNode(v43 + 864, v42);
      v42 = *((_DWORD *)a2 + 44);
    }
    physx::IG::SimpleIslandManager::putNodeToSleep(*(_QWORD *)(*((_QWORD *)a2 + 9) + 1880), v42);
    physx::Sc::BodySim::setActive(a2, 0, 0, v44);
  }
  else
  {
    physx::Sc::BodySim::setActive(a2, (physx::Sc::Interaction *)1, 0, v37);
    v45 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 1880);
    v46 = *((_DWORD *)a2 + 44);
    physx::IG::IslandSim::activateNode(v45 + 224, v46);
    physx::IG::IslandSim::activateNode(v45 + 864, v46);
  }
}

void physx::Sc::ArticulationJointSim::~ArticulationJointSim(physx::Sc::ArticulationJointSim *this)
{
  physx::Sc::ActorSim::unregisterInteractionFromActor(*(_QWORD *)this, this);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 1), this);
  physx::Sc::ArticulationSim::removeBody(*(_QWORD *)(*((_QWORD *)this + 1) + 192), *((_QWORD *)this + 1));
  **((_QWORD **)this + 4) = 0;
}

uint64_t physx::Sc::ArticulationSim::removeBody(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned __int32 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  int8x8_t v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  unsigned __int32 v25;
  _DWORD *v26;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v3) != a2)
    {
      if (v2 == ++v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v3) = 0x80000000;
  }
  *(_QWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a2 + 176) = -125;
  v4 = v3;
  v5 = v3 + 1;
  LODWORD(v3) = *(_DWORD *)(a1 + 32);
  if (v5 < v3)
  {
    v6 = v4 + 1;
    v7 = 40 * v4 + 40;
    do
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = (__int128 *)(v8 + v7);
      v10 = v8 + 40 * (v6 - 1);
      v11 = *v9;
      v12 = v9[1];
      *(_QWORD *)(v10 + 32) = *((_QWORD *)v9 + 4);
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (v6 - 1)) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v6 - 1)) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
      ++v6;
      v3 = *(unsigned int *)(a1 + 32);
      v7 += 40;
    }
    while (v6 < v3);
  }
  *(_DWORD *)(a1 + 96) = 0;
  v13 = 0;
  if ((_DWORD)v3)
  {
    v14 = (1 << v4) - 1;
    v15 = ~(v14 | (1 << v4));
    v16 = *(_QWORD *)(a1 + 24);
    v17 = v3;
    do
    {
      v18 = *(_DWORD *)(v16 + 32);
      v19 = *(_QWORD *)(v16 + 8);
      if (v18 != -1 && v18 > v4)
      {
        v19 = v19 & v14 | ((v19 & v15) >> 1);
        *(_QWORD *)(v16 + 8) = v19;
      }
      *(_QWORD *)v16 = *(_QWORD *)v16 & v14 | ((*(_QWORD *)v16 & (unint64_t)v15) >> 1);
      v16 += 40;
      v21 = (int8x8_t)HIDWORD(v19);
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.i32[0];
      v24 = (uint8x8_t)vcnt_s8(v21);
      v24.i16[0] = vaddlv_u8(v24);
      v25 = v24.i32[0] + v23;
      if (v25 > v13)
        v13 = v25;
      --v17;
    }
    while (v17);
    *(_DWORD *)(a1 + 96) = v13;
  }
  *(_DWORD *)(a1 + 32) = v3 - 1;
  --*(_DWORD *)(a1 + 48);
  --*(_DWORD *)(a1 + 64);
  v26 = *(_DWORD **)a1;
  v26[41] = v13;
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 40))(v26);
}

physx::Sc::ArticulationSim *physx::Sc::ArticulationSim::ArticulationSim(physx::Sc::ArticulationSim *this, physx::Sc::ArticulationCore *a2, physx::IG::SimpleIslandManager **a3, physx::Sc::BodySim **a4)
{
  char *v8;
  physx::Dy::ArticulationV *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  v8 = (char *)this + 40;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = -128;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  physx::shdfnd::Array<physx::Dy::ArticulationLink,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>>::recreate((uint64_t)this + 24, 0x10u);
  if ((*((_DWORD *)this + 17) & 0x7FFFFFF0) == 0)
    physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::recreate((uint64_t)this + 56, 0x10u);
  if ((*((_DWORD *)this + 13) & 0x7FFFFFF0) == 0)
    physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::recreate((uint64_t)v8, 0x10u);
  physx::Sc::Scene::createLLArticulation(*((physx::Sc::Scene **)this + 1), this);
  *(_QWORD *)this = v9;
  *((_DWORD *)this + 18) = physx::IG::SimpleIslandManager::addArticulation(a3[235], this, v9, 0);
  if (*(_QWORD *)this)
  {
    *(_BYTE *)(*(_QWORD *)this + 161) = 1;
    physx::Sc::ArticulationSim::addBody(this, *a4, 0, 0);
    **((_QWORD **)this + 2) = this;
    v13 = *(_QWORD *)this;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(*((_QWORD *)this + 1) + 1888);
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_QWORD *)(v13 + 112) = (char *)a2 + 8;
    *(_QWORD *)(v13 + 120) = 0;
    *(_QWORD *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 136) = 0;
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 71, "Articulation: could not allocate low-level resources.", v10, v11, v12, v15);
  }
  return this;
}

void physx::Sc::ArticulationSim::~ArticulationSim(physx::Sc::ArticulationSim *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;
  int v10;
  int v11;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = 4352;
    if (*(_DWORD *)(v2 + 40) == 1)
      v3 = 4344;
    v4 = *(_QWORD *)(*((_QWORD *)this + 1) + v3);
    (**(void (***)(_QWORD))v2)(*(_QWORD *)this);
    --*(_DWORD *)(v4 + 548);
    v5 = *(_QWORD *)(v4 + 560);
    *(_QWORD *)(v4 + 560) = v2;
    *(_QWORD *)v2 = v5;
    physx::IG::SimpleIslandManager::removeNode(*(_QWORD *)(*((_QWORD *)this + 1) + 1880), *((_DWORD *)this + 18));
    **((_QWORD **)this + 2) = 0;
  }
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 10) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 17);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 7) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 13);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 5))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 9);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 3))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::Sc::ArticulationSim::addLoopConstraint(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 104);
  v2 = *(_QWORD *)(a2 + 112);
  if (v3 && (v4 = *(unsigned int *)(result + 48), (_DWORD)v4))
  {
    v5 = 0;
    while (*(_QWORD *)(*(_QWORD *)(result + 40) + 8 * v5) != v3)
    {
      if (v4 == ++v5)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v5) = 0x80000000;
  }
  LODWORD(v9) = v5;
  if (v2 && (v6 = *(unsigned int *)(result + 48), (_DWORD)v6))
  {
    v7 = 0;
    while (*(_QWORD *)(*(_QWORD *)(result + 40) + 8 * v7) != v2)
    {
      if (v6 == ++v7)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v7) = 0x80000000;
  }
  DWORD1(v9) = v7;
  *((_QWORD *)&v9 + 1) = a2;
  v8 = *(unsigned int *)(result + 88);
  if ((*(_DWORD *)(result + 92) & 0x7FFFFFFFu) <= v8)
    return physx::shdfnd::Array<physx::Dy::ArticulationLoopConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLoopConstraint>>::growAndPushBack(result + 80, &v9);
  *(_OWORD *)(*(_QWORD *)(result + 80) + 16 * v8) = v9;
  ++*(_DWORD *)(result + 88);
  return result;
}

void physx::Sc::BodySim::updateCached(uint64_t a1, _QWORD *a2)
{
  _QWORD *i;

  if ((*(_WORD *)(a1 + 124) & 1) == 0)
  {
    for (i = *(_QWORD **)(a1 + 56); i; i = (_QWORD *)*i)
      physx::Sc::ShapeSim::updateCached((uint64_t)i, 0, a2);
  }
}

void physx::Sc::ArticulationSim::markShapesUpdated(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t i;
  uint64_t **v6;
  unint64_t v7;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v6 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i) + 56);
      if (v6)
      {
        do
        {
          v7 = *((unsigned int *)v6 + 4);
          if ((v7 & 0x80000000) != 0)
          {
            physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)a2, (v7 & 0x7FFFFFFF) + 1);
            *(_DWORD *)(*a2 + ((v7 >> 3) & 0xFFFFFFC)) |= 1 << v7;
          }
          v6 = (uint64_t **)*v6;
        }
        while (v6);
        v2 = *(unsigned int *)(a1 + 48);
      }
    }
  }
}

void physx::Sc::BodySim::updateContactDistance(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  int v10;
  float v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 136);
  if ((*(_BYTE *)(v4 + 28) & 0x20) != 0 && (*(_WORD *)(a1 + 124) & 1) == 0)
  {
    v5 = *(_QWORD **)(a1 + 56);
    if (v5)
    {
      v9 = *(_QWORD *)(v4 + 80);
      v10 = *(_DWORD *)(v4 + 88);
      v11 = sqrtf((float)((float)(*(float *)(v4 + 68) * *(float *)(v4 + 68))+ (float)(*(float *)(v4 + 64) * *(float *)(v4 + 64)))+ (float)(*(float *)(v4 + 72) * *(float *)(v4 + 72)))* a4;
      do
      {
        v12 = v9;
        v13 = v10;
        physx::Sc::ShapeSim::updateContactDistance((uint64_t)v5, a2, (float *)&v12, a3, v11, a4);
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
  }
}

uint64_t physx::Sc::BodySim::internalWakeUpArticulationLink(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(this + 80);
  if ((*(_BYTE *)(v2 + 44) & 1) == 0 && *(float *)(v2 + 156) < a2)
  {
    v3 = this;
    *(float *)(v2 + 156) = a2;
    *(double *)&v4 = (*(double (**)(_QWORD, BOOL, uint64_t))(**(_QWORD **)(*(_QWORD *)(this + 72) + 1904)
                                                                     + 88))(*(_QWORD *)(*(_QWORD *)(this + 72) + 1904), *(_BYTE *)(v2 + 13) == 2, this + 176);
    physx::Sc::BodySim::setActive((physx::Sc::BodySim *)v3, (physx::Sc::Interaction *)1, 0, v4);
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 1880);
    v6 = *(_DWORD *)(v3 + 176);
    physx::IG::IslandSim::activateNode(v5 + 224, v6);
    this = physx::IG::IslandSim::activateNode(v5 + 864, v6);
    *(_WORD *)(v3 + 124) &= ~1u;
  }
  return this;
}

_QWORD *physx::Sc::ArticulationSim::checkResize(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_DWORD *)this + 12))
  {
    v1 = *this;
    v2 = *((unsigned int *)this + 8);
    v3 = this[3];
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*this + 24))(*this, v2);
    *(_QWORD *)(v1 + 56) = v3;
    *(_BYTE *)(v1 + 140) = v2;
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  }
  return this;
}

_QWORD *physx::Sc::ArticulationSim::sleepCheck(_QWORD *this, float a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float32x2_t *v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  float v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  float32x2_t v53;
  float v54;
  float v55;
  float v56;
  float v57;

  if (!*((_DWORD *)this + 12))
    return this;
  v2 = this;
  if (*(_DWORD *)(*(_QWORD *)this[5] + 184) > 0xFFFFFFFD)
    return this;
  v3 = this[2];
  if (!*((_DWORD *)this + 8))
  {
    *(_DWORD *)(v3 + 36) = 0;
LABEL_59:
    v51 = *(_QWORD *)(v2[1] + 1880);
    v52 = *((_DWORD *)v2 + 18);
    physx::IG::IslandSim::deactivateNode(v51 + 224, v52);
    return (_QWORD *)physx::IG::IslandSim::deactivateNode(v51 + 864, v52);
  }
  v5 = 0;
  v6 = *(float *)(v3 + 28);
  v7 = 3.4028e38;
  v8 = 0.0;
  do
  {
    this = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v2 + 360))(&v53, *v2, v5);
    v9 = *(float32x2_t **)(v2[5] + 8 * v5);
    v10 = v9[10];
    v11 = *(float *)(*(_QWORD *)&v10 + 156);
    v12 = v9[18];
    v13 = v9[19].f32[0];
    v14 = v9[20].f32[0];
    v15 = v9[20].f32[1];
    v16 = v9[21].f32[0];
    if (v11 >= 0.2 && v11 >= a2)
      goto LABEL_30;
    v18 = *(_QWORD *)(*(_QWORD *)&v10 + 176);
    if (v18 && *(_BYTE *)(v18 + 31) == 1)
      v19 = (float *)(v18 + 32);
    else
      v19 = (float *)(*(_QWORD *)&v10 + 128);
    v20 = v19[1];
    v21 = v19[2];
    if (*v19 <= 0.0)
      v22 = 1.0;
    else
      v22 = 1.0 / *v19;
    if (v20 <= 0.0)
      v23 = 1.0;
    else
      v23 = 1.0 / v20;
    if (v21 <= 0.0)
      v24 = 1.0;
    else
      v24 = 1.0 / v21;
    if (v18 && *(_BYTE *)(v18 + 31) == 1)
      v25 = (float *)(v18 + 44);
    else
      v25 = (float *)(*(_QWORD *)&v10 + 140);
    v27 = *(float *)(*(_QWORD *)&v10 + 24);
    v26 = *(float *)(*(_QWORD *)&v10 + 28);
    v28 = (float)(v26 * v26) + -0.5;
    v29 = *(float *)(*(_QWORD *)&v10 + 16);
    v30 = *(float *)(*(_QWORD *)&v10 + 20);
    v31 = (float)((float)((float)(v56 + v56) * v30) + (float)(v29 * (float)(v55 + v55)))
        + (float)(v27 * (float)(v57 + v57));
    v12 = vadd_f32(v12, v53);
    v13 = v13 + v54;
    v14 = v14
        + (float)((float)((float)((float)(v55 + v55) * v28)
                        - (float)((float)((float)(v30 * (float)(v57 + v57)) - (float)(v27 * (float)(v56 + v56))) * v26))
                + (float)(v29 * v31));
    v15 = v15
        + (float)((float)((float)((float)(v56 + v56) * v28)
                        - (float)((float)((float)(v27 * (float)(v55 + v55)) - (float)(v29 * (float)(v57 + v57))) * v26))
                + (float)(v30 * v31));
    v16 = v16
        + (float)((float)((float)((float)(v57 + v57) * v28)
                        - (float)((float)((float)(v29 * (float)(v56 + v56)) - (float)(v30 * (float)(v55 + v55))) * v26))
                + (float)(v27 * v31));
    v32 = *v25;
    if (*v25 == 0.0)
      v32 = 1.0;
    v33 = (float)((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v12, v12).i32[1]), v12.f32[0], v12.f32[0])
                        + (float)(v13 * v13))
                + (float)((float)((float)((float)(v23 * (float)(v15 * v15)) + (float)((float)(v14 * v14) * v22))
                                + (float)((float)(v16 * v16) * v24))
                        * v32))
        * 0.5;
    v34 = (float)(*(_DWORD *)(*(_QWORD *)&v9[17] + 148) + 1);
    v35 = v6 * v34;
    if (v33 >= (float)(v6 * v34))
    {
      v9[20] = 0;
      v9[21].i32[0] = 0;
      v38 = 1.0;
      v9[18] = 0;
      v9[19].i32[0] = 0;
      if (v35 != 0.0)
      {
        if ((float)(v33 / v35) >= 2.0)
          v38 = 1.0;
        else
          v38 = (float)(v33 / v35) * 0.5;
      }
      v36 = (float)((float)(v34 + -1.0) * a2) + (float)(v38 * 0.4);
      *(float *)(*(_QWORD *)&v10 + 156) = v36;
      if (v11 == 0.0)
      {
        v39 = *(_QWORD *)(*(_QWORD *)&v9[9] + 1880);
        v40 = v9[22].u32[0];
        physx::IG::IslandSim::activateNode(v39 + 224, v40);
        this = (_QWORD *)physx::IG::IslandSim::activateNode(v39 + 864, v40);
      }
    }
    else
    {
LABEL_30:
      v9[18] = v12;
      v9[19].f32[0] = v13;
      v9[20].f32[0] = v14;
      v9[20].f32[1] = v15;
      v9[21].f32[0] = v16;
      v36 = fmaxf(v11 - a2, 0.0);
      *(float *)(*(_QWORD *)&v10 + 156) = v36;
    }
    if (v8 <= v36)
      v8 = v36;
    if (v7 >= v36)
      v7 = v36;
    ++v5;
    v37 = *((unsigned int *)v2 + 8);
  }
  while (v5 < v37);
  *(float *)(v2[2] + 36) = v8;
  if (v8 == 0.0)
  {
    if (v37)
    {
      v46 = 0;
      v47 = v2[5];
      do
      {
        v48 = *(_QWORD *)(v47 + 8 * v46);
        if (!*(_QWORD *)(v48 + 192))
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v48 + 72) + 1880);
          v50 = *(_DWORD *)(v48 + 176);
          physx::IG::IslandSim::deactivateNode(v49 + 224, v50);
          physx::IG::IslandSim::deactivateNode(v49 + 864, v50);
          v47 = v2[5];
          v37 = *((unsigned int *)v2 + 8);
          v48 = *(_QWORD *)(v47 + 8 * v46);
        }
        *(_QWORD *)(v48 + 160) = 0;
        *(_DWORD *)(v48 + 168) = 0;
        *(_QWORD *)(v48 + 144) = 0;
        *(_DWORD *)(v48 + 152) = 0;
        ++v46;
      }
      while (v46 < v37);
    }
    goto LABEL_59;
  }
  if (v7 == 0.0 && v37 != 0)
  {
    v42 = (uint64_t *)v2[5];
    do
    {
      v43 = *v42++;
      v44 = *(_QWORD *)(v43 + 80);
      v45 = *(float *)(v44 + 156);
      if (v45 < 0.000001)
        v45 = 0.000001;
      *(float *)(v44 + 156) = v45;
      --v37;
    }
    while (v37);
  }
  return this;
}

uint64_t physx::Sc::BodySim::notifyReadyForSleeping(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;

  if (!*(_QWORD *)(this + 192))
  {
    v1 = *(_QWORD *)(*(_QWORD *)(this + 72) + 1880);
    v2 = *(_DWORD *)(this + 176);
    physx::IG::IslandSim::deactivateNode(v1 + 224, v2);
    return physx::IG::IslandSim::deactivateNode(v1 + 864, v2);
  }
  return this;
}

uint64_t physx::Sc::ArticulationSim::internalWakeUp(uint64_t this, float a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(this + 16);
  if (*(float *)(v3 + 36) < a2)
  {
    v4 = this;
    *(float *)(v3 + 36) = a2;
    if (*(_DWORD *)(this + 32))
    {
      v5 = 0;
      do
        this = physx::Sc::BodySim::internalWakeUpArticulationLink(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v5++), a2);
      while (v5 < *(unsigned int *)(v4 + 32));
    }
  }
  return this;
}

void physx::Sc::ArticulationSim::setActive(physx::Sc::ArticulationSim *this, physx::Sc::Interaction *a2, char a3, int8x8_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4)
  {
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      v10 = *((_QWORD *)this + 5);
      if (v8 + 1 < v4)
      {
        _X8 = *(_QWORD *)(v10 + 8 * v8 + 8);
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
        }
      }
      physx::Sc::BodySim::setActive(*(physx::Sc::BodySim **)(v10 + 8 * v8), a2, a3, a4);
      v4 = *((unsigned int *)this + 12);
      v8 = v9;
    }
    while (v9 < v4);
  }
}

void physx::Sc::BodySim::setActive(physx::Sc::BodySim *this, physx::Sc::Interaction *a2, char a3, int8x8_t a4)
{
  uint64_t v5;

  if ((a3 & 1) != 0)
  {
    if ((a2 & 1) != 0)
      goto LABEL_6;
LABEL_9:
    physx::Sc::BodySim::deactivate((uint64_t)this, a2, a4);
    return;
  }
  if (*((_DWORD *)this + 46) < 0xFFFFFFFE != (_DWORD)a2)
  {
    v5 = *((_QWORD *)this + 9);
    if ((a2 & 1) != 0)
    {
      physx::Sc::Scene::addToActiveBodyList(v5, this);
LABEL_6:
      physx::Sc::BodySim::activate(this, a4);
      return;
    }
    physx::Sc::Scene::removeFromActiveBodyList(v5, this);
    goto LABEL_9;
  }
}

unsigned int *physx::Sc::ArticulationSim::updateForces(unsigned int *this, float a2, int a3)
{
  unint64_t v3;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v18;

  v18 = 0;
  v3 = this[12];
  if ((_DWORD)v3)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      v10 = *((_QWORD *)v6 + 5);
      if (v8 + 1 < v3)
      {
        _X8 = *(_QWORD *)(v10 + 8 * v8 + 8);
        __asm
        {
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
      }
      this = (unsigned int *)physx::Sc::BodySim::updateForces(*(_QWORD *)(v10 + 8 * v8), 0, 0, &v18, (float *)(*(_QWORD *)(*(_QWORD *)v6 + 72) + v7), *(_DWORD *)(*(_QWORD *)v6 + 40) == 0, a3, a2);
      v3 = v6[12];
      v7 += 32;
      v8 = v9;
    }
    while (v9 < v3);
  }
  return this;
}

uint64_t physx::Sc::BodySim::updateForces(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5, int a6, int a7, float a8)
{
  char v8;
  float32x2_t *v9;
  uint64_t v10;
  int v11;
  float32x2_t v12;
  float v13;
  float32x2_t v14;
  float v15;
  float32x2_t *v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float v20;
  float32x2_t *v21;
  uint64_t v22;
  int v23;

  v8 = *(_BYTE *)(result + 182);
  if ((v8 & 6) == 0)
    goto LABEL_18;
  v9 = *(float32x2_t **)(*(_QWORD *)(result + 80) + 176);
  if (!v9 || v9[3].i8[7] == 1)
    goto LABEL_18;
  if (a2)
  {
    v10 = *a4;
    *(_QWORD *)(a2 + 8 * v10) = result + 96;
    v11 = *(_DWORD *)(result + 176) >> 7;
    *a4 = v10 + 1;
    *(_DWORD *)(a3 + 4 * v10) = v11;
  }
  if ((v8 & 4) == 0)
    goto LABEL_9;
  v12 = v9[4];
  v13 = v9[5].f32[0];
  v14 = v9[6];
  v15 = v9[7].f32[0];
  if (a6)
  {
    *a5 = (float)(1.0 / a8) * v12.f32[0];
    a5[1] = vmuls_lane_f32(1.0 / a8, v12, 1);
    a5[2] = (float)(1.0 / a8) * v13;
    a5[4] = (float)(1.0 / a8) * v14.f32[0];
    a5[5] = vmuls_lane_f32(1.0 / a8, v14, 1);
    a5[6] = (float)(1.0 / a8) * v15;
LABEL_9:
    if ((v8 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v16 = *(float32x2_t **)(result + 80);
  v16[10] = vadd_f32(v12, v16[10]);
  v16[11].f32[0] = v13 + v16[11].f32[0];
  v16[12] = vadd_f32(v14, v16[12]);
  v16[13].f32[0] = v15 + v16[13].f32[0];
  if ((v8 & 2) == 0)
    goto LABEL_18;
LABEL_12:
  v17 = *v9;
  v18 = v9[1].f32[0];
  v19 = v9[2];
  v20 = v9[3].f32[0];
  if (a5)
  {
    *(float32x2_t *)a5 = v17;
    a5[2] = v18;
    *((float32x2_t *)a5 + 2) = v19;
    a5[6] = v20;
  }
  else
  {
    if (a7
      && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 72) + 1880) + 360)
                   + 4
                   * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 72) + 1880) + 496)
                                     + (((unint64_t)*(unsigned int *)(result + 176) >> 5) & 0x7FFFFFC))))
    {
      a8 = *(float *)(result + 172) * a8;
    }
    v21 = *(float32x2_t **)(result + 80);
    v21[10] = vadd_f32(vmul_n_f32(v17, a8), v21[10]);
    v21[11].f32[0] = (float)(v18 * a8) + v21[11].f32[0];
    v21[12] = vadd_f32(vmul_n_f32(v19, a8), v21[12]);
    v21[13].f32[0] = (float)(v20 * a8) + v21[13].f32[0];
  }
LABEL_18:
  v22 = *(_QWORD *)(*(_QWORD *)(result + 80) + 176);
  if (*(char *)(*(_QWORD *)(result + 136) + 28) < 0)
  {
    if (v22 && *(_BYTE *)(v22 + 31) != 1)
    {
      *(_QWORD *)(v22 + 48) = 0;
      *(_DWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_DWORD *)(v22 + 40) = 0;
    }
    LOBYTE(v23) = v8 & 0xFB;
  }
  else
  {
    if (v22 && *(_BYTE *)(v22 + 31) != 1)
    {
      *(_QWORD *)(v22 + 48) = 0;
      *(_DWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_DWORD *)(v22 + 24) = 0;
      *(_QWORD *)v22 = 0;
      *(_DWORD *)(v22 + 8) = 0;
    }
    v23 = (v8 & 2) >> 1;
  }
  *(_BYTE *)(result + 182) = v23;
  return result;
}

float physx::Sc::ArticulationSim::saveLastCCDTransform(physx::Sc::ArticulationSim *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v12;
  uint64_t v13;
  float result;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 5);
    do
    {
      v4 = v2 + 1;
      if (v2 + 1 < v1)
      {
        _X12 = *(_QWORD *)(v3 + 8 * v2 + 8);
        __asm
        {
          PRFM            #0, [X12,#0x80]
          PRFM            #0, [X12,#0x100]
        }
      }
      v12 = *(_QWORD *)(v3 + 8 * v2);
      v13 = *(_QWORD *)(v12 + 136);
      *(_OWORD *)(v12 + 96) = *(_OWORD *)v13;
      *(_QWORD *)(v12 + 112) = *(_QWORD *)(v13 + 16);
      result = *(float *)(v13 + 24);
      *(float *)(v12 + 120) = result;
      v2 = v4;
    }
    while (v1 != v4);
  }
  return result;
}

float32x2_t physx::Sc::BodyCore::BodyCore(uint64_t a1, int a2, uint64_t a3)
{
  float v3;
  float v4;
  int v5;
  const float *v6;
  int8x8_t v7;
  float32x2_t result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0xFFFFFF;
  *(_BYTE *)(a1 + 12) = 1;
  *(_BYTE *)(a1 + 13) = a2;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 174) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v3 = *(float *)(physx::Sc::Physics::mInstance + 4);
  v4 = *(float *)physx::Sc::Physics::mInstance * (float)(*(float *)physx::Sc::Physics::mInstance * 10000.0);
  v5 = dword_2261A78B8[a2 == 1];
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 44) = 17039616;
  *(_OWORD *)(a1 + 48) = xmmword_2260E5D70;
  *(_OWORD *)(a1 + 64) = xmmword_2261A7900;
  *(_OWORD *)(a1 + 80) = xmmword_2261A7910;
  *(_OWORD *)(a1 + 96) = xmmword_2261A69E0;
  *(_DWORD *)(a1 + 112) = v5;
  v6 = (const float *)&dword_2260ECE0C;
  v7 = (int8x8_t)vld1_dup_f32(v6);
  *(float *)v7.i32 = v4;
  *(int8x8_t *)(a1 + 116) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 1), 0x1FuLL)), (int8x8_t)1956496814, v7);
  *(_OWORD *)(a1 + 124) = xmmword_2261A7920;
  *(_QWORD *)(a1 + 140) = 0x749DC5AE3F800000;
  result = vmul_n_f32(vmul_n_f32((float32x2_t)0x37D1B7173851B717, v3), v3);
  *(float32x2_t *)(a1 + 148) = result;
  *(_DWORD *)(a1 + 156) = 1053609164;
  *(_WORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 174) = 0;
  return result;
}

uint64_t physx::Sc::BodyCore::setBody2World(uint64_t result, uint64_t a2)
{
  physx::Sc::BodySim *v2;
  _BOOL8 v3;
  uint64_t v4;
  int v5;

  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(physx::Sc::BodySim **)result;
  if (*(_QWORD *)result)
  {
    physx::Sc::BodySim::postBody2WorldChange(*(physx::Sc::BodySim **)result);
    v3 = *(unsigned __int8 *)(*((_QWORD *)v2 + 10) + 13) == 2;
    v4 = *(_QWORD *)(*((_QWORD *)v2 + 9) + 1904);
    v5 = *((_DWORD *)v2 + 44);
    return (*(uint64_t (**)(uint64_t, _BOOL8, int *))(*(_QWORD *)v4 + 88))(v4, v3, &v5);
  }
  return result;
}

uint64_t physx::Sc::BodySim::postBody2WorldChange(physx::Sc::BodySim *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 17);
  *((_OWORD *)this + 6) = *(_OWORD *)v1;
  *((_QWORD *)this + 14) = *(_QWORD *)(v1 + 16);
  *((_DWORD *)this + 30) = *(_DWORD *)(v1 + 24);
  return physx::Sc::RigidSim::notifyShapesOfTransformChange(this);
}

uint64_t *updateBodySim(uint64_t *result)
{
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;
  int v4;

  v1 = *result;
  if (*result)
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 13) == 2;
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 1904);
    v4 = *(_DWORD *)(v1 + 176);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _BOOL8, int *))(*(_QWORD *)v3 + 88))(v3, v2, &v4);
  }
  return result;
}

uint64_t physx::Sc::BodyCore::setBody2Actor(uint64_t result, float *a2)
{
  float v2;
  float v3;
  BOOL v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  physx::Sc::RigidSim *v10;
  _BOOL8 v11;
  uint64_t v12;
  int v13;

  v2 = a2[4];
  v3 = a2[5];
  v4 = v2 == 0.0;
  if (v3 != 0.0)
    v4 = 0;
  v5 = a2[6];
  if (v5 != 0.0)
    v4 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != 0.0)
    v4 = 0;
  if (v7 != 0.0)
    v4 = 0;
  v8 = a2[2];
  v9 = a2[3];
  if (v8 != 0.0)
    v4 = 0;
  if (v9 != 1.0)
    v4 = 0;
  *(_BYTE *)(result + 45) = v4;
  *(float *)(result + 48) = v6;
  *(float *)(result + 52) = v7;
  *(float *)(result + 56) = v8;
  *(float *)(result + 60) = v9;
  *(float *)(result + 64) = v2;
  *(float *)(result + 68) = v3;
  *(float *)(result + 72) = v5;
  v10 = *(physx::Sc::RigidSim **)result;
  if (*(_QWORD *)result)
  {
    physx::Sc::RigidSim::notifyShapesOfTransformChange(*(physx::Sc::RigidSim **)result);
    v11 = *(unsigned __int8 *)(*((_QWORD *)v10 + 10) + 13) == 2;
    v12 = *(_QWORD *)(*((_QWORD *)v10 + 9) + 1904);
    v13 = *((_DWORD *)v10 + 44);
    return (*(uint64_t (**)(uint64_t, _BOOL8, int *))(*(_QWORD *)v12 + 88))(v12, v11, &v13);
  }
  return result;
}

float32_t physx::Sc::BodyCore::addSpatialAcceleration(physx::Sc::BodySim **a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  physx::Sc::BodySim *v8;
  float32_t result;
  float32x2_t *v10;

  v8 = *a1;
  if (v8)
    physx::Sc::BodySim::notifyAddSpatialAcceleration(v8);
  v10 = (float32x2_t *)a1[22];
  if (!v10 || v10[3].i8[7])
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a1, a2, 0, 0);
    v10 = (float32x2_t *)a1[22];
  }
  v10[1].i8[4] |= 2u;
  if (a3)
  {
    *v10 = vadd_f32(*a3, *v10);
    result = a3[1].f32[0] + v10[1].f32[0];
    v10[1].f32[0] = result;
  }
  if (a4)
  {
    v10[2] = vadd_f32(*a4, v10[2]);
    result = a4[1].f32[0] + v10[3].f32[0];
    v10[3].f32[0] = result;
  }
  return result;
}

void physx::Sc::BodySim::notifyAddSpatialAcceleration(physx::Sc::BodySim *this)
{
  uint64_t v1;
  unint64_t v2;

  *((_BYTE *)this + 182) |= 2u;
  if (*(_BYTE *)(*((_QWORD *)this + 10) + 13) != 2)
  {
    v1 = *((_QWORD *)this + 9);
    v2 = *((unsigned int *)this + 44);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v1 + 4416, (v2 >> 7) + 1);
    *(_DWORD *)(*(_QWORD *)(v1 + 4416) + ((v2 >> 10) & 0x3FFFFC)) |= 1 << (v2 >> 7);
  }
}

uint64_t physx::Sc::BodyCore::setupSimStateData(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 176);
  if (!v7)
  {
    v7 = *(_QWORD *)(a2 + 560);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Sc::SimStateData,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::allocateSlab(a2);
      v7 = *(_QWORD *)(a2 + 560);
    }
    *(_QWORD *)(a2 + 560) = *(_QWORD *)v7;
    ++*(_DWORD *)(a2 + 548);
  }
  *(_OWORD *)(v7 + 32) = 0uLL;
  *(_OWORD *)(v7 + 48) = 0uLL;
  *(_OWORD *)v7 = 0uLL;
  *(_OWORD *)(v7 + 16) = 0uLL;
  if (a3)
  {
    *(_BYTE *)(v7 + 31) = 1;
    *(_BYTE *)(v7 + 28) = a4;
    *(_QWORD *)(v7 + 48) = *(_QWORD *)(a1 + 120);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(v7 + 56) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(int32x2_t *)(a1 + 112) = vdup_n_s32(0x7F7FFFFFu);
  }
  *(_QWORD *)(a1 + 176) = v7;
  return 1;
}

float physx::Sc::BodyCore::setSpatialAcceleration(physx::Sc::BodySim **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  physx::Sc::BodySim *v8;
  float result;
  physx::Sc::BodySim *v10;

  v8 = *a1;
  if (v8)
    physx::Sc::BodySim::notifyAddSpatialAcceleration(v8);
  v10 = a1[22];
  if (!v10 || *((_BYTE *)v10 + 31))
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a1, a2, 0, 0);
    v10 = a1[22];
  }
  *((_BYTE *)v10 + 12) |= 2u;
  if (a3)
  {
    *(_QWORD *)v10 = *(_QWORD *)a3;
    result = *(float *)(a3 + 8);
    *((float *)v10 + 2) = result;
  }
  if (a4)
  {
    *((_QWORD *)v10 + 2) = *(_QWORD *)a4;
    result = *(float *)(a4 + 8);
    *((float *)v10 + 6) = result;
  }
  return result;
}

void physx::Sc::BodyCore::clearSpatialAcceleration(physx::Sc::BodySim **this, int a2, int a3)
{
  physx::Sc::BodySim *v6;
  physx::Sc::BodySim *v7;

  v6 = *this;
  if (v6)
    physx::Sc::BodySim::notifyAddSpatialAcceleration(v6);
  v7 = this[22];
  if (v7)
  {
    *((_BYTE *)v7 + 12) |= 2u;
    if (a2)
    {
      *(_QWORD *)v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
    }
    if (a3)
    {
      *((_QWORD *)v7 + 2) = 0;
      *((_DWORD *)v7 + 6) = 0;
    }
  }
}

float32_t physx::Sc::BodyCore::addSpatialVelocity(physx::Sc::BodySim **a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  physx::Sc::BodySim *v8;
  float32_t result;
  float32x2_t *v10;

  v8 = *a1;
  if (v8)
    physx::Sc::BodySim::notifyAddSpatialVelocity(v8);
  v10 = (float32x2_t *)a1[22];
  if (!v10 || v10[3].i8[7])
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a1, a2, 0, 0);
    v10 = (float32x2_t *)a1[22];
  }
  v10[1].i8[4] |= 4u;
  if (a3)
  {
    v10[4] = vadd_f32(*a3, v10[4]);
    result = a3[1].f32[0] + v10[5].f32[0];
    v10[5].f32[0] = result;
  }
  if (a4)
  {
    v10[6] = vadd_f32(*a4, v10[6]);
    result = a4[1].f32[0] + v10[7].f32[0];
    v10[7].f32[0] = result;
  }
  return result;
}

void physx::Sc::BodySim::notifyAddSpatialVelocity(physx::Sc::BodySim *this)
{
  uint64_t v1;
  unint64_t v2;

  *((_BYTE *)this + 182) |= 4u;
  if (*(_BYTE *)(*((_QWORD *)this + 10) + 13) != 2)
  {
    v1 = *((_QWORD *)this + 9);
    v2 = *((unsigned int *)this + 44);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v1 + 4416, (v2 >> 7) + 1);
    *(_DWORD *)(*(_QWORD *)(v1 + 4416) + ((v2 >> 10) & 0x3FFFFC)) |= 1 << (v2 >> 7);
  }
}

void physx::Sc::BodyCore::clearSpatialVelocity(physx::Sc::BodySim **this, int a2, int a3)
{
  physx::Sc::BodySim *v6;
  physx::Sc::BodySim *v7;

  v6 = *this;
  if (v6)
    physx::Sc::BodySim::notifyAddSpatialVelocity(v6);
  v7 = this[22];
  if (v7)
  {
    *((_BYTE *)v7 + 12) |= 4u;
    if (a2)
    {
      *((_QWORD *)v7 + 4) = 0;
      *((_DWORD *)v7 + 10) = 0;
    }
    if (a3)
    {
      *((_QWORD *)v7 + 6) = 0;
      *((_DWORD *)v7 + 14) = 0;
    }
  }
}

uint64_t *physx::Sc::BodyCore::setInverseInertia(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[22];
  if (v2 && *(_BYTE *)(v2 + 31) == 1)
  {
    *(_QWORD *)(v2 + 32) = *(_QWORD *)a2;
    *(_DWORD *)(v2 + 40) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    result[16] = *(_QWORD *)a2;
    *((_DWORD *)result + 34) = *(_DWORD *)(a2 + 8);
    return updateBodySim(result);
  }
  return result;
}

void physx::Sc::BodyCore::setFlags(physx::Sc::BodyCore *this, uint64_t a2, _BYTE *a3, int8x8_t a4)
{
  int v4;
  int v5;
  _BOOL4 v8;
  char v9;
  uint64_t v10;
  int v12;
  int32x2_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int8x8_t v17;
  uint64_t v18;
  char v19;
  int8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *j;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *i;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  physx::Sc::ShapeSim *k;
  uint64_t v54;
  char v55;

  v4 = *((unsigned __int8 *)this + 44);
  v5 = *a3;
  if (v5 == v4)
    return;
  v8 = (v5 & 1) == 0;
  v9 = v4 | v8;
  *((_BYTE *)this + 44) = v5;
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v12 = *a3;
    if (((v12 ^ v4) & 0x10) != 0 && *(_DWORD *)(v10 + 184) <= 0xFFFFFFFD)
    {
      v13 = (int32x2_t *)(*(_QWORD *)(v10 + 72) + 7488);
      if ((v12 & 0x10) != 0)
      {
        v54 = v10;
        v55 = 0;
        v14 = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v13, &v54, &v55, a4);
        if (!v55)
          *v14 = v10;
      }
      else
      {
        v54 = v10;
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)v13, &v54);
      }
    }
    if (((v4 | v8) & 1) != 0)
    {
      if ((v4 & v8) != 0)
      {
        physx::Sc::BodyCore::tearDownSimStateData((uint64_t)this, a2, 1);
        v15 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 1880);
        v16 = *(_DWORD *)(v10 + 176);
        physx::IG::IslandSim::setDynamic(v15 + 224, v16);
        physx::IG::IslandSim::setDynamic(v15 + 864, v16);
        v18 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 176);
        if (*(char *)(*(_QWORD *)(v10 + 136) + 28) < 0)
        {
          if (v18 && *(_BYTE *)(v18 + 31) != 1)
          {
            v17 = 0;
            *(_QWORD *)(v18 + 48) = 0;
            *(_DWORD *)(v18 + 56) = 0;
            *(_QWORD *)(v18 + 32) = 0;
            *(_DWORD *)(v18 + 40) = 0;
          }
          v19 = *(_BYTE *)(v10 + 182) & 0xFB;
        }
        else
        {
          if (v18 && *(_BYTE *)(v18 + 31) != 1)
          {
            v17 = 0;
            *(_QWORD *)(v18 + 48) = 0;
            *(_DWORD *)(v18 + 56) = 0;
            *(_QWORD *)(v18 + 32) = 0;
            *(_DWORD *)(v18 + 40) = 0;
            *(_QWORD *)(v18 + 16) = 0;
            *(_DWORD *)(v18 + 24) = 0;
            *(_QWORD *)v18 = 0;
            *(_DWORD *)(v18 + 8) = 0;
          }
          v19 = 1;
        }
        *(_BYTE *)(v10 + 182) = v19;
        v32 = *(_QWORD **)(v10 + 200);
        if (v32)
          physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v32, *(int32x2_t **)(*(_QWORD *)(v10 + 72) + 2056), v17);
        physx::Sc::ActorSim::setActorsInteractionsDirty((_QWORD *)v10, 5, 0, 6, v17);
        *(_WORD *)(v10 + 180) &= 0xF9FBu;
        v33 = *(unsigned int *)(v10 + 184);
        if (v33 <= 0xFFFFFFFD)
        {
          v34 = *(_QWORD *)(v10 + 72);
          v35 = *(_QWORD *)(v10 + 80);
          v36 = *(_DWORD *)(v34 + 48);
          if (v33 >= v36)
            v37 = v36 + 1;
          else
            v37 = v36 - 1;
          if (v33 < v36)
            --v36;
          v38 = *(_QWORD *)(v34 + 32);
          *(_DWORD *)(v10 + 184) = v36;
          v39 = *(_QWORD *)(v38 + 8 * v36);
          *(_QWORD *)(v38 + 8 * v36) = v35;
          *(_DWORD *)(*(_QWORD *)v39 + 184) = v33;
          *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v33) = v39;
          *(_DWORD *)(v34 + 48) = v37;
        }
        for (i = *(_QWORD **)(v10 + 56); i; i = (_QWORD *)*i)
          physx::Sc::ShapeSim::updateBPGroup((uint64_t)i);
      }
    }
    else
    {
      physx::Sc::BodyCore::setupSimStateData((uint64_t)this, a2, 1, 0);
      v21 = *(unsigned int *)(v10 + 184);
      if (v21 <= 0xFFFFFFFD)
      {
        v22 = *(_QWORD *)(v10 + 72);
        v23 = *(_QWORD *)(v10 + 80);
        v24 = *(_DWORD *)(v22 + 48);
        if (v21 >= v24)
          v25 = v24 + 1;
        else
          v25 = v24 - 1;
        if (v21 < v24)
          --v24;
        v26 = *(_QWORD *)(v22 + 32);
        *(_DWORD *)(v10 + 184) = v24;
        v27 = *(_QWORD *)(v26 + 8 * v24);
        *(_QWORD *)(v26 + 8 * v24) = v23;
        *(_DWORD *)(*(_QWORD *)v27 + 184) = v21;
        *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v21) = v27;
        *(_DWORD *)(v22 + 48) = v25;
      }
      v28 = *(_QWORD **)(v10 + 200);
      if (v28)
        physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v28, *(int32x2_t **)(*(_QWORD *)(v10 + 72) + 2056), v20);
      physx::Sc::ActorSim::setActorsInteractionsDirty((_QWORD *)v10, 5, 0, 4, v20);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 1880);
      v30 = *(_DWORD *)(v10 + 176);
      physx::IG::IslandSim::setKinematic((physx::IG::IslandSim *)(v29 + 224), v30);
      physx::IG::IslandSim::setKinematic((physx::IG::IslandSim *)(v29 + 864), v30);
      for (j = *(_QWORD **)(v10 + 56); j; j = (_QWORD *)*j)
        physx::Sc::ShapeSim::updateBPGroup((uint64_t)j);
    }
    if ((v4 & 0x20) != (*a3 & 0x20))
    {
      if ((v4 & 0x20) == 0)
      {
        if ((v9 & 1) != 0)
        {
          v41 = *(_QWORD *)(v10 + 72);
          v42 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 13);
          v43 = *(unsigned int *)(v10 + 176);
          if (v42 == 2)
            v44 = 7632;
          else
            v44 = 7616;
          if (v42 == 2)
            v45 = v41 + 7632;
          else
            v45 = v41 + 7616;
          physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v45, (v43 >> 7) + 1);
          *(_DWORD *)(*(_QWORD *)(v41 + v44) + ((v43 >> 10) & 0x3FFFFC)) |= 1 << (v43 >> 7);
        }
        v46 = *(_WORD *)(v10 + 124) | 0x40;
        goto LABEL_61;
      }
      v47 = *(_QWORD *)(v10 + 72);
      v48 = *(unsigned int *)(v10 + 176);
      v49 = v48 >> 7;
      if (*(_BYTE *)(*(_QWORD *)(v10 + 80) + 13) == 2)
      {
        if (v49 < 32 * *(_DWORD *)(v47 + 7640))
        {
          v50 = 7632;
LABEL_59:
          *(_DWORD *)(*(_QWORD *)(v47 + v50) + ((v48 >> 10) & 0x3FFFFC)) &= ~(1 << v49);
        }
      }
      else if (v49 < 32 * *(_DWORD *)(v47 + 7624))
      {
        v50 = 7616;
        goto LABEL_59;
      }
      v46 = *(_WORD *)(v10 + 124) & 0xFFBF;
LABEL_61:
      *(_WORD *)(v10 + 124) = v46;
    }
  }
  if ((v9 & 1) == 0)
    physx::Sc::BodyCore::putToSleep(this);
  if (v10)
  {
    v51 = *a3 & 3;
    if ((v4 & 3) != 3 && v51 == 3)
    {
      for (k = *(physx::Sc::ShapeSim **)(v10 + 56); k; k = *(physx::Sc::ShapeSim **)k)
      {
        if (*((_DWORD *)k + 17) != -1)
          physx::Sc::SqBoundsManager::removeShape(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)k + 1) + 72) + 2088), k);
      }
    }
    else if ((v4 & 3) == 3 && v51 != 3)
    {
      physx::Sc::BodySim::createSqBounds(v10);
    }
  }
}

uint64_t physx::Sc::BodyCore::tearDownSimStateData(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 176);
  if (v3)
  {
    if (a3)
    {
      *(_OWORD *)(result + 128) = *(_OWORD *)(v3 + 32);
      *(int8x16_t *)(result + 112) = vextq_s8(*(int8x16_t *)(v3 + 48), *(int8x16_t *)(v3 + 48), 8uLL);
    }
    --*(_DWORD *)(a2 + 548);
    *(_QWORD *)v3 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a2 + 560) = v3;
    *(_QWORD *)(result + 176) = 0;
  }
  return result;
}

uint64_t physx::Sc::BodyCore::putToSleep(physx::Sc::BodyCore *this)
{
  physx::Sc::BodySim *v2;
  uint64_t v3;
  uint64_t result;
  int8x8_t v5;

  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  v2 = *(physx::Sc::BodySim **)this;
  if (*(_QWORD *)this)
  {
    physx::Sc::BodySim::notifyAddSpatialAcceleration(*(physx::Sc::BodySim **)this);
    physx::Sc::BodySim::notifyAddSpatialVelocity(v2);
  }
  v3 = *((_QWORD *)this + 22);
  if (v3 && !*(_BYTE *)(v3 + 31))
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 24) = 0;
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
  }
  result = physx::Sc::BodyCore::setWakeCounter((uint64_t)this, 0.0, 0);
  if (v2)
    return physx::Sc::BodySim::putToSleep(v2, v5);
  return result;
}

uint64_t physx::Sc::BodySim::createSqBounds(uint64_t this)
{
  _QWORD *i;

  if (*(_DWORD *)(this + 184) <= 0xFFFFFFFD
    && (~*(unsigned __int8 *)(*(_QWORD *)(this + 80) + 44) & 3) != 0
    && (*(_WORD *)(this + 180) & 0x1000) == 0)
  {
    for (i = *(_QWORD **)(this + 56); i; i = (_QWORD *)*i)
      this = physx::Sc::ShapeSim::createSqBounds((uint64_t)i);
  }
  return this;
}

uint64_t physx::Sc::BodyCore::setWakeCounter(uint64_t this, float a2, int a3)
{
  uint64_t v3;
  _BOOL8 v6;
  uint64_t v7;
  int8x8_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  *(float *)(this + 156) = a2;
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 80) + 13) == 2;
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 1904);
    v11 = *(_DWORD *)(v3 + 176);
    (*(void (**)(uint64_t, _BOOL8, int *))(*(_QWORD *)v7 + 88))(v7, v6, &v11);
    if (a2 > 0.0 || a3)
    {
      physx::Sc::BodySim::setActive((physx::Sc::BodySim *)v3, (physx::Sc::Interaction *)1, 0, v8);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 1880);
      v10 = *(_DWORD *)(v3 + 176);
      physx::IG::IslandSim::activateNode(v9 + 224, v10);
      physx::IG::IslandSim::activateNode(v9 + 864, v10);
    }
    return physx::Sc::BodySim::postSetWakeCounter(v3, a2, a3);
  }
  return this;
}

uint64_t physx::Sc::BodySim::postSetWakeCounter(uint64_t this, float a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  char v9;
  _BOOL4 v10;
  _BOOL4 v11;

  if (a2 > 0.0 || a3 != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(this + 72) + 1880);
    v5 = *(_DWORD *)(this + 176);
    physx::IG::IslandSim::activateNode(v4 + 224, v5);
    return physx::IG::IslandSim::activateNode(v4 + 864, v5);
  }
  v6 = *(_QWORD *)(this + 80);
  v7 = *(_QWORD *)(v6 + 176);
  if (!v7 || *(_BYTE *)(v7 + 31) == 1)
    v7 = 0;
  if (*(float *)(v6 + 80) != 0.0
    || *(float *)(v6 + 84) != 0.0
    || *(float *)(v6 + 88) != 0.0
    || *(float *)(v6 + 96) != 0.0
    || *(float *)(v6 + 100) != 0.0)
  {
    return this;
  }
  v8 = *(float *)(v6 + 104);
  v9 = *(_BYTE *)(this + 182);
  v10 = (v9 & 2) == 0;
  if (v8 != 0.0)
    v10 = 0;
  if ((*(_BYTE *)(this + 182) & 2) == 0 || v8 != 0.0)
    goto LABEL_25;
  if (v7)
  {
    if (*(float *)v7 != 0.0
      || *(float *)(v7 + 4) != 0.0
      || *(float *)(v7 + 8) != 0.0
      || *(float *)(v7 + 16) != 0.0
      || *(float *)(v7 + 20) != 0.0)
    {
      return this;
    }
    v10 = *(float *)(v7 + 24) == 0.0;
LABEL_25:
    v11 = (v9 & 4) == 0;
    if ((*(_BYTE *)(this + 182) & 4) != 0 && v10)
    {
      if (v7
        && (*(float *)(v7 + 32) != 0.0
         || *(float *)(v7 + 36) != 0.0
         || *(float *)(v7 + 40) != 0.0
         || *(float *)(v7 + 48) != 0.0
         || *(float *)(v7 + 52) != 0.0
         || *(float *)(v7 + 56) != 0.0))
      {
        return this;
      }
LABEL_39:
      if (!*(_QWORD *)(this + 192))
        return physx::IG::SimpleIslandManager::deactivateNode(*(_QWORD *)(*(_QWORD *)(this + 72) + 1880), *(_DWORD *)(this + 176));
      return this;
    }
    goto LABEL_37;
  }
  if ((*(_BYTE *)(this + 182) & 4) != 0)
    goto LABEL_39;
  v11 = 1;
  v10 = 1;
LABEL_37:
  if (v11 && v10)
    goto LABEL_39;
  return this;
}

uint64_t physx::Sc::BodySim::putToSleep(physx::Sc::BodySim *this, int8x8_t a2)
{
  uint64_t result;

  physx::Sc::BodySim::setActive(this, 0, 0, a2);
  result = physx::IG::SimpleIslandManager::putNodeToSleep(*(_QWORD *)(*((_QWORD *)this + 9) + 1880), *((_DWORD *)this + 44));
  *((_WORD *)this + 90) &= 0xF9FFu;
  return result;
}

float32_t physx::Sc::BodyCore::onOriginShift(float32x2_t *a1, float32x2_t *a2)
{
  float32_t result;
  float32x2_t *v3;
  float32x2_t *v4;

  a1[4] = vsub_f32(a1[4], *a2);
  result = a1[5].f32[0] - a2[1].f32[0];
  a1[5].f32[0] = result;
  v3 = (float32x2_t *)a1[22];
  if (v3 && (a1[5].i8[4] & 1) != 0 && v3[3].i8[4])
  {
    v3[2] = vsub_f32(v3[2], *a2);
    result = v3[3].f32[0] - a2[1].f32[0];
    v3[3].f32[0] = result;
  }
  v4 = (float32x2_t *)*a1;
  if (*a1)
  {
    v4[14] = vsub_f32(v4[14], *a2);
    result = v4[15].f32[0] - a2[1].f32[0];
    v4[15].f32[0] = result;
  }
  return result;
}

uint64_t physx::Sc::BodyCore::setKinematicTarget(physx::Sc::BodyCore *this, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *((_QWORD *)this + 22);
  if (v7)
  {
    *(_OWORD *)v7 = *(_OWORD *)a3;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a3 + 24);
    *(_BYTE *)(v7 + 28) = 1;
    if (*(_QWORD *)this)
      *(_WORD *)(*(_QWORD *)this + 180) = *(_WORD *)(*(_QWORD *)this + 180) & 0xF7FB | 4;
  }
  else
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)this, a2, 1, 1);
    v8 = *((_QWORD *)this + 22);
    *(_OWORD *)v8 = *(_OWORD *)a3;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
    *(_BYTE *)(v8 + 28) = 1;
  }
  return physx::Sc::BodyCore::setWakeCounter((uint64_t)this, a4, 1);
}

physx::Sc::BodySim *physx::Sc::BodySim::BodySim(physx::Sc::BodySim *this, physx::Sc::Scene *a2, physx::Sc::BodyCore *a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  physx::PxsRigidBody *v12;
  int8x8_t v13;
  char v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int8x8_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;

  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = a3;
  *(_QWORD *)a3 = this;
  v8 = *((_QWORD *)a2 + 536);
  v9 = *(_DWORD *)(v8 + 24);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * (v9 - 1));
    *(_DWORD *)(v8 + 24) = v10;
  }
  else
  {
    v11 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(v8 + 8) = v11 + 1;
  }
  *((_DWORD *)this + 22) = v11;
  *(_QWORD *)this = off_24ED8DFE0;
  *((_OWORD *)this + 6) = *((_OWORD *)a3 + 1);
  v12 = (physx::Sc::BodySim *)((char *)this + 96);
  *((_QWORD *)this + 14) = *((_QWORD *)a3 + 4);
  *((_DWORD *)this + 30) = *((_DWORD *)a3 + 10);
  *((_WORD *)this + 62) = 0;
  *((_WORD *)this + 63) = *((_WORD *)a3 + 23);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)a3 + 16;
  *((_OWORD *)this + 9) = xmmword_2261A7930;
  *((_OWORD *)this + 10) = xmmword_2260E5D70;
  *((_DWORD *)this + 44) = -128;
  *((_WORD *)this + 90) = 0;
  *((_BYTE *)this + 182) = 1;
  v13.i32[1] = -1;
  *((_QWORD *)this + 23) = -1;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)a3 + 41) = 0;
  *((_DWORD *)a3 + 42) = 0;
  *((_BYTE *)a3 + 173) = *((_BYTE *)a3 + 12) & 2;
  v14 = *((_BYTE *)a3 + 44);
  if ((v14 & 0x20) != 0)
    *((_WORD *)this + 62) = 64;
  v15 = *((_QWORD *)a3 + 22);
  if (v15 && *(_BYTE *)(v15 + 31) != 1)
  {
    if (*(_BYTE *)(v15 + 12))
      v16 = *(float *)v15 != 0.0
         || *(float *)(v15 + 4) != 0.0
         || *(float *)(v15 + 8) != 0.0
         || *(float *)(v15 + 16) != 0.0
         || *(float *)(v15 + 20) != 0.0
         || *(float *)(v15 + 24) != 0.0
         || *(float *)(v15 + 32) != 0.0
         || *(float *)(v15 + 36) != 0.0
         || *(float *)(v15 + 40) != 0.0
         || *(float *)(v15 + 48) != 0.0
         || *(float *)(v15 + 52) != 0.0
         || *(float *)(v15 + 56) != 0.0;
    else
      v16 = 0;
    *((_BYTE *)this + 182) = *(_BYTE *)(v15 + 12);
    *(_BYTE *)(v15 + 12) = 0;
  }
  else
  {
    v16 = 0;
  }
  v13.i32[0] = *((_DWORD *)a3 + 39);
  if (*(float *)v13.i32 <= 0.0)
  {
    v13.i32[0] = *((_DWORD *)a3 + 20);
    v17 = 1;
    if (*(float *)v13.i32 == 0.0)
    {
      v13.i32[0] = *((_DWORD *)a3 + 21);
      if (*(float *)v13.i32 == 0.0)
      {
        v13.i32[0] = *((_DWORD *)a3 + 22);
        if (*(float *)v13.i32 == 0.0)
        {
          v13.i32[0] = *((_DWORD *)a3 + 24);
          if (*(float *)v13.i32 == 0.0)
          {
            v13.i32[0] = *((_DWORD *)a3 + 25);
            if (*(float *)v13.i32 == 0.0)
            {
              v13.i32[0] = *((_DWORD *)a3 + 26);
              v17 = *(float *)v13.i32 != 0.0 || v16;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = 1;
  }
  v18 = *((_QWORD *)a2 + 235);
  if (*((_BYTE *)a3 + 13) == 2)
  {
    v19 = -128;
    if (!v16)
      goto LABEL_41;
  }
  else
  {
    v19 = physx::IG::SimpleIslandManager::addRigidBody(*((physx::IG::SimpleIslandManager **)a2 + 235), v12, v14 & 1, v17);
    *((_DWORD *)this + 44) = v19;
    if (!v16)
      goto LABEL_41;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 10) + 13) != 2)
  {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)a2 + 4416, (v19 >> 7) + 1);
    *(_DWORD *)(*((_QWORD *)a2 + 552) + 4 * (v19 >> 12)) |= 1 << (v19 >> 7);
  }
LABEL_41:
  if (a4)
    *((_WORD *)this + 90) |= 0x1000u;
  if (v17)
  {
    physx::Sc::BodySim::activate(this, v13);
    physx::Sc::Scene::addToActiveBodyList((uint64_t)a2, this);
    if ((v14 & 1) == 0)
      return this;
  }
  else
  {
    physx::Sc::BodySim::deactivate((uint64_t)this, v12, v13);
    *((_QWORD *)this + 23) = 0x100000001;
    v21 = *((_DWORD *)this + 44);
    physx::IG::IslandSim::deactivateNode(v18 + 224, v21);
    physx::IG::IslandSim::deactivateNode(v18 + 864, v21);
    if ((v14 & 1) == 0)
      return this;
  }
  v22 = (_QWORD *)*((_QWORD *)this + 25);
  if (v22)
    physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v22, *(int32x2_t **)(*((_QWORD *)this + 9) + 2056), v20);
  v23 = *((_QWORD *)a3 + 22);
  if (v23 && *(_BYTE *)(v23 + 31) == 1)
  {
    *((_WORD *)this + 90) = *((_WORD *)this + 90) & 0xF7FB | 4;
  }
  else
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a3, *((_QWORD *)a2 + 546), 1, 0);
    physx::IG::SimpleIslandManager::putNodeToSleep(*(_QWORD *)(*((_QWORD *)this + 9) + 1880), *((_DWORD *)this + 44));
  }
  return this;
}

void physx::Sc::BodySim::~BodySim(physx::Sc::BodySim *this)
{
  unsigned int v2;
  uint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)this = off_24ED8DFE0;
  v2 = *((_DWORD *)this + 46);
  v3 = *((_QWORD *)this + 9);
  physx::Sc::BodyCore::tearDownSimStateData(*((_QWORD *)this + 10), *(_QWORD *)(v3 + 4368), *(_BYTE *)(*((_QWORD *)this + 10) + 44) & 1);
  *((_WORD *)this + 90) |= 8u;
  physx::Sc::Scene::removeBody((int32x2_t **)v3, this, v4);
  v5 = *((_QWORD *)this + 24);
  if (!v5 || (physx::Sc::ArticulationSim::removeBody(v5, (uint64_t)this), !*((_QWORD *)this + 24)))
  {
    v6 = *((_DWORD *)this + 44);
    if ((v6 & 0x7E) == 0)
      physx::IG::SimpleIslandManager::removeNode(*(_QWORD *)(v3 + 1880), v6);
  }
  if (v2 <= 0xFFFFFFFD)
    physx::Sc::Scene::removeFromActiveBodyList(v3, this);
  *((_QWORD *)this + 23) = -1;
  **((_QWORD **)this + 10) = 0;
  physx::Sc::RigidSim::~RigidSim(this);
}

{
  physx::Sc::BodySim::~BodySim(this);
  (*(void (**)(uint64_t, physx::Sc::BodySim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Sc::BodySim::postActorFlagChange(uint64_t this, char a2, char a3)
{
  if ((a3 & 2) != (a2 & 2))
  {
    if (!*(_BYTE *)(this + 182))
      *(_BYTE *)(this + 182) = 1;
    *(_BYTE *)(*(_QWORD *)(this + 80) + 173) = (a3 & 2) >> 1;
  }
  return this;
}

void physx::Sc::BodySim::activate(physx::Sc::BodySim *this, int8x8_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  _QWORD *v5;
  void *v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  physx::Sc *v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  physx::Sc::BodySim *v25;
  char v26;

  v3 = *((_QWORD *)this + 10);
  if (*(_BYTE *)(v3 + 13) != 2)
  {
    *((_WORD *)this + 62) &= ~1u;
    physx::Sc::Scene::onBodyWakeUp(*((int32x2_t **)this + 9), (int32x2_t *)this, a2);
    v3 = *((_QWORD *)this + 10);
  }
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
  {
    v4 = (int32x2_t *)(*((_QWORD *)this + 9) + 7488);
    v25 = this;
    v26 = 0;
    v5 = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v4, &v25, &v26, a2);
    if (!v26)
      *v5 = this;
  }
  physx::Sc::BodySim::createSqBounds((uint64_t)this);
  v8 = *((unsigned int *)this + 13);
  if ((_DWORD)v8)
  {
    v9 = 0;
    do
    {
      v10 = v9++;
      if (v9 >= (int)v8 - 1)
        v11 = v8 - 1;
      else
        v11 = v9;
      v12 = *((_QWORD *)this + 5);
      _X9 = *(_QWORD *)(v12 + 8 * v11);
      __asm { PRFM            #0, [X9] }
      v18 = *(physx::Sc **)(v12 + 8 * v10);
      if (*((_BYTE *)v18 + 28))
      {
        _ZF = *((_BYTE *)v18 + 28) != 2 && (*((_BYTE *)v18 + 29) & 0x20) == 0;
        if (_ZF
          && physx::Sc::activateInteraction(v18, 0, v6, v7)
          && *((unsigned __int8 *)v18 + 28) <= 2u)
        {
          physx::Sc::Scene::notifyInteractionActivated(*((_QWORD *)this + 9), (uint64_t)v18);
        }
      }
    }
    while (v8 != v9);
  }
  v20 = *((_QWORD *)this + 10);
  if ((*(_BYTE *)(v20 + 44) & 0x20) != 0)
  {
    if (*(_BYTE *)(v20 + 13) == 2)
    {
      v21 = *((_DWORD *)this + 44);
      if (v21 > 0xFFFFFF7F)
        return;
      v22 = *((_QWORD *)this + 9);
      v23 = 7632;
    }
    else
    {
      v22 = *((_QWORD *)this + 9);
      v21 = *((_DWORD *)this + 44);
      v23 = 7616;
    }
    v24 = (_QWORD *)(v22 + v23);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v22 + v23, (v21 >> 7) + 1);
    *(_DWORD *)(*v24 + 4 * (v21 >> 12)) |= 1 << (v21 >> 7);
  }
}

uint64_t physx::Sc::BodySim::deactivate(uint64_t this, physx::Sc::Interaction *a2, int8x8_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  physx::Sc::ShapeSim *i;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = this;
  v4 = *(unsigned int *)(this + 52);
  if ((_DWORD)v4)
  {
    v5 = 0;
    do
    {
      v6 = v5++;
      if (v5 >= (int)v4 - 1)
        v7 = v4 - 1;
      else
        v7 = v5;
      v8 = *(_QWORD *)(v3 + 40);
      _X9 = *(_QWORD *)(v8 + 8 * v7);
      __asm { PRFM            #0, [X9] }
      v14 = *(unsigned __int8 **)(v8 + 8 * v6);
      if (v14[28])
      {
        if (v14[28] != 2 && (v14[29] & 0x20) != 0)
        {
          this = physx::Sc::deactivateInteraction((physx::Sc *)v14, a2);
          if ((_DWORD)this)
          {
            if (v14[28] <= 2u)
              this = physx::Sc::Scene::notifyInteractionDeactivated(*(_QWORD *)(v3 + 72), (uint64_t)v14);
          }
        }
      }
    }
    while (v4 != v5);
  }
  v16 = *(_QWORD *)(v3 + 80);
  if ((*(_WORD *)(v3 + 180) & 8) == 0)
  {
    *(double *)&a3 = 0.0;
    *(_QWORD *)(v16 + 80) = 0;
    *(_DWORD *)(v16 + 88) = 0;
    *(_QWORD *)(v16 + 96) = 0;
    *(_DWORD *)(v16 + 104) = 0;
    v17 = *(_QWORD *)(v16 + 176);
    if (*(char *)(*(_QWORD *)(v3 + 136) + 28) < 0)
    {
      if (v17 && *(_BYTE *)(v17 + 31) != 1)
      {
        *(_QWORD *)(v17 + 48) = 0;
        *(_DWORD *)(v17 + 56) = 0;
        *(_QWORD *)(v17 + 32) = 0;
        *(_DWORD *)(v17 + 40) = 0;
      }
      v19 = *(_BYTE *)(v3 + 182) & 0xFB;
    }
    else
    {
      v18 = *(unsigned __int8 *)(v16 + 173);
      if (v17 && *(_BYTE *)(v17 + 31) != 1)
      {
        *(_QWORD *)(v17 + 48) = 0;
        *(_DWORD *)(v17 + 56) = 0;
        *(_QWORD *)(v17 + 32) = 0;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        *(_QWORD *)v17 = 0;
        *(_DWORD *)(v17 + 8) = 0;
      }
      if (v18)
      {
        *(_BYTE *)(v3 + 182) = 0;
        goto LABEL_28;
      }
      v19 = 1;
    }
    *(_BYTE *)(v3 + 182) = v19;
  }
LABEL_28:
  if (*(_BYTE *)(v16 + 13) != 2)
    this = (uint64_t)physx::Sc::Scene::onBodySleep(*(int32x2_t **)(v3 + 72), (int32x2_t *)v3, a3);
  if ((*(_BYTE *)(v16 + 44) & 0x10) != 0)
  {
    v20 = *(_QWORD *)(v3 + 72) + 7488;
    v27 = v3;
    this = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v20, &v27);
  }
  for (i = *(physx::Sc::ShapeSim **)(v3 + 56); i; i = *(physx::Sc::ShapeSim **)i)
  {
    if (*((_DWORD *)i + 17) != -1)
      this = physx::Sc::SqBoundsManager::removeShape(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)i + 1) + 72) + 2088), i);
  }
  v22 = *(_QWORD *)(v3 + 80);
  if ((*(_BYTE *)(v22 + 44) & 0x20) != 0)
  {
    if (*(_BYTE *)(v22 + 13) != 2)
    {
      v24 = *(_QWORD *)(v3 + 72);
      v23 = *(_DWORD *)(v3 + 176);
      v25 = v23 >> 7;
      if (v23 >> 7 >= 32 * *(_DWORD *)(v24 + 7624))
        return this;
      v26 = 7616;
      goto LABEL_43;
    }
    v23 = *(_DWORD *)(v3 + 176);
    if (v23 <= 0xFFFFFF7F)
    {
      v24 = *(_QWORD *)(v3 + 72);
      v25 = v23 >> 7;
      if (v23 >> 7 < 32 * *(_DWORD *)(v24 + 7640))
      {
        v26 = 7632;
LABEL_43:
        *(_DWORD *)(*(_QWORD *)(v24 + v26) + 4 * (v23 >> 12)) &= ~(1 << v25);
      }
    }
  }
  return this;
}

uint64_t physx::Sc::BodySim::internalWakeUp(physx::Sc::BodySim *this, float a2)
{
  uint64_t result;
  uint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  unsigned int v7;

  result = *((_QWORD *)this + 24);
  if (result)
    return physx::Sc::ArticulationSim::internalWakeUp(result, a2);
  v4 = *((_QWORD *)this + 10);
  if ((*(_BYTE *)(v4 + 44) & 1) == 0 && *(float *)(v4 + 156) < a2)
  {
    *(float *)(v4 + 156) = a2;
    *(double *)&v5 = (*(double (**)(_QWORD, BOOL, char *))(**(_QWORD **)(*((_QWORD *)this + 9) + 1904)
                                                                    + 88))(*(_QWORD *)(*((_QWORD *)this + 9) + 1904), *(_BYTE *)(v4 + 13) == 2, (char *)this + 176);
    physx::Sc::BodySim::setActive(this, (physx::Sc::Interaction *)1, 0, v5);
    v6 = *(_QWORD *)(*((_QWORD *)this + 9) + 1880);
    v7 = *((_DWORD *)this + 44);
    physx::IG::IslandSim::activateNode(v6 + 224, v7);
    result = physx::IG::IslandSim::activateNode(v6 + 864, v7);
    *((_WORD *)this + 62) &= ~1u;
  }
  return result;
}

void physx::Sc::BodySim::calculateKinematicVelocity(physx::Sc::BodySim *this, float a2)
{
  uint64_t v2;
  __int16 v3;
  float32x2_t *v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_WORD *)this + 90);
  if ((v3 & 4) != 0)
  {
    *((_WORD *)this + 90) = v3 & 0xF9FF;
    v5 = *(float32x2_t **)(v2 + 176);
    v6 = v5->f32[1];
    v7 = v5[1].f32[0];
    v8 = v5[1].f32[1];
    v9 = vsub_f32(v5[2], *(float32x2_t *)(v2 + 32));
    v10 = *(float *)(v2 + 16);
    v11 = *(float *)(v2 + 20);
    v12 = *(float *)(v2 + 24);
    v13 = *(float *)(v2 + 28);
    v14 = (float)((float)((float)(v5->f32[0] * v13) - (float)(v8 * v10)) - (float)(v6 * v12)) + (float)(v11 * v7);
    v15 = (float)((float)((float)(v6 * v13) - (float)(v8 * v11)) - (float)(v7 * v10)) + (float)(v12 * v5->f32[0]);
    v16 = (float)((float)((float)(v7 * v13) - (float)(v8 * v12)) - (float)(v5->f32[0] * v11)) + (float)(v10 * v6);
    v17 = (float)((float)((float)(v5->f32[0] * v10) + (float)(v8 * v13)) + (float)(v6 * v11)) + (float)(v7 * v12);
    if (v17 < 0.0)
    {
      v14 = -v14;
      v15 = -v15;
      v16 = -v16;
      v17 = -v17;
    }
    v18 = vmul_n_f32(v9, a2);
    v19 = (float)(v5[3].f32[0] - *(float *)(v2 + 40)) * a2;
    v20 = (float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16);
    if (v20 >= 1.0e-16)
    {
      v25 = 1.0 / sqrtf(v20);
      v22 = v14 * v25;
      v21 = v15 * v25;
      v23 = v16 * v25;
      if (fabsf(v17) >= 0.00000001)
      {
        v27 = a2;
        v26 = atan2f(v20 * v25, v17);
        a2 = v27;
        v24 = v26 + v26;
      }
      else
      {
        v24 = 3.1416;
      }
    }
    else
    {
      v21 = 0.0;
      v22 = 1.0;
      v23 = 0.0;
      v24 = 0.0;
    }
    *(float32x2_t *)(v2 + 80) = v18;
    *(float *)(v2 + 88) = v19;
    *(float *)(v2 + 96) = (float)(v22 * v24) * a2;
    *(float *)(v2 + 100) = (float)(v21 * v24) * a2;
    *(float *)(v2 + 104) = (float)(v23 * v24) * a2;
  }
  else if ((*((_WORD *)this + 90) & 0x800) == 0)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    updateBodySim((uint64_t *)v2);
    *(_QWORD *)(v2 + 96) = 0;
    *(_DWORD *)(v2 + 104) = 0;
    updateBodySim((uint64_t *)v2);
  }
}

float physx::Sc::BodySim::updateKinematicPose(physx::Sc::BodySim *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float result;
  uint64_t v5;

  v1 = *((_WORD *)this + 90);
  if ((v1 & 4) != 0)
  {
    v2 = *((_QWORD *)this + 10);
    *((_WORD *)this + 90) = v1 & 0xF9FF;
    v3 = *(_QWORD *)(v2 + 176);
    result = *(float *)(v3 + 24);
    v5 = *(_QWORD *)(v3 + 16);
    *(_OWORD *)(v2 + 16) = *(_OWORD *)v3;
    *(_QWORD *)(v2 + 32) = v5;
    *(float *)(v2 + 40) = result;
  }
  return result;
}

uint64_t physx::Sc::BodySim::deactivateKinematic(physx::Sc::BodySim *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int8x8_t v6;
  __int16 v7;

  v2 = *((unsigned __int16 *)this + 90);
  if ((v2 & 0x400) == 0)
  {
    if ((v2 & 0x200) != 0)
    {
      v7 = v2 & 0xF9FF | 0x400;
    }
    else
    {
      if ((v2 & 0x800) != 0)
        return (v2 >> 10) & 1;
      v7 = v2 & 0xFDFB | 0x200;
    }
    *((_WORD *)this + 90) = v7;
    return (v2 >> 10) & 1;
  }
  v3 = *((_QWORD *)this + 10);
  *((_WORD *)this + 90) = v2 & 0xFBFF;
  *(_DWORD *)(v3 + 156) = 0;
  if (!*((_QWORD *)this + 24))
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 1880);
    v5 = *((_DWORD *)this + 44);
    physx::IG::IslandSim::deactivateNode(v4 + 224, v5);
    physx::IG::IslandSim::deactivateNode(v4 + 864, v5);
  }
  physx::IG::SimpleIslandManager::putNodeToSleep(*(_QWORD *)(*((_QWORD *)this + 9) + 1880), *((_DWORD *)this + 44));
  physx::Sc::BodySim::setActive(this, 0, 0, v6);
  return (v2 >> 10) & 1;
}

void physx::Sc::BodySim::freezeTransforms(uint64_t a1, _QWORD *a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 56); i; i = *(_QWORD *)i)
  {
    physx::Sc::ShapeSim::updateCached(i, 1, a2);
    if (*(_DWORD *)(i + 68) != -1)
      physx::Sc::SqBoundsManager::removeShape(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i + 8) + 72) + 2088), (physx::Sc::ShapeSim *)i);
  }
}

uint64_t physx::Sc::BodySim::disableCompound(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(this + 184) <= 0xFFFFFFFD)
  {
    v1 = *(_QWORD *)(this + 72);
    v2 = *(unsigned int *)(this + 188);
    *(_DWORD *)(this + 188) = -2;
    v3 = *(_DWORD *)(v1 + 64) - 1;
    if ((_DWORD)v2 != v3)
    {
      v4 = *(_QWORD *)(v1 + 56);
      v5 = *(_QWORD *)(v4 + 8 * v3);
      *(_QWORD *)(v4 + 8 * v2) = v5;
      *(_DWORD *)(*(_QWORD *)v5 + 184) = v2;
    }
    *(_DWORD *)(v1 + 64) = v3;
  }
  *(_WORD *)(this + 180) &= ~0x1000u;
  return this;
}

_QWORD *physx::Sc::NPhaseCore::addToDirtyInteractionList(int32x2_t *this, physx::Sc::Interaction *a2, int8x8_t a3)
{
  _QWORD *result;
  physx::Sc::Interaction *v4;
  char v5;

  v4 = a2;
  v5 = 0;
  result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 12, &v4, &v5, a3);
  if (!v5)
    *result = v4;
  return result;
}

_BYTE *physx::Sc::Interaction::setClean(_BYTE *this, int a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _BYTE *v5;

  v2 = this;
  v3 = this[29];
  if ((v3 & 8) != 0)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 3992);
      v5 = this;
      this = (_BYTE *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4 + 96, (uint64_t *)&v5);
      v3 = v2[29];
    }
    v2[29] = v3 & 0xF7;
  }
  v2[30] = 0;
  return this;
}

_QWORD *physx::Sc::filterRbCollisionPairSecondStage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, unsigned __int16 *a8@<X8>)
{
  __n128 FilterInfo_ShapeSim;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *(***v29)(unsigned __int16 *__return_ptr, _QWORD, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, __int16 *);
  int v30;
  uint64_t v31;
  _QWORD *v32;
  __int16 v33;
  char v35;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  __int16 *v43;
  _DWORD v45[4];
  _DWORD v46[4];
  _DWORD v47[4];
  _DWORD v48[5];
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned __int16 v61[8];

  *(_QWORD *)a8 = 0xFFFFFFFF00000000;
  v54 = 0;
  getFilterInfo_ShapeSim((int *)&v54 + 1, (__n128 *)((char *)&v57 + 4), *(_QWORD *)(a2 + 8), *(__n128 **)(a2 + 56));
  FilterInfo_ShapeSim = getFilterInfo_ShapeSim((int *)&v54, (__n128 *)&v55, *(_QWORD *)(a3 + 8), (__n128 *)*(_QWORD *)(a3 + 56));
  v39 = v58;
  v40 = HIDWORD(v57);
  v51 = v58;
  v37 = v60;
  v38 = v59;
  v52 = v59;
  v53 = v60;
  v15 = v55;
  v14 = v56;
  v48[4] = v55;
  v49 = v56;
  v17 = HIDWORD(v56);
  v16 = v57;
  v50 = v57;
  v41 = v54;
  v43 = (__int16 *)(a8 + 1);
  result = (*(_QWORD *(**)(unsigned __int16 *__return_ptr, __n128))a1)(v61, FilterInfo_ShapeSim);
  v22 = v61[0];
  *a8 = v61[0];
  if ((v22 & 4) != 0)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if ((a7 & 1) == 0)
        return result;
      if ((_DWORD)a6 == -1)
      {
        v23 = *(_QWORD *)(a1 + 32);
        a6 = *(_QWORD *)(v23 + 16);
        if (a6 == 0xFFFFFFFFLL)
        {
          *(_QWORD *)v61 = 0;
          a6 = *(unsigned int *)(v23 + 8);
          if ((*(_DWORD *)(v23 + 12) & 0x7FFFFFFFu) <= a6)
          {
            physx::shdfnd::Array<physx::Sc::ElementSimInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementSimInteraction *>>::growAndPushBack(v23, v61);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v23 + 8 * a6) = 0;
            *(_DWORD *)(v23 + 8) = a6 + 1;
          }
        }
        else
        {
          v24 = *(_QWORD *)v23;
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(*(_QWORD *)v23 + 8 * a6);
          *(_QWORD *)(v24 + 8 * a6) = 0;
        }
      }
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 80)
          + qword_25582FA18[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 80) + 13)];
      v26 = *(_QWORD *)(a2 + 56) + qword_25582F9E0;
      v27 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 80)
          + qword_25582FA18[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 80) + 13)];
      v28 = *(_QWORD *)(a3 + 56) + qword_25582F9E0;
      v29 = *(_QWORD *(****)(unsigned __int16 *__return_ptr, _QWORD, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, __int16 *))(a1 + 24);
      v48[0] = v40;
      v48[1] = v39;
      v48[2] = v38;
      v48[3] = v37;
      v47[0] = v15;
      v47[1] = v14;
      v47[2] = v17;
      v47[3] = v16;
      result = (**v29)(v61, v29, a6, HIDWORD(v41), v48, v25, v26, v41, v47, v27, v28, v43);
      v22 = v61[0];
      *a8 = v61[0];
      *((_DWORD *)a8 + 1) = a6;
    }
    else
    {
      *a8 = v22 & 0xFFF3;
      result = (_QWORD *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 270, "Filtering: eCALLBACK set but no filter callback defined.", v19, v20, v21, v35);
      v22 = *a8;
    }
  }
  if ((~v22 & 3) == 0)
  {
    LOWORD(v22) = v22 & 0xFFFE;
    *a8 = v22;
  }
  if ((_DWORD)a6 != -1)
  {
    v30 = v22 & 0xC;
    if ((v22 & 1) != 0)
    {
      if (v30 == 12)
      {
        v31 = *(_QWORD *)(a1 + 24);
        v46[0] = v40;
        v46[1] = v39;
        v46[2] = v38;
        v46[3] = v37;
        v45[0] = v15;
        v45[1] = v14;
        v45[2] = v17;
        v45[3] = v16;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD, _DWORD *, _QWORD))(*(_QWORD *)v31 + 8))(v31, a6, HIDWORD(v41), v46, v41, v45, 0);
        v22 = *a8;
        if ((~v22 & 0xC) == 0)
          goto LABEL_21;
      }
    }
    else if (v30 == 12)
    {
      goto LABEL_22;
    }
    LOWORD(v22) = v22 & 0xFFF3;
    *a8 = v22;
LABEL_21:
    v32 = *(_QWORD **)(a1 + 32);
    *(_QWORD *)(*v32 + 8 * a6) = v32[2];
    v32[2] = a6;
    *((_DWORD *)a8 + 1) = -1;
  }
LABEL_22:
  if ((a7 & 1) != 0 || (v22 & 4) == 0)
  {
    v33 = *v43;
    if (a4
      && (v22 & 3) == 0
      && a5
      && (*(_BYTE *)(*(_QWORD *)(a4 + 80) + 44) & 1) != 0
      && (v33 & 1) != 0
      && (*(_BYTE *)(*(_QWORD *)(a5 + 80) + 44) & 1) != 0)
    {
      v33 &= ~1u;
    }
    *v43 = v33;
  }
  return result;
}

uint64_t physx::Sc::NPhaseCore::runOverlapFilters(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  physx::Sc::ActorSim *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  const physx::Sc::BodySim *v18;
  uint64_t v19;
  const physx::Sc::ActorSim *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  const physx::Sc::BodySim *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t *v50;
  const physx::Sc::ActorSim **v51;
  uint64_t v52;
  char v53;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *(*v60)(uint64_t *__return_ptr, _QWORD, __int128 *, _QWORD, __int128 *, char *, uint64_t, _QWORD);
  int v61;
  int v62;
  int v64;
  unsigned int v65;
  unsigned int v66;
  physx::Sc::ActorSim *v67;
  uint64_t v68;
  _BYTE v71[12];
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  if (a2)
  {
    v9 = 0;
    memset(v71, 0, sizeof(v71));
    v59 = *(_QWORD *)(*(_QWORD *)result + 4000);
    v60 = *(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, __int128 *, _QWORD, __int128 *, char *, uint64_t, _QWORD))(*(_QWORD *)result + 4016);
    v58 = *(_DWORD *)(*(_QWORD *)result + 4008);
    v61 = *(_DWORD *)(*(_QWORD *)result + 4032);
    v62 = *(_DWORD *)(*(_QWORD *)result + 4036);
    v68 = a2;
    v57 = *(_QWORD *)(*(_QWORD *)result + 4024);
    while (1)
    {
      v10 = (_QWORD *)(a3 + 24 * v9);
      v11 = *v10;
      v12 = *(physx::Sc::ActorSim **)(*v10 + 8);
      v13 = *((_QWORD *)v12 + 10);
      v14 = *(unsigned __int8 *)(v13 + 13);
      v15 = gTypeData[*(unsigned __int8 *)(v13 + 13)] >> 1;
      if (*(_BYTE *)(v13 + 13))
      {
        v16 = *(_BYTE *)(v13 + 44) & 1;
        v15 |= 16 * v16;
        v17 = v16;
        v18 = *(const physx::Sc::BodySim **)(*v10 + 8);
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v16 = 1;
      }
      v19 = v10[1];
      v20 = *(const physx::Sc::ActorSim **)(v19 + 8);
      v21 = *((_QWORD *)v20 + 10);
      v22 = *(unsigned __int8 *)(v21 + 13);
      v23 = gTypeData[*(unsigned __int8 *)(v21 + 13)] >> 1;
      if (*(_BYTE *)(v21 + 13))
      {
        v24 = *(_BYTE *)(v21 + 44) & 1;
        v23 |= 16 * v24;
        v25 = *(const physx::Sc::BodySim **)(v19 + 8);
      }
      else
      {
        v25 = 0;
        v24 = 0;
      }
      if ((v17 | v24) == 1)
      {
        if (v62)
        {
          if (v61)
            v26 = v24;
          else
            v26 = 0;
          if (!v18 || !v25 || (v17 & v26 & 1) != 0)
            goto LABEL_59;
          goto LABEL_23;
        }
        if (v61)
          v27 = v24;
        else
          v27 = 0;
        if ((v17 & v27) == 1)
          goto LABEL_59;
      }
      if (!v18)
      {
        v67 = v12;
        v65 = v23;
        v66 = v15;
        v64 = v17;
        if (v25)
        {
          result = filterJointedBodies(v25, v12);
          if ((_DWORD)result)
            goto LABEL_59;
        }
        v28 = v14 == 2;
        v29 = v22 == 2;
        v31 = v11;
        if (((v28 ^ v29) & 1) == 0)
          goto LABEL_40;
        goto LABEL_33;
      }
LABEL_23:
      v67 = v12;
      v65 = v23;
      v66 = v15;
      v64 = v17;
      result = filterJointedBodies(v18, v20);
      if ((result & 1) != 0)
        goto LABEL_59;
      v28 = v14 == 2;
      v29 = v22 == 2;
      if (v28 != v29)
      {
        v30 = v24 ^ 1;
        if (!v22)
          v30 = 0;
        v31 = v11;
        if ((v30 & 1) == 0 && *(_BYTE *)(*((_QWORD *)v18 + 17) + 159))
          goto LABEL_59;
LABEL_33:
        if (v25)
        {
          v32 = *(_BYTE *)(*((_QWORD *)v25 + 17) + 159) ? v16 : 0;
          if (v32 == 1)
            goto LABEL_59;
        }
        goto LABEL_40;
      }
      v31 = v11;
LABEL_40:
      if (v29)
        v33 = v28 == 0;
      else
        v33 = 1;
      if (v33)
        goto LABEL_45;
      if (!*(_BYTE *)(*((_QWORD *)v18 + 17) + 159) || !*(_BYTE *)(*((_QWORD *)v25 + 17) + 159))
      {
        v49 = *((_DWORD *)v67 + 13);
        if (v49)
        {
          v50 = (uint64_t *)*((_QWORD *)v67 + 5);
          while (1)
          {
            v52 = *v50++;
            v51 = (const physx::Sc::ActorSim **)v52;
            if (*(_BYTE *)(v52 + 28) == 5 && (*v51 == v20 || v51[1] == v20))
              break;
            if (!--v49)
              goto LABEL_45;
          }
          v39 = 0;
          v72 = 0xFFFFFFFF00000001;
          LOWORD(v38) = 1;
          goto LABEL_60;
        }
LABEL_45:
        v72 = 0xFFFFFFFF00000000;
        v34 = *(_OWORD *)(*(_QWORD *)(v31 + 56) + 16);
        v73 = *(_OWORD *)(*(_QWORD *)(v19 + 56) + 16);
        v74 = v34;
        result = (uint64_t)v60(&v75, v66, &v74, v65, &v73, (char *)&v72 + 2, v59, v58);
        v38 = (unsigned __int16)v75;
        if ((v75 & 4) != 0)
        {
          if (!v57)
          {
            LOWORD(v72) = v75 & 0xFFF3;
            result = physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 318, "Filtering: eCALLBACK set but no filter callback defined.", v35, v36, v37, v53);
            v38 = (unsigned __int16)v72;
            goto LABEL_48;
          }
        }
        else
        {
LABEL_48:
          if ((~v38 & 3) == 0)
            LOWORD(v38) = v38 & 0xFFFE;
        }
        v39 = WORD1(v72);
        if ((v38 & 4) == 0)
        {
          if ((v38 & 3) != 0)
            v40 = 0;
          else
            v40 = v24;
          if ((v64 & v40 & WORD1(v72)) != 0)
            v39 = WORD1(v72) & 0xFFFE;
          WORD1(v72) = v39;
        }
        goto LABEL_60;
      }
LABEL_59:
      v39 = 0;
      v72 = 0xFFFFFFFF00000002;
      LOWORD(v38) = 2;
LABEL_60:
      v41 = a4 + 8 * v9;
      *(_WORD *)v41 = v38;
      *(_WORD *)(v41 + 2) = v39;
      *(_DWORD *)(v41 + 4) = HIDWORD(v72);
      if ((v38 & 1) == 0)
      {
        v43 = *(_DWORD *)v71;
        v42 = *(_DWORD *)&v71[4];
        v44 = *(_DWORD *)&v71[4] + ((v38 & 2) >> 1);
        if ((v38 & 2) != 0)
          v45 = *(_DWORD *)v71;
        else
          v45 = *(_DWORD *)v71 + 1;
        v46 = (v38 & 4) == 0;
        v47 = a8;
        if (!v46)
          v47 = a9;
        v48 = *(_DWORD *)&v71[8];
        if (v46)
          v42 = v44;
        else
          v48 = *(_DWORD *)&v71[8] + 1;
        *(_DWORD *)&v71[4] = v42;
        *(_DWORD *)&v71[8] = v48;
        if (v46)
          v43 = v45;
        *(_DWORD *)v71 = v43;
        *(_DWORD *)(v47 + 4 * (v9 >> 5)) |= 1 << v9;
      }
      if (++v9 == v68)
        goto LABEL_83;
    }
  }
  memset(v71, 0, sizeof(v71));
LABEL_83:
  *a5 = *(_DWORD *)v71;
  *a6 = *(_DWORD *)&v71[4];
  *a7 = *(_DWORD *)&v71[8];
  return result;
}

uint64_t physx::Sc::NPhaseCore::NPhaseCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  const char *v13;
  pthread_mutex_t *v14;
  uint64_t v15;
  const char *v16;
  pthread_mutex_t *v17;
  uint64_t v18;
  const char *v19;
  _QWORD *v20;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  v5 = *(unsigned int *)(a3 + 220);
  v6 = (*(_DWORD *)(a3 + 152) >> 7) & 1;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v5;
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = v6;
  if ((_DWORD)v5)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
  else
    v7 = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1061158912;
  *(_QWORD *)(a1 + 140) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 148) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 96, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_QWORD *)(a1 + 696) = 0x4000000000;
  *(_BYTE *)(a1 + 680) = 1;
  *(_QWORD *)(a1 + 688) = a1 + 168;
  *(_QWORD *)(a1 + 704) = 32;
  *(_DWORD *)(a1 + 712) = 256;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 1264) = 0x4000000000;
  *(_BYTE *)(a1 + 1248) = 1;
  *(_QWORD *)(a1 + 1256) = a1 + 736;
  *(_QWORD *)(a1 + 1272) = 32;
  *(_DWORD *)(a1 + 1280) = 1024;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1832) = 0x4000000000;
  *(_BYTE *)(a1 + 1816) = 1;
  *(_QWORD *)(a1 + 1824) = a1 + 1304;
  *(_QWORD *)(a1 + 1840) = 256;
  *(_DWORD *)(a1 + 1848) = 26624;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 2400) = 0x4000000000;
  *(_BYTE *)(a1 + 2384) = 1;
  *(_QWORD *)(a1 + 2392) = a1 + 1872;
  *(_QWORD *)(a1 + 2408) = 32;
  *(_DWORD *)(a1 + 2416) = 2560;
  *(_QWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2968) = 0x4000000000;
  *(_BYTE *)(a1 + 2952) = 1;
  *(_QWORD *)(a1 + 2960) = a1 + 2440;
  *(_QWORD *)(a1 + 2976) = 32;
  *(_DWORD *)(a1 + 2984) = 1280;
  *(_QWORD *)(a1 + 2992) = 0;
  *(_QWORD *)(a1 + 3536) = 0x4000000000;
  *(_BYTE *)(a1 + 3520) = 1;
  *(_QWORD *)(a1 + 3528) = a1 + 3008;
  *(_QWORD *)(a1 + 3544) = 32;
  *(_DWORD *)(a1 + 3552) = 2048;
  *(_QWORD *)(a1 + 3560) = 0;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 3584) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_DWORD *)(a1 + 3600) = 0;
  *(_QWORD *)(a1 + 3576) = v8;
  *(_QWORD *)(a1 + 3568) = off_24ED8E090;
  *(_QWORD *)(a1 + 3608) = a1;
  *(_QWORD *)(a1 + 3616) = "ScNPhaseCore.mergeProcessedTriggerInteractions";
  *(_QWORD *)(a1 + 3624) = 0;
  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v10 = "<allocation names disabled>";
  v11 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 72, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 3632) = v11;
  physx::shdfnd::MutexImpl::MutexImpl(v11);
  *(_DWORD *)(a1 + 3640) = 0;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_QWORD *)(a1 + 3680) = 0;
  *(_QWORD *)(a1 + 3688) = -3233808384;
  *(_QWORD *)(a1 + 3696) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 3648, 0x40u, 0);
  *(_QWORD *)(a1 + 3736) = 0;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_QWORD *)(a1 + 3744) = -3233808384;
  *(_QWORD *)(a1 + 3752) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 3704, 0x40u, 0);
  v12 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v13 = "<allocation names disabled>";
  v14 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24) + 16))(v12 + 24, 72, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 3760) = v14;
  physx::shdfnd::MutexImpl::MutexImpl(v14);
  v15 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v16 = "<allocation names disabled>";
  v17 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v15 + 24) + 16))(v15 + 24, 72, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 3768) = v17;
  physx::shdfnd::MutexImpl::MutexImpl(v17);
  v18 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v19 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::FilterPairManager>::getName() [T = physx::Sc:"
          ":FilterPairManager]";
  else
    v19 = "<allocation names disabled>";
  v20 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v18 + 24) + 16))(v18 + 24, 24, v19, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 651);
  *v20 = 0;
  v20[1] = 0;
  v20[2] = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 152) = v20;
  return a1;
}

void physx::Sc::NPhaseCore::~NPhaseCore(physx::Sc::NPhaseCore *this)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  void (****v10)(_QWORD);
  void (****v11)(_QWORD);
  char *v12;
  char *v13;
  uint64_t v14;
  void (***v15)(_QWORD);
  uint64_t v16;
  physx::Sc::NPhaseCore *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  physx::Sc::NPhaseCore *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  void (****v35)(_QWORD);
  void (****v36)(_QWORD);
  char *v37;
  char *v38;
  uint64_t v39;
  void (***v40)(_QWORD);
  uint64_t v41;
  physx::Sc::NPhaseCore *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  void (****v51)(_QWORD);
  void (****v52)(_QWORD);
  char *v53;
  char *v54;
  unsigned int v55;
  void (***v56)(_QWORD);
  uint64_t v57;
  physx::Sc::NPhaseCore *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  char *v64;
  int v65;
  int v66;
  physx::Sc::NPhaseCore *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  char *v73;
  int v74;
  int v75;
  physx::Sc::NPhaseCore *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;

  physx::Sc::NPhaseCore::clearContactReportActorPairs((uint64_t)this, 0);
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *(_QWORD *)v2 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 471);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 470);
  if (*((_QWORD *)this + 463))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 456))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 454);
  *((_QWORD *)this + 446) = off_24ED8BB00;
  *((_QWORD *)this + 448) = 0;
  if (*((_DWORD *)this + 887))
  {
    v84 = 0;
    v85 = 0;
    v5 = *((_QWORD *)this + 445);
    if (v5)
    {
      do
      {
        v83 = v5;
        v6 = v85;
        if ((HIDWORD(v85) & 0x7FFFFFFFu) <= v85)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::growAndPushBack((uint64_t)&v84, &v83);
        }
        else
        {
          *(_QWORD *)&v84[8 * v85] = v5;
          LODWORD(v85) = v6 + 1;
        }
        v5 = **((_QWORD **)this + 445);
        *((_QWORD *)this + 445) = v5;
      }
      while (v5);
      v7 = v84;
      v8 = v85;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>(v7, v8);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>(*((char **)this + 441), *((_DWORD *)this + 884));
    v9 = *((unsigned int *)this + 884);
    if ((_DWORD)v9)
    {
      v10 = (void (****)(_QWORD))*((_QWORD *)this + 441);
      v11 = &v10[v9];
      v12 = &v7[8 * v8];
      v13 = v7;
      do
      {
        v14 = *((unsigned int *)this + 886);
        if ((_DWORD)v14)
        {
          v15 = *v10;
          v16 = v14 << 6;
          do
          {
            if (v13 != v12 && v15 == *(void (****)(_QWORD))v13)
              v13 += 8;
            else
              (**v15)(v15);
            v15 += 8;
            v16 -= 64;
          }
          while (v16);
        }
        ++v10;
      }
      while (v10 != v11);
    }
    if (v7 && (v85 & 0x8000000000000000) == 0 && (v85 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
  }
  v17 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 441);
  v18 = *((unsigned int *)this + 884);
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    do
    {
      if (*(_QWORD *)v17)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v17 = (physx::Sc::NPhaseCore *)((char *)v17 + 8);
      v19 -= 8;
    }
    while (v19);
    v17 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 441);
  }
  v20 = *((_DWORD *)this + 885);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0)
  {
    if (v17 == (physx::Sc::NPhaseCore *)((char *)this + 3008))
    {
      *((_BYTE *)this + 3520) = 0;
    }
    else if (v17)
    {
      (*(void (**)(uint64_t, physx::Sc::NPhaseCore *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v17);
    }
  }
  if (*((_DWORD *)this + 745))
  {
    v84 = 0;
    v85 = 0;
    v21 = *((_QWORD *)this + 374);
    if (v21)
    {
      do
      {
        v83 = v21;
        v22 = v85;
        if ((HIDWORD(v85) & 0x7FFFFFFFu) <= v85)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::growAndPushBack((uint64_t)&v84, &v83);
        }
        else
        {
          *(_QWORD *)&v84[8 * v85] = v21;
          LODWORD(v85) = v22 + 1;
        }
        v21 = **((_QWORD **)this + 374);
        *((_QWORD *)this + 374) = v21;
      }
      while (v21);
      v23 = v84;
      v24 = v85;
      v25 = HIDWORD(v85);
    }
    else
    {
      v25 = 0;
      v24 = 0;
      v23 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>(v23, v24);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>(*((char **)this + 370), *((_DWORD *)this + 742));
    if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23);
  }
  v26 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 370);
  v27 = *((unsigned int *)this + 742);
  if ((_DWORD)v27)
  {
    v28 = 8 * v27;
    do
    {
      if (*(_QWORD *)v26)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v26 = (physx::Sc::NPhaseCore *)((char *)v26 + 8);
      v28 -= 8;
    }
    while (v28);
    v26 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 370);
  }
  v29 = *((_DWORD *)this + 743);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0)
  {
    if (v26 == (physx::Sc::NPhaseCore *)((char *)this + 2440))
    {
      *((_BYTE *)this + 2952) = 0;
    }
    else if (v26)
    {
      (*(void (**)(uint64_t, physx::Sc::NPhaseCore *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v26);
    }
  }
  if (*((_DWORD *)this + 603))
  {
    v84 = 0;
    v85 = 0;
    v30 = *((_QWORD *)this + 303);
    if (v30)
    {
      do
      {
        v83 = v30;
        v31 = v85;
        if ((HIDWORD(v85) & 0x7FFFFFFFu) <= v85)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::growAndPushBack((uint64_t)&v84, &v83);
        }
        else
        {
          *(_QWORD *)&v84[8 * v85] = v30;
          LODWORD(v85) = v31 + 1;
        }
        v30 = **((_QWORD **)this + 303);
        *((_QWORD *)this + 303) = v30;
      }
      while (v30);
      v32 = v84;
      v33 = v85;
    }
    else
    {
      v33 = 0;
      v32 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>(v32, v33);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>(*((char **)this + 299), *((_DWORD *)this + 600));
    v34 = *((unsigned int *)this + 600);
    if ((_DWORD)v34)
    {
      v35 = (void (****)(_QWORD))*((_QWORD *)this + 299);
      v36 = &v35[v34];
      v37 = &v32[8 * v33];
      v38 = v32;
      do
      {
        v39 = *((unsigned int *)this + 602);
        if ((_DWORD)v39)
        {
          v40 = *v35;
          v41 = 80 * v39;
          do
          {
            if (v38 != v37 && v40 == *(void (****)(_QWORD))v38)
              v38 += 8;
            else
              (**v40)(v40);
            v40 += 10;
            v41 -= 80;
          }
          while (v41);
        }
        ++v35;
      }
      while (v35 != v36);
    }
    if (v32 && (v85 & 0x8000000000000000) == 0 && (v85 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v32);
  }
  v42 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 299);
  v43 = *((unsigned int *)this + 600);
  if ((_DWORD)v43)
  {
    v44 = 8 * v43;
    do
    {
      if (*(_QWORD *)v42)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v42 = (physx::Sc::NPhaseCore *)((char *)v42 + 8);
      v44 -= 8;
    }
    while (v44);
    v42 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 299);
  }
  v45 = *((_DWORD *)this + 601);
  if ((v45 & 0x80000000) == 0 && (v45 & 0x7FFFFFFF) != 0)
  {
    if (v42 == (physx::Sc::NPhaseCore *)((char *)this + 1872))
    {
      *((_BYTE *)this + 2384) = 0;
    }
    else if (v42)
    {
      (*(void (**)(uint64_t, physx::Sc::NPhaseCore *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v42);
    }
  }
  if (*((_DWORD *)this + 461))
  {
    v84 = 0;
    v85 = 0;
    v46 = *((_QWORD *)this + 232);
    if (v46)
    {
      do
      {
        v83 = v46;
        v47 = v85;
        if ((HIDWORD(v85) & 0x7FFFFFFFu) <= v85)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::growAndPushBack((uint64_t)&v84, &v83);
        }
        else
        {
          *(_QWORD *)&v84[8 * v85] = v46;
          LODWORD(v85) = v47 + 1;
        }
        v46 = **((_QWORD **)this + 232);
        *((_QWORD *)this + 232) = v46;
      }
      while (v46);
      v48 = v84;
      v49 = v85;
    }
    else
    {
      v49 = 0;
      v48 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>(v48, v49);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>(*((char **)this + 228), *((_DWORD *)this + 458));
    v50 = *((unsigned int *)this + 458);
    if ((_DWORD)v50)
    {
      v51 = (void (****)(_QWORD))*((_QWORD *)this + 228);
      v52 = &v51[v50];
      v53 = &v48[8 * v49];
      v54 = v48;
      do
      {
        v55 = *((_DWORD *)this + 460);
        if (v55)
        {
          v56 = *v51;
          v57 = 104 * v55;
          do
          {
            if (v54 != v53 && v56 == *(void (****)(_QWORD))v54)
              v54 += 8;
            else
              (**v56)(v56);
            v56 += 13;
            v57 -= 104;
          }
          while (v57);
        }
        ++v51;
      }
      while (v51 != v52);
    }
    if (v48 && (v85 & 0x8000000000000000) == 0 && (v85 & 0x7FFFFFFF00000000) != 0)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v48);
  }
  v58 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 228);
  v59 = *((unsigned int *)this + 458);
  if ((_DWORD)v59)
  {
    v60 = 8 * v59;
    do
    {
      if (*(_QWORD *)v58)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v58 = (physx::Sc::NPhaseCore *)((char *)v58 + 8);
      v60 -= 8;
    }
    while (v60);
    v58 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 228);
  }
  v61 = *((_DWORD *)this + 459);
  if ((v61 & 0x80000000) == 0 && (v61 & 0x7FFFFFFF) != 0)
  {
    if (v58 == (physx::Sc::NPhaseCore *)((char *)this + 1304))
    {
      *((_BYTE *)this + 1816) = 0;
    }
    else if (v58)
    {
      (*(void (**)(uint64_t, physx::Sc::NPhaseCore *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v58);
    }
  }
  if (*((_DWORD *)this + 319))
  {
    v84 = 0;
    v85 = 0;
    v62 = *((_QWORD *)this + 161);
    if (v62)
    {
      do
      {
        v83 = v62;
        v63 = v85;
        if ((HIDWORD(v85) & 0x7FFFFFFFu) <= v85)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::growAndPushBack((uint64_t)&v84, &v83);
        }
        else
        {
          *(_QWORD *)&v84[8 * v85] = v62;
          LODWORD(v85) = v63 + 1;
        }
        v62 = **((_QWORD **)this + 161);
        *((_QWORD *)this + 161) = v62;
      }
      while (v62);
      v64 = v84;
      v65 = v85;
      v66 = HIDWORD(v85);
    }
    else
    {
      v66 = 0;
      v65 = 0;
      v64 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>(v64, v65);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>(*((char **)this + 157), *((_DWORD *)this + 316));
    if ((v66 & 0x80000000) == 0 && (v66 & 0x7FFFFFFF) != 0 && v64)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v64);
  }
  v67 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 157);
  v68 = *((unsigned int *)this + 316);
  if ((_DWORD)v68)
  {
    v69 = 8 * v68;
    do
    {
      if (*(_QWORD *)v67)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v67 = (physx::Sc::NPhaseCore *)((char *)v67 + 8);
      v69 -= 8;
    }
    while (v69);
    v67 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 157);
  }
  v70 = *((_DWORD *)this + 317);
  if ((v70 & 0x80000000) == 0 && (v70 & 0x7FFFFFFF) != 0)
  {
    if (v67 == (physx::Sc::NPhaseCore *)((char *)this + 736))
    {
      *((_BYTE *)this + 1248) = 0;
    }
    else if (v67)
    {
      (*(void (**)(uint64_t, physx::Sc::NPhaseCore *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v67);
    }
  }
  if (*((_DWORD *)this + 177))
  {
    v84 = 0;
    v85 = 0;
    v71 = *((_QWORD *)this + 90);
    if (v71)
    {
      do
      {
        v83 = v71;
        v72 = v85;
        if ((HIDWORD(v85) & 0x7FFFFFFFu) <= v85)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::growAndPushBack((uint64_t)&v84, &v83);
        }
        else
        {
          *(_QWORD *)&v84[8 * v85] = v71;
          LODWORD(v85) = v72 + 1;
        }
        v71 = **((_QWORD **)this + 90);
        *((_QWORD *)this + 90) = v71;
      }
      while (v71);
      v73 = v84;
      v74 = v85;
      v75 = HIDWORD(v85);
    }
    else
    {
      v75 = 0;
      v74 = 0;
      v73 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>(v73, v74);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>(*((char **)this + 86), *((_DWORD *)this + 174));
    if ((v75 & 0x80000000) == 0 && (v75 & 0x7FFFFFFF) != 0 && v73)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v73);
  }
  v76 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 86);
  v77 = *((unsigned int *)this + 174);
  if ((_DWORD)v77)
  {
    v78 = 8 * v77;
    do
    {
      if (*(_QWORD *)v76)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v76 = (physx::Sc::NPhaseCore *)((char *)v76 + 8);
      v78 -= 8;
    }
    while (v78);
    v76 = (physx::Sc::NPhaseCore *)*((_QWORD *)this + 86);
  }
  v79 = *((_DWORD *)this + 175);
  if ((v79 & 0x80000000) == 0 && (v79 & 0x7FFFFFFF) != 0)
  {
    if (v76 == (physx::Sc::NPhaseCore *)((char *)this + 168))
    {
      *((_BYTE *)this + 680) = 0;
    }
    else if (v76)
    {
      (*(void (**)(uint64_t, physx::Sc::NPhaseCore *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v76);
    }
  }
  if (*((_QWORD *)this + 12))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 8))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v80 = *((_DWORD *)this + 15);
  if ((v80 & 0x80000000) == 0 && (v80 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v81 = *((_DWORD *)this + 9);
  if ((v81 & 0x80000000) == 0 && (v81 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v82 = *((_DWORD *)this + 5);
  if ((v82 & 0x80000000) == 0 && (v82 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 1))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::Sc::NPhaseCore::clearContactReportActorPairs(uint64_t this, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = this;
  v4 = (_QWORD *)(this + 8);
  v5 = *(unsigned int *)(this + 16);
  if ((_DWORD)v5)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_QWORD *)(*v4 + 8 * i);
      v8 = *(unsigned __int16 *)(v7 + 4);
      *(_WORD *)(v7 + 4) = v8 - 1;
      if (v8 < 2)
      {
        v9 = *(_QWORD *)(v7 + 24);
        v11 = *(_DWORD *)(v9 + 16);
        v10 = *(_DWORD *)(v9 + 20);
        if (v11 >= v10)
          v12 = v10;
        else
          v12 = v11;
        if (v11 > v10)
          v10 = v11;
        v14 = __PAIR64__(v10, v12);
        this = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3 + 3648, (int *)&v14);
        v13 = *(_QWORD **)(v7 + 24);
        if (v13)
        {
          --*(_DWORD *)(v3 + 2980);
          *v13 = *(_QWORD *)(v3 + 2992);
          *(_QWORD *)(v3 + 2992) = v13;
          *(_QWORD *)(v7 + 24) = 0;
        }
        --*(_DWORD *)(v3 + 1276);
        *(_QWORD *)v7 = *(_QWORD *)(v3 + 1288);
        *(_QWORD *)(v3 + 1288) = v7;
        v5 = *(unsigned int *)(v3 + 16);
      }
      else
      {
        *(_WORD *)v7 &= ~2u;
      }
    }
  }
  if ((a2 & 1) != 0)
  {
    v14 = 0;
    physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::resize((uint64_t)v4, 0, &v14);
    return physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::recreate((uint64_t)v4, *(_DWORD *)(v3 + 16));
  }
  else
  {
    *(_DWORD *)(v3 + 16) = 0;
  }
  return this;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Sc::NPhaseCore::findInteraction(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 <= a3)
    v3 = a2;
  else
    v3 = a3;
  if (a2 <= a3)
    v4 = a3;
  else
    v4 = a2;
  if (!*(_DWORD *)(a1 + 3756))
    return 0;
  v5 = ((_DWORD)v4 << 14) & 0xFFFF0000 | (unsigned __int16)(v3 >> 2);
  v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 3728)
                       + 4
                       * ((*(_DWORD *)(a1 + 3740) - 1) & (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) ^ (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) >> 16))));
  if ((_DWORD)v7 == -1)
    return 0;
  v8 = *(_QWORD *)(a1 + 3712);
  while (1)
  {
    v9 = (uint64_t *)(v8 + 24 * v7);
    v11 = *v9;
    v10 = v9[1];
    if (v11 == v3 && v10 == v4)
      break;
    v7 = *(unsigned int *)(*(_QWORD *)(a1 + 3720) + 4 * v7);
    if ((_DWORD)v7 == -1)
      return 0;
  }
  return *(_QWORD *)(v8 + 24 * v7 + 16);
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::onOverlapCreated(physx::Sc::ElementInteractionMarker *result, uint64_t a2, unsigned int a3)
{
  physx::Sc::NPhaseCore *v3;
  uint64_t v4;
  physx::Sc::ElementSim **v5;

  if (a3)
  {
    v3 = result;
    v4 = a3;
    v5 = (physx::Sc::ElementSim **)(a2 + 8);
    do
    {
      result = physx::Sc::NPhaseCore::createRbElementInteraction(v3, *v5, *(v5 - 1), 0, 0, 0);
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::createRbElementInteraction(physx::Sc::NPhaseCore *a1, physx::Sc::ElementSim *a2, physx::Sc::ElementSim *a3, uint64_t a4, physx::Sc::ShapeInteraction *a5, physx::Sc::ElementInteractionMarker *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v16[5];
  char v17;
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = *(_QWORD *)a1;
  v13 = *((_QWORD *)a1 + 19);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 4000);
  v18[0] = *(_QWORD *)(*(_QWORD *)a1 + 4016);
  v18[1] = v14;
  v19 = *(_DWORD *)(v12 + 4008);
  v20 = *(_QWORD *)(v12 + 4024);
  v21 = v13;
  v22 = *(_QWORD *)(v12 + 4032);
  v17 = 0;
  filterRbCollisionPair((uint64_t)v18, (uint64_t)a2, (uint64_t)a3, 0xFFFFFFFFLL, (BOOL *)&v17, 0, v16);
  if ((v16[0] & 1) != 0)
    return 0;
  else
    return physx::Sc::NPhaseCore::createRbElementInteraction(a1, (uint64_t)v16, a2, a3, a4, a5, a6, v17);
}

BOOL physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x8_t a5)
{
  _QWORD *v6;
  int v7;
  unsigned __int8 v9;
  __int128 v10;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v9 = 0;
  v6 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1, &v10, &v9, a5);
  v7 = v9;
  if (!v9)
  {
    *(_OWORD *)v6 = v10;
    v6[2] = a4;
  }
  return v7 == 0;
}

_BYTE *physx::Sc::NPhaseCore::onOverlapRemoved(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  _BYTE *result;

  if (a5)
    return physx::Sc::NPhaseCore::releaseElementPair(a1, a5, 4, a4, 1, a6, a7);
  result = (_BYTE *)physx::Sc::NPhaseCore::findInteraction(a1, a3, a2);
  a5 = (uint64_t)result;
  if (result)
    return physx::Sc::NPhaseCore::releaseElementPair(a1, a5, 4, a4, 1, a6, a7);
  return result;
}

_BYTE *physx::Sc::NPhaseCore::releaseElementPair(uint64_t a1, uint64_t a2, char a3, int a4, int a5, uint64_t a6, char a7)
{
  _BYTE *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __n128 v28[2];
  int v29;
  char v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;

  result = physx::Sc::Interaction::setClean((_BYTE *)(a2 + 8), a5);
  if ((*(_BYTE *)(a2 + 37) & 0x10) != 0)
  {
    v14 = *(unsigned int *)(a2 + 56);
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a2 + 40);
    v17 = *(_QWORD *)(a2 + 48);
    v33 = 0;
    getFilterInfo_ShapeSim((int *)&v33 + 1, v28, *(_QWORD *)(v16 + 8), *(__n128 **)(v16 + 56));
    getFilterInfo_ShapeSim((int *)&v33, &v34, *(_QWORD *)(v17 + 8), *(__n128 **)(v17 + 56));
    v18 = *(_QWORD *)(v15 + 4024);
    v31 = v34;
    v32 = v28[0];
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128 *, _QWORD, __n128 *, _QWORD))(*(_QWORD *)v18 + 8))(v18, v14, HIDWORD(v33), &v32, v33, &v31, a3 & 1);
    v19 = *(_QWORD **)(a1 + 152);
    *(_QWORD *)(*v19 + 8 * v14) = v19[2];
    v19[2] = v14;
  }
  v20 = *(unsigned __int8 *)(a2 + 36);
  if (*(_BYTE *)(a2 + 36))
  {
    if (v20 == 2)
    {
      result = (_BYTE *)(**(uint64_t (***)(uint64_t))a2)(a2);
      --*(_DWORD *)(a1 + 3548);
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 3560);
      *(_QWORD *)(a1 + 3560) = a2;
    }
    else if (v20 == 1)
    {
      v30 = 0;
      v34.n128_u16[4] = -1;
      v34.n128_u64[0] = -1;
      if (physx::Sc::findTriggerContacts(a2, 1, a3 & 1, (uint64_t)v28, (uint64_t)&v34, *(_QWORD *)(*(_QWORD *)a1 + 4256) + 16))
      {
        v21 = *(_QWORD *)a1;
        v22 = *(_DWORD *)(*(_QWORD *)a1 + 2136);
        if ((*(_DWORD *)(*(_QWORD *)a1 + 2140) & 0x7FFFFFFFu) <= v22)
        {
          physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::growAndPushBack(v21 + 2128, (__int128 *)v28);
        }
        else
        {
          v23 = *(_QWORD *)(v21 + 2128) + 40 * v22;
          v24 = v28[1];
          *(__n128 *)v23 = v28[0];
          *(__n128 *)(v23 + 16) = v24;
          *(_DWORD *)(v23 + 32) = v29;
          *(_BYTE *)(v23 + 36) = v30;
          ++*(_DWORD *)(v21 + 2136);
        }
        v25 = *(_QWORD *)(*(_QWORD *)a1 + 2144);
        v26 = *(_DWORD *)(v25 + 8);
        if ((*(_DWORD *)(v25 + 12) & 0x7FFFFFFFu) <= v26)
        {
          physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::growAndPushBack(v25, (uint64_t *)&v34);
        }
        else
        {
          v27 = *(_QWORD *)v25 + 12 * v26;
          *(_QWORD *)v27 = v34.n128_u64[0];
          *(_DWORD *)(v27 + 8) = v34.n128_u32[2];
          ++*(_DWORD *)(v25 + 8);
        }
      }
      result = (_BYTE *)(**(uint64_t (***)(uint64_t))a2)(a2);
      --*(_DWORD *)(a1 + 2412);
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 2424);
      *(_QWORD *)(a1 + 2424) = a2;
    }
  }
  else
  {
    if ((a3 & 3) != 0)
      physx::Sc::NPhaseCore::lostTouchReports(a1, (physx::Sc::ShapeInteraction *)a2, a3, a4, a6, a7);
    result = (_BYTE *)(**(uint64_t (***)(uint64_t))a2)(a2);
    --*(_DWORD *)(a1 + 1844);
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 1856);
    *(_QWORD *)(a1 + 1856) = a2;
  }
  return result;
}

_BYTE *physx::Sc::NPhaseCore::onVolumeRemoved(_BYTE *result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned int *)(v5 + 52);
  if ((_DWORD)v6)
  {
    v10 = result;
    v11 = a3 | 3;
    v12 = *(_QWORD *)(v5 + 40);
    v13 = 8 * v6;
    while (1)
    {
      v14 = *(_QWORD *)(v12 - 8 + v13);
      if ((*(_BYTE *)(v14 + 29) & 1) != 0 && (*(_QWORD *)(v14 + 32) == a2 || *(_QWORD *)(v14 + 40) == a2))
        break;
      v13 -= 8;
      if (!v13)
        return result;
    }
    result = physx::Sc::NPhaseCore::releaseElementPair((uint64_t)result, v14 - 8, a3 | 3u, 0, 1, a4, a5);
    if (v13 != 8)
    {
      for (i = v13 - 16; ; i -= 8)
      {
        v16 = *(_QWORD *)(v12 + i);
        if ((*(_BYTE *)(v16 + 29) & 1) != 0 && (*(_QWORD *)(v16 + 32) == a2 || *(_QWORD *)(v16 + 40) == a2))
        {
          result = physx::Sc::NPhaseCore::releaseElementPair((uint64_t)v10, v16 - 8, v11, 0, 1, a4, a5);
          if (!i)
            return result;
        }
        else if (!i)
        {
          return result;
        }
      }
    }
  }
  return result;
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::createRbElementInteraction(physx::Sc::NPhaseCore *a1, uint64_t a2, physx::Sc::ElementSim *a3, physx::Sc::ElementSim *a4, uint64_t a5, physx::Sc::ShapeInteraction *a6, physx::Sc::ElementInteractionMarker *a7, char a8)
{
  physx::Sc::ElementInteractionMarker *result;
  uint64_t v11;
  __int16 v12;
  unsigned __int16 v13;

  if ((*(_WORD *)a2 & 2) != 0)
  {
    result = physx::Sc::NPhaseCore::createElementInteractionMarker(a1, a3, a4, a7);
  }
  else if ((a8 & 1) != 0)
  {
    v12 = *(_WORD *)(a2 + 2);
    result = physx::Sc::NPhaseCore::createTriggerInteraction((uint64_t)a1, a3, a4, &v12);
  }
  else
  {
    v13 = *(_WORD *)(a2 + 2);
    result = physx::Sc::NPhaseCore::createShapeInteraction((uint64_t)a1, (uint64_t)a3, (uint64_t)a4, &v13, a5, a6);
  }
  v11 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v11 != -1)
  {
    *((_BYTE *)result + 37) |= 0x10u;
    *(_QWORD *)(**((_QWORD **)a1 + 19) + 8 * v11) = result;
    *((_DWORD *)result + 14) = v11;
  }
  return result;
}

physx::Sc::ShapeInteraction *physx::Sc::NPhaseCore::createShapeInteraction(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, physx::Sc::ShapeInteraction *this)
{
  physx::Sc::ShapeInteraction *v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 v22;

  v6 = this;
  v9 = a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a3 + 8);
  v13 = *(_QWORD *)(v11 + 80);
  v14 = *(unsigned __int8 *)(v13 + 13);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 80) + 13);
  if (v14 == 2 && v15 == 2)
  {
    v17 = *(_BYTE *)(*(_QWORD *)(v11 + 136) + 159) != 0;
  }
  else
  {
    if (!*(_BYTE *)(v13 + 13))
      goto LABEL_21;
    v17 = 0;
  }
  v18 = v15 == 1 && v14 == 2;
  if (v18
    || v17
    || (v14 == 1 ? (v19 = v15 == 1) : (v19 = 0),
        v19 && (*(_BYTE *)(v13 + 44) & 1) != 0 || v14 == v15 && *(_DWORD *)(v11 + 88) < *(_DWORD *)(v12 + 88)))
  {
LABEL_21:
    v20 = a3;
    if (this)
      goto LABEL_27;
    goto LABEL_24;
  }
  v20 = a2;
  v9 = a3;
  if (this)
    goto LABEL_27;
LABEL_24:
  v6 = *(physx::Sc::ShapeInteraction **)(a1 + 1856);
  if (!v6)
  {
    physx::shdfnd::PoolBase<physx::Sc::ShapeInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::allocateSlab(a1 + 1296);
    v6 = *(physx::Sc::ShapeInteraction **)(a1 + 1856);
  }
  *(_QWORD *)(a1 + 1856) = *(_QWORD *)v6;
  ++*(_DWORD *)(a1 + 1844);
LABEL_27:
  v22 = *a4;
  return physx::Sc::ShapeInteraction::ShapeInteraction(v6, v20, v9, &v22, a5);
}

physx::Sc::TriggerInteraction *physx::Sc::NPhaseCore::createTriggerInteraction(uint64_t a1, physx::Sc::ShapeSim *a2, physx::Sc::ShapeSim *a3, _WORD *a4)
{
  char v8;
  physx::Sc::TriggerInteraction *v9;
  physx::Sc::ShapeSim *v10;
  physx::Sc::ShapeSim *v11;
  physx::Sc::TriggerInteraction *result;

  v8 = *(_BYTE *)(*((_QWORD *)a3 + 7) + 64);
  v9 = *(physx::Sc::TriggerInteraction **)(a1 + 2424);
  if (!v9)
  {
    physx::shdfnd::PoolBase<physx::Sc::TriggerInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::allocateSlab(a1 + 1864);
    v9 = *(physx::Sc::TriggerInteraction **)(a1 + 2424);
  }
  if ((v8 & 4) != 0)
    v10 = a3;
  else
    v10 = a2;
  if ((v8 & 4) != 0)
    v11 = a2;
  else
    v11 = a3;
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)v9;
  ++*(_DWORD *)(a1 + 2412);
  result = physx::Sc::TriggerInteraction::TriggerInteraction(v9, v10, v11);
  *((_WORD *)result + 38) = *((_WORD *)result + 38) & 0xFFE0 | *a4 & 0x14;
  return result;
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::createElementInteractionMarker(physx::Sc::NPhaseCore *this, physx::Sc::ElementSim *a2, physx::Sc::ElementSim *a3, physx::Sc::ElementInteractionMarker *a4)
{
  physx::Sc::ElementInteractionMarker *v7;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a4;
  if (!a4)
  {
    v7 = (physx::Sc::ElementInteractionMarker *)*((_QWORD *)this + 445);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Sc::ElementInteractionMarker,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::allocateSlab((uint64_t)this + 3000);
      v7 = (physx::Sc::ElementInteractionMarker *)*((_QWORD *)this + 445);
    }
    *((_QWORD *)this + 445) = *(_QWORD *)v7;
    ++*((_DWORD *)this + 887);
  }
  v9 = *((_QWORD *)a3 + 1);
  *((_QWORD *)v7 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)v7 + 2) = v9;
  *((_QWORD *)v7 + 3) = -1;
  *((_DWORD *)v7 + 8) = -1;
  *((_WORD *)v7 + 18) = 1282;
  *((_BYTE *)v7 + 38) = 0;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = a3;
  *((_DWORD *)v7 + 14) = -1;
  *(_QWORD *)v7 = off_24ED8E1C8;
  if (!a4)
  {
    physx::Sc::activateInteraction((physx::Sc::ElementInteractionMarker *)((char *)v7 + 8), 0, a3, (int8x8_t)-1);
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)v7 + 1), (physx::Sc::ElementInteractionMarker *)((char *)v7 + 8));
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)v7 + 2), (physx::Sc::ElementInteractionMarker *)((char *)v7 + 8));
    physx::Sc::Scene::registerInteraction(*(_QWORD *)(*((_QWORD *)v7 + 1) + 72), (physx::Sc::ElementInteractionMarker *)((char *)v7 + 8), 0);
    v11 = *((_QWORD *)v7 + 5);
    v12 = *((_QWORD *)v7 + 6);
    if (v11 <= v12)
      v13 = *((_QWORD *)v7 + 5);
    else
      v13 = *((_QWORD *)v7 + 6);
    if (v11 <= v12)
      v14 = *((_QWORD *)v7 + 6);
    else
      v14 = *((_QWORD *)v7 + 5);
    physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 72) + 3992) + 3704), v13, v14, (uint64_t)v7, v10);
  }
  return v7;
}

uint64_t filterRbCollisionPair@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X4>, char a6@<W5>, unsigned __int16 *a7@<X8>)
{
  char v7;
  uint64_t v11;
  uint64_t v13;
  int v14;
  const physx::Sc::BodySim *v15;
  const physx::Sc::ActorSim *v16;
  int v17;
  const physx::Sc::BodySim *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  int v29;
  uint64_t *v30;
  const physx::Sc::ActorSim **v31;
  uint64_t v32;
  unsigned __int16 *v34;

  v7 = a6;
  v11 = result;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 80) + 13);
  if ((v14 - 1) >= 2)
    v15 = 0;
  else
    v15 = *(const physx::Sc::BodySim **)(a2 + 8);
  v16 = *(const physx::Sc::ActorSim **)(a3 + 8);
  v17 = *(unsigned __int8 *)(*((_QWORD *)v16 + 10) + 13);
  if ((v17 - 1) >= 2)
    v18 = 0;
  else
    v18 = *(const physx::Sc::BodySim **)(a3 + 8);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 64);
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + 64);
  *a5 = ((v20 | v19) & 4) != 0;
  if (((v20 | v19) & 4) != 0)
  {
    if ((v19 & v20 & 4) != 0)
    {
LABEL_12:
      if ((_DWORD)a4 != -1)
      {
        v23 = *(_QWORD **)(v11 + 32);
        *(_QWORD *)(*v23 + 8 * a4) = v23[2];
        v23[2] = a4;
      }
      v24 = 0xFFFFFFFF00000001;
      goto LABEL_29;
    }
    return (uint64_t)physx::Sc::filterRbCollisionPairSecondStage(v11, a2, a3, (uint64_t)v15, (uint64_t)v18, a4, v7, a7);
  }
  if (!v15)
  {
    v21 = 0;
    if (v18)
      goto LABEL_10;
LABEL_16:
    v22 = 0;
    goto LABEL_17;
  }
  v21 = *(_BYTE *)(*((_QWORD *)v15 + 10) + 44) & 1;
  if (!v18)
    goto LABEL_16;
LABEL_10:
  v22 = *(_BYTE *)(*((_QWORD *)v18 + 10) + 44) & 1;
LABEL_17:
  if ((v21 | v22) == 1)
  {
    if (*(_DWORD *)(result + 44))
    {
      if (!v15 || v18 == 0)
        goto LABEL_26;
    }
    if (!*(_DWORD *)(result + 40))
      v22 = 0;
    if ((v21 & v22) == 1)
    {
LABEL_26:
      if ((_DWORD)a4 != -1)
      {
        v26 = *(_QWORD **)(result + 32);
        *(_QWORD *)(*v26 + 8 * a4) = v26[2];
        v26[2] = a4;
      }
      v24 = 0xFFFFFFFF00000002;
LABEL_29:
      *(_QWORD *)a7 = v24;
      return result;
    }
  }
  v34 = a7;
  if (v15)
  {
    result = filterJointedBodies(v15, v16);
    if ((result & 1) == 0)
    {
LABEL_38:
      v28 = v14 == 2 && v17 == 2;
      a7 = v34;
      v7 = a6;
      if (v28)
      {
        v29 = *(_DWORD *)(v13 + 52);
        if (v29)
        {
          v30 = *(uint64_t **)(v13 + 40);
          while (1)
          {
            v32 = *v30++;
            v31 = (const physx::Sc::ActorSim **)v32;
            if (*(_BYTE *)(v32 + 28) == 5 && (*v31 == v16 || v31[1] == v16))
              break;
            if (!--v29)
              return (uint64_t)physx::Sc::filterRbCollisionPairSecondStage(v11, a2, a3, (uint64_t)v15, (uint64_t)v18, a4, v7, a7);
          }
          goto LABEL_12;
        }
      }
      return (uint64_t)physx::Sc::filterRbCollisionPairSecondStage(v11, a2, a3, (uint64_t)v15, (uint64_t)v18, a4, v7, a7);
    }
  }
  else
  {
    if (!v18)
      goto LABEL_38;
    result = filterJointedBodies(v18, (const physx::Sc::ActorSim *)v13);
    if (!(_DWORD)result)
      goto LABEL_38;
  }
  if ((_DWORD)a4 != -1)
  {
    v27 = *(_QWORD **)(v11 + 32);
    *(_QWORD *)(*v27 + 8 * a4) = v27[2];
    v27[2] = a4;
  }
  *(_QWORD *)v34 = 0xFFFFFFFF00000002;
  return result;
}

int32x2_t *physx::Sc::NPhaseCore::managerNewTouch(int32x2_t *this, int32x2_t **a2, int8x8_t a3)
{
  if (!a2[9])
  {
    this = physx::Sc::NPhaseCore::findActorPair(this, a2[5], a2[6], (_DWORD)a2[8] & 0x1DC, a3);
    ++this->i16[2];
    a2[9] = this;
  }
  return this;
}

int32x2_t *physx::Sc::NPhaseCore::findActorPair(int32x2_t *this, int32x2_t *a2, int32x2_t *a3, int a4, int8x8_t a5)
{
  unsigned int v9;
  unsigned int v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int32x2_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t *result;
  int v32;
  _QWORD **v33;
  int32x2_t v34;
  int32x2_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int32x2_t **v46;
  unint64_t v47;

  v9 = *(_DWORD *)(*(_QWORD *)&a2[1] + 88);
  v10 = *(_DWORD *)(*(_QWORD *)&a3[1] + 88);
  if (v9 <= v10)
    v11 = a2[1];
  else
    v11 = a3[1];
  if (v9 <= v10)
    v12 = a3[1];
  else
    v12 = a2[1];
  v13 = *(unsigned int *)(*(_QWORD *)&v11 + 88);
  v14 = *(unsigned int *)(*(_QWORD *)&v12 + 88);
  v15 = this[460].u32[1];
  if (v15)
  {
    v16 = 9
        * ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
          + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) ^ ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
                                                                                              + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) >> 10));
    v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
    v18 = (v17 ^ HIWORD(v17)) & (v15 - 1);
    v19 = *(unsigned int *)(*(_QWORD *)&this[459] + 4 * v18);
    if ((_DWORD)v19 != -1)
    {
      while (1)
      {
        v20 = *(_QWORD *)&this[457] + 16 * v19;
        if (*(_DWORD *)v20 == (_DWORD)v13 && *(_DWORD *)(v20 + 4) == (_DWORD)v14)
          break;
        v19 = *(unsigned int *)(*(_QWORD *)&this[458] + 4 * v19);
        if ((_DWORD)v19 == -1)
          goto LABEL_16;
      }
      v43 = *(_QWORD *)(v20 + 8);
      v28 = v20 + 8;
      result = (int32x2_t *)v43;
      if (v43)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_16:
  if (this[462].i32[1] == this[460].i32[0])
  {
    if (v15)
      v22 = 2 * v15;
    else
      v22 = 16;
    if (v15 < v22)
    {
      physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&this[456], v22, a5);
      v15 = this[460].u32[1];
    }
    v23 = 9
        * ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
          + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) ^ ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
                                                                                              + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) >> 10));
    v18 = (v15 - 1) & (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6))
                                                                            + ~((v23 ^ (v23 >> 6)) << 11)) >> 16));
  }
  v24 = this[461].u32[1];
  this[461].i32[1] = v24 + 1;
  v25 = this[459];
  *(_DWORD *)(*(_QWORD *)&this[458] + 4 * v24) = *(_DWORD *)(*(_QWORD *)&v25 + 4 * v18);
  *(_DWORD *)(*(_QWORD *)&v25 + 4 * v18) = v24;
  this[462] = vadd_s32(this[462], (int32x2_t)0x100000001);
  v26 = this[457];
  v27 = *(_QWORD *)&v26 + 16 * v24;
  *(_QWORD *)(v27 + 8) = 0;
  v28 = v27 + 8;
  *(_QWORD *)(*(_QWORD *)&v26 + 16 * v24) = v13 | (v14 << 32);
LABEL_24:
  if (!a4)
  {
    result = (int32x2_t *)this[90];
    if (!result)
    {
      v39 = this[89].u32[0];
      if ((_DWORD)v39)
      {
        v40 = physx::shdfnd::Foundation::mInstance;
        v41 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
            ? "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::getName() [T = physx::Sc::ActorPair]"
            : "<allocation names disabled>";
        v42 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v40 + 24) + 16))(v40 + 24, v39, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      }
      else
      {
        v42 = 0;
      }
      v47 = v42;
      v44 = this[87].u32[0];
      if ((this[87].i32[1] & 0x7FFFFFFFu) <= v44)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>>::growAndPushBack((uint64_t)&this[21], &v47);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&this[86] + 8 * v44) = v42;
        this[87].i32[0] = v44 + 1;
      }
      v45 = v42 + 8 * this[88].u32[0] - 8;
      result = (int32x2_t *)this[90];
      if (v45 >= v42)
      {
        v46 = (int32x2_t **)(v42 + 8 * this[88].u32[0] - 8);
        do
        {
          *v46-- = result;
          result = (int32x2_t *)v45;
          v45 = (unint64_t)v46;
        }
        while ((unint64_t)v46 >= v42);
        result = (int32x2_t *)(v46 + 1);
      }
    }
    this[90] = *result;
    ++this[88].i32[1];
    result->i32[0] = 0;
    result->i16[2] = 0;
    goto LABEL_57;
  }
  v29 = a2[1];
  v30 = a3[1];
  result = (int32x2_t *)this[161];
  if (!result)
  {
    physx::shdfnd::PoolBase<physx::Sc::ActorPairReport,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::allocateSlab((uint64_t)&this[91]);
    result = (int32x2_t *)this[161];
  }
  this[161] = *result;
  ++this[159].i32[1];
  result->i16[2] = 0;
  result[1] = v29;
  result[2] = v30;
  result[3] = 0;
  result->i32[0] = 1;
  *(_QWORD *)v28 = result;
LABEL_28:
  if (a4 && (result->i16[0] & 1) == 0)
  {
    v32 = *(_DWORD *)(*(_QWORD *)&v11 + 52);
    v33 = *(_QWORD ***)(*(_QWORD *)&v11 + 40);
    v34 = a2[1];
    v35 = a3[1];
    result = (int32x2_t *)this[161];
    if (!result)
    {
      physx::shdfnd::PoolBase<physx::Sc::ActorPairReport,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::allocateSlab((uint64_t)&this[91]);
      result = (int32x2_t *)this[161];
    }
    this[161] = *result;
    ++this[159].i32[1];
    result->i16[2] = 0;
    result[1] = v34;
    result[2] = v35;
    result[3] = 0;
    result->i32[0] = 1;
    v36 = *(_QWORD *)v28;
    result->i16[1] = *(_WORD *)(*(_QWORD *)v28 + 2);
    for (result->i16[2] = *(_WORD *)(v36 + 4); v32; --v32)
    {
      v38 = *v33++;
      v37 = v38;
      if ((*v38 == *(_QWORD *)&v12 || v37[1] == *(_QWORD *)&v12) && !*((_BYTE *)v37 + 28))
      {
        if (v37[8])
          v37[8] = result;
      }
    }
LABEL_57:
    *(_QWORD *)v28 = result;
  }
  return result;
}

uint64_t physx::Sc::NPhaseCore::refilterInteraction(int32x2_t *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, char a6, int8x8_t a7)
{
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int32x2_t v17;
  uint64_t v18;
  __n128 *v19;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v30;
  int32x2_t v32;
  uint64_t v33;
  int32x2_t v34;
  int32x2_t v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  __int16 v40;
  _WORD *v41;
  int32x2_t *ActorPair;
  int v43;
  unsigned __int16 v44;
  physx::Sc::ShapeSim *v45;
  physx::Sc::ShapeSim *v46;
  uint64_t v47;
  uint64_t v48;
  physx::Sc::ShapeInteraction *ShapeInteraction;
  int v50;
  uint64_t v51;
  int32x2_t v52;
  unsigned int v53;
  uint64_t v55;
  __n128 v57;
  int v58;
  uint64_t v59;
  int32x2_t v60;
  uint64_t v61;
  __n128 v62;
  __n128 v63;
  unsigned int v64;
  unsigned int v65;
  __n128 v66;

  v7 = *(unsigned __int8 *)(a2 + 36);
  if (v7 > 2)
    return 0;
  v8 = a6;
  v9 = a5;
  v10 = a2;
  v11 = a1;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  if (a3)
  {
    v14 = *a3;
    v15 = a3[1];
    v16 = *((unsigned int *)a3 + 1);
    if ((~v14 & 0xD) == 0)
    {
      v17 = *a1;
      v65 = 0;
      v64 = 0;
      v18 = *(_QWORD *)(v12 + 8);
      v19 = *(__n128 **)(v12 + 56);
      v55 = v12;
      v23 = v15;
      getFilterInfo_ShapeSim((int *)&v65, &v57, v18, v19);
      getFilterInfo_ShapeSim((int *)&v64, &v66, *(_QWORD *)(v13 + 8), *(__n128 **)(v13 + 56));
      v24 = *(_QWORD *)(*(_QWORD *)&v17 + 4024);
      v62 = v66;
      v63 = v57;
      (*(void (**)(uint64_t, uint64_t, _QWORD, __n128 *, _QWORD, __n128 *, _QWORD))(*(_QWORD *)v24 + 8))(v24, v16, v65, &v63, v64, &v62, 0);
      v15 = v23;
      v8 = a6;
      v9 = a5;
      v11 = a1;
      v12 = v55;
      v25 = (_QWORD *)v11[19];
      *(_QWORD *)(*v25 + 8 * v16) = v25[2];
      v25[2] = v16;
      LODWORD(v16) = -1;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 80) + 13) - 1 >= 2)
      v26 = 0;
    else
      v26 = *(_QWORD *)(v12 + 8);
    v27 = *(_QWORD *)(v13 + 8);
    if (*(unsigned __int8 *)(*(_QWORD *)(v27 + 80) + 13) - 1 >= 2)
      v27 = 0;
    if ((v14 & 3) == 0 && v26)
    {
      v28 = *(_BYTE *)(*(_QWORD *)(v26 + 80) + 44) & 1;
      if (v27 && v28 != 0)
      {
        v30 = *(_BYTE *)(*(_QWORD *)(v27 + 80) + 44) & 1;
        if ((v15 & 1) != 0 && v30 != 0)
          v15 &= 0xFFFEu;
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 37) & 0x10) != 0)
    {
      v16 = *(unsigned int *)(a2 + 56);
      v32 = *a1;
      v65 = 0;
      v64 = 0;
      getFilterInfo_ShapeSim((int *)&v65, &v57, *(_QWORD *)(v12 + 8), *(__n128 **)(v12 + 56));
      getFilterInfo_ShapeSim((int *)&v64, &v66, *(_QWORD *)(v13 + 8), *(__n128 **)(v13 + 56));
      v33 = *(_QWORD *)(*(_QWORD *)&v32 + 4024);
      v62 = v66;
      v63 = v57;
      (*(void (**)(uint64_t, uint64_t, _QWORD, __n128 *, _QWORD, __n128 *, _QWORD))(*(_QWORD *)v33 + 8))(v33, v16, v65, &v63, v64, &v62, 0);
    }
    else
    {
      v16 = 0xFFFFFFFFLL;
    }
    v34 = *v11;
    v35 = v11[19];
    v36 = *(_QWORD *)(*(_QWORD *)v11 + 4000);
    v57.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v11 + 4016);
    v57.n128_u64[1] = v36;
    v58 = *(_DWORD *)(*(_QWORD *)&v34 + 4008);
    v59 = *(_QWORD *)(*(_QWORD *)&v34 + 4024);
    v60 = v35;
    v61 = *(_QWORD *)(*(_QWORD *)&v34 + 4032);
    filterRbCollisionPair((uint64_t)&v57, v12, v13, v16, (BOOL *)&v63, 1, (unsigned __int16 *)&v66);
    LOBYTE(v14) = v66.n128_u8[0];
    v15 = v66.n128_u16[1];
    LODWORD(v16) = v66.n128_u32[1];
  }
  if ((*(_BYTE *)(v10 + 37) & 0x10) != 0 && (v14 & 0xC) != 0xC)
  {
    *(_BYTE *)(v10 + 37) &= ~0x10u;
    if ((_DWORD)v16 != -1)
    {
      v37 = (_QWORD *)v11[19];
      *(_QWORD *)(*v37 + 8 * v16) = v37[2];
      v37[2] = v16;
    }
    LODWORD(v16) = -1;
  }
  if ((v14 & 1) != 0)
  {
    v38 = 6;
  }
  else if ((v14 & 2) != 0)
  {
    v38 = 2;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(v12 + 56) + 64) & 4) != 0)
  {
    v38 = 1;
  }
  else
  {
    v38 = (*(unsigned __int8 *)(*(_QWORD *)(v13 + 56) + 64) >> 2) & 1;
  }
  if (v38 == *(unsigned __int8 *)(v10 + 36))
  {
    if (v7 == 1)
    {
      *(_WORD *)(v10 + 76) = *(_WORD *)(v10 + 76) & 0xFFE0 | v15 & 0x14;
    }
    else if (!v7)
    {
      v39 = *(_DWORD *)(v10 + 64);
      if ((v39 & 0x7FFF) != v15)
      {
        v40 = v15;
        if ((v15 & 0x1DC) != 0 && (v39 & 0x1DC) == 0)
        {
          v41 = *(_WORD **)(v10 + 72);
          if (!v41 || (*v41 & 1) == 0)
          {
            ActorPair = physx::Sc::NPhaseCore::findActorPair(v11, (int32x2_t *)v12, (int32x2_t *)v13, 1, a7);
            if (!*(_QWORD *)(v10 + 72))
            {
              ++ActorPair->i16[2];
              *(_QWORD *)(v10 + 72) = ActorPair;
            }
          }
        }
        LOWORD(v15) = v40;
        if ((v40 & 8) == 0)
        {
          v43 = *(_DWORD *)(v10 + 64);
          if ((v43 & 0x600000) != 0)
          {
            if ((v43 & 0x200000) != 0)
            {
              physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs((uint64_t)v11, v10);
              LOWORD(v15) = v40;
            }
            else
            {
              *(_DWORD *)(v10 + 64) = v43 & 0xFFBFFFFF;
            }
          }
        }
        if ((v15 & 0x1C0) != 0)
        {
          if (*(_DWORD *)(v10 + 80) == -1 && (*(_BYTE *)(v10 + 37) & 0x20) != 0 && (*(_BYTE *)(v10 + 65) & 0x80) != 0)
          {
            physx::Sc::NPhaseCore::addToForceThresholdContactEventPairs((uint64_t)v11, v10);
            LOWORD(v15) = v40;
          }
        }
        else if ((v39 & 0x1C0) != 0)
        {
          v50 = *(_DWORD *)(v10 + 64);
          *(_DWORD *)(v10 + 64) = v50 & 0xFFE7FFFF;
          if ((v50 & 0x800000) != 0)
          {
            v51 = *(unsigned int *)(v10 + 80);
            *(_DWORD *)(v10 + 64) = v50 & 0xFF67FFFF;
            *(_DWORD *)(v10 + 80) = -1;
            v52 = v11[6];
            v53 = v11[7].i32[0] - 1;
            v11[7].i32[0] = v53;
            *(_QWORD *)(*(_QWORD *)&v52 + 8 * v51) = *(_QWORD *)(*(_QWORD *)&v52 + 8 * v53);
            if (v51 < v53)
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v11[6] + 8 * v51) + 80) = v51;
          }
        }
      }
      *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 64) & 0xFFFF8000 | v15 & 0x7FFF;
    }
    return v10;
  }
  v44 = v15;
  v46 = *(physx::Sc::ShapeSim **)(v10 + 40);
  v45 = *(physx::Sc::ShapeSim **)(v10 + 48);
  v47 = *(_QWORD *)(v10 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v47 + 80) + 13) == 1 && *(_DWORD *)(v47 + 184) >= 0xFFFFFFFE)
    physx::Sc::BodySim::internalWakeUp((physx::Sc::BodySim *)v47, 0.4);
  v48 = *(_QWORD *)(v10 + 16);
  if (*(_BYTE *)(*(_QWORD *)(v48 + 80) + 13) == 1 && *(_DWORD *)(v48 + 184) >= 0xFFFFFFFE)
    physx::Sc::BodySim::internalWakeUp((physx::Sc::BodySim *)v48, 0.4);
  *(_BYTE *)(v10 + 37) &= ~0x10u;
  physx::Sc::NPhaseCore::releaseElementPair((uint64_t)v11, v10, 5, 0, a4, v9, v8);
  switch(v38)
  {
    case 0:
      v57.n128_u16[0] = v44;
      ShapeInteraction = physx::Sc::NPhaseCore::createShapeInteraction((uint64_t)v11, (uint64_t)v46, (uint64_t)v45, (unsigned __int16 *)&v57, 0, 0);
      goto LABEL_65;
    case 1:
      v57.n128_u16[0] = v44;
      ShapeInteraction = physx::Sc::NPhaseCore::createTriggerInteraction((uint64_t)v11, v46, v45, &v57);
      goto LABEL_65;
    case 2:
      ShapeInteraction = physx::Sc::NPhaseCore::createElementInteractionMarker((physx::Sc::NPhaseCore *)v11, v46, v45, 0);
LABEL_65:
      v10 = (uint64_t)ShapeInteraction;
      goto LABEL_67;
  }
  v10 = 0;
LABEL_67:
  if ((_DWORD)v16 != -1)
  {
    *(_BYTE *)(v10 + 37) |= 0x10u;
    *(_QWORD *)(**(_QWORD **)&v11[19] + 8 * v16) = v10;
    *(_DWORD *)(v10 + 56) = v16;
  }
  return v10;
}

uint64_t physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v2 = *(unsigned int *)(a2 + 80);
  v3 = *(_DWORD *)(result + 40);
  if (v2 >= v3)
  {
    v5 = *(_DWORD *)(result + 32);
  }
  else
  {
    v4 = v3 - 1;
    v5 = *(_DWORD *)(result + 32);
    if ((_DWORD)v2 != v3 - 1 && v3 < v5)
    {
      v7 = *(_QWORD *)(result + 24);
      v8 = *(_QWORD *)(v7 + 8 * v4);
      *(_QWORD *)(v7 + 8 * v2) = v8;
      *(_DWORD *)(v8 + 80) = v2;
      LODWORD(v2) = v4;
    }
    *(_DWORD *)(result + 40) = v4;
  }
  *(_DWORD *)(a2 + 64) &= ~0x200000u;
  *(_DWORD *)(a2 + 80) = -1;
  v9 = *(_QWORD *)(result + 24);
  v10 = v5 - 1;
  *(_DWORD *)(result + 32) = v10;
  *(_QWORD *)(v9 + 8 * v2) = *(_QWORD *)(v9 + 8 * v10);
  if (v2 < v10)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * v2) + 80) = v2;
  return result;
}

uint64_t physx::Sc::NPhaseCore::addToForceThresholdContactEventPairs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v4 = a2;
  *(_DWORD *)(a2 + 64) |= 0x800000u;
  v2 = *(unsigned int *)(result + 56);
  v3 = *(_DWORD *)(result + 60);
  *(_DWORD *)(a2 + 80) = v2;
  if ((v3 & 0x7FFFFFFFu) <= v2)
    return physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(result + 48, &v4);
  *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v2) = a2;
  *(_DWORD *)(result + 56) = v2 + 1;
  return result;
}

uint64_t *physx::Sc::NPhaseCore::processTriggerInteractions(uint64_t *this, physx::PxBaseTask *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  physx::PxBaseTask *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;

  v2 = *this;
  v3 = *(_DWORD *)(*this + 124);
  if (v3)
  {
    v5 = (uint64_t)this;
    v6 = *(_QWORD *)(v2 + 88);
    v7 = physx::PxcScratchAllocator::alloc(*(pthread_mutex_t ***)(v2 + 1840), 88 * (v3 >> 6) + 8 * v3 + 88, 1);
    if (!v7)
    {
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 8))(physx::shdfnd::Foundation::mInstance);
      return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)v20 + 16))(v20, 16, "Temporary memory for trigger pair processing could not be allocated. Trigger overlap tests will not take place.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 1473);
    }
    v8 = v7;
    v9 = 8 * v3;
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 7456) + 8))(*(_QWORD *)(v2 + 7456));
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v13 = v3 > 0x40 && v11 > 1;
    *(_QWORD *)(v5 + 3624) = v8;
    v23 = v13;
    if (v13)
    {
      *(_DWORD *)(v5 + 3600) = 1;
      *(_QWORD *)(v5 + 3592) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
        *(_QWORD *)(v5 + 3584) = *(_QWORD *)(*(_QWORD *)(v5 + 3592) + 16);
      }
    }
    v21 = v5;
    v22 = v5 + 3632;
    v14 = v5 + 3640;
    v15 = v5 + 3568;
    while (1)
    {
      v16 = v8 + v9;
      v17 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v8 + v9 + 16) = 0;
      if (v3 >= 0x40)
        v18 = 64;
      else
        v18 = v3;
      *(_QWORD *)(v16 + 24) = 0;
      v3 -= v18;
      *(_DWORD *)(v16 + 32) = 0;
      *(_QWORD *)v16 = &off_24ED8E020;
      *(_QWORD *)(v16 + 8) = v17;
      *(_QWORD *)(v16 + 40) = v6;
      *(_DWORD *)(v16 + 48) = v18;
      *(_QWORD *)(v16 + 56) = v22;
      *(_QWORD *)(v16 + 64) = v8;
      *(_QWORD *)(v16 + 72) = v14;
      *(_QWORD *)(v16 + 80) = v2;
      if (v23)
      {
        *(_DWORD *)(v16 + 32) = 1;
        *(_QWORD *)(v16 + 24) = v15;
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
        *(_QWORD *)(v8 + v9 + 16) = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v8 + v9);
        if (!v3)
          return (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v21 + 3584) + 144))(*(_QWORD *)(v21 + 3584), v15);
      }
      else
      {
        physx::Sc::TriggerContactTask::runInternal(v8 + v9);
        if (!v3)
          return (uint64_t *)physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions(*(_QWORD *)(v21 + 3608), v19);
      }
      v6 += 8 * v18;
      v9 += 88;
    }
  }
  return this;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::runInternal(uint64_t a1, physx::PxBaseTask *a2)
{
  return physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions(*(_QWORD *)(a1 + 40), a2);
}

uint64_t physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions(uint64_t this, physx::PxBaseTask *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 3624);
  if (v2)
  {
    v3 = this;
    if (*(int *)(this + 3640) >= 1)
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(v2 + 8 * v4);
        if (v5)
          v6 = v5 + 8;
        else
          v6 = 0;
        physx::Sc::Scene::notifyInteractionDeactivated(*(_QWORD *)v3, v6);
        ++v4;
      }
      while (v4 < *(int *)(v3 + 3640));
    }
    *(_DWORD *)(v3 + 3640) = 0;
    this = physx::PxcScratchAllocator::free(*(_QWORD *)(*(_QWORD *)v3 + 1840), *(_QWORD *)(v3 + 3624));
    *(_QWORD *)(v3 + 3624) = 0;
  }
  return this;
}

uint64_t physx::Sc::NPhaseCore::visualize(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)result;
  if (*(float *)(*(_QWORD *)result + 4656) != 0.0)
  {
    v4 = *(_DWORD *)(v3 + 120);
    if (v4)
    {
      v7 = *(uint64_t **)(v3 + 72);
      do
      {
        --v4;
        v8 = *v7++;
        v9 = v8 - 8;
        if (v8)
          v10 = v9;
        else
          v10 = 0;
        result = physx::Sc::ShapeInteraction::visualize(v10, a2, a3);
      }
      while (v4);
    }
  }
  return result;
}

void physx::Sc::NPhaseCore::processPersistentContactEvents(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 8);
    do
    {
      v5 = *(v4 - 1);
      if (--v2)
      {
        _X8 = *v4;
        __asm { PRFM            #0, [X8] }
      }
      _X8 = *(_QWORD *)(v5 + 72);
      __asm { PRFM            #0, [X8] }
      if ((~*(_DWORD *)(v5 + 64) & 0x408) == 0)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 80) + 13) - 1 >= 2)
          v14 = 0;
        else
          v14 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
        v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
        if (*(unsigned __int8 *)(*(_QWORD *)(v15 + 80) + 13) - 1 >= 2)
          v15 = 0;
        if (*(_DWORD *)(v14 + 184) < 0xFFFFFFFE || v15 && *(_DWORD *)(v15 + 184) <= 0xFFFFFFFD)
        {
          physx::Sc::ShapeInteraction::processUserNotificationSync(*(v4 - 1));
          physx::Sc::ShapeInteraction::processUserNotificationAsync(v5, 8, 0, 0, 0, 0, a2, 0);
        }
      }
      ++v4;
    }
    while (v2);
  }
}

uint64_t physx::Sc::NPhaseCore::fireCustomFilteringCallbacks(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  int8x8_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11[2];
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)result + 4024);
  if (v3)
  {
    v6 = result;
    v13 = 0;
    v14 = 0;
    result = (*(uint64_t (**)(uint64_t, unsigned int *, int *, char *))(*(_QWORD *)v3 + 16))(v3, &v14, &v13, (char *)&v13 + 2);
    if ((_DWORD)result)
    {
      do
      {
        v8 = HIWORD(v13);
        if ((~HIWORD(v13) & 3) == 0)
        {
          v8 = HIWORD(v13) & 0xFFFE;
          HIWORD(v13) &= ~1u;
        }
        v9 = *(_QWORD *)(**(_QWORD **)(v6 + 152) + 8 * v14);
        v11[0] = v8;
        v11[1] = v13;
        v12 = v14;
        if (physx::Sc::NPhaseCore::refilterInteraction((int32x2_t *)v6, v9, v11, 1, a2, a3, v7) == v9
          && !*(_BYTE *)(v9 + 36))
        {
          physx::Sc::ShapeInteraction::updateState(v9, 1, v10);
        }
        result = (*(uint64_t (**)(uint64_t, unsigned int *, int *, char *))(*(_QWORD *)v3 + 16))(v3, &v14, &v13, (char *)&v13 + 2);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

void *physx::Sc::NPhaseCore::updateDirtyInteractions(int32x2_t *a1, void *a2, uint64_t a3, int8x8_t a4)
{
  char v4;
  int32x2_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  physx::Sc::ConstraintInteraction *v16;
  uint64_t v17;
  physx::Sc::ConstraintInteraction *v18;

  v4 = a3;
  v7 = *a1;
  v8 = *(_DWORD *)(*(_QWORD *)a1 + 4264);
  if ((v8 & 6) != 0)
  {
    v9 = *(_DWORD *)(*(_QWORD *)&v7 + 80);
    if (v9)
    {
      v10 = (8 * v8) & 0x20 | (8 * ((v8 >> 1) & 1));
      v11 = *(uint64_t **)(*(_QWORD *)&v7 + 72);
      do
      {
        v13 = *v11++;
        v12 = v13;
        if ((*(_BYTE *)(v13 + 29) & 8) != 0)
          *(_BYTE *)(v12 + 30) |= v10;
        else
          physx::Sc::ShapeInteraction::updateState(v12 - 8, v10, a3);
        --v9;
      }
      while (v9);
    }
  }
  v14 = a1[18].u32[1];
  if ((_DWORD)v14)
  {
    v15 = a1[13];
    do
    {
      v16 = **(physx::Sc::ConstraintInteraction ***)&v15;
      if ((*(_BYTE *)(**(_QWORD **)&v15 + 29) & 1) == 0 || (*((_BYTE *)v16 + 30) & 1) == 0)
        goto LABEL_15;
      v17 = physx::Sc::NPhaseCore::refilterInteraction(a1, (uint64_t)v16 - 8, 0, 0, (uint64_t)a2, v4, a4);
      v18 = (physx::Sc::ConstraintInteraction *)(v17 + 8);
      if (!v17)
        v18 = 0;
      if (v16 == v18)
      {
LABEL_15:
        if (*((_BYTE *)v16 + 28) == 4)
        {
          physx::Sc::ConstraintInteraction::onActivate_(v16, a2, a4);
        }
        else if (!*((_BYTE *)v16 + 28))
        {
          physx::Sc::ShapeInteraction::updateState((uint64_t)v16 - 8, 0, a3);
        }
        if ((*((_BYTE *)v16 + 29) & 8) != 0)
          *((_BYTE *)v16 + 29) &= ~8u;
        *((_BYTE *)v16 + 30) = 0;
      }
      *(_QWORD *)&v15 += 8;
      --v14;
    }
    while (v14);
  }
  return physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(&a1[12]);
}

BOOL physx::Sc::findTriggerContacts(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  _BYTE *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, float32x4_t *, uint64_t, float32x4_t *, uint64_t, __n128);
  __n128 AbsPoseAligned;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v28[2];
  float32x4_t v29[2];

  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int16 *)(a1 + 76);
  if ((a2 & 1) != 0)
  {
    if (a3)
      v12 = 4;
    else
      v12 = 0;
    v14 = (_BYTE *)(a1 + 78);
    v13 = *(unsigned __int8 *)(a1 + 78);
    if (!*(_BYTE *)(a1 + 78))
    {
      LOBYTE(v15) = 0;
      goto LABEL_20;
    }
LABEL_16:
    LOBYTE(v15) = 0;
    v13 = 16;
    goto LABEL_20;
  }
  v16 = *(_DWORD *)(*(_QWORD *)(v9 + 56) + 72);
  v17 = *(int *)(*(_QWORD *)(v10 + 56) + 72);
  ++*(_DWORD *)(a6 + 28 * v16 + 4 * v17);
  if (v16 <= (int)v17)
    v18 = v10;
  else
    v18 = v9;
  if (v16 <= (int)v17)
    v19 = v9;
  else
    v19 = v10;
  v20 = (uint64_t (*)(uint64_t, float32x4_t *, uint64_t, float32x4_t *, uint64_t, __n128))*(&gGeomOverlapMethodTable[7 * *(int *)(*(_QWORD *)(v19 + 56) + 72)]
                                                                                                 + *(int *)(*(_QWORD *)(v18 + 56) + 72));
  physx::Sc::ShapeSim::getAbsPoseAligned(v19, v29);
  AbsPoseAligned = (__n128)physx::Sc::ShapeSim::getAbsPoseAligned(v18, v28);
  v15 = v20(*(_QWORD *)(v19 + 56) + 72, v29, *(_QWORD *)(v18 + 56) + 72, v28, a1 + 60, AbsPoseAligned);
  v22 = *(unsigned __int8 *)(a1 + 78);
  v14 = (_BYTE *)(a1 + 78);
  v12 = v22;
  if (v22)
  {
    v12 = 0;
    if ((v15 & 1) != 0)
    {
      v13 = 0;
      LOBYTE(v15) = 1;
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v15)
    v13 = 4;
  else
    v13 = 0;
LABEL_20:
  *v14 = v15;
  v23 = v13 & v11;
  if ((v13 & v11) != 0)
  {
    v24 = qword_25582F9E0;
    *(_QWORD *)a4 = *(_QWORD *)(v9 + 56) + qword_25582F9E0;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v10 + 56) + v24;
    *(_DWORD *)(a4 + 32) = v13;
    *(_BYTE *)(a4 + 36) = v12;
    v25 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 80);
    v26 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 80);
    *(_QWORD *)(a4 + 8) = v25 + qword_25582FA18[*(unsigned __int8 *)(v25 + 13)];
    *(_QWORD *)(a4 + 24) = v26 + qword_25582FA18[*(unsigned __int8 *)(v26 + 13)];
    LODWORD(v24) = *(_DWORD *)(v10 + 64);
    LOBYTE(v25) = *(_BYTE *)(v25 + 11);
    LOBYTE(v26) = *(_BYTE *)(v26 + 11);
    *(_DWORD *)a5 = *(_DWORD *)(v9 + 64);
    *(_DWORD *)(a5 + 4) = v24;
    *(_BYTE *)(a5 + 8) = v25;
    *(_BYTE *)(a5 + 9) = v26;
  }
  return v23 != 0;
}

void physx::Sc::NPhaseCore::lostTouchReports(uint64_t a1, physx::Sc::ShapeInteraction *this, char a3, int a4, uint64_t a5, char a6)
{
  int v9;
  uint64_t v10;
  int v12;
  __int16 v13;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  physx::Sc::BodySim *v34;
  physx::Sc::BodySim *v35;
  BOOL v36;
  int v37[2];

  v9 = *((_DWORD *)this + 16);
  if ((v9 & 0x8000) != 0)
  {
    if ((v9 & 0x1DC) != 0)
    {
      if ((v9 & 0x80000) != 0)
        v12 = 272;
      else
        v12 = 16;
      v13 = v12 & v9;
      if ((v12 & v9) != 0)
      {
        v16 = *(_WORD *)(*((_QWORD *)this + 9) + 2) == 1;
        physx::Sc::ShapeInteraction::processUserNotificationSync((uint64_t)this);
        physx::Sc::ShapeInteraction::processUserNotificationAsync((uint64_t)this, v13, 8 * v16, 1, a4, 0, a5, 0);
      }
      v17 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
      if (v17 && *(_DWORD *)(v17 + 12) == *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1992))
      {
        if ((a3 & 1) != 0)
        {
          if ((*(_WORD *)(v17 + 10) & 8) != 0)
            physx::Sc::ShapeInteraction::setContactReportPostSolverVelocity((uint64_t)this, (unsigned int *)v17);
          v18 = 17;
        }
        else
        {
          v18 = 16;
        }
        *(_WORD *)(v17 + 10) |= v18;
      }
    }
    v19 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 80) + 13);
    v21 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
    if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 80) + 13) - 1 >= 2)
      v21 = 0;
    v10 = *((_QWORD *)this + 9);
    v22 = *(_WORD *)(v10 + 2) - 1;
    *(_WORD *)(v10 + 2) = v22;
    if ((a6 & 1) != 0 || !v22)
    {
      if ((v20 - 1) >= 2)
        v19 = 0;
      --*(_DWORD *)(*(_QWORD *)(v19 + 136) + 152);
      if (v21)
        --*(_DWORD *)(*(_QWORD *)(v21 + 136) + 152);
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 9);
    if (!v10)
      goto LABEL_38;
  }
  v23 = *(_WORD *)(v10 + 4) - 1;
  *(_WORD *)(v10 + 4) = v23;
  if (!v23)
  {
    v24 = *((_QWORD *)this + 1);
    v25 = *(_DWORD *)(v24 + 88);
    v26 = *(_DWORD *)(*((_QWORD *)this + 2) + 88);
    v27 = v25 > v26;
    if (v25 <= v26)
      v28 = *((_QWORD *)this + 1);
    else
      v28 = *((_QWORD *)this + 2);
    if (!v27)
      v24 = *((_QWORD *)this + 2);
    v29 = *(_DWORD *)(v24 + 88);
    v37[0] = *(_DWORD *)(v28 + 88);
    v37[1] = v29;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 3648, v37);
    if ((*(_WORD *)v10 & 1) != 0)
    {
      v31 = *(_QWORD **)(v10 + 24);
      if (v31)
      {
        --*(_DWORD *)(a1 + 2980);
        *v31 = *(_QWORD *)(a1 + 2992);
        *(_QWORD *)(a1 + 2992) = v31;
        *(_QWORD *)(v10 + 24) = 0;
      }
      --*(_DWORD *)(a1 + 1276);
      v30 = (_QWORD *)(a1 + 1288);
    }
    else
    {
      --*(_DWORD *)(a1 + 708);
      v30 = (_QWORD *)(a1 + 720);
    }
    *(_QWORD *)v10 = *v30;
    *v30 = v10;
  }
LABEL_38:
  *((_QWORD *)this + 9) = 0;
  v32 = *((_DWORD *)this + 16);
  if ((v32 & 0x8000) == 0)
  {
    v33 = *((_QWORD *)this + 11);
    if (v33)
    {
      if ((*(_BYTE *)(v33 + 83) & 3) != 0)
        return;
    }
    else if ((v32 & 0x18000) != 0)
    {
      return;
    }
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 80) + 13) - 1 >= 2)
    v34 = 0;
  else
    v34 = *(physx::Sc::BodySim **)(*((_QWORD *)this + 5) + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8) + 80) + 13) - 1 >= 2)
    v35 = 0;
  else
    v35 = *(physx::Sc::BodySim **)(*((_QWORD *)this + 6) + 8);
  if ((a3 & 4) != 0)
  {
    if (v34)
      v36 = v35 == 0;
    else
      v36 = 1;
    if (v36)
    {
      if (v34)
        physx::Sc::BodySim::internalWakeUp(v34, 0.4);
      if (v35)
        physx::Sc::BodySim::internalWakeUp(v35, 0.4);
    }
    else if ((v32 & 0x40000) == 0)
    {
      physx::Sc::Scene::addToLostTouchList(*(_QWORD *)a1, v34, v35);
    }
  }
}

uint64_t physx::Sc::NPhaseCore::addToPersistentContactEventPairs(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v10 = a2;
  *(_DWORD *)(a2 + 64) |= 0x200000u;
  v4 = (_QWORD *)(result + 24);
  v5 = *(unsigned int *)(result + 32);
  v6 = *(unsigned int *)(result + 40);
  if ((_DWORD)v5 == (_DWORD)v6)
  {
    *(_DWORD *)(a2 + 80) = v5;
    if ((*(_DWORD *)(result + 36) & 0x7FFFFFFFu) <= v5)
    {
      result = physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(result + 24, &v10);
      LODWORD(v5) = *(_DWORD *)(v3 + 40);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * v5) = a2;
      *(_DWORD *)(result + 32) = v5 + 1;
    }
  }
  else
  {
    v7 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)(v7 + 8 * v6);
    v9 = v8;
    *(_DWORD *)(v8 + 80) = v5;
    if ((*(_DWORD *)(result + 36) & 0x7FFFFFFFu) <= v5)
    {
      result = physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(result + 24, &v9);
      v6 = *(unsigned int *)(v3 + 40);
    }
    else
    {
      *(_QWORD *)(v7 + 8 * v5) = v8;
      *(_DWORD *)(result + 32) = v5 + 1;
    }
    LODWORD(v5) = v6;
    *(_DWORD *)(a2 + 80) = v6;
    *(_QWORD *)(*v4 + 8 * v6) = a2;
  }
  *(_DWORD *)(v3 + 40) = v5 + 1;
  return result;
}

uint64_t physx::Sc::NPhaseCore::addToPersistentContactEventPairsDelayed(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v4 = a2;
  *(_DWORD *)(a2 + 64) |= 0x200000u;
  v2 = *(unsigned int *)(result + 32);
  v3 = *(_DWORD *)(result + 36);
  *(_DWORD *)(a2 + 80) = v2;
  if ((v3 & 0x7FFFFFFFu) <= v2)
    return physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(result + 24, &v4);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * v2) = a2;
  *(_DWORD *)(result + 32) = v2 + 1;
  return result;
}

uint64_t physx::Sc::NPhaseCore::reserveContactReportPairData(physx::Sc::NPhaseCore *this, int a2, int a3, unsigned int *a4, physx::Sc::ContactReportAllocationManager *a5)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;
  size_t v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v6 = (a3 + 16 * ((a3 & 0xF) != 0)) & 0xFFFFFFF0;
  if (a5)
    return physx::Sc::ContactReportAllocationManager::allocate(a5, v6 + (a2 << 6), a4, 16);
  v9 = v6 + (a2 << 6);
  v10 = *((_DWORD *)this + 18);
  v11 = (v10 + 15) & 0xFFFFFFF0;
  *a4 = v11;
  v12 = *((unsigned int *)this + 19);
  if (v11 + v9 <= v12)
  {
    v13 = (void *)*((_QWORD *)this + 8);
    v14 = (v10 + 15) & 0xFFFFFFF0;
  }
  else
  {
    if (*((_BYTE *)this + 88))
      return 0;
    LODWORD(v15) = *((_DWORD *)this + 19);
    do
    {
      v16 = v15;
      v15 = (2 * v15);
      *((_DWORD *)this + 19) = v15;
    }
    while (*a4 + v9 > 2 * v16);
    if ((_DWORD)v15)
      v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
    else
      v13 = 0;
    memcpy(v13, *((const void **)this + 8), v12);
    if (*((_QWORD *)this + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 8) = v13;
    v14 = *a4;
  }
  result = (uint64_t)v13 + v14;
  *((_DWORD *)this + 21) = v14;
  *((_DWORD *)this + 18) += v9 - v10 + v11;
  return result;
}

uint64_t physx::Sc::ContactReportAllocationManager::allocate(physx::Sc::ContactReportAllocationManager *this, unsigned int a2, unsigned int *a3, int a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char **v11;
  int v12;
  int v13;
  size_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t result;

  v7 = a4 - 1;
  v8 = -a4;
  v9 = ((*((_DWORD *)this + 3) + a4 - 1) & -a4) - *((_DWORD *)this + 3) + *((_DWORD *)this + 4);
  if (v9 + a2 <= *((_DWORD *)this + 2))
    goto LABEL_24;
  if (a2 <= *((_DWORD *)this + 10))
    v10 = *((_DWORD *)this + 10);
  else
    v10 = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(**((pthread_mutex_t ***)this + 4));
  v11 = (char **)*((_QWORD *)this + 3);
  v12 = *((_DWORD *)v11 + 2);
  v13 = (v12 + v7) & v8;
  *((_DWORD *)this + 3) = v13;
  v14 = *((unsigned int *)v11 + 3);
  if (v13 + v10 <= v14)
  {
    v16 = *v11;
    v17 = v13;
LABEL_20:
    v15 = &v16[v17];
    *((_DWORD *)v11 + 5) = v17;
    *((_DWORD *)v11 + 2) += v10 - v12 + v13;
    goto LABEL_21;
  }
  if (!*((_BYTE *)v11 + 24))
  {
    LODWORD(v18) = *((_DWORD *)v11 + 3);
    do
    {
      v19 = v18;
      v18 = (2 * v18);
      *((_DWORD *)v11 + 3) = v18;
    }
    while (*((_DWORD *)this + 3) + v10 > 2 * v19);
    if ((_DWORD)v18)
      v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v18, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
    else
      v16 = 0;
    memcpy(v16, *v11, v14);
    if (*v11)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *v11 = v16;
    v17 = *((_DWORD *)this + 3);
    goto LABEL_20;
  }
  v15 = 0;
LABEL_21:
  *(_QWORD *)this = v15;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = v10;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || (v9 = 0, physx::shdfnd::g_isLockingEnabled))
  {
    pthread_mutex_unlock(**((pthread_mutex_t ***)this + 4));
    v9 = 0;
  }
LABEL_24:
  result = *(_QWORD *)this + v9;
  *a3 = *((_DWORD *)this + 3) + v9;
  *((_DWORD *)this + 4) = v9 + a2;
  return result;
}

char *physx::Sc::NPhaseCore::resizeContactReportPairData(uint64_t a1, unsigned int a2, int a3, unsigned int *a4)
{
  char *v7;
  uint64_t v8;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  size_t v32;

  v7 = *(char **)(a1 + 64);
  v8 = *a4;
  _X8 = &v7[v8];
  __asm { PRFM            #0, [X8] }
  v15 = a3 + 16 * ((a3 & 0xF) != 0);
  v16 = v15 & 0xFFFFFFF0;
  v17 = v16 + (a2 << 6);
  if (*(_DWORD *)(a1 + 84) != (_DWORD)v8)
  {
    LODWORD(v8) = *(_DWORD *)(a1 + 72);
    v20 = *(unsigned int *)(a1 + 76);
    v18 = (v8 + 15) & 0xFFFFFFF0;
    v19 = v18 + v17;
    if (v18 + v17 > v20)
    {
      if (!*(_BYTE *)(a1 + 88))
      {
        LODWORD(v21) = *(_DWORD *)(a1 + 76);
        do
        {
          v22 = v19 > 2 * (int)v21;
          v21 = (2 * v21);
        }
        while (v22);
        *(_DWORD *)(a1 + 76) = v21;
        v23 = &unk_25582F000;
        if ((_DWORD)v21)
          goto LABEL_13;
LABEL_15:
        v24 = 0;
        goto LABEL_16;
      }
      return 0;
    }
LABEL_14:
    v25 = v8;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 72) = v8;
  v18 = (v8 + 15) & 0xFFFFFFF0;
  v19 = v18 + v17;
  v20 = *(unsigned int *)(a1 + 76);
  if (v18 + v17 <= v20)
    goto LABEL_14;
  if (*(_BYTE *)(a1 + 88))
    return 0;
  LODWORD(v21) = *(_DWORD *)(a1 + 76);
  do
  {
    v22 = v19 > 2 * (int)v21;
    v21 = (2 * v21);
  }
  while (v22);
  *(_DWORD *)(a1 + 76) = v21;
  if (!(_DWORD)v21)
    goto LABEL_15;
  v23 = (_QWORD *)&unk_25582F000;
LABEL_13:
  v24 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v23[327] + 24)
                                                                                                 + 16))(v23[327] + 24, v21, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
  v7 = *(char **)(a1 + 64);
LABEL_16:
  memcpy(v24, v7, v20);
  if (*(_QWORD *)(a1 + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 64) = v24;
  v25 = *(_DWORD *)(a1 + 72);
  v7 = v24;
LABEL_19:
  *(_DWORD *)(a1 + 84) = v18;
  *(_DWORD *)(a1 + 72) = v19 - v8 + v25;
  if (!v7)
    return 0;
  v26 = &v7[v18];
  v27 = *a4;
  v28 = &v7[v27];
  v29 = ((unint64_t)*((unsigned __int16 *)a4 + 5) >> 1) & 0x7FF0;
  if ((_DWORD)v27 == v18)
  {
    if (v16 > v29)
      memmove(&v26[v16], &v28[((unint64_t)*((unsigned __int16 *)a4 + 5) >> 1) & 0x7FF0], (unint64_t)*((unsigned __int16 *)a4 + 3) << 6);
  }
  else
  {
    if (v16 <= v29)
    {
      v32 = v29 + (*((unsigned __int16 *)a4 + 3) << 6);
      v30 = &v7[v18];
      v31 = &v7[v27];
    }
    else
    {
      memcpy(&v7[v18], &v7[v27], *((unsigned __int16 *)a4 + 4));
      v30 = &v26[v16];
      v31 = &v28[v29];
      v32 = (unint64_t)*((unsigned __int16 *)a4 + 3) << 6;
    }
    memcpy(v30, v31, v32);
    *a4 = v18;
  }
  if (*((unsigned __int16 *)a4 + 2) < a2)
    *((_WORD *)a4 + 2) = a2;
  if (v16 > v29)
    *((_WORD *)a4 + 5) = (2 * v15) & 0xFFE0 | *((_WORD *)a4 + 5) & 0x1F;
  return v26;
}

pthread_mutex_t *physx::Sc::NPhaseCore::createActorPairContactReportData(pthread_mutex_t **this)
{
  pthread_mutex_t *v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[471]);
  v2 = this[374];
  if (!v2)
  {
    physx::shdfnd::PoolBase<physx::Sc::ActorPairContactReportData,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::allocateSlab((uint64_t)(this + 304));
    v2 = this[374];
  }
  this[374] = (pthread_mutex_t *)v2->__sig;
  ++*((_DWORD *)this + 745);
  WORD2(v2->__sig) = 0;
  *(_WORD *)&v2->__opaque[2] = 0;
  *(_QWORD *)&v2->__opaque[4] = -1;
  *(_DWORD *)&v2->__opaque[12] = -1;
  *(_QWORD *)&v2->__opaque[16] = 0;
  *(_QWORD *)&v2->__opaque[24] = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[471]);
  return v2;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_DWORD *)(a1 + 52))
    return 0;
  v2 = *a2;
  v3 = ~(*a2 << 32) + *a2;
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = (_DWORD *)(*(_QWORD *)(a1 + 24)
                + 4
                * ((*(_DWORD *)(a1 + 36) - 1) & (((v5 + ~(v5 << 27)) >> 31) ^ ((_DWORD)v5
                                                                                           + ~((_DWORD)v5 << 27)))));
  v7 = *v6;
  if ((_DWORD)v7 == -1)
    return 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v8 + 8 * v7) != v2)
  {
    while (1)
    {
      v10 = v7;
      v7 = *(unsigned int *)(v9 + 4 * v7);
      if ((_DWORD)v7 == -1)
        return 0;
      if (*(_QWORD *)(v8 + 8 * v7) == v2)
      {
        v6 = (_DWORD *)(v9 + 4 * v10);
        break;
      }
    }
  }
  *v6 = *(_DWORD *)(v9 + 4 * v7);
  v11 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v11;
  if ((_DWORD)v7 != v11)
  {
    *(_QWORD *)(v8 + 8 * v7) = *(_QWORD *)(v8 + 8 * v11);
    v13 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v12 + 4 * v7) = *(_DWORD *)(v12 + 4 * v11);
    v14 = ~(*(_QWORD *)(v13 + 8 * v7) << 32) + *(_QWORD *)(v13 + 8 * v7);
    v15 = 9
        * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 24)
                   + 4 * ((*(_DWORD *)(a1 + 36) - 1) & ((v16 >> 31) ^ v16)));
    v18 = *(unsigned int *)(a1 + 52);
    v19 = *v17;
    if (v19 != v18)
    {
      do
      {
        v20 = v19;
        v19 = *(unsigned int *)(v12 + 4 * v19);
      }
      while (v19 != v18);
      v17 = (_DWORD *)(v12 + 4 * v20);
    }
    *v17 = v7;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

__n128 getFilterInfo_ShapeSim(int *a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  __n128 result;

  v4 = (8 * a4[4].n128_u8[0]) & 0x20;
  *a1 = v4;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 80);
    v6 = *(unsigned __int8 *)(v5 + 13);
    if ((v6 - 3) >= 0xFFFFFFFE)
    {
      if (v6 == 2)
        v7 = v4 | 2;
      else
        v7 = v4 | (16 * (*(_BYTE *)(v5 + 44) & 1)) | 1;
      *a1 = v7;
    }
  }
  result = a4[1];
  *a2 = result;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ElementSimInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementSimInteraction *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementSimInteraction *>::getName() [T = phy"
           "sx::Sc::ElementSimInteraction *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

BOOL filterJointedBodies(const physx::Sc::BodySim *a1, const physx::Sc::ActorSim *a2)
{
  unsigned int v2;
  unsigned int v3;
  const physx::Sc::ActorSim *v4;
  int v5;
  const physx::Sc::BodySim *v6;
  uint64_t *v7;
  const physx::Sc::ActorSim **v8;
  uint64_t v9;

  if ((*((_WORD *)a1 + 90) & 0x100) == 0)
    return 0;
  v2 = *((_DWORD *)a1 + 13);
  v3 = *((_DWORD *)a2 + 13);
  v4 = v2 <= v3 ? a2 : a1;
  v5 = v2 >= v3 ? *((_DWORD *)a2 + 13) : *((_DWORD *)a1 + 13);
  if (!v5)
    return 0;
  if (v2 <= v3)
    v6 = a1;
  else
    v6 = a2;
  v7 = (uint64_t *)*((_QWORD *)v6 + 5);
  while (1)
  {
    v9 = *v7++;
    v8 = (const physx::Sc::ActorSim **)v9;
    if (*(_BYTE *)(v9 + 28) == 4 && (*v8 == v4 || v8[1] == v4))
      break;
    if (!--v5)
      return 0;
  }
  return (**((_WORD **)v8[4] + 11) & 8) == 0;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::getName() [T = ph"
           "ysx::Sc::ElementInteractionMarker]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::getName() [T = ph"
           "ysx::Sc::ElementInteractionMarker]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::getName() [T = "
           "physx::Sc::ActorPairContactReportData]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::getName() [T = "
           "physx::Sc::ActorPairContactReportData]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::getName() [T = physx::S"
           "c::TriggerInteraction]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::getName() [T = physx::S"
           "c::TriggerInteraction]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::getName() [T = physx::Sc:"
           ":ShapeInteraction]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::getName() [T = physx::Sc:"
           ":ShapeInteraction]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::getName() [T = physx::Sc::"
           "ActorPairReport]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::getName() [T = physx::Sc::"
           "ActorPairReport]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::getName() [T = physx::Sc::ActorPair]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::getName() [T = physx::Sc::ActorPair]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void physx::Sc::TriggerContactTask::~TriggerContactTask(physx::Sc::TriggerContactTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Sc::TriggerContactTask::getName(physx::Sc::TriggerContactTask *this)
{
  return "ScNPhaseCore.triggerInteractionWork";
}

uint64_t physx::Sc::TriggerContactTask::runInternal(uint64_t this)
{
  uint64_t v1;
  uint64_t i;
  uint64_t j;
  _BYTE *v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  pthread_mutex_t **v13;
  unsigned int *v14;
  unsigned int v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  void *v23;
  void *__dst;
  _OWORD v25[32];
  _BYTE v26[768];
  _BYTE __src[2560];
  _OWORD v28[9];
  uint64_t v29;

  v1 = this;
  v29 = *MEMORY[0x24BDAC8D0];
  memset(v28, 0, 140);
  for (i = 36; i != 2596; i += 40)
    __src[i] = 0;
  for (j = 0; j != 768; j += 12)
  {
    v4 = &v26[j];
    *((_WORD *)v4 + 4) = -1;
    *(_QWORD *)v4 = -1;
  }
  memset(v25, 0, sizeof(v25));
  if (*(_DWORD *)(this + 48))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v5);
      if (v8)
        v9 = v8 - 8;
      else
        v9 = 0;
      this = physx::Sc::findTriggerContacts(v9, 0, 0, (uint64_t)&__src[40 * v6], (uint64_t)&v26[12 * v6], (uint64_t)v28);
      v10 = this;
      v11 = *(_WORD *)(v9 + 76);
      if ((v11 & 0x20) != 0)
      {
        *(_WORD *)(v9 + 76) = v11 & 0xFFDF;
        this = isOneActorActive((physx::Sc::TriggerInteraction *)v9);
        v12 = *(_BYTE *)(v9 + 37);
        if ((_DWORD)this)
        {
          *(_BYTE *)(v9 + 37) = v12 | 0x20;
        }
        else
        {
          *(_BYTE *)(v9 + 37) = v12 & 0xDF;
          *((_QWORD *)v25 + v7++) = v9;
        }
      }
      v6 += v10;
      ++v5;
    }
    while (v5 < *(unsigned int *)(v1 + 48));
    if (v6)
    {
      v23 = 0;
      __dst = 0;
      v13 = *(pthread_mutex_t ***)(v1 + 56);
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*v13);
      physx::Sc::Scene::reserveTriggerReportBufferSpace(*(_QWORD *)(v1 + 80), v6, &__dst, &v23);
      memcpy(__dst, __src, (40 * v6));
      this = (uint64_t)memcpy(v23, v26, (12 * v6));
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        this = pthread_mutex_unlock(*v13);
    }
    if (v7)
    {
      v14 = *(unsigned int **)(v1 + 72);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 + v7;
      }
      while (__stlxr(v16, v14));
      this = (uint64_t)memcpy((void *)(*(_QWORD *)(v1 + 64) + 8 * v16 - 8 * v7), v25, (8 * v7));
    }
  }
  v17 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 4256);
  do
  {
    for (k = 0; k != 7; ++k)
    {
      v20 = *((_DWORD *)v28 + 7 * v17 + k);
      if (v20)
      {
        v21 = (unsigned int *)(v18 + 28 * v17 + 4 * k + 16);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + v20, v21));
      }
    }
    ++v17;
  }
  while (v17 != 5);
  return this;
}

void physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(uint64_t a1, int a2)
{
  unsigned int v2;
  char *v4;
  char *v5;
  int v6;

  v2 = (a2 + 31) >> 5;
  if (v2 > (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu))
  {
    v4 = (char *)(*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 4 * v2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 438);
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    if (*(_QWORD *)a1)
    {
      memcpy(v4, *(const void **)a1, (4 * v6));
      v6 = *(_DWORD *)(a1 + 8);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(_QWORD *)a1)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
          v6 = *(_DWORD *)(a1 + 8);
        }
      }
    }
    bzero(&v5[4 * (v6 & 0x7FFFFFFF)], 4 * (v2 - v6));
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v2;
  }
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationLink,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>::getName() [T = physx::Dy:"
           ":ArticulationLink]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 40 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 40 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      v12 = v8[1];
      *(_QWORD *)(v10 + 32) = *((_QWORD *)v8 + 4);
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      v10 += 40;
      v8 = (__int128 *)((char *)v8 + 40);
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>::getName() [T = phys"
           "x::Sc::ArticulationJointSim *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>::getName() [T = physx::Sc::BodySim *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationLoopConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLoopConstraint>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLoopConstraint>::getName() [T = "
           "physx::Dy::ArticulationLoopConstraint]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 16 * v9;
    v11 = *(__int128 **)a1;
    v12 = (_OWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  *(_OWORD *)(v8 + 16 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 16 * v15;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>::getName() [T = physx::Sc::BodySim *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>::getName() [T = phys"
           "x::Sc::ArticulationJointSim *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::SimStateData,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::getName() [T = physx::Sc::SimStateData]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 6) - 64;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 6) - 64);
    do
    {
      *v9 = v8;
      v9 -= 8;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::getName() [T = physx::Sc::SimStateData]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 16 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v15);
      v18 = *v17 | (*((_DWORD *)v17 + 1) << 16);
      v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
      v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      v21 = (v20 ^ HIWORD(v20)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v16] = *(_DWORD *)&v11[4 * v21];
      *(_DWORD *)&v11[4 * v21] = v16;
      v22 = &v13[v15];
      *(_QWORD *)v22 = *(_QWORD *)v17;
      *((_QWORD *)v22 + 1) = *((_QWORD *)v17 + 1);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  v11 = v10 + 24 * v9;
  if ((_DWORD)v11)
    v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v12 = 0;
  v13 = &v12[4 * v3];
  v14 = &v12[v10];
  result = memset(v12, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(a1 + 8) + v16;
      v19 = (*(_DWORD *)(v18 + 8) << 14) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)v18 >> 2);
      v20 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
      v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
      v22 = (v21 ^ HIWORD(v21)) & (v3 - 1);
      *(_DWORD *)&v13[4 * v17] = *(_DWORD *)&v12[4 * v22];
      *(_DWORD *)&v12[4 * v22] = v17;
      v23 = &v14[v16];
      *(_OWORD *)v23 = *(_OWORD *)v18;
      *((_QWORD *)v23 + 2) = *(_QWORD *)(v18 + 16);
      ++v17;
      v16 += 24;
    }
    while (v17 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

_QWORD *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v11 = 0;
    goto LABEL_10;
  }
  v7 = a2[1];
  v8 = ((_DWORD)v7 << 14) & 0xFFFF0000 | (unsigned __int16)(*a2 >> 2);
  v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = (v10 ^ HIWORD(v10)) & (v6 - 1);
  v12 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v11);
  if ((_DWORD)v12 == -1)
  {
LABEL_10:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v15 = 2 * v6;
      else
        v15 = 16;
      if (v6 < v15)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v15, a4);
        v6 = a1[4].u32[1];
      }
      v16 = (*((_DWORD *)a2 + 2) << 14) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)a2 >> 2);
      v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
      v11 = (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16)) & (v6 - 1);
    }
    v18 = a1[5].u32[1];
    a1[5].i32[1] = v18 + 1;
    v19 = a1[3];
    v20 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v18) = *(_DWORD *)(*(_QWORD *)&v19 + 4 * v11);
    *(_DWORD *)(*(_QWORD *)&v19 + 4 * v11) = v18;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return (_QWORD *)(*(_QWORD *)&v20 + 24 * v18);
  }
  while (1)
  {
    result = (_QWORD *)(*(_QWORD *)&a1[1] + 24 * v12);
    if (*result == *a2 && result[1] == v7)
      break;
    v12 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v12);
    if ((_DWORD)v12 == -1)
      goto LABEL_10;
  }
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_DWORD *)(a1 + 52))
    return 0;
  v2 = *a2;
  v3 = a2[1];
  v4 = ((_DWORD)v3 << 14) & 0xFFFF0000 | (unsigned __int16)(*a2 >> 2);
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (_DWORD *)(*(_QWORD *)(a1 + 24)
                + 4
                * ((((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
  v7 = *v6;
  if ((_DWORD)v7 == -1)
    return 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_QWORD *)(v8 + 24 * v7);
  if (*v10 != v2 || v10[1] != v3)
  {
    while (1)
    {
      v12 = v7;
      v7 = *(unsigned int *)(v9 + 4 * v7);
      if ((_DWORD)v7 == -1)
        return 0;
      v10 = (_QWORD *)(v8 + 24 * v7);
      if (*v10 == v2 && v10[1] == v3)
      {
        v6 = (_DWORD *)(v9 + 4 * v12);
        break;
      }
    }
  }
  *v6 = *(_DWORD *)(v9 + 4 * v7);
  v14 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v14;
  if ((_DWORD)v7 != v14)
  {
    v15 = v8 + 24 * v14;
    *(_OWORD *)v10 = *(_OWORD *)v15;
    *(_QWORD *)(v8 + 24 * v7 + 16) = *(_QWORD *)(v15 + 16);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v16 + 4 * v7) = *(_DWORD *)(v16 + 4 * *(unsigned int *)(a1 + 52));
    LODWORD(v15) = (*(_DWORD *)(v17 + 24 * v7 + 8) << 14) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v17 + 24 * v7) >> 2);
    LODWORD(v15) = 9 * ((v15 + ~((_DWORD)v15 << 15)) ^ ((v15 + ~((_DWORD)v15 << 15)) >> 10));
    LODWORD(v15) = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
    v18 = (_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * ((v15 ^ WORD1(v15)) & (*(_DWORD *)(a1 + 36) - 1)));
    v19 = *(unsigned int *)(a1 + 52);
    v20 = *v18;
    if (v20 != v19)
    {
      do
      {
        v21 = v20;
        v20 = *(unsigned int *)(v16 + 4 * v20);
      }
      while (v20 != v19);
      v18 = (_DWORD *)(v16 + 4 * v21);
    }
    *v18 = v7;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ShapeInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::getName() [T = physx::Sc:"
           ":ShapeInteraction]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 104 * *(unsigned int *)(v1 + 544) - 104;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 104 * *(unsigned int *)(v1 + 544) - 104);
    do
    {
      *v9 = v8;
      v9 -= 13;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 13;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::getName() [T = physx::Sc::S"
         "hapeInteraction]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::TriggerInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::getName() [T = physx::S"
           "c::TriggerInteraction]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 80 * *(unsigned int *)(v1 + 544) - 80;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 80 * *(unsigned int *)(v1 + 544) - 80);
    do
    {
      *v9 = v8;
      v9 -= 10;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 10;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::getName() [T = physx::Sc:"
         ":TriggerInteraction]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ElementInteractionMarker,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::getName() [T = ph"
           "ysx::Sc::ElementInteractionMarker]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 6) - 64;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 6) - 64);
    do
    {
      *v9 = v8;
      v9 -= 8;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::getName() [T = phys"
         "x::Sc::ElementInteractionMarker]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::getName() [T = physx::Sc::ActorPair]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ActorPairReport,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::getName() [T = physx::Sc::"
           "ActorPairReport]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 32 * *(unsigned int *)(v1 + 544) - 32;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 32 * *(unsigned int *)(v1 + 544) - 32);
    do
    {
      *v9 = v8;
      v9 -= 4;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 4;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::getName() [T = physx::Sc::ActorPairReport]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(void *result)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v12;

  v1 = *((_DWORD *)result + 9);
  if (v1)
  {
    v2 = result;
    if (*((_DWORD *)result + 13))
    {
      result = memset(*((void **)result + 3), 255, (4 * v1));
      v3 = v2[2];
      v4 = (*((_DWORD *)v2 + 8) - 1);
      if (*((_DWORD *)v2 + 8) == 1)
      {
        v12 = 0;
      }
      else
      {
        _X10 = v3 + 128;
        v6 = 1;
        do
        {
          __asm { PRFM            #0, [X10] }
          *(_DWORD *)(_X10 - 128) = v6++;
          _X10 += 4;
          --v4;
        }
        while (v4);
        v12 = (*((_DWORD *)v2 + 8) - 1);
      }
      *(_DWORD *)(v3 + 4 * v12) = -1;
      *((_DWORD *)v2 + 11) = 0;
      *((_DWORD *)v2 + 13) = 0;
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>::getName() [T = physx::PxTriggerPair]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 40 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 40 * v9;
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      v14 = v11[1];
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 + 8);
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      *(_BYTE *)(v12 + 36) = *((_BYTE *)v11 + 36);
      v12 += 40;
      v11 = (__int128 *)((char *)v11 + 40);
    }
    while (v12 < v10);
    v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = v8 + 40 * v15;
  v17 = *a2;
  v18 = a2[1];
  *(_DWORD *)(v16 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)v16 = v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(_BYTE *)(v16 + 36) = *((_BYTE *)a2 + 36);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::growAndPushBack(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>::getName() [T = physx:"
           ":Sc::TriggerPairExtraData]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 12 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 12 * v9;
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v11 + 2);
      *(_QWORD *)v12 = v13;
      v12 += 12;
      v11 = (uint64_t *)((char *)v11 + 12);
    }
    while (v12 < v10);
    v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 12 * v14;
  v16 = *a2;
  *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v12;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_DWORD *)(a1 + 52))
    return 0;
  v2 = *a2;
  v3 = a2[1];
  v4 = (unsigned __int16)*a2 | ((unsigned __int16)v3 << 16);
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (_DWORD *)(*(_QWORD *)(a1 + 24)
                + 4
                * ((((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
  v7 = *v6;
  if ((_DWORD)v7 == -1)
    return 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD *)(v8 + 16 * v7);
  if (*v10 != v2 || v10[1] != v3)
  {
    while (1)
    {
      v12 = v7;
      v7 = *(unsigned int *)(v9 + 4 * v7);
      if ((_DWORD)v7 == -1)
        return 0;
      v10 = (_DWORD *)(v8 + 16 * v7);
      if (*v10 == v2 && v10[1] == v3)
      {
        v6 = (_DWORD *)(v9 + 4 * v12);
        break;
      }
    }
  }
  *v6 = *(_DWORD *)(v9 + 4 * v7);
  v14 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v14;
  if ((_DWORD)v7 != v14)
  {
    v15 = (uint64_t *)(v8 + 16 * v14);
    v17 = *v15;
    v16 = v15[1];
    *(_QWORD *)v10 = v17;
    v18 = v8 + 16 * v7;
    v20 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    LODWORD(v17) = *(_DWORD *)(v19 + 4 * *(unsigned int *)(a1 + 52));
    *(_QWORD *)(v18 + 8) = v16;
    *(_DWORD *)(v19 + 4 * v7) = v17;
    LODWORD(v18) = *(unsigned __int16 *)(v20 + 16 * v7) | (*(_DWORD *)(v20 + 16 * v7 + 4) << 16);
    LODWORD(v18) = 9 * ((v18 + ~((_DWORD)v18 << 15)) ^ ((v18 + ~((_DWORD)v18 << 15)) >> 10));
    LODWORD(v18) = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
    v21 = (_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * ((v18 ^ WORD1(v18)) & (*(_DWORD *)(a1 + 36) - 1)));
    v22 = *(unsigned int *)(a1 + 52);
    v23 = *v21;
    if (v23 != v22)
    {
      do
      {
        v24 = v23;
        v23 = *(unsigned int *)(v19 + 4 * v23);
      }
      while (v23 != v22);
      v21 = (_DWORD *)(v19 + 4 * v24);
    }
    *v21 = v7;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>::getName() [T = physx::Sc"
           "::ActorPairReport *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>::getName() [T = physx::S"
           "c::ShapeInteraction *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ActorPairContactReportData,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::getName() [T = "
           "physx::Sc::ActorPairContactReportData]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 40 * *(unsigned int *)(v1 + 544) - 40;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 40 * *(unsigned int *)(v1 + 544) - 40);
    do
    {
      *v9 = v8;
      v9 -= 5;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 5;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::getName() [T = ph"
         "ysx::Sc::ActorPairContactReportData]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

_QWORD *physx::Sc::ConstraintCore::setFlags(_QWORD *result, __int16 *a2, int8x8_t a3)
{
  int v3;
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;

  v3 = *(unsigned __int16 *)result;
  v4 = (unsigned __int16)*a2;
  v5 = v3 & 0x400 | v4;
  *a2 = v3 & 0x400 | v4;
  if (v5 != v3)
  {
    *(_WORD *)result = v5;
    result = (_QWORD *)result[10];
    if (result)
    {
      v7 = v3;
      v6 = *a2;
      return physx::Sc::ConstraintSim::postFlagChange(result, &v7, &v6, a3);
    }
  }
  return result;
}

_QWORD *physx::Sc::ConstraintSim::postFlagChange(_QWORD *result, _WORD *a2, __int16 *a3, int8x8_t a4)
{
  _QWORD *v4;
  __int16 v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = result;
  v5 = *a3;
  *((_WORD *)result + 5) = *a3;
  v6 = *a2 & 6;
  v7 = v5 & 6;
  if (v7)
    v8 = v6 == 0;
  else
    v8 = 0;
  if (v8)
  {
    v13 = result[13];
    v14 = result[14];
    if (v13 && !*(_QWORD *)(v13 + 200) || v14 && !*(_QWORD *)(v14 + 200))
    {
      return physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(*(int32x2_t **)(result[10] + 2056), (physx::Sc::ConstraintSim *)result, a4);
    }
    else
    {
      v15 = *(int32x2_t **)(result[10] + 2056);
      if (v13)
        v16 = *(_QWORD **)(v13 + 200);
      else
        v16 = *(_QWORD **)(v14 + 200);
      return physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v16, v15, a4);
    }
  }
  else
  {
    if (v7)
      v9 = 1;
    else
      v9 = v6 == 0;
    if (!v9)
    {
      if ((result[15] & 1) != 0)
      {
        v17 = *(_QWORD *)(result[10] + 2056) + 576;
        v18 = v4;
        result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v17, (uint64_t *)&v18);
        *((_BYTE *)v4 + 120) &= ~1u;
      }
      else
      {
        v10 = result[13];
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 200);
          if (v11)
            return (_QWORD *)physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(result[10] + 2056), v11, 0, a4);
        }
        v12 = result[14];
        if (v12)
        {
          v11 = *(_QWORD *)(v12 + 200);
          if (v11)
            return (_QWORD *)physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(result[10] + 2056), v11, 0, a4);
        }
      }
    }
  }
  return result;
}

float32x2_t physx::Sc::ConstraintSim::getForce(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  uint64_t v3;
  float v4;
  float32x2_t *v5;
  float32_t v6;
  float32_t v7;
  float32x2_t result;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(float *)(v3 + 1988);
  v5 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 1888) + 232) + 32 * *(unsigned int *)(a1 + 72));
  v6 = v4 * v5[1].f32[0];
  *a2 = vmul_n_f32(*v5, v4);
  a2[1].f32[0] = v6;
  v7 = v4 * v5[3].f32[0];
  result = vmul_n_f32(v5[2], v4);
  *a3 = result;
  a3[1].f32[0] = v7;
  return result;
}

physx::Sc::ConstraintInteraction *physx::Sc::ConstraintSim::postBodiesChange(physx::Sc::ConstraintSim *a1, uint64_t a2, uint64_t a3, int8x8_t a4)
{
  physx::Sc::RigidSim *v7;
  physx::Sc::RigidSim *v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  physx::Sc::RigidSim **v18;
  physx::Sc::RigidSim **v19;
  physx::Sc::RigidSim *v20;
  physx::Sc::RigidSim *v21;
  physx::Sc::ConstraintInteraction *v22;
  physx::Sc::ConstraintInteraction *result;

  if (a2 && *(_BYTE *)(a2 + 13))
  {
    v7 = *(physx::Sc::RigidSim **)a2;
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    v7 = 0;
    if (!a3)
      goto LABEL_8;
  }
  if (*(_BYTE *)(a3 + 13))
  {
    v8 = *(physx::Sc::RigidSim **)a3;
    goto LABEL_9;
  }
LABEL_8:
  v8 = 0;
LABEL_9:
  v9 = *(int32x2_t **)(*((_QWORD *)a1 + 10) + 2056);
  if ((**((_WORD **)a1 + 11) & 6) != 0)
  {
    if ((*((_BYTE *)a1 + 120) & 1) == 0)
      physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(*(int32x2_t **)(*((_QWORD *)a1 + 10) + 2056), a1, a4);
  }
  else
  {
    if (v7)
    {
      v10 = *((_QWORD *)v7 + 25);
      if (v10)
        physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(*((_QWORD *)a1 + 10) + 2056), v10, a1, a4);
    }
    if (v8)
    {
      v11 = *((_QWORD *)v8 + 25);
      if (v11)
        physx::Sc::ConstraintProjectionManager::invalidateGroup(v9, v11, a1, a4);
    }
  }
  v12 = (char *)v7 + 96;
  if (!v7)
    v12 = 0;
  v13 = (char *)v8 + 96;
  if (!v8)
    v13 = 0;
  *((_QWORD *)a1 + 5) = v12;
  *((_QWORD *)a1 + 6) = v13;
  if (v7)
    v14 = *((_QWORD *)v7 + 17);
  else
    v14 = 0;
  *((_QWORD *)a1 + 7) = v14;
  if (v8)
    v15 = *((_QWORD *)v8 + 17);
  else
    v15 = 0;
  *((_QWORD *)a1 + 8) = v15;
  *((_QWORD *)a1 + 13) = v7;
  *((_QWORD *)a1 + 14) = v8;
  v16 = *((_QWORD *)a1 + 10);
  v17 = *(_QWORD *)(v16 + 4360);
  v18 = (physx::Sc::RigidSim **)(v16 + 4304);
  if (a2)
    v19 = (physx::Sc::RigidSim **)a2;
  else
    v19 = v18;
  v20 = *v19;
  if (a3)
    v18 = (physx::Sc::RigidSim **)a3;
  v21 = *v18;
  v22 = *(physx::Sc::ConstraintInteraction **)(v17 + 560);
  if (!v22)
  {
    physx::shdfnd::PoolBase<physx::Sc::ConstraintInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::allocateSlab(v17);
    v22 = *(physx::Sc::ConstraintInteraction **)(v17 + 560);
  }
  *(_QWORD *)(v17 + 560) = *(_QWORD *)v22;
  ++*(_DWORD *)(v17 + 548);
  result = physx::Sc::ConstraintInteraction::ConstraintInteraction(v22, a1, v20, v21);
  *((_QWORD *)a1 + 12) = result;
  return result;
}

BOOL physx::Sc::ConstraintCore::updateConstants(physx::Sc::ConstraintCore *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    memcpy(*(void **)(v2 + 32), a2, *(unsigned __int16 *)(v2 + 8));
    v3 = *(_QWORD *)(v2 + 104);
    if (!v3)
      v3 = *(_QWORD *)(v2 + 112);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 72) + 1904) + 96))(*(_QWORD *)(*(_QWORD *)(v3 + 72) + 1904), *(unsigned int *)(*(_QWORD *)(v2 + 96) + 40), v2);
  }
  return v2 != 0;
}

uint64_t physx::Sc::ConstraintSim::setBreakForceLL(uint64_t this, double a2, float a3)
{
  float v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(float *)&a2;
  v5 = this;
  v6 = *(_BYTE *)(this + 120);
  LODWORD(a2) = 2139095039;
  if (v4 >= 3.4028e38 && a3 >= 3.4028e38)
    v7 = 0;
  else
    v7 = 2;
  if (v7 != (v6 & 2))
  {
    if (v4 >= 3.4028e38 && a3 >= 3.4028e38)
    {
      if ((*(_BYTE *)(this + 120) & 4) != 0)
      {
        v8 = *(_QWORD *)(this + 80);
        v9 = this;
        this = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v8 + 2232, &v9);
        *(_BYTE *)(v9 + 120) &= ~4u;
        v6 = *(_BYTE *)(v5 + 120);
      }
      *(_BYTE *)(v5 + 120) = v6 & 0xFD;
    }
    else
    {
      *(_BYTE *)(this + 120) = v6 | 2;
      if ((*(_BYTE *)(*(_QWORD *)(this + 96) + 29) & 0x20) != 0)
        this = (uint64_t)physx::Sc::Scene::addActiveBreakableConstraint(*(int32x2_t **)(this + 80), this, *(int8x8_t *)&a2);
    }
  }
  *(float *)v5 = v4;
  *(float *)(v5 + 4) = a3;
  return this;
}

_QWORD *physx::Sc::ConstraintSim::preBodiesChange(_QWORD *this, int8x8_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = this;
  v3 = this[13];
  if (v3 && (v4 = *(_QWORD *)(v3 + 200)) != 0 || (v5 = this[14]) != 0 && (v4 = *(_QWORD *)(v5 + 200)) != 0)
    this = (_QWORD *)physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(this[10] + 2056), v4, (physx::Sc::ConstraintSim *)this, a2);
  if ((v2[15] & 8) == 0)
    this = (_QWORD *)physx::Sc::ConstraintInteraction::destroy((physx::Sc::ConstraintInteraction *)v2[12]);
  v6 = (_QWORD *)v2[12];
  if (v6)
  {
    v7 = *(_QWORD *)(v2[10] + 4360);
    --*(_DWORD *)(v7 + 548);
    *v6 = *(_QWORD *)(v7 + 560);
    *(_QWORD *)(v7 + 560) = v6;
  }
  v2[12] = 0;
  return this;
}

_QWORD *physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(_QWORD *this, int32x2_t *a2, int8x8_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;

  v3 = this[1];
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 != v3)
  {
    v5 = 0;
    do
    {
      v3 = v4;
      v4 = *(_QWORD *)(v4 + 8);
      --v5;
    }
    while (v3 != v4);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)this[1];
        this[1] = v3;
        this = v6;
      }
      while (!__CFADD__(v5++, 1));
    }
  }
  if ((*(_BYTE *)(v3 + 88) & 4) == 0)
    return physx::Sc::ConstraintProjectionManager::addToPendingTreeUpdates(a2, v3, a3);
  return this;
}

_QWORD *physx::Sc::ConstraintProjectionManager::addToPendingTreeUpdates(int32x2_t *a1, uint64_t a2, int8x8_t a3)
{
  _QWORD *result;
  uint64_t v5;
  char v6;

  v5 = a2;
  v6 = 0;
  result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1 + 79, &v5, &v6, a3);
  if (!v6)
    *result = v5;
  *(_BYTE *)(a2 + 88) |= 4u;
  return result;
}

physx::Sc::ConstraintInteraction *physx::Sc::ConstraintInteraction::ConstraintInteraction(physx::Sc::ConstraintInteraction *this, physx::Sc::ConstraintSim *a2, physx::Sc::RigidSim *a3, physx::Sc::RigidSim *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = -1;
  *((_DWORD *)this + 6) = -1;
  *((_WORD *)this + 14) = 516;
  *((_BYTE *)this + 30) = 0;
  *((_QWORD *)this + 4) = a2;
  physx::Sc::activateInteraction(this, 0, a3, (int8x8_t)-1);
  physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)this, this);
  physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 1), this);
  v5 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v5 + 104);
  v6 = *(_QWORD *)(v5 + 112);
  if (v7)
  {
    *(_WORD *)(v7 + 180) |= 0x100u;
    ++*(_DWORD *)(*(_QWORD *)(v7 + 136) + 148);
  }
  if (v6)
  {
    *(_WORD *)(v6 + 180) |= 0x100u;
    ++*(_DWORD *)(*(_QWORD *)(v6 + 136) + 148);
  }
  if (!v7)
  {
    v8 = 4294967168;
    if (v6)
      goto LABEL_7;
LABEL_9:
    v9 = -128;
    goto LABEL_10;
  }
  v8 = *(unsigned int *)(v7 + 176);
  if (!v6)
    goto LABEL_9;
LABEL_7:
  v9 = *(_DWORD *)(v6 + 176);
LABEL_10:
  *((_DWORD *)this + 10) = physx::IG::SimpleIslandManager::addConstraint(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 1880), v5, v8, v9, (uint64_t)this);
  return this;
}

uint64_t physx::Sc::ConstraintInteraction::destroy(physx::Sc::ConstraintInteraction *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  physx::Sc::Interaction::setClean(this, 1);
  v2 = *(_QWORD *)(*(_QWORD *)this + 72);
  if ((~*(unsigned __int8 *)(*((_QWORD *)this + 4) + 120) & 6) == 0)
  {
    v14 = *((_QWORD *)this + 4);
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v2 + 2232, &v14);
    *(_BYTE *)(v14 + 120) &= ~4u;
  }
  v3 = *((_DWORD *)this + 10);
  if (v3 != -1)
    physx::IG::SimpleIslandManager::removeConnection(*(_QWORD *)(v2 + 1880), v3);
  *((_DWORD *)this + 10) = -1;
  physx::Sc::ActorSim::unregisterInteractionFromActor(*(_QWORD *)this, this);
  result = physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 1), this);
  v5 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v5 + 104);
  v6 = *(_QWORD *)(v5 + 112);
  if (!v7)
  {
LABEL_9:
    if (!v6)
      goto LABEL_17;
    goto LABEL_12;
  }
  v8 = *(_DWORD *)(v7 + 52);
  v9 = *(uint64_t **)(v7 + 40);
  --*(_DWORD *)(*(_QWORD *)(v7 + 136) + 148);
  while (v8)
  {
    --v8;
    v10 = *v9++;
    if (*(_BYTE *)(v10 + 28) == 4)
      goto LABEL_9;
  }
  *(_WORD *)(v7 + 180) &= ~0x100u;
  if (v6)
  {
LABEL_12:
    v11 = *(_DWORD *)(v6 + 52);
    v12 = *(uint64_t **)(v6 + 40);
    --*(_DWORD *)(*(_QWORD *)(v6 + 136) + 148);
    while (v11)
    {
      --v11;
      v13 = *v12++;
      if (*(_BYTE *)(v13 + 28) == 4)
        goto LABEL_17;
    }
    *(_WORD *)(v6 + 180) &= ~0x100u;
  }
LABEL_17:
  *((_BYTE *)this + 29) &= ~0x20u;
  return result;
}

uint64_t physx::Sc::ConstraintInteraction::onActivate_(physx::Sc::ConstraintInteraction *this, void *a2, int8x8_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)(v3 + 104);
  v4 = *(_QWORD *)(v3 + 112);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 184) < 0xFFFFFFFE;
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v6 = 1;
    if (v4)
    {
LABEL_3:
      v7 = *(_DWORD *)(v4 + 184) < 0xFFFFFFFE;
      if (!v5)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v7 = 1;
  if (v5)
LABEL_4:
    LODWORD(v5) = (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 44) & 1) == 0;
LABEL_5:
  if (v4)
    LODWORD(v4) = (*(_BYTE *)(*(_QWORD *)(v4 + 80) + 44) & 1) == 0;
  v8 = (v6 || v7) & (v5 | v4);
  if ((_DWORD)v8 == 1)
  {
    *((_BYTE *)this + 29) |= 0x20u;
    if ((*(_BYTE *)(v3 + 120) & 6) == 2)
      physx::Sc::Scene::addActiveBreakableConstraint(*(int32x2_t **)(*(_QWORD *)this + 72), v3, a3);
  }
  return v8;
}

uint64_t physx::Sc::ConstraintInteraction::onDeactivate_(physx::Sc::ConstraintInteraction *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v2 + 104);
  v3 = *(_QWORD *)(v2 + 112);
  if (v4)
  {
    v5 = (*(_BYTE *)(*(_QWORD *)(v4 + 80) + 44) & 1) == 0;
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (v3)
    {
LABEL_3:
      v6 = (*(_BYTE *)(*(_QWORD *)(v3 + 80) + 44) & 1) == 0;
      if (!v4)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  v6 = 0;
  if (!v4)
  {
LABEL_8:
    if (!v3 || *(_DWORD *)(v3 + 184) > 0xFFFFFFFD)
      goto LABEL_12;
    goto LABEL_10;
  }
LABEL_7:
  if (*(_DWORD *)(v4 + 184) >= 0xFFFFFFFE)
    goto LABEL_8;
LABEL_10:
  if (v5 || v6)
    return 0;
LABEL_12:
  if ((~*(unsigned __int8 *)(v2 + 120) & 6) == 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)this + 72);
    v9 = *((_QWORD *)this + 4);
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v8 + 2232, &v9);
    *(_BYTE *)(v9 + 120) &= ~4u;
  }
  *((_BYTE *)this + 29) &= ~0x20u;
  return 1;
}

physx::Sc::ConstraintProjectionManager *physx::Sc::ConstraintProjectionManager::ConstraintProjectionManager(physx::Sc::ConstraintProjectionManager *this)
{
  *((_QWORD *)this + 68) = 0x4000000000;
  *((_BYTE *)this + 528) = 1;
  *((_QWORD *)this + 67) = (char *)this + 16;
  *((_QWORD *)this + 69) = 32;
  *((_DWORD *)this + 140) = 3072;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_QWORD *)this + 77) = -3233808384;
  *((_QWORD *)this + 78) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 576, 0x40u, 0);
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_QWORD *)this + 84) = -3233808384;
  *((_QWORD *)this + 85) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 632, 0x40u, 0);
  return this;
}

_QWORD *physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(int32x2_t *this, physx::Sc::ConstraintSim *a2, int8x8_t a3)
{
  _QWORD *result;
  physx::Sc::ConstraintSim *v5;
  char v6;

  v5 = a2;
  v6 = 0;
  result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 72, &v5, &v6, a3);
  if (!v6)
    *result = v5;
  *((_BYTE *)a2 + 120) |= 1u;
  return result;
}

uint64_t physx::Sc::ConstraintProjectionManager::addToGroup(uint64_t this, physx::Sc::BodySim *a2, physx::Sc::BodySim *a3, physx::Sc::ConstraintSim *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v5 = this;
  v6 = *((_QWORD *)a2 + 25);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v7 + 8);
    if (v8 != v7)
    {
      v9 = 0;
      do
      {
        v7 = v8;
        v8 = *(_QWORD *)(v8 + 8);
        --v9;
      }
      while (v7 != v8);
      if (v9)
      {
        do
        {
          v10 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = v7;
          v6 = v10;
          v11 = __CFADD__(v9++, 1);
        }
        while (!v11);
      }
    }
    if (*(_QWORD *)(v7 + 40))
      this = physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v7);
    if (!a3)
      return this;
LABEL_15:
    v13 = *((_QWORD *)a3 + 25);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      v15 = *(_QWORD *)(v14 + 8);
      if (v15 != v14)
      {
        v16 = 0;
        do
        {
          v14 = v15;
          v15 = *(_QWORD *)(v15 + 8);
          --v16;
        }
        while (v14 != v15);
        if (v16)
        {
          do
          {
            v17 = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = v14;
            v13 = v17;
            v11 = __CFADD__(v16++, 1);
          }
          while (!v11);
        }
      }
      if (*(_QWORD *)(v14 + 40))
        this = physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v14);
    }
    else
    {
      v14 = *(_QWORD *)(v5 + 568);
      if (!v14)
      {
        this = physx::shdfnd::PoolBase<physx::Sc::ConstraintGroupNode,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::allocateSlab(v5 + 8);
        v14 = *(_QWORD *)(v5 + 568);
      }
      *(_QWORD *)(v5 + 568) = *(_QWORD *)v14;
      ++*(_DWORD *)(v5 + 556);
      *(_QWORD *)v14 = a3;
      *(_QWORD *)(v14 + 8) = v14;
      *(_QWORD *)(v14 + 16) = v14;
      *(_DWORD *)(v14 + 24) = 0;
      *(_OWORD *)(v14 + 73) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *((_QWORD *)a3 + 25) = v14;
    }
    if (v7 != v14)
    {
      v18 = *(_DWORD *)(v14 + 24);
      if (*(_DWORD *)(v7 + 24) <= v18)
      {
        *(_DWORD *)(v14 + 24) = v18 + 1;
        v19 = v14;
      }
      else
      {
        v19 = v7;
        v7 = v14;
      }
      *(_QWORD *)(v7 + 8) = v19;
      *(_QWORD *)(*(_QWORD *)(v19 + 16) + 32) = v7;
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v7 + 16);
    }
    return this;
  }
  v7 = *(_QWORD *)(this + 568);
  if (!v7)
  {
    this = physx::shdfnd::PoolBase<physx::Sc::ConstraintGroupNode,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::allocateSlab(this + 8);
    v7 = *(_QWORD *)(v5 + 568);
  }
  *(_QWORD *)(v5 + 568) = *(_QWORD *)v7;
  ++*(_DWORD *)(v5 + 556);
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = v7;
  *(_QWORD *)(v7 + 16) = v7;
  *(_DWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 73) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *((_QWORD *)a2 + 25) = v7;
  if (a3)
    goto LABEL_15;
  return this;
}

int32x2_t *physx::Sc::ConstraintProjectionManager::markConnectedConstraintsForUpdate(int32x2_t *this, physx::Sc::BodySim *a2, physx::Sc::ConstraintSim *a3, int8x8_t a4)
{
  int v4;
  int32x2_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_DWORD *)a2 + 13);
  if (v4)
  {
    v6 = this;
    v7 = (uint64_t *)*((_QWORD *)a2 + 5);
    do
    {
      v9 = *v7++;
      v8 = v9;
      if (*(_BYTE *)(v9 + 28) == 4)
      {
        v10 = *(_QWORD *)(v8 + 32);
        if ((physx::Sc::ConstraintSim *)v10 != a3
          && (**(_WORD **)(v10 + 88) & 6) != 0
          && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 80) + 1888) + 232)
                       + 32 * *(unsigned int *)(v10 + 72)
                       + 12) == 0
          && (*(_BYTE *)(v10 + 120) & 1) == 0)
        {
          this = (int32x2_t *)physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(v6, (physx::Sc::ConstraintSim *)v10, a4);
        }
      }
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t physx::Sc::ConstraintProjectionManager::processPendingUpdates(uint64_t this, physx::PxcScratchAllocator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v23;
  uint64_t v24;
  physx::Sc::ConstraintSim *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  physx::Sc::BodySim *v46;
  physx::Sc::ConstraintGroupNode *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  physx::Sc::BodySim *v74;
  _DWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v90;
  uint64_t v92;
  _QWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;

  v9 = this;
  v10 = *(unsigned int *)(this + 684);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(this + 640);
    do
    {
      v12 = *v11;
      *(_BYTE *)(v12 + 88) = *(_BYTE *)(*v11 + 88) & 0xFB;
      if (*(_QWORD *)(v12 + 40))
        physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v12);
      this = physx::Sc::ConstraintProjectionTree::buildProjectionTrees(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v11;
      --v10;
    }
    while (v10);
    v13 = *(_DWORD *)(v9 + 668);
    if (v13 && *(_DWORD *)(v9 + 684))
    {
      this = (uint64_t)memset(*(void **)(v9 + 656), 255, (4 * v13));
      v14 = *(_QWORD *)(v9 + 648);
      v15 = (*(_DWORD *)(v9 + 664) - 1);
      if (*(_DWORD *)(v9 + 664) == 1)
      {
        v23 = 0;
      }
      else
      {
        _X10 = v14 + 128;
        v17 = 1;
        do
        {
          __asm { PRFM            #0, [X10] }
          *(_DWORD *)(_X10 - 128) = v17++;
          _X10 += 4;
          --v15;
        }
        while (v15);
        v23 = (*(_DWORD *)(v9 + 664) - 1);
      }
      *(_DWORD *)(v14 + 4 * v23) = -1;
      *(_DWORD *)(v9 + 676) = 0;
      *(_DWORD *)(v9 + 684) = 0;
    }
  }
  v96 = *(unsigned int *)(v9 + 628);
  if (!(_DWORD)v96)
    return this;
  v24 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
  if (v24)
  {
    *(_QWORD *)v24 = 0;
    *(_DWORD *)(v24 + 8) = 0;
  }
  v26 = 0;
  v94 = (_DWORD *)v24;
  v95 = *(_QWORD *)(v9 + 584);
  v27 = v24;
  do
  {
    v28 = *(_QWORD *)(v95 + 8 * v26);
    *(_BYTE *)(v28 + 120) &= ~1u;
    v29 = *(_QWORD *)(v28 + 104);
    if (v29)
    {
      if (!*(_QWORD *)(v29 + 200))
      {
        v30 = *(_DWORD *)(v29 + 52);
        if (v30)
        {
          v31 = *(uint64_t **)(v29 + 40);
          do
          {
            v33 = *v31++;
            v32 = v33;
            if (*(_BYTE *)(v33 + 28) == 4)
            {
              v34 = *(_QWORD *)(v32 + 32);
              if (v34 != v28 && (*(_BYTE *)(v34 + 120) & 1) == 0 && v27)
              {
                v35 = *(unsigned int *)(v27 + 8);
                if (v35 > 0x3F)
                {
                  v36 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                  if (v36)
                  {
                    *(_QWORD *)v36 = 0;
                    *(_QWORD *)(v36 + 16) = v34;
                    *(_QWORD *)v27 = v36;
                    v27 = v36;
                    *(_DWORD *)(v36 + 8) = 1;
                  }
                }
                else
                {
                  *(_QWORD *)(v27 + 8 * v35 + 16) = v34;
                  *(_DWORD *)(v27 + 8) = v35 + 1;
                }
              }
            }
            --v30;
          }
          while (v30);
        }
      }
    }
    v37 = *(_QWORD *)(v28 + 112);
    if (!v37)
    {
      v46 = 0;
      v45 = *(_QWORD *)(v28 + 104);
      goto LABEL_48;
    }
    if (!*(_QWORD *)(v37 + 200))
    {
      v38 = *(_DWORD *)(v37 + 52);
      if (v38)
      {
        v39 = *(uint64_t **)(v37 + 40);
        do
        {
          v41 = *v39++;
          v40 = v41;
          if (*(_BYTE *)(v41 + 28) == 4)
          {
            v42 = *(_QWORD *)(v40 + 32);
            if (v42 != v28 && (*(_BYTE *)(v42 + 120) & 1) == 0 && v27)
            {
              v43 = *(unsigned int *)(v27 + 8);
              if (v43 > 0x3F)
              {
                v44 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                if (v44)
                {
                  *(_QWORD *)v44 = 0;
                  *(_QWORD *)(v44 + 16) = v42;
                  *(_QWORD *)v27 = v44;
                  v27 = v44;
                  *(_DWORD *)(v44 + 8) = 1;
                }
              }
              else
              {
                *(_QWORD *)(v27 + 8 * v43 + 16) = v42;
                *(_DWORD *)(v27 + 8) = v43 + 1;
              }
            }
          }
          --v38;
        }
        while (v38);
        v37 = *(_QWORD *)(v28 + 112);
      }
    }
    v45 = *(_QWORD *)(v28 + 104);
    if (v45)
    {
      v46 = (physx::Sc::BodySim *)v37;
LABEL_48:
      v37 = v45;
      goto LABEL_49;
    }
    v46 = 0;
    if (!v37)
      goto LABEL_48;
LABEL_49:
    physx::Sc::ConstraintProjectionManager::addToGroup(v9, (physx::Sc::BodySim *)v37, v46, v25);
    ++v26;
  }
  while (v26 != v96);
  if (v94)
  {
    v53 = v94;
    if (v94[2])
      goto LABEL_56;
LABEL_55:
    v53 = *(_DWORD **)v53;
    if (v53)
    {
LABEL_56:
      v54 = v53 + 4;
      v55 = 1;
      while (1)
      {
        v56 = *(_QWORD *)v54;
        *(_BYTE *)(v56 + 120) = *(_BYTE *)(*(_QWORD *)v54 + 120) & 0xFE;
        v57 = *(_QWORD *)(v56 + 104);
        if (v57)
        {
          if (!*(_QWORD *)(v57 + 200))
          {
            v58 = *(_DWORD *)(v57 + 52);
            if (v58)
            {
              v59 = *(uint64_t **)(v57 + 40);
              do
              {
                v61 = *v59++;
                v60 = v61;
                if (*(_BYTE *)(v61 + 28) == 4)
                {
                  v62 = *(_QWORD *)(v60 + 32);
                  if (v62 != v56 && (*(_BYTE *)(v62 + 120) & 1) == 0 && v27)
                  {
                    v63 = *(unsigned int *)(v27 + 8);
                    if (v63 > 0x3F)
                    {
                      v64 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                      if (v64)
                      {
                        *(_QWORD *)v64 = 0;
                        *(_QWORD *)(v64 + 16) = v62;
                        *(_QWORD *)v27 = v64;
                        v27 = v64;
                        *(_DWORD *)(v64 + 8) = 1;
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v27 + 8 * v63 + 16) = v62;
                      *(_DWORD *)(v27 + 8) = v63 + 1;
                    }
                  }
                }
                --v58;
              }
              while (v58);
            }
          }
        }
        v65 = *(_QWORD *)(v56 + 112);
        if (!v65)
          break;
        if (!*(_QWORD *)(v65 + 200))
        {
          v66 = *(_DWORD *)(v65 + 52);
          if (v66)
          {
            v67 = *(uint64_t **)(v65 + 40);
            do
            {
              v69 = *v67++;
              v68 = v69;
              if (*(_BYTE *)(v69 + 28) == 4)
              {
                v70 = *(_QWORD *)(v68 + 32);
                if (v70 != v56 && (*(_BYTE *)(v70 + 120) & 1) == 0 && v27)
                {
                  v71 = *(unsigned int *)(v27 + 8);
                  if (v71 > 0x3F)
                  {
                    v72 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                    if (v72)
                    {
                      *(_QWORD *)v72 = 0;
                      *(_QWORD *)(v72 + 16) = v70;
                      *(_QWORD *)v27 = v72;
                      v27 = v72;
                      *(_DWORD *)(v72 + 8) = 1;
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v27 + 8 * v71 + 16) = v70;
                    *(_DWORD *)(v27 + 8) = v71 + 1;
                  }
                }
              }
              --v66;
            }
            while (v66);
            v65 = *(_QWORD *)(v56 + 112);
          }
        }
        v73 = *(_QWORD *)(v56 + 104);
        if (v73)
        {
          v74 = (physx::Sc::BodySim *)v65;
LABEL_87:
          v65 = v73;
          goto LABEL_88;
        }
        v74 = 0;
        if (!v65)
          goto LABEL_87;
LABEL_88:
        physx::Sc::ConstraintProjectionManager::addToGroup(v9, (physx::Sc::BodySim *)v65, v74, v25);
        if (v53[2] <= v55)
          goto LABEL_55;
        v75 = &v53[2 * v55];
        v55 = (v55 + 1);
        v54 = v75 + 4;
      }
      v74 = 0;
      v73 = *(_QWORD *)(v56 + 104);
      goto LABEL_87;
    }
  }
  v76 = 0;
  v77 = v94;
  do
  {
    v78 = *(_QWORD *)(v95 + 8 * v76);
    v79 = *(_QWORD *)(v78 + 104);
    if (!v79)
      v79 = *(_QWORD *)(v78 + 112);
    v80 = *(_QWORD *)(v79 + 200);
    this = *(_QWORD *)(v80 + 8);
    v81 = *(_QWORD *)(this + 8);
    if (v81 != this)
    {
      v82 = 0;
      do
      {
        this = v81;
        v83 = v82;
        v81 = *(_QWORD *)(v81 + 8);
        ++v82;
      }
      while (this != v81);
      if (v82)
      {
        v84 = ~v83;
        do
        {
          v85 = *(_QWORD *)(v80 + 8);
          *(_QWORD *)(v80 + 8) = this;
          v80 = v85;
        }
        while (!__CFADD__(v84++, 1));
      }
    }
    if (!*(_QWORD *)(this + 40))
      this = physx::Sc::ConstraintProjectionTree::buildProjectionTrees(this, v47, v48, (uint64_t)v25, v49, v50, v51, v52);
    ++v76;
  }
  while (v76 != v96);
  v86 = *(_DWORD *)(v9 + 612);
  if (v86 && *(_DWORD *)(v9 + 628))
  {
    this = (uint64_t)memset(*(void **)(v9 + 600), 255, (4 * v86));
    v87 = *(_QWORD *)(v9 + 592);
    v88 = (*(_DWORD *)(v9 + 608) - 1);
    if (*(_DWORD *)(v9 + 608) == 1)
    {
      v92 = 0;
    }
    else
    {
      _X10 = v87 + 128;
      v90 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v90++;
        _X10 += 4;
        --v88;
      }
      while (v88);
      v92 = (*(_DWORD *)(v9 + 608) - 1);
    }
    *(_DWORD *)(v87 + 4 * v92) = -1;
    *(_DWORD *)(v9 + 620) = 0;
    *(_DWORD *)(v9 + 628) = 0;
  }
  if (v94)
  {
    do
    {
      v93 = (_QWORD *)*v77;
      this = physx::PxcScratchAllocator::free((uint64_t)a2, (unint64_t)v77);
      v77 = v93;
    }
    while (v93);
  }
  return this;
}

uint64_t physx::Sc::ConstraintProjectionManager::invalidateGroup(int32x2_t *this, uint64_t a2, physx::Sc::ConstraintSim *a3, int8x8_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      v6 = v7;
      v7 = *(_QWORD *)(v7 + 8);
      --v8;
    }
    while (v6 != v7);
    if (v8)
    {
      do
      {
        v9 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v6;
        a2 = v9;
      }
      while (!__CFADD__(v8++, 1));
    }
  }
  if ((*(_BYTE *)(v6 + 88) & 4) != 0)
  {
    v13 = v6;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[79], &v13);
    *(_BYTE *)(v6 + 88) &= ~4u;
  }
  do
  {
    result = (uint64_t)physx::Sc::ConstraintProjectionManager::markConnectedConstraintsForUpdate(this, *(physx::Sc::BodySim **)v6, a3, a4);
    *(_QWORD *)(*(_QWORD *)v6 + 200) = 0;
    v12 = *(_QWORD *)(v6 + 32);
    if (*(_QWORD *)(v6 + 40))
      result = physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v6);
    --this[69].i32[1];
    *(int32x2_t *)v6 = this[71];
    this[71] = (int32x2_t)v6;
    v6 = v12;
  }
  while (v12);
  return result;
}

uint64_t physx::Sc::ConstraintProjectionTree::buildProjectionTrees(uint64_t this, physx::Sc::ConstraintGroupNode *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  _BYTE *v28;
  char v29;
  char v30;
  char v31;
  _BYTE *v32;
  int v33;
  int v34;
  _BYTE *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _BYTE *v58;
  unsigned int v59;
  _BYTE *v60;
  unsigned int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  int v91;
  char v92;
  unsigned int v93;
  unsigned int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unsigned int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD **v105;
  _QWORD *v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  _QWORD *v111;
  _BYTE *v112;
  __int128 v113;
  uint64_t v114;
  _BYTE *v115;
  _QWORD *v116;
  int v117;
  _QWORD **v118;
  _QWORD *v119;
  _QWORD *v120;
  char v121;
  uint64_t v122;
  _QWORD *v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[4];
  uint64_t v127;
  _BYTE *v128;
  char v129;
  void *v130;
  char v131;
  _BYTE v132[1544];
  _BYTE *v133;
  uint64_t v134;
  _BYTE v135[136];
  uint64_t v136;

  v8 = this;
  v9 = 0;
  v136 = *MEMORY[0x24BDAC8D0];
  v134 = 0x4000000000;
  v132[1536] = 1;
  v133 = v132;
  v10 = this;
  do
  {
    v11 = *(_QWORD *)v10;
    v12 = *(_BYTE *)(v10 + 88);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v10 + 80) + 44) & 1) != 0)
    {
      *(_BYTE *)(v10 + 88) = v12 | 1;
      goto LABEL_42;
    }
    *(_BYTE *)(v10 + 88) = v12 & 0xFE;
    LODWORD(v125) = 0;
    v124 = (unint64_t)v10;
    v13 = *(_DWORD *)(v11 + 52);
    if (!v13)
      goto LABEL_39;
    v14 = 0;
    v15 = 0;
    v16 = *(uint64_t **)(v11 + 40);
    v17 = 402653184;
    do
    {
      v19 = *v16++;
      v18 = v19;
      if (*(_BYTE *)(v19 + 28) != 4)
        goto LABEL_32;
      v20 = *(_QWORD *)(v18 + 32);
      v21 = *(_QWORD *)(v20 + 104);
      if (v21 == v11)
      {
        v22 = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 2;
        this = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 4;
        v21 = *(_QWORD *)(v20 + 112);
        if (!v21)
          goto LABEL_18;
      }
      else
      {
        v22 = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 4;
        this = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 2;
        if (!v21)
          goto LABEL_18;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v21 + 80) + 44) & 1) == 0)
      {
        if (v22)
          v23 = (_DWORD)this == 0;
        else
          v23 = 1;
        if (v23)
        {
          if ((_DWORD)this)
          {
            v17 = 0;
            v15 &= 0xE7FFFFFF;
          }
          else
          {
            if (!v22)
              goto LABEL_31;
            v15 |= v17 & 0x18000000 | 0x80000000;
          }
        }
        else
        {
          v17 &= ~0x10000000u;
          v15 &= ~0x10000000u;
        }
        ++v9;
LABEL_31:
        ++v15;
        goto LABEL_32;
      }
LABEL_18:
      if ((_DWORD)this)
      {
        v15 &= 0xE7FFFFFF;
        v17 = 0;
        ++v9;
        v24 = 0x80000000;
      }
      else
      {
        v24 = 0;
      }
      if (v21)
        v25 = 0x20000000;
      else
        v25 = 0x40000000;
      v26 = v24 | v25;
      if (v26 > v15 || v14 == 0)
        v14 = v20;
      v15 |= v26;
LABEL_32:
      --v13;
    }
    while (v13);
    LODWORD(v125) = v15;
    *((_QWORD *)&v124 + 1) = v14;
    if (v15 >> 28 >= 9)
      *(_BYTE *)(v10 + 88) = v12 | 1;
LABEL_39:
    if ((HIDWORD(v134) & 0x7FFFFFFFu) <= v134)
    {
      this = physx::shdfnd::Array<physx::Sc::BodyRank,physx::shdfnd::InlineAllocator<1536u,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>>::growAndPushBack((uint64_t)v132, &v124);
    }
    else
    {
      v28 = &v133[24 * v134];
      *(_OWORD *)v28 = v124;
      *((_QWORD *)v28 + 2) = v125;
      LODWORD(v134) = v134 + 1;
    }
LABEL_42:
    v10 = *(_QWORD *)(v10 + 32);
  }
  while (v10);
  v29 = *(_BYTE *)(v8 + 88) & 7;
  v30 = v29 | 8;
  if (!v9)
    v30 = *(_BYTE *)(v8 + 88) & 7;
  if (v9 >= 5)
    v30 = v29 | 0x10;
  if (v9 >= 0x11)
    v30 = v29 | 0x20;
  v31 = v29 | 0x40;
  if (v9 < 0x41)
    v31 = v30;
  *(_BYTE *)(v8 + 88) = v31;
  if ((_DWORD)v134)
  {
    v32 = v133;
    v131 = 0;
    v130 = v135;
    v127 = 0x2000000000;
    v128 = v135;
    v129 = 0;
    v33 = v134 - 1;
    if ((int)v134 - 1 >= 1)
    {
      v34 = 0;
      v35 = v135;
      memset(v135, 0, 128);
      while (1)
      {
        if (v33 <= v34)
          goto LABEL_86;
        if ((v33 - v34) <= 4)
        {
          v72 = v34;
          v73 = v34 + 1;
          v74 = (uint64_t)&v32[24 * v34 + 40];
          do
          {
            v75 = 0;
            v76 = v72++;
            v77 = (unsigned int *)v74;
            v78 = v76;
            do
            {
              v79 = *v77;
              v77 += 6;
              if (v79 > *(_DWORD *)&v32[24 * v78 + 16])
                v78 = v73 + v75;
              ++v75;
            }
            while (v76 + v75 < v33);
            if (v78 != (_DWORD)v76)
            {
              v80 = &v32[24 * v78];
              v81 = &v32[24 * v76];
              v82 = *((_QWORD *)v80 + 2);
              v83 = *(_OWORD *)v80;
              v84 = *((_QWORD *)v81 + 2);
              *(_OWORD *)v80 = *(_OWORD *)v81;
              *((_QWORD *)v80 + 2) = v84;
              *(_OWORD *)v81 = v83;
              *((_QWORD *)v81 + 2) = v82;
            }
            ++v73;
            v74 += 24;
          }
          while (v72 != v33);
LABEL_86:
          v85 = v127;
          if (!(_DWORD)v127)
          {
            if (v129)
              v86 = v35 == 0;
            else
              v86 = 1;
            if (!v86)
            {
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v35);
              if (v131)
                physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v130, (char *)v130);
            }
            break;
          }
          LODWORD(v127) = v127 - 1;
          v33 = *(_DWORD *)&v35[4 * (v85 - 1)];
          LODWORD(v127) = v85 - 2;
          v34 = *(_DWORD *)&v35[4 * (v85 - 2)];
        }
        else
        {
          v36 = v34 + v33;
          if (v34 + v33 < 0 != __OFADD__(v34, v33))
            ++v36;
          v37 = &v32[24 * (v36 >> 1)];
          v38 = &v32[24 * v34];
          v39 = *((_DWORD *)v38 + 4);
          if (*((_DWORD *)v37 + 4) > v39)
          {
            v40 = *((_QWORD *)v38 + 2);
            v41 = *(_OWORD *)v38;
            v42 = *((_QWORD *)v37 + 2);
            *(_OWORD *)v38 = *(_OWORD *)v37;
            *((_QWORD *)v38 + 2) = v42;
            *(_OWORD *)v37 = v41;
            *((_QWORD *)v37 + 2) = v40;
            v39 = *((_DWORD *)v38 + 4);
          }
          v43 = &v32[24 * v33];
          v44 = *((_DWORD *)v43 + 4);
          if (v44 > v39)
          {
            v45 = *((_QWORD *)v38 + 2);
            v46 = *(_OWORD *)v38;
            v47 = *((_QWORD *)v43 + 2);
            *(_OWORD *)v38 = *(_OWORD *)v43;
            *((_QWORD *)v38 + 2) = v47;
            *(_OWORD *)v43 = v46;
            *((_QWORD *)v43 + 2) = v45;
            v44 = *((_DWORD *)v43 + 4);
          }
          if (v44 > *((_DWORD *)v37 + 4))
          {
            v48 = *((_QWORD *)v37 + 2);
            v49 = *(_OWORD *)v37;
            v50 = *((_QWORD *)v43 + 2);
            *(_OWORD *)v37 = *(_OWORD *)v43;
            *((_QWORD *)v37 + 2) = v50;
            *(_OWORD *)v43 = v49;
            *((_QWORD *)v43 + 2) = v48;
          }
          v51 = v33 - 1;
          v52 = &v32[24 * v51];
          v53 = *((_QWORD *)v37 + 2);
          v54 = *(_OWORD *)v37;
          v55 = *((_QWORD *)v52 + 2);
          *(_OWORD *)v37 = *(_OWORD *)v52;
          *((_QWORD *)v37 + 2) = v55;
          *(_OWORD *)v52 = v54;
          *((_QWORD *)v52 + 2) = v53;
          v56 = v34;
          while (1)
          {
            v57 = *((_DWORD *)v52 + 4);
            v58 = &v32[24 * v56];
            do
            {
              v59 = *((_DWORD *)v58 + 10);
              v58 += 24;
              ++v56;
            }
            while (v59 > v57);
            v60 = &v32[24 * (int)v51];
            do
            {
              v61 = *((_DWORD *)v60 - 2);
              v60 -= 24;
              LODWORD(v51) = v51 - 1;
            }
            while (v57 > v61);
            if (v56 >= (int)v51)
              break;
            v62 = *((_QWORD *)v58 + 2);
            v63 = *(_OWORD *)v58;
            v64 = *((_QWORD *)v60 + 2);
            *(_OWORD *)v58 = *(_OWORD *)v60;
            *((_QWORD *)v58 + 2) = v64;
            *(_OWORD *)v60 = v63;
            *((_QWORD *)v60 + 2) = v62;
          }
          v65 = *((_QWORD *)v58 + 2);
          v66 = *(_OWORD *)v58;
          v67 = *((_QWORD *)v52 + 2);
          *(_OWORD *)v58 = *(_OWORD *)v52;
          *((_QWORD *)v58 + 2) = v67;
          *(_OWORD *)v52 = v66;
          *((_QWORD *)v52 + 2) = v65;
          v68 = v127;
          v69 = HIDWORD(v127) - 1;
          if (v56 - v34 >= v33 - v56)
          {
            if (v127 >= v69)
            {
              physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>::grow((uint64_t)v126);
              v68 = v127;
              v35 = v128;
            }
            LODWORD(v127) = v68 + 1;
            *(_DWORD *)&v35[4 * v68] = v56 + 1;
            v71 = v127;
            LODWORD(v127) = v127 + 1;
            *(_DWORD *)&v35[4 * v71] = v33;
            v33 = v56 - 1;
          }
          else
          {
            if (v127 >= v69)
            {
              physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>::grow((uint64_t)v126);
              v68 = v127;
              v35 = v128;
            }
            LODWORD(v127) = v68 + 1;
            *(_DWORD *)&v35[4 * v68] = v34;
            v70 = v127;
            LODWORD(v127) = v127 + 1;
            *(_DWORD *)&v35[4 * v70] = v56 - 1;
            v34 = v56 + 1;
          }
        }
      }
    }
    if ((_DWORD)v134
      && (v87 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v134, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScConstraintProjectionTree.cpp", 262)) != 0)
    {
      v88 = (_QWORD *)v87;
      v122 = v8;
      v123 = (_QWORD *)v87;
      v89 = 0;
      LODWORD(v90) = 0;
      v91 = 0;
      v92 = 1;
      v93 = -1879048192;
      v94 = v134;
      do
      {
        v95 = v92;
        if (v90 < v94)
        {
          v96 = v94;
          v97 = v90;
          v98 = 24 * v90;
          v99 = v88;
          while (1)
          {
            v100 = &v133[v98];
            v101 = *(_DWORD *)&v133[v98 + 16];
            if (v101 < v93)
              break;
            v103 = (_QWORD *)*v100;
            v102 = v100[1];
            *(_QWORD *)(*v100 + 80) = v102;
            if ((v101 & 0x60000000) != 0)
            {
              *v99 = v103;
              v104 = 1;
            }
            else
            {
              v104 = physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v103, v102, v99);
            }
            v99 += v104;
            v103[6] = v89;
            ++v97;
            v98 += 24;
            v89 = v103;
            if (v96 == v97)
            {
              LODWORD(v90) = v96;
              v89 = v103;
              goto LABEL_106;
            }
          }
          LODWORD(v90) = v97;
LABEL_106:
          v88 = v123;
          if (v123 != v99)
          {
            v105 = (_QWORD **)v123;
            do
            {
              v106 = *v105++;
              v99 += physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v106, v106[10], v99);
            }
            while (v105 != v99);
          }
        }
        v90 = (v90 + v91);
        v107 = v134;
        if (v90 >= v134)
        {
          v91 = 0;
          v94 = v90;
        }
        else
        {
          v91 = 0;
          v108 = 24 * v90;
          v109 = v90;
          v94 = v90;
          do
          {
            v110 = v133;
            v111 = &v133[v108];
            if (*(_DWORD *)&v133[v108 + 16] >> 27 < 0x11u)
              break;
            if ((*(_BYTE *)(*v111 + 88) & 1) != 0)
            {
              ++v91;
            }
            else
            {
              *(_BYTE *)(*v111 + 88) |= 1u;
              v112 = &v110[24 * v94];
              v113 = *(_OWORD *)v111;
              *((_QWORD *)v112 + 2) = v111[2];
              *(_OWORD *)v112 = v113;
              ++v94;
              v107 = v134;
            }
            ++v109;
            v108 += 24;
          }
          while (v109 < v107);
        }
        v92 = 0;
        v93 = -2013265920;
      }
      while ((v95 & 1) != 0);
      if (v90 >= v107)
      {
        v116 = v89;
        v114 = v122;
      }
      else
      {
        v114 = v122;
        do
        {
          v115 = v133;
          v116 = *(_QWORD **)&v133[24 * v90];
          if ((v116[11] & 1) != 0)
          {
            v116 = v89;
          }
          else
          {
            *((_BYTE *)v116 + 88) |= 1u;
            v117 = physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v116, *(_QWORD *)&v115[24 * v90 + 8], v88);
            if (v117)
            {
              v118 = (_QWORD **)v123;
              v119 = &v123[v117];
              do
              {
                v120 = *v118++;
                v119 += physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v120, v120[10], v119);
              }
              while (v118 != v119);
            }
            v116[6] = v89;
            v107 = v134;
            v89 = v116;
            v88 = v123;
          }
          ++v90;
        }
        while (v90 < v107);
      }
      *(_QWORD *)(v114 + 40) = v116;
      this = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v88);
    }
    else
    {
      this = physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScConstraintProjectionTree.cpp", 405, "Allocating projection node queue failed!", a6, a7, a8, v121);
    }
  }
  if ((v134 & 0x8000000000000000) == 0 && (v134 & 0x7FFFFFFF00000000) != 0 && v133 != v132 && v133)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return this;
}

uint64_t physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  char v15;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 52);
  if (v4)
  {
    v5 = 0;
    v6 = *(uint64_t **)(v3 + 40);
    while (1)
    {
      v8 = *v6++;
      v7 = v8;
      if (*(_BYTE *)(v8 + 28) == 4)
      {
        v9 = *(_QWORD *)(v7 + 32);
        if (v9 != a2)
        {
          v10 = *(_QWORD *)(v9 + 104);
          if (v10 == v3)
          {
            v11 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 2;
            v12 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 4;
            v10 = *(_QWORD *)(v9 + 112);
            if (v10)
            {
LABEL_9:
              if ((*(_BYTE *)(*(_QWORD *)(v10 + 80) + 44) & 1) == 0)
              {
                if (v12)
                  v13 = v11 == 0;
                else
                  v13 = 0;
                if (!v13)
                {
                  v14 = *(_QWORD *)(v10 + 200);
                  v15 = *(_BYTE *)(v14 + 88);
                  if ((v15 & 1) == 0)
                  {
                    *a3++ = v14;
                    *(_QWORD *)(v14 + 72) = a1[8];
                    *(_QWORD *)(v14 + 80) = v9;
                    a1[8] = v14;
                    *(_QWORD *)(v14 + 56) = a1;
                    *(_BYTE *)(v14 + 88) = v15 | 1;
                    v5 = (v5 + 1);
                  }
                }
              }
            }
          }
          else
          {
            v11 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 4;
            v12 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 2;
            if (v10)
              goto LABEL_9;
          }
        }
      }
      if (!--v4)
        return v5;
    }
  }
  return 0;
}

uint64_t physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 40);
  do
  {
    v2 = v1;
    v1 = *(_QWORD *)(v1 + 48);
    do
    {
      v3 = *(_QWORD *)(v2 + 64);
      if (!v3)
      {
        v3 = *(_QWORD *)(v2 + 56);
        v4 = *(_QWORD *)(v2 + 72);
        if (v3)
          *(_QWORD *)(v3 + 64) = 0;
        *(_OWORD *)(v2 + 72) = 0uLL;
        *(_OWORD *)(v2 + 56) = 0uLL;
        *(_OWORD *)(v2 + 40) = 0uLL;
        if (v4)
          v3 = v4;
      }
      v2 = v3;
    }
    while (v3);
  }
  while (v1);
  *(_QWORD *)(result + 40) = 0;
  return result;
}

_QWORD *physx::Sc::ConstraintProjectionTree::projectPoseForTree(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  float32x2_t v10;
  __int32 v11;
  __int32 v12;
  __int128 v13;
  float32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  float32x2_t *v21;
  uint64_t v22;
  float32x2_t *v23;
  uint64_t v24;
  _QWORD v25[3];
  int v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[4];
  uint64_t v30;
  __int128 v31;
  float32x2_t v32;
  __int32 v33;
  __int128 v34;
  float32x2_t v35;
  __int32 v36;

  v3 = v25;
  v25[0] = *result;
  v25[1] = v25;
  v25[2] = v25;
  v26 = 0;
  v29[0] = 0;
  *(_OWORD *)((char *)&v29[1] + 1) = 0u;
  v27 = 0u;
  v28 = 0u;
  v29[1] = result;
  v4 = xmmword_2260E5D70;
  if (!result)
    goto LABEL_25;
  while (1)
  {
LABEL_2:
    v3 = result;
    v5 = result[10];
    if (v5)
    {
      if (((v6 = *(_QWORD *)(v5 + 104)) != 0 && (*(_BYTE *)(*(_QWORD *)(v6 + 80) + 44) & 1) == 0
         || (v7 = *(_QWORD *)(v5 + 112)) != 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 80) + 44) & 1) == 0)
        && (**(_WORD **)(v5 + 88) & 6) != 0
        && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 1888) + 232)
                     + 32 * *(unsigned int *)(v5 + 72)
                     + 12) == 0)
      {
        v9 = *(_QWORD *)(v5 + 40);
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = v4;
        v14 = 0;
        if (v9)
        {
          v15 = *(_QWORD *)(v9 + 40);
          v13 = *(_OWORD *)v15;
          v14 = *(float32x2_t *)(v15 + 16);
          v12 = *(_DWORD *)(v15 + 24);
        }
        v16 = *result;
        v17 = *(_QWORD *)(v5 + 112);
        v18 = *(_QWORD *)(v5 + 48);
        v34 = v13;
        v35 = v14;
        v19 = v4;
        v36 = v12;
        if (v18)
        {
          v20 = *(_QWORD *)(v18 + 40);
          v19 = *(_OWORD *)v20;
          v10 = *(float32x2_t *)(v20 + 16);
          v11 = *(_DWORD *)(v20 + 24);
        }
        v31 = v19;
        v32 = v10;
        v33 = v11;
        (*(void (**)(_QWORD, __int128 *, __int128 *, BOOL))(v5 + 24))(*(_QWORD *)(v5 + 32), &v34, &v31, v17 == v16);
        if (v17 == v16)
        {
          v23 = *(float32x2_t **)(v18 + 40);
          constrainMotion(v23, (float32x2_t *)&v31);
          *(_OWORD *)v23->f32 = v31;
          v23[2] = v32;
          v23[3].i32[0] = v33;
          v22 = *(_QWORD *)(v5 + 112);
        }
        else
        {
          v21 = *(float32x2_t **)(v9 + 40);
          constrainMotion(v21, (float32x2_t *)&v34);
          *(_OWORD *)v21->f32 = v34;
          v21[2] = v35;
          v21[3].i32[0] = v36;
          v22 = *(_QWORD *)(v5 + 104);
        }
        v30 = v22;
        v24 = *(unsigned int *)(a2 + 8);
        if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v24)
        {
          physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(a2, &v30);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v24) = v22;
          *(_DWORD *)(a2 + 8) = v24 + 1;
        }
        v4 = xmmword_2260E5D70;
      }
    }
    result = (_QWORD *)v3[8];
    if (!result)
    {
      result = (_QWORD *)v3[9];
      if (!result)
        break;
    }
  }
LABEL_25:
  while (1)
  {
    v3 = (_QWORD *)v3[7];
    if (!v3)
      return result;
    result = (_QWORD *)v3[9];
    if (result)
      goto LABEL_2;
  }
}

uint64_t physx::Sc::ConstraintSim::ConstraintSim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  physx::Sc::RigidSim *v10;
  physx::Sc::RigidSim *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  _QWORD *ConstraintBlock;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x2_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  physx::Sc::RigidSim **v37;
  physx::Sc::RigidSim **v38;
  physx::Sc::RigidSim *v39;
  physx::Sc::RigidSim *v40;
  physx::Sc::ConstraintInteraction *v41;
  _OWORD v43[2];

  *(_QWORD *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (a3 && *(_BYTE *)(a3 + 13))
    v10 = *(physx::Sc::RigidSim **)a3;
  else
    v10 = 0;
  *(_QWORD *)(a1 + 104) = v10;
  if (a4 && *(_BYTE *)(a4 + 13))
    v11 = *(physx::Sc::RigidSim **)a4;
  else
    v11 = 0;
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a5 + 4272);
  v13 = *(_DWORD *)(v12 + 24);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = *(_DWORD *)(*(_QWORD *)(v12 + 16) + 4 * (v13 - 1));
    *(_DWORD *)(v12 + 24) = v14;
  }
  else
  {
    v15 = *(_DWORD *)(v12 + 8);
    *(_DWORD *)(v12 + 8) = v15 + 1;
  }
  *(_DWORD *)(a1 + 72) = v15;
  v16 = *(_QWORD *)(a5 + 1888);
  if ((*(_DWORD *)(v16 + 244) & 0x7FFFFFFFu) - 1 < v15)
  {
    physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::recreate(v16 + 224, 2 * *(_DWORD *)(v16 + 244));
    v15 = *(_DWORD *)(a1 + 72);
  }
  if (*(_DWORD *)(v16 + 240) <= v15 + 1)
    v17 = v15 + 1;
  else
    v17 = *(_DWORD *)(v16 + 240);
  memset(v43, 0, sizeof(v43));
  physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::resize(v16 + 224, v17, (uint64_t)v43);
  v18 = *(_QWORD *)(v16 + 232) + 32 * *(unsigned int *)(a1 + 72);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(unsigned int *)(v19 + 64);
  ConstraintBlock = physx::Sc::Scene::allocateConstraintBlock(*(physx::Sc::Scene **)(a1 + 80), *(_DWORD *)(v19 + 64));
  if (ConstraintBlock)
  {
    v25 = ConstraintBlock;
    bzero(ConstraintBlock, v20);
    *(_DWORD *)a1 = *(_DWORD *)(v19 + 68);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v19 + 72);
    *(_WORD *)(a1 + 10) = *(_WORD *)v19;
    *(_WORD *)(a1 + 8) = v20;
    v26 = vextq_s8(*(int8x16_t *)(v19 + 40), *(int8x16_t *)(v19 + 40), 8uLL);
    *(int8x16_t *)(a1 + 16) = v26;
    v28 = *(_QWORD *)(a1 + 104);
    v27 = *(_QWORD *)(a1 + 112);
    v29 = v28 + 96;
    if (!v28)
      v29 = 0;
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = v29;
    v30 = v27 + 96;
    if (!v27)
      v30 = 0;
    *(_QWORD *)(a1 + 48) = v30;
    if (v28)
      v28 = *(_QWORD *)(v28 + 136);
    *(_QWORD *)(a1 + 56) = v28;
    if (v27)
      v27 = *(_QWORD *)(v27 + 136);
    *(_QWORD *)(a1 + 64) = v27;
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v19 + 76);
    v26.i32[0] = *(_DWORD *)(a2 + 68);
    if (*(float *)v26.i32 < 3.4028e38 || (v26.i32[0] = *(_DWORD *)(a2 + 72), *(float *)v26.i32 < 3.4028e38))
      *(_BYTE *)(a1 + 120) |= 2u;
    *(_QWORD *)(a2 + 80) = a1;
    v31 = *(int32x2_t **)(a5 + 2056);
    if ((**(_WORD **)(a1 + 88) & 6) == 0
      || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 1888) + 232)
                   + 32 * *(unsigned int *)(a1 + 72)
                   + 12))
    {
      v32 = *(_QWORD *)(a1 + 104);
      v33 = *(_QWORD *)(a1 + 112);
      if (v32)
      {
        v34 = *(_QWORD *)(v32 + 200);
        if (v34)
          physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(a5 + 2056), v34, (physx::Sc::ConstraintSim *)a1, *(int8x8_t *)v26.i8);
      }
      if (v33)
      {
        v35 = *(_QWORD *)(v33 + 200);
        if (v35)
          physx::Sc::ConstraintProjectionManager::invalidateGroup(v31, v35, (physx::Sc::ConstraintSim *)a1, *(int8x8_t *)v26.i8);
      }
    }
    else
    {
      physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(*(int32x2_t **)(a5 + 2056), (physx::Sc::ConstraintSim *)a1, *(int8x8_t *)v26.i8);
    }
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 4360);
    v37 = (physx::Sc::RigidSim **)(a5 + 4304);
    if (a3)
      v38 = (physx::Sc::RigidSim **)a3;
    else
      v38 = (physx::Sc::RigidSim **)(a5 + 4304);
    v39 = *v38;
    if (a4)
      v37 = (physx::Sc::RigidSim **)a4;
    v40 = *v37;
    v41 = *(physx::Sc::ConstraintInteraction **)(v36 + 560);
    if (!v41)
    {
      physx::shdfnd::PoolBase<physx::Sc::ConstraintInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::allocateSlab(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 4360));
      v41 = *(physx::Sc::ConstraintInteraction **)(v36 + 560);
    }
    *(_QWORD *)(v36 + 560) = *(_QWORD *)v41;
    ++*(_DWORD *)(v36 + 548);
    *(_QWORD *)(a1 + 96) = physx::Sc::ConstraintInteraction::ConstraintInteraction(v41, (physx::Sc::ConstraintSim *)a1, v39, v40);
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScConstraintSim.cpp", 127, "Constraint: could not allocate low-level resources.", v22, v23, v24, v43[0]);
  }
  return a1;
}

uint64_t physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 16);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 + 32 * v6;
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 12);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(a3 + 28);
      v8 += 32;
    }
    while (v8 < v7 + 32 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 16) = a2;
  return result;
}

void physx::Sc::ConstraintSim::~ConstraintSim(physx::Sc::ConstraintSim *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  physx::Sc::ConstraintSim *v11;
  int v12;

  v2 = *((_BYTE *)this + 120);
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 10) + 2056) + 576;
    v11 = this;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3, (uint64_t *)&v11);
    v2 = *((_BYTE *)this + 120) & 0xFE;
    *((_BYTE *)this + 120) = v2;
  }
  if ((v2 & 8) == 0)
    physx::Sc::ConstraintInteraction::destroy(*((physx::Sc::ConstraintInteraction **)this + 12));
  v4 = *(_QWORD *)(*((_QWORD *)this + 10) + 4272);
  v5 = *((unsigned int *)this + 18);
  v12 = v5;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v4 + 32, v5 + 1);
  *(_DWORD *)(*(_QWORD *)(v4 + 32) + ((v5 >> 3) & 0x1FFFFFFC)) |= 1 << v5;
  v6 = *(unsigned int *)(v4 + 56);
  if ((*(_DWORD *)(v4 + 60) & 0x7FFFFFFFu) <= v6)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v4 + 48, &v12);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v6) = v5;
    ++*(_DWORD *)(v4 + 56);
  }
  v7 = *((_QWORD *)this + 10);
  v8 = (_QWORD *)*((_QWORD *)this + 12);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 4360);
    --*(_DWORD *)(v9 + 548);
    *v8 = *(_QWORD *)(v9 + 560);
    *(_QWORD *)(v9 + 560) = v8;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 4);
  if (v10)
    physx::Sc::Scene::deallocateConstraintBlock(v7, v10, *((unsigned __int16 *)this + 4));
  *(_QWORD *)(*((_QWORD *)this + 11) + 80) = 0;
}

_QWORD *physx::Sc::ConstraintSim::checkMaxForceExceeded(physx::Sc::ConstraintSim *this)
{
  _QWORD *result;
  physx::Sc::ConstraintInteraction *v3;
  int8x8_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  result = (_QWORD *)*((_QWORD *)this + 10);
  if (*(_DWORD *)(*(_QWORD *)(result[236] + 232) + 32 * *((unsigned int *)this + 18) + 12))
  {
    *((_BYTE *)this + 120) |= 8u;
    physx::Sc::Scene::addBrokenConstraint((uint64_t)result, *((physx::Sc::ConstraintCore **)this + 11));
    v3 = (physx::Sc::ConstraintInteraction *)*((_QWORD *)this + 12);
    **((_WORD **)this + 11) |= 1u;
    physx::Sc::ConstraintInteraction::destroy(v3);
    v5 = (uint64_t *)*((_QWORD *)this + 12);
    v7 = *v5;
    v6 = v5[1];
    if (*(_DWORD *)(v7 + 52) >= *(_DWORD *)(v6 + 52))
      v8 = (_QWORD *)v6;
    else
      v8 = (_QWORD *)v7;
    return physx::Sc::ActorSim::setActorsInteractionsDirty(v8, 1, 0, 1, v4);
  }
  return result;
}

void constrainMotion(float32x2_t *a1, float32x2_t *a2)
{
  unsigned int v2;
  float32x2_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int8x8_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __float2 v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int8x8_t v50;
  float v51;
  float32x2_t v52;

  v2 = a1[19].u8[6];
  if (a1[19].i8[6])
  {
    v4 = a1[2];
    v5 = a1[3].f32[0];
    v6 = a1->f32[0];
    v7 = a1->f32[1];
    v8 = a1[1].f32[0];
    v9 = a1[1].f32[1];
    v10 = a2->f32[1];
    v12 = a2[1].f32[0];
    v11 = a2[1].f32[1];
    v13 = (float)((float)((float)(v9 * a2->f32[0]) - (float)(v11 * a1->f32[0])) - (float)(v10 * v8)) + (float)(v7 * v12);
    v14 = (float)((float)((float)(v9 * v10) - (float)(v11 * v7)) - (float)(v12 * a1->f32[0])) + (float)(v8 * a2->f32[0]);
    v15 = (float)((float)((float)(v9 * v12) - (float)(v11 * v8)) - (float)(a2->f32[0] * v7)) + (float)(a1->f32[0] * v10);
    v16 = (float)((float)((float)(a1->f32[0] * a2->f32[0]) + (float)(v11 * v9)) + (float)(v10 * v7)) + (float)(v12 * v8);
    if (v16 < 0.0)
    {
      v13 = -v13;
      v14 = -v14;
      v15 = -v15;
      v16 = -v16;
    }
    v17 = (int8x8_t)vsub_f32(a2[2], v4);
    v18 = a2[3].f32[0] - v5;
    v19 = (float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v15 * v15);
    v20 = 1.0;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    if (v19 >= 1.0e-16)
    {
      v24 = 1.0 / sqrtf(v19);
      v20 = v13 * v24;
      v21 = v14 * v24;
      v22 = v15 * v24;
      if (fabsf(v16) >= 0.00000001)
      {
        v52 = a1[2];
        v51 = a1[3].f32[0];
        v50 = v17;
        v49 = a2[3].f32[0] - v5;
        v25 = atan2f(v19 * v24, v16);
        v18 = v49;
        v17 = v50;
        v5 = v51;
        v4 = v52;
        v23 = v25 + v25;
      }
      else
      {
        v23 = 3.1416;
      }
    }
    v26 = v20 * v23;
    v27 = v21 * v23;
    v28 = v22 * v23;
    v29 = (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v2), (int8x8_t)0x200000001);
    if ((v2 & 4) != 0)
      v30 = 0.0;
    else
      v30 = v18;
    if ((v2 & 8) != 0)
      v31 = 0.0;
    else
      v31 = v26;
    if ((v2 & 0x10) != 0)
      v32 = 0.0;
    else
      v32 = v27;
    if ((v2 & 0x20) != 0)
      v33 = 0.0;
    else
      v33 = v28;
    a2[2] = vadd_f32(v4, (float32x2_t)vand_s8(v17, (int8x8_t)vceqz_s32(v29)));
    a2[3].f32[0] = v5 + v30;
    v34 = (float)((float)(v32 * v32) + (float)(v31 * v31)) + (float)(v33 * v33);
    if (v34 != 0.0)
    {
      v35 = sqrtf(v34);
      v36 = __sincosf_stret(v35 * 0.5);
      v37 = v31 * (float)(v36.__sinval / v35);
      v38 = v32 * (float)(v36.__sinval / v35);
      v39 = v33 * (float)(v36.__sinval / v35);
      v40 = (float)((float)((float)(v9 * v37) + (float)(v6 * 0.0)) + (float)(v38 * v8)) + (float)((float)-v7 * v39);
      v41 = (float)((float)((float)(v9 * v38) + (float)(v7 * 0.0)) + (float)(v39 * v6)) + (float)((float)-v8 * v37);
      v42 = (float)((float)((float)(v9 * v39) + (float)(v8 * 0.0)) + (float)(v37 * v7)) + (float)((float)-v6 * v38);
      v43 = (float)((float)((float)(v9 * 0.0) - (float)(v37 * v6)) - (float)(v38 * v7)) - (float)(v39 * v8);
      v44 = (float)(v6 * v36.__cosval) + v40;
      v45 = (float)(v7 * v36.__cosval) + v41;
      v46 = (float)(v8 * v36.__cosval) + v42;
      v47 = (float)(v9 * v36.__cosval) + v43;
      v48 = sqrtf((float)((float)((float)(v45 * v45) + (float)(v44 * v44)) + (float)(v46 * v46)) + (float)(v47 * v47));
      v6 = v44 / v48;
      v7 = v45 / v48;
      v8 = v46 / v48;
      v9 = v47 / v48;
    }
    a2->f32[0] = v6;
    a2->f32[1] = v7;
    a2[1].f32[0] = v8;
    a2[1].f32[1] = v9;
  }
}

_QWORD *physx::Sc::ConstraintSim::visualize(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  void (**v13)(physx::Cm::ConstraintImmediateVisualizer *__hidden);
  float v14;
  float v15;
  _OWORD *v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v2 = result[11];
  if ((*(_WORD *)v2 & 0x10) == 0)
    return result;
  v4 = result[5];
  v3 = result[6];
  v29 = xmmword_2260E5D70;
  v30 = 0;
  v31 = 0;
  if (!v4)
  {
    v5 = &v29;
    if (v3)
      goto LABEL_4;
LABEL_6:
    v6 = &v29;
    goto LABEL_7;
  }
  v5 = *(__int128 **)(v4 + 40);
  if (!v3)
    goto LABEL_6;
LABEL_4:
  v6 = *(__int128 **)(v3 + 40);
LABEL_7:
  v7 = result[10];
  v8 = *(float *)(v7 + 4656);
  v9 = *(_QWORD *)(v7 + 1840);
  v10 = v8 * *(float *)(v9 + 1872);
  v11 = v8 * *(float *)(v9 + 1876);
  memset(v17, 0, sizeof(v17));
  v19 = 0;
  v20 = 0;
  v18 = 0x3F80000000000000;
  v21 = 1065353216;
  v23 = 0;
  v22 = 0;
  v24 = 1065353216;
  v25 = 0;
  v26 = 0;
  v27 = 1065353216;
  v28 = a2;
  v13 = &off_24ED8E150;
  v14 = v10;
  v15 = v11;
  v16 = v17;
  if (v11 == 0.0)
    v12 = v10 != 0.0;
  else
    v12 = (v10 != 0.0) | 2u;
  return (_QWORD *)(*(uint64_t (**)(void (***)(physx::Cm::ConstraintImmediateVisualizer *__hidden), _QWORD, __int128 *, __int128 *, uint64_t))(v2 + 56))(&v13, result[4], v5, v6, v12);
}

void physx::Sc::ElementInteractionMarker::~ElementInteractionMarker(physx::Sc::ElementInteractionMarker *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  *(_QWORD *)this = off_24ED8E1C8;
  v2 = (_QWORD *)((char *)this + 8);
  if (*((_DWORD *)this + 6) != -1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
    physx::Sc::Scene::unregisterInteraction(v3, (uint64_t)v2);
    v4 = *(_QWORD *)(v3 + 3992) + 3704;
    v5 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 6);
    if (v5 <= v6)
      v7 = *((_QWORD *)this + 5);
    else
      v7 = *((_QWORD *)this + 6);
    if (v5 <= v6)
      v5 = *((_QWORD *)this + 6);
    v8[0] = v7;
    v8[1] = v5;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4, v8);
  }
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 1), v2);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 2), v2);
}

{
  uint64_t v2;

  physx::Sc::ElementInteractionMarker::~ElementInteractionMarker(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sc::ElementInteractionMarker *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                       + 24)
                                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

physx::Sc::ElementSim *physx::Sc::ElementSim::ElementSim(physx::Sc::ElementSim *this, physx::Sc::ActorSim *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) &= ~0x80000000;
  v4 = *((_QWORD *)a2 + 9);
  v5 = *(_QWORD *)(v4 + 4296);
  v6 = *(_DWORD *)(v5 + 24);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * (v6 - 1));
    *(_DWORD *)(v5 + 24) = v7;
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 8);
    *(_DWORD *)(v5 + 8) = v8 + 1;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0x80000000 | v8 & 0x7FFFFFFF;
  v9 = *(_QWORD *)(v4 + 2064);
  v10 = (v8 & 0x7FFFFFFF) + 1;
  v11 = *(_DWORD *)(v9 + 20) & 0x7FFFFFFF;
  if (v10 >= v11)
  {
    v12 = v10 | (v10 >> 1) | ((v10 | (v10 >> 1)) >> 2);
    v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
    v14 = (v13 | HIWORD(v13)) + 1;
    if (v11 < v14)
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(v9, (v13 | HIWORD(v13)) + 1);
    *(_DWORD *)(v9 + 16) = v14;
  }
  *(_QWORD *)this = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = this;
  ++*((_DWORD *)a2 + 16);
  return this;
}

void physx::Sc::ElementSim::~ElementSim(physx::Sc::ElementSim *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  physx::Sc::ElementSim *v5;
  uint64_t v6;
  physx::Sc::ElementSim *v7;
  physx::Sc::ElementSim *v8;
  physx::Sc::ElementSim *v9;
  int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 4296);
  v3 = *((unsigned int *)this + 4);
  v10 = v3 & 0x7FFFFFFF;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 32, (v3 & 0x7FFFFFFF) + 1);
  *(_DWORD *)(*(_QWORD *)(v2 + 32) + ((v3 >> 3) & 0xFFFFFFC)) |= 1 << v3;
  v4 = *(unsigned int *)(v2 + 56);
  if ((*(_DWORD *)(v2 + 60) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v2 + 48, &v10);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v4) = v3 & 0x7FFFFFFF;
    ++*(_DWORD *)(v2 + 56);
  }
  v5 = 0;
  v6 = *((_QWORD *)this + 1);
  v7 = (physx::Sc::ElementSim *)(v6 + 56);
  v8 = (physx::Sc::ElementSim *)(v6 + 56);
  while (1)
  {
    v8 = *(physx::Sc::ElementSim **)v8;
    if (!v8)
      break;
    v9 = v5;
    v5 = v8;
    if (v8 == this)
    {
      if (v9)
        v7 = v9;
      *(_QWORD *)v7 = *(_QWORD *)this;
      --*(_DWORD *)(v6 + 64);
      return;
    }
  }
}

_QWORD *physx::Sc::ElementSim::setElementInteractionsDirty(_QWORD *result, char a2, int a3, int8x8_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v4 = result[1];
  v5 = *(unsigned int *)(v4 + 52);
  if ((_DWORD)v5)
  {
    v8 = result;
    v9 = *(_QWORD *)(v4 + 40);
    v10 = (uint64_t *)(v9 + 8 * v5);
    v11 = (uint64_t *)(v9 + 8);
    v12 = 8 * v5;
    while (1)
    {
      v13 = *(v11 - 1);
      if ((*(_BYTE *)(v13 + 29) & 1) != 0 && (*(_QWORD **)(v13 + 32) == result || *(_QWORD **)(v13 + 40) == result))
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        return result;
    }
    while (1)
    {
      v16 = *(unsigned __int8 *)(v13 + 29);
      if ((v16 & a3) != 0)
      {
        *(_BYTE *)(v13 + 30) |= a2;
        if ((v16 & 8) == 0)
        {
          result = physx::Sc::NPhaseCore::addToDirtyInteractionList(*(int32x2_t **)(*(_QWORD *)(*(_QWORD *)v13 + 72) + 3992), (physx::Sc::Interaction *)v13, a4);
          *(_BYTE *)(v13 + 29) |= 8u;
        }
      }
      if (v11 == v10)
        break;
      v14 = v11;
      while (1)
      {
        v15 = *v14++;
        v13 = v15;
        if ((*(_BYTE *)(v15 + 29) & 1) != 0 && (*(_QWORD **)(v13 + 32) == v8 || *(_QWORD **)(v13 + 40) == v8))
          break;
        v11 = v14;
        if (v14 == v10)
          return result;
      }
      ++v11;
    }
  }
  return result;
}

uint64_t physx::Sc::ElementSim::addToAABBMgr(uint64_t a1, int a2, int a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(_DWORD *)(*(_QWORD *)(v11 + 80) + 8) & 0xFFFFFF;
  if (v13 == 0xFFFFFF)
    v14 = -1;
  else
    v14 = v13;
  result = physx::Bp::AABBManager::addBounds(*(physx::Bp::AABBManager **)(v12 + 1848), *(_DWORD *)(a1 + 16) & 0x7FFFFFFF, a2, a1, v14, a3 != 0, a4);
  if ((result & 1) == 0)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScElementSim.cpp", 113, "Unable to create broadphase entity because only 32768 shapes are supported", v16, v17, v18, a10);
  *(_DWORD *)(a1 + 16) |= 0x80000000;
  ++*(_DWORD *)(*(_QWORD *)(v12 + 4256) + 8);
  return result;
}

void physx::Sc::ElementSim::removeFromAABBMgr(physx::Sc::ElementSim *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  physx::Bp::AABBManager::removeBounds(*(_QWORD *)(v2 + 1848), *((_DWORD *)this + 4) & 0x7FFFFFFF);
  v3 = *(_QWORD *)(v2 + 1848);
  v4 = *((unsigned int *)this + 4);
  physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(v3 + 224, (v4 & 0x7FFFFFFF) + 1);
  *(_DWORD *)(*(_QWORD *)(v3 + 224) + ((v4 >> 3) & 0xFFFFFFC)) &= ~(1 << v4);
  *((_DWORD *)this + 4) &= ~0x80000000;
  ++*(_DWORD *)(*(_QWORD *)(v2 + 4256) + 12);
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ConstraintGroupNode,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::getName() [T = physx::"
           "Sc::ConstraintGroupNode]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 96 * *(unsigned int *)(v1 + 544) - 96;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 96 * *(unsigned int *)(v1 + 544) - 96);
    do
    {
      *v9 = v8;
      v9 -= 12;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 12;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::getName() [T = physx::Sc"
         "::ConstraintGroupNode]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

void physx::Cm::ConstraintImmediateVisualizer::~ConstraintImmediateVisualizer(physx::Cm::ConstraintImmediateVisualizer *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeJointFrames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return physx::Cm::visualizeJointFrames(*(_QWORD *)(a1 + 16), a2, a3, *(float *)(a1 + 8));
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeLinearLimit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  return physx::Cm::visualizeLinearLimit(*(_QWORD *)(a1 + 16), a2, *(float *)(a1 + 12), a5, a7, a8, a9, a10, a3, a4);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeAngularLimit(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  return physx::Cm::visualizeAngularLimit(*(_QWORD *)(a1 + 16), a2, a3, *(float *)(a1 + 12), a4, a5);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeLimitCone(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  return physx::Cm::visualizeLimitCone(*(_QWORD *)(a1 + 16), a2, a3, *(float *)(a1 + 12), a4, a5);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeDoubleCone(uint64_t a1, uint64_t a2, int a3, float a4)
{
  return physx::Cm::visualizeDoubleCone(*(_QWORD *)(a1 + 16), a2, a3, *(float *)(a1 + 12), a4);
}

float physx::Cm::ConstraintImmediateVisualizer::visualizeLine(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  float result;

  v6 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v6 + 4) = a4;
  v7 = *(_QWORD *)(v6 + 104);
  v8 = *(_DWORD *)(v7 + 32);
  v9 = *(_DWORD *)(v7 + 36) & 0x7FFFFFFF;
  v10 = v8 + 1;
  if (v8 + 1 > v9)
  {
    v11 = 2 * *(_DWORD *)(v7 + 36);
    if (!v9)
      v11 = 2;
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v7 + 24, v12);
    v8 = *(_DWORD *)(v7 + 32);
    a4 = *(_DWORD *)(v6 + 4);
  }
  v13 = *(_QWORD *)(v7 + 24) + 32 * v8;
  *(_DWORD *)(v7 + 32) = v10;
  *(_QWORD *)v13 = *(_QWORD *)a2;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)a3;
  result = *(float *)(a3 + 8);
  *(float *)(v13 + 24) = result;
  *(_DWORD *)(v13 + 28) = a4;
  *(_DWORD *)(v13 + 12) = a4;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = (_QWORD *)result;
  if (a2)
  {
    result = (*(uint64_t (**)(void))(**(_QWORD **)result + 16))();
    v4 = (_QWORD *)result;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_DWORD *)v3 + 4);
  v6 = v3[1];
  if (v5)
  {
    v7 = (unint64_t)&v4[3 * v5];
    v8 = (_QWORD *)v3[1];
    v9 = v4;
    do
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9 += 3;
      v8 += 3;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*((_DWORD *)v3 + 5) & 0x80000000) == 0 && v6)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  v3[1] = v4;
  *((_DWORD *)v3 + 5) = a2;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodyRank,physx::shdfnd::InlineAllocator<1536u,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 1556);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((24 * v5) <= 0x600 && *(_BYTE *)(result + 1536) == 0)
  {
    *(_BYTE *)(result + 1536) = 1;
    v9 = result;
    goto LABEL_16;
  }
  if (!(24 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>::getName() [T = physx::Sc::BodyRank]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (24 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = result;
LABEL_16:
  v10 = *(_DWORD *)(v3 + 1552);
  if (v10)
  {
    v11 = v9 + 24 * v10;
    v12 = *(__int128 **)(v3 + 1544);
    v13 = v9;
    do
    {
      v14 = *v12;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v13 = v14;
      v13 += 24;
      v12 = (__int128 *)((char *)v12 + 24);
    }
    while (v13 < v11);
    v15 = *(_DWORD *)(v3 + 1552);
  }
  else
  {
    v15 = 0;
  }
  v16 = v9 + 24 * v15;
  v17 = *a2;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v16 = v17;
  if ((*(_DWORD *)(v3 + 1556) & 0x80000000) == 0)
  {
    v18 = *(_QWORD *)(v3 + 1544);
    if (v18 == v3)
    {
      *(_BYTE *)(v3 + 1536) = 0;
    }
    else if (v18)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 1544) = v9;
  *(_DWORD *)(v3 + 1556) = v5;
  ++*(_DWORD *)(v3 + 1552);
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>::getName() [T = physx::Sc::BodyRank]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = (_QWORD *)result;
  if (a2)
  {
    result = (*(uint64_t (**)(void))(**(_QWORD **)result + 16))();
    v4 = result;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((unsigned int *)v3 + 4);
  v6 = v3[1];
  if ((_DWORD)v5)
  {
    v7 = v4 + 32 * v5;
    v8 = v3[1];
    v9 = v4;
    do
    {
      *(_QWORD *)v9 = *(_QWORD *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(v8 + 12);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v8 + 28);
      v9 += 32;
      v8 += 32;
    }
    while (v9 < v7);
  }
  if ((*((_DWORD *)v3 + 5) & 0x80000000) == 0 && v6)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  v3[1] = v4;
  *((_DWORD *)v3 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ConstraintInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::getName() [T = physx"
           "::Sc::ConstraintInteraction]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 48 * *(unsigned int *)(v1 + 544) - 48;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 48 * *(unsigned int *)(v1 + 544) - 48);
    do
    {
      *v9 = v8;
      v9 -= 6;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 6;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::getName() [T = physx::"
         "Sc::ConstraintInteraction]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::Sc::Scene::addShape(uint64_t a1, physx::Sc::RigidSim *a2, physx::Sc::ShapeCore *a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 4312);
  v9 = *(_DWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = (uint64_t *)(v10 + 24 * v9);
  v12 = (uint64_t *)v11[1];
  if (v12)
  {
    v11[1] = *v12;
LABEL_3:
    physx::Sc::ShapeSim::ShapeSim((physx::Sc::ShapeSim *)v12, a2, a3);
    goto LABEL_4;
  }
  v16 = v10 + 24 * v9;
  v19 = *(_DWORD *)(v16 + 16);
  v18 = (_DWORD *)(v16 + 16);
  v17 = v19;
  if (v19 != *(_DWORD *)v8)
  {
    v20 = *(_DWORD *)(v8 + 4);
    *v18 = v17 + 1;
    v21 = *v11;
    if (v21)
    {
      v12 = (uint64_t *)(v21 + (v17 * v20));
      goto LABEL_3;
    }
  }
  v12 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v8);
  if (v12)
    goto LABEL_3;
LABEL_4:
  v13 = a1 + 4 * *((int *)a3 + 18);
  ++*(_DWORD *)(v13 + 4676);
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 1904) + 32))(*(_QWORD *)(a1 + 1904), v12 + 3, *((unsigned int *)v12 + 16));
  if (a4)
  {
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2064) + 8) + 24 * (v12[2] & 0x7FFFFFFF));
    *a4 = *v14;
    a4[1] = v14[1];
    a4[2] = v14[2];
  }
  return (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)(a1 + 1840) + 1776) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 1840) + 1776), (char *)a3 + 32);
}

void physx::Sc::RigidCore::removeShapeFromScene(physx::Sc::RigidCore *this, physx::Sc::ShapeCore *a2, int a3)
{
  uint64_t v3;
  physx::Sc::ShapeCore **v4;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = (physx::Sc::ShapeCore **)(v3 + 56);
    while (1)
    {
      v4 = (physx::Sc::ShapeCore **)*v4;
      if (!v4)
        break;
      if (v4[7] == a2)
        goto LABEL_8;
    }
    v4 = (physx::Sc::ShapeCore **)1;
LABEL_8:
    physx::Sc::Scene::removeShape(*(physx::Sc::Scene **)(v3 + 72), (physx::Sc::ShapeSim *)v4, a3);
  }
}

void physx::Sc::Scene::removeShape(physx::Sc::Scene *this, physx::Sc::ShapeSim *a2, int a3)
{
  char *v6;
  physx::Cm::PreallocatingRegionManager *v7;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 230) + 1776) + 96))(*(_QWORD *)(*((_QWORD *)this + 230) + 1776), *((_QWORD *)a2 + 7) + 32);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 238) + 40))(*((_QWORD *)this + 238), *((unsigned int *)a2 + 16));
  v6 = (char *)this + 4 * *(int *)(*((_QWORD *)a2 + 7) + 72);
  --*((_DWORD *)v6 + 1169);
  physx::Sc::ShapeSim::removeFromBroadPhase(a2, a3);
  v7 = (physx::Cm::PreallocatingRegionManager *)*((_QWORD *)this + 539);
  physx::Sc::ShapeSim::~ShapeSim(a2);
  physx::Cm::PreallocatingRegionManager::deallocateMemory(v7, (unsigned __int8 *)a2);
}

void physx::Sc::RigidCore::onShapeChange(_QWORD *a1, uint64_t a2, int *a3, char *a4, int a5, int8x8_t a6)
{
  uint64_t v9;
  int v10;
  char v11;

  if (*a1)
  {
    v9 = *a1 + 56;
    while (1)
    {
      v9 = *(_QWORD *)v9;
      if (!v9)
        break;
      if (*(_QWORD *)(v9 + 56) == a2)
        goto LABEL_7;
    }
    v9 = 1;
LABEL_7:
    v10 = *a3;
    if ((*a3 & 1) != 0)
    {
      physx::Sc::ShapeSim::onVolumeOrTransformChange((physx::Sc::ShapeSim *)v9, a5);
      v10 = *a3;
      if ((*a3 & 2) == 0)
      {
LABEL_9:
        if ((v10 & 0x80) == 0)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_9;
    }
    physx::Sc::ElementSim::setElementInteractionsDirty((_QWORD *)v9, 2, 1, a6);
    v10 = *a3;
    if ((*a3 & 0x80) == 0)
      goto LABEL_14;
LABEL_13:
    if ((*(_DWORD *)(v9 + 16) & 0x80000000) != 0)
    {
      physx::Sc::ShapeSim::reinsertBroadPhase((physx::Sc::ShapeSim *)v9);
      v10 = *a3;
      if ((*a3 & 4) == 0)
      {
LABEL_15:
        if ((v10 & 8) == 0)
          goto LABEL_16;
        goto LABEL_23;
      }
LABEL_22:
      physx::Sc::ShapeSim::onVolumeOrTransformChange((physx::Sc::ShapeSim *)v9, a5);
      v10 = *a3;
      if ((*a3 & 8) == 0)
      {
LABEL_16:
        if ((v10 & 0x40) == 0)
          goto LABEL_17;
        goto LABEL_24;
      }
LABEL_23:
      physx::Sc::ElementSim::setElementInteractionsDirty((_QWORD *)v9, 1, 4, a6);
      v10 = *a3;
      if ((*a3 & 0x40) == 0)
      {
LABEL_17:
        if ((v10 & 0x10) == 0)
          goto LABEL_18;
        goto LABEL_25;
      }
LABEL_24:
      v11 = *a4;
      physx::Sc::ShapeSim::onFlagChange(v9, &v11);
      v10 = *a3;
      if ((*a3 & 0x10) == 0)
      {
LABEL_18:
        if ((v10 & 0x20) == 0)
          return;
        goto LABEL_19;
      }
LABEL_25:
      physx::Sc::ShapeSim::onContactOffsetChange((physx::Sc::ShapeSim *)v9);
      if ((*a3 & 0x20) == 0)
        return;
LABEL_19:
      physx::Sc::ElementSim::setElementInteractionsDirty((_QWORD *)v9, 16, 1, a6);
      return;
    }
LABEL_14:
    if ((v10 & 4) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
}

void physx::Sc::RigidSim::~RigidSim(physx::Sc::RigidSim *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = off_24ED8E228;
  v2 = *(_QWORD *)(*((_QWORD *)this + 9) + 4288);
  v3 = *((unsigned int *)this + 22);
  v5 = v3;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 32, v3 + 1);
  *(_DWORD *)(*(_QWORD *)(v2 + 32) + ((v3 >> 3) & 0x1FFFFFFC)) |= 1 << v3;
  v4 = *(unsigned int *)(v2 + 56);
  if ((*(_DWORD *)(v2 + 60) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v2 + 48, &v5);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v4) = v3;
    ++*(_DWORD *)(v2 + 56);
  }
  *(_QWORD *)this = off_24ED8DFB8;
  physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem((uint64_t)this + 40, (uint64_t)this);
}

{
  uint64_t v2;

  physx::Sc::RigidSim::~RigidSim(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sc::RigidSim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Sc::RigidSim::notifyShapesOfTransformChange(physx::Sc::RigidSim *this)
{
  physx::Sc::ShapeSim *i;

  for (i = (physx::Sc::ShapeSim *)*((_QWORD *)this + 7); i; i = *(physx::Sc::ShapeSim **)i)
    physx::Sc::ShapeSim::markBoundsForUpdate(i, 0);
  return notifyActorInteractionsOfTransformChange((uint64_t)this);
}

uint64_t physx::Sc::Scene::Scene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  const char *v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  const char *v18;
  pthread_mutex_t *v19;
  uint64_t v20;
  const char *v21;
  _OWORD *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const char *v37;
  physx::Cm::PreallocatingRegionManager *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  physx::Cm::PreallocatingRegionManager *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  physx::Cm::PreallocatingRegionManager *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  physx::Sc::ConstraintProjectionManager *v69;
  uint64_t v70;
  const char *v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  int v89;
  physx::IG::SimpleIslandManager *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  physx::IG::IslandSim *v99;
  physx::PxsNphaseImplementationContext *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  _DWORD *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  int v136;
  uint64_t i;
  __int128 v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const void *v143;
  void *v144;
  size_t v145;
  int v146;
  char v148;
  uint64_t v149;

  v6 = a1 + 4152;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 4119, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/api/include/PxsMaterialManager.h", 51);
  if (v7)
  {
    v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v8 - 8) = v8 - v7;
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 128;
  v10 = v8 + 24;
  do
  {
    *(_WORD *)(v10 + v9) = -1;
    v9 += 32;
  }
  while (v9 != 4096);
  *(_QWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 672) = 0x4000000000;
  *(_BYTE *)(a1 + 656) = 1;
  *(_QWORD *)(a1 + 664) = a1 + 144;
  *(_QWORD *)(a1 + 680) = 32;
  *(_DWORD *)(a1 + 688) = 2048;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 1240) = 0x4000000000;
  *(_BYTE *)(a1 + 1224) = 1;
  *(_QWORD *)(a1 + 1232) = a1 + 712;
  *(_QWORD *)(a1 + 1248) = 32;
  *(_DWORD *)(a1 + 1256) = 4096;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1808) = 0x4000000000;
  *(_BYTE *)(a1 + 1792) = 1;
  *(_QWORD *)(a1 + 1800) = a1 + 1280;
  *(_QWORD *)(a1 + 1816) = 32;
  *(_DWORD *)(a1 + 1824) = 0x2000;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_DWORD *)(a1 + 1964) = 1;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_DWORD *)(a1 + 1992) = 1;
  *(_OWORD *)(a1 + 1996) = 0u;
  *(_OWORD *)(a1 + 2012) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_QWORD *)(a1 + 2040) = -3233808384;
  *(_QWORD *)(a1 + 2048) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 2000, 0x40u, 0);
  *(_DWORD *)(a1 + 2152) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_QWORD *)(a1 + 2200) = -3233808384;
  *(_QWORD *)(a1 + 2208) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 2160, 0x40u, 0);
  *(_QWORD *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_QWORD *)(a1 + 2272) = -3233808384;
  *(_QWORD *)(a1 + 2280) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 2232, 0x40u, 0);
  *(_QWORD *)(a1 + 2824) = 0x4000000000;
  *(_BYTE *)(a1 + 2808) = 1;
  *(_QWORD *)(a1 + 2816) = a1 + 2296;
  *(_QWORD *)(a1 + 2832) = 64;
  *(_DWORD *)(a1 + 2840) = 0x2000;
  *(_QWORD *)(a1 + 2848) = 0;
  *(_QWORD *)(a1 + 3392) = 0x4000000000;
  *(_BYTE *)(a1 + 3376) = 1;
  *(_QWORD *)(a1 + 3384) = a1 + 2864;
  *(_QWORD *)(a1 + 3400) = 32;
  *(_DWORD *)(a1 + 3408) = 0x2000;
  *(_QWORD *)(a1 + 3416) = 0;
  *(_QWORD *)(a1 + 3960) = 0x4000000000;
  *(_BYTE *)(a1 + 3944) = 1;
  *(_QWORD *)(a1 + 3952) = a1 + 3432;
  *(_QWORD *)(a1 + 3968) = 21;
  *(_DWORD *)(a1 + 3976) = 0x2000;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_QWORD *)(a1 + 4032) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_QWORD *)(a1 + 4072) = 0;
  *(_QWORD *)(a1 + 4080) = -3233808384;
  *(_QWORD *)(a1 + 4088) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 4040, 0x40u, 0);
  *(_QWORD *)(a1 + 4128) = 0;
  *(_OWORD *)(a1 + 4112) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_QWORD *)(a1 + 4136) = -3233808384;
  *(_QWORD *)(a1 + 4144) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 4096, 0x40u, 0);
  *(_BYTE *)(v6 + 2) = (*(_DWORD *)(a2 + 152) & 0x400) != 0;
  *(_DWORD *)(a1 + 4264) = 0;
  *(_OWORD *)(a1 + 4160) = 0u;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4240) = 0u;
  *(_DWORD *)(a1 + 4268) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 4304) = 0;
  *(_QWORD *)(a1 + 4416) = 0;
  *(_DWORD *)(a1 + 4424) = 0;
  *(_DWORD *)(a1 + 4656) = 0;
  *(_BYTE *)(v6 + 508) = 0;
  *(_QWORD *)(a1 + 4664) = 0;
  *(_DWORD *)(a1 + 4672) = 0;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_DWORD *)(a1 + 4408) = 0;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4392) = 0u;
  *(_OWORD *)(a1 + 4508) = 0u;
  *(_OWORD *)(a1 + 4496) = 0u;
  *(_OWORD *)(a1 + 4480) = 0u;
  *(_OWORD *)(a1 + 4464) = 0u;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_DWORD *)(a1 + 4744) = 0;
  *(_QWORD *)(a1 + 4720) = a3;
  *(_QWORD *)(a1 + 4712) = off_24ED8E9F8;
  *(_QWORD *)(a1 + 4752) = a1;
  *(_QWORD *)(a1 + 4760) = "ScScene.secondPassNarrowPhase";
  *(_OWORD *)(a1 + 4776) = 0u;
  *(_QWORD *)(a1 + 4768) = off_24ED8EB48;
  *(_DWORD *)(a1 + 4792) = 0;
  *(_QWORD *)(a1 + 4800) = "ScScene.postNarrowPhase";
  *(_QWORD *)(a1 + 4856) = 0x400000000;
  *(_BYTE *)(v6 + 688) = 1;
  *(_QWORD *)(a1 + 4848) = a1 + 4808;
  *(_QWORD *)(a1 + 4912) = 0x400000000;
  *(_BYTE *)(v6 + 744) = 1;
  *(_QWORD *)(a1 + 4904) = a1 + 4864;
  *(_BYTE *)(v6 + 768) = 0;
  v11 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v12 = "<allocation names disabled>";
  v13 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v11 + 24) + 16))(v11 + 24, 72, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 4928) = v13;
  physx::shdfnd::MutexImpl::MutexImpl(v13);
  *(_QWORD *)(a1 + 4776) = a3;
  *(_QWORD *)(a1 + 4768) = off_24ED8EA88;
  *(_QWORD *)(a1 + 4936) = a1;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_QWORD *)(a1 + 4944) = off_24ED8EB48;
  *(_DWORD *)(a1 + 4968) = 0;
  *(_QWORD *)(a1 + 4976) = "ScScene.finalizationPhase";
  *(_QWORD *)(a1 + 5032) = 0x400000000;
  *(_BYTE *)(v6 + 864) = 1;
  *(_QWORD *)(a1 + 5024) = a1 + 4984;
  *(_QWORD *)(a1 + 5088) = 0x400000000;
  *(_BYTE *)(v6 + 920) = 1;
  *(_QWORD *)(a1 + 5080) = a1 + 5040;
  *(_BYTE *)(v6 + 944) = 0;
  v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v15 = "<allocation names disabled>";
  v16 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, 72, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 5104) = v16;
  physx::shdfnd::MutexImpl::MutexImpl(v16);
  *(_QWORD *)(a1 + 4952) = a3;
  *(_QWORD *)(a1 + 4944) = off_24ED8EBA0;
  *(_QWORD *)(a1 + 5112) = a1;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_DWORD *)(a1 + 5152) = 0;
  *(_QWORD *)(a1 + 5128) = a3;
  *(_QWORD *)(a1 + 5120) = off_24ED8EC30;
  *(_QWORD *)(a1 + 5160) = a1;
  *(_QWORD *)(a1 + 5168) = "ScScene.updateCCDMultiPass";
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  *(_DWORD *)(a1 + 5312) = 0;
  *(_QWORD *)(a1 + 5288) = a3;
  *(_QWORD *)(a1 + 5280) = off_24ED8ECC0;
  *(_QWORD *)(a1 + 5320) = a1;
  *(_QWORD *)(a1 + 5328) = "ScScene.afterIntegration";
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_DWORD *)(a1 + 5368) = 0;
  *(_QWORD *)(a1 + 5344) = a3;
  *(_QWORD *)(a1 + 5336) = off_24ED8ED50;
  *(_QWORD *)(a1 + 5376) = a1;
  *(_QWORD *)(a1 + 5384) = "ScScene.constraintProjection";
  *(_OWORD *)(a1 + 5408) = 0u;
  *(_DWORD *)(a1 + 5424) = 0;
  *(_QWORD *)(a1 + 5400) = a3;
  *(_QWORD *)(a1 + 5392) = off_24ED8EDE0;
  *(_QWORD *)(a1 + 5432) = a1;
  *(_QWORD *)(a1 + 5440) = "ScScene.postSolver";
  *(_OWORD *)(a1 + 5464) = 0u;
  *(_DWORD *)(a1 + 5480) = 0;
  *(_QWORD *)(a1 + 5456) = a3;
  *(_QWORD *)(a1 + 5448) = off_24ED8EE70;
  *(_QWORD *)(a1 + 5488) = a1;
  *(_QWORD *)(a1 + 5496) = "ScScene.rigidBodySolver";
  *(_OWORD *)(a1 + 5520) = 0u;
  *(_DWORD *)(a1 + 5536) = 0;
  *(_QWORD *)(a1 + 5512) = a3;
  *(_QWORD *)(a1 + 5504) = off_24ED8EF00;
  *(_QWORD *)(a1 + 5544) = a1;
  *(_QWORD *)(a1 + 5552) = "ScScene.updateBodiesAndShapes";
  *(_OWORD *)(a1 + 5576) = 0u;
  *(_DWORD *)(a1 + 5592) = 0;
  *(_QWORD *)(a1 + 5568) = a3;
  *(_QWORD *)(a1 + 5560) = off_24ED8EF90;
  *(_QWORD *)(a1 + 5600) = a1;
  *(_QWORD *)(a1 + 5608) = "ScScene.updateSimulationController";
  *(_OWORD *)(a1 + 5632) = 0u;
  *(_DWORD *)(a1 + 5648) = 0;
  *(_QWORD *)(a1 + 5624) = a3;
  *(_QWORD *)(a1 + 5616) = off_24ED8F020;
  *(_QWORD *)(a1 + 5656) = a1;
  *(_QWORD *)(a1 + 5664) = "ScScene.updateDynamics";
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_DWORD *)(a1 + 5704) = 0;
  *(_QWORD *)(a1 + 5680) = a3;
  *(_QWORD *)(a1 + 5672) = off_24ED8F0B0;
  *(_QWORD *)(a1 + 5712) = a1;
  *(_QWORD *)(a1 + 5720) = "ScScene.processLostContact";
  *(_OWORD *)(a1 + 5744) = 0u;
  *(_DWORD *)(a1 + 5760) = 0;
  *(_QWORD *)(a1 + 5736) = a3;
  *(_QWORD *)(a1 + 5728) = off_24ED8F140;
  *(_QWORD *)(a1 + 5768) = a1;
  *(_QWORD *)(a1 + 5776) = "ScScene.processLostContact2";
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_DWORD *)(a1 + 5816) = 0;
  *(_QWORD *)(a1 + 5792) = a3;
  *(_QWORD *)(a1 + 5784) = off_24ED8F1D0;
  *(_QWORD *)(a1 + 5824) = a1;
  *(_QWORD *)(a1 + 5832) = "ScScene.processLostContact3";
  *(_OWORD *)(a1 + 5856) = 0u;
  *(_DWORD *)(a1 + 5872) = 0;
  *(_QWORD *)(a1 + 5848) = a3;
  *(_QWORD *)(a1 + 5840) = off_24ED8F260;
  *(_QWORD *)(a1 + 5880) = a1;
  *(_QWORD *)(a1 + 5888) = "ScScene.destroyManagers";
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_DWORD *)(a1 + 5928) = 0;
  *(_QWORD *)(a1 + 5904) = a3;
  *(_QWORD *)(a1 + 5896) = off_24ED8F2F0;
  *(_QWORD *)(a1 + 5936) = a1;
  *(_QWORD *)(a1 + 5944) = "ScScene.lostTouchReports";
  *(_OWORD *)(a1 + 5968) = 0u;
  *(_DWORD *)(a1 + 5984) = 0;
  *(_QWORD *)(a1 + 5960) = a3;
  *(_QWORD *)(a1 + 5952) = off_24ED8F380;
  *(_QWORD *)(a1 + 5992) = a1;
  *(_QWORD *)(a1 + 6000) = "ScScene.unregisterInteractions";
  *(_OWORD *)(a1 + 6024) = 0u;
  *(_DWORD *)(a1 + 6040) = 0;
  *(_QWORD *)(a1 + 6016) = a3;
  *(_QWORD *)(a1 + 6008) = off_24ED8F410;
  *(_QWORD *)(a1 + 6048) = a1;
  *(_QWORD *)(a1 + 6056) = "ScScene.processNpLostTouchTask";
  *(_OWORD *)(a1 + 6080) = 0u;
  *(_DWORD *)(a1 + 6096) = 0;
  *(_QWORD *)(a1 + 6072) = a3;
  *(_QWORD *)(a1 + 6064) = off_24ED8F4A0;
  *(_QWORD *)(a1 + 6104) = a1;
  *(_QWORD *)(a1 + 6112) = "ScScene.processNPLostTouchEvents";
  *(_OWORD *)(a1 + 6136) = 0u;
  *(_DWORD *)(a1 + 6152) = 0;
  *(_QWORD *)(a1 + 6128) = a3;
  *(_QWORD *)(a1 + 6120) = off_24ED8F530;
  *(_QWORD *)(a1 + 6160) = a1;
  *(_QWORD *)(a1 + 6168) = "ScScene.postThirdPassIslandGenTask";
  *(_OWORD *)(a1 + 6192) = 0u;
  *(_DWORD *)(a1 + 6208) = 0;
  *(_QWORD *)(a1 + 6184) = a3;
  *(_QWORD *)(a1 + 6176) = off_24ED8F5C0;
  *(_QWORD *)(a1 + 6216) = a1;
  *(_QWORD *)(a1 + 6224) = "ScScene.postIslandGen";
  *(_OWORD *)(a1 + 6248) = 0u;
  *(_DWORD *)(a1 + 6264) = 0;
  *(_QWORD *)(a1 + 6240) = a3;
  *(_QWORD *)(a1 + 6232) = off_24ED8F650;
  *(_QWORD *)(a1 + 6272) = a1;
  *(_QWORD *)(a1 + 6280) = "ScScene.islandGen";
  *(_OWORD *)(a1 + 6304) = 0u;
  *(_DWORD *)(a1 + 6320) = 0;
  *(_QWORD *)(a1 + 6296) = a3;
  *(_QWORD *)(a1 + 6288) = off_24ED8F6E0;
  *(_QWORD *)(a1 + 6328) = a1;
  *(_QWORD *)(a1 + 6336) = "ScScene.preRigidBodyNarrowPhase";
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_DWORD *)(a1 + 6376) = 0;
  *(_QWORD *)(a1 + 6352) = a3;
  *(_QWORD *)(a1 + 6344) = off_24ED8F770;
  *(_QWORD *)(a1 + 6384) = a1;
  *(_QWORD *)(a1 + 6392) = "ScScene.setEdgesConnectedTask";
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_DWORD *)(a1 + 6432) = 0;
  *(_QWORD *)(a1 + 6408) = a3;
  *(_QWORD *)(a1 + 6400) = off_24ED8F800;
  *(_QWORD *)(a1 + 6440) = a1;
  *(_QWORD *)(a1 + 6448) = "ScScene.fetchPatchEventsTask";
  *(_OWORD *)(a1 + 6472) = 0u;
  *(_DWORD *)(a1 + 6488) = 0;
  *(_QWORD *)(a1 + 6464) = a3;
  *(_QWORD *)(a1 + 6456) = off_24ED8F890;
  *(_QWORD *)(a1 + 6496) = a1;
  *(_QWORD *)(a1 + 6504) = "ScScene.processLostSolverPatchesTask";
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_DWORD *)(a1 + 6544) = 0;
  *(_QWORD *)(a1 + 6520) = a3;
  *(_QWORD *)(a1 + 6512) = off_24ED8F920;
  *(_QWORD *)(a1 + 6552) = a1;
  *(_QWORD *)(a1 + 6560) = "ScScene.rigidBodyNarrowPhase";
  *(_OWORD *)(a1 + 6584) = 0u;
  *(_DWORD *)(a1 + 6600) = 0;
  *(_QWORD *)(a1 + 6576) = a3;
  *(_QWORD *)(a1 + 6568) = off_24ED8F9B0;
  *(_QWORD *)(a1 + 6608) = a1;
  *(_QWORD *)(a1 + 6616) = "ScScene.unblockNarrowPhase";
  *(_OWORD *)(a1 + 6640) = 0u;
  *(_DWORD *)(a1 + 6656) = 0;
  *(_QWORD *)(a1 + 6632) = a3;
  *(_QWORD *)(a1 + 6624) = off_24ED8FA40;
  *(_QWORD *)(a1 + 6664) = a1;
  *(_QWORD *)(a1 + 6672) = "ScScene.postBroadPhase";
  *(_OWORD *)(a1 + 6696) = 0u;
  *(_DWORD *)(a1 + 6712) = 0;
  *(_QWORD *)(a1 + 6688) = a3;
  *(_QWORD *)(a1 + 6680) = off_24ED8FAD0;
  *(_QWORD *)(a1 + 6720) = a1;
  *(_QWORD *)(a1 + 6728) = "ScScene.postBroadPhaseCont";
  *(_OWORD *)(a1 + 6752) = 0u;
  *(_DWORD *)(a1 + 6768) = 0;
  *(_QWORD *)(a1 + 6744) = a3;
  *(_QWORD *)(a1 + 6736) = off_24ED8FB60;
  *(_QWORD *)(a1 + 6776) = a1;
  *(_QWORD *)(a1 + 6784) = "ScScene.postBroadPhase2";
  *(_OWORD *)(a1 + 6800) = 0u;
  *(_QWORD *)(a1 + 6792) = off_24ED8EB48;
  *(_DWORD *)(a1 + 6816) = 0;
  *(_QWORD *)(a1 + 6824) = "ScScene.postBroadPhase3";
  *(_QWORD *)(a1 + 6880) = 0x400000000;
  *(_BYTE *)(v6 + 2712) = 1;
  *(_QWORD *)(a1 + 6872) = a1 + 6832;
  *(_QWORD *)(a1 + 6936) = 0x400000000;
  *(_BYTE *)(v6 + 2768) = 1;
  *(_QWORD *)(a1 + 6928) = a1 + 6888;
  *(_BYTE *)(v6 + 2792) = 0;
  v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v18 = "<allocation names disabled>";
  v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v17 + 24) + 16))(v17 + 24, 72, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 6952) = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  *(_QWORD *)(a1 + 6800) = a3;
  *(_QWORD *)(a1 + 6792) = off_24ED8FBF0;
  *(_QWORD *)(a1 + 6960) = a1;
  *(_QWORD *)(a1 + 6984) = 0;
  *(_QWORD *)(a1 + 6992) = 0;
  *(_DWORD *)(a1 + 7000) = 0;
  *(_QWORD *)(a1 + 6976) = a3;
  *(_QWORD *)(a1 + 6968) = off_24ED8FC80;
  *(_QWORD *)(a1 + 7008) = a1;
  *(_QWORD *)(a1 + 7016) = "ScScene.preallocateContactManagers";
  *(_QWORD *)(a1 + 7040) = 0;
  *(_QWORD *)(a1 + 7048) = 0;
  *(_DWORD *)(a1 + 7056) = 0;
  *(_QWORD *)(a1 + 7032) = a3;
  *(_QWORD *)(a1 + 7024) = off_24ED8FD10;
  *(_QWORD *)(a1 + 7064) = a1;
  *(_QWORD *)(a1 + 7072) = "ScScene.islandInsertion";
  *(_QWORD *)(a1 + 7096) = 0;
  *(_QWORD *)(a1 + 7104) = 0;
  *(_DWORD *)(a1 + 7112) = 0;
  *(_QWORD *)(a1 + 7088) = a3;
  *(_QWORD *)(a1 + 7080) = off_24ED8FDA0;
  *(_QWORD *)(a1 + 7120) = a1;
  *(_QWORD *)(a1 + 7128) = "ScScene.registerContactManagers";
  *(_OWORD *)(a1 + 7152) = 0u;
  *(_DWORD *)(a1 + 7168) = 0;
  *(_QWORD *)(a1 + 7144) = a3;
  *(_QWORD *)(a1 + 7136) = off_24ED8FE30;
  *(_QWORD *)(a1 + 7176) = a1;
  *(_QWORD *)(a1 + 7184) = "ScScene.registerInteractions";
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_DWORD *)(a1 + 7224) = 0;
  *(_QWORD *)(a1 + 7200) = a3;
  *(_QWORD *)(a1 + 7192) = off_24ED8FEC0;
  *(_QWORD *)(a1 + 7232) = a1;
  *(_QWORD *)(a1 + 7240) = "ScScene.registerSceneInteractions";
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_DWORD *)(a1 + 7280) = 0;
  *(_QWORD *)(a1 + 7256) = a3;
  *(_QWORD *)(a1 + 7248) = off_24ED8FF50;
  *(_QWORD *)(a1 + 7288) = a1;
  *(_QWORD *)(a1 + 7296) = "ScScene.broadPhase";
  *(_OWORD *)(a1 + 7320) = 0u;
  *(_DWORD *)(a1 + 7336) = 0;
  *(_QWORD *)(a1 + 7312) = a3;
  *(_QWORD *)(a1 + 7304) = off_24ED8FFE0;
  *(_QWORD *)(a1 + 7344) = a1;
  *(_QWORD *)(a1 + 7352) = "ScScene.advanceStep";
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_DWORD *)(a1 + 7392) = 0;
  *(_QWORD *)(a1 + 7368) = a3;
  *(_QWORD *)(a1 + 7360) = off_24ED90070;
  *(_QWORD *)(a1 + 7408) = "ScScene.collideStep";
  *(_QWORD *)(a1 + 7400) = a1;
  physx::Cm::FlushPool::FlushPool((physx::Cm::FlushPool *)(a1 + 7416), 0x4000u);
  *(_WORD *)(v6 + 3320) = 0;
  *(_OWORD *)(a1 + 7476) = 0u;
  *(_OWORD *)(a1 + 7492) = 0u;
  *(_OWORD *)(a1 + 7508) = 0u;
  *(_DWORD *)(a1 + 7524) = 0;
  *(_DWORD *)(a1 + 7528) = 1061158912;
  *(_DWORD *)(a1 + 7532) = -1;
  *(_QWORD *)(a1 + 7536) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7488, 0x40u, 0);
  *(_QWORD *)(a1 + 7632) = 0;
  *(_DWORD *)(a1 + 7640) = 0;
  *(_DWORD *)(a1 + 1876) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_OWORD *)(a1 + 7576) = 0u;
  *(_OWORD *)(a1 + 7592) = 0u;
  *(_OWORD *)(a1 + 7608) = 0u;
  *(_DWORD *)(a1 + 7624) = 0;
  v20 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStats>::getName() [T = physx::Sc::SimStats]";
  else
    v21 = "<allocation names disabled>";
  v22 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v20 + 24) + 16))(v20 + 24, 156, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 645);
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  *(_OWORD *)((char *)v22 + 140) = 0u;
  *(_QWORD *)(a1 + 4256) = v22;
  v23 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v24 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  else
    v24 = "<allocation names disabled>";
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v23 + 24) + 16))(v23 + 24, 64, v24, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 646);
  *(_DWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + 40) = 0;
  *(_QWORD *)(a1 + 4272) = v25;
  v26 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v27 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  else
    v27 = "<allocation names disabled>";
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v26 + 24) + 16))(v26 + 24, 64, v27, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 647);
  *(_DWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 56) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_DWORD *)(v28 + 40) = 0;
  *(_QWORD *)(a1 + 4280) = v28;
  v29 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v30 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  else
    v30 = "<allocation names disabled>";
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v29 + 24) + 16))(v29 + 24, 64, v30, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 648);
  *(_DWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_DWORD *)(v31 + 40) = 0;
  *(_QWORD *)(a1 + 4288) = v31;
  v32 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v33 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  else
    v33 = "<allocation names disabled>";
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v32 + 24) + 16))(v32 + 24, 64, v33, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 649);
  *(_DWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_DWORD *)(v34 + 40) = 0;
  *(_QWORD *)(a1 + 4296) = v34;
  v35 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 651);
  *(_QWORD *)(a1 + 2144) = v35;
  *v35 = 0;
  v35[1] = 0;
  v36 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v37 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingPool<physx::Sc::StaticSim>>::get"
          "Name() [T = physx::Cm::PreallocatingPool<physx::Sc::StaticSim>]";
  else
    v37 = "<allocation names disabled>";
  v38 = (physx::Cm::PreallocatingRegionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v36 + 24) + 16))(v36 + 24, 48, v37, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 654);
  *(_QWORD *)(a1 + 4320) = physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(v38, 0x60u, (uint64_t)"StaticSim", v39);
  v40 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v41 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingPool<physx::Sc::BodySim>>::getNa"
          "me() [T = physx::Cm::PreallocatingPool<physx::Sc::BodySim>]";
  else
    v41 = "<allocation names disabled>";
  v42 = (physx::Cm::PreallocatingRegionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v40 + 24) + 16))(v40 + 24, 48, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 655);
  *(_QWORD *)(a1 + 4328) = physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(v42, 0xD0u, (uint64_t)"BodySim", v43);
  v44 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v45 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingPool<physx::Sc::ShapeSim>>::getN"
          "ame() [T = physx::Cm::PreallocatingPool<physx::Sc::ShapeSim>]";
  else
    v45 = "<allocation names disabled>";
  v46 = (physx::Cm::PreallocatingRegionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v44 + 24) + 16))(v44 + 24, 48, v45, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 656);
  *(_QWORD *)(a1 + 4312) = physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(v46, 0x48u, (uint64_t)"ShapeSim", v47);
  v48 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v49 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::Pool<physx::Sc::ConstraintSim>>::getName("
          ") [T = physx::shdfnd::Pool<physx::Sc::ConstraintSim>]";
  else
    v49 = "<allocation names disabled>";
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v48 + 24) + 16))(v48 + 24, 568, v49, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 657);
  *(_QWORD *)(v50 + 536) = 0x4000000000;
  *(_BYTE *)(v50 + 520) = 1;
  *(_QWORD *)(v50 + 528) = v50 + 8;
  *(_QWORD *)(v50 + 544) = 32;
  *(_DWORD *)(v50 + 552) = 4096;
  *(_QWORD *)(v50 + 560) = 0;
  *(_QWORD *)(a1 + 4336) = v50;
  v51 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v52 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::Pool<physx::Sc::ConstraintInteraction>>::"
          "getName() [T = physx::shdfnd::Pool<physx::Sc::ConstraintInteraction>]";
  else
    v52 = "<allocation names disabled>";
  v53 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v51 + 24) + 16))(v51 + 24, 568, v52, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 658);
  *(_QWORD *)(v53 + 536) = 0x4000000000;
  *(_BYTE *)(v53 + 520) = 1;
  *(_QWORD *)(v53 + 528) = v53 + 8;
  *(_QWORD *)(v53 + 544) = 32;
  *(_DWORD *)(v53 + 552) = 1536;
  *(_QWORD *)(v53 + 560) = 0;
  *(_QWORD *)(a1 + 4360) = v53;
  v54 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v55 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::LLArticulationPool>::getName() [T = physx::Sc"
          "::LLArticulationPool]";
  else
    v55 = "<allocation names disabled>";
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v54 + 24) + 16))(v54 + 24, 568, v55, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 659);
  *(_QWORD *)(v56 + 536) = 0x4000000000;
  *(_BYTE *)(v56 + 520) = 1;
  *(_QWORD *)(v56 + 528) = v56 + 8;
  *(_QWORD *)(v56 + 544) = 32;
  *(_DWORD *)(v56 + 552) = 10240;
  *(_QWORD *)(v56 + 560) = 0;
  *(_QWORD *)(a1 + 4344) = v56;
  v57 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v58 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::LLArticulationRCPool>::getName() [T = physx::"
          "Sc::LLArticulationRCPool]";
  else
    v58 = "<allocation names disabled>";
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v57 + 24) + 16))(v57 + 24, 568, v58, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 660);
  *(_QWORD *)(v59 + 536) = 0x4000000000;
  *(_BYTE *)(v59 + 520) = 1;
  *(_QWORD *)(v59 + 528) = v59 + 8;
  *(_QWORD *)(v59 + 544) = 32;
  *(_DWORD *)(v59 + 552) = 28672;
  *(_QWORD *)(v59 + 560) = 0;
  *(_QWORD *)(a1 + 4352) = v59;
  v60 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v61 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::Pool<physx::Sc::SimStateData>>::getName()"
          " [T = physx::shdfnd::Pool<physx::Sc::SimStateData>]";
  else
    v61 = "<allocation names disabled>";
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v60 + 24) + 16))(v60 + 24, 568, v61, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 662);
  *(_QWORD *)(v62 + 536) = 0x4000000000;
  *(_BYTE *)(v62 + 520) = 1;
  *(_QWORD *)(v62 + 528) = v62 + 8;
  *(_QWORD *)(v62 + 544) = 32;
  *(_DWORD *)(v62 + 552) = 2048;
  *(_QWORD *)(v62 + 560) = 0;
  *(_QWORD *)(a1 + 4368) = v62;
  v63 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v64 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client>::getName() [T = physx::Sc::Client]";
  else
    v64 = "<allocation names disabled>";
  v65 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v63 + 24) + 16))(v63 + 24, 1, v64, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 664);
  v149 = v65;
  v66 = *(unsigned int *)(a1 + 4168);
  if ((*(_DWORD *)(a1 + 4172) & 0x7FFFFFFFu) <= v66)
  {
    physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::growAndPushBack(a1 + 4160, &v149);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 4160) + 8 * v66) = v65;
    *(_DWORD *)(a1 + 4168) = v66 + 1;
  }
  v67 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v68 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintProjectionManager>::getName() [T = "
          "physx::Sc::ConstraintProjectionManager]";
  else
    v68 = "<allocation names disabled>";
  v69 = (physx::Sc::ConstraintProjectionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v67 + 24) + 16))(v67 + 24, 688, v68, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 665);
  *(_QWORD *)(a1 + 2056) = physx::Sc::ConstraintProjectionManager::ConstraintProjectionManager(v69);
  v70 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v71 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SqBoundsManager>::getName() [T = physx::Sc::SqBoundsManager]";
  else
    v71 = "<allocation names disabled>";
  v72 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v70 + 24) + 16))(v70 + 24, 64, v71, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 667);
  *v72 = 0u;
  v72[1] = 0u;
  v72[2] = 0u;
  v72[3] = 0u;
  *(_QWORD *)(a1 + 2088) = v72;
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 8))(physx::shdfnd::Foundation::mInstance);
  *(_QWORD *)(a1 + 7456) = physx::PxTaskManager::createTaskManager(v73, *(_QWORD *)(a2 + 160));
  *(_QWORD *)(a1 + 7464) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 4684) = 0;
  *(_QWORD *)(a1 + 4692) = 0;
  *(_QWORD *)(a1 + 4676) = 0;
  *(_DWORD *)(a1 + 4700) = 0;
  *(_BYTE *)(v6 + 3321) = 0;
  v74 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v75 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContext>::getName() [T = physx::PxsContext]";
  else
    v75 = "<allocation names disabled>";
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v74 + 24) + 16))(v74 + 24, 2624, v75, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 710);
  v77 = physx::PxsContext::PxsContext(v76, (int32x2_t *)a2, *(_QWORD *)(a1 + 7456), a1 + 7416, *(_QWORD *)(a1 + 7464), a3);
  *(_QWORD *)(a1 + 1840) = v77;
  if (!v77)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 714, "Failed to create context!", v78, v79, v80, v148);
    return a1;
  }
  *(_QWORD *)(v77 + 424) = a1;
  *(_QWORD *)(a1 + 1896) = 0;
  v81 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsDefaultMemoryManager.cpp", 71);
  v81[1] = 0;
  v81[2] = 0;
  *v81 = &off_24ED8B6C0;
  *(_QWORD *)(a1 + 1896) = v81;
  if (*(_DWORD *)(a2 + 80) == 3)
    v82 = 2;
  else
    v82 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 1856) = physx::Bp::BroadPhase::create(v82, *(unsigned int *)(a2 + 120), *(_DWORD *)(a2 + 124), *(_DWORD *)(a2 + 104), *(_DWORD *)(a2 + 108), a3);
  v83 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1896) + 16))(*(_QWORD *)(a1 + 1896), *(unsigned int *)(a2 + 296));
  v149 = v83;
  v84 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v85 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BoundsArray>::getName() [T = physx::Bp::BoundsArray]";
  else
    v85 = "<allocation names disabled>";
  v86 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v84 + 24) + 16))(v84 + 24, 32, v85, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 774);
  v86[1] = 0;
  v86[2] = 0;
  *v86 = v83;
  *(_QWORD *)(a1 + 2064) = v86;
  v87 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 776);
  v87[1] = 0;
  v87[2] = 0;
  *v87 = v83;
  *(_QWORD *)(a1 + 2072) = v87;
  *(_BYTE *)(a1 + 2080) = 0;
  v88 = *(_DWORD *)(a1 + 4268);
  v89 = (v88 >> 14) & 1;
  v90 = (physx::IG::SimpleIslandManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 1680, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 782);
  *(_QWORD *)(a1 + 1880) = physx::IG::SimpleIslandManager::SimpleIslandManager(v90, v89, a3);
  v91 = *(_QWORD *)(a1 + 1840);
  v92 = v91 + 40;
  v93 = *(_QWORD *)(v91 + 1920);
  v94 = v91 + 1936;
  v95 = *(_QWORD *)(v91 + 1912);
  v96 = (uint64_t)v90 + 224;
  v97 = *(_BYTE *)(v6 + 2) != 0;
  if (*(_DWORD *)(a2 + 132))
    v98 = physx::Dy::DynamicsTGSContext::create(v92, v91, v93, v94, v95, v83, a1, v96, *(float *)(a2 + 300), a3, v97, v89, (v88 & 8) != 0);
  else
    v98 = physx::Dy::DynamicsContext::create(v92, v91, v93, v94, v95, v83, a1, v96, *(float *)(a2 + 216), a3, v97, v89, (v88 & 8) != 0, (*(_DWORD *)(a2 + 152) & 0x8000) != 0);
  *(_QWORD *)(a1 + 1888) = v98;
  v100 = *(physx::PxsNphaseImplementationContext **)(a1 + 1840);
  *((_QWORD *)v100 + 222) = physx::PxsNphaseImplementationContext::create(v100, (physx::PxsContext *)(*(_QWORD *)(a1 + 1880) + 224), v99);
  v101 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 805);
  *v101 = &off_24ED8E250;
  v101[1] = a1;
  *(_QWORD *)(a1 + 1912) = v101;
  v102 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScSimulationController.cpp", 37);
  *v102 = &off_24ED90510;
  v102[1] = v101;
  *(_QWORD *)(a1 + 1904) = v102;
  v103 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v104 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AABBManager>::getName() [T = physx::Bp::AABBManager]";
  else
    v104 = "<allocation names disabled>";
  v105 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v103 + 24) + 16))(v103 + 24, 800, v104, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 808);
  v107 = physx::Bp::AABBManager::AABBManager(v105, *(_QWORD *)(a1 + 1856), *(_QWORD *)(a1 + 2064), *(_QWORD *)(a1 + 2072), v106, *(_DWORD *)(a2 + 108) + *(_DWORD *)(a2 + 104), &v149, a3, *(_DWORD *)(a2 + 72), *(_DWORD *)(a2 + 76));
  *(_QWORD *)(a1 + 1848) = v107;
  v108 = *(_DWORD *)(a2 + 100);
  if (v108)
    physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(v107 + 224, ((2 * v108) & 0xFFFFFF00) + 256);
  v109 = *(_QWORD *)(a1 + 1840);
  v110 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 32, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsContext.cpp", 186);
  *(_QWORD *)(v110 + 8) = 0;
  *(_QWORD *)(v110 + 16) = 0;
  *(_QWORD *)v110 = v83;
  *(_BYTE *)(v110 + 28) = 1;
  *(_DWORD *)(v110 + 24) = 0;
  *(_QWORD *)(v109 + 2592) = v110;
  v111 = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(v111 + 2600) = *(_QWORD *)(a1 + 2072);
  *(_QWORD *)(a1 + 1864) = physx::PxsCCDContext::create(v111, *(_QWORD *)(*(_QWORD *)(a1 + 1888) + 8), *(_QWORD *)(v111 + 1776), *(float *)(a2 + 228));
  v112 = *(_QWORD *)(a1 + 1888);
  *(_QWORD *)(v112 + 140) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(v112 + 124) = *(_DWORD *)(a2 + 140);
  *(int32x2_t *)(v112 + 128) = vrev64_s32(*(int32x2_t *)(a2 + 144));
  v113 = *(float *)physx::Sc::Physics::mInstance;
  *(float *)(v112 + 136) = *(float *)physx::Sc::Physics::mInstance * 0.025;
  v114 = *(_QWORD *)(a1 + 1840);
  *(float *)(v114 + 288) = v113 * 0.01;
  *(float *)(v114 + 292) = v113;
  *(float *)(v112 + 120) = -*(float *)(a2 + 136);
  v115 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v116 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::StaticCore>::getName() [T = physx::Sc::StaticCore]";
  else
    v116 = "<allocation names disabled>";
  v117 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v115 + 24) + 16))(v115 + 24, 48, v116, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 887);
  *(_QWORD *)v117 = 0;
  *(_DWORD *)(v117 + 8) = 0xFFFFFF;
  *(_WORD *)(v117 + 12) = 1;
  *(_BYTE *)(v117 + 14) = 0;
  *(_BYTE *)(v117 + 45) = 0;
  *(_WORD *)(v117 + 46) = 0;
  *(_OWORD *)(v117 + 16) = xmmword_2260E5D70;
  *(_QWORD *)(v117 + 32) = 0;
  *(_QWORD *)(v117 + 37) = 0;
  v118 = *(_QWORD *)(a1 + 4320);
  v119 = *(_DWORD *)(v118 + 8);
  v120 = *(_QWORD *)(v118 + 16);
  v121 = (uint64_t *)(v120 + 24 * v119);
  v122 = (uint64_t *)v121[1];
  if (v122)
  {
    v121[1] = *v122;
LABEL_90:
    *((_DWORD *)v122 + 16) = 0;
    v122[6] = 0;
    v122[7] = 0;
    v122[5] = 0;
    v122[9] = a1;
    v122[10] = v117;
    *(_QWORD *)v117 = v122;
    v123 = *(_QWORD *)(a1 + 4288);
    v124 = *(_DWORD *)(v123 + 24);
    if (v124)
    {
      v125 = v124 - 1;
      v126 = *(_DWORD *)(*(_QWORD *)(v123 + 16) + 4 * (v124 - 1));
      *(_DWORD *)(v123 + 24) = v125;
    }
    else
    {
      v126 = *(_DWORD *)(v123 + 8);
      *(_DWORD *)(v123 + 8) = v126 + 1;
    }
    *((_DWORD *)v122 + 22) = v126;
    *v122 = (uint64_t)off_24ED90100;
    goto LABEL_97;
  }
  v127 = v120 + 24 * v119;
  v130 = *(_DWORD *)(v127 + 16);
  v129 = (_DWORD *)(v127 + 16);
  v128 = v130;
  if (v130 != *(_DWORD *)v118)
  {
    v131 = *(_DWORD *)(v118 + 4);
    *v129 = v128 + 1;
    v132 = *v121;
    if (v132)
    {
      v122 = (uint64_t *)(v132 + (v128 * v131));
      goto LABEL_90;
    }
  }
  v122 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v118);
  if (v122)
    goto LABEL_90;
LABEL_97:
  *(_QWORD *)(a1 + 4304) = v122;
  v133 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v134 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::NPhaseCore>::getName() [T = physx::Sc::NPhaseCore]";
  else
    v134 = "<allocation names disabled>";
  v135 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v133 + 24) + 16))(v133 + 24, 3776, v134, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 891);
  *(_QWORD *)(a1 + 3992) = physx::Sc::NPhaseCore::NPhaseCore(v135, a1, a2);
  v136 = -2;
  for (i = 1132; i != 1164; ++i)
  {
    *(_DWORD *)(a1 + 4 * i) = ~v136;
    v136 *= 2;
  }
  *(_WORD *)v6 = 257;
  v138 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 1920) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1936) = v138;
  *(_QWORD *)(a1 + 4248) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 1952) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 1960) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1964) = 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 1888) + 148) = *(_DWORD *)(a2 + 128);
  v139 = *(_DWORD *)(a2 + 152);
  v140 = *(_QWORD *)(a1 + 1840);
  *(_BYTE *)(v140 + 2584) = (v139 & 0x40) != 0;
  *(_BYTE *)(v140 + 2585) = (v139 & 0x100) == 0;
  physx::Sc::Scene::setSimulationEventCallback(a1, *(_QWORD *)(a2 + 16));
  v141 = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(v141 + 1768) = *(_QWORD *)(a2 + 24);
  (*(void (**)(_QWORD))(**(_QWORD **)(v141 + 1776) + 176))(*(_QWORD *)(v141 + 1776));
  v142 = *(_QWORD *)(a1 + 1864);
  *(_QWORD *)(v142 + 168) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v142 + 436) = *(_DWORD *)(a2 + 224);
  v143 = *(const void **)(a2 + 40);
  if (v143)
  {
    if (*(_DWORD *)(a2 + 48))
    {
      v144 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, *(unsigned int *)(a2 + 48), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 923);
      v143 = *(const void **)(a2 + 40);
      v145 = *(unsigned int *)(a2 + 48);
    }
    else
    {
      v145 = 0;
      v144 = 0;
    }
    *(_QWORD *)(a1 + 4000) = v144;
    memcpy(v144, v143, v145);
    v146 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 4008) = v146;
    *(_DWORD *)(a1 + 4012) = v146;
  }
  else
  {
    *(_OWORD *)(a1 + 4000) = 0u;
  }
  *(_OWORD *)(a1 + 4016) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t physx::Sc::Scene::setSimulationEventCallback(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    if (!*(_QWORD *)(result + 4240))
    {
      v2 = *(unsigned int *)(result + 4092);
      if ((_DWORD)v2)
      {
        v3 = *(uint64_t **)(result + 4048);
        do
        {
          v4 = *v3++;
          *(_WORD *)(*(_QWORD *)v4 + 180) |= 0x40u;
          --v2;
        }
        while (v2);
      }
    }
  }
  *(_QWORD *)(result + 4240) = a2;
  return result;
}

uint64_t (***physx::Sc::Scene::release(physx::Sc::Scene *this))(_QWORD)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  physx::Cm::PreallocatingRegionManager *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v22;
  int v24;
  int v25;
  _QWORD *v26;
  int v27;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  physx::Sc::ConstraintSim **v48;
  physx::Sc::ConstraintSim **v49;
  char *v50;
  char *v51;
  uint64_t v52;
  physx::Sc::ConstraintSim *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  int v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  void (****v78)(_QWORD);
  void (****v79)(_QWORD);
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  void (***v83)(_QWORD);
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  void (****v96)(_QWORD);
  void (****v97)(_QWORD);
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (***v101)(_QWORD);
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  uint64_t v111;
  int v112;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  pthread_mutex_t **v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  uint64_t (***result)(_QWORD);
  uint64_t v130;
  char *v131;
  uint64_t v132;

  ++*((_DWORD *)this + 498);
  *((_DWORD *)this + 556) = 0;
  v2 = *((_QWORD *)this + 499);
  if (v2)
  {
    physx::Sc::NPhaseCore::~NPhaseCore(*((physx::Sc::NPhaseCore **)this + 499));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *((_QWORD *)this + 499) = 0;
  if (*((_QWORD *)this + 500))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 500) = 0;
  v3 = *((_QWORD *)this + 538);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 80);
    v5 = (physx::Cm::PreallocatingRegionManager *)*((_QWORD *)this + 540);
    (**(void (***)(_QWORD))v3)(*((_QWORD *)this + 538));
    physx::Cm::PreallocatingRegionManager::deallocateMemory(v5, (unsigned __int8 *)v3);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  physx::Sc::Scene::postReportsCleanup(this);
  v6 = *((_QWORD *)this + 230);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 1784);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      v6 = *((_QWORD *)this + 230);
      *(_QWORD *)(v6 + 1784) = 0;
    }
    v8 = *(_QWORD *)(v6 + 1776);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      *(_QWORD *)(*((_QWORD *)this + 230) + 1776) = 0;
    }
  }
  v9 = *((_QWORD *)this + 257);
  if (v9)
  {
    if (*(_QWORD *)(v9 + 632))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(v9 + 576))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_DWORD *)(v9 + 556))
    {
      v131 = 0;
      v132 = 0;
      v10 = *(_QWORD *)(v9 + 568);
      if (v10)
      {
        do
        {
          v130 = v10;
          v11 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(_QWORD *)&v131[8 * v132] = v10;
            LODWORD(v132) = v11 + 1;
          }
          v10 = **(_QWORD **)(v9 + 568);
          *(_QWORD *)(v9 + 568) = v10;
        }
        while (v10);
        v12 = v131;
        v13 = v132;
        v14 = HIDWORD(v132);
      }
      else
      {
        v14 = 0;
        v13 = 0;
        v12 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>(v12, v13);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>(*(char **)(v9 + 536), *(_DWORD *)(v9 + 544));
      if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && v12)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
    }
    v15 = *(_QWORD **)(v9 + 536);
    v16 = *(unsigned int *)(v9 + 544);
    if ((_DWORD)v16)
    {
      v17 = 8 * v16;
      do
      {
        if (*v15)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        ++v15;
        v17 -= 8;
      }
      while (v17);
      v15 = *(_QWORD **)(v9 + 536);
    }
    v18 = *(_DWORD *)(v9 + 548);
    if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0)
    {
      if (v15 == (_QWORD *)(v9 + 16))
      {
        *(_BYTE *)(v9 + 528) = 0;
      }
      else if (v15)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v15);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
  }
  *((_QWORD *)this + 257) = 0;
  v19 = *((_QWORD *)this + 261);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 + 60);
    if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v19 + 48) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v22 = *(_DWORD *)(v19 + 44);
    if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v19 + 32) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v24 = *(_DWORD *)(v19 + 28);
    if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v19 + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v25 = *(_DWORD *)(v19 + 12);
    if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *(_QWORD *)v19)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v19);
  }
  *((_QWORD *)this + 261) = 0;
  v26 = (_QWORD *)*((_QWORD *)this + 258);
  if (v26)
  {
    v27 = *((_DWORD *)v26 + 5);
    if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && v26[1] != 0)
      (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 24))(*v26);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v26);
  }
  *((_QWORD *)this + 258) = 0;
  v29 = *((unsigned int *)this + 1042);
  if ((_DWORD)v29)
  {
    for (i = 0; i < v29; ++i)
    {
      v31 = *((_QWORD *)this + 520);
      if (*(_QWORD *)(v31 + 8 * i))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v31 = *((_QWORD *)this + 520);
        v29 = *((unsigned int *)this + 1042);
      }
      *(_QWORD *)(v31 + 8 * i) = 0;
    }
  }
  v32 = *((_QWORD *)this + 545);
  if (v32)
  {
    if (*(_DWORD *)(v32 + 548))
    {
      v131 = 0;
      v132 = 0;
      v33 = *(_QWORD *)(v32 + 560);
      if (v33)
      {
        do
        {
          v130 = v33;
          v34 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(_QWORD *)&v131[8 * v132] = v33;
            LODWORD(v132) = v34 + 1;
          }
          v33 = **(_QWORD **)(v32 + 560);
          *(_QWORD *)(v32 + 560) = v33;
        }
        while (v33);
        v35 = v131;
        v36 = v132;
        v37 = HIDWORD(v132);
      }
      else
      {
        v37 = 0;
        v36 = 0;
        v35 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>(v35, v36);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>(*(char **)(v32 + 528), *(_DWORD *)(v32 + 536));
      if (v35)
      {
        if ((v37 & 0x80000000) == 0 && (v37 & 0x7FFFFFFF) != 0)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v35);
      }
    }
    v38 = *(_QWORD **)(v32 + 528);
    v39 = *(unsigned int *)(v32 + 536);
    if ((_DWORD)v39)
    {
      v40 = 8 * v39;
      do
      {
        if (*v38)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        ++v38;
        v40 -= 8;
      }
      while (v40);
      v38 = *(_QWORD **)(v32 + 528);
    }
    v41 = *(_DWORD *)(v32 + 540);
    if ((v41 & 0x80000000) == 0 && (v41 & 0x7FFFFFFF) != 0)
    {
      if (v38 == (_QWORD *)(v32 + 8))
      {
        *(_BYTE *)(v32 + 520) = 0;
      }
      else if (v38)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v38);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v32);
  }
  v42 = *((_QWORD *)this + 542);
  if (v42)
  {
    if (*(_DWORD *)(v42 + 548))
    {
      v131 = 0;
      v132 = 0;
      v43 = *(_QWORD *)(v42 + 560);
      if (v43)
      {
        do
        {
          v130 = v43;
          v44 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(_QWORD *)&v131[8 * v132] = v43;
            LODWORD(v132) = v44 + 1;
          }
          v43 = **(_QWORD **)(v42 + 560);
          *(_QWORD *)(v42 + 560) = v43;
        }
        while (v43);
        v45 = v131;
        v46 = v132;
      }
      else
      {
        v46 = 0;
        v45 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>(v45, v46);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>(*(char **)(v42 + 528), *(_DWORD *)(v42 + 536));
      v47 = *(unsigned int *)(v42 + 536);
      if ((_DWORD)v47)
      {
        v48 = *(physx::Sc::ConstraintSim ***)(v42 + 528);
        v49 = &v48[v47];
        v50 = &v45[8 * v46];
        v51 = v45;
        do
        {
          v52 = *(unsigned int *)(v42 + 544);
          if ((_DWORD)v52)
          {
            v53 = *v48;
            v54 = v52 << 7;
            do
            {
              if (v51 != v50 && v53 == *(physx::Sc::ConstraintSim **)v51)
                v51 += 8;
              else
                physx::Sc::ConstraintSim::~ConstraintSim(v53);
              v53 = (physx::Sc::ConstraintSim *)((char *)v53 + 128);
              v54 -= 128;
            }
            while (v54);
          }
          ++v48;
        }
        while (v48 != v49);
      }
      if (v45 && (v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v45);
    }
    v55 = *(_QWORD **)(v42 + 528);
    v56 = *(unsigned int *)(v42 + 536);
    if ((_DWORD)v56)
    {
      v57 = 8 * v56;
      do
      {
        if (*v55)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        ++v55;
        v57 -= 8;
      }
      while (v57);
      v55 = *(_QWORD **)(v42 + 528);
    }
    v58 = *(_DWORD *)(v42 + 540);
    if ((v58 & 0x80000000) == 0 && (v58 & 0x7FFFFFFF) != 0)
    {
      if (v55 == (_QWORD *)(v42 + 8))
      {
        *(_BYTE *)(v42 + 520) = 0;
      }
      else if (v55)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v55);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v42);
  }
  v59 = *((_QWORD *)this + 546);
  if (v59)
  {
    if (*(_DWORD *)(v59 + 548))
    {
      v131 = 0;
      v132 = 0;
      v60 = *(_QWORD *)(v59 + 560);
      if (v60)
      {
        do
        {
          v130 = v60;
          v61 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(_QWORD *)&v131[8 * v132] = v60;
            LODWORD(v132) = v61 + 1;
          }
          v60 = **(_QWORD **)(v59 + 560);
          *(_QWORD *)(v59 + 560) = v60;
        }
        while (v60);
        v62 = v131;
        v63 = v132;
        v64 = HIDWORD(v132);
      }
      else
      {
        v64 = 0;
        v63 = 0;
        v62 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>(v62, v63);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>(*(char **)(v59 + 528), *(_DWORD *)(v59 + 536));
      if ((v64 & 0x80000000) == 0 && (v64 & 0x7FFFFFFF) != 0 && v62)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v62);
    }
    v65 = *(_QWORD **)(v59 + 528);
    v66 = *(unsigned int *)(v59 + 536);
    if ((_DWORD)v66)
    {
      v67 = 8 * v66;
      do
      {
        if (*v65)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        ++v65;
        v67 -= 8;
      }
      while (v67);
      v65 = *(_QWORD **)(v59 + 528);
    }
    v68 = *(_DWORD *)(v59 + 540);
    if ((v68 & 0x80000000) == 0 && (v68 & 0x7FFFFFFF) != 0)
    {
      if (v65 == (_QWORD *)(v59 + 8))
      {
        *(_BYTE *)(v59 + 520) = 0;
      }
      else if (v65)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v65);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v59);
  }
  v69 = *((_QWORD *)this + 540);
  if (v69)
  {
    physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(*((physx::Cm::PreallocatingRegionManager **)this
                                                                       + 540));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v69);
  }
  v70 = *((_QWORD *)this + 539);
  if (v70)
  {
    physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(*((physx::Cm::PreallocatingRegionManager **)this
                                                                       + 539));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v70);
  }
  v71 = *((_QWORD *)this + 541);
  if (v71)
  {
    physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(*((physx::Cm::PreallocatingRegionManager **)this
                                                                       + 541));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v71);
  }
  v72 = *((_QWORD *)this + 543);
  if (v72)
  {
    if (*(_DWORD *)(v72 + 548))
    {
      v131 = 0;
      v132 = 0;
      v73 = *(_QWORD *)(v72 + 560);
      if (v73)
      {
        do
        {
          v130 = v73;
          v74 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(_QWORD *)&v131[8 * v132] = v73;
            LODWORD(v132) = v74 + 1;
          }
          v73 = **(_QWORD **)(v72 + 560);
          *(_QWORD *)(v72 + 560) = v73;
        }
        while (v73);
        v75 = (uint64_t)v131;
        v76 = v132;
      }
      else
      {
        v76 = 0;
        v75 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(v75, v76);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(*(_QWORD *)(v72 + 528), *(_DWORD *)(v72 + 536));
      v77 = *(unsigned int *)(v72 + 536);
      if ((_DWORD)v77)
      {
        v78 = *(void (*****)(_QWORD))(v72 + 528);
        v79 = &v78[v77];
        v80 = (_QWORD *)(v75 + 8 * v76);
        v81 = (_QWORD *)v75;
        do
        {
          v82 = *(unsigned int *)(v72 + 544);
          if ((_DWORD)v82)
          {
            v83 = *v78;
            v84 = 320 * v82;
            do
            {
              if (v81 != v80 && v83 == (void (***)(_QWORD))*v81)
                ++v81;
              else
                (**v83)(v83);
              v83 += 40;
              v84 -= 320;
            }
            while (v84);
          }
          ++v78;
        }
        while (v78 != v79);
      }
      if (v75 && (v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v75 - *(_QWORD *)(v75 - 8));
    }
    v85 = *(unsigned int *)(v72 + 536);
    if ((_DWORD)v85)
    {
      v86 = *(_QWORD **)(v72 + 528);
      v87 = 8 * v85;
      do
      {
        if (*v86)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *v86 - *(_QWORD *)(*v86 - 8));
        ++v86;
        v87 -= 8;
      }
      while (v87);
    }
    v88 = *(_DWORD *)(v72 + 540);
    if ((v88 & 0x80000000) == 0 && (v88 & 0x7FFFFFFF) != 0)
    {
      v89 = *(_QWORD *)(v72 + 528);
      if (v89 == v72 + 8)
      {
        *(_BYTE *)(v72 + 520) = 0;
      }
      else if (v89)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v89 - *(_QWORD *)(v89 - 8));
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v72);
  }
  v90 = *((_QWORD *)this + 544);
  if (v90)
  {
    if (*(_DWORD *)(v90 + 548))
    {
      v131 = 0;
      v132 = 0;
      v91 = *(_QWORD *)(v90 + 560);
      if (v91)
      {
        do
        {
          v130 = v91;
          v92 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(_QWORD *)&v131[8 * v132] = v91;
            LODWORD(v132) = v92 + 1;
          }
          v91 = **(_QWORD **)(v90 + 560);
          *(_QWORD *)(v90 + 560) = v91;
        }
        while (v91);
        v93 = (uint64_t)v131;
        v94 = v132;
      }
      else
      {
        v94 = 0;
        v93 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(v93, v94);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(*(_QWORD *)(v90 + 528), *(_DWORD *)(v90 + 536));
      v95 = *(unsigned int *)(v90 + 536);
      if ((_DWORD)v95)
      {
        v96 = *(void (*****)(_QWORD))(v90 + 528);
        v97 = &v96[v95];
        v98 = (_QWORD *)(v93 + 8 * v94);
        v99 = (_QWORD *)v93;
        do
        {
          v100 = *(unsigned int *)(v90 + 544);
          if ((_DWORD)v100)
          {
            v101 = *v96;
            v102 = 896 * v100;
            do
            {
              if (v99 != v98 && v101 == (void (***)(_QWORD))*v99)
                ++v99;
              else
                (**v101)(v101);
              v101 += 112;
              v102 -= 896;
            }
            while (v102);
          }
          ++v96;
        }
        while (v96 != v97);
      }
      if (v93 && (v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v93 - *(_QWORD *)(v93 - 8));
    }
    v103 = *(unsigned int *)(v90 + 536);
    if ((_DWORD)v103)
    {
      v104 = *(_QWORD **)(v90 + 528);
      v105 = 8 * v103;
      do
      {
        if (*v104)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *v104 - *(_QWORD *)(*v104 - 8));
        ++v104;
        v105 -= 8;
      }
      while (v105);
    }
    v106 = *(_DWORD *)(v90 + 540);
    if ((v106 & 0x80000000) == 0 && (v106 & 0x7FFFFFFF) != 0)
    {
      v107 = *(_QWORD *)(v90 + 528);
      if (v107 == v90 + 8)
      {
        *(_BYTE *)(v90 + 520) = 0;
      }
      else if (v107)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v107 - *(_QWORD *)(v107 - 8));
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v90);
  }
  v108 = *((_QWORD *)this + 268);
  v109 = *(_DWORD *)(v108 + 12);
  if (v109 < 0
    || ((v109 & 0x7FFFFFFF) != 0 ? (v110 = *(_QWORD *)v108 == 0) : (v110 = 1),
        v110
     || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(_QWORD *)v108), *((_QWORD *)this + 268))))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v111 = *((_QWORD *)this + 537);
  if (v111)
  {
    v112 = *(_DWORD *)(v111 + 60);
    if ((v112 & 0x80000000) == 0 && (v112 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v111 + 48) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(v111 + 32) && (*(_DWORD *)(v111 + 40) & 0x80000000) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v111 + 32) = 0;
    v114 = *(_DWORD *)(v111 + 28);
    if ((v114 & 0x80000000) == 0 && (v114 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v111 + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v111);
  }
  v115 = *((_QWORD *)this + 536);
  if (v115)
  {
    v116 = *(_DWORD *)(v115 + 60);
    if ((v116 & 0x80000000) == 0 && (v116 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v115 + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(v115 + 32) && (*(_DWORD *)(v115 + 40) & 0x80000000) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v115 + 32) = 0;
    v117 = *(_DWORD *)(v115 + 28);
    if ((v117 & 0x80000000) == 0 && (v117 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v115 + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v115);
  }
  v118 = *((_QWORD *)this + 535);
  if (v118)
  {
    v119 = *(_DWORD *)(v118 + 60);
    if ((v119 & 0x80000000) == 0 && (v119 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v118 + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(v118 + 32) && (*(_DWORD *)(v118 + 40) & 0x80000000) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v118 + 32) = 0;
    v120 = *(_DWORD *)(v118 + 28);
    if ((v120 & 0x80000000) == 0 && (v120 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v118 + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v118);
  }
  v121 = *((_QWORD *)this + 534);
  if (v121)
  {
    v122 = *(_DWORD *)(v121 + 60);
    if ((v122 & 0x80000000) == 0 && (v122 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v121 + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(v121 + 32) && (*(_DWORD *)(v121 + 40) & 0x80000000) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v121 + 32) = 0;
    v123 = *(_DWORD *)(v121 + 28);
    if ((v123 & 0x80000000) == 0 && (v123 & 0x7FFFFFFF) != 0 && *(_QWORD *)(v121 + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v121);
  }
  if (*((_QWORD *)this + 532))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Bp::AABBManager::destroy(*((physx::Bp::AABBManager **)this + 231));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 232) + 80))(*((_QWORD *)this + 232));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 239) + 16))(*((_QWORD *)this + 239));
  if (*((_QWORD *)this + 239))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  (***((void (****)(_QWORD))this + 238))(*((_QWORD *)this + 238));
  if (*((_QWORD *)this + 238))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  (***((void (****)(_QWORD))this + 236))(*((_QWORD *)this + 236));
  v124 = (pthread_mutex_t **)*((_QWORD *)this + 233);
  physx::PxsCCDContext::~PxsCCDContext(v124);
  if (v124)
    (*(void (**)(uint64_t, pthread_mutex_t **))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v124);
  physx::IG::SimpleIslandManager::~SimpleIslandManager(*((physx::IG::SimpleIslandManager **)this + 235));
  if (*((_QWORD *)this + 235))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v125 = *((_QWORD *)this + 932);
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 80))(v125);
  v126 = *((_QWORD *)this + 230);
  if (v126)
  {
    physx::PxsContext::~PxsContext(*((physx::PxsContext **)this + 230));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v126);
    *((_QWORD *)this + 230) = 0;
  }
  v127 = (_QWORD *)*((_QWORD *)this + 259);
  v128 = *((_DWORD *)v127 + 5);
  if (v128 < 0
    || (v128 & 0x7FFFFFFF) == 0
    || !v127[1]
    || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v127 + 24))(*v127, v127[1]), *((_QWORD *)this + 259)))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 237);
  if (result)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    if (*((_QWORD *)this + 237))
      result = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                                + 24)
                                                                                    + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 237) = 0;
  }
  return result;
}

void physx::Sc::Scene::postReportsCleanup(physx::Sc::Scene *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *((_QWORD *)this + 535);
  v3 = v2;
  if (*(_DWORD *)(v2 + 56))
  {
    v4 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v2 + 8, *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v4++));
    while (v4 < *(unsigned int *)(v2 + 56));
    v3 = *((_QWORD *)this + 535);
  }
  *(_DWORD *)(v2 + 56) = 0;
  bzero(*(void **)(v3 + 32), (4 * *(_DWORD *)(v3 + 40)));
  v5 = *((_QWORD *)this + 536);
  v6 = v5;
  if (*(_DWORD *)(v5 + 56))
  {
    v7 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v5 + 8, *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v7++));
    while (v7 < *(unsigned int *)(v5 + 56));
    v6 = *((_QWORD *)this + 536);
  }
  *(_DWORD *)(v5 + 56) = 0;
  bzero(*(void **)(v6 + 32), (4 * *(_DWORD *)(v6 + 40)));
  v8 = *((_QWORD *)this + 534);
  v9 = v8;
  if (*(_DWORD *)(v8 + 56))
  {
    v10 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v8 + 8, *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v10++));
    while (v10 < *(unsigned int *)(v8 + 56));
    v9 = *((_QWORD *)this + 534);
  }
  *(_DWORD *)(v8 + 56) = 0;
  bzero(*(void **)(v9 + 32), (4 * *(_DWORD *)(v9 + 40)));
}

uint64_t *physx::Sc::Scene::preAllocate(physx::Sc::Scene *this, unsigned int a2, unsigned int a3, int a4, int a5)
{
  unsigned int v10;

  if (a3 <= 0x40)
    v10 = 64;
  else
    v10 = a3;
  if ((*((_DWORD *)this + 11) & 0x7FFFFFFFu) < v10)
    physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::recreate((uint64_t)this + 32, v10);
  physx::Cm::PreallocatingRegionManager::preAllocate(*((uint64_t **)this + 540), a2);
  physx::Cm::PreallocatingRegionManager::preAllocate(*((uint64_t **)this + 541), a3);
  return physx::Cm::PreallocatingRegionManager::preAllocate(*((uint64_t **)this + 539), a5 + a4);
}

uint64_t physx::Sc::Scene::addToActiveBodyList(uint64_t this, physx::Sc::BodySim *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = (uint64_t *)(this + 32);
  v5 = *(_DWORD *)(this + 40);
  v6 = *((_QWORD *)a2 + 10);
  v11 = v6;
  if ((*(_BYTE *)(v6 + 44) & 1) != 0
    && (v7 = *(unsigned int *)(this + 48), *(_DWORD *)(this + 48) = v7 + 1, (_DWORD)v7 != v5))
  {
    v8 = *v4;
    v9 = *(_QWORD *)(*v4 + 8 * v7);
    v11 = v9;
    *(_DWORD *)(*(_QWORD *)v9 + 184) = v5;
    *(_QWORD *)(v8 + 8 * v7) = v6;
    v6 = v9;
  }
  else
  {
    LODWORD(v7) = v5;
  }
  if ((*((_WORD *)a2 + 90) & 0x1000) != 0)
  {
    v10 = *(unsigned int *)(this + 64);
    if ((*(_DWORD *)(this + 68) & 0x7FFFFFFFu) <= v10)
    {
      this = physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::growAndPushBack(this + 56, &v11);
      v5 = *(_DWORD *)(v3 + 40);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * v10) = v6;
      *(_DWORD *)(this + 64) = v10 + 1;
    }
    *((_DWORD *)a2 + 47) = v10;
  }
  *((_DWORD *)a2 + 46) = v7;
  if ((*(_DWORD *)(v3 + 44) & 0x7FFFFFFFu) <= v5)
    return physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::growAndPushBack((uint64_t)v4, &v11);
  *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v5) = v11;
  *(_DWORD *)(v3 + 40) = v5 + 1;
  return this;
}

uint64_t physx::Sc::Scene::removeFromActiveBodyList(uint64_t this, physx::Sc::BodySim *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((unsigned int *)a2 + 46);
  *((_DWORD *)a2 + 46) = -2;
  v3 = *(_DWORD *)(this + 40);
  v4 = *(_DWORD *)(this + 48);
  if (v2 < v4)
  {
    v5 = v4 - 1;
    *(_DWORD *)(this + 48) = v4 - 1;
    if (v3 != v4 && v2 < v5)
    {
      v7 = *(_QWORD *)(this + 32);
      v8 = *(_QWORD *)(v7 + 8 * v5);
      *(_DWORD *)(*(_QWORD *)v8 + 184) = v2;
      *(_QWORD *)(v7 + 8 * v2) = v8;
      LODWORD(v2) = v5;
    }
  }
  v9 = v3 - 1;
  if ((*((_WORD *)a2 + 90) & 0x1000) != 0)
  {
    v10 = *((unsigned int *)a2 + 47);
    *((_DWORD *)a2 + 47) = -2;
    v11 = *(_DWORD *)(this + 64) - 1;
    if ((_DWORD)v10 != v11)
    {
      v12 = *(_QWORD *)(this + 56);
      v13 = *(_QWORD *)(v12 + 8 * v11);
      *(_QWORD *)(v12 + 8 * v10) = v13;
      *(_DWORD *)(*(_QWORD *)v13 + 188) = v10;
    }
    *(_DWORD *)(this + 64) = v11;
  }
  if ((_DWORD)v2 != v9)
  {
    v14 = *(_QWORD *)(this + 32);
    v15 = *(_QWORD *)(v14 + 8 * v9);
    *(_QWORD *)(v14 + 8 * v2) = v15;
    *(_DWORD *)(*(_QWORD *)v15 + 184) = v2;
  }
  *(_DWORD *)(this + 40) = v9;
  return this;
}

uint64_t physx::Sc::Scene::registerInteraction(uint64_t this, physx::Sc::Interaction *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  physx::Sc::Interaction *v21;

  v5 = this;
  v21 = a2;
  v6 = *((unsigned __int8 *)a2 + 28);
  v7 = this + 16 * v6;
  v9 = *(_DWORD *)(v7 + 84);
  v8 = (_DWORD *)(v7 + 84);
  v10 = v8 - 3;
  v12 = v8 - 1;
  v11 = *(v8 - 1);
  *((_DWORD *)a2 + 4) = v11;
  v13 = v9 & 0x7FFFFFFF;
  if ((v9 & 0x7FFFFFFF) != 0)
  {
    v14 = v11;
  }
  else
  {
    this = physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::recreate((uint64_t)(v8 - 3), 0x40u);
    v14 = *v12;
    v13 = *v8 & 0x7FFFFFFF;
  }
  if (v13 <= v14)
  {
    this = physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::growAndPushBack((uint64_t)(v8 - 3), &v21);
    if (!a3)
      return this;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v14) = a2;
    *v12 = v14 + 1;
    if (!a3)
      return this;
  }
  v15 = v5 + 4 * v6;
  v18 = *(_DWORD *)(v15 + 120);
  v16 = (_DWORD *)(v15 + 120);
  v17 = v18;
  if (v11 > v18)
  {
    v19 = *(_QWORD *)(*v10 + 8 * v11);
    v20 = *(_QWORD *)(*v10 + 8 * v17);
    *(_QWORD *)(*v10 + 8 * v11) = v20;
    *(_QWORD *)(*v10 + 8 * v17) = v19;
    *(_DWORD *)(v19 + 16) = v17;
    *(_DWORD *)(v20 + 16) = v11;
    LODWORD(v17) = *v16;
  }
  *v16 = v17 + 1;
  return this;
}

uint64_t physx::Sc::Scene::unregisterInteraction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned __int8 *)(a2 + 28);
  v3 = *(unsigned int *)(a2 + 16);
  v4 = result + 16 * v2;
  v6 = *(_QWORD *)(v4 + 72);
  v5 = v4 + 72;
  v7 = *(_DWORD *)(v5 + 8) - 1;
  v8 = *(_QWORD *)(v6 + 8 * v7);
  *(_DWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v6 + 8 * v3) = v8;
  *(_DWORD *)(a2 + 16) = -1;
  if (v3 < v7)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8 * v3) + 16) = v3;
  v9 = result + 4 * v2;
  v12 = *(_DWORD *)(v9 + 120);
  v11 = (unsigned int *)(v9 + 120);
  v10 = v12;
  if (v3 < v12)
  {
    v13 = v10 - 1;
    *v11 = v13;
    if (v13 < *(_DWORD *)(v5 + 8))
    {
      v14 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v3);
      v15 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v13);
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v15;
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v13) = v14;
      *(_DWORD *)(v14 + 16) = v13;
      *(_DWORD *)(v15 + 16) = v3;
    }
  }
  return result;
}

uint64_t physx::Sc::Scene::notifyInteractionActivated(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned __int8 *)(a2 + 28);
  v3 = result + 4 * v2;
  v6 = *(_DWORD *)(v3 + 120);
  v4 = (_DWORD *)(v3 + 120);
  v5 = v6;
  v7 = result + 16 * v2;
  if (v6 < *(_DWORD *)(v7 + 80))
  {
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(_QWORD *)(v7 + 72);
    v10 = *(_QWORD *)(v9 + 8 * v5);
    v11 = *(_QWORD *)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v5) = v11;
    *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8 * v8) = v10;
    *(_DWORD *)(v10 + 16) = v8;
    *(_DWORD *)(v11 + 16) = v5;
    LODWORD(v5) = *v4;
  }
  *v4 = v5 + 1;
  return result;
}

uint64_t physx::Sc::Scene::notifyInteractionDeactivated(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a2 + 28);
  v3 = result + 4 * v2;
  v6 = *(_DWORD *)(v3 + 120);
  v4 = (unsigned int *)(v3 + 120);
  v5 = v6;
  if (v6 >= 2)
  {
    v7 = v5 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = result + 16 * v2;
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(_QWORD *)(v10 + 8 * v7);
    v12 = *(_QWORD *)(v10 + 8 * v8);
    *(_QWORD *)(v10 + 8 * v7) = v12;
    *(_QWORD *)(*(_QWORD *)(v9 + 72) + 8 * v8) = v11;
    *(_DWORD *)(v11 + 16) = v8;
    *(_DWORD *)(v12 + 16) = v7;
    v5 = *v4;
  }
  *v4 = v5 - 1;
  return result;
}

_QWORD *physx::Sc::Scene::allocatePointerBlock(physx::Sc::Scene *this, unsigned int a2)
{
  unint64_t v2;
  _QWORD *result;

  HIDWORD(v2) = a2;
  LODWORD(v2) = a2;
  result = 0;
  switch((v2 >> 3))
  {
    case 0u:
      return result;
    case 1u:
      result = (_QWORD *)*((_QWORD *)this + 87);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,8u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::allocateSlab((uint64_t)this + 136);
        result = (_QWORD *)*((_QWORD *)this + 87);
      }
      *((_QWORD *)this + 87) = *result;
      ++*((_DWORD *)this + 171);
      break;
    case 2u:
      result = (_QWORD *)*((_QWORD *)this + 158);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,16u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::allocateSlab((uint64_t)this + 704);
        result = (_QWORD *)*((_QWORD *)this + 158);
      }
      *((_QWORD *)this + 158) = *result;
      ++*((_DWORD *)this + 313);
      break;
    case 4u:
      result = (_QWORD *)*((_QWORD *)this + 229);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,32u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::allocateSlab((uint64_t)this + 1272);
        result = (_QWORD *)*((_QWORD *)this + 229);
      }
      *((_QWORD *)this + 229) = *result;
      ++*((_DWORD *)this + 455);
      break;
    default:
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1342);
      break;
  }
  return result;
}

uint64_t physx::Sc::Scene::deallocatePointerBlock(uint64_t this, void **a2, int a3)
{
  switch(a3)
  {
    case 32:
      if (a2)
      {
        --*(_DWORD *)(this + 1820);
        *a2 = *(void **)(this + 1832);
        *(_QWORD *)(this + 1832) = a2;
      }
      break;
    case 16:
      if (a2)
      {
        --*(_DWORD *)(this + 1252);
        *a2 = *(void **)(this + 1264);
        *(_QWORD *)(this + 1264) = a2;
      }
      break;
    case 8:
      if (a2)
      {
        --*(_DWORD *)(this + 684);
        *a2 = *(void **)(this + 696);
        *(_QWORD *)(this + 696) = a2;
      }
      break;
    default:
      if (a2)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      break;
  }
  return this;
}

_QWORD *physx::Sc::Scene::setFilterShaderData(_QWORD *this, const void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _QWORD *v9;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v9 = this;
  if (a2)
  {
    if (*((_DWORD *)this + 1003) >= a3)
    {
      v17 = (void *)this[500];
      v12 = a3;
LABEL_10:
      this = memcpy(v17, a2, v12);
      v9[500] = v17;
      *((_DWORD *)v9 + 1002) = a3;
      return this;
    }
    v12 = a3;
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1434);
    if (v13)
    {
      v17 = (void *)v13;
      *((_DWORD *)v9 + 1003) = a3;
      if (v9[500])
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      goto LABEL_10;
    }
    return (_QWORD *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1443, "Failed to allocate memory for filter shader data!", v14, v15, v16, a9);
  }
  else
  {
    if (this[500])
    {
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v9[500] = 0;
    }
    v9[501] = 0;
  }
  return this;
}

uint64_t physx::Sc::Scene::prepareCollide(physx::Sc::Scene *this)
{
  _BYTE *v2;
  float *v3;

  v2 = (char *)this + 4660;
  ++*((_DWORD *)this + 499);
  *((_BYTE *)this + 7472) = 0;
  *((_DWORD *)this + 538) = *(_DWORD *)(*((_QWORD *)this + 535) + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 230) + 296) + 88))(*((_QWORD *)this + 230) + 296);
  *((_DWORD *)this + 556) = 0;
  if (*v2)
  {
    *v2 = 0;
    v3 = (float *)*((_QWORD *)this + 230);
    if (v3[454] != 0.0 || v3[455] != 0.0 || v3[456] != 0.0 || v3[457] != 0.0)
      *((_DWORD *)this + 1066) |= 4u;
  }
  return physx::Sc::Scene::visualizeStartStep((uint64_t)this);
}

uint64_t physx::Sc::Scene::visualizeStartStep(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[5];
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (*(float *)(this + 4656) != 0.0)
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 1840);
    memset(v7, 0, sizeof(v7));
    v9 = 0;
    v10 = 0;
    v8 = 0x3F80000000000000;
    v11 = 1065353216;
    v13 = 0;
    v12 = 0;
    v14 = 1065353216;
    v15 = 0;
    v16 = 0;
    v17 = 1065353216;
    v18 = v2 + 296;
    if (*(float *)(v2 + 1848) != 0.0)
      physx::Bp::AABBManager::visualize(*(_QWORD *)(this + 1848), v7);
    v3 = *(unsigned int *)(v1 + 2052);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(v1 + 2008);
      do
      {
        v5 = *v4++;
        physx::Sc::ConstraintSim::visualize(*(_QWORD **)(v5 + 80), *(_QWORD *)(v1 + 1840) + 296);
        --v3;
      }
      while (v3);
    }
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 168))(v6);
    return physx::Sc::NPhaseCore::visualize(*(_QWORD *)(v1 + 3992), v7, (uint64_t)v6);
  }
  return this;
}

uint64_t physx::Sc::Scene::simulate(uint64_t this, float a2, physx::PxBaseTask *a3)
{
  uint64_t v3;
  float v4;
  BOOL v5;
  float v6;
  physx::PxBaseTask *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 != 0.0)
  {
    v3 = this;
    *(float *)(this + 1984) = a2;
    v4 = 1.0 / a2;
    v5 = a2 <= 0.0;
    v6 = 0.0;
    if (!v5)
      v6 = v4;
    *(float *)(this + 1988) = v6;
    v7 = (physx::PxBaseTask *)(this + 7304);
    *(_DWORD *)(this + 7336) = 1;
    *(_QWORD *)(this + 7328) = a3;
    if (a3)
    {
      (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a3 + 32))(a3);
      *(_QWORD *)(v3 + 7320) = *(_QWORD *)(*(_QWORD *)(v3 + 7328) + 16);
    }
    physx::Sc::Scene::prepareCollide((physx::Sc::Scene *)v3);
    physx::Sc::Scene::stepSetupCollide((physx::Sc::Scene *)v3, v7, v8, v9, v10, v11, v12, v13);
    *(_DWORD *)(v3 + 7392) = 1;
    *(_QWORD *)(v3 + 7384) = v7;
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)(v3 + 7304) + 32))(v7);
    *(_QWORD *)(v3 + 7376) = *(_QWORD *)(*(_QWORD *)(v3 + 7384) + 16);
    (*(void (**)(_QWORD, physx::PxBaseTask *))(**(_QWORD **)(v3 + 7320) + 144))(*(_QWORD *)(v3 + 7320), v7);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 7376) + 144))(*(_QWORD *)(v3 + 7376), v3 + 7360);
  }
  return this;
}

void *physx::Sc::Scene::stepSetupCollide(physx::Sc::Scene *this, physx::PxBaseTask *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x8_t v10;
  void *result;
  _QWORD v12[5];

  physx::Sc::ConstraintProjectionManager::processPendingUpdates(*((_QWORD *)this + 257), *((physx::PxcScratchAllocator **)this + 230), a3, a4, a5, a6, a7, a8);
  physx::Sc::Scene::kinematicsSetup((uint64_t)this, a2);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 230) + 1776) + 168))(v12);
  result = physx::Sc::NPhaseCore::updateDirtyInteractions(*((int32x2_t **)this + 499), v12, (*((_DWORD *)this + 1067) >> 3) & 1, v10);
  *((_DWORD *)this + 1066) &= 0xFFFFFFF9;
  return result;
}

uint64_t physx::Sc::Scene::advance(uint64_t this, float a2, physx::PxBaseTask *a3)
{
  uint64_t v3;
  float v4;
  BOOL v5;
  float v6;
  physx::PxBaseTask *v7;

  if (a2 != 0.0)
  {
    v3 = this;
    *(float *)(this + 1984) = a2;
    v4 = 1.0 / a2;
    v5 = a2 <= 0.0;
    v6 = 0.0;
    if (!v5)
      v6 = v4;
    *(float *)(this + 1988) = v6;
    v7 = (physx::PxBaseTask *)(this + 7304);
    *(_DWORD *)(this + 7336) = 1;
    *(_QWORD *)(this + 7328) = a3;
    if (a3)
    {
      (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a3 + 32))(a3);
      *(_QWORD *)(v3 + 7320) = *(_QWORD *)(*(_QWORD *)(v3 + 7328) + 16);
    }
    physx::Sc::Scene::kinematicsSetup(v3, v7);
    return (*(uint64_t (**)(_QWORD, physx::PxBaseTask *))(**(_QWORD **)(v3 + 7320) + 144))(*(_QWORD *)(v3 + 7320), v7);
  }
  return this;
}

uint64_t physx::Sc::Scene::collide(physx::Sc::Scene *this, float a2, physx::PxBaseTask *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *((float *)this + 496) = a2;
  physx::Sc::Scene::prepareCollide(this);
  physx::Sc::Scene::stepSetupCollide(this, a3, v5, v6, v7, v8, v9, v10);
  bzero((void *)(*((_QWORD *)this + 230) + 1936), 0x288uLL);
  *((_DWORD *)this + 1848) = 1;
  *((_QWORD *)this + 923) = a3;
  if (a3)
  {
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a3 + 32))(a3);
    v11 = *(_QWORD *)(*((_QWORD *)this + 923) + 16);
    *((_QWORD *)this + 922) = v11;
  }
  else
  {
    v11 = *((_QWORD *)this + 922);
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v11 + 144))(v11, (char *)this + 7360);
}

uint64_t physx::Sc::Scene::endSimulation(physx::Sc::Scene *this)
{
  uint64_t result;
  _QWORD v3[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 230) + 1776) + 168))(v3);
  physx::Sc::NPhaseCore::fireCustomFilteringCallbacks(*((_QWORD *)this + 499), (uint64_t)v3, (*((_DWORD *)this + 1067) & 8) != 0);
  *(_DWORD *)(*((_QWORD *)this + 499) + 40) = *(_DWORD *)(*((_QWORD *)this + 499) + 32);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 238) + 80))(*((_QWORD *)this + 238));
  *((_DWORD *)this + 498) = (*((_DWORD *)this + 498) + 1) & 0x7FFFFFFF;
  ++*((_DWORD *)this + 499);
  return result;
}

uint64_t physx::Sc::Scene::flush(physx::Sc::Scene *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  int v14;
  int v15;

  if (a2)
  {
    physx::Sc::Scene::fireQueuedContactCallbacks((uint64_t)this, 1);
    v3 = *((_QWORD *)this + 499);
    *(_DWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 84) = -1;
    physx::Sc::NPhaseCore::clearContactReportActorPairs(v3, 1);
    physx::Sc::Scene::fireTriggerCallbacks((uint64_t)this);
  }
  else
  {
    physx::Sc::NPhaseCore::clearContactReportActorPairs(*((_QWORD *)this + 499), 1);
  }
  physx::Sc::Scene::postReportsCleanup(this);
  v4 = *((_QWORD *)this + 499);
  *(_DWORD *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 84) = -1;
  v5 = *(_DWORD *)(v4 + 80);
  if (*(_DWORD *)(v4 + 76) != v5)
  {
    if (*(_QWORD *)(v4 + 64))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v5 = *(_DWORD *)(v4 + 80);
    }
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
      v5 = *(_DWORD *)(v4 + 80);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v4 + 64) = v6;
    *(_DWORD *)(v4 + 76) = v5;
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 2128);
  physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::recreate((uint64_t)this + 2128, *((_DWORD *)this + 534));
  v7 = *((_QWORD *)this + 268);
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(v7);
  physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::recreate(v7, *(_DWORD *)(v7 + 8));
  *((_DWORD *)this + 556) = 0;
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 2216);
  physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::recreate((uint64_t)this + 2216, *((_DWORD *)this + 556));
  physx::Sc::Scene::clearSleepWakeBodies(this);
  physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::recreate((uint64_t)this + 4160, *((_DWORD *)this + 1042));
  v8 = *((_QWORD *)this + 535);
  if (*(_DWORD *)(v8 + 56))
  {
    v9 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v8 + 8, *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v9++));
    while (v9 < *(unsigned int *)(v8 + 56));
  }
  *(_DWORD *)(v8 + 56) = 0;
  v14 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v8 + 48, 0, &v14);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v8 + 48, *(_DWORD *)(v8 + 56));
  v10 = *((_QWORD *)this + 536);
  if (*(_DWORD *)(v10 + 56))
  {
    v11 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v10 + 8, *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v11++));
    while (v11 < *(unsigned int *)(v10 + 56));
  }
  *(_DWORD *)(v10 + 56) = 0;
  v15 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v10 + 48, 0, &v15);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v10 + 48, *(_DWORD *)(v10 + 56));
  physx::Sc::Scene::processLostTouchPairs(this);
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 4384);
  physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::recreate((uint64_t)this + 4384, *((_DWORD *)this + 1098));
  physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::recreate((uint64_t)this + 32, *((_DWORD *)this + 10));
  for (i = 0; i != 48; i += 16)
    physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::recreate((uint64_t)this + i + 72, *(_DWORD *)((char *)this + i + 80));
  return physx::PxcNpMemBlockPool::releaseUnusedBlocks(*((_QWORD *)this + 230) + 40);
}

uint64_t physx::Sc::Scene::fireQueuedContactCallbacks(uint64_t this, char a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int16 *v16;
  unsigned int v19;
  unsigned int v20;
  _WORD v21[16];
  uint64_t v22;
  unsigned int v23;

  if (*(_QWORD *)(this + 4240))
  {
    v2 = this;
    if ((a2 & 1) != 0)
      v3 = 1;
    else
      v3 = *(_DWORD *)(this + 2152) == *(_DWORD *)(*(_QWORD *)(this + 4280) + 56) ? 1 : 17;
    v4 = *(_QWORD *)(this + 3992);
    v5 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(v4 + 8);
      do
      {
        if (v6 < (v5 - 1))
        {
          _X9 = *(_QWORD *)(v7 + 8 * v6 + 8);
          __asm { PRFM            #0, [X9] }
        }
        v14 = v6 + 1;
        v15 = *(_QWORD **)(v7 + 8 * v6);
        v16 = (unsigned __int16 *)v15[3];
        if ((v16[5] & 2) == 0)
        {
          if (v14 < v5)
          {
            _X8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6 + 8) + 24);
            __asm { PRFM            #0, [X8] }
          }
          v21[13] = 0;
          physx::Sc::Scene::finalizeContactStreamAndCreateHeader((_QWORD *)v2, (uint64_t)v21, v15, v16, v3);
          this = (*(uint64_t (**)(_QWORD, _WORD *, uint64_t, _QWORD))(**(_QWORD **)(v2 + 4240) + 24))(*(_QWORD *)(v2 + 4240), v21, v22, v23);
          v16[2] = v16[3];
          v19 = v16[4];
          _ZF = (v19 & 0xF) == 0;
          v20 = v19 >> 4;
          if (!_ZF)
            LOWORD(v20) = v20 + 1;
          v16[5] = v16[5] & 0x1F | (32 * v20);
        }
        v6 = v14;
      }
      while (v5 != v14);
    }
  }
  return this;
}

uint64_t physx::Sc::Scene::fireTriggerCallbacks(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  unint64_t v12;

  v1 = this;
  v2 = *(unsigned int *)(this + 2136);
  if ((_DWORD)v2)
  {
    this = *(_QWORD *)(this + 4240);
    if (this)
    {
      v3 = *(_QWORD *)(v1 + 4280);
      v4 = *(_DWORD *)(v3 + 56);
      v5 = *(_QWORD *)(v1 + 2128);
      if (v4)
      {
        v6 = 0;
        v7 = *(_DWORD *)(v1 + 2152);
        v8 = 36;
        do
        {
          if (v7 < v4 || (*(_BYTE *)(v5 + v8) & 4) != 0)
          {
            v9 = **(_QWORD **)(v1 + 2144);
            v10 = *(_DWORD *)(v3 + 40) & 0x7FFFFFFF;
            v11 = *(_DWORD *)(v9 + v6) >> 5 < v10
               && ((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 4 * ((unint64_t)*(unsigned int *)(v9 + v6) >> 5)) >> *(_DWORD *)(v9 + v6)) & 1) != 0;
            v12 = *(unsigned int *)(v9 + v6 + 4);
            if ((v12 >> 5) < v10
              && ((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 4 * (v12 >> 5)) >> v12) & 1) != 0)
            {
              v11 |= 2u;
            }
            *(_BYTE *)(v5 + v8) = v11;
          }
          v6 += 12;
          v8 += 40;
        }
        while (12 * v2 != v6);
      }
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v5);
    }
  }
  *(_DWORD *)(v1 + 2136) = 0;
  *(_DWORD *)(*(_QWORD *)(v1 + 2144) + 8) = 0;
  return this;
}

void *physx::Sc::Scene::clearSleepWakeBodies(physx::Sc::Scene *this)
{
  _WORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  void *result;

  v1 = (_WORD *)((char *)this + 4152);
  v2 = *((unsigned int *)this + 1023);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 506);
    do
    {
      v4 = *v3++;
      *(_WORD *)(*(_QWORD *)v4 + 180) &= 0xFF8Fu;
      --v2;
    }
    while (v2);
  }
  v5 = *((unsigned int *)this + 1037);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 513);
    do
    {
      v7 = *v6++;
      *(_WORD *)(*(_QWORD *)v7 + 180) &= 0xFF4Fu;
      --v5;
    }
    while (v5);
  }
  v8 = (char *)this + 4096;
  physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 4040);
  result = physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(v8);
  *v1 = 257;
  return result;
}

void physx::Sc::Scene::processLostTouchPairs(physx::Sc::Scene *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  physx::Sc::BodySim **v8;
  physx::Sc::BodySim *v9;
  unsigned int v10;
  unsigned int v11;

  if (*((_DWORD *)this + 1098))
  {
    v2 = 0;
    v3 = 0;
    while (1)
    {
      v4 = *((_QWORD *)this + 548);
      v5 = *((_DWORD *)this + 1102) & 0x7FFFFFFF;
      v6 = *(_DWORD *)(v4 + v2 + 16) >> 5 >= v5
         ? 0
         : *(_DWORD *)(*((_QWORD *)this + 550) + 4 * ((unint64_t)*(unsigned int *)(v4 + v2 + 16) >> 5)) & (1 << *(_DWORD *)(v4 + v2 + 16));
      v7 = *(_DWORD *)(v4 + v2 + 20) >> 5 >= v5
         ? 0
         : *(_DWORD *)(*((_QWORD *)this + 550) + 4 * ((unint64_t)*(unsigned int *)(v4 + v2 + 20) >> 5)) & (1 << *(_DWORD *)(v4 + v2 + 20));
      if (v6 | v7)
        break;
      v8 = (physx::Sc::BodySim **)(v4 + v2);
      v9 = *v8;
      v10 = *((_DWORD *)*v8 + 46);
      v11 = *((_DWORD *)v8[1] + 46);
      if (v10 < 0xFFFFFFFE)
      {
        if (v11 < 0xFFFFFFFE)
          goto LABEL_20;
LABEL_18:
        physx::Sc::BodySim::internalWakeUp(v9, 0.4);
LABEL_19:
        physx::Sc::BodySim::internalWakeUp(*(physx::Sc::BodySim **)(*((_QWORD *)this + 548) + v2 + 8), 0.4);
        goto LABEL_20;
      }
      if (v11 < 0xFFFFFFFE)
        goto LABEL_18;
LABEL_20:
      ++v3;
      v2 += 24;
      if (v3 >= *((unsigned int *)this + 1098))
        goto LABEL_21;
    }
    if (!v6)
      physx::Sc::BodySim::internalWakeUp(*(physx::Sc::BodySim **)(v4 + v2), 0.4);
    if (v7)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_21:
  *((_DWORD *)this + 1098) = 0;
  bzero(*((void **)this + 550), (4 * *((_DWORD *)this + 1102)));
}

void physx::Sc::Scene::removeBody(int32x2_t **this, physx::Sc::BodySim *a2, int8x8_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  physx::Sc::BodySim *v8;

  v5 = *((_QWORD *)a2 + 25);
  if (v5)
    physx::Sc::ConstraintProjectionManager::invalidateGroup(this[257], v5, 0, a3);
  v8 = (physx::Sc::BodySim *)*((_QWORD *)a2 + 10);
  v6 = (uint64_t)v8;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 505), (uint64_t *)&v8);
  v8 = (physx::Sc::BodySim *)v6;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 512), (uint64_t *)&v8);
  if (*((_DWORD *)a2 + 46) <= 0xFFFFFFFD && (*(_BYTE *)(v6 + 44) & 0x10) != 0)
  {
    v8 = a2;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 936), (uint64_t *)&v8);
  }
  v7 = *((unsigned int *)a2 + 22);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)(this + 550), v7 + 1);
  *(__int32 *)((char *)this[550]->i32 + ((v7 >> 3) & 0x1FFFFFFC)) |= 1 << v7;
}

_QWORD *physx::Sc::Scene::addConstraint(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int8x8_t v10;
  _QWORD *result;
  uint64_t v12;
  char v13;

  v8 = (uint64_t)a1[542];
  v9 = *(_QWORD **)(v8 + 560);
  if (!v9)
  {
    physx::shdfnd::PoolBase<physx::Sc::ConstraintSim,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::allocateSlab(v8);
    v9 = *(_QWORD **)(v8 + 560);
  }
  *(_QWORD *)(v8 + 560) = *v9;
  ++*(_DWORD *)(v8 + 548);
  physx::Sc::ConstraintSim::ConstraintSim((uint64_t)v9, a2, a3, a4, (uint64_t)a1);
  v12 = a2;
  v13 = 0;
  result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1 + 250, &v12, &v13, v10);
  if (!v13)
    *result = v12;
  return result;
}

uint64_t physx::Sc::Scene::removeConstraint(int32x2_t **this, physx::Sc::ConstraintCore *a2, int8x8_t a3)
{
  physx::Sc::ConstraintSim *v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  physx::Sc::ConstraintCore *v10;

  v5 = (physx::Sc::ConstraintSim *)*((_QWORD *)a2 + 10);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 13);
    if (!v6)
      v6 = *((_QWORD *)v5 + 14);
    v7 = *(_QWORD *)(v6 + 200);
    if (v7)
      physx::Sc::ConstraintProjectionManager::invalidateGroup(this[257], v7, v5, a3);
    v8 = this[542];
    physx::Sc::ConstraintSim::~ConstraintSim(v5);
    --v8[68].i32[1];
    *(int32x2_t *)v5 = v8[70];
    v8[70] = (int32x2_t)v5;
  }
  v10 = a2;
  return physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 250), (uint64_t *)&v10);
}

_QWORD *physx::Sc::Scene::addArticulation(int32x2_t *this, physx::Sc::ArticulationCore *a2, physx::Sc::BodySim **a3)
{
  uint64_t v6;
  const char *v7;
  physx::Sc::ArticulationSim *v8;
  int8x8_t v9;
  _QWORD *result;
  physx::Sc::ArticulationCore *v11;
  char v12;

  v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationSim>::getName() [T = physx::Sc::ArticulationSim]";
  else
    v7 = "<allocation names disabled>";
  v8 = (physx::Sc::ArticulationSim *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 104, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1746);
  if (physx::Sc::ArticulationSim::ArticulationSim(v8, a2, (physx::IG::SimpleIslandManager **)this, a3)
    && !*(_QWORD *)v8)
  {
    physx::Sc::ArticulationSim::~ArticulationSim(v8);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, physx::Sc::ArticulationSim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                                  + 24)
                                                                                      + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
  }
  else
  {
    v11 = a2;
    v12 = 0;
    result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 270, &v11, &v12, v9);
    if (!v12)
      *result = v11;
  }
  return result;
}

uint64_t physx::Sc::Scene::removeArticulation(physx::Sc::Scene *this, physx::Sc::ArticulationSim **a2)
{
  physx::Sc::ArticulationSim *v4;
  physx::Sc::ArticulationSim **v6;

  v4 = *a2;
  if (*a2)
  {
    physx::Sc::ArticulationSim::~ArticulationSim(*a2);
    (*(void (**)(uint64_t, physx::Sc::ArticulationSim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  v6 = a2;
  return physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 2160, (uint64_t *)&v6);
}

uint64_t physx::Sc::Scene::addArticulationJoint(uint64_t a1, uint64_t a2, physx::Sc::ArticulationSim ***a3, physx::Sc::BodySim **a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim>::getName() [T = physx::S"
         "c::ArticulationJointSim]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, 40, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1766);
  return physx::Sc::ArticulationJointSim::ArticulationJointSim(v9, a2, *a3, *a4);
}

uint64_t physx::Sc::Scene::addBrokenConstraint(uint64_t this, physx::Sc::ConstraintCore *a2)
{
  uint64_t v2;
  physx::Sc::ConstraintCore *v3;

  v3 = a2;
  v2 = *(unsigned int *)(this + 2224);
  if ((*(_DWORD *)(this + 2228) & 0x7FFFFFFFu) <= v2)
    return physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::growAndPushBack(this + 2216, &v3);
  *(_QWORD *)(*(_QWORD *)(this + 2216) + 8 * v2) = a2;
  *(_DWORD *)(this + 2224) = v2 + 1;
  return this;
}

_QWORD *physx::Sc::Scene::addActiveBreakableConstraint(int32x2_t *a1, uint64_t a2, int8x8_t a3)
{
  _QWORD *result;
  uint64_t v4;
  char v5;

  v4 = a2;
  v5 = 0;
  result = (_QWORD *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1 + 279, &v4, &v5, a3);
  if (!v5)
    *result = v4;
  *(_BYTE *)(v4 + 120) |= 4u;
  return result;
}

_QWORD *physx::Sc::Scene::allocateConstraintBlock(physx::Sc::Scene *this, unsigned int a2)
{
  _QWORD *result;

  if (a2 > 0x80)
  {
    if (a2 > 0x100)
    {
      if (a2 > 0x180)
      {
        return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1823);
      }
      else
      {
        result = (_QWORD *)*((_QWORD *)this + 498);
        if (!result)
        {
          physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,384u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::allocateSlab((uint64_t)this + 3424);
          result = (_QWORD *)*((_QWORD *)this + 498);
        }
        *((_QWORD *)this + 498) = *result;
        ++*((_DWORD *)this + 993);
      }
    }
    else
    {
      result = (_QWORD *)*((_QWORD *)this + 427);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,256u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::allocateSlab((uint64_t)this + 2856);
        result = (_QWORD *)*((_QWORD *)this + 427);
      }
      *((_QWORD *)this + 427) = *result;
      ++*((_DWORD *)this + 851);
    }
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)this + 356);
    if (!result)
    {
      physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,128u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::allocateSlab((uint64_t)this + 2288);
      result = (_QWORD *)*((_QWORD *)this + 356);
    }
    *((_QWORD *)this + 356) = *result;
    ++*((_DWORD *)this + 709);
  }
  return result;
}

uint64_t physx::Sc::Scene::deallocateConstraintBlock(uint64_t this, _QWORD *a2, unsigned int a3)
{
  if (a3 > 0x80)
  {
    if (a3 > 0x100)
    {
      if (a3 > 0x180)
      {
        if (a2)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      else if (a2)
      {
        --*(_DWORD *)(this + 3972);
        *a2 = *(_QWORD *)(this + 3984);
        *(_QWORD *)(this + 3984) = a2;
      }
    }
    else if (a2)
    {
      --*(_DWORD *)(this + 3404);
      *a2 = *(_QWORD *)(this + 3416);
      *(_QWORD *)(this + 3416) = a2;
    }
  }
  else if (a2)
  {
    --*(_DWORD *)(this + 2836);
    *a2 = *(_QWORD *)(this + 2848);
    *(_QWORD *)(this + 2848) = a2;
  }
  return this;
}

uint64_t physx::Cm::FanoutTask::removeReference(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD, uint64_t);

  v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  v2 = (unsigned int *)(v1 + 24);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    do
      v5 = __ldaxr(v2);
    while (__stlxr(v5 + 1, v2));
    *(_BYTE *)(v1 + 152) = 0;
    v6 = *(unsigned int *)(v1 + 88);
    if ((_DWORD)v6)
    {
      v7 = 0;
      for (i = 0; i < v6; ++i)
      {
        v9 = *(_QWORD *)(v1 + 80);
        v10 = *(unsigned int *)(v1 + 144);
        if ((*(_DWORD *)(v1 + 148) & 0x7FFFFFFFu) <= v10)
        {
          physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 96, (_QWORD *)(v9 + v7));
          v6 = *(unsigned int *)(v1 + 88);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * v10) = *(_QWORD *)(v9 + 8 * i);
          *(_DWORD *)(v1 + 144) = v10 + 1;
        }
        v7 += 8;
      }
    }
    *(_DWORD *)(v1 + 88) = 0;
    v11 = (uint64_t (***)(_QWORD, uint64_t))(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 8))(*(_QWORD *)(v1 + 16));
    this = (**v11)(v11, v1);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 160));
  return this;
}

uint64_t physx::Cm::FanoutTask::addReference(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  v2 = (unsigned int *)(v1 + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_BYTE *)(v1 + 152) = 1;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 160));
  return this;
}

uint64_t physx::Sc::Scene::finishBroadPhase(physx::Sc::Scene *this, physx::PxBaseTask *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  pthread_mutex_t **v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;

  v4 = *((_QWORD *)this + 231);
  v5 = *(_DWORD *)(v4 + 464);
  v6 = *(_QWORD *)(v4 + 456);
  *(_DWORD *)(*((_QWORD *)this + 230) + 2564) += v5;
  physx::Sc::NPhaseCore::onOverlapCreated(*((physx::Sc::ElementInteractionMarker **)this + 499), v6, v5);
  v7 = *(unsigned int *)(v4 + 448);
  v8 = *(_QWORD *)(v4 + 440);
  if ((*((_DWORD *)this + 1889) & 0x7FFFFFFF) == 0)
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate((uint64_t)this + 7544, 1u);
  if ((*((_DWORD *)this + 1893) & 0x7FFFFFFF) == 0)
    physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate((uint64_t)this + 7560, 1u);
  if ((*((_DWORD *)this + 1897) & 0x7FFFFFFF) == 0)
    physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate((uint64_t)this + 7576, 1u);
  *((_DWORD *)this + 1888) = 1;
  *((_DWORD *)this + 1892) = 1;
  *((_DWORD *)this + 1896) = 1;
  v9 = *((_QWORD *)this + 230);
  *(_DWORD *)(v9 + 2564) += v7;
  *((_DWORD *)this + 1750) = 1;
  *((_QWORD *)this + 874) = a2;
  if (a2)
  {
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
    *((_QWORD *)this + 873) = *(_QWORD *)(*((_QWORD *)this + 874) + 16);
    v9 = *((_QWORD *)this + 230);
  }
  v10 = (char *)this + 6968;
  v11 = *(pthread_mutex_t ***)(v9 + 1920);
  *((_DWORD *)this + 1902) = 0;
  if ((*((_DWORD *)this + 1903) & 0x7FFFFFFFu) >= v7)
  {
    *((_DWORD *)this + 1902) = v7;
    *((_QWORD *)this + 949) = 0;
    if (!(_DWORD)v7)
      return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 873) + 144))(*((_QWORD *)this + 873), (char *)this + 6968);
    v12 = (uint64_t *)((char *)this + 7592);
  }
  else
  {
    physx::shdfnd::Array<physx::PxFilterInfo,physx::shdfnd::ReflectionAllocator<physx::PxFilterInfo>>::recreate((uint64_t)this + 7600, v7);
    *((_DWORD *)this + 1902) = v7;
    v12 = (uint64_t *)((char *)this + 7592);
    *((_QWORD *)this + 949) = 0;
  }
  v24 = v8;
  v13 = 0;
  v14 = 0;
  v15 = v7;
  do
  {
    v16 = v15 - 512;
    v17 = v7;
    if (v15 >= 0x200)
      v18 = 512;
    else
      v18 = v15;
    v19 = physx::Cm::FlushPool::allocate(v11, 224, 0x10u);
    v20 = *((_QWORD *)this + 499);
    v21 = *((_QWORD *)this + 950) + 8 * v13;
    *(_QWORD *)(v19 + 8) = *((_QWORD *)this + 3);
    *(_QWORD *)(v19 + 16) = 0;
    *(_DWORD *)(v19 + 32) = 0;
    *(_QWORD *)v19 = &off_24ED8E918;
    *(_QWORD *)(v19 + 40) = v20;
    *(_QWORD *)(v19 + 48) = v24 + 24 * v13;
    *(_DWORD *)(v19 + 56) = v18;
    v7 = v17;
    *(_QWORD *)(v19 + 192) = v21;
    *(_QWORD *)(v19 + 200) = 0;
    *(_DWORD *)(v19 + 208) = 0;
    *(_QWORD *)(v19 + 216) = 0;
    *(_OWORD *)(v19 + 60) = 0u;
    *(_OWORD *)(v19 + 76) = 0u;
    *(_OWORD *)(v19 + 92) = 0u;
    *(_OWORD *)(v19 + 108) = 0u;
    *(_OWORD *)(v19 + 124) = 0u;
    *(_OWORD *)(v19 + 140) = 0u;
    *(_OWORD *)(v19 + 156) = 0u;
    *(_OWORD *)(v19 + 172) = 0u;
    *(_DWORD *)(v19 + 32) = 1;
    *(_QWORD *)(v19 + 24) = v10;
    (*(void (**)(char *))(*((_QWORD *)this + 871) + 32))(v10);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v22 = (uint64_t *)(v14 + 216);
    if (!v14)
      v22 = v12;
    *v22 = v19;
    v13 += 512;
    v15 = v16;
    v14 = v19;
  }
  while (v13 < v17);
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 873) + 144))(*((_QWORD *)this + 873), (char *)this + 6968);
}

uint64_t physx::Sc::Scene::postBroadPhaseStage2(physx::Sc::Scene *this, physx::PxBaseTask *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;

  physx::Sc::Scene::processLostTouchPairs(this);
  *((_DWORD *)this + 1764) = 1;
  *((_QWORD *)this + 881) = a2;
  if (a2)
  {
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
    *((_QWORD *)this + 880) = *(_QWORD *)(*((_QWORD *)this + 881) + 16);
    *((_DWORD *)this + 1778) = 1;
    *((_QWORD *)this + 888) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
    *((_QWORD *)this + 887) = *(_QWORD *)(*((_QWORD *)this + 888) + 16);
    *((_DWORD *)this + 1792) = 1;
    *((_QWORD *)this + 895) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
    *((_QWORD *)this + 894) = *(_QWORD *)(*((_QWORD *)this + 895) + 16);
    *((_DWORD *)this + 1806) = 1;
    *((_QWORD *)this + 902) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
    *((_QWORD *)this + 901) = *(_QWORD *)(*((_QWORD *)this + 902) + 16);
  }
  else
  {
    *((_DWORD *)this + 1778) = 1;
    *((_QWORD *)this + 888) = 0;
    *((_DWORD *)this + 1792) = 1;
    *((_QWORD *)this + 895) = 0;
    *((_DWORD *)this + 1806) = 1;
    *((_QWORD *)this + 902) = 0;
  }
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 880) + 144))(*((_QWORD *)this + 880), (char *)this + 7024);
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 887) + 144))(*((_QWORD *)this + 887), (char *)this + 7080);
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 894) + 144))(*((_QWORD *)this + 894), (char *)this + 7136);
  result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 901) + 144))(*((_QWORD *)this + 901), (char *)this + 7192);
  v5 = *((unsigned int *)this + 1888);
  if ((_DWORD)v5)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 943) + 8 * i);
      if ((v7 & 1) == 0)
      {
        v8 = *((_QWORD *)this + 230);
        *(_DWORD *)(*(_QWORD *)(v8 + 504) + (((unint64_t)*(unsigned int *)(v7 + 88) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(v7 + 88));
        v9 = *(_QWORD *)(v8 + 472);
        v10 = *(unsigned int *)(v8 + 480);
        *(_DWORD *)(v8 + 480) = v10 + 1;
        *(_QWORD *)(v9 + 8 * v10) = v7;
        v5 = *((unsigned int *)this + 1888);
      }
    }
  }
  v11 = *((unsigned int *)this + 1892);
  if ((_DWORD)v11)
  {
    v12 = (_QWORD **)*((_QWORD *)this + 945);
    do
    {
      v13 = *v12;
      if (*v12)
        v14 = ((unint64_t)*v12 & 1) == 0;
      else
        v14 = 0;
      if (v14)
      {
        v15 = *((_QWORD *)this + 499);
        --*(_DWORD *)(v15 + 1844);
        *v13 = *(_QWORD *)(v15 + 1856);
        *(_QWORD *)(v15 + 1856) = v13;
      }
      ++v12;
      --v11;
    }
    while (v11);
  }
  v16 = *((unsigned int *)this + 1896);
  if ((_DWORD)v16)
  {
    v17 = (_QWORD **)*((_QWORD *)this + 947);
    do
    {
      v18 = *v17;
      if (*v17)
        v19 = ((unint64_t)*v17 & 1) == 0;
      else
        v19 = 0;
      if (v19)
      {
        v20 = *((_QWORD *)this + 499);
        --*(_DWORD *)(v20 + 3548);
        *v18 = *(_QWORD *)(v20 + 3560);
        *(_QWORD *)(v20 + 3560) = v18;
      }
      ++v17;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t physx::Sc::Scene::releaseConstraints(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 4154))
  {
    if ((a2 & 1) != 0)
      return this;
    v2 = this + 1840;
  }
  else
  {
    if (!a2)
      return this;
    v2 = this + 1840;
    physx::PxcNpMemBlockPool::releaseContacts((physx::PxcNpMemBlockPool *)(*(_QWORD *)(this + 1840) + 40));
  }
  return physx::PxcNpMemBlockPool::releaseContacts((physx::PxcNpMemBlockPool *)(*(_QWORD *)v2 + 40));
}

uint64_t physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(result, a2);
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t physx::Sc::Scene::addToLostTouchList(uint64_t this, physx::Sc::BodySim *a2, physx::Sc::BodySim *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  v3 = *((_DWORD *)a3 + 22);
  LODWORD(v8) = *((_DWORD *)a2 + 22);
  HIDWORD(v8) = v3;
  v4 = *(_DWORD *)(this + 4392);
  if ((*(_DWORD *)(this + 4396) & 0x7FFFFFFFu) <= v4)
    return physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::growAndPushBack((uint64_t *)(this + 4384), &v7);
  v5 = *(_QWORD *)(this + 4384) + 24 * v4;
  v6 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_OWORD *)v5 = v6;
  ++*(_DWORD *)(this + 4392);
  return this;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

void physx::Sc::Scene::postCCDPass(physx::Sc::Scene *this, physx::PxBaseTask *a2)
{
  int v3;
  _DWORD *v4;
  int v5;
  int v6;
  size_t v7;
  int32x2_t ***v8;
  uint64_t v9;
  physx::Sc::ShapeInteraction **v10;
  size_t v11;
  uint64_t *v12;
  unsigned int v13;
  int8x8_t v14;
  int v15;
  uint64_t v16;
  int32x2_t ***v17;
  int32x2_t **v18;
  uint64_t v19;
  uint64_t v20;
  physx::Sc::ShapeInteraction **v21;
  physx::Sc::ShapeInteraction *v22;
  physx::Sc::BodySim *v23;
  physx::Sc::BodySim *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  int v35;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  physx::Sc::ShapeInteraction **v46;
  int32x2_t ***v47;
  _QWORD v48[5];
  int v49;
  int v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(*((_QWORD *)this + 233) + 180);
  v4 = (_DWORD *)*((_QWORD *)this + 230);
  v5 = v4[435];
  v6 = v4[434];
  v50 = v6;
  v51 = v5;
  v49 = v4[436];
  v7 = (16 * v5);
  if (v7 < 0x401)
  {
    MEMORY[0x24BDAC7A8](this);
    v47 = (int32x2_t ***)((char *)&v46 - ((v7 + 15) & 0x1FFFFFFF0));
    bzero(v47, v7);
  }
  else
  {
    v8 = (int32x2_t ***)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v48, (16 * v5), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3474);
    v47 = v8;
    v6 = v50;
  }
  v9 = (16 * v6);
  if (v9 < 0x401)
  {
    MEMORY[0x24BDAC7A8](v8);
    v46 = (physx::Sc::ShapeInteraction **)((char *)&v46 - ((v9 + 15) & 0x1FFFFFFF0));
    bzero(v46, (16 * v6));
  }
  else
  {
    v10 = (physx::Sc::ShapeInteraction **)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v48, (16 * v6), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3475);
    v46 = v10;
  }
  v11 = (16 * v49);
  if (v11 < 0x401)
  {
    MEMORY[0x24BDAC7A8](v10);
    v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0x1FFFFFFF0));
    bzero(v12, v11);
  }
  else
  {
    v12 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v48, (16 * v49), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3476);
  }
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 230) + 1776) + 168))(v48);
  v13 = *((_DWORD *)this + 1067);
  physx::PxsContext::fillManagerTouchEvents(*((_QWORD *)this + 230), (char *)v47, &v51, (char *)v46, &v50, (char *)v12, &v49);
  v15 = (v13 >> 3) & 1;
  if (v51 >= 1)
  {
    v16 = 0;
    v17 = v47 + 1;
    do
    {
      v18 = *v17;
      physx::Sc::NPhaseCore::managerNewTouch(*((int32x2_t **)this + 499), *v17, v14);
      physx::Sc::ShapeInteraction::managerNewTouch((physx::Sc::ShapeInteraction *)v18, v3, 1, (uint64_t)v48, v15);
      if ((*((_BYTE *)v18 + 66) & 4) == 0)
        physx::IG::SimpleIslandManager::setEdgeConnected(*((_QWORD **)this + 235), *((unsigned int *)v18 + 24), v19);
      ++v16;
      v17 += 2;
    }
    while (v16 < v51);
  }
  if (v50 >= 1)
  {
    v20 = 0;
    v21 = v46 + 1;
    do
    {
      v22 = *v21;
      if (physx::Sc::ShapeInteraction::managerLostTouch(*v21, v3, 1, (uint64_t)v48, v15)
        && (*((_BYTE *)v22 + 66) & 4) == 0)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 5) + 8) + 80) + 13) - 1 >= 2)
          v23 = 0;
        else
          v23 = *(physx::Sc::BodySim **)(*((_QWORD *)v22 + 5) + 8);
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 6) + 8) + 80) + 13) - 1 >= 2)
          v24 = 0;
        else
          v24 = *(physx::Sc::BodySim **)(*((_QWORD *)v22 + 6) + 8);
        physx::Sc::Scene::addToLostTouchList((uint64_t)this, v23, v24);
      }
      physx::IG::SimpleIslandManager::setEdgeDisconnected(*((_QWORD *)this + 235), *((_DWORD *)v22 + 24));
      ++v20;
      v21 += 2;
    }
    while (v20 < v50);
  }
  v25 = v49;
  if (v49 >= 1)
  {
    v26 = 0;
    v27 = v12 + 1;
    do
    {
      v28 = *v27;
      if ((*(_BYTE *)(*v27 + 64) & 0x20) != 0)
      {
        physx::Sc::ShapeInteraction::processUserNotificationSync(*v27);
        physx::Sc::ShapeInteraction::processUserNotificationAsync(v28, 32, 0, 0, v3, 0, (uint64_t)v48, 0);
        v25 = v49;
      }
      ++v26;
      v27 += 2;
    }
    while (v26 < v25);
  }
  physx::Sc::Scene::checkForceThresholdContactEvents(this, v3);
  v29 = (_QWORD *)(*((_QWORD *)this + 231) + 224);
  v30 = *((unsigned int *)this + 526);
  if ((_DWORD)v30)
  {
    for (i = 0; i != v30; ++i)
    {
      v32 = *((_QWORD *)this + 262);
      v33 = *(_QWORD *)(v32 + 8 * i);
      if ((int)i + 8 < v30)
      {
        _X8 = *(_QWORD *)(v32 + 8 * (i + 8));
        v35 = ~((_X8 + 511) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
        }
        while (!__CFADD__(v35++, 1));
      }
      physx::Sc::BodySim::updateCached(v33, v29);
    }
  }
  v41 = *((unsigned int *)this + 553);
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = *((_QWORD *)this + 271);
    do
    {
      v44 = **(_QWORD **)(v43 + 8 * v42);
      if (*(_DWORD *)(v44 + 48))
      {
        v45 = 0;
        do
          physx::Sc::BodySim::updateCached(*(_QWORD *)(*(_QWORD *)(v44 + 40) + 8 * v45++), v29);
        while (v45 < *(unsigned int *)(v44 + 48));
        v41 = *((unsigned int *)this + 553);
      }
      ++v42;
    }
    while (v42 < v41);
  }
  if (v11 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v48, (char *)v12);
  if (v9 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v48, (char *)v46);
  if (v7 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v48, (char *)v47);
}

void physx::Sc::Scene::checkForceThresholdContactEvents(physx::Sc::Scene *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  _QWORD v14[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 230) + 1776) + 168))(v14);
  v4 = *(_QWORD *)(*((_QWORD *)this + 236) + 16);
  v5 = *(unsigned int *)(v4 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 32 * v5;
    do
    {
      v8 = *(_QWORD *)(v4 + 8);
      v9 = *(_QWORD *)(v8 + v6);
      if (!v9)
        goto LABEL_16;
      v10 = *(_DWORD *)(v9 + 64);
      if ((v10 & 0x1C0) == 0)
        goto LABEL_16;
      v11 = (2 * v10) & 0x100000;
      v12 = v10 & 0xFFE7FFFF | (((v10 >> 19) & 1) << 20);
      *(_DWORD *)(v9 + 64) = v12;
      if (*(float *)(v8 + v6 + 24) <= (float)(*(float *)(v8 + v6 + 12) * *((float *)this + 496)))
      {
        if ((v10 & 0x100) == 0 || !v11)
          goto LABEL_16;
        v13 = 256;
      }
      else
      {
        *(_DWORD *)(v9 + 64) = v12 | 0x80000;
        if ((v10 & 0x40) == 0 || v11)
        {
          if ((v10 & 0x80) == 0 || !v11)
            goto LABEL_16;
          v13 = 128;
        }
        else
        {
          v13 = 64;
        }
      }
      physx::Sc::ShapeInteraction::processUserNotificationSync(v9);
      physx::Sc::ShapeInteraction::processUserNotificationAsync(v9, v13, 0, 0, a2, 0, (uint64_t)v14, 0);
LABEL_16:
      v6 += 32;
    }
    while (v7 != v6);
  }
}

uint64_t physx::Cm::FlushPool::clear(pthread_mutex_t **this)
{
  uint64_t result;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*this);
  result = physx::Cm::FlushPool::clearNotThreadSafe((uint64_t)this);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*this);
  return result;
}

uint64_t physx::Sc::Scene::kinematicsSetup(uint64_t this, physx::PxBaseTask *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  pthread_mutex_t **v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void (***v10)(ScKinematicUpdateTask *__hidden);
  int v11;
  int v12;
  void (**v13)(ScKinematicUpdateTask *__hidden);
  uint64_t v14;
  uint64_t v15;
  void (**v16)(ScKinematicAddDynamicTask *__hidden);

  v3 = this;
  v4 = *(_DWORD *)(this + 48);
  v5 = *(_QWORD *)(this + 32);
  v6 = *(pthread_mutex_t ***)(*(_QWORD *)(this + 1840) + 1920);
  if (v4)
  {
    v7 = 0;
    v8 = *(_DWORD *)(this + 48);
    do
    {
      v9 = physx::Cm::FlushPool::allocate(v6, 56, 0x10u);
      v10 = (void (***)(ScKinematicUpdateTask *__hidden))v9;
      v11 = *(_DWORD *)(v3 + 1988);
      if (v8 >= 0x400)
        v12 = 1024;
      else
        v12 = v8;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      *(_QWORD *)v9 = &off_24ED8E678;
      *(_QWORD *)(v9 + 40) = v5 + 8 * v7;
      *(_DWORD *)(v9 + 48) = v12;
      *(_DWORD *)(v9 + 52) = v11;
      *(_DWORD *)(v9 + 32) = 1;
      *(_QWORD *)(v9 + 24) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
        v10[2] = (void (**)(ScKinematicUpdateTask *__hidden))v10[3][2];
        v13 = *v10;
      }
      else
      {
        v13 = &off_24ED8E678;
      }
      this = ((uint64_t (*)(_QWORD *))v13[5])(v10);
      v7 += 1024;
      v8 -= 1024;
    }
    while (v7 < v4);
  }
  if ((*(_BYTE *)(v3 + 4269) & 0x20) != 0)
  {
    v14 = physx::Cm::FlushPool::allocate(v6, 64, 0x10u);
    v15 = *(_QWORD *)(v3 + 1904);
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v14 + 16) = 0;
    *(_DWORD *)(v14 + 32) = 0;
    v16 = &off_24ED8E6E8;
    *(_QWORD *)v14 = &off_24ED8E6E8;
    *(_QWORD *)(v14 + 40) = v5;
    *(_DWORD *)(v14 + 48) = v4;
    *(_QWORD *)(v14 + 56) = v15;
    *(_DWORD *)(v14 + 32) = 1;
    *(_QWORD *)(v14 + 24) = a2;
    if (a2)
    {
      (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16);
      v16 = *(void (***)(ScKinematicAddDynamicTask *__hidden))v14;
    }
    return ((uint64_t (*)(uint64_t))v16[5])(v14);
  }
  return this;
}

void physx::Sc::Scene::resizeReleasedBodyIDMaps(physx::Sc::Scene *this, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;

  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 4400, a2);
  v6 = *((_QWORD *)this + 536);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v6 + 32, a2);
  if ((*(_DWORD *)(v6 + 60) & 0x7FFFFFFFu) < a3)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v6 + 48, a3);
  v7 = *((_QWORD *)this + 535);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v7 + 32, a2);
  if ((*(_DWORD *)(v7 + 60) & 0x7FFFFFFFu) < a3)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v7 + 48, a3);
}

_QWORD *physx::Sc::Scene::finalizeContactStreamAndCreateHeader(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned __int16 *a4, unsigned __int8 a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v5 = *(_QWORD *)(result[499] + 64);
  v6 = *(unsigned int *)a4;
  v7 = a4[5];
  v8 = (v7 >> 1) & 0x7FF0;
  v9 = a4[3];
  if ((v7 & 0x1F & a5) != 0 && v9 != 0)
  {
    v11 = result[535];
    v12 = *(_DWORD *)(v11 + 40) & 0x7FFFFFFF;
    v13 = v8 + v6 + v5 + 48;
    v14 = a4[3];
    do
    {
      v15 = *(_WORD *)v13;
      if (*(_DWORD *)(v13 + 4) >> 5 < v12
        && ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + 4 * ((unint64_t)*(unsigned int *)(v13 + 4) >> 5)) >> *(_DWORD *)(v13 + 4)) & 1) != 0)
      {
        v15 |= 1u;
      }
      if (*(_DWORD *)(v13 + 8) >> 5 < v12
        && ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + 4 * ((unint64_t)*(unsigned int *)(v13 + 8) >> 5)) >> *(_DWORD *)(v13 + 8)) & 1) != 0)
      {
        v15 |= 2u;
      }
      *(_WORD *)v13 = v15;
      v13 += 64;
      --v14;
    }
    while (v14);
  }
  v16 = v5 + v6;
  v17 = result[536];
  *(_QWORD *)a2 = *(_QWORD *)(a3[3] + 24);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3[3] + 32);
  v18 = a3[3];
  v19 = *(_DWORD *)(v17 + 40) & 0x7FFFFFFF;
  v20 = 0;
  if (*(_DWORD *)(v18 + 16) >> 5 < v19)
  {
    result = *(_QWORD **)(v17 + 32);
    if (((*((_DWORD *)result + ((unint64_t)*(unsigned int *)(v18 + 16) >> 5)) >> *(_DWORD *)(v18 + 16)) & 1) != 0)
      v20 = 1;
  }
  v21 = v16 + v8;
  v22 = *(unsigned int *)(v18 + 20);
  if ((v22 >> 5) < v19 && ((*(_DWORD *)(*(_QWORD *)(v17 + 32) + 4 * (v22 >> 5)) >> v22) & 1) != 0)
    v20 |= 2u;
  *(_WORD *)(a2 + 26) = v20;
  *(_QWORD *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 40) = v9;
  v23 = a4[4];
  if (v23)
  {
    v23 -= 4;
    *(_QWORD *)(a2 + 16) = v16 + 4;
    if ((v7 & 8) != 0)
    {
      v24 = a3[2];
      v25 = *(_QWORD *)(a3[1] + 80);
      if (*(_BYTE *)(v25 + 13))
      {
        *(_QWORD *)(v16 + 12) = *(_QWORD *)(v25 + 80);
        *(_DWORD *)(v16 + 20) = *(_DWORD *)(v25 + 88);
        v26 = *(_QWORD *)(v25 + 96);
        v27 = *(_DWORD *)(v25 + 104);
      }
      else
      {
        v26 = 0;
        *(_QWORD *)(v16 + 12) = 0;
        *(_DWORD *)(v16 + 20) = 0;
        v27 = 0;
      }
      *(_QWORD *)(v16 + 36) = v26;
      *(_DWORD *)(v16 + 44) = v27;
      v28 = *(_QWORD *)(v24 + 80);
      if (*(_BYTE *)(v28 + 13))
      {
        *(_QWORD *)(v16 + 24) = *(_QWORD *)(v28 + 80);
        *(_DWORD *)(v16 + 32) = *(_DWORD *)(v28 + 88);
        v29 = *(_QWORD *)(v28 + 96);
        v30 = *(_DWORD *)(v28 + 104);
      }
      else
      {
        v29 = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 32) = 0;
        v30 = 0;
      }
      *(_QWORD *)(v16 + 48) = v29;
      *(_DWORD *)(v16 + 56) = v30;
      a4[5] = v7 & 0xFFF7;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_WORD *)(a2 + 24) = v23;
  return result;
}

char *physx::Sc::Scene::getQueuedContactPairHeaders(physx::Sc::Scene *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int16 *v16;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v27;

  if (*((_DWORD *)this + 538) == *(_DWORD *)(*((_QWORD *)this + 535) + 56))
    v2 = 1;
  else
    v2 = 17;
  v3 = *((_QWORD *)this + 499);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(unsigned int *)(v3 + 16);
  v6 = (char *)this + 1968;
  if ((*((_DWORD *)this + 495) & 0x7FFFFFFFu) >= v5)
  {
    *((_DWORD *)this + 494) = 0;
    if (!(_DWORD)v5)
      return v6;
    v27 = (unsigned int *)((char *)this + 1976);
  }
  else
  {
    physx::shdfnd::Array<physx::PxContactPairHeader,physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>>::recreate((uint64_t)this + 1968, v5);
    v27 = (unsigned int *)((char *)this + 1976);
    *((_DWORD *)this + 494) = 0;
  }
  v7 = 0;
  do
  {
    if (v7 < (v5 - 1))
    {
      _X9 = *(_QWORD *)(v4 + 8 * v7 + 8);
      __asm { PRFM            #0, [X9] }
    }
    v14 = v7 + 1;
    v15 = *(_QWORD **)(v4 + 8 * v7);
    v16 = (unsigned __int16 *)v15[3];
    if ((v16[5] & 2) == 0)
    {
      if (v14 < v5)
      {
        _X8 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * v7 + 8) + 24);
        __asm { PRFM            #0, [X8] }
      }
      v19 = *((_DWORD *)this + 495) & 0x7FFFFFFF;
      v20 = *((_DWORD *)this + 494);
      if (v19 <= v20)
      {
        if (v19)
          v21 = 2 * *((_DWORD *)this + 495);
        else
          v21 = 1;
        physx::shdfnd::Array<physx::PxContactPairHeader,physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>>::recreate((uint64_t)v6, v21);
        v20 = *v27;
      }
      v22 = *((_QWORD *)this + 246);
      *((_DWORD *)this + 494) = v20 + 1;
      v23 = v22 + 48 * v20;
      *(_WORD *)(v23 + 26) = 0;
      physx::Sc::Scene::finalizeContactStreamAndCreateHeader(this, v23, v15, v16, v2);
      v16[2] = v16[3];
      v24 = v16[4];
      _ZF = (v24 & 0xF) == 0;
      v25 = v24 >> 4;
      if (!_ZF)
        LOWORD(v25) = v25 + 1;
      v16[5] = v16[5] & 0x1F | (32 * v25);
    }
    v7 = v14;
  }
  while (v5 != v14);
  return v6;
}

uint64_t physx::Sc::Scene::fireBrokenConstraintCallbacks(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  int v8;
  int v9;

  if (*(_QWORD *)(this + 4240))
  {
    v1 = this;
    v2 = *(unsigned int *)(this + 2224);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v1 + 2216) + v3);
        if (*(_QWORD *)(v5 + 80))
        {
          v9 = -1;
          v6 = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(v5 + 32) + 40))(*(_QWORD *)(v5 + 32), &v9);
          v7[0] = v5 + qword_25582FA10;
          v7[1] = v6;
          v8 = v9;
          this = (***(uint64_t (****)(_QWORD, _QWORD *, uint64_t))(v1 + 4240))(*(_QWORD *)(v1 + 4240), v7, 1);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  return this;
}

void *physx::Sc::Scene::fireCallbacksPostSync(physx::Sc::Scene *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v2 = (char *)this + 4152;
  if (!*((_BYTE *)this + 4153))
  {
    v3 = *((_DWORD *)this + 1023);
    if (v3)
    {
      v4 = *((_QWORD *)this + 506);
      v5 = *((_QWORD *)this + 235);
      v6 = v3 - 1;
      do
      {
        v7 = (uint64_t *)(v4 + 8 * v6);
        v8 = *(_QWORD *)*v7;
        v9 = *(_WORD *)(v8 + 180);
        if ((v9 & 0x80) != 0)
        {
          *(_WORD *)(v8 + 180) = v9 & 0xFFDF;
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 4040, v7);
        }
        else if ((*(_BYTE *)(*(_QWORD *)(v5 + 248)
                            + (((unint64_t)*(unsigned int *)(v8 + 176) >> 2) & 0x3FFFFFE0)
                            + 4) & 2) != 0)
        {
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 4040, v7);
          physx::Sc::BodySim::internalWakeUp((physx::Sc::BodySim *)v8, 0.4);
        }
      }
      while ((unint64_t)v6--);
    }
    v2[1] = 1;
  }
  if (!*v2)
  {
    v11 = *((_DWORD *)this + 1037);
    if (v11)
    {
      v12 = *((_QWORD *)this + 513);
      v13 = v11 - 1;
      do
      {
        v14 = (uint64_t *)(v12 + 8 * v13);
        if ((*(_WORD *)(*(_QWORD *)*v14 + 180) & 0x40) != 0)
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 4096, v14);
      }
      while ((unint64_t)v13--);
    }
    *v2 = 1;
  }
  if (*((_QWORD *)this + 530))
  {
    v16 = *((unsigned int *)this + 1023);
    v17 = *((unsigned int *)this + 1037);
    v18 = v16 <= v17 ? *((_DWORD *)this + 1037) : *((_DWORD *)this + 1023);
    if (v18)
    {
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v18, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 4569);
      if (v19)
      {
        v20 = v19;
        if ((_DWORD)v16)
        {
          v21 = 0;
          v22 = *((_QWORD *)this + 506);
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)v22 + 12) & 4) != 0)
              *(_QWORD *)(v19 + 8 * v21++) = *(_QWORD *)v22
                                             + *((_QWORD *)&physx::Sc::gOffsetTable
                                               + *(unsigned __int8 *)(*(_QWORD *)v22 + 13)
                                               + 10);
            v22 += 8;
            --v16;
          }
          while (v16);
          if (v21)
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 530) + 16))(*((_QWORD *)this + 530), v19);
        }
        if ((_DWORD)v17)
        {
          v23 = 0;
          v24 = *((_QWORD *)this + 513);
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)v24 + 12) & 4) != 0)
              *(_QWORD *)(v20 + 8 * v23++) = *(_QWORD *)v24
                                             + *((_QWORD *)&physx::Sc::gOffsetTable
                                               + *(unsigned __int8 *)(*(_QWORD *)v24 + 13)
                                               + 10);
            v24 += 8;
            --v17;
          }
          while (v17);
          if (v23)
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 530) + 8))(*((_QWORD *)this + 530), v20);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v20);
      }
    }
  }
  return physx::Sc::Scene::clearSleepWakeBodies(this);
}

uint64_t physx::Sc::Scene::prepareOutOfBoundsCallbacks(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v1 = *(_QWORD *)(this + 1848);
  v2 = *(unsigned int *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 408);
  *(_DWORD *)(this + 4504) = 0;
  if ((_DWORD)v2)
  {
    v4 = this;
    v5 = this + 4496;
    do
    {
      v6 = *(_DWORD *)(*(_QWORD *)v3 + 64);
      v8 = v6;
      v7 = *(unsigned int *)(v4 + 4504);
      if ((*(_DWORD *)(v4 + 4508) & 0x7FFFFFFFu) <= v7)
      {
        this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v5, &v8);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v4 + 4496) + 4 * v7) = v6;
        ++*(_DWORD *)(v4 + 4504);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t physx::Sc::Scene::fireOutOfBoundsCallbacks(physx::Sc::Scene *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;

  v1 = *((_QWORD *)this + 231);
  v2 = *(unsigned int *)(v1 + 416);
  if (!(_DWORD)v2)
  {
    v5 = 0;
    goto LABEL_16;
  }
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(v1 + 408);
  v7 = *((_QWORD *)this + 531);
  v8 = *((_QWORD *)this + 535);
  do
  {
    if (*(_DWORD *)(*((_QWORD *)this + 562) + 4 * v4) >> 5 < (*(_DWORD *)(v8 + 40) & 0x7FFFFFFFu))
    {
      v9 = *(unsigned int *)(*((_QWORD *)this + 562) + 4 * v4);
      v10 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4 * (v9 >> 5)) & (1 << v9);
      if (v10)
        v11 = 1;
      else
        v11 = v7 == 0;
      if (v11)
      {
        v5 |= v10 == 0;
        goto LABEL_13;
      }
LABEL_11:
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, *(_QWORD *)(*(_QWORD *)(v6 + 8 * v4) + 56) + qword_25582F9E0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8 * v4) + 8) + 80)+ *((_QWORD *)&physx::Sc::gOffsetTable+ *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8 * v4) + 8) + 80) + 13)+ 10));
      goto LABEL_13;
    }
    if (v7)
      goto LABEL_11;
    v5 = 1;
LABEL_13:
    ++v4;
  }
  while (v2 != v4);
  v1 = *((_QWORD *)this + 231);
LABEL_16:
  *(_DWORD *)(v1 + 416) = 0;
  return v5 & 1;
}

uint64_t physx::Sc::Scene::postCallbacksPreSync(physx::Sc::Scene *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v16;

  v2 = *((_QWORD *)this + 499);
  *(_DWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 84) = -1;
  physx::Sc::NPhaseCore::clearContactReportActorPairs(v2, 0);
  v3 = *((_DWORD *)this + 12);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = v3 - 5;
    v6 = v3 - 1;
    v7 = (uint64_t *)(v4 + 8 * (v3 - 1));
    while (v6 < 0x11)
    {
      if (v6 >= 5)
        goto LABEL_6;
LABEL_7:
      v16 = *v7--;
      *(_BYTE *)(*(_QWORD *)(v16 + 176) + 28) = 0;
      physx::Sc::BodySim::deactivateKinematic(*(physx::Sc::BodySim **)v16);
      --v5;
      if (--v6 == -1)
        return physx::Sc::Scene::releaseConstraints((uint64_t)this, 1);
    }
    _X8 = *(_QWORD *)(v4 + 8 * (v5 - 12));
    __asm { PRFM            #0, [X8] }
LABEL_6:
    _X8 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 176);
    __asm { PRFM            #0, [X8] }
    goto LABEL_7;
  }
  return physx::Sc::Scene::releaseConstraints((uint64_t)this, 1);
}

void physx::Sc::Scene::getStats(physx::Sc::Scene *this, physx::PxSimulationStatistics *a2)
{
  uint64_t v4;
  int v5;

  physx::Sc::SimStats::readOut(*((_QWORD **)this + 532), a2, *((_QWORD *)this + 230) + 1936);
  v4 = 0;
  *(_QWORD *)((char *)a2 + 12) = *((_QWORD *)this + 583);
  *((_DWORD *)a2 + 5) = *((_DWORD *)this + 1168);
  v5 = *((_DWORD *)this + 553);
  *((_DWORD *)a2 + 13) = *(_DWORD *)(*((_QWORD *)this + 231) + 528);
  *((_DWORD *)a2 + 14) = v5;
  do
  {
    *(_DWORD *)((char *)a2 + v4 + 24) = *(_DWORD *)((char *)this + v4 + 4676);
    v4 += 4;
  }
  while (v4 != 28);
}

uint64_t physx::Sc::Scene::addShapes(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t a4, physx::Sc::RigidSim *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  if (a3)
  {
    v10 = result;
    v11 = a3;
    for (i = (_QWORD *)(a6 + 16); ; i += 3)
    {
      v13 = (int *)(*a2 + a4);
      v14 = *(_QWORD *)(v10 + 4312);
      v15 = *(_DWORD *)(v14 + 8);
      v16 = *(_QWORD *)(v14 + 16);
      v17 = (uint64_t *)(v16 + 24 * v15);
      v18 = (uint64_t *)v17[1];
      if (v18)
        break;
      v19 = v16 + 24 * v15;
      v22 = *(_DWORD *)(v19 + 16);
      v21 = (_DWORD *)(v19 + 16);
      v20 = v22;
      if (v22 != *(_DWORD *)v14)
      {
        v23 = *(_DWORD *)(v14 + 4);
        *v21 = v20 + 1;
        v24 = *v17;
        if (v24)
        {
          v18 = (uint64_t *)(v24 + (v20 * v23));
          goto LABEL_9;
        }
      }
      v18 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v14);
      if (v18)
        goto LABEL_9;
LABEL_10:
      v25 = v10 + 4 * v13[18];
      ++*(_DWORD *)(v25 + 4676);
      (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v10 + 1904) + 32))(*(_QWORD *)(v10 + 1904), v18 + 3, *((unsigned int *)v18 + 16));
      if (a6)
      {
        v26 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 2064) + 8) + 24 * (v18[2] & 0x7FFFFFFF));
        *(i - 2) = *v26;
        *(i - 1) = v26[1];
        *i = v26[2];
      }
      result = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(*(_QWORD *)(v10 + 1840) + 1776) + 88))(*(_QWORD *)(*(_QWORD *)(v10 + 1840) + 1776), v13 + 8);
      ++a2;
      if (!--v11)
        return result;
    }
    v17[1] = *v18;
LABEL_9:
    physx::Sc::ShapeSim::ShapeSim((physx::Sc::ShapeSim *)v18, a5, (const physx::Sc::ShapeCore *)v13);
    goto LABEL_10;
  }
  return result;
}

void physx::Sc::Scene::removeShapes(physx::Sc::Scene *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  for (i = *(_QWORD **)(a2 + 56); i; i = (_QWORD *)*i)
  {
    v15 = i;
    v10 = *(unsigned int *)(a3 + 528);
    if ((*(_DWORD *)(a3 + 532) & 0x7FFFFFFFu) <= v10)
    {
      physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>>::growAndPushBack(a3, &v15);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 520) + 8 * v10) = i;
      *(_DWORD *)(a3 + 528) = v10 + 1;
    }
    v11 = i[7];
    v14 = v11;
    v12 = *(unsigned int *)(a4 + 528);
    if ((*(_DWORD *)(a4 + 532) & 0x7FFFFFFFu) <= v12)
    {
      physx::shdfnd::Array<physx::Sc::ShapeCore const*,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeCore const*>>>::growAndPushBack(a4, &v14);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a4 + 520) + 8 * v12) = v11;
      *(_DWORD *)(a4 + 528) = v12 + 1;
    }
  }
  if (*(_DWORD *)(a3 + 528))
  {
    v13 = 0;
    do
      physx::Sc::Scene::removeShape(this, *(physx::Sc::ShapeSim **)(*(_QWORD *)(a3 + 520) + 8 * v13++), a5);
    while (v13 < *(unsigned int *)(a3 + 528));
  }
}

uint64_t physx::Sc::Scene::addStatic(uint64_t a1, uint64_t **a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  v12 = *(_QWORD *)(a1 + 4320);
  v13 = *(_DWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 16);
  v15 = (uint64_t *)(v14 + 24 * v13);
  v16 = (uint64_t *)v15[1];
  if (v16)
  {
    v15[1] = *v16;
  }
  else
  {
    v17 = v14 + 24 * v13;
    v20 = *(_DWORD *)(v17 + 16);
    v19 = (_DWORD *)(v17 + 16);
    v18 = v20;
    if (v20 == *(_DWORD *)v12 || (v21 = *(_DWORD *)(v12 + 4), *v19 = v18 + 1, (v22 = *v15) == 0))
      v16 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v12);
    else
      v16 = (uint64_t *)(v22 + (v18 * v21));
  }
  *((_DWORD *)v16 + 16) = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  v16[9] = a1;
  v16[10] = (uint64_t)a2;
  *a2 = v16;
  v23 = *(_QWORD *)(a1 + 4288);
  v24 = *(_DWORD *)(v23 + 24);
  if (v24)
  {
    v25 = v24 - 1;
    v26 = *(_DWORD *)(*(_QWORD *)(v23 + 16) + 4 * (v24 - 1));
    *(_DWORD *)(v23 + 24) = v25;
  }
  else
  {
    v26 = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v23 + 8) = v26 + 1;
  }
  *((_DWORD *)v16 + 22) = v26;
  *v16 = (uint64_t)off_24ED90100;
  ++*(_DWORD *)(a1 + 4664);
  return physx::Sc::Scene::addShapes(a1, a3, a4, a5, (physx::Sc::RigidSim *)v16, a6);
}

void physx::Sc::Scene::prefetchForRemove(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int v3;
  int v11;

  v2 = *a2;
  if (*a2)
  {
    v3 = ~((v2 + 95) >> 5) + (v2 >> 5);
    _X10 = *a2;
    do
    {
      __asm { PRFM            #0, [X10] }
      _X10 += 32;
      _CF = __CFADD__(v3++, 1);
    }
    while (!_CF);
    _X8 = *(_QWORD *)(v2 + 56);
    v11 = ~((_X8 + 23) >> 5) + (_X8 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v11++, 1);
    }
    while (!_CF);
  }
}

void physx::Sc::Scene::prefetchForRemove(physx::Sc::Scene *this, const physx::Sc::BodyCore *a2)
{
  unint64_t v2;
  int v3;
  int v11;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v3 = ~((v2 + 207) >> 5) + (v2 >> 5);
    _X10 = *(_QWORD *)a2;
    do
    {
      __asm { PRFM            #0, [X10] }
      _X10 += 32;
      _CF = __CFADD__(v3++, 1);
    }
    while (!_CF);
    _X8 = *(_QWORD *)(v2 + 56);
    v11 = ~((_X8 + 23) >> 5) + (_X8 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v11++, 1);
    }
    while (!_CF);
  }
}

void physx::Sc::Scene::removeStatic(physx::Sc::Scene *this, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v9;
  unsigned __int8 *v10;
  physx::Cm::PreallocatingRegionManager *v11;
  _BYTE v12[520];
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (v5)
  {
    v9 = *((_QWORD *)this + 547);
    if (v9)
    {
      physx::Sc::Scene::removeShapes(this, v5, v9, a3, a4);
    }
    else
    {
      v14 = 0x4000000000;
      v12[512] = 1;
      v13 = v12;
      physx::Sc::Scene::removeShapes(this, v5, (uint64_t)v12, a3, a4);
      if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x7FFFFFFF00000000) != 0 && v13 != v12 && v13)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    v10 = (unsigned __int8 *)*a2;
    if (v10)
    {
      v11 = (physx::Cm::PreallocatingRegionManager *)*((_QWORD *)this + 540);
      (**(void (***)(unsigned __int8 *))v10)(v10);
      physx::Cm::PreallocatingRegionManager::deallocateMemory(v11, v10);
    }
    --*((_DWORD *)this + 1166);
  }
}

uint64_t physx::Sc::Scene::addBody(physx::Sc::Scene *a1, physx::Sc::BodyCore *a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v30;

  v14 = *((_QWORD *)a1 + 541);
  v15 = *(_DWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v14 + 16);
  v17 = (uint64_t *)(v16 + 24 * v15);
  v18 = (uint64_t *)v17[1];
  if (v18)
  {
    v17[1] = *v18;
  }
  else
  {
    v19 = v16 + 24 * v15;
    v22 = *(_DWORD *)(v19 + 16);
    v21 = (_DWORD *)(v19 + 16);
    v20 = v22;
    if (v22 == *(_DWORD *)v14 || (v23 = *(_DWORD *)(v14 + 4), *v21 = v20 + 1, (v24 = *v17) == 0))
      v18 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v14);
    else
      v18 = (uint64_t *)(v24 + (v20 * v23));
  }
  physx::Sc::BodySim::BodySim((physx::Sc::BodySim *)v18, a1, a2, a7);
  if ((*(_BYTE *)(v18[17] + 28) & 0x20) != 0 && *((_DWORD *)v18 + 46) <= 0xFFFFFFFD)
  {
    if (*(_BYTE *)(v18[10] + 13) == 2)
    {
      v25 = *((_DWORD *)v18 + 44);
      if (v25 > 0xFFFFFF7F)
        goto LABEL_14;
      v26 = (char *)a1 + 7632;
    }
    else
    {
      v26 = (char *)a1 + 7616;
      v25 = *((_DWORD *)v18 + 44);
    }
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v26, (v25 >> 7) + 1);
    *(_DWORD *)(*(_QWORD *)v26 + 4 * (v25 >> 12)) |= 1 << (v25 >> 7);
  }
LABEL_14:
  if (*((_DWORD *)v18 + 44) <= 0xFFFFFF7F)
  {
    v27 = *((_QWORD *)a1 + 238);
    v30 = *((_DWORD *)v18 + 44);
    (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v27 + 48))(v27, v18 + 12, &v30);
  }
  v28 = *((_QWORD *)a2 + 22);
  if (v28 && *(_BYTE *)(v28 + 31) == 1)
    ++*((_DWORD *)a1 + 1168);
  else
    ++*((_DWORD *)a1 + 1167);
  return physx::Sc::Scene::addShapes((uint64_t)a1, a3, a4, a5, (physx::Sc::RigidSim *)v18, a6);
}

void physx::Sc::Scene::removeBody(physx::Sc::Scene *this, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  physx::Cm::PreallocatingRegionManager *v13;
  _BYTE v14[520];
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*a2)
  {
    v9 = *((_QWORD *)this + 547);
    if (v9)
    {
      physx::Sc::Scene::removeShapes(this, *a2, v9, a3, a4);
    }
    else
    {
      v16 = 0x4000000000;
      v14[512] = 1;
      v15 = v14;
      physx::Sc::Scene::removeShapes(this, v4, (uint64_t)v14, a3, a4);
      if ((v16 & 0x8000000000000000) == 0 && (v16 & 0x7FFFFFFF00000000) != 0 && v15 != v14 && v15)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(_BYTE *)(*(_QWORD *)(v4 + 80) + 13) != 2 && (*(_BYTE *)(*(_QWORD *)(v4 + 136) + 28) & 0x20) != 0)
    {
      v10 = *(_QWORD *)(v4 + 72);
      v11 = *(unsigned int *)(v4 + 176);
      if (32 * *(_DWORD *)(v10 + 7624) > v11 >> 7)
        *(_DWORD *)(*(_QWORD *)(v10 + 7616) + ((v11 >> 10) & 0x3FFFFC)) &= ~(1 << (v11 >> 7));
    }
    v12 = a2[22];
    if (v12 && *(_BYTE *)(v12 + 31) == 1)
      --*((_DWORD *)this + 1168);
    else
      --*((_DWORD *)this + 1167);
    v13 = (physx::Cm::PreallocatingRegionManager *)*((_QWORD *)this + 541);
    (**(void (***)(uint64_t))v4)(v4);
    physx::Cm::PreallocatingRegionManager::deallocateMemory(v13, (unsigned __int8 *)v4);
  }
}

uint64_t *physx::Sc::Scene::startBatchInsertion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *result;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;

  v4 = a1[539];
  v5 = *(_DWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (uint64_t *)(v6 + 24 * v5);
  v8 = (uint64_t *)v7[1];
  if (v8)
  {
    v7[1] = *v8;
  }
  else
  {
    v9 = v6 + 24 * v5;
    v12 = *(_DWORD *)(v9 + 16);
    v11 = (_DWORD *)(v9 + 16);
    v10 = v12;
    if (v12 == *(_DWORD *)v4 || (v13 = *(_DWORD *)(v4 + 4), *v11 = v10 + 1, (v14 = *v7) == 0))
      v8 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v4);
    else
      v8 = (uint64_t *)(v14 + (v10 * v13));
  }
  v15 = ~(((unint64_t)v8 + 71) >> 5) + ((unint64_t)v8 >> 5);
  _X9 = v8;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v15++, 1);
  }
  while (!_CF);
  a2[2] = v8;
  v22 = a1[540];
  v23 = *(_DWORD *)(v22 + 8);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = (uint64_t *)(v24 + 24 * v23);
  v26 = (uint64_t *)v25[1];
  if (v26)
  {
    v25[1] = *v26;
  }
  else
  {
    v27 = v24 + 24 * v23;
    v30 = *(_DWORD *)(v27 + 16);
    v29 = (_DWORD *)(v27 + 16);
    v28 = v30;
    if (v30 == *(_DWORD *)v22 || (v31 = *(_DWORD *)(v22 + 4), *v29 = v28 + 1, (v32 = *v25) == 0))
      v26 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v22);
    else
      v26 = (uint64_t *)(v32 + (v28 * v31));
  }
  v33 = ~(((unint64_t)v26 + 95) >> 5) + ((unint64_t)v26 >> 5);
  _X9 = v26;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v33++, 1);
  }
  while (!_CF);
  a2[1] = v26;
  v36 = a1[541];
  v37 = *(_DWORD *)(v36 + 8);
  v38 = *(_QWORD *)(v36 + 16);
  v39 = (uint64_t *)(v38 + 24 * v37);
  result = (uint64_t *)v39[1];
  if (result)
  {
    v39[1] = *result;
  }
  else
  {
    v41 = v38 + 24 * v37;
    v44 = *(_DWORD *)(v41 + 16);
    v43 = (_DWORD *)(v41 + 16);
    v42 = v44;
    if (v44 == *(_DWORD *)v36 || (v45 = *(_DWORD *)(v36 + 4), *v43 = v42 + 1, (v46 = *v39) == 0))
      result = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v36);
    else
      result = (uint64_t *)(v46 + (v42 * v45));
  }
  v47 = ~(((unint64_t)result + 207) >> 5) + ((unint64_t)result >> 5);
  _X9 = result;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v47++, 1);
  }
  while (!_CF);
  *a2 = result;
  return result;
}

uint64_t physx::Sc::Scene::addShapes(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, physx::Sc::RigidSim *a5, physx::Sc::ShapeSim **a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int *v35;
  physx::Sc::ShapeSim *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  if (a3)
  {
    v10 = result;
    v11 = 0;
    v40 = (a4 + 176) + 0x1FFFFFFFFFLL;
    v12 = a3;
    do
    {
      v13 = v11 + 1;
      if (v11 + 1 < v12)
      {
        _X8 = *(_QWORD *)(a2 + 8 * v13);
        v15 = ~((v40 + _X8) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
          _CF = __CFADD__(v15++, 1);
        }
        while (!_CF);
      }
      v21 = *(_QWORD *)(v10 + 4312);
      v22 = *(_DWORD *)(v21 + 8);
      v23 = *(_QWORD *)(v21 + 16);
      v24 = (uint64_t *)(v23 + 24 * v22);
      v25 = v24[1];
      if (v25)
      {
        v24[1] = *(_QWORD *)v25;
      }
      else
      {
        v26 = v23 + 24 * v22;
        v29 = *(_DWORD *)(v26 + 16);
        v28 = (_DWORD *)(v26 + 16);
        v27 = v29;
        if (v29 == *(_DWORD *)v21 || (v30 = *(_DWORD *)(v21 + 4), *v28 = v27 + 1, (v31 = *v24) == 0))
          v25 = (unint64_t)physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v21);
        else
          v25 = v31 + (v27 * v30);
      }
      v32 = ~((v25 + 71) >> 5) + (v25 >> 5);
      _X9 = (physx::Sc::ShapeSim *)v25;
      do
      {
        __asm { PRFM            #0, [X9] }
        _X9 = (physx::Sc::ShapeSim *)((char *)_X9 + 32);
        _CF = __CFADD__(v32++, 1);
      }
      while (!_CF);
      v35 = (int *)(*(_QWORD *)(a2 + 8 * v11) + a4);
      physx::Sc::ShapeSim::ShapeSim(*a6, a5, (const physx::Sc::ShapeCore *)v35);
      v36 = *a6;
      v37 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 2064) + 8) + 24 * (*((_DWORD *)*a6 + 4) & 0x7FFFFFFF));
      v38 = (_QWORD *)(a7 + 24 * v11);
      *v38 = *v37;
      v38[1] = v37[1];
      v38[2] = v37[2];
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 1904) + 32))(*(_QWORD *)(v10 + 1904), (uint64_t)v36 + 24, *((unsigned int *)v36 + 16));
      *a6 = (physx::Sc::ShapeSim *)v25;
      v39 = v10 + 4 * v35[18];
      ++*(_DWORD *)(v39 + 4676);
      result = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(*(_QWORD *)(v10 + 1840) + 1776) + 88))(*(_QWORD *)(*(_QWORD *)(v10 + 1840) + 1776), v35 + 8);
      ++v11;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t physx::Sc::Scene::addStatic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v11;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t result;

  v7 = *(_QWORD *)(a3 + 8);
  v8 = a2 + *(_QWORD *)(a3 + 32);
  v9 = (uint64_t *)v8;
  if (*(_WORD *)(v8 + 8) == 1 || (v9 = *(uint64_t **)v8, *(_WORD *)(v8 + 8)))
  {
    _X8 = *v9;
    v11 = ~((*v9 + (unint64_t)(*(_DWORD *)(a3 + 56) + 176) - 1) >> 5)
        + ((unint64_t)*v9 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v11++, 1);
    }
    while (!_CF);
  }
  v17 = (_QWORD *)(a2 + *(_QWORD *)(a3 + 24));
  *(_DWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 72) = a1;
  *(_QWORD *)(v7 + 80) = v17;
  *v17 = v7;
  v18 = *(_QWORD *)(a1 + 4288);
  v19 = *(_DWORD *)(v18 + 24);
  if (v19)
  {
    v20 = v19 - 1;
    v21 = *(_DWORD *)(*(_QWORD *)(v18 + 16) + 4 * (v19 - 1));
    *(_DWORD *)(v18 + 24) = v20;
  }
  else
  {
    v21 = *(_DWORD *)(v18 + 8);
    *(_DWORD *)(v18 + 8) = v21 + 1;
  }
  *(_DWORD *)(v7 + 88) = v21;
  *(_QWORD *)v7 = off_24ED90100;
  v22 = *(_QWORD *)(a1 + 4320);
  v23 = *(_DWORD *)(v22 + 8);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = (uint64_t *)(v24 + 24 * v23);
  v26 = (uint64_t *)v25[1];
  if (v26)
  {
    v25[1] = *v26;
  }
  else
  {
    v27 = v24 + 24 * v23;
    v30 = *(_DWORD *)(v27 + 16);
    v29 = (_DWORD *)(v27 + 16);
    v28 = v30;
    if (v30 == *(_DWORD *)v22 || (v31 = *(_DWORD *)(v22 + 4), *v29 = v28 + 1, (v32 = *v25) == 0))
      v26 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v22);
    else
      v26 = (uint64_t *)(v32 + (v28 * v31));
  }
  v33 = ~(((unint64_t)v26 + 95) >> 5) + ((unint64_t)v26 >> 5);
  _X9 = v26;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v33++, 1);
  }
  while (!_CF);
  *(_QWORD *)(a3 + 8) = v26;
  result = physx::Sc::Scene::addShapes(a1, (uint64_t)v9, *(unsigned __int16 *)(v8 + 8), *(_QWORD *)(a3 + 56), (physx::Sc::RigidSim *)v7, (physx::Sc::ShapeSim **)(a3 + 16), a4);
  ++*(_DWORD *)(a1 + 4664);
  return result;
}

uint64_t physx::Sc::Scene::addBody(physx::Sc::Scene *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  physx::Sc::BodySim *v8;
  uint64_t v9;
  uint64_t *v10;
  int v12;
  physx::Sc::BodyCore *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  int v39;

  v8 = *(physx::Sc::BodySim **)a3;
  v9 = a2 + *(_QWORD *)(a3 + 48);
  v10 = (uint64_t *)v9;
  if (*(_WORD *)(v9 + 8) == 1 || (v10 = *(uint64_t **)v9, *(_WORD *)(v9 + 8)))
  {
    _X8 = *v10;
    v12 = ~((*v10 + (unint64_t)(*(_DWORD *)(a3 + 56) + 176) - 1) >> 5)
        + ((unint64_t)*v10 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v12++, 1);
    }
    while (!_CF);
  }
  v18 = (physx::Sc::BodyCore *)(a2 + *(_QWORD *)(a3 + 40));
  physx::Sc::BodySim::BodySim(*(physx::Sc::BodySim **)a3, a1, v18, a5);
  v19 = *((_QWORD *)a1 + 541);
  v20 = *(_DWORD *)(v19 + 8);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = (uint64_t *)(v21 + 24 * v20);
  v23 = (uint64_t *)v22[1];
  if (v23)
  {
    v22[1] = *v23;
  }
  else
  {
    v24 = v21 + 24 * v20;
    v27 = *(_DWORD *)(v24 + 16);
    v26 = (_DWORD *)(v24 + 16);
    v25 = v27;
    if (v27 == *(_DWORD *)v19 || (v28 = *(_DWORD *)(v19 + 4), *v26 = v25 + 1, (v29 = *v22) == 0))
      v23 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v19);
    else
      v23 = (uint64_t *)(v29 + (v25 * v28));
  }
  v30 = ~(((unint64_t)v23 + 207) >> 5) + ((unint64_t)v23 >> 5);
  _X9 = v23;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v30++, 1);
  }
  while (!_CF);
  *(_QWORD *)a3 = v23;
  if (*(_BYTE *)(*((_QWORD *)v8 + 10) + 13) == 2)
  {
    if ((*(_BYTE *)(*((_QWORD *)v8 + 17) + 28) & 0x20) == 0)
      goto LABEL_21;
    v33 = 7632;
  }
  else
  {
    if ((*(_BYTE *)(*((_QWORD *)v8 + 17) + 28) & 0x20) == 0)
      goto LABEL_21;
    v33 = 7616;
  }
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = *((unsigned int *)v8 + 44);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)a1 + v33, (v35 >> 7) + 1);
  *(_DWORD *)(*v34 + ((v35 >> 10) & 0x3FFFFC)) |= 1 << (v35 >> 7);
LABEL_21:
  if (*((_DWORD *)v8 + 44) <= 0xFFFFFF7F)
  {
    v36 = *((_QWORD *)a1 + 238);
    v39 = *((_DWORD *)v8 + 44);
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v36 + 48))(v36, (uint64_t)v8 + 96, &v39);
  }
  result = physx::Sc::Scene::addShapes((uint64_t)a1, (uint64_t)v10, *(unsigned __int16 *)(v9 + 8), *(_QWORD *)(a3 + 56), v8, (physx::Sc::ShapeSim **)(a3 + 16), a4);
  v38 = *((_QWORD *)v18 + 22);
  if (v38 && *(_BYTE *)(v38 + 31) == 1)
    ++*((_DWORD *)a1 + 1168);
  else
    ++*((_DWORD *)a1 + 1167);
  return result;
}

void physx::Sc::Scene::finishBatchInsertion(physx::Cm::PreallocatingRegionManager **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v4 = a2[1];
  if (v4)
    physx::Cm::PreallocatingRegionManager::deallocateMemory(a1[540], v4);
  if (*a2)
    physx::Cm::PreallocatingRegionManager::deallocateMemory(a1[541], *a2);
  v5 = a2[2];
  if (v5)
    physx::Cm::PreallocatingRegionManager::deallocateMemory(a1[539], v5);
}

uint64_t physx::Sc::Scene::setDominanceGroupPair(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int v9;

  v4 = (int *)(result + 4 * a2 + 4528);
  v5 = 1 << a3;
  if (*a4)
    v6 = *v4 | v5;
  else
    v6 = *v4 & ~v5;
  *v4 = v6;
  v7 = (int *)(result + 4 * a3 + 4528);
  v8 = 1 << a2;
  if (a4[1])
    v9 = *v7 | v8;
  else
    v9 = *v7 & ~v8;
  *v7 = v9;
  *(_DWORD *)(result + 4264) |= 2u;
  return result;
}

uint64_t physx::Sc::Scene::buildActiveActors(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = *(_DWORD *)(this + 40);
  if ((*(_BYTE *)(this + 4269) & 0x10) != 0)
  {
    v4 = *(unsigned int *)(this + 48);
    v2 -= v4;
    v3 = *(_QWORD *)(this + 32) + 8 * v4;
  }
  else
  {
    v3 = *(_QWORD *)(this + 32);
  }
  *(_DWORD *)(this + 4184) = 0;
  if (v2)
  {
    v5 = v2;
    do
    {
      if ((*(_WORD *)(**(_QWORD **)v3 + 124) & 1) == 0)
      {
        v6 = *(_QWORD *)v3 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(_QWORD *)v3 + 13) + 10);
        v8 = v6;
        v7 = *(unsigned int *)(v1 + 4184);
        if ((*(_DWORD *)(v1 + 4188) & 0x7FFFFFFFu) <= v7)
        {
          this = physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(v1 + 4176, &v8);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v1 + 4176) + 8 * v7) = v6;
          *(_DWORD *)(v1 + 4184) = v7 + 1;
        }
      }
      v3 += 8;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t physx::Sc::Scene::buildActiveAndFrozenActors(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v2 = *(_DWORD *)(this + 40);
  if ((*(_BYTE *)(this + 4269) & 0x10) != 0)
  {
    v4 = *(unsigned int *)(this + 48);
    v2 -= v4;
    v3 = *(_QWORD *)(this + 32) + 8 * v4;
  }
  else
  {
    v3 = *(_QWORD *)(this + 32);
  }
  *(_DWORD *)(this + 4184) = 0;
  *(_DWORD *)(this + 4200) = 0;
  if (v2)
  {
    for (i = v2; i; --i)
    {
      v6 = *(_QWORD *)v3 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(_QWORD *)v3 + 13) + 10);
      if ((*(_WORD *)(**(_QWORD **)v3 + 124) & 1) != 0)
      {
        v10 = *(_QWORD *)v3 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(_QWORD *)v3 + 13) + 10);
        v8 = *(unsigned int *)(v1 + 4200);
        if ((*(_DWORD *)(v1 + 4204) & 0x7FFFFFFFu) <= v8)
        {
          v9 = v1 + 4192;
          goto LABEL_13;
        }
        *(_QWORD *)(*(_QWORD *)(v1 + 4192) + 8 * v8) = v6;
        *(_DWORD *)(v1 + 4200) = v8 + 1;
      }
      else
      {
        v10 = *(_QWORD *)v3 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(_QWORD *)v3 + 13) + 10);
        v7 = *(unsigned int *)(v1 + 4184);
        if ((*(_DWORD *)(v1 + 4188) & 0x7FFFFFFFu) <= v7)
        {
          v9 = v1 + 4176;
LABEL_13:
          this = physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(v9, &v10);
          goto LABEL_14;
        }
        *(_QWORD *)(*(_QWORD *)(v1 + 4176) + 8 * v7) = v6;
        *(_DWORD *)(v1 + 4184) = v7 + 1;
      }
LABEL_14:
      v3 += 8;
    }
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::Sc::Scene::reserveTriggerReportBufferSpace(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  unsigned int v7;
  int v8;
  float v9;
  unsigned int v10;
  uint64_t result;

  v7 = *(_DWORD *)(a1 + 2136);
  v8 = v7 + a2;
  v9 = (float)(v7 + a2) * 1.5;
  v10 = v9;
  if ((*(_DWORD *)(a1 + 2140) & 0x7FFFFFFFu) < v9)
    physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::recreate(a1 + 2128, v9);
  *(_DWORD *)(a1 + 2136) = v8;
  *a3 = *(_QWORD *)(a1 + 2128) + 40 * v7;
  result = *(_QWORD *)(a1 + 2144);
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < v10)
  {
    physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::recreate(result, v10);
    result = *(_QWORD *)(a1 + 2144);
  }
  *(_DWORD *)(result + 8) = v8;
  *a4 = *(_QWORD *)result + 12 * v7;
  return result;
}

uint64_t physx::Sc::Scene::createClient(physx::Sc::Scene *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client>::getName() [T = physx::Sc::Client]";
  else
    v3 = "<allocation names disabled>";
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 1, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 5287);
  v8 = v4;
  v5 = *((unsigned int *)this + 1042);
  if ((*((_DWORD *)this + 1043) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::growAndPushBack((uint64_t)this + 4160, &v8);
    v6 = *((_DWORD *)this + 1042);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 520) + 8 * v5) = v4;
    v6 = v5 + 1;
    *((_DWORD *)this + 1042) = v6;
  }
  return (v6 - 1);
}

int32x2_t *physx::Sc::Scene::onBodySleep(int32x2_t *this, int32x2_t *a2, int8x8_t a3)
{
  __int16 v4;
  int32x2_t v5;
  char v6;

  v4 = a2[22].i16[2];
  if (this[530])
  {
    if ((v4 & 0x80) != 0)
    {
      v4 &= ~0x80u;
      this[519].i8[0] = 0;
    }
    v4 |= 0x40u;
    a2[22].i16[2] = v4;
  }
  if ((v4 & 0x10) == 0)
  {
    v5 = a2[10];
    v6 = 0;
    this = (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 505, &v5, &v6, a3);
    if (!v6)
      *this = v5;
    a2[22].i16[2] |= 0x10u;
  }
  return this;
}

int32x2_t *physx::Sc::Scene::onBodyWakeUp(int32x2_t *this, int32x2_t *a2, int8x8_t a3)
{
  __int16 v4;
  int32x2_t v5;
  char v6;

  if (this[530])
  {
    v4 = a2[22].i16[2];
    if ((v4 & 0x40) != 0)
    {
      v4 &= ~0x40u;
      this[519].i8[1] = 0;
    }
    a2[22].i16[2] = v4 | 0x80;
    if ((v4 & 0x20) == 0)
    {
      v5 = a2[10];
      v6 = 0;
      this = (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 512, &v5, &v6, a3);
      if (!v6)
        *this = v5;
      a2[22].i16[2] |= 0x20u;
    }
  }
  return this;
}

double physx::Sc::Scene::createLLArticulation(physx::Sc::Scene *this, physx::Sc::ArticulationSim *a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 44))
  {
    v3 = *((_QWORD *)this + 544);
    v4 = *(_QWORD *)(v3 + 560);
    if (!v4)
    {
      physx::shdfnd::PoolBase<physx::Dy::FeatherstoneArticulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(v3);
      v4 = *(_QWORD *)(v3 + 560);
    }
    *(_QWORD *)(v3 + 560) = *(_QWORD *)v4;
    ++*(_DWORD *)(v3 + 548);
    *(_QWORD *)(v4 + 24) = a2;
    *(_QWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_WORD *)(v4 + 160) = 1;
    *(_DWORD *)(v4 + 164) = 0;
    *(_QWORD *)v4 = &off_24ED8CC40;
    *(_OWORD *)(v4 + 576) = 0u;
    *(_OWORD *)(v4 + 592) = 0u;
    *(_OWORD *)(v4 + 544) = 0u;
    *(_OWORD *)(v4 + 560) = 0u;
    *(_OWORD *)(v4 + 512) = 0u;
    *(_OWORD *)(v4 + 528) = 0u;
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_QWORD *)(v4 + 632) = 0;
    *(_QWORD *)(v4 + 624) = 0;
    *(_QWORD *)(v4 + 640) = 0;
    *(_QWORD *)(v4 + 648) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v4 + 656) = 0;
    *(_BYTE *)(v4 + 684) = 1;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 696) = 0u;
    *(_OWORD *)(v4 + 712) = 0u;
    *(_OWORD *)(v4 + 848) = 0u;
    *(_BYTE *)(v4 + 864) = 0;
    *(_OWORD *)(v4 + 872) = 0u;
    *(_DWORD *)(v4 + 888) = 0;
  }
  else
  {
    v6 = *((_QWORD *)this + 543);
    v7 = *(_QWORD *)(v6 + 560);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Dy::Articulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(v6);
      v7 = *(_QWORD *)(v6 + 560);
    }
    *(_QWORD *)(v6 + 560) = *(_QWORD *)v7;
    ++*(_DWORD *)(v6 + 548);
    *(_QWORD *)(v7 + 24) = a2;
    *(_QWORD *)(v7 + 32) = 0;
    *(_DWORD *)(v7 + 40) = 1;
    *(_QWORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 152) = 0;
    *(_WORD *)(v7 + 160) = 1;
    *(_DWORD *)(v7 + 164) = 0;
    *(_QWORD *)v7 = &off_24ED8C8F8;
    result = 0.0;
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
  }
  return result;
}

uint64_t physx::Sc::Scene::createAggregate(physx::Sc::Scene *this, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = *((_QWORD *)this + 537);
  v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * v8);
    *(_DWORD *)(v6 + 24) = v8;
    v10 = v9 + 1;
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 8);
    v10 = v9 + 1;
    *(_DWORD *)(v6 + 8) = v9 + 1;
  }
  v11 = *((_QWORD *)this + 258);
  v12 = *(_DWORD *)(v11 + 20) & 0x7FFFFFFF;
  if (v10 >= v12)
  {
    v13 = v10 | (v10 >> 1) | ((v10 | (v10 >> 1)) >> 2);
    v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    v15 = v14 | HIWORD(v14);
    v16 = v15 + 1;
    if (v12 < v15 + 1)
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(*((_QWORD *)this + 258), v15 + 1);
    *(_DWORD *)(v11 + 16) = v16;
  }
  return physx::Bp::AABBManager::createAggregate(*((_QWORD *)this + 231), v9, 0xFFFFFFFFLL, a2, a3);
}

void physx::Sc::Scene::deleteAggregate(physx::Sc::Scene *this, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = 0;
  v7 = 0;
  if (physx::Bp::AABBManager::destroyAggregate(*((_QWORD *)this + 231), &v7, &v6, a2))
  {
    v3 = *((_QWORD *)this + 537);
    v4 = v7;
    v8 = v7;
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v3 + 32, v7 + 1);
    *(_DWORD *)(*(_QWORD *)(v3 + 32) + ((v4 >> 3) & 0x1FFFFFFC)) |= 1 << v4;
    v5 = *(unsigned int *)(v3 + 56);
    if ((*(_DWORD *)(v3 + 60) & 0x7FFFFFFFu) <= v5)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 48, &v8);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v5) = v4;
      ++*(_DWORD *)(v3 + 56);
    }
  }
}

uint64_t physx::Sc::Scene::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  physx::PxsContext::shiftOrigin(*(_QWORD *)(a1 + 1840), (uint64_t)a2);
  physx::Bp::BoundsArray::shiftOrigin(*(_QWORD *)(a1 + 2064), a2);
  v4 = *(_QWORD *)(a1 + 1848);
  result = (*(uint64_t (**)(_QWORD, float32x2_t *, _QWORD, _QWORD))(**(_QWORD **)(v4 + 392) + 144))(*(_QWORD *)(v4 + 392), a2, *(_QWORD *)(*(_QWORD *)(v4 + 400) + 8), *(_QWORD *)(*(_QWORD *)(v4 + 280) + 8));
  *(_BYTE *)(v4 + 524) = 1;
  v6 = *(unsigned int *)(a1 + 2052);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 2008);
    do
    {
      v8 = *v7++;
      result = (*(uint64_t (**)(_QWORD, float32x2_t *))(**(_QWORD **)(v8 + 32) + 32))(*(_QWORD *)(v8 + 32), a2);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t physx::Bp::BoundsArray::shiftOrigin(uint64_t result, float32x2_t *a2)
{
  uint64_t v2;
  float32x2_t *v3;

  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    v3 = (float32x2_t *)(*(_QWORD *)(result + 8) + 12);
    do
    {
      *(float32x2_t *)((char *)v3 - 12) = vsub_f32(*(float32x2_t *)((char *)v3 - 12), *a2);
      v3[-1].f32[1] = v3[-1].f32[1] - a2[1].f32[0];
      *v3 = vsub_f32(*v3, *a2);
      v3[1].f32[0] = v3[1].f32[0] - a2[1].f32[0];
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t physx::Sc::Scene::preallocateContactManagers(physx::PxBaseTask *)::Local::processBatch(int a1, _DWORD *a2, int a3, _DWORD *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  signed int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const void *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  int v61;
  _QWORD *v62;
  uint64_t v64;
  unsigned int v65;
  int v66;
  _DWORD *v70;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;

  v15 = *a2;
  v16 = a1 - v15;
  v66 = *a4;
  v73 = v15;
  v17 = (uint64_t *)(a10 + 8 * v15);
  v18 = *(_DWORD *)(a6 + 480);
  if (a1 - (int)v15 >= v18)
    v19 = a1 - v15 - v18;
  else
    v19 = 0;
  v20 = v16 - v19;
  memcpy(v17, (const void *)(*(_QWORD *)(a6 + 472) + 8 * (v18 - v20)), (8 * v20));
  v21 = *(_DWORD *)(a6 + 480) - v20;
  *(_DWORD *)(a6 + 480) = v21;
  v65 = v16;
  v22 = v16 >= v18;
  v23 = v16 - v18;
  v70 = a4;
  if (v23 == 0 || !v22)
  {
LABEL_46:
    if ((_DWORD)v20)
    {
      v56 = *(_QWORD *)(a6 + 504);
      v57 = v20;
      do
      {
        v58 = *v17++;
        *(_DWORD *)(v56 + (((unint64_t)*(unsigned int *)(v58 + 88) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v58 + 88);
        --v57;
      }
      while (v57);
    }
    goto LABEL_49;
  }
  v24 = *(_DWORD *)(a6 + 456);
  if (__CFADD__(v19 - 1, v24))
  {
    LODWORD(v25) = v20;
LABEL_45:
    *(_DWORD *)(a6 + 480) = v21;
    LODWORD(v20) = v25;
    goto LABEL_46;
  }
  v26 = 0;
  v27 = (v19 - 1 + v24) / v24;
  if (v27 <= 1)
    v27 = 1;
  v75 = v27;
  while (1)
  {
    v76 = v26;
    v28 = *(unsigned int *)(a6 + 456);
    if (!(_DWORD)v28)
      break;
    v29 = 120 * v28;
    v30 = physx::shdfnd::Foundation::mInstance;
    v31 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
        ? "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::PxsContactManager]"
        : "<allocation names disabled>";
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v30 + 24) + 16))(v30 + 24, v29, v31, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 135);
    if (!v32)
      break;
    v33 = v32;
    v34 = *(_DWORD *)(a6 + 460);
    v35 = v34 + 1;
    v36 = *(_DWORD *)(a6 + 456);
    if (v36 * (v34 + 1) <= 32 * *(_DWORD *)(a6 + 512))
    {
      v41 = *(void **)(a6 + 488);
    }
    else
    {
      v37 = 2 * v35;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a6 + 504, 2 * v35 * v36);
      if (*(_QWORD *)(a6 + 472))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v74 = v20;
      if (*(_DWORD *)(a6 + 456) * v37)
      {
        v64 = 8 * *(_DWORD *)(a6 + 456) * v37;
        v38 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v39 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::P"
                "xsContactManager]";
        else
          v39 = "<allocation names disabled>";
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v38 + 24)
                                                                                               + 16))(v38 + 24, v64, v39, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 147);
      }
      else
      {
        v40 = 0;
      }
      *(_QWORD *)(a6 + 472) = v40;
      if (v37)
      {
        v42 = 8 * v37;
        v43 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v44 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::P"
                "xsContactManager]";
        else
          v44 = "<allocation names disabled>";
        v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v43 + 24) + 16))(v43 + 24, v42, v44, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 149);
      }
      else
      {
        v41 = 0;
      }
      v20 = v74;
      v45 = *(const void **)(a6 + 488);
      if (v45)
      {
        memcpy(v41, v45, (8 * *(_DWORD *)(a6 + 460)));
        if (*(_QWORD *)(a6 + 488))
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *(_QWORD *)(a6 + 488) = v41;
      v34 = *(_DWORD *)(a6 + 460);
      v36 = *(_DWORD *)(a6 + 456);
      v35 = v34 + 1;
    }
    *(_DWORD *)(a6 + 460) = v35;
    *((_QWORD *)v41 + v34) = v33;
    v46 = v36 - 1;
    if (v36 - 1 >= v23)
    {
      v47 = v36 + v36 * v34 - 1;
      v48 = v21;
      do
      {
        v49 = v33 + 120 * (int)v46;
        *(_DWORD *)(v49 + 16) = 0;
        *(_DWORD *)(v49 + 88) = v47;
        *(_DWORD *)(v49 + 92) = 0;
        *(_QWORD *)(v49 + 32) = 0;
        *(_QWORD *)(v49 + 40) = 0;
        *(_WORD *)(v49 + 84) = 257;
        *(_QWORD *)(v49 + 72) = 0;
        *(_BYTE *)(v49 + 82) = 0;
        v21 = v48 + 1;
        *(_QWORD *)(*(_QWORD *)(a6 + 472) + 8 * v48) = v49;
        --v46;
        --v47;
        ++v48;
      }
      while ((int)v46 >= v23);
    }
    v25 = v20;
    if ((v46 & 0x80000000) == 0)
    {
      v50 = v34 * v36;
      v51 = 120 * v46;
      v52 = (uint64_t *)(a10 + 8 * v73 + 8 * v20 + 8 * v46);
      v53 = v46 + v50;
      v54 = -120;
      do
      {
        v55 = v33 + v51;
        *(_DWORD *)(v55 + 16) = 0;
        *(_DWORD *)(v55 + 88) = v53;
        *(_DWORD *)(v55 + 92) = 0;
        *(_QWORD *)(v55 + 32) = 0;
        *(_QWORD *)(v55 + 40) = 0;
        *(_WORD *)(v55 + 84) = 257;
        *(_QWORD *)(v55 + 72) = 0;
        v54 += 120;
        v33 -= 120;
        --v53;
        *(_BYTE *)(v55 + 82) = 0;
        *v52-- = v55;
      }
      while (v51 != v54);
      v25 = v20 + v46 + 1;
    }
    v23 = v23 + v20 - v25;
    v26 = v76 + 1;
    v20 = v25;
    if (v76 + 1 == v75)
      goto LABEL_45;
  }
LABEL_49:
  if ((_DWORD)v73 != a1)
  {
    v59 = 0;
    do
    {
      v60 = *(_QWORD **)(a7 + 1856);
      if (!v60)
      {
        physx::shdfnd::PoolBase<physx::Sc::ShapeInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::allocateSlab(a7 + 1296);
        v60 = *(_QWORD **)(a7 + 1856);
      }
      *(_QWORD *)(a7 + 1856) = *v60;
      ++*(_DWORD *)(a7 + 1844);
      *(_QWORD *)(a11 + 8 * (v59 + *a2)) = v60;
      ++v59;
    }
    while (v65 != v59);
  }
  if (a3 != v66)
  {
    v61 = 0;
    do
    {
      v62 = *(_QWORD **)(a7 + 3560);
      if (!v62)
      {
        physx::shdfnd::PoolBase<physx::Sc::ElementInteractionMarker,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::allocateSlab(a7 + 3000);
        v62 = *(_QWORD **)(a7 + 3560);
      }
      *(_QWORD *)(a7 + 3560) = *v62;
      ++*(_DWORD *)(a7 + 3548);
      *(_QWORD *)(a12 + 8 * (v61 + *v70)) = v62;
      ++v61;
    }
    while (a3 - v66 != v61);
  }
  *a2 = a1;
  *v70 = a3;
  *(_DWORD *)(a8 + 88) = a5;
  *(_DWORD *)(a8 + 32) = 1;
  *(_QWORD *)(a8 + 24) = a9;
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 32))(a9);
    *(_QWORD *)(a8 + 16) = *(_QWORD *)(*(_QWORD *)(a8 + 24) + 16);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 40))(a8);
}

uint64_t physx::Sc::activateInteraction(physx::Sc *this, physx::Sc::Interaction *a2, void *a3, int8x8_t a4)
{
  uint64_t result;

  result = 0;
  switch(*((_BYTE *)this + 28))
  {
    case 0:
      result = physx::Sc::ShapeInteraction::onActivate_((physx::Sc *)((char *)this - 8), (uint64_t)a2);
      break;
    case 1:
      if ((*((_WORD *)this + 34) & 0x20) != 0)
        goto LABEL_9;
      result = isOneActorActive((physx::Sc *)((char *)this - 8));
      if ((_DWORD)result)
        goto LABEL_9;
      break;
    case 4:
      result = physx::Sc::ConstraintInteraction::onActivate_(this, a2, a4);
      break;
    case 5:
      if (*(_DWORD *)(*(_QWORD *)this + 184) > 0xFFFFFFFD || *(_DWORD *)(*((_QWORD *)this + 1) + 184) > 0xFFFFFFFD)
      {
        result = 0;
      }
      else
      {
LABEL_9:
        *((_BYTE *)this + 29) |= 0x20u;
        result = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Sc::deactivateInteraction(physx::Sc *this, physx::Sc::Interaction *a2)
{
  uint64_t result;

  result = 0;
  switch(*((_BYTE *)this + 28))
  {
    case 0:
      result = physx::Sc::ShapeInteraction::onDeactivate_((physx::Sc *)((char *)this - 8));
      break;
    case 1:
      if ((*((_WORD *)this + 34) & 0x20) == 0 && !isOneActorActive((physx::Sc *)((char *)this - 8)))
        goto LABEL_6;
      result = 0;
      break;
    case 2:
      goto LABEL_7;
    case 4:
      result = physx::Sc::ConstraintInteraction::onDeactivate_(this);
      break;
    case 5:
LABEL_6:
      *((_BYTE *)this + 29) &= ~0x20u;
LABEL_7:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

physx::Cm::FlushPool *physx::Cm::FlushPool::FlushPool(physx::Cm::FlushPool *this, unsigned int a2)
{
  uint64_t v4;
  const char *v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v5 = "<allocation names disabled>";
  v6 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 72, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)this = v6;
  physx::shdfnd::MutexImpl::MutexImpl(v6);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2;
  if (!a2)
  {
    v11 = 0;
    goto LABEL_8;
  }
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmFlushPool.h", 57);
  v8 = *((unsigned int *)this + 4);
  v9 = *((_DWORD *)this + 5) & 0x7FFFFFFF;
  v11 = v7;
  if (v9 <= v8)
  {
LABEL_8:
    physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)this + 8, &v11);
    return this;
  }
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v8) = v7;
  *((_DWORD *)this + 4) = v8 + 1;
  return this;
}

uint64_t ScSimulationControllerCallback::updateScBodyAndShapeSim(uint64_t this, physx::PxBaseTask *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  pthread_mutex_t **v10;
  uint64_t v11;
  void (**v12)(ScAfterIntegrationTask *__hidden);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(ScAfterIntegrationTask *__hidden);
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD **)(this + 8);
  v3 = v2[235];
  v4 = *(unsigned int *)(v3 + 384);
  if ((_DWORD)v4)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v20 = v2[236];
    v21 = v2[230];
    v10 = *(pthread_mutex_t ***)(v21 + 1920);
    v19 = *(_QWORD *)(v21 + 2592);
    v11 = *(_QWORD *)(v3 + 376);
    v12 = &off_24ED8E2A8;
    do
    {
      if (v9 >= 0x100)
      {
        v13 = physx::Cm::FlushPool::allocate(v10, 88, 0x10u);
        v14 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 32) = 0;
        *(_QWORD *)v13 = &off_24ED8E2A8;
        *(_QWORD *)(v13 + 40) = v11 + 4 * v8;
        *(_DWORD *)(v13 + 48) = v7 - v8;
        *(_QWORD *)(v13 + 56) = v21;
        *(_QWORD *)(v13 + 64) = v20;
        *(_QWORD *)(v13 + 72) = v19;
        *(_QWORD *)(v13 + 80) = v14;
        *(_DWORD *)(v13 + 32) = 1;
        *(_QWORD *)(v13 + 24) = a2;
        if (a2)
        {
          (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
          v15 = *(void (***)(ScAfterIntegrationTask *__hidden))v13;
        }
        else
        {
          v15 = &off_24ED8E2A8;
        }
        this = ((uint64_t (*)(uint64_t))v15[5])(v13);
        v9 = 0;
        v8 = v7;
      }
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 248)
                                  + (((unint64_t)*(unsigned int *)(v11 + 4 * v7) >> 2) & 0x3FFFFFE0)
                                  + 24)
                      - 32);
      if (v16 <= 1)
        v16 = 1;
      v9 += v16;
      ++v7;
    }
    while (v4 != v7);
    if (v9)
    {
      v17 = physx::Cm::FlushPool::allocate(v10, 88, 0x10u);
      v18 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 32) = 0;
      *(_QWORD *)v17 = &off_24ED8E2A8;
      *(_QWORD *)(v17 + 40) = v11 + 4 * v8;
      *(_DWORD *)(v17 + 48) = v4 - v8;
      *(_QWORD *)(v17 + 56) = v21;
      *(_QWORD *)(v17 + 64) = v20;
      *(_QWORD *)(v17 + 72) = v19;
      *(_QWORD *)(v17 + 80) = v18;
      *(_DWORD *)(v17 + 32) = 1;
      *(_QWORD *)(v17 + 24) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16);
        v12 = *(void (***)(ScAfterIntegrationTask *__hidden))v17;
      }
      return ((uint64_t (*)(uint64_t))v12[5])(v17);
    }
  }
  return this;
}

uint64_t ScSimulationControllerCallback::getNbCcdBodies(ScSimulationControllerCallback *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 2104);
}

void ScSimulationControllerCallback::~ScSimulationControllerCallback(ScSimulationControllerCallback *this)
{
  JUMPOUT(0x2276933B8);
}

void ScAfterIntegrationTask::~ScAfterIntegrationTask(ScAfterIntegrationTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScAfterIntegrationTask::getName(ScAfterIntegrationTask *this)
{
  return "ScScene.afterIntegrationTask";
}

void ScAfterIntegrationTask::runInternal(ScAfterIntegrationTask *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _OWORD *v26;
  unsigned int v27;
  _OWORD *v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **i;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  _OWORD v63[128];
  _OWORD v64[128];
  _OWORD v65[128];
  _OWORD v66[128];
  _OWORD v67[128];
  _OWORD v68[128];
  uint64_t v69;

  MEMORY[0x24BDAC7A8](this);
  v7 = v6;
  v69 = *MEMORY[0x24BDAC8D0];
  memset(v68, 0, 512);
  memset(v67, 0, 512);
  memset(v66, 0, 512);
  memset(v65, 0, 512);
  v8 = *(_QWORD *)(v6 + 80);
  v9 = *(_QWORD *)(v8 + 1880);
  v10 = *(_QWORD *)(v8 + 2064);
  memset(v64, 0, 512);
  memset(v63, 0, 512);
  if (!*(_DWORD *)(v6 + 48))
  {
    LODWORD(v12) = 0;
    v13 = 0;
    v31 = 0;
    v14 = 0;
    LODWORD(v15) = 0;
    v30 = 0;
    v29 = 1;
    goto LABEL_28;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v56 = 0;
  v58 = 0;
  v14 = 0;
  v15 = 0;
  LOBYTE(v55) = v9;
  do
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v9 + 248)
                    + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 40) + 4 * v11) >> 2) & 0x3FFFFFE0)
                    + 24);
    v17 = v16 - 96;
    v18 = *(_QWORD *)(v16 - 16);
    *(_DWORD *)(v18 + 156) = *(_DWORD *)(v18 + 160);
    v19 = *(_WORD *)(v16 + 28);
    if ((v19 & 1) != 0)
    {
      if ((v19 & 2) != 0)
      {
        v25 = v56;
        v26 = v64;
        ++v56;
        goto LABEL_14;
      }
      v20 = v12;
      if ((v19 & 4) == 0)
        goto LABEL_9;
    }
    else
    {
      v20 = (v12 + 1);
      *((_QWORD *)v68 + v12) = v17;
      v21 = *(_QWORD **)(v16 - 40);
      if (v21)
      {
        v60 = v13;
        v61 = v14;
        v22 = v15;
        v23 = v7;
        v24 = *(_QWORD *)(v7 + 72);
        do
        {
          physx::Sc::ShapeSim::updateCached((uint64_t)v21, v24, v10, v1, v2, v3, v4, v5, v55);
          v21 = (_QWORD *)*v21;
        }
        while (v21);
        v19 = *(_WORD *)(v16 + 28);
        v7 = v23;
        v15 = v22;
        v13 = v60;
        v14 = v61;
        v9 = v55;
      }
      if ((v19 & 4) == 0)
      {
LABEL_9:
        v12 = v20;
        goto LABEL_15;
      }
    }
    v25 = v14++;
    v26 = v63;
    v12 = v20;
LABEL_14:
    *((_QWORD *)v26 + v25) = v17;
LABEL_15:
    if ((*(_BYTE *)(v18 + 44) & 4) != 0)
      *((_QWORD *)v67 + v13++) = v17;
    if ((v19 & 8) != 0)
    {
      v27 = v15;
      v15 = (v15 + 1);
      v28 = v66;
    }
    else
    {
      if ((v19 & 0x10) == 0)
        goto LABEL_22;
      v27 = v58;
      v28 = v65;
      ++v58;
    }
    *((_QWORD *)v28 + v27) = v17;
LABEL_22:
    *(_WORD *)(v16 + 28) = v19 & 1;
    ++v11;
  }
  while (v11 < *(unsigned int *)(v7 + 48));
  v29 = 1;
  if ((_DWORD)v12)
  {
    *(_BYTE *)(*(_QWORD *)(v7 + 72) + 28) = 1;
    *(_BYTE *)(v10 + 24) = 1;
    v29 = 0;
  }
  v31 = v56;
  v30 = v58;
  if ((_DWORD)v12)
  {
LABEL_32:
    v62 = v14;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)(v7 + 56) + 1760));
    v59 = v7;
    v32 = *(_QWORD *)(v7 + 80);
    v33 = (_QWORD *)(*(_QWORD *)(v32 + 1848) + 224);
    if ((v29 & 1) == 0)
    {
      v57 = v15;
      v34 = v30;
      v35 = 0;
      do
      {
        for (i = *(uint64_t ***)(*((_QWORD *)v68 + v35) + 56); i; i = (uint64_t **)*i)
        {
          if ((i[7][8] & 5) != 0)
          {
            v37 = *((unsigned int *)i + 4);
            physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v33, (v37 & 0x7FFFFFFF) + 1);
            *(_DWORD *)(*v33 + ((v37 >> 3) & 0xFFFFFFC)) |= 1 << v37;
          }
        }
        ++v35;
      }
      while (v35 != v12);
      v32 = *(_QWORD *)(v7 + 80);
      v30 = v34;
      LODWORD(v15) = v57;
    }
    if (v13)
    {
      v38 = v13;
      v39 = v67;
      do
      {
        v40 = *(unsigned int *)(v32 + 2104);
        if ((*(_DWORD *)(v32 + 2108) & 0x7FFFFFFFu) <= v40)
        {
          physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(v32 + 2096, v39);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v32 + 2096) + 8 * v40) = *v39;
          *(_DWORD *)(v32 + 2104) = v40 + 1;
        }
        ++v39;
        --v38;
      }
      while (v38);
    }
    if (v31)
    {
      v41 = v31;
      v42 = (uint64_t *)v64;
      do
      {
        v43 = *v42++;
        physx::Sc::BodySim::freezeTransforms(v43, v33);
        --v41;
      }
      while (v41);
    }
    if (v62)
    {
      v44 = v62;
      v45 = (uint64_t *)v63;
      do
      {
        v46 = *v45++;
        physx::Sc::BodySim::createSqBounds(v46);
        --v44;
      }
      while (v44);
    }
    if ((_DWORD)v15)
    {
      v47 = v15;
      v48 = (uint64_t *)v66;
      do
      {
        v49 = *v48++;
        v50 = *(_QWORD *)(*(_QWORD *)(v49 + 72) + 1880);
        v51 = *(_DWORD *)(v49 + 176);
        physx::IG::IslandSim::activateNode(v50 + 224, v51);
        physx::IG::IslandSim::activateNode(v50 + 864, v51);
        --v47;
      }
      while (v47);
    }
    if (v30)
    {
      v52 = v30;
      v53 = (uint64_t *)v65;
      do
      {
        v54 = *v53++;
        physx::Sc::BodySim::notifyReadyForSleeping(v54);
        --v52;
      }
      while (v52);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)(v59 + 56) + 1760));
    return;
  }
LABEL_28:
  if (v31 || v13 || (_DWORD)v15 || v30)
    goto LABEL_32;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::getName() [T = physx::"
           "Sc::ConstraintGroupNode]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::getName() [T = physx::"
           "Sc::ConstraintGroupNode]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::getName() [T = physx"
           "::Sc::ConstraintInteraction]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::getName() [T = physx"
           "::Sc::ConstraintInteraction]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::getName() [T = physx::Sc::ConstraintSim]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::getName() [T = physx::Sc::ConstraintSim]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::getName() [T = physx::Sc::SimStateData]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::getName() [T = physx::Sc::SimStateData]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  _OWORD v38[8];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v35 = 0x2000000000;
  v36 = v38;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)(v3 + 8 * (v7 >> 1));
      v10 = *(_QWORD *)(v3 + 8 * v4);
      if (v9 < v10)
      {
        *(_QWORD *)(v3 + 8 * v4) = v9;
        *(_QWORD *)(v3 + 8 * v8) = v10;
        v9 = v10;
        v10 = *(_QWORD *)(v3 + 8 * v4);
      }
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)(v3 + 8 * v2);
      }
      else
      {
        *(_QWORD *)(v3 + 8 * v4) = v11;
        *(_QWORD *)(v3 + 8 * v2) = v10;
        v9 = *(_QWORD *)(v3 + 8 * v8);
      }
      if (v10 < v9)
      {
        *(_QWORD *)(v3 + 8 * v8) = v10;
        *(_QWORD *)(v3 + 8 * v2) = v9;
        v9 = *(_QWORD *)(v3 + 8 * v8);
      }
      v12 = v2 - 1;
      *(_QWORD *)(v3 + 8 * v8) = *(_QWORD *)(v3 + 8 * v12);
      *(_QWORD *)(v3 + 8 * v12) = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = (unint64_t *)(v3 + 8 * v13);
        do
        {
          v17 = v15[1];
          ++v15;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = (unint64_t *)(v3 + 8 * v14);
        do
        {
          v20 = *--v18;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *v15 = v19;
        *v18 = v16;
        v9 = *(_QWORD *)(v3 + 8 * v12);
      }
      *v15 = v9;
      *(_QWORD *)(v3 + 8 * v12) = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (uint64_t)physx::shdfnd::internal::Stack<physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (uint64_t)physx::shdfnd::internal::Stack<physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = v5 + 8 * v4;
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        result = (v26 + v28);
        if (*(_QWORD *)(v27 + 8 * v28) < *(_QWORD *)(v3 + 8 * v30))
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)(v3 + 8 * v30);
        *(_QWORD *)(v3 + 8 * v30) = *(_QWORD *)(v3 + 8 * v29);
        *(_QWORD *)(v3 + 8 * v29) = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)v6 - *((_QWORD *)v6 - 1));
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5
    && (result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v5 + 71, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553)) != 0)
  {
    v6 = (result + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v6 - 8) = v6 - result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = (_QWORD *)(v6 + 8 * v7);
  if ((_DWORD)v7)
  {
    v9 = *(uint64_t **)v3;
    v10 = (_QWORD *)v6;
    do
    {
      v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(_QWORD *)v3 - *(_QWORD *)(*(_QWORD *)v3 - 8));
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  void *result;
  uint64_t v6;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2 + 71, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  if (v3)
  {
    v4 = (_QWORD *)((v3 + 71) & 0xFFFFFFFFFFFFFFC0);
    *(v4 - 1) = (char *)v4 - v3;
  }
  else
  {
    v4 = 0;
  }
  result = memcpy(v4, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, v6 - *(_QWORD *)(v6 - 8));
  }
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 52);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x20 && *(_BYTE *)(a1 + 32) == 0)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::getName() [T = physx::PxBaseTask *]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 48);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 40);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 52) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 32) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 48);
    }
  }
  *(_QWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 48) = v10 + 1;
  *(_DWORD *)(a1 + 52) = v5;
  return v9 + 8 * v10;
}

void SpeculativeCCDContactDistanceUpdateTask::~SpeculativeCCDContactDistanceUpdateTask(SpeculativeCCDContactDistanceUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *SpeculativeCCDContactDistanceUpdateTask::getName(SpeculativeCCDContactDistanceUpdateTask *this)
{
  return "SpeculativeCCDContactDistanceUpdateTask";
}

void SpeculativeCCDContactDistanceUpdateTask::runInternal(SpeculativeCCDContactDistanceUpdateTask *this)
{
  unint64_t v2;
  char *v3;

  if (*((_DWORD *)this + 270))
  {
    v2 = 0;
    v3 = (char *)this + 56;
    do
      physx::Sc::BodySim::updateContactDistance(*(_QWORD *)&v3[8 * v2++], *((_QWORD *)this + 5), *((_QWORD *)this + 136), *((float *)this + 12));
    while (v2 < *((unsigned int *)this + 270));
  }
}

void SpeculativeCCDContactDistanceArticulationUpdateTask::~SpeculativeCCDContactDistanceArticulationUpdateTask(SpeculativeCCDContactDistanceArticulationUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *SpeculativeCCDContactDistanceArticulationUpdateTask::getName(SpeculativeCCDContactDistanceArticulationUpdateTask *this)
{
  return "SpeculativeCCDContactDistanceArticulationUpdateTask";
}

void SpeculativeCCDContactDistanceArticulationUpdateTask::runInternal(SpeculativeCCDContactDistanceArticulationUpdateTask *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(v1 + 48))
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 5);
    v4 = *((float *)this + 12);
    v5 = *((_QWORD *)this + 8);
    do
      physx::Sc::BodySim::updateContactDistance(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2++), v3, v5, v4);
    while (v2 < *(unsigned int *)(v1 + 48));
  }
}

void DirtyShapeUpdatesTask::~DirtyShapeUpdatesTask(DirtyShapeUpdatesTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *DirtyShapeUpdatesTask::getName(DirtyShapeUpdatesTask *this)
{
  return "DirtyShapeUpdatesTask";
}

void DirtyShapeUpdatesTask::runInternal(DirtyShapeUpdatesTask *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v10;
  char v11;

  if (*((_DWORD *)this + 526))
  {
    v9 = 0;
    v10 = (char *)this + 56;
    do
      physx::Sc::ShapeSim::updateCached(*(_QWORD *)&v10[8 * v9++], *((_QWORD *)this + 5), *((_QWORD *)this + 6), a4, a5, a6, a7, a8, v11);
    while (v9 < *((unsigned int *)this + 526));
  }
}

void UpdateCCDBoundsTask::~UpdateCCDBoundsTask(UpdateCCDBoundsTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *UpdateCCDBoundsTask::getName(UpdateCCDBoundsTask *this)
{
  return "UpdateCCDBoundsTask";
}

uint64_t UpdateCCDBoundsTask::runInternal(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  physx::Sc::ShapeSim *v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;

  v16 = this;
  v17 = *(unsigned int *)(this + 48);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8 * v18);
      v21 = *(physx::Sc::ShapeSim **)(v20 + 56);
      if (v21)
      {
        v22 = 0;
        do
        {
          if ((*(_BYTE *)(*((_QWORD *)v21 + 7) + 64) & 5) != 0)
          {
            this = physx::Sc::ShapeSim::updateSweptBounds(v21, a9, a10, a11, a12, a13, a14, a15, a16, a2, a3, a4, a5, a6, a7, a8);
            v19 += this;
            v22 |= this;
          }
          v21 = *(physx::Sc::ShapeSim **)v21;
        }
        while (v21);
        v17 = *(unsigned int *)(v16 + 48);
      }
      else
      {
        v22 = 0;
      }
      *(_BYTE *)(*(_QWORD *)(v20 + 136) + 156) = v22 != 0;
      ++v18;
    }
    while (v18 < v17);
  }
  else
  {
    v19 = 0;
  }
  v23 = *(unsigned int **)(v16 + 56);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + v19, v23));
  return this;
}

void ScKinematicPoseUpdateTask::~ScKinematicPoseUpdateTask(ScKinematicPoseUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScKinematicPoseUpdateTask::getName(ScKinematicPoseUpdateTask *this)
{
  return "ScScene.ScKinematicPoseUpdateTask";
}

void ScKinematicPoseUpdateTask::runInternal(ScKinematicPoseUpdateTask *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v11;

  LODWORD(v1) = *((_DWORD *)this + 12);
  if ((_DWORD)v1)
  {
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)this + 5);
      if ((int)v3 + 16 < v1)
      {
        _X10 = *(_QWORD *)(v4 + 8 * (v3 + 16));
        __asm { PRFM            #0, [X10] }
        if ((int)v3 + 4 < v1)
        {
          v11 = *(uint64_t **)(v4 + 8 * (v3 + 4));
          _X10 = *v11;
          __asm { PRFM            #0, [X10] }
          _X8 = v11[22];
          __asm { PRFM            #0, [X8] }
        }
      }
      physx::Sc::BodySim::updateKinematicPose(**(physx::Sc::BodySim ***)(v4 + 8 * v3++));
      v1 = *((unsigned int *)this + 12);
    }
    while (v3 < v1);
  }
}

void ScKinematicShapeUpdateTask::~ScKinematicShapeUpdateTask(ScKinematicShapeUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScKinematicShapeUpdateTask::getName(ScKinematicShapeUpdateTask *this)
{
  return "ScScene.KinematicShapeUpdateTask";
}

void ScKinematicShapeUpdateTask::runInternal(ScKinematicShapeUpdateTask *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v8 = *((unsigned int *)this + 12);
  if ((_DWORD)v8)
  {
    for (i = 0; i < v8; ++i)
    {
      v11 = *(_QWORD **)(**(_QWORD **)(*((_QWORD *)this + 5) + 8 * i) + 56);
      if (v11)
      {
        v12 = *((_QWORD *)this + 7);
        v13 = *((_QWORD *)this + 8);
        do
        {
          physx::Sc::ShapeSim::updateCached((uint64_t)v11, v12, v13, a4, a5, a6, a7, a8, v14);
          v11 = (_QWORD *)*v11;
        }
        while (v11);
        v8 = *((unsigned int *)this + 12);
      }
    }
  }
}

void ConstraintProjectionTask::~ConstraintProjectionTask(ConstraintProjectionTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ConstraintProjectionTask::getName(ConstraintProjectionTask *this)
{
  return "ScScene.constraintProjectionWork";
}

uint64_t ConstraintProjectionTask::runInternal(ConstraintProjectionTask *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 8);
  v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 440));
  if (!v3)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    else
      v5 = "<allocation names disabled>";
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 7335, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v3 - 8) = v3 - v6;
    }
    else
    {
      v3 = 0;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v3, *(_QWORD *)(v2 + 448));
  }
  *(_DWORD *)(v3 + 7160) = 0;
  if (*((_DWORD *)this + 12))
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 5);
    do
    {
      v9 = *(_QWORD **)(*(_QWORD *)(v8 + 8 * v7) + 40);
      do
      {
        physx::Sc::ConstraintProjectionTree::projectPoseForTree(v9, v3 + 7152);
        v9 = (_QWORD *)v9[6];
      }
      while (v9);
      v8 = *((_QWORD *)this + 5);
      *(_BYTE *)(*(_QWORD *)(v8 + 8 * v7++) + 88) &= ~2u;
    }
    while (v7 < *((unsigned int *)this + 12));
    if (*(_DWORD *)(v3 + 7160))
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled
        || (pthread_mutex_lock(*(pthread_mutex_t **)(*((_QWORD *)this + 8) + 1760)), *(_DWORD *)(v3 + 7160)))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *((_QWORD *)this + 7);
          v13 = *(_QWORD *)(v3 + 7152);
          v14 = *(unsigned int *)(v12 + 8);
          if ((*(_DWORD *)(v12 + 12) & 0x7FFFFFFFu) <= v14)
          {
            physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(v12, (_QWORD *)(v13 + v10));
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = *(_QWORD *)(v13 + 8 * v11);
            *(_DWORD *)(v12 + 8) = v14 + 1;
          }
          ++v11;
          v10 += 8;
        }
        while (v11 < *(unsigned int *)(v3 + 7160));
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_unlock(*(pthread_mutex_t **)(*((_QWORD *)this + 8) + 1760));
    }
  }
  v15 = *(_QWORD *)(*((_QWORD *)this + 8) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v15 + 8));
  *(_QWORD *)v3 = *(_QWORD *)v15;
  *(_QWORD *)v15 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v15 + 8));
}

uint64_t physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;

  v3 = a2;
  if (*(_DWORD *)result - 1 == a2)
  {
    *(_DWORD *)result = a2;
  }
  else
  {
    v2 = *(unsigned int *)(result + 16);
    if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) <= v2)
    {
      return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result + 8, &v3);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(result + 8) + 4 * v2) = a2;
      ++*(_DWORD *)(result + 16);
    }
  }
  return result;
}

uint64_t physx::Cm::FlushPool::clearNotThreadSafe(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_DWORD *)(this + 24) + 2;
  v3 = *(_DWORD *)(this + 16);
  while (v3 > v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * --v3);
    *(_DWORD *)(v1 + 16) = v3;
    if (v4)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v3 = *(_DWORD *)(v1 + 16);
    }
  }
  *(_QWORD *)(v1 + 24) = 0;
  return this;
}

void ScKinematicUpdateTask::~ScKinematicUpdateTask(ScKinematicUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScKinematicUpdateTask::getName(ScKinematicUpdateTask *this)
{
  return "ScScene.KinematicUpdateTask";
}

void ScKinematicUpdateTask::runInternal(ScKinematicUpdateTask *this)
{
  int v1;
  float v2;
  physx::Sc::BodySim ***v3;
  physx::Sc::BodySim **v4;

  v1 = *((_DWORD *)this + 12);
  if (v1)
  {
    v2 = *((float *)this + 13);
    v3 = (physx::Sc::BodySim ***)*((_QWORD *)this + 5);
    do
    {
      --v1;
      v4 = *v3++;
      physx::Sc::BodySim::calculateKinematicVelocity(*v4, v2);
    }
    while (v1);
  }
}

void ScKinematicAddDynamicTask::~ScKinematicAddDynamicTask(ScKinematicAddDynamicTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScKinematicAddDynamicTask::getName(ScKinematicAddDynamicTask *this)
{
  return "ScScene.KinematicAddDynamicTask";
}

uint64_t ScKinematicAddDynamicTask::runInternal(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = *(_DWORD *)(this + 48);
  if (v1)
  {
    v2 = this;
    v3 = *(uint64_t **)(this + 40);
    do
    {
      --v1;
      v4 = *v3++;
      v5 = *(_QWORD *)(v2 + 56);
      v6 = *(_DWORD *)(*(_QWORD *)v4 + 176);
      this = (*(uint64_t (**)(uint64_t, _QWORD, int *))(*(_QWORD *)v5 + 88))(v5, 0, &v6);
    }
    while (v1);
  }
  return this;
}

void ScBeforeSolverTask::~ScBeforeSolverTask(ScBeforeSolverTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScBeforeSolverTask::getName(ScBeforeSolverTask *this)
{
  return "ScScene.beforeSolver";
}

uint64_t ScBeforeSolverTask::runInternal(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE v9[1024];
  _BYTE v10[2056];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(this + 1072);
  v8 = 0;
  v2 = *(_DWORD *)(this + 1060);
  if (v2)
  {
    v3 = this;
    v4 = (unsigned int *)(this + 36);
    memset(v10, 0, 512);
    do
    {
      v5 = *v4++;
      v6 = (unint64_t)v5 >> 7;
      if (*(_DWORD *)(*(_QWORD *)(v1 + 264) + 4 * v6) != 0x1FFFFFF)
      {
        v7 = *(_QWORD *)(v1 + 248) + 32 * v6;
        if (!*(_BYTE *)(v7 + 5))
          this = physx::Sc::BodySim::updateForces(*(_QWORD *)(v7 + 24) - 96, (uint64_t)v10, (uint64_t)v9, &v8, 0, 0, *(unsigned __int8 *)(v3 + 1088), *(float *)(v3 + 1064));
      }
      --v2;
    }
    while (v2);
    if (v8)
      return (*(uint64_t (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)(v3 + 1080) + 104))(*(_QWORD *)(v3 + 1080), v10, v9);
  }
  return this;
}

void ScArticBeforeSolverTask::~ScArticBeforeSolverTask(ScArticBeforeSolverTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *ScArticBeforeSolverTask::getName(ScArticBeforeSolverTask *this)
{
  return "ScScene.ScArticBeforeSolverTask";
}

void ScArticBeforeSolverTask::runInternal(ScArticBeforeSolverTask *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (*((_DWORD *)this + 12))
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 7);
    do
    {
      v4 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v3 + 248)
                                        + (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 5) + 4 * v2) >> 2) & 0x3FFFFFE0)
                                        + 24)
                            + 24);
      physx::Sc::ArticulationSim::checkResize(v4);
      physx::Sc::ArticulationSim::updateForces(v4, *((float *)this + 13), *((unsigned __int8 *)this + 64));
      physx::Sc::ArticulationSim::saveLastCCDTransform((physx::Sc::ArticulationSim *)v4);
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 12));
  }
}

void UpdatProjectedPoseTask::~UpdatProjectedPoseTask(UpdatProjectedPoseTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *UpdatProjectedPoseTask::getName(UpdatProjectedPoseTask *this)
{
  return "ScScene.UpdatProjectedPoseTask";
}

void UpdatProjectedPoseTask::runInternal(UpdatProjectedPoseTask *this)
{
  unint64_t v2;

  if (*((_DWORD *)this + 12))
  {
    v2 = 0;
    do
      physx::Sc::BodySim::updateCached(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v2++), 0);
    while (v2 < *((unsigned int *)this + 12));
  }
}

void UpdateArticulationTask::~UpdateArticulationTask(UpdateArticulationTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *UpdateArticulationTask::getName(UpdateArticulationTask *this)
{
  return "UpdateArticulationTask";
}

void UpdateArticulationTask::runInternal(UpdateArticulationTask *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (*((_DWORD *)this + 14))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24)
                                 + (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 6) + 4 * v2) >> 2) & 0x3FFFFFE0)
                                 + 24)
                     + 24);
      physx::Sc::ArticulationSim::sleepCheck((_QWORD *)v3, *((float *)this + 15));
      if (*(_DWORD *)(v3 + 48))
      {
        v4 = 0;
        do
          physx::Sc::BodySim::updateCached(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v4++), 0);
        while (v4 < *(unsigned int *)(v3 + 48));
      }
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 14));
  }
}

void OverlapFilterTask::~OverlapFilterTask(OverlapFilterTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *OverlapFilterTask::getName(OverlapFilterTask *this)
{
  return "OverlapFilterTask";
}

uint64_t OverlapFilterTask::runInternal(OverlapFilterTask *this)
{
  return physx::Sc::NPhaseCore::runOverlapFilters(*((_QWORD *)this + 5), *((_DWORD *)this + 14), *((_QWORD *)this + 6), *((_QWORD *)this + 24), (_DWORD *)this + 50, (_DWORD *)this + 51, (_DWORD *)this + 52, (uint64_t)this + 60, (uint64_t)this + 124);
}

void OnOverlapCreatedTask::~OnOverlapCreatedTask(OnOverlapCreatedTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *OnOverlapCreatedTask::getName(OnOverlapCreatedTask *this)
{
  return "OnOverlapCreatedTask";
}

physx::Sc::ElementInteractionMarker *OnOverlapCreatedTask::runInternal(physx::Sc::ElementInteractionMarker *this)
{
  physx::Sc::ElementInteractionMarker *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  physx::Sc::ElementInteractionMarker **v5;
  physx::Sc::ShapeInteraction **v6;
  uint64_t *v7;

  if (*((_DWORD *)this + 22))
  {
    v1 = this;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v6 = (physx::Sc::ShapeInteraction **)*((_QWORD *)this + 9);
    v5 = (physx::Sc::ElementInteractionMarker **)*((_QWORD *)this + 10);
    v7 = (uint64_t *)*((_QWORD *)this + 8);
    do
    {
      this = physx::Sc::NPhaseCore::createRbElementInteraction(*((physx::Sc::NPhaseCore **)v1 + 5), *((_QWORD *)v1 + 7) + v3, *(physx::Sc::ElementSim **)(*((_QWORD *)v1 + 6) + v2 + 8), *(physx::Sc::ElementSim **)(*((_QWORD *)v1 + 6) + v2), *v7, *v6, *v5, 0);
      if (this)
      {
        if (*((_BYTE *)this + 36) == 2)
        {
          *v5 = (physx::Sc::ElementInteractionMarker *)((unint64_t)*v5 | 1);
          ++v5;
        }
        else if (!*((_BYTE *)this + 36))
        {
          *v6 = (physx::Sc::ShapeInteraction *)((unint64_t)*v6 | 1);
          ++v6;
          if (*((_QWORD *)this + 11))
            *v7++ |= 1uLL;
        }
      }
      ++v4;
      v3 += 8;
      v2 += 24;
    }
    while (v4 < *((unsigned int *)v1 + 22));
  }
  return this;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;

  v1 = *(_QWORD *)(a1 + 40);
  physx::IG::IslandSim::wakeIslands2((_DWORD *)(*(_QWORD *)(v1 + 1880) + 864));
  v4 = *(_QWORD *)(v1 + 1880);
  v5 = *(unsigned int *)(v4 + 1072);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int **)(v4 + 1064);
    do
    {
      v8 = *v6++;
      v7 = v8;
      v9 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 1880) + 64)
                                           + 8 * (v8 / *(_DWORD *)(*(_QWORD *)(v1 + 1880) + 88)))
                               + 8 * (v8 % *(_DWORD *)(*(_QWORD *)(v1 + 1880) + 88)));
      if (v9
        && (v9[29] & 0x20) == 0
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 920) + 8 * (v7 / *(_DWORD *)(v4 + 944)))
                     + 16 * (v7 % *(_DWORD *)(v4 + 944))
                     + 4) & 4) != 0
        && physx::Sc::activateInteraction((physx::Sc *)v9, 0, v2, v3)
        && v9[28] <= 2u)
      {
        physx::Sc::Scene::notifyInteractionActivated(v1, (uint64_t)v9);
      }
      --v5;
    }
    while (v5);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 40))(*(_QWORD *)(*(_QWORD *)(v1 + 1840) + 1776), v1 + 4768, *(float *)(v1 + 1984));
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postNarrowPhase>::~DelegateFanoutTask(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(_BYTE *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return a1;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(_BYTE *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::BaseTask::run(physx::Cm::BaseTask *this)
{
  return (*(uint64_t (**)(physx::Cm::BaseTask *))(*(_QWORD *)this + 64))(this);
}

uint64_t physx::Cm::FanoutTask::getName(physx::Cm::FanoutTask *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t physx::Cm::FanoutTask::getReference(physx::Cm::FanoutTask *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Cm::FanoutTask::release(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE v12[88];
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = this;
  v15 = *MEMORY[0x24BDAC8D0];
  v12[80] = 1;
  v13 = v12;
  v14 = 0xA00000000;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
    v2 = HIDWORD(v14) & 0x7FFFFFFF;
  }
  else
  {
    v2 = 10;
  }
  v3 = *(unsigned int *)(v1 + 144);
  if (v2 >= v3)
  {
    if (!(_DWORD)v3)
      goto LABEL_13;
  }
  else
  {
    this = physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::recreate((uint64_t)v12, *(_DWORD *)(v1 + 144));
  }
  v4 = 0;
  do
  {
    v5 = (_QWORD *)(*(_QWORD *)(v1 + 136) + v4);
    v6 = v14;
    if ((HIDWORD(v14) & 0x7FFFFFFFu) <= v14)
    {
      this = physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack((uint64_t)v12, v5);
    }
    else
    {
      *(_QWORD *)&v13[8 * v14] = *v5;
      LODWORD(v14) = v6 + 1;
    }
    v4 += 8;
    --v3;
  }
  while (v3);
LABEL_13:
  *(_DWORD *)(v1 + 144) = 0;
  if (*(_BYTE *)(v1 + 152))
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  }
  else
  {
    v7 = (unsigned int *)(v1 + 24);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 160));
  if ((_DWORD)v14)
  {
    v9 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v13[8 * v9] + 40))(*(_QWORD *)&v13[8 * v9]);
      ++v9;
    }
    while (v9 < v14);
  }
  if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x7FFFFFFF00000000) != 0 && v13 != v12 && v13 != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return this;
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  physx::PxsContext *v2;
  physx::PxBaseTask *v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 168);
  *(_BYTE *)(v1 + 2080) = 0;
  v2 = *(physx::PxsContext **)(v1 + 1840);
  (*(void (**)(_QWORD *))(**((_QWORD **)v2 + 222) + 48))(*((_QWORD **)v2 + 222));
  result = physx::PxsContext::mergeCMDiscreteUpdateResults(v2, v3);
  if (*(_BYTE *)(v1 + 4154))
    return physx::PxcNpMemBlockPool::releaseContacts((physx::PxcNpMemBlockPool *)(*(_QWORD *)(v1 + 1840) + 40));
  return result;
}

void physx::Cm::FanoutTask::~FanoutTask(pthread_mutex_t **this)
{
  int v2;
  physx::Cm::FanoutTask *v3;
  int v4;
  physx::Cm::FanoutTask *v5;

  *this = (pthread_mutex_t *)off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 20);
  v2 = *((_DWORD *)this + 37);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = (physx::Cm::FanoutTask *)this[17];
    if (v3 == (physx::Cm::FanoutTask *)(this + 12))
    {
      *((_BYTE *)this + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *((_DWORD *)this + 23);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = (physx::Cm::FanoutTask *)this[10];
    if (v5 == (physx::Cm::FanoutTask *)(this + 5))
    {
      *((_BYTE *)this + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

{
  int v2;
  physx::Cm::FanoutTask *v3;
  int v4;
  physx::Cm::FanoutTask *v5;

  *this = (pthread_mutex_t *)off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 20);
  v2 = *((_DWORD *)this + 37);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = (physx::Cm::FanoutTask *)this[17];
    if (v3 == (physx::Cm::FanoutTask *)(this + 12))
    {
      *((_BYTE *)this + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *((_DWORD *)this + 23);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = (physx::Cm::FanoutTask *)this[10];
    if (v5 == (physx::Cm::FanoutTask *)(this + 5))
    {
      *((_BYTE *)this + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  JUMPOUT(0x2276933B8);
}

uint64_t physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (!a2)
    goto LABEL_10;
  if ((8 * a2) <= 0x50 && !*(_BYTE *)(result + 80))
  {
    *(_BYTE *)(result + 80) = 1;
    v4 = (_QWORD *)result;
    goto LABEL_11;
  }
  if (8 * a2)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::getName() [T = physx::PxBaseTask *]";
    else
      v6 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                             + 16))(v5 + 24, (8 * a2), v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_QWORD *)result;
  }
  else
  {
LABEL_10:
    v4 = 0;
  }
LABEL_11:
  v7 = *(unsigned int *)(v3 + 96);
  v8 = *(uint64_t **)(v3 + 88);
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v4[v7];
    v10 = v4;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)(v3 + 88);
  }
  if ((*(_DWORD *)(v3 + 100) & 0x80000000) == 0)
  {
    if (v8 == (uint64_t *)v3)
    {
      *(_BYTE *)(v3 + 80) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 88) = v4;
  *(_DWORD *)(v3 + 100) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 100);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x50 && *(_BYTE *)(a1 + 80) == 0)
  {
    *(_BYTE *)(a1 + 80) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::getName() [T = physx::PxBaseTask *]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 96);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 88);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 100) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 88);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 80) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 96);
    }
  }
  *(_QWORD *)(a1 + 88) = v9;
  *(_DWORD *)(a1 + 96) = v10 + 1;
  *(_DWORD *)(a1 + 100) = v5;
  return v9 + 8 * v10;
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::finalizationPhase>::~DelegateFanoutTask(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(_BYTE *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return a1;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(_BYTE *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::finalizationPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t result;
  unint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;

  v1 = *(_QWORD *)(a1 + 168);
  v2 = *(_QWORD *)(v1 + 1864);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 304);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(v2 + 296);
      do
      {
        v5 = *v4++;
        v6 = *(_QWORD *)(v1 + 1904);
        v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 16) + 13) == 2;
        LODWORD(v55) = *(_DWORD *)(v5 + 80);
        (*(void (**)(uint64_t, _BOOL8, unint64_t *))(*(_QWORD *)v6 + 88))(v6, v7, &v55);
        --v3;
      }
      while (v3);
      v2 = *(_QWORD *)(v1 + 1864);
    }
    *(_DWORD *)(v2 + 304) = 0;
  }
  v8 = *(_QWORD *)(v1 + 7480);
  if (v8)
  {
    physx::PxcScratchAllocator::free(*(_QWORD *)(v1 + 1840), v8);
    *(_QWORD *)(v1 + 7480) = 0;
  }
  if (*(_QWORD *)(v1 + 4240))
  {
    v9 = *(unsigned int *)(v1 + 7540);
    if ((_DWORD)v9)
    {
      *(_DWORD *)(v1 + 4216) = 0;
      if ((*(_DWORD *)(v1 + 4220) & 0x7FFFFFFFu) < v9)
        physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::recreate(v1 + 4208, v9);
      *(_DWORD *)(v1 + 4232) = 0;
      if ((*(_DWORD *)(v1 + 4236) & 0x7FFFFFFFu) < v9)
        physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate(v1 + 4224, v9);
      v10 = *(_QWORD *)(v1 + 7496);
      do
      {
        if ((*(_WORD *)(*(_QWORD *)v10 + 124) & 1) == 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)v10 + 80);
          v12 = v11 + *((_QWORD *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v11 + 13) + 10);
          v55 = v12;
          v13 = *(unsigned int *)(v1 + 4216);
          if ((*(_DWORD *)(v1 + 4220) & 0x7FFFFFFFu) <= v13)
          {
            physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::growAndPushBack(v1 + 4208, &v55);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v1 + 4208) + 8 * v13) = v12;
            *(_DWORD *)(v1 + 4216) = v13 + 1;
          }
          v14 = *(float *)(v11 + 64) * -2.0;
          v15 = *(float *)(v11 + 68) * -2.0;
          v16 = *(float *)(v11 + 72) * -2.0;
          v18 = *(float *)(v11 + 56);
          v17 = *(float *)(v11 + 60);
          v19 = (float)(v17 * v17) + -0.5;
          v20 = *(float *)(v11 + 48);
          v21 = *(float *)(v11 + 52);
          v22 = (float)((float)(v15 * v21) + (float)(v20 * v14)) + (float)(v18 * v16);
          v23 = (float)((float)(v14 * v19) - (float)((float)((float)(v21 * v16) - (float)(v18 * v15)) * v17))
              + (float)(v20 * v22);
          v24 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(v20 * v16)) * v17))
              + (float)(v21 * v22);
          v25 = (float)((float)(v16 * v19) - (float)((float)((float)(v20 * v15) - (float)(v21 * v14)) * v17))
              + (float)(v18 * v22);
          v26 = v23 + v23;
          v27 = v24 + v24;
          v28 = v25 + v25;
          v30 = *(float *)(v11 + 24);
          v29 = *(float *)(v11 + 28);
          v31 = (float)(v29 * v29) + -0.5;
          v32 = *(float *)(v11 + 16);
          v33 = *(float *)(v11 + 20);
          v34 = (float)((float)(v33 * v27) + (float)(v32 * (float)(v23 + v23))) + (float)(v30 * v28);
          v35 = (float)((float)(v29 * (float)((float)(v33 * v28) - (float)(v30 * v27)))
                      + (float)((float)(v23 + v23) * v31))
              + (float)(v32 * v34);
          v36 = (float)((float)(v29 * (float)((float)(v30 * v26) - (float)(v32 * v28))) + (float)(v27 * v31))
              + (float)(v33 * v34);
          v37 = (float)((float)(v29 * (float)((float)(v32 * v27) - (float)(v33 * v26))) + (float)(v28 * v31))
              + (float)(v30 * v34);
          v38 = *(float *)(v11 + 32) + v35;
          v39 = *(float *)(v11 + 36) + v36;
          v40 = *(float *)(v11 + 40) + v37;
          v41 = (float)((float)((float)(v17 * v32) - (float)(v29 * v20)) - (float)(v33 * v18)) + (float)(v21 * v30);
          v42 = (float)((float)((float)(v17 * v33) - (float)(v29 * v21)) - (float)(v30 * v20)) + (float)(v18 * v32);
          v43 = (float)((float)((float)(v17 * v30) - (float)(v29 * v18)) - (float)(v32 * v21)) + (float)(v20 * v33);
          v44 = (float)((float)((float)(v20 * v32) + (float)(v29 * v17)) + (float)(v33 * v21)) + (float)(v30 * v18);
          v55 = __PAIR64__(LODWORD(v42), LODWORD(v41));
          v56 = v43;
          v57 = v44;
          v58 = v38;
          v59 = v39;
          v60 = v40;
          v45 = *(_DWORD *)(v1 + 4232);
          if ((*(_DWORD *)(v1 + 4236) & 0x7FFFFFFFu) <= v45)
          {
            physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::growAndPushBack(v1 + 4224, (uint64_t)&v55);
          }
          else
          {
            v46 = *(_QWORD *)(v1 + 4224) + 28 * v45;
            *(float *)v46 = v41;
            *(float *)(v46 + 4) = v42;
            *(float *)(v46 + 8) = v43;
            *(float *)(v46 + 12) = v44;
            *(float *)(v46 + 16) = v38;
            *(float *)(v46 + 20) = v39;
            *(float *)(v46 + 24) = v40;
            *(_DWORD *)(v1 + 4232) = v45 + 1;
          }
        }
        v10 += 8;
        --v9;
      }
      while (v9);
      if (*(_DWORD *)(v1 + 4216))
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 4240) + 40))(*(_QWORD *)(v1 + 4240), *(_QWORD *)(v1 + 4208), *(_QWORD *)(v1 + 4224));
    }
  }
  v47 = *(_DWORD *)(v1 + 2284);
  if (v47)
  {
    v48 = *(_QWORD *)(v1 + 2240);
    v49 = v47 - 1;
    do
    {
      v50 = v49;
      physx::Sc::ConstraintSim::checkMaxForceExceeded(*(physx::Sc::ConstraintSim **)(v48 + 8 * v49--));
    }
    while (v50);
  }
  v51 = *(_QWORD *)(v1 + 4296);
  v52 = v51;
  if (*(_DWORD *)(v51 + 56))
  {
    v53 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v51 + 8, *(_DWORD *)(*(_QWORD *)(v51 + 48) + 4 * v53++));
    while (v53 < *(unsigned int *)(v51 + 56));
    v52 = *(_QWORD *)(v1 + 4296);
  }
  *(_DWORD *)(v51 + 56) = 0;
  bzero(*(void **)(v52 + 32), (4 * *(_DWORD *)(v52 + 40)));
  result = physx::Cm::FlushPool::clear((pthread_mutex_t **)(v1 + 7416));
  ++*(_DWORD *)(v1 + 1996);
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  unsigned int *v15;
  __int16 v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  void (***v30)(void);
  void (**v31)(void);
  unsigned int v32;
  unint64_t v33;
  void (***v34)(void);
  void (**v35)(void);
  unsigned int v36;
  unint64_t v37;
  void (***v38)(void);
  void (**v39)(void);
  unsigned int v40;
  unint64_t v41;
  void (***v42)(void);
  void (**v43)(void);
  char v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t (**v74)();
  __int128 v75;
  uint64_t v76;
  int v77;
  __int128 v78;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 1912) + 8))(*(_QWORD *)(v1 + 1912));
  *(_DWORD *)(v1 + 2104) = result;
  if ((*(_BYTE *)(v1 + 4268) & 2) != 0)
  {
    v67 = v2;
    if (*(_BYTE *)(v1 + 7472))
    {
      v4 = *(_QWORD *)(v1 + 3992);
      v5 = *(unsigned int *)(v4 + 16);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = *(_QWORD *)(v4 + 8);
        do
        {
          if (v6 < (v5 - 1))
          {
            _X13 = *(_QWORD *)(v7 + 8 * v6 + 8);
            __asm { PRFM            #0, [X13] }
          }
          v14 = *(_QWORD **)(v7 + 8 * v6);
          v15 = (unsigned int *)v14[3];
          v16 = *((_WORD *)v15 + 5);
          if ((v16 & 2) != 0)
          {
            ++v6;
          }
          else
          {
            if (++v6 < v5)
            {
              _X0 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 24);
              __asm { PRFM            #0, [X0] }
            }
            if ((v16 & 8) != 0 && *((_WORD *)v15 + 4))
            {
              v19 = *(_QWORD *)(v4 + 64) + *v15;
              v21 = v14[1];
              v20 = v14[2];
              v22 = *(_QWORD *)(v21 + 80);
              if (*(_BYTE *)(v22 + 13))
              {
                *(_QWORD *)(v19 + 12) = *(_QWORD *)(v22 + 80);
                *(_DWORD *)(v19 + 20) = *(_DWORD *)(v22 + 88);
                v23 = *(_QWORD *)(v22 + 96);
                v24 = *(_DWORD *)(v22 + 104);
              }
              else
              {
                v23 = 0;
                *(_QWORD *)(v19 + 12) = 0;
                *(_DWORD *)(v19 + 20) = 0;
                v24 = 0;
              }
              *(_QWORD *)(v19 + 36) = v23;
              *(_DWORD *)(v19 + 44) = v24;
              v25 = *(_QWORD *)(v20 + 80);
              if (*(_BYTE *)(v25 + 13))
              {
                *(_QWORD *)(v19 + 24) = *(_QWORD *)(v25 + 80);
                *(_DWORD *)(v19 + 32) = *(_DWORD *)(v25 + 88);
                v26 = *(_QWORD *)(v25 + 96);
                v27 = *(_DWORD *)(v25 + 104);
              }
              else
              {
                v26 = 0;
                *(_QWORD *)(v19 + 24) = 0;
                *(_DWORD *)(v19 + 32) = 0;
                v27 = 0;
              }
              *(_QWORD *)(v19 + 48) = v26;
              *(_DWORD *)(v19 + 56) = v27;
              *((_WORD *)v15 + 5) = v16 & 0xFFF7;
            }
          }
        }
        while (v6 != v5);
      }
    }
    v28 = *(_DWORD *)(v1 + 5264);
    if (v28 != 2)
    {
      v73 = (_DWORD *)(v1 + 5256);
      if (v28)
      {
        v29 = *(_QWORD *)v73 + 56 * v28;
        v30 = *(void (****)(void))v73;
        do
        {
          v31 = *v30;
          v30 += 7;
          (*v31)();
        }
        while ((unint64_t)v30 < v29);
      }
      *(_DWORD *)(v1 + 5264) = 0;
      v32 = *(_DWORD *)(v1 + 5184);
      if (v32)
      {
        v33 = *(_QWORD *)(v1 + 5176) + 56 * v32;
        v34 = *(void (****)(void))(v1 + 5176);
        do
        {
          v35 = *v34;
          v34 += 7;
          (*v35)();
        }
        while ((unint64_t)v34 < v33);
      }
      *(_DWORD *)(v1 + 5184) = 0;
      v36 = *(_DWORD *)(v1 + 5248);
      if (v36)
      {
        v37 = *(_QWORD *)(v1 + 5240) + 56 * v36;
        v38 = *(void (****)(void))(v1 + 5240);
        do
        {
          v39 = *v38;
          v38 += 7;
          (*v39)();
        }
        while ((unint64_t)v38 < v37);
      }
      *(_DWORD *)(v1 + 5248) = 0;
      v40 = *(_DWORD *)(v1 + 5232);
      if (v40)
      {
        v41 = *(_QWORD *)(v1 + 5224) + 56 * v40;
        v42 = *(void (****)(void))(v1 + 5224);
        do
        {
          v43 = *v42;
          v42 += 7;
          (*v43)();
        }
        while ((unint64_t)v42 < v41);
      }
      v72 = (_DWORD *)(v1 + 5176);
      *(_DWORD *)(v1 + 5232) = 0;
      if ((*(_DWORD *)(v1 + 5268) & 0x7FFFFFFE) == 0)
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::recreate(v73);
      if ((*(_DWORD *)(v1 + 5188) & 0x7FFFFFFE) == 0)
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::recreate(v72);
      v71 = (_DWORD *)(v1 + 5192);
      if ((*(_DWORD *)(v1 + 5204) & 0x7FFFFFFE) == 0)
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::recreate(v71);
      v70 = (_DWORD *)(v1 + 5240);
      v69 = (_DWORD *)(v1 + 5208);
      if ((*(_DWORD *)(v1 + 5220) & 0x7FFFFFFE) == 0)
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::recreate(v69);
      v68 = (_DWORD *)(v1 + 5224);
      if ((*(_DWORD *)(v1 + 5252) & 0x7FFFFFFE) == 0)
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::recreate(v70);
      if ((*(_DWORD *)(v1 + 5236) & 0x7FFFFFFE) == 0)
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::recreate(v68);
      v44 = 1;
      do
      {
        v45 = v44;
        v46 = *(_QWORD *)(v1 + 24);
        v76 = 0;
        v77 = 0;
        v74 = off_24ED90140;
        v75 = v46;
        *(_QWORD *)&v78 = v1;
        *((_QWORD *)&v78 + 1) = "ScScene.postCCDPass";
        v47 = *(_DWORD *)(v1 + 5264);
        if ((*(_DWORD *)(v1 + 5268) & 0x7FFFFFFFu) <= v47)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::growAndPushBack((uint64_t)v73, (uint64_t)&v74);
        }
        else
        {
          v48 = *(_QWORD *)(v1 + 5256) + 56 * v47;
          *(_QWORD *)v48 = off_24ED8E318;
          *(_OWORD *)(v48 + 8) = v75;
          *(_QWORD *)(v48 + 24) = v76;
          *(_DWORD *)(v48 + 32) = v77;
          *(_QWORD *)v48 = off_24ED90140;
          *(_OWORD *)(v48 + 40) = v78;
          ++*(_DWORD *)(v1 + 5264);
        }
        v49 = *(_QWORD *)(v1 + 24);
        v76 = 0;
        v77 = 0;
        v74 = off_24ED901D0;
        v75 = v49;
        *(_QWORD *)&v78 = v1;
        *((_QWORD *)&v78 + 1) = "ScScene.updateCCDSinglePass";
        v50 = *(_DWORD *)(v1 + 5184);
        if ((*(_DWORD *)(v1 + 5188) & 0x7FFFFFFFu) <= v50)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::growAndPushBack((uint64_t)v72, (uint64_t)&v74);
        }
        else
        {
          v51 = *(_QWORD *)(v1 + 5176) + 56 * v50;
          *(_QWORD *)v51 = off_24ED8E318;
          *(_OWORD *)(v51 + 8) = v75;
          *(_QWORD *)(v51 + 24) = v76;
          *(_DWORD *)(v51 + 32) = v77;
          *(_QWORD *)v51 = off_24ED901D0;
          *(_OWORD *)(v51 + 40) = v78;
          ++*(_DWORD *)(v1 + 5184);
        }
        v52 = *(_QWORD *)(v1 + 24);
        v76 = 0;
        v77 = 0;
        v74 = off_24ED90260;
        v75 = v52;
        *(_QWORD *)&v78 = v1;
        *((_QWORD *)&v78 + 1) = "ScScene.updateCCDSinglePassStage2";
        v53 = *(_DWORD *)(v1 + 5200);
        if ((*(_DWORD *)(v1 + 5204) & 0x7FFFFFFFu) <= v53)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::growAndPushBack((uint64_t)v71, (uint64_t)&v74);
        }
        else
        {
          v54 = *(_QWORD *)(v1 + 5192) + 56 * v53;
          *(_QWORD *)v54 = off_24ED8E318;
          *(_OWORD *)(v54 + 8) = v75;
          *(_QWORD *)(v54 + 24) = v76;
          *(_DWORD *)(v54 + 32) = v77;
          *(_QWORD *)v54 = off_24ED90260;
          *(_OWORD *)(v54 + 40) = v78;
          ++*(_DWORD *)(v1 + 5200);
        }
        v55 = *(_QWORD *)(v1 + 24);
        v76 = 0;
        v77 = 0;
        v74 = off_24ED902F0;
        v75 = v55;
        *(_QWORD *)&v78 = v1;
        *((_QWORD *)&v78 + 1) = "ScScene.updateCCDSinglePassStage3";
        v56 = *(_DWORD *)(v1 + 5216);
        if ((*(_DWORD *)(v1 + 5220) & 0x7FFFFFFFu) <= v56)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::growAndPushBack((uint64_t)v69, (uint64_t)&v74);
        }
        else
        {
          v57 = *(_QWORD *)(v1 + 5208) + 56 * v56;
          *(_QWORD *)v57 = off_24ED8E318;
          *(_OWORD *)(v57 + 8) = v75;
          *(_QWORD *)(v57 + 24) = v76;
          *(_DWORD *)(v57 + 32) = v77;
          *(_QWORD *)v57 = off_24ED902F0;
          *(_OWORD *)(v57 + 40) = v78;
          ++*(_DWORD *)(v1 + 5216);
        }
        v58 = *(_QWORD *)(v1 + 24);
        v76 = 0;
        v77 = 0;
        v74 = off_24ED90380;
        v75 = v58;
        *(_QWORD *)&v78 = v1;
        *((_QWORD *)&v78 + 1) = "ScScene.ccdBroadPhase";
        v59 = *(_DWORD *)(v1 + 5248);
        if ((*(_DWORD *)(v1 + 5252) & 0x7FFFFFFFu) <= v59)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::growAndPushBack((uint64_t)v70, (uint64_t)&v74);
        }
        else
        {
          v60 = *(_QWORD *)(v1 + 5240) + 56 * v59;
          *(_QWORD *)v60 = off_24ED8E318;
          *(_OWORD *)(v60 + 8) = v75;
          *(_QWORD *)(v60 + 24) = v76;
          *(_DWORD *)(v60 + 32) = v77;
          *(_QWORD *)v60 = off_24ED90380;
          *(_OWORD *)(v60 + 40) = v78;
          ++*(_DWORD *)(v1 + 5248);
        }
        v61 = *(_QWORD *)(v1 + 24);
        v76 = 0;
        v77 = 0;
        v74 = off_24ED90410;
        v75 = v61;
        *(_QWORD *)&v78 = v1;
        *((_QWORD *)&v78 + 1) = "ScScene.ccdBroadPhaseAABB";
        v62 = *(_DWORD *)(v1 + 5232);
        if ((*(_DWORD *)(v1 + 5236) & 0x7FFFFFFFu) <= v62)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::growAndPushBack((uint64_t)v68, (uint64_t)&v74);
        }
        else
        {
          v63 = *(_QWORD *)(v1 + 5224) + 56 * v62;
          *(_QWORD *)v63 = off_24ED8E318;
          *(_OWORD *)(v63 + 8) = v75;
          *(_QWORD *)(v63 + 24) = v76;
          *(_DWORD *)(v63 + 32) = v77;
          *(_QWORD *)v63 = off_24ED90410;
          *(_OWORD *)(v63 + 40) = v78;
          ++*(_DWORD *)(v1 + 5232);
        }
        v44 = 0;
      }
      while ((v45 & 1) != 0);
    }
    physx::PxsContext::resetThreadContexts(*(physx::PxsContext **)(v1 + 1840));
    v64 = *(_QWORD *)(v1 + 1864);
    *(_DWORD *)(v64 + 180) = 0;
    *(_DWORD *)(v64 + 184) = 0;
    v65 = *(_QWORD *)(v1 + 5240);
    *(_DWORD *)(v65 + 32) = 1;
    *(_QWORD *)(v65 + 24) = v67;
    if (v67)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
      *(_QWORD *)(v65 + 16) = *(_QWORD *)(*(_QWORD *)(v65 + 24) + 16);
      v65 = *(_QWORD *)(v1 + 5240);
    }
    v66 = *(_QWORD *)(v1 + 5224);
    *(_DWORD *)(v66 + 32) = 1;
    *(_QWORD *)(v66 + 24) = v65;
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
    *(_QWORD *)(v66 + 16) = *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16);
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 5240) + 40))(*(_QWORD *)(v1 + 5240));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 5224) + 40))(*(_QWORD *)(v1 + 5224));
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  __int16 v18;
  int v19;
  unsigned int v20;
  pthread_mutex_t **v21;
  uint64_t v22;
  void (***v23)(UpdatProjectedPoseTask *__hidden);
  uint64_t v24;
  unsigned int v25;
  void (**v26)(UpdatProjectedPoseTask *__hidden);
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  int v33;
  unsigned int i;
  int v35;
  unint64_t v36;
  uint64_t *v37;
  _DWORD *v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  pthread_mutex_t **v45;
  void (**v46)(ScKinematicShapeUpdateTask *__hidden);
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (**v52)(ScKinematicShapeUpdateTask *__hidden);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *j;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  pthread_mutex_t **v75;
  unsigned int v76;
  uint64_t v77;
  void (***v78)(UpdateArticulationTask *__hidden);
  int v79;
  int v80;
  void (**v81)(UpdateArticulationTask *__hidden);
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  pthread_mutex_t **v95;
  uint64_t v96;
  _BYTE v97[1024];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v1 + 1840);
  v4 = *(_QWORD *)(v3 + 2592);
  *(_BYTE *)(v4 + 28) = 0;
  v5 = *(_QWORD *)(v1 + 2064);
  *(_BYTE *)(v5 + 24) = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 1760));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v1 + 1904) + 152))(*(_QWORD *)(v1 + 1904), v4, v5, v2);
  v6 = *(_QWORD *)(v1 + 1880);
  v7 = *(_DWORD *)(v6 + 576);
  v8 = *(unsigned int *)(v1 + 4704);
  if (v7 > v8)
  {
    v9 = (_QWORD *)(*(_QWORD *)(v1 + 1848) + 224);
    v10 = v7 - v8;
    v11 = (unsigned int *)(*(_QWORD *)(v6 + 568) + 4 * v8);
    do
    {
      v12 = *v11++;
      v13 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + (((unint64_t)v12 >> 2) & 0x3FFFFFE0) + 24);
      v14 = *(_QWORD *)(v13 - 16);
      v15 = *(_QWORD *)(v13 + 40);
      *(_OWORD *)v15 = *(_OWORD *)v13;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 16);
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(v13 + 24);
      physx::Sc::BodySim::updateCached(v13 - 96, v9);
      v16 = *(_QWORD *)(v1 + 1904);
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 - 16) + 13) == 2;
      LODWORD(v98) = *(_DWORD *)(v13 + 80);
      (*(void (**)(uint64_t, _BOOL8, __int128 *))(*(_QWORD *)v16 + 88))(v16, v17, &v98);
      v18 = *(_WORD *)(v13 + 28);
      if ((v18 & 2) != 0)
      {
        physx::Sc::BodySim::freezeTransforms(v13 - 96, (_QWORD *)(*(_QWORD *)(v1 + 1848) + 224));
        v18 = *(_WORD *)(v13 + 28);
      }
      *(_DWORD *)(v14 + 156) = 0;
      *(_QWORD *)(v14 + 80) = 0;
      *(_DWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 96) = 0;
      *(_DWORD *)(v14 + 104) = 0;
      *(_WORD *)(v13 + 28) = v18 & 1;
      --v10;
    }
    while (v10);
  }
  if (*(_DWORD *)(v1 + 2120))
  {
    v19 = 0;
    v20 = 0;
    v21 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
    do
    {
      v22 = physx::Cm::FlushPool::allocate(v21, 56, 0x10u);
      v23 = (void (***)(UpdatProjectedPoseTask *__hidden))v22;
      v24 = *(_QWORD *)(v1 + 2112) + 8 * v20;
      v25 = v19 + *(_DWORD *)(v1 + 2120);
      if (v25 >= 0x100)
        v25 = 256;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v22 + 16) = 0;
      *(_DWORD *)(v22 + 32) = 0;
      *(_QWORD *)v22 = &off_24ED8E838;
      *(_QWORD *)(v22 + 40) = v24;
      *(_DWORD *)(v22 + 48) = v25;
      *(_DWORD *)(v22 + 32) = 1;
      *(_QWORD *)(v22 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
        v23[2] = (void (**)(UpdatProjectedPoseTask *__hidden))v23[3][2];
        v26 = *v23;
      }
      else
      {
        v26 = &off_24ED8E838;
      }
      v26[5]((UpdatProjectedPoseTask *)v23);
      v20 += 256;
      v27 = *(_DWORD *)(v1 + 2120);
      v19 -= 256;
    }
    while (v20 < v27);
    if (v27)
    {
      v28 = 0;
      v29 = (_QWORD *)(*(_QWORD *)(v1 + 1848) + 224);
      do
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v1 + 2112) + 8 * v28);
        if ((*(_WORD *)(v30 + 124) & 1) == 0)
        {
          v31 = *(uint64_t ***)(v30 + 56);
          if (v31)
          {
            do
            {
              v32 = *((unsigned int *)v31 + 4);
              if ((v32 & 0x80000000) != 0)
              {
                physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v29, (v32 & 0x7FFFFFFF) + 1);
                *(_DWORD *)(*v29 + ((v32 >> 3) & 0xFFFFFFC)) |= 1 << v32;
              }
              v31 = (uint64_t **)*v31;
            }
            while (v31);
            v27 = *(_DWORD *)(v1 + 2120);
          }
        }
        ++v28;
      }
      while (v28 < v27);
      if (v27)
      {
        v33 = 0;
        for (i = 0; i < v27; i += 256)
        {
          v129 = 0u;
          v128 = 0u;
          v127 = 0u;
          v126 = 0u;
          v125 = 0u;
          v124 = 0u;
          v123 = 0u;
          v122 = 0u;
          v121 = 0u;
          v120 = 0u;
          v119 = 0u;
          v118 = 0u;
          v117 = 0u;
          v116 = 0u;
          v115 = 0u;
          v114 = 0u;
          v113 = 0u;
          v112 = 0u;
          v111 = 0u;
          v110 = 0u;
          v109 = 0u;
          v108 = 0u;
          v107 = 0u;
          v106 = 0u;
          v105 = 0u;
          v104 = 0u;
          v103 = 0u;
          v102 = 0u;
          v101 = 0u;
          v100 = 0u;
          if (v27 - i >= 0x100)
            v35 = 256;
          else
            v35 = v27 - i;
          v99 = 0uLL;
          v98 = 0uLL;
          if (v35)
          {
            v36 = v27 + v33;
            if (v36 >= 0x100)
              v36 = 256;
            v37 = (uint64_t *)(*(_QWORD *)(v1 + 2112) + 8 * i);
            v38 = v97;
            v39 = &v98;
            do
            {
              *(_QWORD *)v39 = *v37 + 96;
              v39 = (__int128 *)((char *)v39 + 8);
              v40 = *v37++;
              *v38++ = *(_DWORD *)(v40 + 176) >> 7;
              --v36;
            }
            while (v36);
          }
          (*(void (**)(_QWORD, __int128 *, _BYTE *))(**(_QWORD **)(v1 + 1904) + 56))(*(_QWORD *)(v1 + 1904), &v98, v97);
          v27 = *(_DWORD *)(v1 + 2120);
          v33 -= 256;
        }
      }
    }
  }
  v41 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = 0;
    v44 = *(_QWORD *)(v1 + 32);
    v45 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
    v46 = &off_24ED8E598;
    while (2)
    {
      v47 = 0;
      v48 = v42;
      while (1)
      {
        v47 += *(_DWORD *)(**(_QWORD **)(v44 + 8 * v48) + 64);
        if (v47 >= 0x400)
          break;
        if (v41 == ++v48)
        {
          if (v47)
          {
            v53 = physx::Cm::FlushPool::allocate(v45, 72, 0x10u);
            v54 = *(_QWORD *)(*(_QWORD *)(v1 + 1840) + 2592);
            v55 = *(_QWORD *)(v1 + 2064);
            *(_QWORD *)(v53 + 8) = *(_QWORD *)(v1 + 24);
            *(_QWORD *)(v53 + 16) = 0;
            *(_DWORD *)(v53 + 32) = 0;
            *(_QWORD *)v53 = &off_24ED8E598;
            *(_QWORD *)(v53 + 40) = v44 + 8 * v43;
            *(_DWORD *)(v53 + 48) = v41 - v43;
            *(_QWORD *)(v53 + 56) = v54;
            *(_QWORD *)(v53 + 64) = v55;
            *(_DWORD *)(v53 + 32) = 1;
            *(_QWORD *)(v53 + 24) = v2;
            if (v2)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
              *(_QWORD *)(v53 + 16) = *(_QWORD *)(*(_QWORD *)(v53 + 24) + 16);
              v46 = *(void (***)(ScKinematicShapeUpdateTask *__hidden))v53;
            }
            v46[5]((ScKinematicShapeUpdateTask *)v53);
          }
          goto LABEL_52;
        }
      }
      v95 = v45;
      v49 = physx::Cm::FlushPool::allocate(v45, 72, 0x10u);
      v50 = *(_QWORD *)(*(_QWORD *)(v1 + 1840) + 2592);
      v51 = *(_QWORD *)(v1 + 2064);
      *(_QWORD *)(v49 + 8) = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v49 + 16) = 0;
      *(_DWORD *)(v49 + 32) = 0;
      *(_QWORD *)v49 = &off_24ED8E598;
      *(_QWORD *)(v49 + 40) = v44 + 8 * v43;
      *(_DWORD *)(v49 + 48) = v48 - v43 + 1;
      *(_QWORD *)(v49 + 56) = v50;
      *(_QWORD *)(v49 + 64) = v51;
      *(_DWORD *)(v49 + 32) = 1;
      *(_QWORD *)(v49 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
        *(_QWORD *)(v49 + 16) = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 16);
        v52 = *(void (***)(ScKinematicShapeUpdateTask *__hidden))v49;
      }
      else
      {
        v52 = &off_24ED8E598;
      }
      v42 = v48 + 1;
      v52[5]((ScKinematicShapeUpdateTask *)v49);
      v43 = v48 + 1;
      v45 = v95;
      if (v41 - 1 != v48)
        continue;
      break;
    }
LABEL_52:
    v56 = 0;
    v57 = *(_QWORD *)(v1 + 1848);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 1840) + 2592) + 28) = 1;
    *(_BYTE *)(*(_QWORD *)(v1 + 2064) + 24) = 1;
    do
    {
      v58 = **(_QWORD **)(v44 + 8 * v56);
      if ((int)v56 + 16 < v41)
      {
        _X9 = *(_QWORD *)(v44 + 8 * (v56 + 16));
        __asm { PRFM            #0, [X9] }
        if ((int)v56 + 8 < v41)
        {
          _X9 = **(_QWORD **)(v44 + 8 * (v56 + 8));
          __asm { PRFM            #0, [X9] }
        }
        if ((int)v56 + 4 < v41)
        {
          _X9 = *(_QWORD *)(**(_QWORD **)(v44 + 8 * (v56 + 4)) + 56);
          __asm { PRFM            #0, [X9] }
        }
      }
      for (j = *(uint64_t **)(v58 + 56); j; j = (uint64_t *)*j)
      {
        if ((*(_BYTE *)(j[7] + 64) & 5) != 0)
          *(_DWORD *)(*(_QWORD *)(v57 + 224) + 4 * (((unint64_t)*((unsigned int *)j + 4) >> 5) & 0x3FFFFFF)) |= 1 << *((_DWORD *)j + 4);
      }
      v70 = *(_QWORD *)(v1 + 1904);
      LODWORD(v98) = *(_DWORD *)(v58 + 176);
      (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v70 + 88))(v70, 0, &v98);
      ++v56;
    }
    while (v56 != v41);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)(v1 + 1840) + 1760));
  v71 = *(_QWORD *)(v1 + 1880);
  v72 = *(_DWORD *)(v71 + 400);
  if (v72)
  {
    v73 = 0;
    v74 = v71 + 224;
    v75 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
    v94 = *(_QWORD *)(v1 + 1880);
    v96 = *(_QWORD *)(v71 + 392);
    v76 = *(_DWORD *)(v71 + 400);
    do
    {
      v77 = physx::Cm::FlushPool::allocate(v75, 64, 0x10u);
      v78 = (void (***)(UpdateArticulationTask *__hidden))v77;
      if (v76 >= 0x40)
        v79 = 64;
      else
        v79 = v76;
      v80 = *(_DWORD *)(v1 + 1984);
      *(_QWORD *)(v77 + 8) = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v77 + 16) = 0;
      *(_DWORD *)(v77 + 32) = 0;
      *(_QWORD *)v77 = &off_24ED8E8A8;
      *(_QWORD *)(v77 + 40) = v74;
      *(_QWORD *)(v77 + 48) = v96 + 4 * v73;
      *(_DWORD *)(v77 + 56) = v79;
      *(_DWORD *)(v77 + 60) = v80;
      *(_DWORD *)(v77 + 32) = 1;
      *(_QWORD *)(v77 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
        v78[2] = (void (**)(UpdateArticulationTask *__hidden))v78[3][2];
        v81 = *v78;
      }
      else
      {
        v81 = &off_24ED8E8A8;
      }
      v81[5]((UpdateArticulationTask *)v78);
      v73 += 64;
      v76 -= 64;
    }
    while (v73 < v72);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)(v1 + 1840) + 1760));
    v82 = 0;
    v83 = (_QWORD *)(*(_QWORD *)(v1 + 1848) + 224);
    v129 = 0u;
    v128 = 0u;
    v127 = 0u;
    v126 = 0u;
    v125 = 0u;
    v124 = 0u;
    v123 = 0u;
    v122 = 0u;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v112 = 0u;
    v111 = 0u;
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0u;
    v100 = 0u;
    if (v72 <= 1)
      v84 = 1;
    else
      v84 = v72;
    v99 = 0uLL;
    v98 = 0uLL;
    do
    {
      v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94 + 248)
                                  + (((unint64_t)*(unsigned int *)(v96 + 4 * v82) >> 2) & 0x3FFFFFE0)
                                  + 24)
                      + 24);
      v86 = *(unsigned int *)(v85 + 48);
      if ((_DWORD)v86)
      {
        v87 = 0;
        v88 = 0;
        v89 = 8 * v86;
        do
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v85 + 40) + v87);
          if ((*(_BYTE *)(*(_QWORD *)(v90 + 136) + 28) & 4) != 0)
            *((_QWORD *)&v98 + v88++) = v90;
          v87 += 8;
        }
        while (v89 != v87);
        if (v88)
        {
          v91 = v88;
          v92 = &v98;
          do
          {
            v93 = *(unsigned int *)(v1 + 2104);
            if ((*(_DWORD *)(v1 + 2108) & 0x7FFFFFFFu) <= v93)
            {
              physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(v1 + 2096, v92);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v1 + 2096) + 8 * v93) = *(_QWORD *)v92;
              *(_DWORD *)(v1 + 2104) = v93 + 1;
            }
            v92 = (__int128 *)((char *)v92 + 8);
            --v91;
          }
          while (v91);
        }
      }
      physx::Sc::ArticulationSim::markShapesUpdated(v85, v83);
      ++v82;
    }
    while (v82 != v84);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)(v1 + 1840) + 1760));
  }
  physx::Sc::Scene::checkForceThresholdContactEvents((physx::Sc::Scene *)v1, 0);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::runInternal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  unsigned int v18;
  pthread_mutex_t **v19;
  uint64_t v20;
  void (**v21)(ConstraintProjectionTask *__hidden);
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(ConstraintProjectionTask *__hidden);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v1 + 2052))
  {
    v2 = *(_QWORD *)(v1 + 1880);
    v3 = *(_DWORD *)(v2 + 384);
    if (v3)
    {
      v4 = *(_QWORD *)(result + 24);
      v5 = *(_QWORD *)(v2 + 376);
      result = physx::PxcScratchAllocator::alloc(*(pthread_mutex_t ***)(v1 + 1840), 8 * v3, 1);
      *(_QWORD *)(v1 + 7480) = result;
      if (result)
      {
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 248)
                                     + (((unint64_t)*(unsigned int *)(v5 + 4 * v6) >> 2) & 0x3FFFFFE0)
                                     + 24)
                         + 104);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            v10 = *(_QWORD *)(v9 + 8);
            if (v10 != v9)
            {
              v11 = 0;
              do
              {
                v9 = v10;
                v12 = v11;
                v10 = *(_QWORD *)(v10 + 8);
                ++v11;
              }
              while (v9 != v10);
              if (v11)
              {
                v13 = ~v12;
                do
                {
                  v14 = *(_QWORD *)(v8 + 8);
                  *(_QWORD *)(v8 + 8) = v9;
                  v8 = v14;
                }
                while (!__CFADD__(v13++, 1));
              }
            }
            v16 = *(_BYTE *)(v9 + 88);
            if ((v16 & 2) == 0 && *(_QWORD *)(v9 + 40))
            {
              *(_QWORD *)(*(_QWORD *)(v1 + 7480) + 8 * v7++) = v9;
              *(_BYTE *)(v9 + 88) = v16 | 2;
            }
          }
          ++v6;
          --v3;
        }
        while (v3);
        if (v7)
        {
          v17 = 0;
          v18 = 0;
          v19 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
          v20 = v1 + 2112;
          v21 = &off_24ED8E608;
          while (2)
          {
            v22 = 0;
            v23 = v17;
            while (1)
            {
              v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 7480) + 8 * v23) + 88);
              if ((v24 & 0x40) != 0)
              {
                v25 = 128;
              }
              else if ((v24 & 0x20) != 0)
              {
                v25 = 40;
              }
              else
              {
                v25 = (v24 & 0x10) != 0 ? 10 : (v24 >> 2) & 2;
              }
              v22 += v25;
              if (v22 >= 0x100)
                break;
              if (v7 == ++v23)
              {
                if (v22)
                {
                  v31 = physx::Cm::FlushPool::allocate(v19, 72, 0x10u);
                  v32 = *(_QWORD *)(v1 + 1840);
                  v33 = *(_QWORD *)(v1 + 7480) + 8 * v18;
                  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 2616);
                  *(_QWORD *)(v31 + 16) = 0;
                  *(_DWORD *)(v31 + 32) = 0;
                  *(_QWORD *)v31 = &off_24ED8E608;
                  *(_QWORD *)(v31 + 40) = v33;
                  *(_DWORD *)(v31 + 48) = v7 - v18;
                  *(_QWORD *)(v31 + 56) = v20;
                  *(_QWORD *)(v31 + 64) = v32;
                  *(_DWORD *)(v31 + 32) = 1;
                  *(_QWORD *)(v31 + 24) = v4;
                  if (v4)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
                    *(_QWORD *)(v31 + 16) = *(_QWORD *)(*(_QWORD *)(v31 + 24) + 16);
                    v21 = *(void (***)(ConstraintProjectionTask *__hidden))v31;
                  }
                  return ((uint64_t (*)(uint64_t))v21[5])(v31);
                }
                return result;
              }
            }
            v26 = physx::Cm::FlushPool::allocate(v19, 72, 0x10u);
            v27 = *(_QWORD *)(v1 + 1840);
            v28 = *(_QWORD *)(v1 + 7480) + 8 * v18;
            *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 2616);
            *(_QWORD *)(v26 + 16) = 0;
            *(_DWORD *)(v26 + 32) = 0;
            *(_QWORD *)v26 = &off_24ED8E608;
            *(_QWORD *)(v26 + 40) = v28;
            *(_DWORD *)(v26 + 48) = v23 - v18 + 1;
            *(_QWORD *)(v26 + 56) = v20;
            *(_QWORD *)(v26 + 64) = v27;
            *(_DWORD *)(v26 + 32) = 1;
            *(_QWORD *)(v26 + 24) = v4;
            if (v4)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
              *(_QWORD *)(v26 + 16) = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 16);
              v29 = *(void (***)(ConstraintProjectionTask *__hidden))v26;
            }
            else
            {
              v29 = &off_24ED8E608;
            }
            result = ((uint64_t (*)(uint64_t))v29[5])(v26);
            v17 = v23 + 1;
            v18 = v23 + 1;
            if (v7 - 1 != v23)
              continue;
            break;
          }
        }
      }
      else
      {
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 8))(physx::shdfnd::Foundation::mInstance);
        return (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)v30 + 16))(v30, 16, "List for collecting constraint projection roots could not be allocated. No projection will take place.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3432);
      }
    }
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  pthread_mutex_t **v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v1 + 1840);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1888) + 32))(*(_QWORD *)(v1 + 1888));
  physx::PxcNpMemBlockPool::releaseConstraintMemory(v3 + 40);
  physx::PxcNpMemBlockPool::release(v3 + 40, v3 + 40 + 16 * (1 - *(_DWORD *)(v3 + 220)) + 56, 0);
  *(_DWORD *)(v3 + 220) = 1 - *(_DWORD *)(v3 + 220);
  *(_DWORD *)(v1 + 2104) = 0;
  *(_DWORD *)(v1 + 2120) = 0;
  v4 = *(_QWORD *)(v1 + 1840);
  *(_DWORD *)(v4 + 2560) = *(_DWORD *)(v3 + 280);
  *(_DWORD *)(v1 + 5368) = 1;
  *(_QWORD *)(v1 + 5360) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *(_QWORD *)(v1 + 5352) = *(_QWORD *)(*(_QWORD *)(v1 + 5360) + 16);
    v4 = *(_QWORD *)(v1 + 1840);
  }
  v5 = *(_DWORD *)(v1 + 48);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(v1 + 32);
    v8 = *(pthread_mutex_t ***)(v4 + 1920);
    v9 = *(_DWORD *)(v1 + 48);
    do
    {
      v10 = physx::Cm::FlushPool::allocate(v8, 56, 0x10u);
      v11 = (_QWORD *)v10;
      if (v9 >= 0x400)
        v12 = 1024;
      else
        v12 = v9;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_QWORD *)v10 = &off_24ED8E528;
      *(_QWORD *)(v10 + 40) = v7 + 8 * v6;
      *(_DWORD *)(v10 + 48) = v12;
      *(_DWORD *)(v10 + 32) = 1;
      *(_QWORD *)(v10 + 24) = v1 + 5336;
      (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5336) + 32))(v1 + 5336);
      v11[2] = *(_QWORD *)(v11[3] + 16);
      (*(void (**)(_QWORD *))(*v11 + 40))(v11);
      v6 += 1024;
      v9 -= 1024;
    }
    while (v6 < v5);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5352) + 144))(*(_QWORD *)(v1 + 5352), v1 + 5336);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void (**v26)(ScBeforeSolverTask *__hidden);
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (**v36)(ScArticBeforeSolverTask *__hidden);
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  pthread_mutex_t **v40;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 1888) + 8) + 16) = 0;
  v3 = *(_QWORD *)(v1 + 1880);
  v4 = *(unsigned int *)(v3 + 384);
  *(_QWORD *)(v1 + 4704) = 0;
  v40 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 1904) + 248))(*(_QWORD *)(v1 + 1904), v4);
  v39 = *(_DWORD *)(v1 + 4268) & 8;
  v5 = *(_DWORD *)(v1 + 4424) & 0x7FFFFFFF;
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int **)(v1 + 4416);
    v7 = *v6;
    if (*v6)
    {
      v8 = 0;
LABEL_7:
      v9 = __clz(__rbit32(v7)) | (32 * v8);
      v10 = (v7 - 1) & v7;
      if (!v10)
      {
        v11 = v8;
        if ((int)v8 + 1 > v5)
          v8 = (v8 + 1);
        else
          v8 = v5;
        v12 = v11 + 1;
        while (v12 < v5)
        {
          v10 = v6[v12++];
          if (v10)
          {
            v8 = (v12 - 1);
            goto LABEL_16;
          }
        }
        v10 = 0;
      }
LABEL_16:
      while (v9 != -1)
      {
        v13 = physx::Cm::FlushPool::allocate(v40, 1096, 0x10u);
        v14 = *(_DWORD *)(v1 + 1984);
        v15 = *(_QWORD *)(v1 + 1880);
        v16 = *(_QWORD *)(v1 + 1904);
        v17 = *(_QWORD *)(v1 + 24);
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_DWORD *)(v13 + 32) = 0;
        *(_QWORD *)v13 = &off_24ED8E758;
        *(_QWORD *)(v13 + 8) = v17;
        memset_pattern16((void *)(v13 + 36), &unk_2261A7AC0, 0x400uLL);
        v18 = 0;
        *(_DWORD *)(v13 + 1064) = v14;
        *(_QWORD *)(v13 + 1072) = v15;
        *(_QWORD *)(v13 + 1080) = v16;
        *(_BYTE *)(v13 + 1088) = v39 >> 3;
        v19 = v8;
        v20 = v10;
        v21 = *(_QWORD *)(v3 + 248);
        while (1)
        {
          v22 = *(_QWORD *)(v21 + 32 * (v9 & 0x1FFFFFF) + 24);
          if (!v22
            || (v23 = v13 + 4 * v18,
                ++v18,
                *(_DWORD *)(v23 + 36) = v9 << 7,
                (*(char *)(*(_QWORD *)(v22 + 40) + 28) & 0x80000000) == 0))
          {
            *(_DWORD *)(*(_QWORD *)(v1 + 4416) + 4 * (v9 >> 5)) &= ~(1 << v9);
          }
          if (!v20)
            break;
          v10 = (v20 - 1) & v20;
          if (v10)
          {
            v8 = v19;
          }
          else
          {
            v24 = *(_DWORD *)(v1 + 4424) & 0x7FFFFFFF;
            if ((int)v19 + 1 > v24)
              v8 = (v19 + 1);
            else
              v8 = v24;
            LODWORD(v25) = v19;
            while ((_DWORD)v8 - 1 != (_DWORD)v25)
            {
              v25 = (v25 + 1);
              v10 = *(_DWORD *)(*(_QWORD *)(v1 + 4416) + 4 * v25);
              if (v10)
              {
                v8 = v25;
                goto LABEL_32;
              }
            }
            v10 = 0;
          }
LABEL_32:
          v9 = __clz(__rbit32(v20)) | (32 * v19);
          if (v18 <= 0xFF)
          {
            v19 = v8;
            v20 = v10;
            if (v9 != -1)
              continue;
          }
          goto LABEL_36;
        }
        v10 = 0;
        v9 = -1;
        v8 = v19;
LABEL_36:
        *(_DWORD *)(v13 + 1060) = v18;
        *(_DWORD *)(v13 + 32) = 1;
        *(_QWORD *)(v13 + 24) = v2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
          v26 = *(void (***)(ScBeforeSolverTask *__hidden))v13;
        }
        else
        {
          v26 = &off_24ED8E758;
        }
        v26[5]((ScBeforeSolverTask *)v13);
      }
    }
    else
    {
      v8 = 0;
      while (v5 - 1 != v8)
      {
        v7 = v6[++v8];
        if (v7)
          goto LABEL_7;
      }
    }
  }
  v27 = *(_DWORD *)(v3 + 400);
  if (v27)
  {
    v28 = 0;
    v29 = *(_QWORD *)(v3 + 392);
    v30 = *(_DWORD *)(v3 + 400);
    do
    {
      v31 = v30 - 32;
      if (v30 >= 0x20)
        v32 = 32;
      else
        v32 = v30;
      v33 = physx::Cm::FlushPool::allocate(v40, 72, 0x10u);
      v34 = *(_DWORD *)(v1 + 1984);
      v35 = *(_QWORD *)(v1 + 1880);
      *(_QWORD *)(v33 + 8) = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v33 + 16) = 0;
      *(_DWORD *)(v33 + 32) = 0;
      *(_QWORD *)v33 = &off_24ED8E7C8;
      *(_QWORD *)(v33 + 40) = v29 + 4 * v28;
      *(_DWORD *)(v33 + 48) = v32;
      *(_DWORD *)(v33 + 52) = v34;
      *(_QWORD *)(v33 + 56) = v35;
      *(_BYTE *)(v33 + 64) = v39 >> 3;
      *(_DWORD *)(v33 + 32) = 1;
      *(_QWORD *)(v33 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
        *(_QWORD *)(v33 + 16) = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 16);
        v36 = *(void (***)(ScArticBeforeSolverTask *__hidden))v33;
      }
      else
      {
        v36 = &off_24ED8E7C8;
      }
      v36[5]((ScArticBeforeSolverTask *)v33);
      v28 += 32;
      v30 = v31;
    }
    while (v28 < v27);
  }
  *(_DWORD *)(v1 + 1964) = 0;
  v37 = *(_QWORD *)(v1 + 1840);
  result = physx::PxcNpMemBlockPool::release(v37 + 40, v37 + 40 + 16 * (1 - *(_DWORD *)(v37 + 216)) + 88, 0);
  *(_DWORD *)(v37 + 216) = 1 - *(_DWORD *)(v37 + 216);
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::runInternal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 1904) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 1904), *(_QWORD *)(a1 + 24));
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::runInternal(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 1888) + 24))(*(_QWORD *)(v1 + 1888), *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 1904) + 144))(*(_QWORD *)(v1 + 1904), *(_QWORD *)(*(_QWORD *)(v1 + 1840) + 2592), *(_QWORD *)(v1 + 2064), *(_QWORD *)(v1 + 1848) + 224);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  void *v10;
  _QWORD v12[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  *(_DWORD *)(v1 + 5816) = 1;
  *(_QWORD *)(v1 + 5808) = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    *(_QWORD *)(v1 + 5800) = *(_QWORD *)(*(_QWORD *)(v1 + 5808) + 16);
  }
  *(_DWORD *)(v1 + 5760) = 1;
  *(_QWORD *)(v1 + 5752) = v1 + 5784;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5784) + 32))(v1 + 5784);
  *(_QWORD *)(v1 + 5744) = *(_QWORD *)(*(_QWORD *)(v1 + 5752) + 16);
  *(_DWORD *)(v1 + 5704) = 1;
  *(_QWORD *)(v1 + 5696) = v1 + 5728;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5728) + 32))(v1 + 5728);
  *(_QWORD *)(v1 + 5688) = *(_QWORD *)(*(_QWORD *)(v1 + 5696) + 16);
  physx::PxcNpMemBlockPool::acquireConstraintMemory((pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 40));
  v4 = *(_QWORD *)(v1 + 1840);
  v5 = *(_DWORD *)(v4 + 2608);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v4 + 1776) + 168))(v12);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 136))(*(_QWORD *)(*(_QWORD *)(v1 + 1840) + 1776));
  v7 = *(_QWORD *)(v1 + 1848);
  v8 = (*(_DWORD *)(*(_QWORD *)(v1 + 4296) + 8) + 31) >> 5;
  v9 = *(_DWORD *)(v7 + 232);
  v10 = *(void **)(v7 + 224);
  if (v8 > (v9 & 0x7FFFFFFFu))
  {
    if ((v9 & 0x80000000) == 0 && v10)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 240) + 24))(*(_QWORD *)(v7 + 240), *(_QWORD *)(v7 + 224));
    *(_DWORD *)(v7 + 232) = v8;
    v10 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(**(_QWORD **)(v7 + 240) + 16))(*(_QWORD *)(v7 + 240), 4 * v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 461);
    *(_QWORD *)(v7 + 224) = v10;
    v9 = *(_DWORD *)(v7 + 232);
  }
  bzero(v10, (4 * v9));
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float, int, _QWORD *, uint64_t, uint64_t, int))(**(_QWORD **)(v1 + 1888) + 8))(*(_QWORD *)(v1 + 1888), *(_QWORD *)(v1 + 1880), v2, v1 + 5672, *(_QWORD *)(v1 + 4464), *(unsigned int *)(v1 + 4472), *(_QWORD *)(v1 + 4480), *(unsigned int *)(v1 + 4488), *(float *)(v1 + 1984), v5, v12, v6, v1 + 1952, *(_DWORD *)(v7 + 232) & 0x7FFFFFFF);
  *(_DWORD *)(*(_QWORD *)(v1 + 1880) + 136) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5800) + 144))(*(_QWORD *)(v1 + 5800), v1 + 5784);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5744) + 144))(*(_QWORD *)(v1 + 5744), v1 + 5728);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5688) + 144))(*(_QWORD *)(v1 + 5688), v1 + 5672);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unint64_t *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v1 + 6040) = 1;
  *(_QWORD *)(v1 + 6032) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 6032) + 16);
    *(_QWORD *)(v1 + 6024) = v3;
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 6024);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(v3, v1 + 6008);
  *(_DWORD *)(v1 + 6096) = 1;
  *(_QWORD *)(v1 + 6088) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 6088) + 16);
    *(_QWORD *)(v1 + 6080) = v4;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 6080);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 144))(v4, v1 + 6064);
  v6 = *(_QWORD *)(v1 + 1848);
  v7 = *(_DWORD *)(v6 + 480);
  if (v7)
  {
    v8 = *(unint64_t **)(v6 + 472);
    v9 = *(_QWORD *)(v1 + 3992);
    do
    {
      --v7;
      result = physx::Sc::NPhaseCore::findInteraction(v9, *v8, v8[1]);
      v8[2] = result;
      v8 += 3;
    }
    while (v7);
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v1 + 5872) = 1;
  *(_QWORD *)(v1 + 5864) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *(_QWORD *)(v1 + 5856) = *(_QWORD *)(*(_QWORD *)(v1 + 5864) + 16);
  }
  *(_DWORD *)(v1 + 5928) = 1;
  *(_QWORD *)(v1 + 5920) = v1 + 5840;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5840) + 32))(v1 + 5840);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 5920) + 16);
  *(_QWORD *)(v1 + 5912) = v3;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(v3, v1 + 5896);
  *(_DWORD *)(v1 + 5984) = 1;
  *(_QWORD *)(v1 + 5976) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 5976) + 16);
    *(_QWORD *)(v1 + 5968) = v4;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 5968);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 144))(v4, v1 + 5952);
  v5 = *(_QWORD *)(v1 + 1848);
  v6 = *(_DWORD *)(v5 + 480);
  if (v6)
  {
    v7 = (uint64_t *)(*(_QWORD *)(v5 + 472) + 16);
    do
    {
      v8 = *v7;
      if (*v7)
      {
        if (!*(_BYTE *)(v8 + 36))
        {
          v9 = *(_DWORD *)(v8 + 96);
          if (v9 != -1)
          {
            physx::IG::SimpleIslandManager::removeConnection(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 72) + 1880), v9);
            *(_DWORD *)(v8 + 96) = -1;
          }
        }
      }
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5856) + 144))(*(_QWORD *)(v1 + 5856), v1 + 5840);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::runInternal(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_DWORD *)(v1 + 4268);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 168))(v12);
  v3 = *(_QWORD *)(v1 + 1848);
  v4 = *(_DWORD *)(v3 + 480);
  v5 = (v2 >> 3) & 1;
  if (v4)
  {
    v6 = *(_QWORD *)(v3 + 472);
    do
    {
      --v4;
      physx::Sc::NPhaseCore::onOverlapRemoved(*(_QWORD *)(v1 + 3992), *(_QWORD *)v6, *(_QWORD *)(v6 + 8), 0, *(_QWORD *)(v6 + 16), (uint64_t)v12, v5);
      v6 += 24;
    }
    while (v4);
  }
  v7 = *(_DWORD *)(v3 + 496);
  if (v7)
  {
    v8 = *(unint64_t **)(v3 + 488);
    do
    {
      --v7;
      v9 = *v8;
      v10 = v8[1];
      v8 += 3;
      physx::Sc::NPhaseCore::onOverlapRemoved(*(_QWORD *)(v1 + 3992), v9, v10, 0, 0, (uint64_t)v12, v5);
    }
    while (v7);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 392) + 160))(*(_QWORD *)(v3 + 392));
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 392) + 136))(*(_QWORD *)(v3 + 392));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6136) + 144))(*(_QWORD *)(v1 + 6136), v1 + 6120);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 5808);
  *(_DWORD *)(v1 + 6152) = 1;
  *(_QWORD *)(v1 + 6144) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *(_QWORD *)(v1 + 6136) = *(_QWORD *)(*(_QWORD *)(v1 + 6144) + 16);
  }
  physx::IG::SimpleIslandManager::thirdPassIslandGen(*(_QWORD *)(v1 + 1880), v1 + 6120);
  v3 = *(_QWORD *)(v1 + 1848);
  v4 = *(_DWORD *)(v3 + 480);
  if (v4)
  {
    v5 = (uint64_t *)(*(_QWORD *)(v3 + 472) + 16);
    do
    {
      v6 = *v5;
      if (*v5 && !*(_BYTE *)(v6 + 36))
      {
        if (*(_QWORD *)(v6 + 88))
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 72);
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 1840) + 1776) + 72))(*(_QWORD *)(*(_QWORD *)(v7 + 1840) + 1776));
          physx::PxsContext::destroyContactManager(*(_QWORD *)(v7 + 1840), *(_QWORD *)(v6 + 88));
          *(_QWORD *)(v6 + 88) = 0;
        }
      }
      v5 += 3;
      --v4;
    }
    while (v4);
  }
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  physx::Sc::ShapeInteraction **v4;
  int v5;
  physx::Sc::ShapeInteraction *v6;
  _QWORD v7[5];

  v1 = *(_QWORD *)(a1 + 40);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 168))(v7);
  v2 = *(_QWORD *)(v1 + 1848);
  v3 = *(_DWORD *)(v2 + 480);
  if (v3)
  {
    v4 = (physx::Sc::ShapeInteraction **)(*(_QWORD *)(v2 + 472) + 16);
    v5 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        if (!*((_BYTE *)v6 + 36))
          physx::Sc::NPhaseCore::lostTouchReports(*(_QWORD *)(v1 + 3992), v6, 4, 0, (uint64_t)v7, v5);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::runInternal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_QWORD *)(v1 + 1848);
  v3 = *(_DWORD *)(v2 + 480);
  if (v3)
  {
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 472) + 16);
    do
    {
      v5 = *v4;
      if (*v4 && (*(unsigned __int8 *)(v5 + 36) | 2) == 2)
      {
        physx::Sc::Scene::unregisterInteraction(v1, v5 + 8);
        v6 = *(_QWORD *)(v1 + 3992) + 3704;
        v7 = *(_QWORD *)(v5 + 40);
        v8 = *(_QWORD *)(v5 + 48);
        if (v7 <= v8)
          v9 = *(_QWORD *)(v5 + 40);
        else
          v9 = *(_QWORD *)(v5 + 48);
        if (v7 <= v8)
          v7 = *(_QWORD *)(v5 + 48);
        v10[0] = v9;
        v10[1] = v7;
        result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v6, v10);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::runInternal(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v1 + 4456))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      result = physx::IG::SimpleIslandManager::setEdgeDisconnected(*(_QWORD *)(v1 + 1880), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 4448) + v3) + 96));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(unsigned int *)(v1 + 4456));
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::runInternal(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  physx::Sc::BodySim *v7;
  physx::Sc::BodySim *v8;
  _QWORD v9[5];

  v1 = *(_QWORD *)(a1 + 40);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 168))(v9);
  if (*(_DWORD *)(v1 + 4456))
  {
    v3 = 0;
    v4 = 8;
    v5 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 4448) + v4);
      result = (_QWORD *)physx::Sc::ShapeInteraction::managerLostTouch((physx::Sc::ShapeInteraction *)v6, 0, 1, (uint64_t)v9, v5);
      if ((_DWORD)result && (*(_BYTE *)(v6 + 66) & 4) == 0)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 80) + 13) - 1 >= 2)
          v7 = 0;
        else
          v7 = *(physx::Sc::BodySim **)(*(_QWORD *)(v6 + 40) + 8);
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8) + 80) + 13) - 1 >= 2)
          v8 = 0;
        else
          v8 = *(physx::Sc::BodySim **)(*(_QWORD *)(v6 + 48) + 8);
        result = (_QWORD *)physx::Sc::Scene::addToLostTouchList(v1, v7, v8);
      }
      ++v3;
      v4 += 16;
    }
    while (v3 < *(unsigned int *)(v1 + 4456));
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::runInternal(uint64_t a1, physx::Sc::Interaction *a2, int8x8_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  physx::Sc::ArticulationSim *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  _QWORD v21[5];

  v3 = *(_QWORD **)(a1 + 40);
  v4 = v3[235];
  v5 = *(unsigned int *)(v4 + 576);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int **)(v4 + 568);
    do
    {
      v7 = *v6++;
      v8 = *(_QWORD *)(v4 + 248) + 32 * ((unint64_t)v7 >> 7);
      v9 = *(_QWORD *)(v8 + 24);
      if (v9 && (*(_BYTE *)(v8 + 4) & 2) == 0)
        physx::Sc::BodySim::setActive((physx::Sc::BodySim *)(v9 - 96), 0, 2, a3);
      --v5;
    }
    while (v5);
  }
  v10 = *(unsigned int *)(v4 + 592);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int **)(v4 + 584);
    do
    {
      v12 = *v11++;
      v13 = *(_QWORD *)(v4 + 248) + 32 * ((unint64_t)v12 >> 7);
      v14 = *(physx::Sc::ArticulationSim **)(*(_QWORD *)(v13 + 24) + 24);
      if (v14 && (*(_BYTE *)(v13 + 4) & 2) == 0)
        physx::Sc::ArticulationSim::setActive(v14, 0, 2, a3);
      --v10;
    }
    while (v10);
  }
  v15 = v3[235];
  v16 = *(unsigned int *)(v15 + 1440);
  if ((_DWORD)v16)
  {
    v17 = *(unsigned int **)(v15 + 1432);
    do
    {
      v19 = *v17++;
      v18 = v19;
      v20 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(v3[235] + 64) + 8 * (v19 / *(_DWORD *)(v3[235] + 88)))
                                + 8 * (v19 % *(_DWORD *)(v3[235] + 88)));
      if (v20
        && (v20[29] & 0x20) != 0
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 920) + 8 * (v18 / *(_DWORD *)(v15 + 944)))
                     + 16 * (v18 % *(_DWORD *)(v15 + 944))
                     + 4) & 4) == 0
        && physx::Sc::deactivateInteraction((physx::Sc *)v20, a2)
        && v20[28] <= 2u)
      {
        physx::Sc::Scene::notifyInteractionDeactivated((uint64_t)v3, (uint64_t)v20);
      }
      --v16;
    }
    while (v16);
  }
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v3[230] + 1776) + 168))(v21);
  physx::Sc::NPhaseCore::processPersistentContactEvents(v3[499], (uint64_t)v21);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::runInternal(uint64_t a1)
{
  return physx::Sc::NPhaseCore::processTriggerInteractions(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 3992), *(physx::PxBaseTask **)(a1 + 24));
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int8x8_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int32x2_t **v17;
  int v18;
  unsigned int v19;
  _QWORD v20[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v1 + 6488) = 1;
  *(_QWORD *)(v1 + 6480) = v1 + 5616;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5616) + 32))(v1 + 5616);
  *(_QWORD *)(v1 + 6472) = *(_QWORD *)(*(_QWORD *)(v1 + 6480) + 16);
  *(_DWORD *)(v1 + 6432) = 1;
  *(_QWORD *)(v1 + 6424) = v1 + 6456;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6456) + 32))(v1 + 6456);
  *(_QWORD *)(v1 + 6416) = *(_QWORD *)(*(_QWORD *)(v1 + 6424) + 16);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6472) + 144))(*(_QWORD *)(v1 + 6472), v1 + 6456);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6416) + 144))(*(_QWORD *)(v1 + 6416), v1 + 6400);
  v3 = *(_DWORD **)(v1 + 1840);
  LODWORD(v20[0]) = v3[435];
  v4 = v20[0];
  v5 = v3[434];
  v18 = 0;
  v19 = v5;
  *(_DWORD *)(v1 + 4440) = 0;
  if ((*(_DWORD *)(v1 + 4444) & 0x7FFFFFFFu) < v4)
    physx::shdfnd::Array<physx::PxvContactManagerTouchEvent,physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>>::recreate(v1 + 4432, v4);
  *(_DWORD *)(v1 + 4440) = v4;
  *(_DWORD *)(v1 + 4456) = 0;
  if ((*(_DWORD *)(v1 + 4460) & 0x7FFFFFFFu) < v5)
    physx::shdfnd::Array<physx::PxvContactManagerTouchEvent,physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>>::recreate(v1 + 4448, v5);
  *(_DWORD *)(v1 + 4456) = v5;
  physx::PxsContext::fillManagerTouchEvents((uint64_t)v3, *(char **)(v1 + 4432), v20, *(char **)(v1 + 4448), &v19, 0, &v18);
  v7 = v19;
  v6 = v20[0];
  *(_DWORD *)(v1 + 4440) = v20[0];
  *(_DWORD *)(v1 + 4456) = v7;
  v3[643] = v6;
  v3[644] = v7;
  *(_DWORD *)(v1 + 6376) = 1;
  *(_QWORD *)(v1 + 6368) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 6368) + 16);
    *(_QWORD *)(v1 + 6360) = v8;
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 6360);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 144))(v8, v1 + 6344);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 168))(v20);
  v10 = *(_DWORD *)(v1 + 4440);
  if (v10)
  {
    v11 = 0;
    v12 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
    v13 = *(_DWORD *)(v1 + 4440);
    do
    {
      if (v13 >= 0x100uLL)
        v14 = 256;
      else
        v14 = v13;
      v15 = v10 - v11;
      if (v10 - v11 >= 0x100)
        v15 = 256;
      if (v15)
      {
        v16 = (16 * v11) | 8;
        do
        {
          v17 = *(int32x2_t ***)(*(_QWORD *)(v1 + 4432) + v16);
          physx::Sc::NPhaseCore::managerNewTouch(*(int32x2_t **)(v1 + 3992), v17, v9);
          physx::Sc::ShapeInteraction::managerNewTouch((physx::Sc::ShapeInteraction *)v17, 0, 1, (uint64_t)v20, v12);
          v16 += 16;
          --v14;
        }
        while (v14);
      }
      v11 += 256;
      v13 -= 256;
    }
    while (v11 < v10);
  }
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void (**v48)(SpeculativeCCDContactDistanceArticulationUpdateTask *__hidden);
  int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  pthread_mutex_t **v70;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  v70 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
  v3 = *(_DWORD *)(v1 + 7624);
  v4 = v3 & 0x7FFFFFFF;
  if ((v3 & 0x7FFFFFFF) != 0)
  {
    v5 = *(unsigned int **)(v1 + 7616);
    v6 = *v5;
    if (*v5)
    {
      LODWORD(v4) = 0;
      goto LABEL_9;
    }
    v7 = 0;
    v8 = v5 + 1;
    while (v4 - 1 != v7)
    {
      v6 = v8[v7++];
      if (v6)
      {
        LODWORD(v4) = v7;
        goto LABEL_9;
      }
    }
  }
  v6 = 0;
LABEL_9:
  v9 = physx::Cm::FlushPool::allocate(v70, 1096, 0x10u);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 2072) + 8);
  v12 = *(_DWORD *)(v1 + 1984);
  v13 = *(_QWORD *)(v1 + 2064);
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)v9 = &off_24ED8E368;
  *(_QWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v9 + 40) = v11;
  *(_DWORD *)(v9 + 48) = v12;
  *(_DWORD *)(v9 + 1080) = 0;
  *(_QWORD *)(v9 + 1088) = v13;
  v14 = *(_QWORD *)(v1 + 1880);
  v15 = (_QWORD *)(*(_QWORD *)(v1 + 1848) + 224);
  v16 = *(_BYTE *)(v1 + 2080) != 0;
  if (v6)
  {
    v17 = v9;
    do
    {
      v18 = v6;
      v19 = v4;
      v6 &= v6 - 1;
      if (!v6)
      {
        if ((int)v4 + 1 > (*(_DWORD *)(v1 + 7624) & 0x7FFFFFFFu))
          LODWORD(v4) = v4 + 1;
        else
          LODWORD(v4) = *(_DWORD *)(v1 + 7624) & 0x7FFFFFFF;
        v20 = v19;
        while ((_DWORD)v4 - 1 != v20)
        {
          v6 = *(_DWORD *)(*(_QWORD *)(v1 + 7616) + 4 * ++v20);
          if (v6)
          {
            LODWORD(v4) = v20;
            goto LABEL_20;
          }
        }
        v6 = 0;
      }
LABEL_20:
      v21 = __clz(__rbit32(v18)) | (32 * v19);
      if (v21 == -1)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v14 + 248) + 32 * (v21 & 0x1FFFFFF) + 24);
      if (v22)
      {
        v23 = *(unsigned int *)(v17 + 1080);
        v24 = v23 + 1;
        *(_DWORD *)(v17 + 1080) = v23 + 1;
        *(_QWORD *)(v17 + 8 * v23 + 56) = v22 - 96;
        v25 = *(uint64_t ***)(v22 - 40);
        if (v25)
        {
          do
          {
            if ((v25[7][8] & 1) != 0)
            {
              v26 = *((unsigned int *)v25 + 4);
              physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v15, (v26 & 0x7FFFFFFF) + 1);
              *(_DWORD *)(*v15 + ((v26 >> 3) & 0xFFFFFFC)) |= 1 << v26;
            }
            v25 = (uint64_t **)*v25;
          }
          while (v25);
          v24 = *(_DWORD *)(v17 + 1080);
        }
        if (v24 == 128)
        {
          *(_DWORD *)(v17 + 32) = 1;
          *(_QWORD *)(v17 + 24) = v2;
          if (v2)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
            *(_QWORD *)(v17 + 16) = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16);
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          v17 = physx::Cm::FlushPool::allocate(v70, 1096, 0x10u);
          v27 = *(_QWORD *)(v1 + 24);
          v28 = *(_QWORD *)(*(_QWORD *)(v1 + 2072) + 8);
          v29 = *(_DWORD *)(v1 + 1984);
          v30 = *(_QWORD *)(v1 + 2064);
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 24) = 0;
          *(_DWORD *)(v17 + 32) = 0;
          *(_QWORD *)v17 = &off_24ED8E368;
          *(_QWORD *)(v17 + 8) = v27;
          *(_QWORD *)(v17 + 40) = v28;
          *(_DWORD *)(v17 + 48) = v29;
          *(_DWORD *)(v17 + 1080) = 0;
          *(_QWORD *)(v17 + 1088) = v30;
        }
        v16 = 1;
      }
    }
    while (v6);
    if (*(_DWORD *)(v17 + 1080))
    {
      *(_DWORD *)(v17 + 32) = 1;
      *(_QWORD *)(v17 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    }
  }
  v31 = *(_DWORD *)(v1 + 7640);
  v32 = v31 & 0x7FFFFFFF;
  if ((v31 & 0x7FFFFFFF) != 0)
  {
    v33 = *(unsigned int **)(v1 + 7632);
    v34 = *v33;
    if (*v33)
    {
      v35 = 0;
      do
      {
LABEL_43:
        v38 = (v34 - 1) & v34;
        if (v38)
        {
          v39 = v35;
        }
        else
        {
          v40 = *(_DWORD *)(v1 + 7640) & 0x7FFFFFFF;
          if ((int)v35 + 1 > v40)
            v39 = (v35 + 1);
          else
            v39 = v40;
          LODWORD(v41) = v35;
          while ((_DWORD)v39 - 1 != (_DWORD)v41)
          {
            v41 = (v41 + 1);
            v38 = *(_DWORD *)(*(_QWORD *)(v1 + 7632) + 4 * v41);
            if (v38)
            {
              v39 = v41;
              goto LABEL_53;
            }
          }
          v38 = 0;
        }
LABEL_53:
        v42 = __clz(__rbit32(v34)) | (32 * v35);
        if (v42 == -1)
          break;
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 248) + 32 * (v42 & 0x1FFFFFF) + 24) + 24);
        if (v43)
        {
          v44 = physx::Cm::FlushPool::allocate(v70, 72, 0x10u);
          v45 = *(_QWORD *)(*(_QWORD *)(v1 + 2072) + 8);
          v46 = *(_DWORD *)(v1 + 1984);
          v47 = *(_QWORD *)(v1 + 2064);
          *(_QWORD *)(v44 + 8) = *(_QWORD *)(v1 + 24);
          *(_QWORD *)(v44 + 16) = 0;
          *(_DWORD *)(v44 + 32) = 0;
          *(_QWORD *)v44 = &off_24ED8E3D8;
          *(_QWORD *)(v44 + 40) = v45;
          *(_DWORD *)(v44 + 48) = v46;
          *(_QWORD *)(v44 + 56) = v43;
          *(_QWORD *)(v44 + 64) = v47;
          *(_DWORD *)(v44 + 32) = 1;
          *(_QWORD *)(v44 + 24) = v2;
          if (v2)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
            *(_QWORD *)(v44 + 16) = *(_QWORD *)(*(_QWORD *)(v44 + 24) + 16);
            v48 = *(void (***)(SpeculativeCCDContactDistanceArticulationUpdateTask *__hidden))v44;
          }
          else
          {
            v48 = &off_24ED8E3D8;
          }
          v48[5]((SpeculativeCCDContactDistanceArticulationUpdateTask *)v44);
          v16 = 1;
        }
        v34 = v38;
        v35 = v39;
      }
      while (v38);
    }
    else
    {
      v35 = 0;
      v36 = v33 + 1;
      v37 = v32 - 1;
      while (v37 != v35)
      {
        v34 = v36[v35++];
        if (v34)
          goto LABEL_43;
      }
    }
  }
  *(_BYTE *)(v1 + 2080) = v16;
  v49 = *(_DWORD *)(v1 + 4520);
  v50 = v49 & 0x7FFFFFFF;
  if ((v49 & 0x7FFFFFFF) != 0)
  {
    v51 = *(unsigned int **)(v1 + 4512);
    v52 = *v51;
    if (*v51)
    {
      LODWORD(v50) = 0;
      goto LABEL_68;
    }
    v53 = 0;
    v54 = v51 + 1;
    while (v50 - 1 != v53)
    {
      v52 = v54[v53++];
      if (v52)
      {
        LODWORD(v50) = v53;
        goto LABEL_68;
      }
    }
  }
  v52 = 0;
LABEL_68:
  v55 = *(_QWORD *)(*(_QWORD *)(v1 + 1840) + 2592);
  v56 = *(_QWORD *)(*(_QWORD *)(v1 + 1848) + 400);
  v57 = physx::Cm::FlushPool::allocate(v70, 2112, 0x10u);
  v58 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v57 + 16) = 0;
  *(_QWORD *)(v57 + 24) = 0;
  *(_DWORD *)(v57 + 32) = 0;
  *(_QWORD *)v57 = &off_24ED8E448;
  *(_QWORD *)(v57 + 8) = v58;
  v69 = v55;
  *(_QWORD *)(v57 + 40) = v55;
  *(_QWORD *)(v57 + 48) = v56;
  *(_DWORD *)(v57 + 2104) = 0;
  if (v52)
  {
    v59 = 0;
    do
    {
      v60 = v50;
      v61 = v52;
      v52 &= v52 - 1;
      if (!v52)
      {
        if ((int)v50 + 1 > (*(_DWORD *)(v1 + 4520) & 0x7FFFFFFFu))
          LODWORD(v50) = v50 + 1;
        else
          LODWORD(v50) = *(_DWORD *)(v1 + 4520) & 0x7FFFFFFF;
        v62 = v60;
        while ((_DWORD)v50 - 1 != v62)
        {
          v52 = *(_DWORD *)(*(_QWORD *)(v1 + 4512) + 4 * ++v62);
          if (v52)
          {
            LODWORD(v50) = v62;
            goto LABEL_79;
          }
        }
        v52 = 0;
      }
LABEL_79:
      v63 = __clz(__rbit32(v61));
      v64 = v63 | (32 * v60);
      if (v64 == -1)
        break;
      v65 = *(_QWORD *)(v1 + 1848);
      if (*(_DWORD *)(v65 + 296) > v64)
      {
        v66 = *(_QWORD *)(*(_QWORD *)(v65 + 288) + 16 * (v63 | (32 * v60))) & 0xFFFFFFFFFFFFFFFCLL;
        if (v66)
        {
          physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v15, v64 + 1);
          v59 = 1;
          *(_DWORD *)(*v15 + 4 * (v60 & 0x7FFFFFF)) |= 1 << v63;
          v67 = *(unsigned int *)(v57 + 2104);
          *(_DWORD *)(v57 + 2104) = v67 + 1;
          *(_QWORD *)(v57 + 8 * v67 + 56) = v66;
          if ((_DWORD)v67 == 255)
          {
            *(_DWORD *)(v57 + 32) = 1;
            *(_QWORD *)(v57 + 24) = v2;
            if (v2)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
              *(_QWORD *)(v57 + 16) = *(_QWORD *)(*(_QWORD *)(v57 + 24) + 16);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
            v57 = physx::Cm::FlushPool::allocate(v70, 2112, 0x10u);
            v68 = *(_QWORD *)(v1 + 24);
            *(_QWORD *)(v57 + 16) = 0;
            *(_QWORD *)(v57 + 24) = 0;
            *(_DWORD *)(v57 + 32) = 0;
            *(_QWORD *)v57 = &off_24ED8E448;
            *(_QWORD *)(v57 + 8) = v68;
            *(_QWORD *)(v57 + 40) = v69;
            *(_QWORD *)(v57 + 48) = v56;
            *(_DWORD *)(v57 + 2104) = 0;
            v59 = 1;
          }
        }
      }
    }
    while (v52);
    if ((v59 & 1) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(v1 + 2064) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 1840) + 2592) + 28) = 1;
    }
  }
  if (*(_DWORD *)(v57 + 2104))
  {
    *(_DWORD *)(v57 + 32) = 1;
    *(_QWORD *)(v57 + 24) = v2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
      *(_QWORD *)(v57 + 16) = *(_QWORD *)(*(_QWORD *)(v57 + 24) + 16);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
  }
  bzero(*(void **)(v1 + 4512), (4 * *(_DWORD *)(v1 + 4520)));
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::runInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  physx::Sc::ArticulationSim *v23;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned int *)(v3 + 4440);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 16 * v4;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 4432) + v5 + 8);
      if ((*(_BYTE *)(v7 + 66) & 4) == 0)
        physx::IG::SimpleIslandManager::setEdgeConnected(*(_QWORD **)(v3 + 1880), *(unsigned int *)(v7 + 96), a3);
      v5 += 16;
    }
    while (v6 != v5);
  }
  physx::IG::SimpleIslandManager::secondPassIslandGen(*(physx::IG::SimpleIslandManager **)(v3 + 1880));
  v9 = *(_QWORD *)(v3 + 1880);
  v10 = *(_DWORD *)(v9 + 384);
  v11 = *(unsigned int *)(v9 + 560);
  v12 = (v10 - v11);
  if (v10 != (_DWORD)v11)
  {
    v13 = (unsigned int *)(*(_QWORD *)(v9 + 376) + 4 * v11);
    do
    {
      v14 = *v13++;
      v15 = *(_QWORD *)(v9 + 248) + 32 * ((unint64_t)v14 >> 7);
      v16 = *(_QWORD *)(v15 + 24);
      if (v16 && (*(_BYTE *)(v15 + 4) & 2) != 0)
        physx::Sc::BodySim::setActive((physx::Sc::BodySim *)(v16 - 96), (physx::Sc::Interaction *)1, 2, v8);
      --v12;
    }
    while (v12);
  }
  v17 = *(_DWORD *)(v9 + 400);
  v18 = *(unsigned int *)(v9 + 564);
  v19 = (v17 - v18);
  if (v17 != (_DWORD)v18)
  {
    v20 = (unsigned int *)(*(_QWORD *)(v9 + 392) + 4 * v18);
    do
    {
      v21 = *v20++;
      v22 = *(_QWORD *)(v9 + 248) + 32 * ((unint64_t)v21 >> 7);
      v23 = *(physx::Sc::ArticulationSim **)(*(_QWORD *)(v22 + 24) + 24);
      if (v23)
      {
        if ((*(_BYTE *)(v22 + 4) & 2) != 0)
          physx::Sc::ArticulationSim::setActive(v23, (physx::Sc::Interaction *)1, 2, v8);
      }
      --v19;
    }
    while (v19);
  }
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 1840);
  v3 = *(_DWORD *)(v2 + 1748);
  v6 = *(_DWORD *)(v2 + 1752);
  v4 = v6;
  v7 = v3;
  *(_DWORD *)(v1 + 4472) = 0;
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::resizeUninitialized(v1 + 4464, v3);
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 4464, *(_DWORD *)(v1 + 4472));
  *(_DWORD *)(v1 + 4488) = 0;
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::resizeUninitialized(v1 + 4480, v4);
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 4480, *(_DWORD *)(v1 + 4488));
  result = physx::PxsContext::fillManagerPatchChangedEvents(*(_QWORD *)(v1 + 1840), *(uint64_t **)(v1 + 4464), &v7, *(uint64_t **)(v1 + 4480), &v6);
  *(_DWORD *)(v1 + 4472) = v7;
  *(_DWORD *)(v1 + 4488) = v6;
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::runInternal(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 40);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 168))(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v1 + 1888) + 16))(*(_QWORD *)(v1 + 1888), *(_QWORD *)(v1 + 1880), *(_QWORD *)(v1 + 4480), *(unsigned int *)(v1 + 4488), v3);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)(a1 + 24);
  *(_DWORD *)(v1 + 1876) = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 6952));
  v3 = (unsigned int *)(v1 + 6816);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(v1 + 6808) = v2[2];
  v8 = v2;
  v5 = *(unsigned int *)(v1 + 6880);
  if ((*(_DWORD *)(v1 + 6884) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 6832, &v8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 6872) + 8 * v5) = v2;
    *(_DWORD *)(v1 + 6880) = v5 + 1;
  }
  (*(void (**)(_QWORD *))(*v2 + 32))(v2);
  *(_BYTE *)(v1 + 6944) = 1;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 6952));
  *(_DWORD *)(v1 + 6768) = 1;
  *(_QWORD *)(v1 + 6760) = v1 + 6792;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6792) + 32))(v1 + 6792);
  *(_QWORD *)(v1 + 6752) = *(_QWORD *)(*(_QWORD *)(v1 + 6760) + 16);
  *(_DWORD *)(v1 + 6712) = 1;
  *(_QWORD *)(v1 + 6704) = v1 + 6736;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6736) + 32))(v1 + 6736);
  *(_QWORD *)(v1 + 6696) = *(_QWORD *)(*(_QWORD *)(v1 + 6704) + 16);
  *(_DWORD *)(v1 + 6656) = 1;
  *(_QWORD *)(v1 + 6648) = v1 + 6680;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6680) + 32))(v1 + 6680);
  *(_QWORD *)(v1 + 6640) = *(_QWORD *)(*(_QWORD *)(v1 + 6648) + 16);
  *(_DWORD *)(v1 + 7280) = 1;
  *(_QWORD *)(v1 + 7272) = v1 + 6624;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6624) + 32))(v1 + 6624);
  *(_QWORD *)(v1 + 7264) = *(_QWORD *)(*(_QWORD *)(v1 + 7272) + 16);
  *(_DWORD *)(v1 + 6600) = 1;
  *(_QWORD *)(v1 + 6592) = v2;
  (*(void (**)(_QWORD *))(*v2 + 32))(v2);
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 6592) + 16);
  *(_QWORD *)(v1 + 6584) = v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 152))(v6, v1 + 6568);
  physx::PxsContext::resetThreadContexts(*(physx::PxsContext **)(v1 + 1840));
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD *, uint64_t, float))(**(_QWORD **)(*(_QWORD *)(v1 + 1840)
                                                                                         + 1776)
                                                                           + 24))(*(_QWORD *)(*(_QWORD *)(v1 + 1840) + 1776), *(unsigned __int8 *)(*(_QWORD *)(v1 + 2064) + 24), *(unsigned __int8 *)(v1 + 2080), v2, v1 + 6568, *(float *)(v1 + 1984));
  physx::Cm::FanoutTask::removeReference(v1 + 6792);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6752) + 144))(*(_QWORD *)(v1 + 6752), v1 + 6736);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6696) + 144))(*(_QWORD *)(v1 + 6696), v1 + 6680);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6640) + 144))(*(_QWORD *)(v1 + 6640), v1 + 6624);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 7264) + 144))(*(_QWORD *)(v1 + 7264), v1 + 7248);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 1840) + 1776);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  physx::PxBaseTask *v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(physx::PxBaseTask **)(a1 + 24);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 1840) + 1776) + 32))(*(_QWORD *)(*(_QWORD *)(v1 + 1840) + 1776));
  physx::Bp::AABBManager::postBroadPhase(*(physx::Bp::AABBManager **)(v1 + 1848), v2, (physx::PxBaseTask *)(v1 + 6568), *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920));
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::runInternal(uint64_t a1)
{
  physx::Sc::Scene *v1;
  physx::PxBaseTask *v2;

  v1 = *(physx::Sc::Scene **)(a1 + 40);
  v2 = *(physx::PxBaseTask **)(a1 + 24);
  bzero(*(void **)(*((_QWORD *)v1 + 231) + 224), (4 * *(_DWORD *)(*((_QWORD *)v1 + 231) + 232)));
  return physx::Sc::Scene::finishBroadPhase(v1, v2);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::postBroadPhaseStage2(*(physx::Sc::Scene **)(a1 + 40), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage3>::~DelegateFanoutTask(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(_BYTE *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return a1;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED8EB48;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    v5 = *(_QWORD *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(_BYTE *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

void physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage3>::runInternal(uint64_t a1)
{
  physx::Sc::Scene *v1;

  v1 = *(physx::Sc::Scene **)(a1 + 168);
  *(_DWORD *)(*((_QWORD *)v1 + 230) + 2568) += *(_DWORD *)(*((_QWORD *)v1 + 231) + 480)
                                               + *(_DWORD *)(*((_QWORD *)v1 + 231) + 496);
  physx::Sc::Scene::processLostTouchPairs(v1);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t i;
  unsigned int j;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  pthread_mutex_t **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD v56[2];
  _QWORD v57[2];
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(a1 + 40);
  v49 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 1848) + 440);
  v3 = *(_QWORD *)(v1 + 7600);
  v4 = *(_QWORD *)(v1 + 7592);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v50 = *(_QWORD *)(*(_QWORD *)(v1 + 1848) + 440);
    v51 = *(_QWORD *)(a1 + 40);
    do
    {
      if (*(_DWORD *)(v4 + 208))
      {
        v52 = v5;
        v54 = v6;
        v7 = 0;
        v8 = *(_QWORD *)(*(_QWORD *)(v1 + 3992) + 152);
        v9 = *(_QWORD *)(v1 + 4000);
        v57[0] = *(_QWORD *)(v1 + 4016);
        v57[1] = v9;
        v58 = *(_DWORD *)(v1 + 4008);
        v59 = *(_QWORD *)(v1 + 4024);
        v60 = v8;
        v61 = *(_QWORD *)(v1 + 4032);
        do
        {
          v10 = v4 + 4 * v7;
          v11 = *(_DWORD *)(v10 + 124);
          if (v11)
          {
            v12 = (_DWORD *)(v10 + 60);
            v13 = 32 * v7;
            do
            {
              v14 = __clz(__rbit32(v11));
              v15 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 24 * (v14 | v13));
              v16 = *v15;
              v17 = v15[1];
              v18 = *(_QWORD *)(*v15 + 8);
              if (*(unsigned __int8 *)(*(_QWORD *)(v18 + 80) + 13) - 1 >= 2)
                v19 = 0;
              else
                v19 = v18;
              if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 80) + 13) - 1 >= 2)
                v20 = 0;
              else
                v20 = *(_QWORD *)(v17 + 8);
              physx::Sc::filterRbCollisionPairSecondStage((uint64_t)v57, v16, v17, v19, v20, 0xFFFFFFFFLL, 1, (unsigned __int16 *)v56);
              v21 = (_DWORD *)(*(_QWORD *)(v4 + 192) + 8 * (v14 | v13));
              *v21 = v56[0];
              v21[1] = v56[1];
              if ((v56[0] & 1) == 0)
              {
                if ((v56[0] & 2) != 0)
                  ++*(_DWORD *)(v4 + 204);
                else
                  ++*(_DWORD *)(v4 + 200);
                *v12 |= 1 << v14;
              }
              v11 &= v11 - 1;
            }
            while (v11);
          }
          ++v7;
        }
        while (v7 != 16);
        v2 = v50;
        v1 = v51;
        v6 = v54;
        v5 = v52;
      }
      v5 += *(_DWORD *)(v4 + 200);
      v6 += *(_DWORD *)(v4 + 204);
      v4 = *(_QWORD *)(v4 + 216);
    }
    while (v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 7544, *(_DWORD *)(v1 + 7552));
  physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate(v1 + 7560, *(_DWORD *)(v1 + 7568));
  physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate(v1 + 7576, *(_DWORD *)(v1 + 7584));
  if ((*(_DWORD *)(v1 + 7556) & 0x7FFFFFFFu) < v5 + 1)
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 7544, v5 + 1);
  if ((*(_DWORD *)(v1 + 7572) & 0x7FFFFFFFu) < v5 + 1)
    physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate(v1 + 7560, v5 + 1);
  if ((*(_DWORD *)(v1 + 7588) & 0x7FFFFFFFu) < v6 + 1)
    physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate(v1 + 7576, v6 + 1);
  *(_DWORD *)(v1 + 7552) = v5;
  *(_DWORD *)(v1 + 7568) = v5;
  *(_DWORD *)(v1 + 7584) = v6;
  v22 = *(_QWORD *)(v1 + 7544);
  v23 = *(_QWORD *)(v1 + 7560);
  v24 = *(_QWORD *)(v1 + 7576);
  v48 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
  result = physx::Cm::FlushPool::allocate(v48, 96, 0x10u);
  v26 = *(_QWORD *)(v1 + 24);
  v27 = *(_QWORD *)(v1 + 3992);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_24ED8E988;
  *(_QWORD *)(result + 8) = v26;
  *(_QWORD *)(result + 40) = v27;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 64) = v22;
  v53 = v22;
  v55 = v24;
  *(_QWORD *)(result + 72) = v23;
  *(_QWORD *)(result + 80) = v24;
  *(_DWORD *)(result + 88) = 0;
  LODWORD(v57[0]) = 0;
  v56[0] = 0;
  v28 = *(_QWORD *)(v1 + 7592);
  if (v28)
  {
    v29 = result;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (2)
    {
      v34 = 0;
      while (1)
      {
        if (*(_DWORD *)(v28 + 200) || *(_DWORD *)(v28 + 204))
        {
          for (i = 0; i != 16; ++i)
          {
            for (j = *(_DWORD *)(v28 + 4 * i + 60); j; j &= j - 1)
            {
              v37 = __clz(__rbit32(j)) | (32 * i);
              if (v33 < v37 + v30)
              {
                v38 = *(_QWORD *)(v28 + 48) + 24 * v37;
                v39 = v2 + 24 * v33;
                v40 = *(_OWORD *)v38;
                *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
                *(_OWORD *)v39 = v40;
                v41 = (_DWORD *)(*(_QWORD *)(v28 + 192) + 8 * v37);
                v42 = (_DWORD *)(v3 + 8 * v33);
                *v42 = *v41;
                v42[1] = v41[1];
              }
              ++v33;
              ++v34;
            }
          }
          v32 += *(_DWORD *)(v28 + 204);
          v31 += *(_DWORD *)(v28 + 200);
          if (v34 > 0xFF)
            break;
        }
        v30 += 512;
        v28 = *(_QWORD *)(v28 + 216);
        if (!v28)
        {
          if (v34)
            return physx::Sc::Scene::preallocateContactManagers(physx::PxBaseTask *)::Local::processBatch(v31, v56, v32, v57, v34, *(_QWORD *)(v1 + 1840), *(_QWORD *)(v1 + 3992), v29, v49, v53, v23, v55);
          return result;
        }
      }
      physx::Sc::Scene::preallocateContactManagers(physx::PxBaseTask *)::Local::processBatch(v31, v56, v32, v57, v34, *(_QWORD *)(v1 + 1840), *(_QWORD *)(v1 + 3992), v29, v49, v53, v23, v55);
      result = physx::Cm::FlushPool::allocate(v48, 96, 0x10u);
      v29 = result;
      v43 = *(_QWORD *)(v1 + 24);
      v44 = *(_QWORD *)(v1 + 3992);
      v45 = v53 + 8 * v56[0];
      v46 = v23 + 8 * v56[0];
      v47 = v55 + 8 * LODWORD(v57[0]);
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = 0;
      *(_QWORD *)result = &off_24ED8E988;
      *(_QWORD *)(result + 8) = v43;
      *(_QWORD *)(result + 40) = v44;
      *(_QWORD *)(result + 48) = v2 + 24 * v33;
      *(_QWORD *)(result + 56) = v3 + 8 * v33;
      *(_QWORD *)(result + 64) = v45;
      *(_QWORD *)(result + 72) = v46;
      *(_QWORD *)(result + 80) = v47;
      *(_DWORD *)(result + 88) = 0;
      v30 += 512;
      v28 = *(_QWORD *)(v28 + 216);
      if (v28)
        continue;
      break;
    }
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(unsigned int *)(v1 + 7568);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 7560) + v3);
      if ((v5 & 1) != 0)
      {
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 48);
        v8 = *(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 40) + 8);
        if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 80) + 13) - 1 >= 2)
          v8 = 0;
        v9 = *(_QWORD *)(v7 + 8);
        if (v9)
          v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 80) + 13) - 3 >= 0xFFFFFFFE;
        else
          v10 = 0;
        if (v10)
          v11 = *(_DWORD *)(v9 + 176);
        else
          v11 = -128;
        v12 = *(_QWORD *)(v6 + 88);
        if (v6)
          v13 = v6 + 8;
        else
          v13 = 0;
        v14 = physx::IG::SimpleIslandManager::addContactManager(*(_QWORD *)(v1 + 1880), *(_QWORD *)(v6 + 88), *(unsigned int *)(v8 + 176), v11, v13);
        *(_DWORD *)(v6 + 96) = v14;
        if (v12)
          *(_DWORD *)(v12 + 104) = v14;
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  if (!*(_DWORD *)(v1 + 1876))
    physx::IG::SimpleIslandManager::firstPassIslandGen(*(physx::IG::SimpleIslandManager **)(v1 + 1880));
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 1840) + 1776);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  v3 = *(unsigned int *)(v1 + 7552);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 7544) + v4);
      if ((v6 & 1) != 0)
        (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 56))(v2, v6 & 0xFFFFFFFFFFFFFFFELL, 0, 0);
      v4 += 8;
    }
    while (v5 != v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 216))(v2);
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

physx::Sc::Scene **physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::runInternal(physx::Sc::Scene **result, int8x8_t a2, uint64_t a3, void *a4)
{
  physx::Sc::Scene *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  physx::Sc::ActorSim *v12;
  physx::Sc::ActorSim *v13;
  physx::Sc::Interaction *v14;
  physx::Sc::ActorSim *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  physx::Sc *v22;

  v4 = result[5];
  v5 = *((unsigned int *)v4 + 1892);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)v4 + 945) + v6);
      if ((v8 & 1) != 0)
      {
        v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
        v9 = v10 == 0;
        v13 = *(physx::Sc::ActorSim **)(v10 + 8);
        v12 = *(physx::Sc::ActorSim **)(v10 + 16);
        v11 = v10 + 8;
        v14 = v9 ? 0 : (physx::Sc::Interaction *)v11;
        physx::Sc::ActorSim::registerInteractionInActor(v13, v14);
        result = physx::Sc::ActorSim::registerInteractionInActor(v12, v14);
        v15 = *(unsigned __int8 *)(*((_QWORD *)v13 + 10) + 13) - 1 >= 2 ? 0 : v13;
        v16 = *(unsigned __int8 *)(*((_QWORD *)v12 + 10) + 13) - 1;
        ++*(_DWORD *)(*((_QWORD *)v15 + 17) + 148);
        if (v16 <= 1)
          ++*(_DWORD *)(*((_QWORD *)v12 + 17) + 148);
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  v17 = *((unsigned int *)v4 + 1896);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 8 * v17;
    do
    {
      v20 = *(_QWORD *)(*((_QWORD *)v4 + 947) + v18);
      if ((v20 & 1) != 0)
      {
        v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
        v22 = (physx::Sc *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8);
        physx::Sc::activateInteraction(v22, 0, a4, a2);
        physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)(v21 + 8), v22);
        result = physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)(v21 + 16), v22);
      }
      v18 += 8;
    }
    while (v19 != v18);
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v8;
  physx::Sc::Interaction *v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  physx::Sc::Interaction *v24;
  int8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(unsigned int *)(v1 + 7568);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 7560) + v3);
      if ((v5 & 1) != 0)
      {
        v7 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) == 0;
        v8 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
        v9 = v6 ? 0 : (physx::Sc::Interaction *)v8;
        physx::Sc::Scene::registerInteraction(v1, v9, v7[11] != 0);
        v11 = v7[5];
        v12 = v7[6];
        v13 = v11 <= v12 ? v7[5] : v7[6];
        v14 = v11 <= v12 ? v7[6] : v7[5];
        physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(_QWORD *)(v1 + 3992) + 3704), v13, v14, (uint64_t)v7, v10);
        v15 = v7[11];
        if (v15)
        {
          v16 = *(_QWORD *)(v1 + 1840);
          v17 = *(unsigned int *)(v15 + 88);
          if (v17 >= 32 * *(_DWORD *)(v16 + 1664))
            physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v16 + 1656, ((2 * v17) & 0xFFFFFF00) + 256);
          *(_DWORD *)(*(_QWORD *)(v16 + 1656) + 4 * (v17 >> 5)) |= 1 << v17;
          if ((*(_BYTE *)(v15 + 16) & 2) != 0 && (*(_WORD *)(v15 + 80) & 0x1000) != 0)
          {
            if (v17 >= 32 * *(_DWORD *)(v16 + 1680))
              physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v16 + 1672, ((2 * v17) & 0xFFFFFF00) + 256);
            *(_DWORD *)(*(_QWORD *)(v16 + 1672) + 4 * (v17 >> 5)) |= 1 << v17;
          }
        }
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  v18 = *(unsigned int *)(v1 + 7584);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 8 * v18;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v1 + 7576) + v19);
      if ((v21 & 1) != 0)
      {
        v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        v6 = (v21 & 0xFFFFFFFFFFFFFFFELL) == 0;
        v23 = (v21 & 0xFFFFFFFFFFFFFFFELL) + 8;
        if (v6)
          v24 = 0;
        else
          v24 = (physx::Sc::Interaction *)v23;
        physx::Sc::Scene::registerInteraction(v1, v24, 0);
        v26 = *(_QWORD *)(v22 + 40);
        v27 = *(_QWORD *)(v22 + 48);
        if (v26 <= v27)
          v28 = *(_QWORD *)(v22 + 40);
        else
          v28 = *(_QWORD *)(v22 + 48);
        if (v26 <= v27)
          v29 = *(_QWORD *)(v22 + 48);
        else
          v29 = *(_QWORD *)(v22 + 40);
        physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(_QWORD *)(v1 + 3992) + 3704), v28, v29, v22, v25);
      }
      v19 += 8;
    }
    while (v20 != v19);
  }
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  physx::PxBaseTask *v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(physx::PxBaseTask **)(a1 + 24);
  v3 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 2) + 8))(*((_QWORD **)v2 + 2));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return physx::Bp::AABBManager::updateAABBsAndBP(*(physx::Bp::AABBManager **)(v1 + 1848), v4, *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920), *(physx::PxcScratchAllocator **)(v1 + 1840), *(_BYTE *)(v1 + 2080), v2, (physx::PxBaseTask *)(v1 + 6568));
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::runInternal(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(result + 40);
  if (*(float *)(v1 + 1984) != 0.0)
  {
    v2 = *(_QWORD **)(result + 24);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 5104));
    v3 = v1 + 4944;
    v4 = (unsigned int *)(v1 + 4968);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    *(_QWORD *)(v1 + 4960) = v2[2];
    v11 = v2;
    v6 = *(unsigned int *)(v1 + 5032);
    if ((*(_DWORD *)(v1 + 5036) & 0x7FFFFFFFu) <= v6)
    {
      physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 4984, &v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v1 + 5024) + 8 * v6) = v2;
      *(_DWORD *)(v1 + 5032) = v6 + 1;
    }
    (*(void (**)(_QWORD *))(*v2 + 32))(v2);
    *(_BYTE *)(v1 + 5096) = 1;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 5104));
    physx::Cm::FanoutTask::removeReference(v1 + 4944);
    if ((*(_BYTE *)(v1 + 4268) & 2) != 0)
    {
      *(_DWORD *)(v1 + 5152) = 1;
      *(_QWORD *)(v1 + 5144) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 4944) + 32))(v3);
      *(_QWORD *)(v1 + 5136) = *(_QWORD *)(*(_QWORD *)(v1 + 5144) + 16);
      *(_DWORD *)(v1 + 5312) = 1;
      *(_QWORD *)(v1 + 5304) = v1 + 5120;
      (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5120) + 32))(v1 + 5120);
      *(_QWORD *)(v1 + 5296) = *(_QWORD *)(*(_QWORD *)(v1 + 5304) + 16);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5136) + 144))(*(_QWORD *)(v1 + 5136), v1 + 5120);
    }
    else
    {
      *(_DWORD *)(v1 + 5312) = 1;
      *(_QWORD *)(v1 + 5304) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 4944) + 32))(v1 + 4944);
      *(_QWORD *)(v1 + 5296) = *(_QWORD *)(*(_QWORD *)(v1 + 5304) + 16);
    }
    *(_DWORD *)(v1 + 5424) = 1;
    *(_QWORD *)(v1 + 5416) = v1 + 5280;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5280) + 32))(v1 + 5280);
    *(_QWORD *)(v1 + 5408) = *(_QWORD *)(*(_QWORD *)(v1 + 5416) + 16);
    *(_DWORD *)(v1 + 5592) = 1;
    *(_QWORD *)(v1 + 5584) = v1 + 5392;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5392) + 32))(v1 + 5392);
    *(_QWORD *)(v1 + 5576) = *(_QWORD *)(*(_QWORD *)(v1 + 5584) + 16);
    *(_DWORD *)(v1 + 5648) = 1;
    *(_QWORD *)(v1 + 5640) = v1 + 5560;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5560) + 32))(v1 + 5560);
    *(_QWORD *)(v1 + 5632) = *(_QWORD *)(*(_QWORD *)(v1 + 5640) + 16);
    *(_DWORD *)(v1 + 5536) = 1;
    *(_QWORD *)(v1 + 5528) = v1 + 5616;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5616) + 32))(v1 + 5616);
    *(_QWORD *)(v1 + 5520) = *(_QWORD *)(*(_QWORD *)(v1 + 5528) + 16);
    *(_DWORD *)(v1 + 5480) = 1;
    *(_QWORD *)(v1 + 5472) = v1 + 5504;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5504) + 32))(v1 + 5504);
    *(_QWORD *)(v1 + 5464) = *(_QWORD *)(*(_QWORD *)(v1 + 5472) + 16);
    *(_DWORD *)(v1 + 6208) = 1;
    *(_QWORD *)(v1 + 6200) = v1 + 5448;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 5448) + 32))(v1 + 5448);
    *(_QWORD *)(v1 + 6192) = *(_QWORD *)(*(_QWORD *)(v1 + 6200) + 16);
    *(_DWORD *)(v1 + 6264) = 1;
    *(_QWORD *)(v1 + 6256) = v1 + 6176;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6176) + 32))(v1 + 6176);
    *(_QWORD *)(v1 + 6248) = *(_QWORD *)(*(_QWORD *)(v1 + 6256) + 16);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 4928));
    v7 = v1 + 6232;
    v8 = (unsigned int *)(v1 + 4792);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_QWORD *)(v1 + 4784) = *(_QWORD *)(v1 + 6248);
    v11 = (_QWORD *)(v1 + 6232);
    v10 = *(unsigned int *)(v1 + 4856);
    if ((*(_DWORD *)(v1 + 4860) & 0x7FFFFFFFu) <= v10)
    {
      physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 4808, &v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v1 + 4848) + 8 * v10) = v7;
      *(_DWORD *)(v1 + 4856) = v10 + 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6232) + 32))(v7);
    *(_BYTE *)(v1 + 4920) = 1;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 4928));
    physx::Cm::FanoutTask::removeReference(v1 + 4768);
    *(_DWORD *)(v1 + 4744) = 1;
    *(_QWORD *)(v1 + 4736) = v1 + 4768;
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 4768) + 32))(v1 + 4768);
    *(_QWORD *)(v1 + 4728) = *(_QWORD *)(*(_QWORD *)(v1 + 4736) + 16);
    physx::Cm::FanoutTask::removeReference(v1 + 4944);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5296) + 144))(*(_QWORD *)(v1 + 5296), v1 + 5280);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5408) + 144))(*(_QWORD *)(v1 + 5408), v1 + 5392);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5576) + 144))(*(_QWORD *)(v1 + 5576), v1 + 5560);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5632) + 144))(*(_QWORD *)(v1 + 5632), v1 + 5616);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5520) + 144))(*(_QWORD *)(v1 + 5520), v1 + 5504);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 5464) + 144))(*(_QWORD *)(v1 + 5464), v1 + 5448);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6192) + 144))(*(_QWORD *)(v1 + 6192), v1 + 6176);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6248) + 144))(*(_QWORD *)(v1 + 6248), v7);
    physx::Cm::FanoutTask::removeReference(v1 + 4768);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 4728) + 144))(*(_QWORD *)(v1 + 4728), v1 + 4712);
  }
  return result;
}

_QWORD *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::runInternal(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD *)(v1 + 4256);
  *(_QWORD *)v3 = *(_QWORD *)(v3 + 8);
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_DWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 8) = 0u;
  bzero((void *)(*(_QWORD *)(v1 + 1840) + 1936), 0x288uLL);
  *(_QWORD *)(v1 + 4784) = v2[2];
  physx::Cm::FanoutTask::addReference(v1 + 4768);
  *(_QWORD *)(v1 + 4960) = v2[2];
  physx::Cm::FanoutTask::addReference(v1 + 4944);
  *(_DWORD *)(v1 + 6544) = 1;
  *(_QWORD *)(v1 + 6536) = v2;
  (*(void (**)(_QWORD *))(*v2 + 32))(v2);
  *(_QWORD *)(v1 + 6528) = *(_QWORD *)(*(_QWORD *)(v1 + 6536) + 16);
  *(_DWORD *)(v1 + 6320) = 1;
  *(_QWORD *)(v1 + 6312) = v1 + 6512;
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 6512) + 32))(v1 + 6512);
  *(_QWORD *)(v1 + 6304) = *(_QWORD *)(*(_QWORD *)(v1 + 6312) + 16);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6528) + 144))(*(_QWORD *)(v1 + 6528), v1 + 6512);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 6304) + 144))(*(_QWORD *)(v1 + 6304), v1 + 6288);
}

physx::Cm::PreallocatingRegionManager *physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(physx::Cm::PreallocatingRegionManager *this, unsigned int a2, uint64_t a3, const char *a4)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  uint64_t v13;

  *(_DWORD *)this = 64;
  *((_DWORD *)this + 1) = a2;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = (uint64_t *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 5) = a3;
  LODWORD(v13) = 0;
  v6 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, (unint64_t)a2 << 6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPreallocatingPool.h", 60);
  v7 = *((_DWORD *)this + 6);
  v8 = *((_DWORD *)this + 7) & 0x7FFFFFFF;
  v12 = (unint64_t)v6;
  if (v8 <= v7)
  {
    physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(v5, &v12);
  }
  else
  {
    v9 = *((_QWORD *)this + 2) + 24 * v7;
    v10 = v12;
    *(_QWORD *)(v9 + 16) = v13;
    *(_OWORD *)v9 = v10;
    ++*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(uint64_t *a1, __int128 *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>::getName() [T = physx::"
           "Cm::PreallocatingRegion]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    v10 = v8 + 24 * v9;
    v11 = (__int128 *)*a1;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v12 = v13;
      v12 += 24;
      v11 = (__int128 *)((char *)v11 + 24);
    }
    while (v12 < v10);
    v14 = *((_DWORD *)a1 + 2);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 24 * v14;
  v16 = *a2;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v15 = v16;
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  v17 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v17 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 24 * v17;
}

uint64_t physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>::getName() [T = physx::Sc::Client *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t *physx::Cm::PreallocatingRegionManager::searchForMemory(physx::Cm::PreallocatingRegionManager *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *result;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;

  v2 = (uint64_t *)((char *)this + 16);
  v3 = *((unsigned int *)this + 6);
  v5 = *(_DWORD *)this;
  v4 = *((_DWORD *)this + 1);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 24 * *((unsigned int *)this + 2);
    while (1)
    {
      if (v8 != v6)
      {
        v9 = (uint64_t *)(*v2 + v6);
        result = (uint64_t *)v9[1];
        if (result)
        {
          v9[1] = *result;
          goto LABEL_21;
        }
        v11 = *((_DWORD *)v9 + 4);
        if (v11 != v5)
        {
          *((_DWORD *)v9 + 4) = v11 + 1;
          v12 = *v9;
          if (v12)
            break;
        }
      }
      ++v7;
      v6 += 24;
      if (24 * v3 == v6)
        goto LABEL_8;
    }
    result = (uint64_t *)(v12 + v11 * v4);
LABEL_21:
    *((_DWORD *)this + 2) = v7;
  }
  else
  {
LABEL_8:
    *((_DWORD *)this + 2) = v3;
    *((_BYTE *)this + 32) = 1;
    v13 = v4 * (unint64_t)v5;
    LODWORD(v22) = 0;
    *((_QWORD *)&v21 + 1) = 0;
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v13, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPreallocatingPool.h", 60);
      LODWORD(v3) = *((_DWORD *)this + 6);
    }
    else
    {
      v14 = 0;
    }
    *(_QWORD *)&v21 = v14;
    if ((*((_DWORD *)this + 7) & 0x7FFFFFFFu) <= v3)
    {
      v19 = physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(v2, &v21);
    }
    else
    {
      v15 = *((_QWORD *)this + 2) + 24 * v3;
      v16 = v21;
      *(_QWORD *)(v15 + 16) = v22;
      *(_OWORD *)v15 = v16;
      v17 = *((_QWORD *)this + 2);
      v18 = *((_DWORD *)this + 6);
      *((_DWORD *)this + 6) = v18 + 1;
      v19 = v17 + 24 * v18;
    }
    result = *(uint64_t **)(v19 + 8);
    if (result)
    {
      *(_QWORD *)(v19 + 8) = *result;
    }
    else
    {
      v20 = *(_DWORD *)(v19 + 16);
      if (v20 == v5)
      {
        return 0;
      }
      else
      {
        *(_DWORD *)(v19 + 16) = v20 + 1;
        return (uint64_t *)(*(_QWORD *)v19 + v20 * v4);
      }
    }
  }
  return result;
}

void physx::Sc::StaticSim::~StaticSim(physx::Sc::StaticSim *this)
{
  *(_QWORD *)this = off_24ED90100;
  **((_QWORD **)this + 10) = 0;
  physx::Sc::RigidSim::~RigidSim(this);
}

{
  *(_QWORD *)this = off_24ED90100;
  **((_QWORD **)this + 10) = 0;
  physx::Sc::RigidSim::~RigidSim(this);
  (*(void (**)(uint64_t, physx::Sc::StaticSim *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::Cm::PreallocatingRegionManager::deallocateMemory(physx::Cm::PreallocatingRegionManager *this, unsigned __int8 *a2)
{
  int v4;
  signed int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v10;
  char v11;
  char v12;

  if (a2)
  {
    if (*((_BYTE *)this + 32))
      physx::shdfnd::sort<physx::Cm::PreallocatingRegion,physx::shdfnd::Less<physx::Cm::PreallocatingRegion>,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>(*((_QWORD *)this + 2), *((_DWORD *)this + 6), (uint64_t)&v12, (uint64_t)&v11, 32);
    v4 = *((_DWORD *)this + 6) - 1;
    if (v4 >= 0)
    {
      v5 = 0;
      v6 = *((_QWORD *)this + 2);
      while (1)
      {
        v7 = (v5 + v4) >> 1;
        v8 = *(_QWORD *)(v6 + 24 * v7);
        if (v8 <= (unint64_t)a2
          && v8 + (*(_DWORD *)this * *((_DWORD *)this + 1)) > (unint64_t)a2)
        {
          break;
        }
        if (v8 >= (unint64_t)a2)
          v4 = v7 - 1;
        else
          v5 = v7 + 1;
        if (v5 > v4)
          return;
      }
      v10 = v6 + 24 * v7;
      *(_QWORD *)a2 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = a2;
      if (*((_BYTE *)this + 32))
        *((_DWORD *)this + 2) = v7;
      *((_BYTE *)this + 32) = 0;
    }
  }
}

void physx::shdfnd::sort<physx::Cm::PreallocatingRegion,physx::shdfnd::Less<physx::Cm::PreallocatingRegion>,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  size_t v11;
  int v12;
  int i;
  int v14;
  __int128 *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  __int128 *v36;
  unint64_t v37;
  __int128 *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  int v56;
  unint64_t v57;
  __int128 *v58;
  __int128 *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  BOOL v64;
  _BYTE v65[4];
  unsigned int v66;
  int v67;
  _QWORD *v68;
  char v69;
  char *v70;
  BOOL v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v8 = (4 * a5);
  v9 = v8 > 0x400;
  v71 = v8 > 0x400;
  if (v8 < 0x401)
  {
    MEMORY[0x24BDAC7A8](a1);
    v10 = &v65[-((v11 + 15) & 0x1FFFFFFF0)];
    bzero(v10, v11);
  }
  else
  {
    v10 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v65, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSort.h", 65);
  }
  v70 = (char *)v10;
  v66 = 0;
  v67 = a5;
  v68 = v10;
  v12 = a2 - 1;
  v69 = 0;
  if (a2 - 1 < 1)
    goto LABEL_45;
  for (i = 0; ; i = *((_DWORD *)v10 + v63 - 2))
  {
    while (1)
    {
      if (v12 <= i)
        goto LABEL_38;
      if ((v12 - i) <= 4)
        break;
      v14 = i + v12;
      if (i + v12 < 0 != __OFADD__(i, v12))
        ++v14;
      v15 = (__int128 *)(a1 + 24 * (v14 >> 1));
      v16 = (unint64_t *)(a1 + 24 * i);
      v17 = *v16;
      if (*(_QWORD *)v15 < *v16)
      {
        v18 = *(_OWORD *)v16;
        v19 = v16[2];
        v20 = *((_DWORD *)v15 + 4);
        *(_OWORD *)v16 = *v15;
        *((_DWORD *)v16 + 4) = v20;
        *((_DWORD *)v15 + 4) = v19;
        *v15 = v18;
        v17 = *v16;
      }
      v21 = (unint64_t *)(a1 + 24 * v12);
      v22 = *v21;
      if (*v21 < v17)
      {
        v23 = *(_OWORD *)v16;
        v24 = v16[2];
        v25 = *((_DWORD *)v21 + 4);
        *(_OWORD *)v16 = *(_OWORD *)v21;
        *((_DWORD *)v16 + 4) = v25;
        *((_DWORD *)v21 + 4) = v24;
        *(_OWORD *)v21 = v23;
        v22 = *v21;
      }
      if (v22 < *(_QWORD *)v15)
      {
        v26 = *v15;
        v27 = *((_QWORD *)v15 + 2);
        v28 = *((_DWORD *)v21 + 4);
        *v15 = *(_OWORD *)v21;
        *((_DWORD *)v15 + 4) = v28;
        *((_DWORD *)v21 + 4) = v27;
        *(_OWORD *)v21 = v26;
      }
      v29 = v12 - 1;
      v30 = (uint64_t *)(a1 + 24 * v29);
      v31 = *v15;
      v32 = *((_QWORD *)v15 + 2);
      v33 = *((_DWORD *)v30 + 4);
      *v15 = *(_OWORD *)v30;
      *((_DWORD *)v15 + 4) = v33;
      *((_DWORD *)v30 + 4) = v32;
      *(_OWORD *)v30 = v31;
      v34 = i;
      while (1)
      {
        v35 = *v30;
        v36 = (__int128 *)(a1 + 24 * v34);
        do
        {
          v37 = *((_QWORD *)v36 + 3);
          v36 = (__int128 *)((char *)v36 + 24);
          ++v34;
        }
        while (v37 < v35);
        v38 = (__int128 *)(a1 + 24 * (int)v29);
        do
        {
          v39 = *((_QWORD *)v38 - 3);
          v38 = (__int128 *)((char *)v38 - 24);
          LODWORD(v29) = v29 - 1;
        }
        while (v35 < v39);
        if (v34 >= (int)v29)
          break;
        v40 = *v36;
        v41 = *((_QWORD *)v36 + 2);
        v42 = *((_DWORD *)v38 + 4);
        *v36 = *v38;
        *((_DWORD *)v36 + 4) = v42;
        *((_DWORD *)v38 + 4) = v41;
        *v38 = v40;
      }
      v43 = *v36;
      v44 = *((_QWORD *)v36 + 2);
      v45 = *((_DWORD *)v30 + 4);
      *v36 = *(_OWORD *)v30;
      *((_DWORD *)v36 + 4) = v45;
      *((_DWORD *)v30 + 4) = v44;
      *(_OWORD *)v30 = v43;
      v46 = v66;
      v47 = v67 - 1;
      if (v34 - i >= v12 - v34)
      {
        if (v66 >= v47)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::grow((uint64_t)v65);
          v46 = v66;
          v10 = v68;
        }
        v66 = v46 + 1;
        *((_DWORD *)v10 + v46) = v34 + 1;
        v49 = v66++;
        *((_DWORD *)v10 + v49) = v12;
        v12 = v34 - 1;
      }
      else
      {
        if (v66 >= v47)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::grow((uint64_t)v65);
          v46 = v66;
          v10 = v68;
        }
        v66 = v46 + 1;
        *((_DWORD *)v10 + v46) = i;
        v48 = v66++;
        *((_DWORD *)v10 + v48) = v34 - 1;
        i = v34 + 1;
      }
    }
    v50 = i;
    v51 = i + 1;
    v52 = a1 + 24 + 24 * i;
    do
    {
      v53 = 0;
      v54 = v50++;
      v55 = (unint64_t *)v52;
      v56 = v54;
      do
      {
        v57 = *v55;
        v55 += 3;
        if (v57 < *(_QWORD *)(a1 + 24 * v56))
          v56 = v51 + v53;
        ++v53;
      }
      while (v54 + v53 < v12);
      if (v56 != (_DWORD)v54)
      {
        v58 = (__int128 *)(a1 + 24 * v56);
        v59 = (__int128 *)(a1 + 24 * v54);
        v60 = *v58;
        v61 = *((_QWORD *)v58 + 2);
        v62 = *((_DWORD *)v59 + 4);
        *v58 = *v59;
        *((_DWORD *)v58 + 4) = v62;
        *((_DWORD *)v59 + 4) = v61;
        *v59 = v60;
      }
      ++v51;
      v52 += 24;
    }
    while (v50 != v12);
LABEL_38:
    v63 = v66;
    if (!v66)
      break;
    --v66;
    v12 = *((_DWORD *)v10 + v63 - 1);
    v66 = v63 - 2;
  }
  if (v69)
    v64 = v10 == 0;
  else
    v64 = 1;
  if (!v64)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
    v9 = v71;
  }
LABEL_45:
  if (v9)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v70, v70);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>::getName() [T = physx::"
           "Cm::PreallocatingRegion]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(physx::Cm::PreallocatingRegionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 24 * v2;
    do
    {
      v5 = *((_QWORD *)this + 2);
      if (*(_QWORD *)(v5 + v3))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(_QWORD *)(v5 + v3) = 0;
      v3 += 24;
    }
    while (v4 != v3);
  }
  v6 = *((_DWORD *)this + 7);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 2) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>::getName() [T = physx::Sc::BodyCore *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t *physx::Cm::PreallocatingRegionManager::preAllocate(uint64_t *this, unsigned int a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a2)
  {
    v3 = this;
    v4 = *(_DWORD *)this;
    v5 = *(_DWORD *)this * *((_DWORD *)this + 6);
    if (v5 < a2)
    {
      v6 = *((unsigned int *)this + 1) * (unint64_t)v4;
      do
      {
        v10 = 0uLL;
        LODWORD(v11) = 0;
        if (v6)
          this = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPreallocatingPool.h", 60);
        else
          this = 0;
        *(_QWORD *)&v10 = this;
        v7 = *((_DWORD *)v3 + 6);
        if ((*((_DWORD *)v3 + 7) & 0x7FFFFFFFu) <= v7)
        {
          this = (uint64_t *)physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(v3 + 2, &v10);
        }
        else
        {
          v8 = v3[2] + 24 * v7;
          v9 = v10;
          *(_QWORD *)(v8 + 16) = v11;
          *(_OWORD *)v8 = v9;
          ++*((_DWORD *)v3 + 6);
        }
        v5 += v4;
      }
      while (v5 < a2);
    }
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>::getName() [T = physx::Sc::BodyCore *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>::getName() [T = physx::Sc::Interaction *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>::getName() [T = physx::Sc::Interaction *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,8u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 8>>::getName() [T = phy"
           "sx::Sc::Scene::Block<void *, 8>]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 6) - 64;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 6) - 64);
    do
    {
      *v9 = v8;
      v9 -= 8;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 8>>::getName() [T = physx"
         "::Sc::Scene::Block<void *, 8>]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,16u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 16>>::getName() [T = ph"
           "ysx::Sc::Scene::Block<void *, 16>]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128);
    do
    {
      *v9 = v8;
      v9 -= 16;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 16>>::getName() [T = phys"
         "x::Sc::Scene::Block<void *, 16>]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,32u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 32>>::getName() [T = ph"
           "ysx::Sc::Scene::Block<void *, 32>]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 8) - 256;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 8) - 256);
    do
    {
      *v9 = v8;
      v9 -= 32;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 32;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 32>>::getName() [T = phys"
         "x::Sc::Scene::Block<void *, 32>]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>::getName() [T = physx::PxTriggerPair]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 40 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 40 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      v12 = v8[1];
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 + 8);
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      *(_BYTE *)(v10 + 36) = *((_BYTE *)v8 + 36);
      v10 += 40;
      v8 = (__int128 *)((char *)v8 + 40);
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>::getName() [T = physx:"
           ":Sc::TriggerPairExtraData]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 12 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if (v7)
  {
    v9 = v6 + 12 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
      *(_QWORD *)v10 = v11;
      v10 += 12;
      v8 = (uint64_t *)((char *)v8 + 12);
    }
    while (v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>::getName() [T = physx::Sc:"
           ":ConstraintCore *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>::getName() [T = physx::Sc::Client *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>::getName() [T = physx"
           "::Sc::Scene::SimpleBodyPair]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 24 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 24 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v10 += 24;
      v8 = (__int128 *)((char *)v8 + 24);
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ConstraintSim,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::getName() [T = physx::Sc::ConstraintSim]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128);
    do
    {
      *v9 = v8;
      v9 -= 16;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::getName() [T = physx::Sc::ConstraintSim]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>::getName() [T = physx::Sc:"
           ":ConstraintCore *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,128u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 128>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 128>]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128);
    do
    {
      *v9 = v8;
      v9 -= 16;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 128>>::getName() ["
         "T = physx::Sc::Scene::Block<unsigned char, 128>]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,256u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 256>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 256>]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 8) - 256;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 8) - 256);
    do
    {
      *v9 = v8;
      v9 -= 32;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 32;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 256>>::getName() ["
         "T = physx::Sc::Scene::Block<unsigned char, 256>]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,384u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 384>>::getName()"
           " [T = physx::Sc::Scene::Block<unsigned char, 384>]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = (_QWORD *)(v5 + 384 * *(unsigned int *)(v1 + 544) - 384);
  if ((unint64_t)v7 >= v5)
  {
    v8 = *(_QWORD **)(v1 + 560);
    do
    {
      *v7 = v8;
      v9 = v7 - 48;
      v8 = v7;
      v7 = v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 48;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 384>>::getName() ["
         "T = physx::Sc::Scene::Block<unsigned char, 384>]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<physx::PxvContactManagerTouchEvent,physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v4 = 16 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>::getName() [T = physx"
         "::PxvContactManagerTouchEvent]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 16 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::recreate(_DWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
         "ne::postCCDPass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::postCCDPass>]";
  else
    v3 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = a1[2];
  if (v6)
  {
    v7 = result + 56 * v6;
    v8 = (_OWORD *)(*(_QWORD *)a1 + 40);
    v9 = result;
    do
    {
      *(_QWORD *)v9 = off_24ED8E318;
      *(_OWORD *)(v9 + 8) = *(v8 - 2);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 - 2);
      *(_DWORD *)(v9 + 32) = *((_DWORD *)v8 - 2);
      *(_QWORD *)v9 = off_24ED90140;
      v10 = *v8;
      v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v9 + 40) = v10;
      v9 += 56;
    }
    while (v9 < v7);
    v11 = a1[2];
    if (v11)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(void (****)(void))a1;
      do
      {
        v14 = *v13;
        v13 += 7;
        (*v14)();
        result = (uint64_t)v13;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::runInternal(uint64_t a1, physx::PxBaseTask *a2)
{
  physx::Sc::Scene::postCCDPass(*(physx::Sc::Scene **)(a1 + 40), a2);
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::recreate(_DWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
         "ne::updateCCDSinglePass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::updateCCDSinglePass>]";
  else
    v3 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = a1[2];
  if (v6)
  {
    v7 = result + 56 * v6;
    v8 = (_OWORD *)(*(_QWORD *)a1 + 40);
    v9 = result;
    do
    {
      *(_QWORD *)v9 = off_24ED8E318;
      *(_OWORD *)(v9 + 8) = *(v8 - 2);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 - 2);
      *(_DWORD *)(v9 + 32) = *((_DWORD *)v8 - 2);
      *(_QWORD *)v9 = off_24ED901D0;
      v10 = *v8;
      v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v9 + 40) = v10;
      v9 += 56;
    }
    while (v9 < v7);
    v11 = a1[2];
    if (v11)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(void (****)(void))a1;
      do
      {
        v14 = *v13;
        v13 += 7;
        (*v14)();
        result = (uint64_t)v13;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::runInternal(uint64_t a1)
{
  uint64_t v1;
  physx::PxBaseTask *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(physx::PxBaseTask **)(a1 + 24);
  ++*(_DWORD *)(v1 + 1996);
  physx::Bp::AABBManager::postBroadPhase(*(physx::Bp::AABBManager **)(v1 + 1848), 0, 0, *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920));
  physx::Sc::Scene::finishBroadPhase((physx::Sc::Scene *)v1, v2);
  if (!*(_DWORD *)(*(_QWORD *)(v1 + 1864) + 180))
  {
    v3 = *(unsigned int *)(v1 + 2104);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = (_QWORD *)(*(_QWORD *)(v1 + 1848) + 224);
      do
      {
        v6 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v1 + 2096) + 8 * v4) + 56);
        if (v6)
        {
          do
          {
            if ((v6[7][8] & 5) != 0)
            {
              v7 = *((unsigned int *)v6 + 4);
              physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v5, (v7 & 0x7FFFFFFF) + 1);
              *(_DWORD *)(*v5 + ((v7 >> 3) & 0xFFFFFFC)) |= 1 << v7;
            }
            v6 = (uint64_t **)*v6;
          }
          while (v6);
          v3 = *(unsigned int *)(v1 + 2104);
        }
        ++v4;
      }
      while (v4 < v3);
    }
  }
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::recreate(_DWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
         "ne::updateCCDSinglePassStage2>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::up"
         "dateCCDSinglePassStage2>]";
  else
    v3 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = a1[2];
  if (v6)
  {
    v7 = result + 56 * v6;
    v8 = (_OWORD *)(*(_QWORD *)a1 + 40);
    v9 = result;
    do
    {
      *(_QWORD *)v9 = off_24ED8E318;
      *(_OWORD *)(v9 + 8) = *(v8 - 2);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 - 2);
      *(_DWORD *)(v9 + 32) = *((_DWORD *)v8 - 2);
      *(_QWORD *)v9 = off_24ED90260;
      v10 = *v8;
      v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v9 + 40) = v10;
      v9 += 56;
    }
    while (v9 < v7);
    v11 = a1[2];
    if (v11)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(void (****)(void))a1;
      do
      {
        v14 = *v13;
        v13 += 7;
        (*v14)();
        result = (uint64_t)v13;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::postBroadPhaseStage2(*(physx::Sc::Scene **)(a1 + 40), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::recreate(_DWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
         "ne::updateCCDSinglePassStage3>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::up"
         "dateCCDSinglePassStage3>]";
  else
    v3 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = a1[2];
  if (v6)
  {
    v7 = result + 56 * v6;
    v8 = (_OWORD *)(*(_QWORD *)a1 + 40);
    v9 = result;
    do
    {
      *(_QWORD *)v9 = off_24ED8E318;
      *(_OWORD *)(v9 + 8) = *(v8 - 2);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 - 2);
      *(_DWORD *)(v9 + 32) = *((_DWORD *)v8 - 2);
      *(_QWORD *)v9 = off_24ED902F0;
      v10 = *v8;
      v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v9 + 40) = v10;
      v9 += 56;
    }
    while (v9 < v7);
    v11 = a1[2];
    if (v11)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(void (****)(void))a1;
      do
      {
        v14 = *v13;
        v13 += 7;
        (*v14)();
        result = (uint64_t)v13;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::runInternal(uint64_t a1)
{
  uint64_t v1;
  physx::PxBaseTask *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t *v9;
  uint64_t v10;
  physx::Sc::ShapeInteraction *Interaction;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[5];
  uint64_t v25[2];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(physx::PxBaseTask **)(a1 + 24);
  ++*(_DWORD *)(v1 + 1996);
  v3 = *(_DWORD *)(*(_QWORD *)(v1 + 1864) + 180);
  v4 = *(_QWORD *)(v1 + 1848);
  v5 = *(_QWORD *)(v1 + 1840);
  *(_DWORD *)(v5 + 2568) += *(_DWORD *)(v4 + 480) + *(_DWORD *)(v4 + 496);
  v6 = v3 + 1;
  if (v3 == -1)
  {
    physx::Sc::Scene::processLostTouchPairs((physx::Sc::Scene *)v1);
    goto LABEL_22;
  }
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v5 + 1776) + 168))(v24);
  v7 = *(_DWORD *)(v4 + 480);
  v8 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
  if (v7)
  {
    v9 = *(unint64_t **)(v4 + 472);
    while (1)
    {
      v10 = *(_QWORD *)(v1 + 3992);
      Interaction = (physx::Sc::ShapeInteraction *)physx::Sc::NPhaseCore::findInteraction(v10, *v9, v9[1]);
      v9[2] = (unint64_t)Interaction;
      if (Interaction)
        break;
LABEL_17:
      v9 += 3;
      if (!--v7)
        goto LABEL_18;
    }
    v12 = (uint64_t)Interaction;
    if (*((_BYTE *)Interaction + 36) != 2)
    {
      if (*((_BYTE *)Interaction + 36))
      {
LABEL_16:
        physx::Sc::NPhaseCore::releaseElementPair(v10, v12, 4, v6, 1, (uint64_t)v24, v8);
        goto LABEL_17;
      }
      physx::Sc::NPhaseCore::lostTouchReports(v10, Interaction, 4, 0, (uint64_t)v24, v8);
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 72);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 1840) + 1776) + 72))(*(_QWORD *)(*(_QWORD *)(v13 + 1840) + 1776), *(_QWORD *)(v12 + 88));
      physx::PxsContext::destroyContactManager(*(_QWORD *)(v13 + 1840), *(_QWORD *)(v12 + 88));
      *(_QWORD *)(v12 + 88) = 0;
      v14 = *(_DWORD *)(v12 + 96);
      if (v14 != -1)
      {
        physx::IG::SimpleIslandManager::removeConnection(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 72) + 1880), v14);
        *(_DWORD *)(v12 + 96) = -1;
      }
    }
    physx::Sc::Scene::unregisterInteraction(v1, v12 + 8);
    v15 = *(_QWORD *)(v1 + 3992) + 3704;
    v16 = *(_QWORD *)(v12 + 40);
    v17 = *(_QWORD *)(v12 + 48);
    if (v16 <= v17)
      v18 = *(_QWORD *)(v12 + 40);
    else
      v18 = *(_QWORD *)(v12 + 48);
    if (v16 <= v17)
      v16 = *(_QWORD *)(v12 + 48);
    v25[0] = v18;
    v25[1] = v16;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v15, v25);
    v10 = *(_QWORD *)(v1 + 3992);
    goto LABEL_16;
  }
LABEL_18:
  v19 = *(_DWORD *)(v4 + 496);
  if (v19)
  {
    v20 = *(unint64_t **)(v4 + 488);
    do
    {
      --v19;
      v21 = *v20;
      v22 = v20[1];
      v20[2] = 0;
      physx::Sc::NPhaseCore::onOverlapRemoved(*(_QWORD *)(v1 + 3992), v21, v22, v6, 0, (uint64_t)v24, v8);
      v20 += 3;
    }
    while (v19);
  }
  physx::Sc::Scene::processLostTouchPairs((physx::Sc::Scene *)v1);
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 392) + 160))(*(_QWORD *)(v4 + 392));
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 392) + 136))(*(_QWORD *)(v4 + 392));
LABEL_22:
  physx::PxsContext::resetThreadContexts(*(physx::PxsContext **)(v1 + 1840));
  return physx::PxsCCDContext::updateCCD(*(physx::PxsCCDContext **)(v1 + 1864), *(float *)(v1 + 1984), v2, (physx::IG::IslandSim *)(*(_QWORD *)(v1 + 1880) + 224), (*(_DWORD *)(v1 + 4268) & 4) != 0, *(_DWORD *)(v1 + 1872));
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::recreate(_DWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
         "ne::ccdBroadPhase>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhase>]";
  else
    v3 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = a1[2];
  if (v6)
  {
    v7 = result + 56 * v6;
    v8 = (_OWORD *)(*(_QWORD *)a1 + 40);
    v9 = result;
    do
    {
      *(_QWORD *)v9 = off_24ED8E318;
      *(_OWORD *)(v9 + 8) = *(v8 - 2);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 - 2);
      *(_DWORD *)(v9 + 32) = *((_DWORD *)v8 - 2);
      *(_QWORD *)v9 = off_24ED90380;
      v10 = *v8;
      v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v9 + 40) = v10;
      v9 += 56;
    }
    while (v9 < v7);
    v11 = a1[2];
    if (v11)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(void (****)(void))a1;
      do
      {
        v14 = *v13;
        v13 += 7;
        (*v14)();
        result = (uint64_t)v13;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  physx::PxsCCDContext *v3;
  int v4;
  int v5;
  _BOOL8 v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  physx::PxBaseTask *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(physx::PxsCCDContext **)(v1 + 1864);
  v4 = *((_DWORD *)v3 + 45);
  v5 = *((_DWORD *)v3 + 109);
  *(_DWORD *)(v1 + 1876) = v4 + 1;
  if (v4)
  {
    if (!*((_DWORD *)v3 + 46) || !*(_DWORD *)(v1 + 1872))
      return;
  }
  else if (!*(_DWORD *)(v1 + 1872))
  {
    physx::PxsCCDContext::resetContactManagers(v3);
    return;
  }
  v6 = !(v4 & 1);
  v7 = v5 - 1;
  if (v4 == v5 - 1)
  {
    v8 = (uint64_t *)(v1 + 5256);
    v9 = *(_QWORD *)(v1 + 5256);
    v10 = v4 & 1;
    v11 = v9 + 56 * v10;
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 5240);
    v13 = v12 + 56 * !(v4 & 1);
    *(_DWORD *)(v13 + 32) = 1;
    *(_QWORD *)(v13 + 24) = v2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
      v12 = *(_QWORD *)(v1 + 5240);
    }
    v14 = *(_QWORD *)(v1 + 5224);
    v15 = v14 + 56 * v6;
    v16 = v12 + 56 * v6;
    *(_DWORD *)(v15 + 32) = 1;
    *(_QWORD *)(v15 + 24) = v16;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 16);
      v14 = *(_QWORD *)(v1 + 5224);
    }
    v8 = (uint64_t *)(v1 + 5256);
    v9 = *(_QWORD *)(v1 + 5256);
    v10 = v4 & 1;
    v11 = v9 + 56 * v10;
    v2 = v14 + 56 * !(v4 & 1);
  }
  *(_DWORD *)(v11 + 32) = 1;
  *(_QWORD *)(v11 + 24) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16);
    v9 = *v8;
  }
  v17 = *(_QWORD *)(v1 + 5208);
  v18 = 56 * v10;
  v19 = v17 + 56 * v10;
  v20 = v9 + 56 * v10;
  *(_DWORD *)(v19 + 32) = 1;
  *(_QWORD *)(v19 + 24) = v20;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16);
    v17 = *(_QWORD *)(v1 + 5208);
  }
  v21 = *(_QWORD *)(v1 + 5192);
  v22 = v21 + v18;
  *(_DWORD *)(v22 + 32) = 1;
  *(_QWORD *)(v22 + 24) = v17 + v18;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + v18) + 32))(v17 + v18);
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(*(_QWORD *)(v22 + 24) + 16);
    v21 = *(_QWORD *)(v1 + 5192);
  }
  v23 = *(_QWORD *)(v1 + 5176);
  v24 = v23 + v18;
  *(_DWORD *)(v24 + 32) = 1;
  *(_QWORD *)(v24 + 24) = v21 + v18;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v21 + v18) + 32))(v21 + v18);
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 16);
    v23 = *(_QWORD *)(v1 + 5176);
  }
  v25 = (physx::PxBaseTask *)(v23 + v18);
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + v18 + 16) + 8))(*(_QWORD *)(v23 + v18 + 16));
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  physx::Bp::AABBManager::updateAABBsAndBP(*(physx::Bp::AABBManager **)(v1 + 1848), v27, *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920), *(physx::PxcScratchAllocator **)(v1 + 1840), 0, v25, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 5256) + v18) + 40))(*(_QWORD *)(v1 + 5256) + v18);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 5208) + v18) + 40))(*(_QWORD *)(v1 + 5208) + v18);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 5192) + v18) + 40))(*(_QWORD *)(v1 + 5192) + v18);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 5176) + v18) + 40))(*(_QWORD *)(v1 + 5176) + v18);
  if (v4 != v7)
  {
    v28 = *(_QWORD *)(v1 + 5240) + 56 * !(v4 & 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    v29 = *(_QWORD *)(v1 + 5224) + 56 * !(v4 & 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  }
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::recreate(_DWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
         "ne::ccdBroadPhaseAABB>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhaseAABB>]";
  else
    v3 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = a1[2];
  if (v6)
  {
    v7 = result + 56 * v6;
    v8 = (_OWORD *)(*(_QWORD *)a1 + 40);
    v9 = result;
    do
    {
      *(_QWORD *)v9 = off_24ED8E318;
      *(_OWORD *)(v9 + 8) = *(v8 - 2);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 - 2);
      *(_DWORD *)(v9 + 32) = *((_DWORD *)v8 - 2);
      *(_QWORD *)v9 = off_24ED90410;
      v10 = *v8;
      v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v9 + 40) = v10;
      v9 += 56;
    }
    while (v9 < v7);
    v11 = a1[2];
    if (v11)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(void (****)(void))a1;
      do
      {
        v14 = *v13;
        v13 += 7;
        (*v14)();
        result = (uint64_t)v13;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::runInternal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  pthread_mutex_t **v5;
  unsigned int v6;
  int v7;
  unsigned int i;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(UpdateCCDBoundsTask *__hidden);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)(v1 + 1864);
  v4 = *(_DWORD *)(v3 + 180);
  v5 = *(pthread_mutex_t ***)(*(_QWORD *)(v1 + 1840) + 1920);
  *(_DWORD *)(v1 + 1872) = 0;
  if (!v4 || *(_DWORD *)(v3 + 184))
  {
    v6 = *(_DWORD *)(v1 + 2104);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i < v6; i += 256)
      {
        v9 = v6 + v7;
        if (v9 >= 0x100)
          v10 = 256;
        else
          v10 = v9;
        v11 = physx::Cm::FlushPool::allocate(v5, 64, 0x10u);
        v12 = *(_QWORD *)(v1 + 2096) + 8 * i;
        *(_QWORD *)(v11 + 8) = *(_QWORD *)(v1 + 24);
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 32) = 0;
        *(_QWORD *)v11 = &off_24ED8E4B8;
        *(_QWORD *)(v11 + 40) = v12;
        *(_DWORD *)(v11 + 48) = v10;
        *(_QWORD *)(v11 + 56) = v1 + 1872;
        *(_DWORD *)(v11 + 32) = 1;
        *(_QWORD *)(v11 + 24) = v2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
          *(_QWORD *)(v11 + 16) = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16);
          v13 = *(void (***)(UpdateCCDBoundsTask *__hidden))v11;
        }
        else
        {
          v13 = &off_24ED8E4B8;
        }
        result = ((uint64_t (*)(uint64_t))v13[5])(v11);
        v6 = *(_DWORD *)(v1 + 2104);
        v7 -= 256;
      }
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
           "cene::postCCDPass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::postCCDPass>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = v3[2];
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = (_OWORD *)(*(_QWORD *)v3 + 40);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = off_24ED8E318;
      *(_OWORD *)(v12 + 8) = *(v11 - 2);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v11 - 2);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 - 2);
      *(_QWORD *)v12 = off_24ED90140;
      v13 = *v11;
      v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v12 + 40) = v13;
      v12 += 56;
    }
    while (v12 < v10);
    v14 = v3[2];
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  *(_QWORD *)v15 = off_24ED8E318;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)v15 = off_24ED90140;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v16 = v3[2];
  if (v16)
  {
    v17 = *(_QWORD *)v3 + 56 * v16;
    v18 = *(void (****)(void))v3;
    do
    {
      v19 = *v18;
      v18 += 7;
      (*v19)();
      result = (uint64_t)v18;
    }
    while ((unint64_t)v18 < v17);
  }
  if ((v3[3] & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
           "cene::updateCCDSinglePass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::upda"
           "teCCDSinglePass>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = v3[2];
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = (_OWORD *)(*(_QWORD *)v3 + 40);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = off_24ED8E318;
      *(_OWORD *)(v12 + 8) = *(v11 - 2);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v11 - 2);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 - 2);
      *(_QWORD *)v12 = off_24ED901D0;
      v13 = *v11;
      v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v12 + 40) = v13;
      v12 += 56;
    }
    while (v12 < v10);
    v14 = v3[2];
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  *(_QWORD *)v15 = off_24ED8E318;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)v15 = off_24ED901D0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v16 = v3[2];
  if (v16)
  {
    v17 = *(_QWORD *)v3 + 56 * v16;
    v18 = *(void (****)(void))v3;
    do
    {
      v19 = *v18;
      v18 += 7;
      (*v19)();
      result = (uint64_t)v18;
    }
    while ((unint64_t)v18 < v17);
  }
  if ((v3[3] & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
           "cene::updateCCDSinglePassStage2>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene"
           "::updateCCDSinglePassStage2>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = v3[2];
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = (_OWORD *)(*(_QWORD *)v3 + 40);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = off_24ED8E318;
      *(_OWORD *)(v12 + 8) = *(v11 - 2);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v11 - 2);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 - 2);
      *(_QWORD *)v12 = off_24ED90260;
      v13 = *v11;
      v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v12 + 40) = v13;
      v12 += 56;
    }
    while (v12 < v10);
    v14 = v3[2];
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  *(_QWORD *)v15 = off_24ED8E318;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)v15 = off_24ED90260;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v16 = v3[2];
  if (v16)
  {
    v17 = *(_QWORD *)v3 + 56 * v16;
    v18 = *(void (****)(void))v3;
    do
    {
      v19 = *v18;
      v18 += 7;
      (*v19)();
      result = (uint64_t)v18;
    }
    while ((unint64_t)v18 < v17);
  }
  if ((v3[3] & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
           "cene::updateCCDSinglePassStage3>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene"
           "::updateCCDSinglePassStage3>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = v3[2];
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = (_OWORD *)(*(_QWORD *)v3 + 40);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = off_24ED8E318;
      *(_OWORD *)(v12 + 8) = *(v11 - 2);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v11 - 2);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 - 2);
      *(_QWORD *)v12 = off_24ED902F0;
      v13 = *v11;
      v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v12 + 40) = v13;
      v12 += 56;
    }
    while (v12 < v10);
    v14 = v3[2];
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  *(_QWORD *)v15 = off_24ED8E318;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)v15 = off_24ED902F0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v16 = v3[2];
  if (v16)
  {
    v17 = *(_QWORD *)v3 + 56 * v16;
    v18 = *(void (****)(void))v3;
    do
    {
      v19 = *v18;
      v18 += 7;
      (*v19)();
      result = (uint64_t)v18;
    }
    while ((unint64_t)v18 < v17);
  }
  if ((v3[3] & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
           "cene::ccdBroadPhase>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhase>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = v3[2];
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = (_OWORD *)(*(_QWORD *)v3 + 40);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = off_24ED8E318;
      *(_OWORD *)(v12 + 8) = *(v11 - 2);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v11 - 2);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 - 2);
      *(_QWORD *)v12 = off_24ED90380;
      v13 = *v11;
      v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v12 + 40) = v13;
      v12 += 56;
    }
    while (v12 < v10);
    v14 = v3[2];
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  *(_QWORD *)v15 = off_24ED8E318;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)v15 = off_24ED90380;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v16 = v3[2];
  if (v16)
  {
    v17 = *(_QWORD *)v3 + 56 * v16;
    v18 = *(void (****)(void))v3;
    do
    {
      v19 = *v18;
      v18 += 7;
      (*v19)();
      result = (uint64_t)v18;
    }
    while ((unint64_t)v18 < v17);
  }
  if ((v3[3] & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
           "cene::ccdBroadPhaseAABB>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhaseAABB>]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = v3[2];
  if (v9)
  {
    v10 = v8 + 56 * v9;
    v11 = (_OWORD *)(*(_QWORD *)v3 + 40);
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = off_24ED8E318;
      *(_OWORD *)(v12 + 8) = *(v11 - 2);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v11 - 2);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v11 - 2);
      *(_QWORD *)v12 = off_24ED90410;
      v13 = *v11;
      v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v12 + 40) = v13;
      v12 += 56;
    }
    while (v12 < v10);
    v14 = v3[2];
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 56 * v14;
  *(_QWORD *)v15 = off_24ED8E318;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)v15 = off_24ED90410;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  v16 = v3[2];
  if (v16)
  {
    v17 = *(_QWORD *)v3 + 56 * v16;
    v18 = *(void (****)(void))v3;
    do
    {
      v19 = *v18;
      v18 += 7;
      (*v19)();
      result = (uint64_t)v18;
    }
    while ((unint64_t)v18 < v17);
  }
  if ((v3[3] & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxContactPairHeader,physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>::getName() [T = physx::PxCo"
           "ntactPairHeader]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 48 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 48 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      *(_OWORD *)(v10 + 10) = *(__int128 *)((char *)v8 + 10);
      *(_OWORD *)v10 = v11;
      *(_WORD *)(v10 + 26) = *((_WORD *)v8 + 13);
      v12 = *((_QWORD *)v8 + 4);
      *(_DWORD *)(v10 + 40) = *((_DWORD *)v8 + 10);
      *(_QWORD *)(v10 + 32) = v12;
      v10 += 48;
      v8 += 3;
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxRigidBody *>::getName() [T = const physx::PxRigidBody *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxRigidBody *>::getName() [T = const physx"
           "::PxRigidBody *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTransform>::getName() [T = physx::PxTransform]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 28 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  v10 = (_OWORD *)(v8 + 28 * v9);
  v11 = *(_QWORD *)v3;
  if (v9)
  {
    v12 = *(_QWORD *)v3;
    v13 = v8;
    do
    {
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v12 + 24);
      v13 += 28;
      v12 += 28;
    }
    while (v13 < (unint64_t)v10);
  }
  *v10 = *(_OWORD *)a2;
  v14 = v8 + 28 * v9;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v11)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>::getName() [T = physx::Sc::ShapeSim *]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeCore const*,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeCore const*>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Sc::ShapeCore *>::getName() [T = const physx"
         "::Sc::ShapeCore *]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxActor *>::getName() [T = physx::PxActor *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxActor *>::getName() [T = physx::PxActor *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::growAndPushBack(uint64_t *a1, __int128 *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>::getName() [T = physx"
           "::Sc::Scene::SimpleBodyPair]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    v10 = v8 + 24 * v9;
    v11 = (__int128 *)*a1;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v12 = v13;
      v12 += 24;
      v11 = (__int128 *)((char *)v11 + 24);
    }
    while (v12 < v10);
    v14 = *((_DWORD *)a1 + 2);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 24 * v14;
  v16 = *a2;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v15 = v16;
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  v17 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v17 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 24 * v17;
}

unint64_t physx::shdfnd::PoolBase<physx::Dy::Articulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;

  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, *(unsigned int *)(a1 + 552) + 71, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  if (result)
  {
    v3 = (result + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v3 - 8) = v3 - result;
  }
  else
  {
    v3 = 0;
  }
  v8 = v3;
  v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 528) + 8 * v4) = v3;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  v5 = (_QWORD *)(v3 + 320 * *(unsigned int *)(a1 + 544) - 320);
  if ((unint64_t)v5 >= v3)
  {
    v6 = *(_QWORD **)(a1 + 560);
    do
    {
      *v5 = v6;
      v7 = v5 - 40;
      v6 = v5;
      v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(_QWORD *)(a1 + 560) = v7 + 40;
  }
  return result;
}

unint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>>::growAndPushBack(unint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_13;
  }
  v6 = (8 * v5);
  if (v6 > 0x200 || *(_BYTE *)(a1 + 512) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v6 + 71, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    if (v8)
    {
      v9 = (v8 + 71) & 0xFFFFFFFFFFFFFFC0;
      *(_QWORD *)(v9 - 8) = v9 - v8;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  *(_BYTE *)(a1 + 512) = 1;
  v9 = a1;
LABEL_13:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v15 - *(_QWORD *)(v15 - 8));
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

unint64_t physx::shdfnd::PoolBase<physx::Dy::FeatherstoneArticulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;

  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, *(unsigned int *)(a1 + 552) + 71, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  if (result)
  {
    v3 = (result + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v3 - 8) = v3 - result;
  }
  else
  {
    v3 = 0;
  }
  v8 = v3;
  v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 528) + 8 * v4) = v3;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  v5 = (_QWORD *)(v3 + 896 * *(unsigned int *)(a1 + 544) - 896);
  if ((unint64_t)v5 >= v3)
  {
    v6 = *(_QWORD **)(a1 + 560);
    do
    {
      *v5 = v6;
      v7 = v5 - 112;
      v6 = v5;
      v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(_QWORD *)(a1 + 560) = v7 + 112;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>::getName() [T = physx::S"
           "c::ShapeInteraction *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>::getName() [T = "
           "physx::Sc::ElementInteractionMarker *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxFilterInfo,physx::shdfnd::ReflectionAllocator<physx::PxFilterInfo>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxFilterInfo>::getName() [T = physx::PxFilterInfo]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(_DWORD **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = *(_DWORD **)a1;
    v13 = (_DWORD *)result;
    do
    {
      *v13 = *v12;
      v13[1] = v12[1];
      v13 += 2;
      v12 += 2;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::Sc::ShapeCore::ShapeCore(uint64_t a1, uint64_t *a2, _BYTE *a3, const unsigned __int16 *a4, unsigned int a5)
{
  float *v9;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 65) = 1;
  v9 = (float *)physx::Sc::Physics::mInstance;
  physx::Gu::GeometryUnion::set(a1 + 72, a2);
  *(_OWORD *)(a1 + 32) = xmmword_2260E5D70;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(float *)(a1 + 60) = *v9 * 0.02;
  *(_BYTE *)(a1 + 64) = *a3;
  physx::Sc::ShapeCore::setMaterialIndices((char *)a1, a4, a5);
  return a1;
}

char *physx::Sc::ShapeCore::setMaterialIndices(char *this, const unsigned __int16 *__src, unsigned int a3)
{
  int v5;
  _WORD *v6;
  char *v7;
  _BYTE *v8;
  BOOL v9;

  v5 = *((_DWORD *)this + 18);
  *((_WORD *)this + 33) = *__src;
  if (v5 == 6)
  {
    v6 = this + 120;
    v7 = this + 112;
    if (*((unsigned __int16 *)this + 60) < a3)
    {
      v8 = this + 65;
      goto LABEL_7;
    }
  }
  else
  {
    if (v5 != 5)
      return this;
    v6 = this + 144;
    v7 = this + 136;
    if (*((unsigned __int16 *)this + 72) < a3)
    {
      v8 = this + 65;
LABEL_7:
      if (*(_QWORD *)v7)
        v9 = *v8 == 0;
      else
        v9 = 1;
      if (!v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *v6 = 0;
      }
      *(_QWORD *)v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * a3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/GuGeometryUnion.h", 109);
      *((_WORD *)v7 + 4) = a3;
      *v8 = 1;
    }
  }
  this = (char *)memcpy(*(void **)v7, __src, 2 * a3);
  *v6 = a3;
  return this;
}

void physx::Sc::ShapeCore::~ShapeCore(physx::Sc::ShapeCore *this)
{
  int v2;
  char *v3;

  v2 = *((_DWORD *)this + 18);
  if (v2 == 6)
  {
    if (!*((_BYTE *)this + 65))
      return;
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v3 = (char *)this + 120;
    goto LABEL_11;
  }
  if (v2 == 5 && *((_BYTE *)this + 65))
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v3 = (char *)this + 144;
LABEL_11:
    *(_WORD *)v3 = 0;
  }
}

void physx::Sc::ShapeCore::setGeometry(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  unsigned __int16 *v8;
  __int16 *v9;
  int *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  int v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;

  v5 = *(_DWORD *)(a1 + 72);
  v3 = a1 + 72;
  v4 = v5;
  v6 = *(_DWORD *)a2;
  if (v5 == 6)
  {
    v7 = (uint64_t *)(a1 + 112);
    v8 = (unsigned __int16 *)(a1 + 120);
    v9 = (__int16 *)(a1 + 122);
    v10 = (int *)(a1 + 124);
    goto LABEL_5;
  }
  if (v4 == 5)
  {
    v7 = (uint64_t *)(a1 + 136);
    v8 = (unsigned __int16 *)(a1 + 144);
    v9 = (__int16 *)(a1 + 146);
    v10 = (int *)(a1 + 148);
LABEL_5:
    v11 = *v7;
    v12 = *v8;
    v13 = *v9;
    v14 = *v10;
    goto LABEL_7;
  }
  v12 = 0;
  v11 = 0;
  v13 = -12851;
  v14 = -842150451;
LABEL_7:
  v15 = physx::Gu::GeometryUnion::set(v3, a2);
  if ((v6 - 5) > 1)
  {
    if (v12 && *(_BYTE *)(a1 + 65) && v11)
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11, v15);
  }
  else
  {
    if (v6 == 5)
      v16 = 136;
    else
      v16 = 112;
    if (v6 == 5)
      v17 = a1 + 136;
    else
      v17 = a1 + 112;
    if (v12)
    {
      *(_QWORD *)(a1 + v16) = v11;
      *(_WORD *)(v17 + 8) = v12;
      *(_WORD *)(v17 + 10) = v13;
      *(_DWORD *)(v17 + 12) = v14;
    }
    else
    {
      v18 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/GuGeometryUnion.h", 109, v15);
      *(_QWORD *)(a1 + v16) = v18;
      *(_WORD *)(v17 + 8) = 1;
      *v18 = *(_WORD *)(a1 + 66);
      *(_BYTE *)(a1 + 65) = 1;
    }
  }
}

uint64_t physx::Sc::ShapeCore::exportExtraData(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned __int16 *v6;

  v3 = result;
  v4 = *(_DWORD *)(result + 72);
  if (v4 == 6)
  {
    v5 = (_QWORD *)(result + 112);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    v6 = (unsigned __int16 *)(v3 + 120);
  }
  else
  {
    if (v4 != 5)
      return result;
    v5 = (_QWORD *)(result + 136);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    v6 = (unsigned __int16 *)(v3 + 144);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v5, 2 * *v6);
}

physx::Sc::ShapeInteraction *physx::Sc::ShapeInteraction::ShapeInteraction(physx::Sc::ShapeInteraction *this, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  physx::Sc *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  float *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  void *v19;
  int8x8_t v20;
  int v21;
  int8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)this + 1) = v6;
  v8 = (physx::Sc::ShapeInteraction *)((char *)this + 8);
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = -1;
  *((_DWORD *)this + 8) = -1;
  *((_WORD *)this + 18) = 1280;
  *((_BYTE *)this + 38) = 0;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = a3;
  *(_QWORD *)this = off_24ED904B8;
  *((_QWORD *)this + 7) = -1;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = -1;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = -1;
  *((_WORD *)this + 50) = 0;
  v9 = *a4;
  v10 = v9 & 0x7FFF;
  v11 = *(_QWORD **)(v6 + 72);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 80) + 13) - 1 >= 2)
    v12 = 0;
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a3 + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 80) + 13) - 1 >= 2)
    v13 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 80) + 44) & 1) != 0)
  {
    if (!v13)
      goto LABEL_12;
    v14 = (*(_BYTE *)(*(_QWORD *)(v13 + 80) + 44) & 1) == 0;
    if ((v9 & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    v14 = 1;
    if ((v9 & 1) == 0)
      goto LABEL_12;
  }
  if (!v14)
LABEL_12:
    v10 |= 0x40000u;
  if ((v9 & 0x2020202) == 0
    && (v15 = (float *)v11[230], v15[454] == 0.0)
    && v15[455] == 0.0
    && v15[456] == 0.0
    && v15[457] == 0.0)
  {
    v16 = v10 & 0xFFFDFFFF;
  }
  else
  {
    v16 = v10 | 0x20000;
  }
  *((_DWORD *)this + 16) = v16;
  if (a5)
  {
    physx::Sc::ShapeInteraction::onActivate_(this, a5);
  }
  else
  {
    v17 = *(unsigned int *)(v12 + 176);
    ++*(_DWORD *)(*(_QWORD *)(v12 + 136) + 148);
    if (v13)
    {
      v18 = *(_DWORD *)(v13 + 176);
      ++*(_DWORD *)(*(_QWORD *)(v13 + 136) + 148);
    }
    else
    {
      v18 = -128;
    }
    *((_DWORD *)this + 24) = physx::IG::SimpleIslandManager::addContactManager(v11[235], 0, v17, v18, (uint64_t)v8);
    v21 = physx::Sc::activateInteraction(v8, 0, v19, v20);
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 1), v8);
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 2), v8);
    v23 = *((_QWORD *)this + 5);
    v24 = *((_QWORD *)this + 6);
    if (v23 <= v24)
      v25 = *((_QWORD *)this + 5);
    else
      v25 = *((_QWORD *)this + 6);
    if (v23 <= v24)
      v26 = *((_QWORD *)this + 6);
    else
      v26 = *((_QWORD *)this + 5);
    physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(v11[499] + 3704), v25, v26, (uint64_t)this, v22);
    physx::Sc::Scene::registerInteraction((uint64_t)v11, v8, v21);
  }
  return this;
}

uint64_t physx::Sc::ShapeInteraction::onActivate_(physx::Sc::ShapeInteraction *this, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_DWORD *)this + 16) & 0x1DC) != 0 && (*((_DWORD *)this + 16) & 0x400000) != 0)
  {
    physx::Sc::NPhaseCore::addToPersistentContactEventPairs(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 3992), (uint64_t)this);
    *((_DWORD *)this + 16) &= ~0x400000u;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 80) + 13) - 1 >= 2)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v6 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v6 + 80) + 13) - 1 >= 2)
    v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1880) + 888);
  if ((*(_BYTE *)(v7 + (((unint64_t)*(unsigned int *)(v5 + 176) >> 2) & 0x3FFFFFE0) + 4) & 2) == 0
    && (!v6 || (*(_BYTE *)(v7 + (((unint64_t)*(unsigned int *)(v6 + 176) >> 2) & 0x3FFFFFE0) + 4) & 2) == 0))
  {
    return 0;
  }
  if (!*((_QWORD *)this + 11))
  {
    physx::Sc::ShapeInteraction::createManager(this, a2);
    if (!*((_QWORD *)this + 11))
      return 0;
  }
  *((_BYTE *)this + 37) |= 0x20u;
  return 1;
}

void physx::Sc::ShapeInteraction::~ShapeInteraction(physx::Sc::ShapeInteraction *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18[2];

  *(_QWORD *)this = off_24ED904B8;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 80) + 13) - 1 >= 2)
    v2 = 0;
  else
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 80) + 13) - 3;
  --*(_DWORD *)(*(_QWORD *)(v2 + 136) + 148);
  if (v3)
    v5 = v4 >= 0xFFFFFFFE;
  else
    v5 = 0;
  if (v5)
    --*(_DWORD *)(*(_QWORD *)(v3 + 136) + 148);
  if (*((_QWORD *)this + 11))
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 1840) + 1776) + 72))(*(_QWORD *)(*(_QWORD *)(v6 + 1840) + 1776));
    physx::PxsContext::destroyContactManager(*(_QWORD *)(v6 + 1840), *((_QWORD *)this + 11));
    *((_QWORD *)this + 11) = 0;
  }
  v7 = *((_DWORD *)this + 24);
  if (v7 != -1)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
    physx::IG::SimpleIslandManager::removeConnection(*(_QWORD *)(v8 + 1880), v7);
    *((_DWORD *)this + 24) = -1;
    physx::Sc::Scene::unregisterInteraction(v8, (uint64_t)this + 8);
    v9 = *(_QWORD *)(v8 + 3992) + 3704;
    v10 = *((_QWORD *)this + 5);
    v11 = *((_QWORD *)this + 6);
    if (v10 <= v11)
      v12 = *((_QWORD *)this + 5);
    else
      v12 = *((_QWORD *)this + 6);
    if (v10 <= v11)
      v10 = *((_QWORD *)this + 6);
    v18[0] = v12;
    v18[1] = v10;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v9, v18);
  }
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 1), (_QWORD *)this + 1);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 2), (_QWORD *)this + 1);
  v13 = *((unsigned int *)this + 20);
  if ((_DWORD)v13 != -1)
  {
    v14 = *((_DWORD *)this + 16);
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 3992);
    if ((v14 & 0x800000) != 0)
    {
      *((_DWORD *)this + 16) = v14 & 0xFF7FFFFF;
      *((_DWORD *)this + 20) = -1;
      v16 = *(_QWORD *)(v15 + 48);
      v17 = *(_DWORD *)(v15 + 56) - 1;
      *(_DWORD *)(v15 + 56) = v17;
      *(_QWORD *)(v16 + 8 * v13) = *(_QWORD *)(v16 + 8 * v17);
      if (v13 < v17)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v13) + 80) = v13;
    }
    else
    {
      physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(v15, (uint64_t)this);
    }
  }
}

{
  uint64_t v2;

  physx::Sc::ShapeInteraction::~ShapeInteraction(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sc::ShapeInteraction *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Sc::ShapeInteraction::visualize(uint64_t result, _DWORD *a2, uint64_t a3)
{
  float32x2_t *v3;
  float32x2_t *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  float v9;
  float v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float32x2_t *v14;
  int v15;
  int v16;
  float *v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  _BOOL4 v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  int v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  int v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57[3];
  float v58[3];
  float v59[3];
  float v60[3];
  float v61[3];
  float v62[3];
  float32x2_t v63;
  float v64;
  float32x2_t v65;
  __int32 v66;

  if (*(_QWORD *)(result + 88))
  {
    v5 = a3;
    v7 = result;
    v8 = 0;
    v46 = *(_QWORD *)(*(_QWORD *)(result + 8) + 72);
    v9 = -1.0;
    if (*(_QWORD *)(*(_QWORD *)(result + 40) + 8) < *(_QWORD *)(*(_QWORD *)(result + 48) + 8))
      v9 = 1.0;
    v55 = v9;
    v45 = *(float *)(v46 + 4656);
    v10 = v45 * 0.1;
    v47 = result;
    while (1)
    {
      v11 = *(_QWORD *)(v7 + 88);
      if (!v11)
        return result;
      v12 = *(_DWORD *)(v11 + 108);
      if ((v12 & 0x80000000) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 72) + 1840) + 1776);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13);
      }
      else
      {
        result = *(_QWORD *)(v5 + 32) + 32 * (*(_DWORD *)(v5 + 4 * (v12 & 7)) + (v12 >> 3));
      }
      v14 = *(float32x2_t **)(v11 + 64);
      v15 = *(unsigned __int8 *)(result + 24);
      if (!*(_BYTE *)(result + 24))
        goto LABEL_12;
      if (v8)
        break;
      v22 = *(unsigned __int8 *)(result + 25);
      v17 = *(float **)(result + 16);
      v18 = v14 != 0;
      v23 = *(float **)(v46 + 1840);
      v20 = v23[457];
      v54 = v23[455];
      v52 = v23[456];
      v21 = v23[454];
      if (!*(_QWORD *)result)
      {
        v51 = 0;
        goto LABEL_29;
      }
      v4 = *(float32x2_t **)(result + 8);
      v3 = *(float32x2_t **)result;
LABEL_23:
      if ((v3[5].i8[3] & 2) != 0)
        v24 = 64;
      else
        v24 = 16;
      if (v3[5].i8[3] < 0)
        v24 = 32;
      v51 = v24;
LABEL_29:
      v49 = v18;
      v50 = v8;
      if (v22)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v29 = v20 != 0.0 && v17 != 0;
        v53 = v45 * v20;
        while (1)
        {
          if (v26)
          {
            v30 = v3[5].u8[1];
            v31 = v30 > v27;
            LODWORD(v32) = (v30 - v27) * v51;
            if (v31)
              v32 = v32;
            else
              v32 = 0;
            v4 = (float32x2_t *)((char *)v4 + v32);
            v3 += 6;
          }
          if (v3[5].i8[1])
            break;
          v27 = 0;
LABEL_60:
          if (++v26 == v22)
            goto LABEL_61;
        }
        v27 = 0;
        while (2)
        {
          if (v25)
            v33 = v51;
          else
            v33 = 0;
          v4 = (float32x2_t *)((char *)v4 + v33);
          if (v29)
          {
            v34 = v53 * *v17;
            v35 = 16711680;
LABEL_53:
            if (v34 != 0.0)
            {
              a2[8] = 0;
              *a2 = 1;
              a2[1] = v35;
              v56 = v34;
              v65 = *v4;
              v66 = v4[1].i32[0];
              v36 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (float *)&v65);
              v37 = (float)(v55 * (float)(v56 * v3[3].f32[0])) + v4[1].f32[0];
              v63 = vadd_f32(vmul_n_f32(vmul_n_f32(v3[2], v56), v55), *v4);
              v64 = v37;
              result = physx::Cm::RenderOutput::operator<<(v36, (float *)&v63);
            }
          }
          else
          {
            if (v54 != 0.0)
            {
              v35 = 255;
              v34 = v45 * v54;
              goto LABEL_53;
            }
            if (v52 != 0.0)
            {
              v34 = fabsf((float)(v45 * v52) * v4[1].f32[1]);
              v35 = 16776960;
              goto LABEL_53;
            }
          }
          if (v21 != 0.0)
          {
            v39 = v4->f32[0];
            v38 = v4->f32[1];
            v40 = v4[1].f32[0];
            a2[8] = 0;
            *(_QWORD *)a2 = 0xFFFF000000000001;
            v62[0] = v39 - v10;
            v62[1] = v38 + 0.0;
            v62[2] = v40 + 0.0;
            v41 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, v62);
            v61[0] = v10 + v39;
            v61[1] = v38 + 0.0;
            v61[2] = v40 + 0.0;
            physx::Cm::RenderOutput::operator<<(v41, v61);
            v42 = v39 + 0.0;
            v60[0] = v42;
            v60[1] = v38 - v10;
            v60[2] = v40 + 0.0;
            v43 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, v60);
            v59[0] = v42;
            v59[1] = v10 + v38;
            v59[2] = v40 + 0.0;
            physx::Cm::RenderOutput::operator<<(v43, v59);
            v58[0] = v42;
            v58[1] = v38 + 0.0;
            v58[2] = v40 - v10;
            v44 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, v58);
            v57[0] = v42;
            v57[1] = v38 + 0.0;
            v57[2] = v10 + v40;
            result = physx::Cm::RenderOutput::operator<<(v44, v57);
          }
          ++v27;
          v25 = 1;
          if (v27 >= v3[5].u8[1])
            goto LABEL_60;
          continue;
        }
      }
LABEL_61:
      v8 = v49;
      v7 = v47;
      v5 = a3;
      if (v49 == v50)
        return result;
    }
    v15 = 1;
LABEL_12:
    if (!v14)
      return result;
    v16 = v8 - v15 + 1;
    while (--v16)
    {
      v14 = (float32x2_t *)*v14;
      if (!v14)
        return result;
    }
    v3 = v14 + 2;
    v4 = v14 + 8;
    v17 = (float *)((char *)v14 + ((v14[1].u16[0] + 15) & 0x1FFF0));
    if (*v14)
      v18 = v8 + 1;
    else
      v18 = v8;
    v19 = *(float **)(v46 + 1840);
    v20 = v19[457];
    v54 = v19[455];
    v52 = v19[456];
    v21 = v19[454];
    v22 = 1;
    goto LABEL_23;
  }
  return result;
}

uint64_t physx::Sc::ShapeInteraction::setContactReportPostSolverVelocity(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 72) + 3992) + 64) + *a2;
  v3 = *(_QWORD *)(result + 72);
  v5 = *(_QWORD *)(v3 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v5 + 80);
  if (*(_BYTE *)(v6 + 13))
  {
    *(_QWORD *)(v2 + 12) = *(_QWORD *)(v6 + 80);
    *(_DWORD *)(v2 + 20) = *(_DWORD *)(v6 + 88);
    v7 = *(_QWORD *)(v6 + 96);
    v8 = *(_DWORD *)(v6 + 104);
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(v2 + 12) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    v8 = 0;
  }
  *(_QWORD *)(v2 + 36) = v7;
  *(_DWORD *)(v2 + 44) = v8;
  v9 = *(_QWORD *)(v4 + 80);
  if (*(_BYTE *)(v9 + 13))
  {
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(v9 + 80);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)(v9 + 88);
    v10 = *(_QWORD *)(v9 + 96);
    v11 = *(_DWORD *)(v9 + 104);
  }
  else
  {
    v10 = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    v11 = 0;
  }
  *(_QWORD *)(v2 + 48) = v10;
  *(_DWORD *)(v2 + 56) = v11;
  *((_WORD *)a2 + 5) &= ~8u;
  return result;
}

uint64_t physx::Sc::ShapeInteraction::processUserNotificationSync(uint64_t this)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(this + 88))
    __asm { PRFM            #0, [X8] }
  v7 = *(_QWORD *)(this + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 72) + 3992);
    if ((*(_WORD *)v7 & 2) == 0)
    {
      *(_WORD *)v7 |= 2u;
      v14 = v7;
      v9 = *(unsigned int *)(v8 + 16);
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFFFu) <= v9)
      {
        this = physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::growAndPushBack(v8 + 8, &v14);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9) = v7;
        *(_DWORD *)(v8 + 16) = v9 + 1;
      }
      ++*(_WORD *)(v7 + 4);
    }
    if (!*(_QWORD *)(v7 + 24))
    {
      this = (uint64_t)physx::Sc::NPhaseCore::createActorPairContactReportData((pthread_mutex_t **)v8);
      *(_QWORD *)(v7 + 24) = this;
      if (this)
      {
        v10 = *(_QWORD *)(v7 + 8);
        v11 = *(_QWORD *)(v7 + 16);
        v12 = *(_DWORD *)(v11 + 88);
        *(_DWORD *)(this + 16) = *(_DWORD *)(v10 + 88);
        *(_DWORD *)(this + 20) = v12;
        v13 = *(_QWORD *)(v11 + 80) + qword_25582FA18[*(unsigned __int8 *)(*(_QWORD *)(v11 + 80) + 13)];
        *(_QWORD *)(this + 24) = *(_QWORD *)(v10 + 80)
                               + qword_25582FA18[*(unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 13)];
        *(_QWORD *)(this + 32) = v13;
      }
    }
  }
  return this;
}

void physx::Sc::ShapeInteraction::processUserNotificationAsync(uint64_t a1, __int16 a2, __int16 a3, int a4, int a5, int a6, uint64_t a7, physx::Sc::ContactReportAllocationManager *a8)
{
  __int16 v8;
  _QWORD *v9;
  int v11;
  uint64_t v13;
  uint64_t v14;
  physx::Sc::NPhaseCore *v15;
  pthread_mutex_t *v16;
  pthread_mutex_t *ActorPairContactReportData;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int sig_high;
  unsigned __int16 *v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  physx::Sc::NPhaseCore *v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  physx::Sc::NPhaseCore *v42;
  physx::Sc::NPhaseCore *v43;
  int v44;
  uint64_t v45;
  physx::Sc::NPhaseCore *v46;
  uint64_t v47;
  int v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  unsigned __int16 v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  int v123;
  float *v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  unint64_t v154;
  char *v155;
  char *v156;
  __int16 v157;
  __int16 v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  int v171;
  int64x2_t v172;
  __int16 v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  __int16 v177;
  int v178;
  __int16 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  float *v196;
  float *v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  uint64_t v215;
  int v216;
  float *v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  int v235;
  __int16 v236;
  physx::Sc::NPhaseCore *v237;
  __int16 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v244;
  char v247;
  __int16 v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256[8];

  if (a5)
    v8 = a2 | 0x20;
  else
    v8 = a2;
  v9 = *(_QWORD **)(a1 + 72);
  if (!v9)
    return;
  v11 = a5;
  v13 = a1;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v15 = *(physx::Sc::NPhaseCore **)(v14 + 3992);
  v16 = (pthread_mutex_t *)v9[3];
  if (!v16)
  {
    ActorPairContactReportData = physx::Sc::NPhaseCore::createActorPairContactReportData(*(pthread_mutex_t ***)(v14 + 3992));
    v16 = ActorPairContactReportData;
    v9[3] = ActorPairContactReportData;
    if (ActorPairContactReportData)
    {
      v18 = v9[1];
      *(_DWORD *)&ActorPairContactReportData->__opaque[8] = *(_DWORD *)(v18 + 88);
      v19 = v9[2];
      *(_DWORD *)&ActorPairContactReportData->__opaque[12] = *(_DWORD *)(v19 + 88);
      *(_QWORD *)&ActorPairContactReportData->__opaque[16] = *(_QWORD *)(v18 + 80)
                                                           + qword_25582FA18[*(unsigned __int8 *)(*(_QWORD *)(v18 + 80)
                                                                                                + 13)];
      *(_QWORD *)&ActorPairContactReportData->__opaque[24] = *(_QWORD *)(v19 + 80)
                                                           + qword_25582FA18[*(unsigned __int8 *)(*(_QWORD *)(v19 + 80)
                                                                                                + 13)];
    }
  }
  v20 = *(_DWORD *)(v14 + 1992);
  v21 = *(_DWORD *)(v14 + 1996);
  v22 = *(_DWORD *)(v13 + 64);
  v23 = v9[1];
  v24 = *(_QWORD *)(v13 + 40);
  v241 = *(_QWORD *)(v24 + 8);
  if (v23 == v241)
    v25 = *(_QWORD *)(v13 + 40);
  else
    v25 = *(_QWORD *)(v13 + 48);
  if (v23 == v241)
    v24 = *(_QWORD *)(v13 + 48);
  v243 = v25;
  v244 = v24;
  v26 = *(_DWORD *)&v16->__opaque[4];
  *(_DWORD *)&v16->__opaque[4] = v20;
  v247 = a4;
  v248 = v8;
  if (v26 == v20)
  {
    sig_high = HIWORD(v16->__sig);
    if (!HIWORD(v16->__sig))
      goto LABEL_68;
    v28 = (unsigned __int16 *)(*((_QWORD *)v15 + 8) + LODWORD(v16->__sig));
    if ((v22 & 0x7000) != 0 && (v247 & 1) == 0)
    {
      v239 = v23;
      v29 = *(unsigned __int16 *)v16->__opaque;
      if (*(_WORD *)v16->__opaque)
        v30 = *v28;
      else
        v30 = -1;
      if (v30 < v11)
      {
        if ((v22 & 0x1000) != 0)
          v57 = 56;
        else
          v57 = 4;
        if ((v22 & 0x2000) != 0)
          v57 += 52;
        if ((v22 & 0x4000) != 0)
          v57 += 60;
        if (!*(_WORD *)v16->__opaque)
          v57 += 4;
        v58 = v57 + v29;
        v49 = (_WORD *)(*((_QWORD *)v15 + 8) + LODWORD(v16->__sig));
        if (((*(unsigned __int16 *)&v16->__opaque[2] >> 1) & 0x7FF0u) < v58)
        {
          v59 = v58;
          v60 = WORD2(v16->__sig);
          if (sig_high < v60)
            v61 = WORD2(v16->__sig);
          else
            v61 = v60 + 1;
          v62 = (uint64_t)v15;
          v63 = v21;
          v237 = v15;
          v64 = v13;
          v65 = v14;
          v66 = v22;
          v67 = physx::Sc::NPhaseCore::resizeContactReportPairData(v62, v61, v59, (unsigned int *)v16);
          v22 = v66;
          v14 = v65;
          v13 = v64;
          v15 = v237;
          v21 = v63;
          v49 = v67;
        }
        if (v49)
        {
          if (v29)
            v68 = v29;
          else
            v68 = 4;
          v69 = v9[1];
          v70 = v9[2];
          *v49 = v11;
          v71 = (char *)v49 + v68;
          *v71 = 3;
          *((_WORD *)v71 + 1) = sig_high;
          if ((v22 & 0x2000) != 0)
          {
            v71[4] = 1;
            v72 = v71 + 56;
            if (v11)
            {
              v74 = *(_QWORD *)(v69 + 80);
              if (*(_BYTE *)(v74 + 13))
              {
                *((_QWORD *)v71 + 1) = *(_QWORD *)(v74 + 80);
                *((_DWORD *)v71 + 4) = *(_DWORD *)(v74 + 88);
                v75 = *(_QWORD *)(v74 + 96);
                v76 = *(_DWORD *)(v74 + 104);
              }
              else
              {
                v75 = 0;
                *((_QWORD *)v71 + 1) = 0;
                *((_DWORD *)v71 + 4) = 0;
                v76 = 0;
              }
              *((_QWORD *)v71 + 4) = v75;
              *((_DWORD *)v71 + 10) = v76;
              v180 = *(_QWORD *)(v70 + 80);
              v23 = v239;
              if (*(_BYTE *)(v180 + 13))
              {
                *(_QWORD *)(v71 + 20) = *(_QWORD *)(v180 + 80);
                *((_DWORD *)v71 + 7) = *(_DWORD *)(v180 + 88);
                *(_QWORD *)(v71 + 44) = *(_QWORD *)(v180 + 96);
                *((_DWORD *)v71 + 13) = *(_DWORD *)(v180 + 104);
              }
              else
              {
                *(_QWORD *)(v71 + 20) = 0;
                *((_DWORD *)v71 + 7) = 0;
                *(_QWORD *)(v71 + 44) = 0;
                *((_DWORD *)v71 + 13) = 0;
              }
LABEL_150:
              if ((v22 & 0x1000) == 0)
                goto LABEL_168;
              *v72 = 0;
              v181 = *(_QWORD *)(v69 + 80);
              if (*(_BYTE *)(v181 + 13))
              {
                if (v11)
                {
                  v182 = *(uint64_t **)(v69 + 128);
                  if (v182)
                  {
                    v183 = *v182;
                    v184 = *((_DWORD *)v182 + 2);
                    v185 = v182[2];
                    v186 = *((_DWORD *)v182 + 6);
                  }
                  else
                  {
                    v183 = 0;
                    v184 = 0;
                    v186 = 0;
                    v185 = 0;
                  }
                  *(_QWORD *)(v72 + 4) = v183;
                  *((_DWORD *)v72 + 3) = v184;
                  *(_QWORD *)(v72 + 28) = v185;
                  *((_DWORD *)v72 + 9) = v186;
                  if (*(_BYTE *)(*(_QWORD *)(v70 + 80) + 13))
                    goto LABEL_162;
                  goto LABEL_164;
                }
                *(_QWORD *)(v72 + 4) = *(_QWORD *)(v181 + 80);
                *((_DWORD *)v72 + 3) = *(_DWORD *)(v181 + 88);
                *(_QWORD *)(v72 + 28) = *(_QWORD *)(v181 + 96);
                *((_DWORD *)v72 + 9) = *(_DWORD *)(v181 + 104);
                v187 = *(_QWORD *)(v70 + 80);
                if (*(_BYTE *)(v187 + 13))
                {
LABEL_159:
                  *((_QWORD *)v72 + 2) = *(_QWORD *)(v187 + 80);
                  *((_DWORD *)v72 + 6) = *(_DWORD *)(v187 + 88);
                  *((_QWORD *)v72 + 5) = *(_QWORD *)(v187 + 96);
                  v188 = *(_DWORD *)(v187 + 104);
LABEL_167:
                  *((_DWORD *)v72 + 12) = v188;
                  v72 += 52;
LABEL_168:
                  if ((v22 & 0x4000) != 0)
                  {
                    *v72 = 2;
                    v193 = *(_QWORD *)(v69 + 80);
                    v236 = (_WORD)v49 + v68;
                    v238 = v68;
                    v235 = v22;
                    v194 = v21;
                    if (*(_BYTE *)(v193 + 13))
                    {
                      v195 = a6 ^ 1;
                      if (v11)
                        v195 = 1;
                      v196 = (float *)(v69 + 96);
                      if (v195)
                        v197 = v196;
                      else
                        v197 = (float *)(v193 + 16);
                      v198 = *(float *)(v193 + 64) * -2.0;
                      v199 = *(float *)(v193 + 68) * -2.0;
                      v200 = *(float *)(v193 + 72) * -2.0;
                      v202 = *(float *)(v193 + 56);
                      v201 = *(float *)(v193 + 60);
                      v203 = (float)(v201 * v201) + -0.5;
                      v204 = *(float *)(v193 + 48);
                      v205 = *(float *)(v193 + 52);
                      v206 = (float)((float)(v199 * v205) + (float)(v204 * v198)) + (float)(v202 * v200);
                      v249 = -v204;
                      v250 = -v205;
                      v251 = -v202;
                      v252 = v201;
                      v253 = (float)((float)(v198 * v203)
                                   - (float)((float)((float)(v205 * v200) - (float)(v202 * v199)) * v201))
                           + (float)(v204 * v206);
                      v254 = (float)((float)(v199 * v203)
                                   - (float)((float)((float)(v202 * v198) - (float)(v204 * v200)) * v201))
                           + (float)(v205 * v206);
                      v255 = (float)((float)(v200 * v203)
                                   - (float)((float)((float)(v204 * v199) - (float)(v205 * v198)) * v201))
                           + (float)(v202 * v206);
                      v208 = v197[2];
                      v207 = v197[3];
                      v209 = (float)(v207 * v207) + -0.5;
                      v210 = v197[1];
                      v211 = (float)((float)((float)(v254 + v254) * v210) + (float)(*v197 * (float)(v253 + v253)))
                           + (float)(v208 * (float)(v255 + v255));
                      v212 = v197[4]
                           + (float)((float)((float)(v207
                                                   * (float)((float)(v210 * (float)(v255 + v255))
                                                           - (float)(v208 * (float)(v254 + v254))))
                                           + (float)((float)(v253 + v253) * v209))
                                   + (float)(*v197 * v211));
                      v213 = v197[5]
                           + (float)((float)((float)(v207
                                                   * (float)((float)(v208 * (float)(v253 + v253))
                                                           - (float)(*v197 * (float)(v255 + v255))))
                                           + (float)((float)(v254 + v254) * v209))
                                   + (float)(v210 * v211));
                      v214 = v197[6]
                           + (float)((float)((float)(v207
                                                   * (float)((float)(*v197 * (float)(v254 + v254))
                                                           - (float)(v210 * (float)(v253 + v253))))
                                           + (float)((float)(v255 + v255) * v209))
                                   + (float)(v208 * v211));
                      physx::PxQuat::operator*(v197, &v249, v256);
                      *(_OWORD *)(v72 + 4) = *(_OWORD *)v256;
                      *((float *)v72 + 5) = v212;
                      *((float *)v72 + 6) = v213;
                    }
                    else
                    {
                      *(_OWORD *)(v72 + 4) = *(_OWORD *)(v193 + 16);
                      *(_QWORD *)(v72 + 20) = *(_QWORD *)(v193 + 32);
                      v214 = *(float *)(v193 + 40);
                    }
                    *((float *)v72 + 7) = v214;
                    v215 = *(_QWORD *)(v70 + 80);
                    if (*(_BYTE *)(v215 + 13))
                    {
                      v216 = a6 ^ 1;
                      if (v11)
                        v216 = 1;
                      if (v216)
                        v217 = (float *)(v70 + 96);
                      else
                        v217 = (float *)(v215 + 16);
                      v218 = *(float *)(v215 + 64) * -2.0;
                      v219 = *(float *)(v215 + 68) * -2.0;
                      v220 = *(float *)(v215 + 72) * -2.0;
                      v222 = *(float *)(v215 + 56);
                      v221 = *(float *)(v215 + 60);
                      v223 = (float)(v221 * v221) + -0.5;
                      v224 = *(float *)(v215 + 48);
                      v225 = *(float *)(v215 + 52);
                      v226 = (float)((float)(v219 * v225) + (float)(v224 * v218)) + (float)(v222 * v220);
                      v249 = -v224;
                      v250 = -v225;
                      v251 = -v222;
                      v252 = v221;
                      v253 = (float)((float)(v218 * v223)
                                   - (float)((float)((float)(v225 * v220) - (float)(v222 * v219)) * v221))
                           + (float)(v224 * v226);
                      v254 = (float)((float)(v219 * v223)
                                   - (float)((float)((float)(v222 * v218) - (float)(v224 * v220)) * v221))
                           + (float)(v225 * v226);
                      v255 = (float)((float)(v220 * v223)
                                   - (float)((float)((float)(v224 * v219) - (float)(v225 * v218)) * v221))
                           + (float)(v222 * v226);
                      v228 = v217[2];
                      v227 = v217[3];
                      v229 = (float)(v227 * v227) + -0.5;
                      v230 = v217[1];
                      v231 = (float)((float)((float)(v254 + v254) * v230) + (float)(*v217 * (float)(v253 + v253)))
                           + (float)(v228 * (float)(v255 + v255));
                      v232 = v217[4]
                           + (float)((float)((float)(v227
                                                   * (float)((float)(v230 * (float)(v255 + v255))
                                                           - (float)(v228 * (float)(v254 + v254))))
                                           + (float)((float)(v253 + v253) * v229))
                                   + (float)(*v217 * v231));
                      v233 = v217[5]
                           + (float)((float)((float)(v227
                                                   * (float)((float)(v228 * (float)(v253 + v253))
                                                           - (float)(*v217 * (float)(v255 + v255))))
                                           + (float)((float)(v254 + v254) * v229))
                                   + (float)(v230 * v231));
                      v234 = v217[6]
                           + (float)((float)((float)(v227
                                                   * (float)((float)(*v217 * (float)(v254 + v254))
                                                           - (float)(v230 * (float)(v253 + v253))))
                                           + (float)((float)(v255 + v255) * v229))
                                   + (float)(v228 * v231));
                      physx::PxQuat::operator*(v217, &v249, v256);
                      *((_OWORD *)v72 + 2) = *(_OWORD *)v256;
                      *((float *)v72 + 12) = v232;
                    }
                    else
                    {
                      *((_OWORD *)v72 + 2) = *(_OWORD *)(v215 + 16);
                      *((_DWORD *)v72 + 12) = *(_DWORD *)(v215 + 32);
                      v233 = *(float *)(v215 + 36);
                      v234 = *(float *)(v215 + 40);
                    }
                    v21 = v194;
                    v22 = v235;
                    LOWORD(v71) = v236;
                    LOWORD(v68) = v238;
                    *((float *)v72 + 13) = v233;
                    *((float *)v72 + 14) = v234;
                    LOWORD(v72) = (_WORD)v72 + 60;
                  }
                  *(_WORD *)v16->__opaque = v68 + (_WORD)v72 - (_WORD)v71;
                  if ((~v22 & 0x2800) != 0)
                    goto LABEL_113;
LABEL_112:
                  *(_BYTE *)(v14 + 7472) = 1;
                  goto LABEL_113;
                }
              }
              else
              {
                *(_QWORD *)(v72 + 4) = 0;
                *((_DWORD *)v72 + 3) = 0;
                *(_QWORD *)(v72 + 28) = 0;
                *((_DWORD *)v72 + 9) = 0;
                v187 = *(_QWORD *)(v70 + 80);
                if (*(_BYTE *)(v187 + 13))
                {
                  if (v11)
                  {
LABEL_162:
                    v189 = *(uint64_t **)(v70 + 128);
                    if (v189)
                    {
                      v190 = *v189;
                      v191 = *((_DWORD *)v189 + 2);
                      v192 = v189[2];
                      v188 = *((_DWORD *)v189 + 6);
                    }
                    else
                    {
                      v190 = 0;
                      v191 = 0;
                      v188 = 0;
                      v192 = 0;
                    }
                    *((_QWORD *)v72 + 2) = v190;
                    *((_DWORD *)v72 + 6) = v191;
                    *((_QWORD *)v72 + 5) = v192;
                    goto LABEL_167;
                  }
                  goto LABEL_159;
                }
              }
LABEL_164:
              v188 = 0;
              *((_QWORD *)v72 + 2) = 0;
              *((_DWORD *)v72 + 6) = 0;
              *((_QWORD *)v72 + 5) = 0;
              goto LABEL_167;
            }
            *(_WORD *)&v16->__opaque[2] |= 8u;
          }
          else
          {
            v72 = v71 + 4;
          }
          v23 = v239;
          goto LABEL_150;
        }
        *(_WORD *)&v16->__opaque[2] |= 4u;
      }
      v23 = v239;
    }
LABEL_67:
    v49 = v28;
    if (v28)
      goto LABEL_113;
LABEL_68:
    v73 = *(_WORD *)&v16->__opaque[2] | 2;
    goto LABEL_69;
  }
  v31 = WORD2(v16->__sig);
  if (!WORD2(v16->__sig))
  {
    v31 = 2;
    WORD2(v16->__sig) = 2;
  }
  v32 = *(unsigned __int16 *)&v16->__opaque[2];
  if ((v22 & 0x7000) == 0 || a4)
  {
    *(_WORD *)&v16->__opaque[2] &= 0x1Fu;
    v42 = v15;
    v43 = v15;
    v44 = v21;
    v45 = physx::Sc::NPhaseCore::reserveContactReportPairData(v42, v31, 0, (unsigned int *)v16, a8);
    v21 = v44;
    v15 = v43;
    v28 = (unsigned __int16 *)v45;
    *(_DWORD *)((char *)&v16->__sig + 6) = 0;
    *(_WORD *)&v16->__opaque[2] &= 0xFFE0u;
    goto LABEL_67;
  }
  v240 = v13;
  v33 = v14;
  v34 = v15;
  v35 = v11;
  v36 = v23;
  if ((v22 & 0x1000) != 0)
    v37 = 56;
  else
    v37 = 4;
  if ((v22 & 0x2000) != 0)
    v37 += 52;
  if ((v22 & 0x4000) != 0)
    v37 += 60;
  v38 = v37 + 4;
  v39 = v22;
  v40 = v21;
  if (((v32 >> 1) & 0x7FF0) >= v37 + 4)
  {
    v38 = (v32 >> 1) & 0x7FF0;
  }
  else
  {
    v41 = v38 >> 4;
    if ((v38 & 0xF) != 0)
      LOWORD(v41) = v41 + 1;
    *(_WORD *)&v16->__opaque[2] = *(_WORD *)&v16->__opaque[2] & 0x1F | (32 * v41);
  }
  v46 = v34;
  v47 = physx::Sc::NPhaseCore::reserveContactReportPairData(v34, v31, v38, (unsigned int *)v16, a8);
  v48 = v39;
  v14 = v33;
  v13 = v240;
  if (!v47)
    goto LABEL_68;
  v49 = (_WORD *)v47;
  v21 = v40;
  v23 = v36;
  v11 = v35;
  v15 = v46;
  *(_DWORD *)((char *)&v16->__sig + 6) = 0;
  v50 = *(_WORD *)&v16->__opaque[2] & 0xFFE0;
  *(_WORD *)&v16->__opaque[2] = v50;
  v52 = v9[1];
  v51 = v9[2];
  *(_WORD *)v47 = v11;
  *(_BYTE *)(v47 + 4) = 3;
  *(_WORD *)(v47 + 6) = 0;
  if ((v48 & 0x2000) != 0)
  {
    *(_BYTE *)(v47 + 8) = 1;
    v53 = v47 + 60;
    if (v11)
    {
      v54 = *(_QWORD *)(v52 + 80);
      if (*(_BYTE *)(v54 + 13))
      {
        *(_QWORD *)(v47 + 12) = *(_QWORD *)(v54 + 80);
        *(_DWORD *)(v47 + 20) = *(_DWORD *)(v54 + 88);
        v55 = *(_QWORD *)(v54 + 96);
        v56 = *(_DWORD *)(v54 + 104);
      }
      else
      {
        v55 = 0;
        *(_QWORD *)(v47 + 12) = 0;
        *(_DWORD *)(v47 + 20) = 0;
        v56 = 0;
      }
      *(_QWORD *)(v47 + 36) = v55;
      *(_DWORD *)(v47 + 44) = v56;
      v77 = *(_QWORD *)(v51 + 80);
      if (*(_BYTE *)(v77 + 13))
      {
        *(_QWORD *)(v47 + 24) = *(_QWORD *)(v77 + 80);
        *(_DWORD *)(v47 + 32) = *(_DWORD *)(v77 + 88);
        *(_QWORD *)(v47 + 48) = *(_QWORD *)(v77 + 96);
        *(_DWORD *)(v47 + 56) = *(_DWORD *)(v77 + 104);
      }
      else
      {
        *(_QWORD *)(v47 + 24) = 0;
        *(_DWORD *)(v47 + 32) = 0;
        *(_QWORD *)(v47 + 48) = 0;
        *(_DWORD *)(v47 + 56) = 0;
      }
    }
    else
    {
      *(_WORD *)&v16->__opaque[2] = v50 | 8;
    }
  }
  else
  {
    v53 = v47 + 8;
  }
  if ((v48 & 0x1000) != 0)
  {
    *(_BYTE *)v53 = 0;
    v78 = *(_QWORD *)(v52 + 80);
    if (*(_BYTE *)(v78 + 13))
    {
      if (v11)
      {
        v79 = *(uint64_t **)(v52 + 128);
        if (v79)
        {
          v80 = *v79;
          v81 = *((_DWORD *)v79 + 2);
          v82 = v79[2];
          v83 = *((_DWORD *)v79 + 6);
        }
        else
        {
          v80 = 0;
          v81 = 0;
          v83 = 0;
          v82 = 0;
        }
        *(_QWORD *)(v53 + 4) = v80;
        *(_DWORD *)(v53 + 12) = v81;
        *(_QWORD *)(v53 + 28) = v82;
        *(_DWORD *)(v53 + 36) = v83;
        if (*(_BYTE *)(*(_QWORD *)(v51 + 80) + 13))
          goto LABEL_89;
        goto LABEL_91;
      }
      *(_QWORD *)(v53 + 4) = *(_QWORD *)(v78 + 80);
      *(_DWORD *)(v53 + 12) = *(_DWORD *)(v78 + 88);
      *(_QWORD *)(v53 + 28) = *(_QWORD *)(v78 + 96);
      *(_DWORD *)(v53 + 36) = *(_DWORD *)(v78 + 104);
      v84 = *(_QWORD *)(v51 + 80);
      if (*(_BYTE *)(v84 + 13))
      {
LABEL_86:
        *(_QWORD *)(v53 + 16) = *(_QWORD *)(v84 + 80);
        *(_DWORD *)(v53 + 24) = *(_DWORD *)(v84 + 88);
        *(_QWORD *)(v53 + 40) = *(_QWORD *)(v84 + 96);
        v85 = *(_DWORD *)(v84 + 104);
LABEL_94:
        *(_DWORD *)(v53 + 48) = v85;
        v53 += 52;
        goto LABEL_95;
      }
    }
    else
    {
      *(_QWORD *)(v53 + 4) = 0;
      *(_DWORD *)(v53 + 12) = 0;
      *(_QWORD *)(v53 + 28) = 0;
      *(_DWORD *)(v53 + 36) = 0;
      v84 = *(_QWORD *)(v51 + 80);
      if (*(_BYTE *)(v84 + 13))
      {
        if (v11)
        {
LABEL_89:
          v86 = *(uint64_t **)(v51 + 128);
          if (v86)
          {
            v87 = *v86;
            v88 = *((_DWORD *)v86 + 2);
            v89 = v86[2];
            v85 = *((_DWORD *)v86 + 6);
          }
          else
          {
            v87 = 0;
            v88 = 0;
            v85 = 0;
            v89 = 0;
          }
          *(_QWORD *)(v53 + 16) = v87;
          *(_DWORD *)(v53 + 24) = v88;
          *(_QWORD *)(v53 + 40) = v89;
          goto LABEL_94;
        }
        goto LABEL_86;
      }
    }
LABEL_91:
    v85 = 0;
    *(_QWORD *)(v53 + 16) = 0;
    *(_DWORD *)(v53 + 24) = 0;
    *(_QWORD *)(v53 + 40) = 0;
    goto LABEL_94;
  }
LABEL_95:
  if ((v48 & 0x4000) != 0)
  {
    *(_BYTE *)v53 = 2;
    v90 = *(_QWORD *)(v52 + 80);
    if (*(_BYTE *)(v90 + 13))
    {
      v91 = a6 ^ 1;
      if (v11)
        v91 = 1;
      v92 = (float *)(v52 + 96);
      if (!v91)
        v92 = (float *)(v90 + 16);
      v93 = *(float *)(v90 + 64) * -2.0;
      v94 = *(float *)(v90 + 68) * -2.0;
      v95 = *(float *)(v90 + 72) * -2.0;
      v97 = *(float *)(v90 + 56);
      v96 = *(float *)(v90 + 60);
      v98 = (float)(v96 * v96) + -0.5;
      v99 = *(float *)(v90 + 48);
      v100 = *(float *)(v90 + 52);
      v101 = (float)((float)(v94 * v100) + (float)(v99 * v93)) + (float)(v97 * v95);
      v102 = (float)((float)(v93 * v98) - (float)((float)((float)(v100 * v95) - (float)(v97 * v94)) * v96))
           + (float)(v99 * v101);
      v103 = (float)((float)(v94 * v98) - (float)((float)((float)(v97 * v93) - (float)(v99 * v95)) * v96))
           + (float)(v100 * v101);
      v104 = (float)((float)(v95 * v98) - (float)((float)((float)(v99 * v94) - (float)(v100 * v93)) * v96))
           + (float)(v97 * v101);
      v105 = v103 + v103;
      v106 = v104 + v104;
      v108 = v92[2];
      v107 = v92[3];
      v109 = (float)(v107 * v107) + -0.5;
      v110 = v92[1];
      v111 = (float)((float)(v110 * v105) + (float)(*v92 * (float)(v102 + v102))) + (float)(v108 * v106);
      v112 = (float)((float)(v107 * (float)((float)(v110 * v106) - (float)(v108 * v105)))
                   + (float)((float)(v102 + v102) * v109))
           + (float)(*v92 * v111);
      v113 = (float)((float)(v107 * (float)((float)(v108 * (float)(v102 + v102)) - (float)(*v92 * v106)))
                   + (float)(v105 * v109))
           + (float)(v110 * v111);
      v114 = (float)((float)(v107 * (float)((float)(*v92 * v105) - (float)(v110 * (float)(v102 + v102))))
                   + (float)(v106 * v109))
           + (float)(v108 * v111);
      v115 = v92[4] + v112;
      v116 = v92[5] + v113;
      v117 = v92[6] + v114;
      v118 = (float)((float)((float)(v96 * *v92) - (float)(v107 * v99)) - (float)(v110 * v97)) + (float)(v100 * v108);
      v119 = (float)((float)((float)(v96 * v110) - (float)(v107 * v100)) - (float)(v108 * v99)) + (float)(v97 * *v92);
      v120 = (float)((float)((float)(v96 * v108) - (float)(v107 * v97)) - (float)(*v92 * v100)) + (float)(v99 * v110);
      v121 = (float)((float)((float)(v99 * *v92) + (float)(v107 * v96)) + (float)(v110 * v100)) + (float)(v108 * v97);
      *(float *)(v53 + 4) = v118;
      *(float *)(v53 + 8) = v119;
      *(float *)(v53 + 12) = v120;
    }
    else
    {
      *(_QWORD *)(v53 + 4) = *(_QWORD *)(v90 + 16);
      *(_DWORD *)(v53 + 12) = *(_DWORD *)(v90 + 24);
      v121 = *(float *)(v90 + 28);
      v115 = *(float *)(v90 + 32);
      v116 = *(float *)(v90 + 36);
      v117 = *(float *)(v90 + 40);
    }
    *(float *)(v53 + 16) = v121;
    *(float *)(v53 + 20) = v115;
    *(float *)(v53 + 24) = v116;
    *(float *)(v53 + 28) = v117;
    v122 = *(_QWORD *)(v51 + 80);
    if (*(_BYTE *)(v122 + 13))
    {
      v123 = a6 ^ 1;
      if (v11)
        v123 = 1;
      v124 = (float *)(v51 + 96);
      if (!v123)
        v124 = (float *)(v122 + 16);
      v125 = *(float *)(v122 + 64) * -2.0;
      v126 = *(float *)(v122 + 68) * -2.0;
      v127 = *(float *)(v122 + 72) * -2.0;
      v129 = *(float *)(v122 + 56);
      v128 = *(float *)(v122 + 60);
      v130 = (float)(v128 * v128) + -0.5;
      v131 = *(float *)(v122 + 48);
      v132 = *(float *)(v122 + 52);
      v133 = (float)((float)(v126 * v132) + (float)(v131 * v125)) + (float)(v129 * v127);
      v134 = (float)((float)(v125 * v130) - (float)((float)((float)(v132 * v127) - (float)(v129 * v126)) * v128))
           + (float)(v131 * v133);
      v135 = (float)((float)(v126 * v130) - (float)((float)((float)(v129 * v125) - (float)(v131 * v127)) * v128))
           + (float)(v132 * v133);
      v136 = (float)((float)(v127 * v130) - (float)((float)((float)(v131 * v126) - (float)(v132 * v125)) * v128))
           + (float)(v129 * v133);
      v137 = v135 + v135;
      v138 = v136 + v136;
      v140 = v124[2];
      v139 = v124[3];
      v141 = (float)(v139 * v139) + -0.5;
      v142 = v124[1];
      v143 = (float)((float)(v142 * v137) + (float)(*v124 * (float)(v134 + v134))) + (float)(v140 * v138);
      v144 = (float)((float)(v139 * (float)((float)(v142 * v138) - (float)(v140 * v137)))
                   + (float)((float)(v134 + v134) * v141))
           + (float)(*v124 * v143);
      v145 = (float)((float)(v139 * (float)((float)(v140 * (float)(v134 + v134)) - (float)(*v124 * v138)))
                   + (float)(v137 * v141))
           + (float)(v142 * v143);
      v146 = (float)((float)(v139 * (float)((float)(*v124 * v137) - (float)(v142 * (float)(v134 + v134))))
                   + (float)(v138 * v141))
           + (float)(v140 * v143);
      v147 = v124[4] + v144;
      v148 = v124[5] + v145;
      v149 = v124[6] + v146;
      v150 = (float)((float)((float)(v128 * *v124) - (float)(v139 * v131)) - (float)(v142 * v129))
           + (float)(v132 * v140);
      v151 = (float)((float)((float)(v128 * v142) - (float)(v139 * v132)) - (float)(v140 * v131))
           + (float)(v129 * *v124);
      v152 = (float)((float)((float)(v128 * v140) - (float)(v139 * v129)) - (float)(*v124 * v132))
           + (float)(v131 * v142);
      v153 = (float)((float)((float)(v131 * *v124) + (float)(v139 * v128)) + (float)(v142 * v132))
           + (float)(v140 * v129);
      *(float *)(v53 + 32) = v150;
      *(float *)(v53 + 36) = v151;
      *(float *)(v53 + 40) = v152;
    }
    else
    {
      *(_QWORD *)(v53 + 32) = *(_QWORD *)(v122 + 16);
      *(_DWORD *)(v53 + 40) = *(_DWORD *)(v122 + 24);
      v153 = *(float *)(v122 + 28);
      v147 = *(float *)(v122 + 32);
      v148 = *(float *)(v122 + 36);
      v149 = *(float *)(v122 + 40);
    }
    *(float *)(v53 + 44) = v153;
    *(float *)(v53 + 48) = v147;
    *(float *)(v53 + 52) = v148;
    *(float *)(v53 + 56) = v149;
    LOWORD(v53) = v53 + 60;
  }
  *(_WORD *)v16->__opaque = v53 - v47;
  if ((~v48 & 0x2800) == 0)
    goto LABEL_112;
LABEL_113:
  v154 = ((unint64_t)*(unsigned __int16 *)&v16->__opaque[2] >> 1) & 0x7FF0;
  v155 = (char *)v49 + v154;
  if (*(_DWORD *)(v13 + 60) != v21)
  {
    v159 = HIWORD(v16->__sig);
    if (v159 < WORD2(v16->__sig))
    {
      v157 = v248;
LABEL_121:
      v156 = &v155[64 * (unint64_t)v159];
      *(_WORD *)(v13 + 100) = v159;
      v164 = qword_25582F9E0;
      *(_QWORD *)v156 = *(_QWORD *)(v243 + 56) + qword_25582F9E0;
      *((_QWORD *)v156 + 1) = *(_QWORD *)(v244 + 56) + v164;
      *((_OWORD *)v156 + 1) = 0u;
      *((_OWORD *)v156 + 2) = 0u;
      *((_WORD *)v156 + 24) = a3;
      *((_WORD *)v156 + 25) = v157;
      *((_DWORD *)v156 + 13) = *(_DWORD *)(v243 + 64);
      *((_DWORD *)v156 + 14) = *(_DWORD *)(v244 + 64);
      HIWORD(v16->__sig) = v159 + 1;
      *(_DWORD *)(v13 + 60) = v21;
      goto LABEL_122;
    }
    v160 = (uint64_t)v15;
    v161 = v21;
    v162 = physx::Sc::NPhaseCore::resizeContactReportPairData(v160, v159 + (v159 >> 1) + 1, v154, (unsigned int *)v16);
    v163 = *(unsigned __int16 *)&v16->__opaque[2];
    v157 = v248;
    if (v162)
    {
      v155 = &v162[(v163 >> 1) & 0x7FF0];
      v159 = HIWORD(v16->__sig);
      v21 = v161;
      goto LABEL_121;
    }
    v73 = v163 | 4;
LABEL_69:
    *(_WORD *)&v16->__opaque[2] = v73;
    return;
  }
  v156 = &v155[64 * (unint64_t)*(unsigned __int16 *)(v13 + 100)];
  v157 = v248;
  v158 = *((_WORD *)v156 + 25) | v248;
  if ((*(_DWORD *)&v247 & ((v158 & 8) >> 3)) != 0)
    v158 &= ~8u;
  *((_WORD *)v156 + 25) = v158;
  *((_WORD *)v156 + 24) |= a3;
LABEL_122:
  if ((*(_BYTE *)(v13 + 65) & 2) != 0)
  {
    v165 = *(_QWORD *)(v13 + 88);
    if (v165)
    {
      if ((v157 & 0x110) == 0 && !*((_QWORD *)v156 + 2))
      {
        v166 = *(_DWORD *)(v165 + 108);
        if ((v166 & 0x80000000) != 0)
        {
          v168 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 72) + 1840) + 1776);
          v167 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 160))(v168);
        }
        else
        {
          v167 = *(_QWORD *)(a7 + 32) + 32 * (*(_DWORD *)(a7 + 4 * (v166 & 7)) + (v166 >> 3));
        }
        v169 = *(_QWORD *)(v165 + 64);
        if (v11 || (v170 = *(unsigned __int8 *)(v167 + 25), !*(_BYTE *)(v167 + 25)))
        {
          if (!v169 || !v11 || *(_WORD *)(v169 + 10))
            return;
          v172 = vaddq_s64(vdupq_n_s64(v169), (int64x2_t)xmmword_2261A8DD0);
          v176 = *(unsigned __int16 *)(v169 + 8);
          v173 = v176 - 16;
          v175 = ((v176 + 15) & 0x1FFF0u) - 16;
          v174 = v172.i64[0] + v175;
          v171 = 1;
          LOBYTE(v170) = 1;
        }
        else
        {
          v171 = *(unsigned __int8 *)(v167 + 24);
          v172 = *(int64x2_t *)v167;
          v173 = 48 * v170 + 16 * v171;
          v174 = *(_QWORD *)(v167 + 16);
          LODWORD(v175) = 48 * v170 + 16 * v171;
        }
        v177 = *((_WORD *)v156 + 24) | (32 * (v23 != v241));
        v178 = 4 * v171;
        *((int64x2_t *)v156 + 1) = v172;
        if (!v174)
          v178 = 0;
        v156[44] = v171;
        v156[45] = v170;
        if (v178)
          v179 = v177 | 0x10;
        else
          v179 = v177;
        *((_WORD *)v156 + 23) = v173;
        *((_DWORD *)v156 + 10) = v178 + v175;
        *((_QWORD *)v156 + 4) = v174;
        *((_WORD *)v156 + 24) = v179;
      }
    }
  }
}

void physx::Sc::ShapeInteraction::managerNewTouch(physx::Sc::ShapeInteraction *this, int a2, int a3, uint64_t a4, char a5)
{
  int v5;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;

  v5 = *((_DWORD *)this + 16);
  if ((v5 & 0x8000) == 0)
  {
    *((_DWORD *)this + 16) = v5 & 0xFFFE7FFF | 0x8000;
    if (a3)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 80) + 13);
      v11 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(v11 + 80) + 13) - 1 >= 2)
        v11 = 0;
      v12 = *((_QWORD *)this + 9);
      v13 = *(unsigned __int16 *)(v12 + 2);
      *(_WORD *)(v12 + 2) = v13 + 1;
      if ((a5 & 1) != 0 || !v13)
      {
        if ((v10 - 1) >= 2)
          v9 = 0;
        ++*(_DWORD *)(*(_QWORD *)(v9 + 136) + 152);
        if (v11)
          ++*(_DWORD *)(*(_QWORD *)(v11 + 136) + 152);
      }
    }
    if ((v5 & 0x1DC) != 0)
    {
      if ((v5 & 4) != 0)
      {
        v14 = *(_WORD *)(*((_QWORD *)this + 9) + 2) == 1;
        physx::Sc::ShapeInteraction::processUserNotificationSync((uint64_t)this);
        physx::Sc::ShapeInteraction::processUserNotificationAsync((uint64_t)this, 4, 4 * v14, 0, a2, 1, a4, 0);
      }
      if ((v5 & 8) != 0)
      {
        physx::Sc::NPhaseCore::addToPersistentContactEventPairsDelayed(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 3992), (uint64_t)this);
      }
      else if ((v5 & 0x1C0) != 0)
      {
        physx::Sc::NPhaseCore::addToForceThresholdContactEventPairs(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 3992), (uint64_t)this);
      }
    }
  }
}

uint64_t physx::Sc::ShapeInteraction::managerLostTouch(physx::Sc::ShapeInteraction *this, int a2, int a3, uint64_t a4, char a5)
{
  int v5;
  int v9;
  __int16 v10;
  __int16 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  physx::Sc::BodySim *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v5 = *((_DWORD *)this + 16);
  if ((v5 & 0x8000) == 0)
    return 0;
  if ((v5 & 0x1DC) != 0)
  {
    if ((v5 & 0x80000) != 0)
      v9 = 272;
    else
      v9 = 16;
    v10 = v9 & v5;
    if ((v9 & v5) != 0)
    {
      v13 = *(_WORD *)(*((_QWORD *)this + 9) + 2) == 1;
      physx::Sc::ShapeInteraction::processUserNotificationSync((uint64_t)this);
      physx::Sc::ShapeInteraction::processUserNotificationAsync((uint64_t)this, v10, 8 * v13, 1, a2, 0, a4, 0);
    }
    v14 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
    if (v14 && *(_DWORD *)(v14 + 12) == *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1992))
      *(_WORD *)(v14 + 10) |= 0x10u;
    v15 = *((_DWORD *)this + 16);
    if ((v15 & 0xA00000) != 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 3992);
      if ((v15 & 0x800000) != 0)
      {
        v19 = *((unsigned int *)this + 20);
        v17 = v15 & 0xFF7FFFFF;
        *((_DWORD *)this + 20) = -1;
        v20 = *(_QWORD *)(v16 + 48);
        v21 = *(_DWORD *)(v16 + 56) - 1;
        *(_DWORD *)(v16 + 56) = v21;
        *(_QWORD *)(v20 + 8 * v19) = *(_QWORD *)(v20 + 8 * v21);
        if (v19 < v21)
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v19) + 80) = v19;
      }
      else
      {
        physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(v16, (uint64_t)this);
        v17 = *((_DWORD *)this + 16);
      }
      v15 = v17 & 0xFFE7FFFF;
    }
    v18 = v15 & 0xFFFE7FFF;
  }
  else
  {
    v18 = v5 & 0xFFFF7FFF;
  }
  *((_DWORD *)this + 16) = v18 | 0x10000;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 80) + 13) - 1 >= 2)
    v22 = 0;
  else
    v22 = *(physx::Sc::BodySim **)(*((_QWORD *)this + 5) + 8);
  v23 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v23 + 80) + 13) - 1 >= 2)
    v23 = 0;
  if (!a3
    || (v24 = *((_QWORD *)this + 9), v25 = *(_WORD *)(v24 + 2) - 1, *(_WORD *)(v24 + 2) = v25, (a5 & 1) == 0) && v25)
  {
    if (!v23)
      goto LABEL_32;
    return 1;
  }
  --*(_DWORD *)(*((_QWORD *)v22 + 17) + 152);
  if (v23)
  {
    --*(_DWORD *)(*(_QWORD *)(v23 + 136) + 152);
    return 1;
  }
LABEL_32:
  physx::Sc::BodySim::internalWakeUp(v22, 0.4);
  return 0;
}

uint64_t physx::Sc::ShapeInteraction::updateState(uint64_t this, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  float *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v3 = this;
  v4 = this + 8;
  v5 = *(_DWORD *)(this + 64);
  v6 = *(_BYTE *)(this + 38) | a2;
  v7 = *(_QWORD *)(*(_QWORD *)(this + 8) + 72);
  if ((v6 & 0x21) == 0)
    goto LABEL_28;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 80) + 13) - 1 >= 2)
    v8 = 0;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(this + 48) + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v9 + 80) + 13) - 1 >= 2)
    v9 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 80) + 44) & 1) != 0)
  {
    if (!v9)
      goto LABEL_14;
    v10 = (*(_BYTE *)(*(_QWORD *)(v9 + 80) + 44) & 1) == 0;
    if ((v5 & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    v10 = 1;
    if ((v5 & 1) == 0)
      goto LABEL_14;
  }
  if (!v10)
  {
LABEL_14:
    v11 = v5 | 0x40000;
    goto LABEL_15;
  }
  v11 = v5 & 0xFFFBFFFF;
LABEL_15:
  if ((v5 & 0x202) == 0
    && (v12 = *(float **)(v7 + 1840), v12[454] == 0.0)
    && v12[455] == 0.0
    && v12[456] == 0.0
    && v12[457] == 0.0)
  {
    v13 = v11 & 0xFFFDFFFF;
  }
  else
  {
    v13 = v11 | 0x20000;
  }
  *(_DWORD *)(this + 64) = v13;
  v14 = v13 & 0x40000;
  if ((v5 & 0x40000) != 0 || !v14)
  {
    if ((v5 & 0x40000) != 0 && !v14 && (v13 & 0x8000) != 0)
      this = (uint64_t)physx::IG::SimpleIslandManager::setEdgeConnected(*(_QWORD **)(v7 + 1880), *(unsigned int *)(this + 96), a3);
  }
  else
  {
    this = physx::IG::SimpleIslandManager::setEdgeDisconnected(*(_QWORD *)(v7 + 1880), *(_DWORD *)(this + 96));
  }
LABEL_28:
  v15 = *(_DWORD *)(v3 + 64);
  if (((v15 ^ v5) & 0x601DE) != 0 || (v22 = *(_QWORD *)(v3 + 88)) == 0)
  {
    if ((*(_BYTE *)(v3 + 37) & 0x20) != 0)
    {
      if ((v6 & 5) != 0)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 72);
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 80) + 13) - 1 >= 2)
          v17 = 0;
        else
          v17 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
        v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8);
        if (*(unsigned __int8 *)(*(_QWORD *)(v18 + 80) + 13) - 1 >= 2)
          v18 = 0;
        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 1880) + 888);
        if ((*(_BYTE *)(v19 + (((unint64_t)*(unsigned int *)(v17 + 176) >> 2) & 0x3FFFFFE0) + 4) & 0x22) == 0
          && (!v18
           || (*(_BYTE *)(v19 + (((unint64_t)*(unsigned int *)(v18 + 176) >> 2) & 0x3FFFFFE0) + 4) & 0x22) == 0))
        {
          physx::Sc::ShapeInteraction::onDeactivate_((physx::Sc::ShapeInteraction *)v3);
          return physx::Sc::Scene::notifyInteractionDeactivated(v7, v4);
        }
        v20 = *(_DWORD *)(v3 + 96);
        if (v20 != -1)
        {
          physx::IG::SimpleIslandManager::clearEdgeRigidCM(*(_QWORD *)(v7 + 1880), v20);
          v16 = *(_QWORD *)(*(_QWORD *)v4 + 72);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 1840) + 1776) + 72))(*(_QWORD *)(*(_QWORD *)(v16 + 1840) + 1776), *(_QWORD *)(v3 + 88));
        v21 = *(_QWORD *)(v16 + 1840);
      }
      else
      {
        v31 = *(_DWORD *)(v3 + 96);
        if (v31 != -1)
          physx::IG::SimpleIslandManager::clearEdgeRigidCM(*(_QWORD *)(v7 + 1880), v31);
        v32 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 72);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v32 + 1840) + 1776) + 72))(*(_QWORD *)(*(_QWORD *)(v32 + 1840) + 1776), *(_QWORD *)(v3 + 88));
        v21 = *(_QWORD *)(v32 + 1840);
      }
      physx::PxsContext::destroyContactManager(v21, *(_QWORD *)(v3 + 88));
      *(_QWORD *)(v3 + 88) = 0;
      return physx::Sc::ShapeInteraction::createManager((physx::Sc::ShapeInteraction *)v3, 0);
    }
  }
  else
  {
    v23 = *(_QWORD *)(v3 + 40);
    v24 = *(_QWORD *)(v3 + 48);
    if ((v6 & 8) != 0)
    {
      v25 = *(_QWORD *)(v23 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(v25 + 80) + 13) - 1 >= 2)
        v25 = 0;
      v26 = *(_QWORD *)(v24 + 8);
      v27 = *(_QWORD *)(v26 + 80);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v25 + 80) + 14);
      if (v26)
        v29 = *(unsigned __int8 *)(v27 + 13) - 3 >= 0xFFFFFFFE;
      else
        v29 = 0;
      if (v29)
        v30 = *(unsigned __int8 *)(v27 + 14);
      else
        v30 = 0;
      v33 = *(_QWORD *)(*(_QWORD *)v4 + 72) + 4528;
      v34 = *(_DWORD *)(v33 + 4 * v28);
      LODWORD(v33) = *(_DWORD *)(v33 + 4 * v30);
      *(_BYTE *)(v22 + 84) = (v34 >> v30) & 1;
      *(_BYTE *)(v22 + 85) = (v33 >> v28) & 1;
    }
    if ((v6 & 5) != 0)
    {
      v35 = *(_QWORD *)(v24 + 8);
      v36 = *(_QWORD *)(v35 + 80);
      if (v35 && *(unsigned __int8 *)(v36 + 13) - 3 >= 0xFFFFFFFE)
        *(_WORD *)(v22 + 80) = *(_WORD *)(v22 + 80) & 0xFBFF | ((*(_BYTE *)(v36 + 44) & 1) << 10);
    }
    if ((v6 & 0x10) != 0)
      *(float *)(v22 + 92) = *(float *)(*(_QWORD *)(v23 + 56) + 160) + *(float *)(*(_QWORD *)(v24 + 56) + 160);
    *(_DWORD *)(v22 + 16) = *(_DWORD *)(v22 + 16) & 0xFFFFFFF9 | (v15 >> 10) & 2;
  }
  return this;
}

uint64_t physx::Sc::ShapeInteraction::onDeactivate_(physx::Sc::ShapeInteraction *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  unsigned int v14;

  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 80) + 13) - 1 >= 2)
    v1 = 0;
  else
    v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v2 + 80) + 13) - 1 >= 2)
    v2 = 0;
  if (*(_DWORD *)(v1 + 184) < 0xFFFFFFFE || v2 && *(_DWORD *)(v2 + 184) < 0xFFFFFFFE)
    return 0;
  v5 = *((unsigned int *)this + 20);
  if ((_DWORD)v5 != -1)
  {
    v6 = *((_DWORD *)this + 16);
    *((_DWORD *)this + 16) = (2 * v6) & 0x400000 | v6;
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 3992);
    if ((v6 & 0x800000) != 0)
    {
      *((_DWORD *)this + 16) = (2 * v6) & 0x400000 | v6 & 0xFF7FFFFF;
      *((_DWORD *)this + 20) = -1;
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_DWORD *)(v7 + 56) - 1;
      *(_DWORD *)(v7 + 56) = v9;
      *(_QWORD *)(v8 + 8 * v5) = *(_QWORD *)(v8 + 8 * v9);
      if (v5 < v9)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v5) + 80) = v5;
    }
    else
    {
      physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(v7, (uint64_t)this);
    }
  }
  v10 = *((_QWORD *)this + 11);
  if (v10)
  {
    v11 = *((_DWORD *)this + 16);
    if ((v11 & 0x18000) == 0 && (*(_BYTE *)(v10 + 83) & 3) != 0 && (*(_BYTE *)(v10 + 83) & 2) == 0)
      *((_DWORD *)this + 16) = v11 | 0x10000;
    v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 1840) + 1776) + 72))(*(_QWORD *)(*(_QWORD *)(v13 + 1840) + 1776));
    physx::PxsContext::destroyContactManager(*(_QWORD *)(v13 + 1840), *((_QWORD *)this + 11));
    *((_QWORD *)this + 11) = 0;
    v14 = *((_DWORD *)this + 24);
    if (v14 != -1)
      physx::IG::SimpleIslandManager::clearEdgeRigidCM(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1880), v14);
  }
  physx::IG::SimpleIslandManager::deactivateEdge(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1880), *((_DWORD *)this + 24));
  *((_BYTE *)this + 37) &= ~0x20u;
  return 1;
}

uint64_t physx::Sc::ShapeInteraction::createManager(physx::Sc::ShapeInteraction *this, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  __int16 v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  unsigned int v37;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  v5 = *((_DWORD *)this + 16);
  result = physx::PxsContext::createContactManager(*(_QWORD *)(v4 + 1840), a2, (v5 >> 11) & 1);
  v7 = v5 & 2;
  v9 = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 6);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(unsigned __int8 *)(v11 + 13);
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 80);
  v14 = *(unsigned __int8 *)(v13 + 13);
  v15 = *((_DWORD *)this + 16);
  v16 = v15 & 0x40000;
  if ((v5 & 0x1C0) != 0)
    v17 = (v15 >> 18) & 1;
  else
    v17 = 1;
  if ((v15 & 0x8000) != 0)
    v18 = 1;
  else
    v18 = -1;
  v19 = v15 & 0x18000;
  if ((v15 & 0x18000) == 0)
    v18 = 0;
  if ((v12 - 1) >= 2)
    v10 = 0;
  if ((v14 - 1) >= 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v8 + 8);
  v21 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 14);
  if (v20)
  {
    v22 = *(_QWORD *)(v20 + 80);
    v23 = *(unsigned __int8 *)(v22 + 14);
    v24 = *(_BYTE *)(v22 + 44) & 1;
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  if (v20)
    v25 = v20 + 96;
  else
    v25 = 0;
  if (v14 == 2)
    v26 = (8 * (v12 == 2)) | 0x10;
  else
    v26 = 8 * (v12 == 2);
  if (*(_BYTE *)(v11 + 13))
    v27 = v26 | 0x20;
  else
    v27 = v26;
  if (*(_BYTE *)(v13 + 13))
    v27 |= 0x40u;
  if (!(v16 | v7))
    v27 |= 2u;
  v28 = v27 | (v5 >> 1) & 0x200;
  if (v24)
    LOWORD(v28) = v28 | 0x400;
  if (v16)
    v29 = v28 | 0x800;
  else
    v29 = v28;
  if ((v5 & 0x800) != 0)
    v29 |= 0x1000u;
  if (v17)
    v30 = v29 | ((v15 & 0x20000 | v7) != 0);
  else
    v30 = v29 | ((v15 & 0x20000 | v7) != 0) | 0x100;
  v35 = (*((_DWORD *)this + 16) & 0x8000) == 0;
  v31 = (*(_DWORD *)(v4 + 4528 + 4 * v21) >> v23) & 1;
  v32 = (*(_DWORD *)(v4 + 4528 + 4 * v23) >> v21) & 1;
  v33 = *(_QWORD *)(v9 + 56);
  v34 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)result = v10 + 96;
  *(_QWORD *)(result + 8) = v25;
  *(_QWORD *)(result + 48) = v33 + 32;
  *(_QWORD *)(result + 56) = v34 + 32;
  *(_QWORD *)(result + 24) = this;
  *(_QWORD *)(result + 32) = v11 + 16;
  *(_QWORD *)(result + 40) = v13 + 16;
  *(float *)(result + 92) = *(float *)(v33 + 160) + *(float *)(v34 + 160);
  *(_BYTE *)(result + 84) = v31;
  *(_BYTE *)(result + 85) = v32;
  *(_BYTE *)(result + 86) = *(_DWORD *)(v33 + 72);
  *(_BYTE *)(result + 87) = *(_DWORD *)(v34 + 72);
  *(_DWORD *)(result + 96) = *(_DWORD *)(v9 + 16) & 0x7FFFFFFF;
  *(_DWORD *)(result + 100) = *(_DWORD *)(v8 + 16) & 0x7FFFFFFF;
  *(int8x8_t *)(result + 112) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v33 + 164), *(float32x2_t *)(v34 + 164)), *(int8x8_t *)(v33 + 164), *(int8x8_t *)(v34 + 164));
  *(_WORD *)(result + 80) = v30 | ((_WORD)v7 << 6);
  *(_DWORD *)(result + 16) = (v5 >> 1) & 1 | ((unsigned __int16)(v5 & 0x800) >> 10);
  *(_DWORD *)(result + 108) = -1;
  *((_QWORD *)this + 11) = result;
  v35 = !v35 || v19 == 0;
  v36 = !v35;
  if (v18 > 0)
    v36 = 2;
  *(_BYTE *)(result + 83) = v36;
  if (!a2)
  {
    v37 = *((_DWORD *)this + 24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 1880) + 176)
                          + 8 * (v37 / *(_DWORD *)(*(_QWORD *)(v4 + 1880) + 200)))
              + 8 * (v37 % *(_DWORD *)(*(_QWORD *)(v4 + 1880) + 200))) = result;
    *(_DWORD *)(result + 104) = v37;
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 1840) + 1776) + 56))(*(_QWORD *)(*(_QWORD *)(v4 + 1840) + 1776), *((_QWORD *)this + 11));
  }
  return result;
}

uint64_t physx::Sc::ShapeInteraction::onShapeChangeWhileSleeping(uint64_t this, int a2)
{
  physx::Sc::BodySim *v3;
  int v4;
  physx::Sc::BodySim *v5;

  if (!*(_QWORD *)(this + 88))
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 80) + 13) - 1 >= 2
       ? 0
       : *(physx::Sc::BodySim **)(*(_QWORD *)(this + 40) + 8);
    if (a2)
    {
      v4 = *(_DWORD *)(this + 64);
      if ((v4 & 0x18000) == 0)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 48) + 8) + 80) + 13)
           - 1 >= 2)
          v5 = 0;
        else
          v5 = *(physx::Sc::BodySim **)(*(_QWORD *)(this + 48) + 8);
        if ((v4 & 0x40000) == 0)
        {
          if (v5)
            return physx::Sc::Scene::addToLostTouchList(*(_QWORD *)(*(_QWORD *)(this + 8) + 72), v3, v5);
        }
      }
    }
  }
  return this;
}

void physx::Sc::ShapeSim::initSubsystemsDependingOnElementID(physx::Sc::ShapeSim *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int32x4_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x4_t v24;
  uint64_t v25;
  char v26;
  float v27;
  int BPGroup;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  float32x4_t v40;
  uint64_t v41;
  __int32 v42;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  v3 = *(_QWORD *)(v2 + 2064);
  v4 = *((_DWORD *)this + 4) & 0x7FFFFFFF;
  physx::Sc::ShapeSim::getAbsPoseAligned((uint64_t)this, &v40);
  v16 = *(_QWORD *)(*(_QWORD *)(v2 + 1840) + 2592);
  v17 = *(_DWORD *)(v16 + 20) & 0x7FFFFFFF;
  if (v17 <= v4)
  {
    v18 = v4 | (v4 >> 1) | ((v4 | (v4 >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    v20 = v19 | HIWORD(v19);
    v21 = v20 + 1;
    if (v17 <= v20)
      physx::shdfnd::Array<physx::PxsCachedTransform,physx::shdfnd::VirtualAllocator>::recreate(*(_QWORD **)(*(_QWORD *)(v2 + 1840) + 2592), v20 + 1);
    *(_DWORD *)(v16 + 16) = v21;
  }
  v22 = *(_DWORD *)(v16 + 24);
  if (v22 <= (int)v4 + 1)
    v22 = v4 + 1;
  *(_DWORD *)(v16 + 24) = v22;
  v23 = (float32x4_t *)(*(_QWORD *)(v16 + 8) + 32 * v4);
  v24.i64[1] = v40.i64[1];
  *v23 = v40;
  v24.i32[1] = HIDWORD(v41);
  v23[1].i64[0] = v41;
  v23[1].i32[2] = v42;
  v23[1].i32[3] = 0;
  *(_BYTE *)(v16 + 28) = 1;
  v24.i32[0] = 0;
  v9.i32[0] = 1.0;
  physx::Gu::computeBounds((float32x2_t *)(*(_QWORD *)(v3 + 8) + 24 * v4), *((_QWORD *)this + 7) + 72, (uint64_t)&v40, 0, v24, v9, v10, v11, v12, v13, v14, v15, v5, v6, v7, v8, v40.i8[0]);
  *(_BYTE *)(v3 + 24) = 1;
  v25 = *((_QWORD *)this + 7);
  v26 = *(_BYTE *)(v25 + 64);
  if ((v26 & 5) != 0)
  {
    v27 = *(float *)(v25 + 60);
    BPGroup = physx::Sc::ShapeSim::getBPGroup(this);
    physx::Sc::ElementSim::addToAABBMgr((uint64_t)this, BPGroup, v26 & 4, v27, v29, v30, v31, v32, v33, v40.i8[0]);
  }
  else
  {
    physx::Bp::AABBManager::reserveSpaceForBounds(*(physx::Bp::AABBManager **)(v2 + 1848), v4);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 2072) + 8) + 4 * v4) = *(_DWORD *)(*((_QWORD *)this + 7) + 60);
  *(_BYTE *)(v2 + 2080) = 1;
  v34 = *(_DWORD *)(v2 + 4520);
  if (v4 >= 32 * v34)
  {
    v35 = (v34 << 6) | 2;
    if ((int)v4 + 1 <= v35)
      v36 = v35;
    else
      v36 = v4 + 1;
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 4512, v36);
  }
  v37 = *((_QWORD *)this + 1);
  v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 80) + 13);
  if ((v38 - 1) <= 1 && *(_DWORD *)(v37 + 184) <= 0xFFFFFFFD)
  {
    physx::Sc::ShapeSim::createSqBounds((uint64_t)this);
    v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 80) + 13);
  }
  *((_DWORD *)this + 9) = v4;
  *((_QWORD *)this + 3) = *((_QWORD *)this + 7) + 32;
  if (v38)
    v39 = *(_DWORD *)(*((_QWORD *)this + 1) + 176);
  else
    v39 = -128;
  *((_DWORD *)this + 8) = v39;
}

float32x4_t physx::Sc::ShapeSim::getAbsPoseAligned(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int8x8_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int8x8_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int8x8_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t result;

  v2 = *(float32x4_t **)(a1 + 56);
  v3 = *(float32x4_t **)(*(_QWORD *)(a1 + 8) + 80);
  if (v3->i8[13] && !v3[2].i8[13])
  {
    v25.i64[0] = v2[3].i64[0];
    v25.i64[1] = v2[3].u32[2];
    v26 = v2[2];
    v27.i64[0] = v3[4].i64[0];
    v27.i64[1] = v3[4].u32[2];
    v4.i64[0] = v3[2].i64[0];
    v4.i64[1] = v3[2].u32[2];
    v28 = v3[3];
    v29 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v28, 3).u64[0];
    v30 = v28;
    v30.i32[3] = 0;
    v31 = v3[1];
    v32 = v26;
    v32.i32[3] = 0;
    v33 = vmulq_f32(v32, v30);
    v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
    *(float32x2_t *)v33.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v26, 3), v29);
    v34 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v35 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v36 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v35, 4uLL);
    v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.f32, v36), (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v34, 4uLL), *(float32x2_t *)v28.f32);
    *(int8x8_t *)v38.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32(v34, *(float32x2_t *)v28.f32), *(float32x2_t *)v26.f32, v35), 4uLL);
    v38.i64[1] = v37.u32[0];
    v39 = vmlaq_laneq_f32(v38, v32, v28, 3);
    v39.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u32[0];
    v40 = vmlsq_laneq_f32(v39, v30, v26, 3);
    v41 = v31;
    v41.i32[3] = 0;
    v42 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v43 = (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)v42, 4uLL);
    v44 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL)), v43, *(float32x2_t *)v40.f32);
    v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
    v45 = vsubq_f32(v25, v27);
    v46 = vmulq_n_f32(v45, vmla_f32((float32x2_t)0xBF000000BF000000, v29, v29).f32[0]);
    v46.i32[3] = 0;
    v47 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v45.f32, v36), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), *(float32x2_t *)v28.f32);
    *(int8x8_t *)v48.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), *(float32x2_t *)v45.f32, v35), 4uLL);
    v48.i64[1] = v47.u32[0];
    v49 = vmlaq_laneq_f32(v46, v48, v28, 3);
    v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
    v50 = vmulq_f32(v30, v45);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    v51 = vmlaq_n_f32(v49, v30, vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32).f32[0]);
    v30.i64[0] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
    *(float32x2_t *)v28.f32 = vadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
    v51.i64[1] = v30.u32[0];
    v52 = vaddq_f32(v51, v51);
    v53 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v31, 3).u64[0];
    v54 = vmulq_f32(v41, v40);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    v17 = vsub_f32(vmul_laneq_f32(*(float32x2_t *)v33.f32, v31, 3), vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32));
    *(int8x8_t *)v50.f32 = vext_s8(v44, (int8x8_t)vmls_f32(vmul_f32(v42, *(float32x2_t *)v40.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)&v40.u32[2]), 4uLL);
    v50.i64[1] = v44.u32[0];
    v55 = vmlaq_laneq_f32(v50, v40, v31, 3);
    v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
    v18 = vmlaq_n_f32(v55, v41, v33.f32[0]);
    v56 = vmulq_n_f32(v52, vmla_f32((float32x2_t)0xBF000000BF000000, v53, v53).f32[0]);
    v56.i32[3] = 0;
    *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
    *(float32x2_t *)v48.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, *(int8x8_t *)v30.f32, 4uLL)), v43, *(float32x2_t *)v28.f32);
    *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)vmls_f32(vmul_f32(v42, *(float32x2_t *)v28.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)v30.f32), 4uLL);
    v30.i64[1] = v48.u32[0];
    v57 = vmlaq_laneq_f32(v56, v30, v31, 3);
    v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
    v58 = vmulq_f32(v41, v52);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    v24 = vmlaq_n_f32(v57, v41, vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0]);
  }
  else
  {
    v4.i64[0] = v3[2].i64[0];
    v4.i64[1] = v3[2].u32[2];
    v5 = v3[1];
    v6.i64[0] = v2[3].i64[0];
    v6.i64[1] = v2[3].u32[2];
    v7 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v5, 3).u64[0];
    v8 = v2[2];
    v9 = v5;
    v9.i32[3] = 0;
    v10 = v8;
    v10.i32[3] = 0;
    v11 = vmulq_f32(v9, v10);
    v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
    v12 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    v13 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v11.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v14 = (float32x2_t)vext_s8(*(int8x8_t *)v5.f32, (int8x8_t)v13, 4uLL);
    v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)vext_s8(*(int8x8_t *)v8.f32, *(int8x8_t *)v11.f32, 4uLL)), v14, *(float32x2_t *)v8.f32);
    *(int8x8_t *)v11.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v8.f32), *(float32x2_t *)v5.f32, *(float32x2_t *)v11.f32), 4uLL);
    v11.i64[1] = v15.u32[0];
    v16 = vmlaq_laneq_f32(v11, v10, v5, 3);
    v17 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL)), v12);
    v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
    v18 = vmlaq_laneq_f32(v16, v9, v8, 3);
    v19 = vmulq_n_f32(v6, vmla_f32((float32x2_t)0xBF000000BF000000, v7, v7).f32[0]);
    v19.i32[3] = 0;
    v8.i64[0] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
    v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)vext_s8(*(int8x8_t *)v6.f32, *(int8x8_t *)v8.f32, 4uLL)), v14, *(float32x2_t *)v6.f32);
    *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v6.f32), *(float32x2_t *)v5.f32, *(float32x2_t *)v8.f32), 4uLL);
    v21.i64[1] = v20.u32[0];
    v22 = vmlaq_laneq_f32(v19, v21, v5, 3);
    v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
    v23 = vmulq_f32(v9, v6);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    v24 = vmlaq_n_f32(v22, v9, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
  }
  v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
  v59.i64[0] = 0x4000000040000000;
  v59.i64[1] = 0x4000000040000000;
  result = vmlaq_f32(v4, v59, v24);
  a2[1].i64[0] = result.i64[0];
  a2[1].i32[2] = result.i32[2];
  v18.i32[3] = v17.i32[1];
  *a2 = v18;
  return result;
}

uint64_t physx::Sc::ShapeSim::createSqBounds(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_DWORD *)(this + 68) == -1)
  {
    v1 = *(_QWORD *)(this + 8);
    if (*(unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 13) - 1 >= 2)
      v2 = 0;
    else
      v2 = *(_QWORD *)(this + 8);
    if ((~*(unsigned __int8 *)(*(_QWORD *)(v2 + 80) + 44) & 3) != 0
      && (*(_WORD *)(v2 + 124) & 1) == 0
      && *(_DWORD *)(v2 + 184) <= 0xFFFFFFFD
      && (*(_WORD *)(v2 + 180) & 0x1000) == 0
      && (*(_BYTE *)(*(_QWORD *)(this + 56) + 64) & 2) != 0)
    {
      return physx::Sc::SqBoundsManager::addShape(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 2088), (physx::Sc::ShapeSim *)this);
    }
  }
  return this;
}

physx::Sc::ShapeSim *physx::Sc::ShapeSim::ShapeSim(physx::Sc::ShapeSim *this, physx::Sc::RigidSim *a2, const physx::Sc::ShapeCore *a3)
{
  physx::Sc::ElementSim *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v5 = physx::Sc::ElementSim::ElementSim(this, a2);
  *((_DWORD *)v5 + 8) = -128;
  *((_QWORD *)v5 + 7) = a3;
  *((_DWORD *)v5 + 17) = -1;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 72) + 4280);
  v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * (v7 - 1));
    *(_DWORD *)(v6 + 24) = v8;
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v6 + 8) = v9 + 1;
  }
  *((_DWORD *)this + 16) = v9;
  physx::Sc::ShapeSim::initSubsystemsDependingOnElementID(this);
  return this;
}

void physx::Sc::ShapeSim::~ShapeSim(physx::Sc::ShapeSim *this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(uint64_t **)(*((_QWORD *)this + 1) + 72);
  *(_DWORD *)(v2[564] + 4 * (((unint64_t)*((unsigned int *)this + 4) >> 5) & 0x3FFFFFF)) &= ~(1 << *((_DWORD *)this + 4));
  if (*((_DWORD *)this + 17) != -1)
    physx::Sc::SqBoundsManager::removeShape(v2[261], this);
  v3 = v2[535];
  v4 = *((unsigned int *)this + 16);
  v6 = v4;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v3 + 32, v4 + 1);
  *(_DWORD *)(*(_QWORD *)(v3 + 32) + ((v4 >> 3) & 0x1FFFFFFC)) |= 1 << v4;
  v5 = *(unsigned int *)(v3 + 56);
  if ((*(_DWORD *)(v3 + 60) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 48, &v6);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v5) = v4;
    ++*(_DWORD *)(v3 + 56);
  }
  physx::Sc::ElementSim::~ElementSim(this);
}

uint64_t physx::Sc::ShapeSim::getBPGroup(physx::Sc::ShapeSim *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  unsigned int v6;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(unsigned __int8 *)(v2 + 13);
  if (v1)
    v4 = (v3 - 3) >= 0xFFFFFFFE;
  else
    v4 = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v2 + 44) & 1) != 0)
      v5 = 1;
    else
      v5 = 2;
  }
  else
  {
    v5 = 2;
  }
  v6 = (4 * *(_DWORD *)(v1 + 88) + 4) | v5;
  if (v3)
    return v6;
  else
    return 0;
}

physx::Sc::ElementSim *physx::Sc::ShapeSim::removeFromBroadPhase(physx::Sc::ElementSim *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD v6[5];

  if ((*((_DWORD *)this + 4) & 0x80000000) != 0)
  {
    v3 = (uint64_t)this;
    physx::Sc::ElementSim::removeFromAABBMgr(this);
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 72);
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v4 + 1840) + 1776) + 168))(v6);
    if (a2)
      v5 = 4;
    else
      v5 = 0;
    return (physx::Sc::ElementSim *)physx::Sc::NPhaseCore::onVolumeRemoved(*(_BYTE **)(v4 + 3992), v3, v5, (uint64_t)v6, (*(_DWORD *)(v4 + 4268) & 8) != 0);
  }
  return this;
}

uint64_t physx::Sc::ShapeSim::reinsertBroadPhase(physx::Sc::ShapeSim *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v19[5];

  if ((*((_DWORD *)this + 4) & 0x80000000) != 0)
  {
    physx::Sc::ElementSim::removeFromAABBMgr(this);
    v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v2 + 1840) + 1776) + 168))(v19);
    physx::Sc::NPhaseCore::onVolumeRemoved(*(_BYTE **)(v2 + 3992), (uint64_t)this, 4, (uint64_t)v19, (*(_DWORD *)(v2 + 4268) & 8) != 0);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 1904) + 40))(*(_QWORD *)(v3 + 1904), *((unsigned int *)this + 16));
  *(_DWORD *)(*(_QWORD *)(v3 + 4512) + 4 * (((unint64_t)*((unsigned int *)this + 4) >> 5) & 0x3FFFFFF)) &= ~(1 << *((_DWORD *)this + 4));
  if (*((_DWORD *)this + 17) != -1)
    physx::Sc::SqBoundsManager::removeShape(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 2088), this);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 4296);
  v5 = *((unsigned int *)this + 4);
  LODWORD(v19[0]) = v5 & 0x7FFFFFFF;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v4 + 32, (v5 & 0x7FFFFFFF) + 1);
  *(_DWORD *)(*(_QWORD *)(v4 + 32) + ((v5 >> 3) & 0xFFFFFFC)) |= 1 << v5;
  v6 = *(unsigned int *)(v4 + 56);
  if ((*(_DWORD *)(v4 + 60) & 0x7FFFFFFFu) <= v6)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v4 + 48, v19);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v6) = v5 & 0x7FFFFFFF;
    ++*(_DWORD *)(v4 + 56);
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  v8 = *(_QWORD *)(v7 + 4296);
  v9 = *(_DWORD *)(v8 + 24);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * (v9 - 1));
    *(_DWORD *)(v8 + 24) = v10;
  }
  else
  {
    v11 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(v8 + 8) = v11 + 1;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0x80000000 | v11 & 0x7FFFFFFF;
  v12 = *(_QWORD *)(v7 + 2064);
  v13 = (v11 & 0x7FFFFFFF) + 1;
  v14 = *(_DWORD *)(v12 + 20) & 0x7FFFFFFF;
  if (v13 >= v14)
  {
    v15 = v13 | (v13 >> 1) | ((v13 | (v13 >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v17 = (v16 | HIWORD(v16)) + 1;
    if (v14 < v17)
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(v12, (v16 | HIWORD(v16)) + 1);
    *(_DWORD *)(v12 + 16) = v17;
  }
  physx::Sc::ShapeSim::initSubsystemsDependingOnElementID(this);
  return (*(uint64_t (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v3 + 1904) + 32))(*(_QWORD *)(v3 + 1904), (char *)this + 24, *((unsigned int *)this + 16));
}

void physx::Sc::ShapeSim::onContactOffsetChange(physx::Sc::ShapeSim *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1 < 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1848);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 280) + 8) + 4 * (v1 & 0x7FFFFFFF)) = *(_DWORD *)(*((_QWORD *)this + 7)
                                                                                                + 60);
    *(_BYTE *)(v2 + 525) = 1;
    physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(v2 + 224, (v1 & 0x7FFFFFFF) + 1);
    *(_DWORD *)(*(_QWORD *)(v2 + 224) + 4 * ((v1 & 0x7FFFFFFFu) >> 5)) |= 1 << v1;
  }
}

uint64_t physx::Sc::ShapeSim::onFlagChange(uint64_t this, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  int BPGroup;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v20[5];

  v3 = this;
  v4 = *(_QWORD *)(this + 56);
  v5 = *(_BYTE *)(v4 + 64);
  if (((v5 & 5) != 0) == ((*a2 & 5) != 0))
  {
    if (((((*a2 & 4) == 0) ^ ((v5 & 4) >> 2)) & 1) != 0)
      goto LABEL_14;
    goto LABEL_9;
  }
  if ((*a2 & 5) != 0 || (v5 & 5) == 0)
  {
    physx::Sc::ElementSim::removeFromAABBMgr((physx::Sc::ElementSim *)this);
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 72);
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v7 + 1840) + 1776) + 168))(v20);
    this = (uint64_t)physx::Sc::NPhaseCore::onVolumeRemoved(*(_BYTE **)(v7 + 3992), v3, 4, (uint64_t)v20, (*(_DWORD *)(v7 + 4268) & 8) != 0);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v4 + 64) & 4) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 72) + 1848);
    v9 = *(unsigned int *)(this + 16);
    v10 = (v9 >> 5) & 0x3FFFFFF;
    if (v10 < (*(_DWORD *)(v8 + 216) & 0x7FFFFFFFu)
      && ((*(_DWORD *)(*(_QWORD *)(v8 + 208) + 4 * v10) >> v9) & 1) != 0)
    {
LABEL_9:
      this = physx::Sc::ShapeSim::reinsertBroadPhase((physx::Sc::ShapeSim *)this);
      goto LABEL_14;
    }
  }
  v11 = *(float *)(v4 + 60);
  BPGroup = physx::Sc::ShapeSim::getBPGroup((physx::Sc::ShapeSim *)this);
  this = physx::Sc::ElementSim::addToAABBMgr(v3, BPGroup, v5 & 4, v11, v13, v14, v15, v16, v17, v19);
LABEL_14:
  if ((v5 & 2) != 0)
  {
    if ((*a2 & 2) == 0)
    {
      v18 = *(_QWORD *)(v3 + 8);
      if (v18)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v18 + 80) + 13) - 3 >= 0xFFFFFFFE
          && *(_DWORD *)(v18 + 184) <= 0xFFFFFFFD)
        {
          return physx::Sc::ShapeSim::createSqBounds(v3);
        }
      }
    }
  }
  else if ((*a2 & 2) != 0 && *(_DWORD *)(v3 + 68) != -1)
  {
    return physx::Sc::SqBoundsManager::removeShape(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 72) + 2088), (physx::Sc::ShapeSim *)v3);
  }
  return this;
}

void physx::Sc::ShapeSim::updateCached(uint64_t a1, __int32 a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  __int32 v26;

  physx::Sc::ShapeSim::getAbsPoseAligned(a1, &v24);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = v7 & 0x7FFFFFFF;
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 1840) + 2592);
  v10 = (float32x4_t *)(*(_QWORD *)(v9 + 8) + 32 * (v7 & 0x7FFFFFFF));
  v11.i64[1] = v24.i64[1];
  *v10 = v24;
  v11.i32[1] = HIDWORD(v25);
  v10[1].i64[0] = v25;
  v10[1].i32[2] = v26;
  v10[1].i32[3] = a2;
  *(_BYTE *)(v9 + 28) = 1;
  v12 = *(_QWORD *)(v6 + 2064);
  v11.i32[0] = 0;
  v13.i32[0] = 1.0;
  physx::Gu::computeBounds((float32x2_t *)(*(_QWORD *)(v12 + 8) + 24 * (v7 & 0x7FFFFFFF)), *(_QWORD *)(a1 + 56) + 72, (uint64_t)&v24, 0, v11, v13, v18, v19, v20, v21, v22, v23, v14, v15, v16, v17, v24.i8[0]);
  *(_BYTE *)(v12 + 24) = 1;
  if (a3)
  {
    if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)a3, v8 + 1);
      *(_DWORD *)(*a3 + 4 * (v8 >> 5)) |= 1 << v7;
    }
  }
}

void physx::Sc::ShapeSim::updateCached(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  float32x4_t AbsPoseAligned;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int32x4_t v29;

  v11 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  _X21 = (float32x4_t *)(*(_QWORD *)(a2 + 8) + 32 * v11);
  __asm { PRFM            #0, [X21] }
  AbsPoseAligned = physx::Sc::ShapeSim::getAbsPoseAligned(a1, _X21);
  _X21[1].i32[3] = 0;
  AbsPoseAligned.i32[0] = 0;
  v19.i32[0] = 1.0;
  physx::Gu::computeBounds((float32x2_t *)(*(_QWORD *)(a3 + 8) + 24 * v11), *(_QWORD *)(a1 + 56) + 72, (uint64_t)_X21, 0, AbsPoseAligned, v19, v24, v25, v26, v27, v28, v29, v20, v21, v22, v23, a9);
}

float physx::Sc::ShapeSim::updateContactDistance(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float result;

  v6 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  v7 = (float *)(*(_QWORD *)(a4 + 8) + 24 * v6);
  v8 = (float)(v7[3] - *v7) * 0.5;
  v9 = (float)(v7[4] - v7[1]) * 0.5;
  result = (float)(*(float *)(*(_QWORD *)(a1 + 56) + 60) + a5)
         + (float)(sqrtf((float)((float)(v9 * v9) + (float)(v8 * v8))+ (float)((float)((float)(v7[5] - v7[2]) * 0.5) * (float)((float)(v7[5] - v7[2]) * 0.5)))* (float)(sqrtf((float)((float)(a3[1] * a3[1]) + (float)(*a3 * *a3)) + (float)(a3[2] * a3[2])) * a6));
  *(float *)(a2 + 4 * v6) = result;
  return result;
}

BOOL physx::Sc::ShapeSim::updateSweptBounds(physx::Sc::ShapeSim *this, float32x4_t a2, int8x16_t a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  int8x8_t v45;
  float32x4_t v46;
  int8x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float v68;
  float v69;
  int16x4_t v70;
  _BOOL8 result;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  __int32 v80;
  float32x2_t v81[2];
  float32x2_t v82;
  __int32 v83;

  v17 = (float32x4_t *)*((_QWORD *)this + 7);
  v22 = physx::Gu::computeBoundsWithCCDThreshold((float *)&v82, (float *)v81, (uint64_t)&v17[4].i64[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 1840) + 2592) + 8)+ 32 * (*((_DWORD *)this + 4) & 0x7FFFFFFF), 0, a14, a15, a16, a2, a3, a4, a5, a6, a7, a8, a9);
  v23.i32[0] = v83;
  v74 = v23;
  *(float32x2_t *)v23.f32 = v81[1];
  v75 = v23;
  v24 = (float32x4_t *)*((_QWORD *)this + 1);
  if (*(unsigned __int8 *)(v24[5].i64[0] + 13) - 1 >= 2)
    v24 = 0;
  v25.i64[0] = v17[3].i64[0];
  v25.i64[1] = v17[3].u32[2];
  v26 = (float32x4_t *)v24[5].i64[0];
  v27 = v17[2];
  v28.i64[0] = v26[4].i64[0];
  v28.i64[1] = v26[4].u32[2];
  v29.i64[0] = v24[7].i64[0];
  v30 = v26[3];
  v29.i64[1] = v24[7].u32[2];
  v31 = v24[6];
  v32 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v30, 3).u64[0];
  v33 = v30;
  v33.i32[3] = 0;
  v34 = v27;
  v34.i32[3] = 0;
  v35 = vmulq_f32(v34, v33);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  v36 = (float32x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  v37 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  v38 = (float32x2_t)vext_s8(*(int8x8_t *)v30.f32, (int8x8_t)v37, 4uLL);
  v39 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v27.f32, v38), (float32x2_t)vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)v36, 4uLL), *(float32x2_t *)v30.f32);
  *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(v36, *(float32x2_t *)v30.f32), *(float32x2_t *)v27.f32, v37), 4uLL);
  v40.i64[1] = v39.u32[0];
  v41 = vmlaq_laneq_f32(v40, v34, v30, 3);
  v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
  *(float32x2_t *)v35.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 3), v32);
  v42 = vmlsq_laneq_f32(v41, v33, v27, 3);
  v43 = v31;
  v43.i32[3] = 0;
  v34.i64[0] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
  v44 = (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, *(int8x8_t *)v34.f32, 4uLL);
  v45 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL)), v44, *(float32x2_t *)v42.f32);
  v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
  v46 = vsubq_f32(v25, v28);
  v47 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v46.f32, v38), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL), *(float32x2_t *)v30.f32);
  v48 = vmulq_n_f32(v46, vmla_f32((float32x2_t)0xBF000000BF000000, v32, v32).f32[0]);
  v48.i32[3] = 0;
  *(int8x8_t *)v49.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)), *(float32x2_t *)v46.f32, v37), 4uLL);
  v49.i64[1] = v47.u32[0];
  v50 = vmlaq_laneq_f32(v48, v49, v30, 3);
  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
  v51 = vmulq_f32(v33, v46);
  v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
  v52 = vmlaq_n_f32(v50, v33, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
  v51.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
  *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
  v52.i64[1] = v51.u32[0];
  v33.i64[0] = vdupq_laneq_s32((int32x4_t)v31, 3).u64[0];
  v53 = vaddq_f32(v52, v52);
  v54 = (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL);
  v55 = vmulq_f32(v43, v42);
  v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
  *(int8x8_t *)v27.f32 = vext_s8(v45, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v42.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)&v42.u32[2]), 4uLL);
  v27.i64[1] = v45.u32[0];
  v56 = vmlaq_laneq_f32(v27, v42, v31, 3);
  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  *(float32x2_t *)v54.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v35.f32), vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32));
  v57 = vmlaq_n_f32(v56, v43, v35.f32[0]);
  v58 = vmulq_n_f32(v53, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v58.i32[3] = 0;
  *(float32x2_t *)v51.f32 = vadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  *(float32x2_t *)v33.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)vext_s8(*(int8x8_t *)v30.f32, *(int8x8_t *)v51.f32, 4uLL)), v44, *(float32x2_t *)v30.f32);
  *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v30.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)v51.f32), 4uLL);
  v51.i64[1] = v33.u32[0];
  v59 = vmlaq_laneq_f32(v58, v51, v31, 3);
  v59.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u32[0];
  v60 = vmulq_f32(v43, v53);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  v61 = vmlaq_n_f32(v59, v43, vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).f32[0]);
  v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
  v60.i64[0] = 0x4000000040000000;
  v60.i64[1] = 0x4000000040000000;
  v62 = vmlaq_f32(v29, v60, v61);
  v79 = v62.i64[0];
  v80 = v62.i32[2];
  v57.i32[3] = v54.i32[1];
  v78 = v57;
  v62.i32[0] = 0;
  v60.i32[0] = 1.0;
  physx::Gu::computeBounds(&v76, (uint64_t)&v17[4].i64[1], (uint64_t)&v78, 0, v62, (int8x16_t)v60, *(double *)v61.i64, *(double *)v51.i64, *(double *)v53.i64, *(double *)v30.i64, COERCE_DOUBLE((unint64_t)v33.u32[0]), v54, v18, v19, v20, v21, v74.i8[0]);
  *(float32x2_t *)v63.i8 = v82;
  *(int32x2_t *)v64.f32 = vzip1_s32(*(int32x2_t *)v75.f32, (int32x2_t)v81[0]);
  *(int32x2_t *)&v64.u32[2] = vdup_lane_s32((int32x2_t)v81[0], 1);
  v65 = vaddq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL), v63, 0xCuLL), v64);
  v66 = v65;
  v66.i32[0] = vsubq_f32(v74, v75).u32[0];
  v66.i32[3] = v65.i32[0];
  v67 = vsub_f32(v82, v81[0]);
  v68 = vaddq_f32(v77, (float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 3)).f32[0];
  v69 = (float)((float)((float)((float)((float)(v76.f32[1] + v77.f32[2]) * 0.5) - v82.f32[1])
                      * (float)((float)((float)(v76.f32[1] + v77.f32[2]) * 0.5) - v82.f32[1]))
              + (float)((float)((float)((float)(v76.f32[0] + v77.f32[1]) * 0.5) - v82.f32[0])
                      * (float)((float)((float)(v76.f32[0] + v77.f32[1]) * 0.5) - v82.f32[0])))
      + (float)((float)((float)(0.5 * v68) - v74.f32[0]) * (float)((float)(0.5 * v68) - v74.f32[0]));
  if (v69 >= (float)(v22 * v22))
  {
    v67 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v76, v67), (int8x8_t)v67, (int8x8_t)v76);
    v70 = vmovn_s32(vcgtq_f32(v66, v77));
    v70.i16[0] = vmovn_s32(vcgtq_f32(v77, v66)).u16[0];
    v66 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v70), (int8x16_t)v66, (int8x16_t)v77);
  }
  result = v69 >= (float)(v22 * v22);
  v72 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 2064);
  v73 = *(_QWORD *)(v72 + 8) + 24 * (*((_DWORD *)this + 4) & 0x7FFFFFFF);
  *(float32x2_t *)v73 = v67;
  *(float32x4_t *)(v73 + 8) = v66;
  *(_BYTE *)(v72 + 24) = 1;
  return result;
}

uint64_t physx::Sc::ShapeSim::updateBPGroup(uint64_t this)
{
  int v1;
  physx::Sc::ShapeSim *v2;
  uint64_t v3;

  v1 = *(_DWORD *)(this + 16);
  if (v1 < 0)
  {
    v2 = (physx::Sc::ShapeSim *)this;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 72) + 1848);
    *(_DWORD *)(*(_QWORD *)(v3 + 264) + 4 * (v1 & 0x7FFFFFFF)) = physx::Sc::ShapeSim::getBPGroup((physx::Sc::ShapeSim *)this);
    return physx::Sc::ShapeSim::reinsertBroadPhase(v2);
  }
  return this;
}

void physx::Sc::ShapeSim::markBoundsForUpdate(physx::Sc::ShapeSim *this, int a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  if (a2)
  {
    physx::Sc::ShapeSim::updateCached((uint64_t)this, 0, (_QWORD *)(*(_QWORD *)(v2 + 1848) + 224));
  }
  else
  {
    v3 = *((unsigned int *)this + 4);
    if ((v3 & 0x80000000) != 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 4512, (v3 & 0x7FFFFFFF) + 1);
      *(_DWORD *)(*(_QWORD *)(v2 + 4512) + ((v3 >> 3) & 0xFFFFFFC)) |= 1 << v3;
    }
  }
}

void physx::Sc::ShapeSim::onVolumeOrTransformChange(physx::Sc::ShapeSim *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *((_QWORD *)this + 1);
  if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 80) + 13) - 1 >= 2)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = *(_DWORD *)(v5 + 184) > 0xFFFFFFFD;
  else
    v6 = 1;
  v7 = *(unsigned int *)(v4 + 52);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v4 + 72);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = (uint64_t *)(v9 + 8 * v7);
    v11 = (uint64_t *)(v9 + 8);
    v12 = 8 * v7;
    while (1)
    {
      v13 = *(v11 - 1);
      if ((*(_BYTE *)(v13 + 29) & 1) != 0
        && (*(physx::Sc::ShapeSim **)(v13 + 32) == this || *(physx::Sc::ShapeSim **)(v13 + 40) == this))
      {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_13;
    }
    while (1)
    {
      if (*(_BYTE *)(v13 + 28) == 1)
      {
        *(_WORD *)(v13 + 68) |= 0x20u;
        if ((*(_BYTE *)(v13 + 29) & 0x20) == 0)
        {
          *(_BYTE *)(v13 + 29) |= 0x20u;
          physx::Sc::Scene::notifyInteractionActivated(v8, v13);
        }
      }
      else if (!*(_BYTE *)(v13 + 28))
      {
        v16 = *(_QWORD *)(v13 + 80);
        if (v16)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 72) + 1840) + 1776);
          *(_BYTE *)(v16 + 82) = 0;
          *(_QWORD *)(v16 + 64) = 0;
          *(_QWORD *)(v16 + 72) = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 80))(v17, *(_QWORD *)(v13 + 80));
        }
        if (v6)
          physx::Sc::ShapeInteraction::onShapeChangeWhileSleeping(v13 - 8, v5 != 0);
      }
      if (v11 == v10)
        break;
      v14 = v11;
      while (1)
      {
        v15 = *v14++;
        v13 = v15;
        if ((*(_BYTE *)(v15 + 29) & 1) != 0
          && (*(physx::Sc::ShapeSim **)(v13 + 32) == this || *(physx::Sc::ShapeSim **)(v13 + 40) == this))
        {
          break;
        }
        v11 = v14;
        if (v14 == v10)
          goto LABEL_13;
      }
      ++v11;
    }
  }
LABEL_13:
  physx::Sc::ShapeSim::markBoundsForUpdate(this, a2);
}

uint64_t notifyActorInteractionsOfTransformChange(uint64_t result)
{
  unsigned int v1;
  _BOOL4 v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(result + 80) + 13) - 1;
  v2 = v1 > 1 || *(_DWORD *)(result + 184) > 0xFFFFFFFD;
  v3 = *(_DWORD *)(result + 52);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 72);
    v5 = *(uint64_t **)(result + 40);
    do
    {
      v7 = *v5++;
      v6 = v7;
      v8 = *(unsigned __int8 *)(v7 + 28);
      if (v8 == 1)
      {
        *(_WORD *)(v6 + 68) |= 0x20u;
        if ((*(_BYTE *)(v6 + 29) & 0x20) == 0)
        {
          *(_BYTE *)(v6 + 29) |= 0x20u;
          result = physx::Sc::Scene::notifyInteractionActivated(v4, v6);
        }
      }
      else if (!v8)
      {
        v9 = *(_QWORD *)(v6 + 80);
        if (v9)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 72) + 1840) + 1776);
          *(_BYTE *)(v9 + 82) = 0;
          *(_QWORD *)(v9 + 64) = 0;
          *(_QWORD *)(v9 + 72) = 0;
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 80))(v10, *(_QWORD *)(v6 + 80));
        }
        if (v2)
          result = physx::Sc::ShapeInteraction::onShapeChangeWhileSleeping(v6 - 8, v1 < 2);
      }
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t physx::Sc::SqBoundsManager::addShape(uint64_t this, physx::Sc::ShapeSim *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  physx::Sc::ShapeSim *v9;

  v3 = this;
  v4 = *(unsigned int *)(this + 8);
  *((_DWORD *)a2 + 17) = v4;
  v9 = a2;
  if ((*(_DWORD *)(this + 12) & 0x7FFFFFFFu) <= v4)
  {
    this = physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>::growAndPushBack(this, &v9);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)this + 8 * v4) = a2;
    *(_DWORD *)(this + 8) = v4 + 1;
  }
  LODWORD(v9) = -1;
  v5 = *(unsigned int *)(v3 + 24);
  if ((*(_DWORD *)(v3 + 28) & 0x7FFFFFFFu) <= v5)
  {
    this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 16, &v9);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v5) = -1;
    ++*(_DWORD *)(v3 + 24);
  }
  v6 = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
  LODWORD(v9) = v6;
  v7 = *(unsigned int *)(v3 + 40);
  if ((*(_DWORD *)(v3 + 44) & 0x7FFFFFFFu) <= v7)
  {
    this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 32, &v9);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v3 + 32) + 4 * v7) = v6;
    ++*(_DWORD *)(v3 + 40);
  }
  v9 = a2;
  v8 = *(unsigned int *)(v3 + 56);
  if ((*(_DWORD *)(v3 + 60) & 0x7FFFFFFFu) <= v8)
    return physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>::growAndPushBack(v3 + 48, &v9);
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8) = a2;
  *(_DWORD *)(v3 + 56) = v8 + 1;
  return this;
}

uint64_t physx::Sc::SqBoundsManager::removeShape(uint64_t this, physx::Sc::ShapeSim *a2)
{
  uint64_t v2;
  int v3;

  v2 = *((unsigned int *)a2 + 17);
  *((_DWORD *)a2 + 17) = -1;
  *(_QWORD *)(*(_QWORD *)this + 8 * v2) = *(_QWORD *)(*(_QWORD *)this
                                                                    + 8 * (*(_DWORD *)(this + 8) - 1));
  *(_DWORD *)(*(_QWORD *)(this + 32) + 4 * v2) = *(_DWORD *)(*(_QWORD *)(this + 32)
                                                                           + 4
                                                                           * (*(_DWORD *)(this + 40) - 1));
  *(_DWORD *)(*(_QWORD *)(this + 16) + 4 * v2) = *(_DWORD *)(*(_QWORD *)(this + 16)
                                                                           + 4
                                                                           * (*(_DWORD *)(this + 24) - 1));
  v3 = *(_DWORD *)(this + 8);
  if ((_DWORD)v2 + 1 != v3)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8 * v2) + 68) = v2;
  *(_DWORD *)(this + 8) = v3 - 1;
  --*(_DWORD *)(this + 24);
  --*(_DWORD *)(this + 40);
  return this;
}

__n128 physx::Sc::SimStats::readOut(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  __n128 result;
  _BYTE __src[900];

  v6 = a3 + 588;
  physx::PxSimulationStatistics::PxSimulationStatistics((uint64_t)__src);
  memcpy(a2, __src, 0x384uLL);
  v7 = 0;
  v8 = 0;
  v9 = a2 + 88;
  v10 = a1 + 2;
  v11 = 704;
  do
  {
    v12 = 0;
    v13 = v11;
    do
    {
      *(_DWORD *)((char *)v9 + v12) += *(_DWORD *)((char *)v10 + v12);
      if (v7 != v12)
        *(_DWORD *)((char *)a2 + v13) += *(_DWORD *)((char *)v10 + v12);
      v13 += 28;
      v12 += 4;
    }
    while (v12 != 28);
    ++v8;
    v11 += 4;
    v7 += 4;
    v9 = (_QWORD *)((char *)v9 + 28);
    v10 = (_QWORD *)((char *)v10 + 28);
  }
  while (v8 != 5);
  v14 = 0;
  *(_QWORD *)((char *)a2 + 108) = *a1;
  v15 = (_DWORD *)a2 + 85;
  v16 = (_DWORD *)a2 + 79;
  v17 = (int *)(a3 + 200);
  v18 = 6;
  do
  {
    v19 = (_DWORD *)(a3 + 28 * v14 + 4 * v14);
    v20 = (_DWORD *)a2 + 7 * v14 + v14;
    v20[29] = *v19;
    v20[127] = v19[98];
    v20[78] = v19[49];
    if (v14 <= 5)
    {
      v21 = v17;
      v22 = v16;
      v23 = v15;
      v24 = v18;
      do
      {
        v25 = *(v21 - 49);
        *(v22 - 49) = v25;
        *(v23 - 49) = v25;
        v26 = v21[49];
        v22[49] = v26;
        v23[49] = v26;
        v27 = *v21++;
        *v22++ = v27;
        *v23 = v27;
        v23 += 7;
        --v24;
      }
      while (v24);
    }
    ++v14;
    --v18;
    v15 += 8;
    v16 += 8;
    v17 += 8;
  }
  while (v14 != 7);
  *(_QWORD *)((char *)a2 + 76) = *(_QWORD *)v6;
  *((_DWORD *)a2 + 21) = *(_DWORD *)(a3 + 596);
  *a2 = *(_QWORD *)(a3 + 600);
  *((_DWORD *)a2 + 2) = *(_DWORD *)(a3 + 608);
  *((_DWORD *)a2 + 18) = *(_DWORD *)(a3 + 624) << 14;
  *(_QWORD *)((char *)a2 + 60) = *(_QWORD *)(v6 + 24);
  *((_DWORD *)a2 + 17) = *(_DWORD *)(a3 + 620);
  result = *(__n128 *)(v6 + 40);
  *(__n128 *)(a2 + 11) = result;
  *((_DWORD *)a2 + 26) = *(_DWORD *)(a3 + 644);
  return result;
}

uint64_t physx::Sc::SimulationController::udpateScBodyAndShapeSim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t physx::Sc::SqBoundsManager::syncBounds(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t), uint64_t (***a3)(_QWORD, _QWORD, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 48);
    do
    {
      v13 = *v12;
      v14 = *(unsigned int *)(*v12 + 68);
      if ((_DWORD)v14 != -1 && *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v14) == -1)
      {
        v15 = *(_QWORD *)(v13 + 8);
        if (*(unsigned __int8 *)(*(_QWORD *)(v15 + 80) + 13) - 1 >= 2)
          v15 = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v14) = (**a3)(a3, *(_QWORD *)(v15 + 80)+ *((_QWORD *)&physx::Sc::gOffsetTable+ *(unsigned __int8 *)(*(_QWORD *)(v15 + 80) + 13)+ 10), *(_QWORD *)(v13 + 56) + qword_25582F9E0);
      }
      ++v12;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 56) = 0;
  return (**a2)(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4, *(unsigned int *)(a1 + 8), a6);
}

physx::Sc::RigidSim *physx::Sc::StaticCore::setActor2World(uint64_t a1, uint64_t a2)
{
  physx::Sc::RigidSim *result;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  result = *(physx::Sc::RigidSim **)a1;
  if (result)
    return (physx::Sc::RigidSim *)physx::Sc::RigidSim::notifyShapesOfTransformChange(result);
  return result;
}

physx::Sc::TriggerInteraction *physx::Sc::TriggerInteraction::TriggerInteraction(physx::Sc::TriggerInteraction *this, physx::Sc::ShapeSim *a2, physx::Sc::ShapeSim *a3)
{
  uint64_t v4;
  physx::Sc::ActorSim **v5;
  int v6;
  uint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a3 + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  v5 = (physx::Sc::ActorSim **)((char *)this + 8);
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = -1;
  *((_DWORD *)this + 8) = -1;
  *((_WORD *)this + 18) = 1281;
  *((_BYTE *)this + 38) = 0;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = a3;
  *((_DWORD *)this + 14) = -1;
  *(_QWORD *)this = off_24ED904D8;
  *((_WORD *)this + 38) = 32;
  *((_BYTE *)this + 78) = 0;
  v6 = physx::Sc::activateInteraction((physx::Sc::TriggerInteraction *)((char *)this + 8), 0, a3, (int8x8_t)-1);
  physx::Sc::ActorSim::registerInteractionInActor(*v5, (physx::Sc::Interaction *)v5);
  physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 2), (physx::Sc::Interaction *)v5);
  v7 = *((_QWORD *)*v5 + 9);
  physx::Sc::Scene::registerInteraction(v7, (physx::Sc::Interaction *)v5, v6);
  v9 = *((_QWORD *)this + 5);
  v10 = *((_QWORD *)this + 6);
  if (v9 <= v10)
    v11 = *((_QWORD *)this + 5);
  else
    v11 = *((_QWORD *)this + 6);
  if (v9 <= v10)
    v12 = *((_QWORD *)this + 6);
  else
    v12 = *((_QWORD *)this + 5);
  physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(_QWORD *)(v7 + 3992) + 3704), v11, v12, (uint64_t)this, v8);
  *((_WORD *)this + 36) = 0;
  return this;
}

void physx::Sc::TriggerInteraction::~TriggerInteraction(physx::Sc::TriggerInteraction *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  *(_QWORD *)this = off_24ED904D8;
  v2 = (uint64_t *)((char *)this + 8);
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  physx::Sc::Scene::unregisterInteraction(v3, (uint64_t)this + 8);
  v4 = *(_QWORD *)(v3 + 3992) + 3704;
  v5 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  if (v5 <= v6)
    v7 = *((_QWORD *)this + 5);
  else
    v7 = *((_QWORD *)this + 6);
  if (v5 <= v6)
    v5 = *((_QWORD *)this + 6);
  v8[0] = v7;
  v8[1] = v5;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4, v8);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*v2, v2);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((_QWORD *)this + 2), v2);
}

{
  uint64_t v2;

  physx::Sc::TriggerInteraction::~TriggerInteraction(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sc::TriggerInteraction *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL isOneActorActive(physx::Sc::TriggerInteraction *a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 result;

  v1 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  if (v1)
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 13) - 3 >= 0xFFFFFFFE;
  else
    v2 = 0;
  result = 1;
  if (!v2 || *(_DWORD *)(v1 + 184) >= 0xFFFFFFFE)
  {
    v3 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 8);
    v4 = v3 && *(unsigned __int8 *)(*(_QWORD *)(v3 + 80) + 13) - 3 >= 0xFFFFFFFE;
    if (!v4 || *(_DWORD *)(v3 + 184) >= 0xFFFFFFFE)
      return 0;
  }
  return result;
}

void physx::Sc::SimulationController::~SimulationController(physx::Sc::SimulationController *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Sc::SimulationController::getActiveBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getDeactiveBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getRigidBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getNbBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getUnfrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getFrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getShapeSims(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getNbFrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getNbUnfrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getArticulationRemapIndex(physx::Sc::SimulationController *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t physx::Sc::SimulationController::getNbShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>::getName() [T = physx::Sc"
           "::ActorPairReport *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

float physx::PxQuat::operator*@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v3 = a1[1];
  v5 = a2[2];
  v4 = a2[3];
  v6 = a2[1];
  v8 = a1[2];
  v7 = a1[3];
  v9 = (float)((float)((float)(v4 * v3) + (float)(v7 * v6)) + (float)(v8 * *a2)) - (float)(v5 * *a1);
  v10 = (float)((float)((float)(v4 * v8) + (float)(v7 * v5)) + (float)(*a1 * v6)) - (float)(*a2 * v3);
  v11 = (float)((float)(v7 * v4) - (float)(*a1 * *a2)) - (float)(v3 * v6);
  *a3 = (float)((float)((float)(v4 * *a1) + (float)(v7 * *a2)) + (float)(v3 * v5)) - (float)(v6 * v8);
  a3[1] = v9;
  result = v11 - (float)(v8 * v5);
  a3[2] = v10;
  a3[3] = result;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCachedTransform,physx::shdfnd::VirtualAllocator>::recreate(_QWORD *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = (*(uint64_t (**)(_QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 32 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = *((unsigned int *)a1 + 4);
  v7 = a1[1];
  if ((_DWORD)v6)
  {
    v8 = result + 32 * v6;
    v9 = a1[1];
    v10 = result;
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)v9;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v10 + 28) = *(_DWORD *)(v9 + 28);
      v10 += 32;
      v9 += 32;
    }
    while (v10 < v8);
  }
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && v7)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  a1[1] = v5;
  *((_DWORD *)a1 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>::getName() [T = physx::Sc::ShapeSim *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void physx::Sq::AABBPruner::~AABBPruner(physx::Sq::AABBPruner *this)
{
  int v2;
  int v4;
  int v6;
  int v7;

  *(_QWORD *)this = &off_24ED90678;
  physx::Sq::AABBPruner::release(this);
  v2 = *((_DWORD *)this + 133);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 65) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 129);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 63) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 123);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 60))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v7 = *((_DWORD *)this + 119);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 58))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Sq::PruningPool::~PruningPool((physx::Sq::AABBPruner *)((char *)this + 416));
  physx::Sq::ExtendedBucketPruner::~ExtendedBucketPruner((physx::Sq::AABBPruner *)((char *)this + 80));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)this + 4))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 4) = 0;
}

{
  uint64_t v2;

  physx::Sq::AABBPruner::~AABBPruner(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sq::AABBPruner *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Sq::AABBPruner::release(physx::Sq::AABBPruner *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  physx::Sq::ExtendedBucketPruner::release((physx::Sq::AABBPruner *)((char *)this + 80));
  *((_DWORD *)this + 18) = 0;
  v5 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 464, 0, &v5);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 464, *((_DWORD *)this + 118));
  v6 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 480, 0, &v6);
  result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 480, *((_DWORD *)this + 122));
  if (*((_QWORD *)this + 7))
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)this + 4))
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 6));
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
  }
  *((_QWORD *)this + 6) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 1));
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 128) = 0;
  *((_BYTE *)this + 497) = 0;
  return result;
}

uint64_t physx::Sq::AABBPruner::addObjects(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, unsigned int a5, int a6)
{
  char v6;
  unsigned int *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, const char *, const char *, uint64_t);
  uint64_t v23;
  float32x4_t *v24;
  int8x8_t v25;
  unsigned int v28;

  if (!a5)
    return 1;
  v6 = a6;
  v7 = (unsigned int *)a2;
  if (!a6 || !*(_QWORD *)(a1 + 8))
    *(_BYTE *)(a1 + 497) = 1;
  v28 = physx::Sq::PruningPool::addObjects((physx::Sq::PruningPool *)(a1 + 416), a2, a3, a4, a5);
  if (*(_BYTE *)(a1 + 496))
  {
    if (*(_QWORD *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 498) = 1;
      if ((v6 & 1) == 0)
      {
        if (v28)
        {
          v9 = a1 + 88;
          v10 = v28;
          while (1)
          {
            v11 = *v7++;
            v12 = *(_DWORD *)(a1 + 88);
            v13 = *(_DWORD *)(*(_QWORD *)(a1 + 440) + 4 * v11);
            v14 = *(_DWORD *)(a1 + 72);
            v15 = a1 + 88 + 72 * v12;
            v18 = *(_QWORD *)(v15 + 16);
            v17 = (uint64_t *)(v15 + 16);
            v16 = v18;
            if (!v18)
              break;
            if (!*(_QWORD *)(v16 + 1144))
              goto LABEL_17;
LABEL_18:
            *(_DWORD *)(a1 + 256) = 0;
            v24 = physx::Sq::IncrementalAABBTree::insert(v16, v13, *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8), a1 + 248);
            physx::Sq::IncrementalAABBPrunerCore::updateMapping(v9, (int32x2_t *)(a1 + 72 * v12 + 112), v13, (uint64_t)v24, v25);
            if (!--v10)
              return v28 == a5;
          }
          v19 = v9;
          v20 = physx::shdfnd::Foundation::mInstance;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
            v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTree>::getName() [T = "
                  "physx::Sq::IncrementalAABBTree]";
          else
            v21 = "<allocation names disabled>";
          v22 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v20 + 24)
                                                                                                + 16);
          v23 = v20 + 24;
          v9 = v19;
          v16 = v22(v23, 1184, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqIncrementalAABBPrunerCore.cpp", 88);
          *(_QWORD *)(v16 + 544) = 0x4000000000;
          *(_BYTE *)(v16 + 528) = 1;
          *(_QWORD *)(v16 + 536) = v16 + 16;
          *(_QWORD *)(v16 + 552) = 256;
          *(_DWORD *)(v16 + 560) = 5120;
          *(_QWORD *)(v16 + 568) = 0;
          *(_QWORD *)(v16 + 1112) = 0x4000000000;
          *(_BYTE *)(v16 + 1096) = 1;
          *(_QWORD *)(v16 + 1104) = v16 + 584;
          *(_QWORD *)(v16 + 1120) = 256;
          *(_DWORD *)(v16 + 1128) = 0x8000;
          *(_OWORD *)(v16 + 1136) = 0u;
          *(_OWORD *)(v16 + 1152) = 0u;
          *(_OWORD *)(v16 + 1168) = 0u;
          *v17 = v16;
LABEL_17:
          *((_DWORD *)v17 - 2) = v14;
          goto LABEL_18;
        }
      }
    }
  }
  return v28 == a5;
}

uint64_t physx::Sq::AABBPruner::updateObjectsAfterManualBoundsUpdates(uint64_t this, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  if (a3)
  {
    v3 = this;
    *(_BYTE *)(this + 497) = 1;
    if (*(_BYTE *)(this + 496))
    {
      if (*(_QWORD *)(this + 8))
      {
        *(_BYTE *)(this + 498) = 1;
        v5 = *(_QWORD *)(this + 424);
        v6 = *(_QWORD *)(this + 432);
        v7 = a3;
        do
        {
          v12 = 0;
          v8 = *a2++;
          v9 = *(unsigned int *)(*(_QWORD *)(v3 + 440) + 4 * v8);
          v12 = v9;
          if (*(_DWORD *)(v3 + 472) <= v9
            || (v10 = *(_DWORD *)(*(_QWORD *)(v3 + 464) + 4 * v9), v10 == -1))
          {
            this = physx::Sq::ExtendedBucketPruner::updateObject(v3 + 80, (int)v5 + 24 * (int)v9, (_QWORD *)(v6 + 16 * v9), v9);
          }
          else
          {
            this = (uint64_t)physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v3 + 8), v10);
          }
          if ((*(_DWORD *)(v3 + 400) - 3) <= 1)
          {
            v11 = *(unsigned int *)(v3 + 528);
            if ((*(_DWORD *)(v3 + 532) & 0x7FFFFFFFu) <= v11)
            {
              this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 520, &v12);
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)(v3 + 520) + 4 * v11) = v12;
              ++*(_DWORD *)(v3 + 528);
            }
          }
          --v7;
        }
        while (v7);
      }
    }
  }
  return this;
}

physx::Sq::BitArray *physx::Sq::AABBTree::markNodeForRefit(physx::Sq::AABBTree *this, unsigned int a2)
{
  physx::Sq::BitArray *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;

  v5 = *((_QWORD *)this + 10);
  result = (physx::Sq::AABBTree *)((char *)this + 80);
  if (!v5)
    result = (physx::Sq::BitArray *)physx::Sq::BitArray::init(result, *((_DWORD *)this + 16));
  if (!*((_QWORD *)this + 7))
  {
    v6 = *((unsigned int *)this + 16);
    if ((_DWORD)v6)
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 464);
    else
      v7 = 0;
    *((_QWORD *)this + 7) = v7;
    result = (physx::Sq::BitArray *)_createParentArray(v7, *((_QWORD *)this + 2), *((_QWORD *)this + 2), *((_QWORD *)this + 2));
  }
  v8 = *((_QWORD *)this + 10);
  do
  {
    v9 = a2 >> 5;
    v10 = *(_DWORD *)(v8 + 4 * v9);
    if (((1 << a2) & v10) != 0)
      break;
    *(_DWORD *)(v8 + 4 * v9) = (1 << a2) | v10;
    if (*((_DWORD *)this + 24) > v9)
      LODWORD(v9) = *((_DWORD *)this + 24);
    *((_DWORD *)this + 24) = v9;
    v11 = a2 == *(_DWORD *)(*((_QWORD *)this + 7) + 4 * a2);
    a2 = *(_DWORD *)(*((_QWORD *)this + 7) + 4 * a2);
  }
  while (!v11);
  return result;
}

uint64_t physx::Sq::AABBPruner::updateObjectsAndInflateBounds(uint64_t result, unsigned int *a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  int v5;
  _DWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  float32x4_t *v17;
  unsigned int v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;

  if (a5)
  {
    v5 = a4;
    v6 = a3;
    v7 = a2;
    v8 = result;
    *(_BYTE *)(result + 497) = 1;
    v9 = *(_QWORD *)(result + 440);
    v10 = *(_QWORD *)(result + 424);
    v11 = a5;
    v12 = (float32x4_t)vdupq_n_s32(0x3BA3D70Au);
    v13 = a2;
    v14 = a3;
    v15 = a5;
    do
    {
      v16 = *v13++;
      v17 = (float32x4_t *)(v10 + 24 * *(unsigned int *)(v9 + 4 * v16));
      v18 = *v14++;
      v19 = a4 + 24 * v18;
      v20 = *(float32x4_t *)(v19 + 12);
      v21 = vmulq_f32(vsubq_f32(v20, *(float32x4_t *)v19), v12);
      v22 = vsubq_f32(*(float32x4_t *)v19, v21);
      v23 = (int8x16_t)vaddq_f32(v20, v21);
      v22.i32[3] = v23.i32[0];
      *v17 = v22;
      v17[1].i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
      --v15;
    }
    while (v15);
    if (*(_BYTE *)(result + 496) && *(_QWORD *)(result + 8))
    {
      *(_BYTE *)(result + 498) = 1;
      v24 = *(_QWORD *)(result + 432);
      do
      {
        v29 = 0;
        v25 = *v7++;
        v26 = *(unsigned int *)(*(_QWORD *)(v8 + 440) + 4 * v25);
        v29 = v26;
        if (*(_DWORD *)(v8 + 472) <= v26
          || (v27 = *(_DWORD *)(*(_QWORD *)(v8 + 464) + 4 * v26), v27 == -1))
        {
          result = physx::Sq::ExtendedBucketPruner::updateObject(v8 + 80, v5 + 24 * *v6, (_QWORD *)(v24 + 16 * v26), v26);
        }
        else
        {
          result = (uint64_t)physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v8 + 8), v27);
        }
        if ((*(_DWORD *)(v8 + 400) - 3) <= 1)
        {
          v28 = *(unsigned int *)(v8 + 528);
          if ((*(_DWORD *)(v8 + 532) & 0x7FFFFFFFu) <= v28)
          {
            result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v8 + 520, &v29);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v8 + 520) + 4 * v28) = v29;
            ++*(_DWORD *)(v8 + 528);
          }
        }
        ++v6;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

_BYTE *physx::Sq::AABBPruner::removeObjects(_BYTE *this, unsigned int *a2, unsigned int a3)
{
  uint64_t v4;
  physx::Sq::PruningPool *v5;
  uint64_t *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  if (a3)
  {
    v4 = (uint64_t)this;
    this[497] = 1;
    v5 = (physx::Sq::PruningPool *)(this + 416);
    v6 = (uint64_t *)(this + 464);
    v7 = (int32x2_t *)(this + 80);
    v8 = (uint64_t)(this + 504);
    v9 = a3;
    while (1)
    {
      v10 = *a2++;
      v11 = *(_QWORD *)(v4 + 440);
      v18 = *(_OWORD *)(*(_QWORD *)(v4 + 432) + 16 * *(unsigned int *)(v11 + 4 * v10));
      v12 = *(unsigned int *)(v11 + 4 * v10);
      this = (_BYTE *)physx::Sq::PruningPool::removeObject(v5, v10);
      if (*(_BYTE *)(v4 + 496))
      {
        v13 = this;
        this = *(_BYTE **)(v4 + 8);
        if (this)
          break;
      }
LABEL_14:
      if (!--v9)
      {
        if (!*(_DWORD *)v5)
        {
          this = (_BYTE *)physx::Sq::AABBPruner::release((physx::Sq::AABBPruner *)v4);
          *(_BYTE *)(v4 + 497) = 1;
        }
        return this;
      }
    }
    *(_BYTE *)(v4 + 498) = 1;
    if (*(_DWORD *)(v4 + 472) <= v12)
    {
      v17 = *(_OWORD *)(*(_QWORD *)(v4 + 432) + 16 * v12);
    }
    else
    {
      v14 = *(_DWORD *)(*(_QWORD *)(v4 + 464) + 4 * v12);
      v17 = *(_OWORD *)(*(_QWORD *)(v4 + 432) + 16 * v12);
      if (v14 != -1)
      {
        physx::Sq::AABBTree::markNodeForRefit((physx::Sq::AABBTree *)this, v14);
        physx::Sq::ExtendedBucketPruner::swapIndex(v7, v12, &v17, v13, 1);
        goto LABEL_10;
      }
    }
    LODWORD(v16) = 0;
    physx::Sq::ExtendedBucketPruner::removeObject((uint64_t)v7, (uint64_t *)&v18, v12, &v17, v13, (unsigned int *)&v16);
LABEL_10:
    this = physx::Sq::AABBTreeUpdateMap::invalidate(v6, v12, v13, **(_QWORD **)(v4 + 8), *(_QWORD *)(*(_QWORD *)(v4 + 8) + 16));
    if (*(_QWORD *)(v4 + 48))
    {
      v16 = __PAIR64__(v13, v12);
      v15 = *(unsigned int *)(v4 + 512);
      if ((*(_DWORD *)(v4 + 516) & 0x7FFFFFFFu) <= v15)
      {
        this = (_BYTE *)physx::shdfnd::Array<physx::Sq::AABBPruner::NewTreeFixup,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner::NewTreeFixup>>::growAndPushBack(v8, &v16);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v4 + 504) + 8 * v15) = v16;
        ++*(_DWORD *)(v4 + 512);
      }
    }
    goto LABEL_14;
  }
  return this;
}

uint64_t *physx::Sq::AABBTreeUpdateMap::invalidate(uint64_t *result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int *v13;
  int *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *i;
  uint64_t v21;

  v5 = *((_DWORD *)result + 2);
  if (v5 <= a2)
    v6 = -1;
  else
    v6 = *(_DWORD *)(*result + 4 * a2);
  if (v5 <= a3)
    v7 = -1;
  else
    v7 = *(_DWORD *)(*result + 4 * a3);
  if (v6 != -1)
  {
    v8 = a5 + 28 * v6;
    v11 = *(_DWORD *)(v8 + 24);
    v9 = (_DWORD *)(v8 + 24);
    v10 = v11;
    v12 = ((unint64_t)v11 >> 1) & 0xF;
    if ((_DWORD)v12)
    {
      v13 = (int *)(a4 + ((v10 >> 3) & 0x1FFFFFFC));
      v14 = v13;
      v15 = v12;
      while (*v14 != a2)
      {
        ++v14;
        if (!--v15)
          goto LABEL_15;
      }
      v16 = v12 - 1;
      *v9 = v10 & 0xFFFFFFE1 | (2 * v16);
      *v14 = -1;
      *(_DWORD *)(*result + 4 * a2) = -1;
      if ((_DWORD)v15 != 1)
      {
        v17 = *v14;
        *v14 = v13[v16];
        v13[v16] = v17;
      }
    }
  }
LABEL_15:
  if (a2 != a3 && v7 != -1)
  {
    v18 = *(unsigned int *)(a5 + 28 * v7 + 24);
    v19 = (v18 >> 1) & 0xF;
    if ((_DWORD)v19)
    {
      for (i = (unsigned int *)(a4 + ((v18 >> 3) & 0x1FFFFFFC)); *i != a3; ++i)
      {
        if (!--v19)
          return result;
      }
      *i = a2;
      v21 = *result;
      *(_DWORD *)(*result + 4 * a2) = v7;
      *(_DWORD *)(v21 + 4 * a3) = -1;
    }
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::overlap(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, int *, uint64_t), double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  _QWORD *v13;
  float32x4_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  double v18;
  double v19;
  float32x4_t v20;
  float v21;
  int8x16_t v22;
  __int128 v23;
  int32x4_t v24;
  int8x16_t v25;
  __int128 v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float32x4_t v31;
  uint64_t result;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float v38;
  int8x16_t v39;
  char v40;
  float32x4_t v41;
  int8x16_t v42;
  __int128 v43;
  int32x4_t v44;
  int8x16_t v45;
  __int128 v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD **)(a1 + 8);
  if (v13)
  {
    switch(*(_WORD *)(a2 + 98))
    {
      case 0:
        LODWORD(a4) = *(_DWORD *)(a2 + 112);
        v14 = *(float32x4_t *)(a2 + 100);
        v14.i64[1] = *(unsigned int *)(a2 + 108);
        v41 = v14;
        *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
        *(int32x2_t *)v42.i8 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
        if ((physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 424), v13, (uint64_t)&v41, a3) & 1) != 0)goto LABEL_19;
        goto LABEL_23;
      case 2:
        v15 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
        v16 = *(float *)(a2 + 120);
        v20.i64[0] = *(_QWORD *)(a2 + 112);
        v17 = *(float32x2_t *)(a2 + 12);
        v18 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v20.f32, vmul_n_f32(v17, v15)));
        v19 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v17), *(int8x8_t *)v20.f32, vbsl_s8((int8x8_t)vcgez_f32(v17), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
        v20.i64[1] = LODWORD(v16);
        v21 = *(float *)(a2 + 20);
        *(float32x2_t *)v22.i8 = v17;
        v22.i64[1] = LODWORD(v21);
        *(int8x8_t *)&v23 = vext_s8((int8x8_t)v17, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), 4uLL);
        *((_QWORD *)&v23 + 1) = v17.u32[0];
        *(float *)&a6 = *(float *)(a2 + 124) * 1.01;
        v24 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
        v24.i32[3] = 0;
        v41 = v20;
        v42 = v22;
        v43 = v23;
        v44 = v24;
        v25 = (int8x16_t)vabsq_f32((float32x4_t)v22);
        *(int8x8_t *)&v26 = vext_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), 4uLL);
        v27 = v16 + (float)(v15 * v21);
        v28 = -3.4028e38;
        if (v21 >= 0.0)
          v28 = 3.4028e38;
        if (v21 != 0.0)
          v16 = v28;
        v29 = v15 < 3.4028e38;
        if (v15 >= 3.4028e38)
          v30 = v16;
        else
          v30 = v27;
        if (v29)
          *(double *)v31.i64 = v18;
        else
          *(double *)v31.i64 = v19;
        v31.i64[1] = LODWORD(v30);
        v45 = v25;
        *((_QWORD *)&v26 + 1) = v25.u32[0];
        v46 = v26;
        v47 = vminq_f32(v20, v31);
        v48 = vmaxq_f32(v20, v31);
        if ((physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 424), v13, &v41, a3) & 1) != 0)goto LABEL_19;
        goto LABEL_23;
      case 3:
        if (*(_WORD *)(a2 + 96))
          goto LABEL_18;
        v33 = *(float *)(a2 + 80);
        v34 = *(float *)(a2 + 92);
        v35 = *(float32x2_t *)(a2 + 72);
        v36 = *(float32x2_t *)(a2 + 84);
        *(float32x2_t *)v37.f32 = vmul_f32(vadd_f32(v35, v36), (float32x2_t)0x3F0000003F000000);
        v37.f32[2] = (float)(v33 + v34) * 0.5;
        v37.i32[3] = 0;
        v38 = v34 - v33;
        *(float32x2_t *)v39.i8 = vmul_f32(vsub_f32(v36, v35), (float32x2_t)0x3F0000003F000000);
        v39.i64[1] = COERCE_UNSIGNED_INT(v38 * 0.5);
        v41 = v37;
        v42 = v39;
        result = physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 424), v13, &v41, a3);
        if (!(_DWORD)result)
          return result;
        goto LABEL_19;
      case 4:
LABEL_18:
        physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)&v41, a2 + 48, (__int32 *)(a2 + 12), a2, a4, a5, a6, a7, a8, a9, a10);
        if ((physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 424), *(_QWORD **)(a1 + 8), &v41, (unsigned int (***)(_QWORD, int *, uint64_t))a3) & 1) != 0)goto LABEL_19;
LABEL_23:
        result = 0;
        break;
      default:
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    if (*(_BYTE *)(a1 + 496) && *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324))
      return physx::Sq::ExtendedBucketPruner::overlap(a1 + 80, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    else
      return 1;
  }
  return result;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x4_t *a5, unsigned int (***a6)(_QWORD, int *, uint64_t))
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  int v39;
  _QWORD v40[256];
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v8 = a4;
  v44 = *MEMORY[0x24BDAC8D0];
  v43 = 0x10000000100;
  v9 = 1;
  v41 = 1;
  v42 = v40;
  v10 = a4[2];
  v40[0] = v10;
  while (1)
  {
    v11 = v9 - 1;
    v12 = v42[v9 - 1];
    v13 = *(float32x4_t *)(v12 + 12);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v12), v14);
    v15.i32[3] = 0;
    v16 = vmulq_f32(vaddq_f32(*(float32x4_t *)v12, v13), v14);
    v16.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a5, v16, v15))
    {
      v17 = 2 * v9;
      while (1)
      {
        v11 = v9 - 1;
        v18 = *(unsigned int *)(v12 + 24);
        if ((v18 & 1) != 0)
          break;
        v12 = v10 + 28 * (*(_DWORD *)(v12 + 24) >> 1);
        v42[v11] = v12 + 28;
        if (v9 == (HIDWORD(v43) & 0x7FFFFFFF))
          physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v40, v17);
        v19 = *(float32x4_t *)(v12 + 12);
        v20.i64[0] = 0x3F0000003F000000;
        v20.i64[1] = 0x3F0000003F000000;
        v21 = vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v12), v20);
        v21.i32[3] = 0;
        v22 = vmulq_f32(vaddq_f32(*(float32x4_t *)v12, v19), v20);
        v22.i32[3] = 0;
        ++v9;
        v17 += 2;
        if (!physx::Gu::OBBAABBTests<true>::operator()(a5, v22, v21))
        {
          v11 = v9 - 1;
          goto LABEL_16;
        }
      }
      v23 = (v18 >> 1) & 0xF;
      if (v23)
        break;
    }
LABEL_16:
    v9 = v11;
    if (!v11)
    {
      v34 = 1;
      goto LABEL_19;
    }
  }
  v24 = (unsigned int *)(*v8 + ((v18 >> 3) & 0x1FFFFFFC));
  v25 = (v18 >> 1) & 0xF;
  while (1)
  {
    v27 = *v24++;
    v26 = v27;
    if (v23 < 2)
      goto LABEL_27;
    v28 = a3 + 24 * v26;
    v29 = *(float32x4_t *)(v28 + 12);
    v30 = vaddq_f32(*(float32x4_t *)v28, v29);
    v31.i64[0] = 0x3F0000003F000000;
    v31.i64[1] = 0x3F0000003F000000;
    v32 = vmulq_f32(vsubq_f32(v29, *(float32x4_t *)v28), v31);
    v33 = vmulq_f32(v30, v31);
    v33.i32[3] = 0;
    v32.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a5, v33, v32))
    {
LABEL_27:
      v39 = 0;
      if (!(**a6)(a6, &v39, a2 + 16 * v26))
        break;
    }
    if (!--v25)
    {
      v8 = a4;
      goto LABEL_16;
    }
  }
  v34 = 0;
LABEL_19:
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x7FFFFFFF00000000) != 0 && v42 != v40 && v42)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v34;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x4_t *a5, uint64_t (***a6)(_QWORD, int *, uint64_t))
{
  unsigned int v8;
  uint64_t v9;
  float32x4_t v10;
  unsigned int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x8_t v17;
  unint64_t v18;
  float32x4_t v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  int v35;
  _QWORD v36[256];
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v39 = 0x10000000100;
  v8 = 1;
  v37 = 1;
  v38 = v36;
  v9 = a4[2];
  v36[0] = v9;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    v11 = 2 * v8--;
    v12 = v38[v8];
    v13 = *(float32x4_t *)(v12 + 12);
    v14 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v12), v10);
    v14.i32[3] = 0;
    v15 = vaddq_f32(*(float32x4_t *)v12, v13);
    while (1)
    {
      v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      v17 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v14, a5[1]), vabdq_f32(v16, *a5)));
      if ((~vuzp1_s8(v17, v17).u32[0] & 0xFFFFFF) != 0)
        break;
      v18 = *(unsigned int *)(v12 + 24);
      if ((v18 & 1) != 0)
      {
        v20 = (v18 >> 1) & 0xF;
        if (v20)
        {
          v21 = (unsigned int *)(*a4 + ((v18 >> 3) & 0x1FFFFFFC));
          v22 = (v18 >> 1) & 0xF;
          while (1)
          {
            v24 = *v21++;
            v23 = v24;
            if (v20 < 2
              || (v25 = a3 + 24 * v23,
                  v26 = *(float32x4_t *)(v25 + 12),
                  v27 = vmulq_f32(vsubq_f32(v26, *(float32x4_t *)v25), v10),
                  v27.i32[3] = 0,
                  v28 = vmulq_f32(vaddq_f32(*(float32x4_t *)v25, v26), v10),
                  v28.i32[3] = 0,
                  *(int16x4_t *)v27.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(a5[1], v27), vabdq_f32(v28, *a5))),
                  (~vuzp1_s8(*(int8x8_t *)v27.f32, *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0))
            {
              v35 = 0;
              v29 = (**a6)(a6, &v35, a2 + 16 * v23);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v29)
                break;
            }
            if (!--v22)
              goto LABEL_14;
          }
          v30 = 0;
          goto LABEL_17;
        }
        break;
      }
      v12 = v9 + 28 * (*(_DWORD *)(v12 + 24) >> 1);
      v38[v8] = v12 + 28;
      if (v8 + 1 == (HIDWORD(v39) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v36, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      v19 = *(float32x4_t *)(v12 + 12);
      v14 = vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v12), v10);
      v14.i32[3] = 0;
      v15 = vaddq_f32(*(float32x4_t *)v12, v19);
      v11 += 2;
      ++v8;
    }
LABEL_14:
    if (v8)
      continue;
    break;
  }
  v30 = 1;
LABEL_17:
  if ((v39 & 0x8000000000000000) == 0 && (v39 & 0x7FFFFFFF00000000) != 0 && v38 != v36 && v38)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v30;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x4_t *a5, uint64_t (***a6)(_QWORD, int *, uint64_t))
{
  unsigned int v9;
  uint64_t v10;
  float32x4_t v11;
  unsigned int v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  float32x4_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  int v42;
  _QWORD v43[256];
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v46 = 0x10000000100;
  v9 = 1;
  v44 = 1;
  v45 = v43;
  v10 = a4[2];
  v43[0] = v10;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    v12 = 2 * v9--;
    v13 = v45[v9];
    v14 = *(float32x4_t *)(v13 + 12);
    v15 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)v13), v11);
    v15.i32[3] = 0;
    v16 = vaddq_f32(*(float32x4_t *)v13, v14);
    while (1)
    {
      v17 = vmulq_f32(v16, v11);
      v17.i32[3] = 0;
      v18 = vaddq_f32(v15, a5[3]);
      v19 = vsubq_f32(*a5, v17);
      *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), 4uLL);
      v20.i64[1] = v19.u32[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
      v21.i64[1] = v18.u32[0];
      *(int16x4_t *)v18.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a5[7], vsubq_f32(v17, v18)), (int8x16_t)vcgeq_f32(vaddq_f32(v17, v18), a5[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a5[4], v21), a5[5], v18), vabsq_f32(vmlsq_f32(vmulq_f32(a5[1], v20), v19, a5[2])))));
      if (vuzp1_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v18.f32).u32[0] != -1)
        break;
      v22 = *(unsigned int *)(v13 + 24);
      if ((v22 & 1) != 0)
      {
        v24 = (v22 >> 1) & 0xF;
        if (v24)
        {
          v25 = (unsigned int *)(*a4 + ((v22 >> 3) & 0x1FFFFFFC));
          v26 = (v22 >> 1) & 0xF;
          while (1)
          {
            v28 = *v25++;
            v27 = v28;
            if (v24 < 2)
              goto LABEL_25;
            v29 = a3 + 24 * v27;
            v30 = *(float32x4_t *)(v29 + 12);
            v31 = vmulq_f32(vsubq_f32(v30, *(float32x4_t *)v29), v11);
            v32 = vmulq_f32(vaddq_f32(*(float32x4_t *)v29, v30), v11);
            v32.i32[3] = 0;
            v31.i32[3] = 0;
            v33 = vaddq_f32(a5[3], v31);
            v34 = vsubq_f32(*a5, v32);
            *(int8x8_t *)v35.f32 = vext_s8(*(int8x8_t *)v34.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), 4uLL);
            v35.i64[1] = v34.u32[0];
            *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
            v36.i64[1] = v33.u32[0];
            *(int16x4_t *)v33.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a5[7], vsubq_f32(v32, v33)), (int8x16_t)vcgeq_f32(vaddq_f32(v32, v33), a5[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a5[4], v36), a5[5], v33), vabsq_f32(vmlsq_f32(vmulq_f32(a5[1], v35), v34, a5[2])))));
            if (vuzp1_s8(*(int8x8_t *)v33.f32, *(int8x8_t *)v33.f32).u32[0] == -1)
            {
LABEL_25:
              v42 = 0;
              v37 = (**a6)(a6, &v42, a2 + 16 * v27);
              v11.i64[0] = 0x3F0000003F000000;
              v11.i64[1] = 0x3F0000003F000000;
              if (!v37)
                break;
            }
            if (!--v26)
              goto LABEL_14;
          }
          v38 = 0;
          goto LABEL_17;
        }
        break;
      }
      v13 = v10 + 28 * (*(_DWORD *)(v13 + 24) >> 1);
      v45[v9] = v13 + 28;
      if (v9 + 1 == (HIDWORD(v46) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v43, v12);
        v11.i64[0] = 0x3F0000003F000000;
        v11.i64[1] = 0x3F0000003F000000;
      }
      v23 = *(float32x4_t *)(v13 + 12);
      v15 = vmulq_f32(vsubq_f32(v23, *(float32x4_t *)v13), v11);
      v15.i32[3] = 0;
      v16 = vaddq_f32(*(float32x4_t *)v13, v23);
      v12 += 2;
      ++v9;
    }
LABEL_14:
    if (v9)
      continue;
    break;
  }
  v38 = 1;
LABEL_17:
  if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x7FFFFFFF00000000) != 0 && v45 != v43 && v45)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v38;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t (***a6)(_QWORD, int *, uint64_t))
{
  unsigned int v9;
  uint64_t v10;
  float32x4_t v11;
  unsigned int v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  float32x4_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  int v42;
  _QWORD v43[256];
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v46 = 0x10000000100;
  v9 = 1;
  v44 = 1;
  v45 = v43;
  v10 = a4[2];
  v43[0] = v10;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    v12 = 2 * v9--;
    v13 = v45[v9];
    v14 = *(float32x4_t *)(v13 + 12);
    v15 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)v13), v11);
    v15.i32[3] = 0;
    v16 = vaddq_f32(*(float32x4_t *)v13, v14);
    while (1)
    {
      v17 = vmulq_f32(v16, v11);
      v17.i32[3] = 0;
      v18 = vsubq_f32(*(float32x4_t *)a5, v17);
      v19 = vnegq_f32(v15);
      v19.i32[3] = 0;
      v20 = vsubq_f32(v18, vmaxq_f32(vminq_f32(v18, v15), v19));
      v21 = vmulq_f32(v20, v20);
      v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
      *(int16x4_t *)v21.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a5 + 16), vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32)), 0);
      if (vuzp1_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v21.f32).u32[0] != -1)
        break;
      v22 = *(unsigned int *)(v13 + 24);
      if ((v22 & 1) != 0)
      {
        v24 = (v22 >> 1) & 0xF;
        if (v24)
        {
          v25 = (unsigned int *)(*a4 + ((v22 >> 3) & 0x1FFFFFFC));
          v26 = (v22 >> 1) & 0xF;
          while (1)
          {
            v28 = *v25++;
            v27 = v28;
            if (v24 < 2)
              goto LABEL_25;
            v29 = a3 + 24 * v27;
            v30 = *(float32x4_t *)(v29 + 12);
            v31 = vmulq_f32(vsubq_f32(v30, *(float32x4_t *)v29), v11);
            v32 = vmulq_f32(vaddq_f32(*(float32x4_t *)v29, v30), v11);
            v32.i32[3] = 0;
            v31.i32[3] = 0;
            v33 = vsubq_f32(*(float32x4_t *)a5, v32);
            v34 = vnegq_f32(v31);
            v34.i32[3] = 0;
            v35 = vsubq_f32(v33, vmaxq_f32(vminq_f32(v33, v31), v34));
            v36 = vmulq_f32(v35, v35);
            v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
            *(int16x4_t *)v36.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a5 + 16), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)), 0);
            if (vuzp1_s8(*(int8x8_t *)v36.f32, *(int8x8_t *)v36.f32).u32[0] == -1)
            {
LABEL_25:
              v42 = 0;
              v37 = (**a6)(a6, &v42, a2 + 16 * v27);
              v11.i64[0] = 0x3F0000003F000000;
              v11.i64[1] = 0x3F0000003F000000;
              if (!v37)
                break;
            }
            if (!--v26)
              goto LABEL_14;
          }
          v38 = 0;
          goto LABEL_17;
        }
        break;
      }
      v13 = v10 + 28 * (*(_DWORD *)(v13 + 24) >> 1);
      v45[v9] = v13 + 28;
      if (v9 + 1 == (HIDWORD(v46) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v43, v12);
        v11.i64[0] = 0x3F0000003F000000;
        v11.i64[1] = 0x3F0000003F000000;
      }
      v23 = *(float32x4_t *)(v13 + 12);
      v15 = vmulq_f32(vsubq_f32(v23, *(float32x4_t *)v13), v11);
      v15.i32[3] = 0;
      v16 = vaddq_f32(*(float32x4_t *)v13, v23);
      v12 += 2;
      ++v9;
    }
LABEL_14:
    if (v9)
      continue;
    break;
  }
  v38 = 1;
LABEL_17:
  if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x7FFFFFFF00000000) != 0 && v45 != v43 && v45)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v38;
}

uint64_t physx::Sq::AABBPruner::sweep(uint64_t a1, float *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(_QWORD, float *, uint64_t))
{
  _QWORD *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  float32x2_t v20;
  float v21;
  char v22;
  float32x2_t v23;
  float v24;

  v10 = *(_QWORD **)(a1 + 8);
  if (!v10)
    goto LABEL_9;
  v11 = a2[18];
  v12 = a2[19];
  v14 = a2[20];
  v13 = a2[21];
  v15 = a2[22];
  v16 = a2[23];
  v23.f32[0] = (float)(v13 - v11) * 0.5;
  v23.f32[1] = (float)(v15 - v12) * 0.5;
  v24 = (float)(v16 - v14) * 0.5;
  v18 = *(_QWORD *)(a1 + 424);
  v17 = *(_QWORD *)(a1 + 432);
  v20.f32[0] = (float)(v13 + v11) * 0.5;
  v20.f32[1] = (float)(v15 + v12) * 0.5;
  v21 = (float)(v16 + v14) * 0.5;
  result = physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v22, v17, v18, v10, &v20, a3, a4, &v23, a5);
  if ((_DWORD)result)
  {
LABEL_9:
    if (*(_BYTE *)(a1 + 496) && *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324))
      return physx::Sq::ExtendedBucketPruner::sweep(a1 + 80, a2, a3, a4, (unsigned int (**)(_QWORD, float *, uint64_t))a5);
    else
      return 1;
  }
  return result;
}

uint64_t physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x2_t *a5, float32x2_t *a6, float *a7, float32x2_t *a8, unsigned int (***a9)(_QWORD, float *, uint64_t))
{
  int v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  double v17;
  double v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  unsigned int v42;
  float v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unsigned __int32 v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unsigned __int32 v60;
  uint64_t v62;
  float32x4_t v64;
  unsigned int v65;
  unsigned int *v66;
  int i;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float32x4_t v81;
  uint64_t v83;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float v96;
  _QWORD v97[256];
  char v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;

  v12 = 0;
  v101 = *MEMORY[0x24BDAC8D0];
  v13 = a5[1].f32[0] + a5[1].f32[0];
  v14 = vadd_f32(*a5, *a5);
  v15 = vadd_f32(*a6, *a6);
  v16 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v22.f32 = vadd_f32(*a8, *a8);
  v17 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  v18 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v19.f32 = v14;
  v19.i64[1] = LODWORD(v13);
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v16);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  v22.f32[2] = a8[1].f32[0] + a8[1].f32[0];
  v22.i32[3] = 0;
  v23 = vabsq_f32(v20);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
  v24.i64[1] = v23.u32[0];
  v25 = v13 + (float)(v16 * *a7);
  v26 = -3.4028e38;
  if (v16 >= 0.0)
    v26 = 3.4028e38;
  if (v16 != 0.0)
    v13 = v26;
  if (*a7 >= 3.4028e38)
  {
    *(double *)v27.i64 = v18;
  }
  else
  {
    v13 = v25;
    *(double *)v27.i64 = v17;
  }
  v27.i64[1] = LODWORD(v13);
  v28 = vminq_f32(v19, v27);
  v29 = vmaxq_f32(v19, v27);
  v100 = 0x10000000100;
  v98 = 1;
  v99 = v97;
  v30 = a4[2];
  v97[0] = v30;
  v31 = vnegq_f32(v21);
  v90 = v20;
  v91 = v19;
  v88 = v23;
  v89 = v22;
  v86 = v31;
  v87 = v24;
  do
  {
    v32 = v99[v12];
    v33 = *(float32x4_t *)(v32 + 12);
    v34 = vsubq_f32(v33, *(float32x4_t *)v32);
    v34.i32[3] = 0;
    v35 = vaddq_f32(*(float32x4_t *)v32, v33);
    v35.i32[3] = 0;
    v36 = vaddq_f32(v22, v34);
    v37 = vaddq_f32(v35, v36);
    v38 = vsubq_f32(v35, v36);
    v39 = vsubq_f32(v19, v35);
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
    v40.i64[1] = v39.u32[0];
    *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v36.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), 4uLL);
    v41.i64[1] = v36.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v37, v28), (int8x16_t)vcgeq_f32(v29, v38)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v41), v24, v36), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v40), v39, v31))))), *(int8x8_t *)v33.f32).u32[0] == -1)
    {
      v42 = HIDWORD(*(_OWORD *)(v32 + 12));
      v43 = *a7;
      v96 = *a7;
      if ((v33.i8[12] & 1) == 0)
      {
        v23 = v88;
        v22 = v89;
        v31 = v86;
        v24 = v87;
        v92 = v29;
        v94 = v28;
        do
        {
          v44 = v30 + 28 * (v42 >> 1);
          v45 = *(float32x4_t *)(v44 + 12);
          v46 = vsubq_f32(v45, *(float32x4_t *)v44);
          v46.i32[3] = 0;
          v47 = vaddq_f32(*(float32x4_t *)v44, v45);
          v47.i32[3] = 0;
          v48 = vaddq_f32(v22, v46);
          v49 = vsubq_f32(v19, v47);
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), 4uLL);
          v50.i64[1] = v49.u32[0];
          *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), 4uLL);
          v51.i64[1] = v48.u32[0];
          v52 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v47, v48), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v47, v48))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v51), v24, v48), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v50), v49, v31))))), *(int8x8_t *)v47.f32).u32[0];
          v53 = *(float32x4_t *)(v44 + 28);
          v54 = *(float32x4_t *)(v44 + 40);
          v55 = vsubq_f32(v54, v53);
          v55.i32[3] = 0;
          v56 = vaddq_f32(v53, v54);
          v56.i32[3] = 0;
          v57 = vaddq_f32(v22, v55);
          v58 = vsubq_f32(v19, v56);
          *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
          v51.i64[1] = v58.u32[0];
          *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
          v59.i64[1] = v57.u32[0];
          v60 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v56, v57), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v56, v57))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v59), v24, v57), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v51), v58, v31))))), *(int8x8_t *)v47.f32).u32[0];
          if (v52 == -1 && v60 == -1)
          {
            v64 = vmulq_f32(v20, vsubq_f32(v56, v47));
            v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
            v64.f32[0] = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32).f32[0];
            v99[v12] = v44 + 28 * (v64.f32[0] > 0.0);
            v62 = v44 + 28 * (v64.f32[0] <= 0.0);
            if (v12 + 1 == (HIDWORD(v100) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v97, 2 * (v12 + 1));
              v29 = v92;
              v28 = v94;
              v31 = v86;
              v24 = v87;
              v23 = v88;
              v22 = v89;
              v20 = v90;
              v19 = v91;
            }
            ++v12;
          }
          else
          {
            if (v52 == -1)
              v62 = v44;
            else
              v62 = v44 + 28;
            if (v52 != -1 && v60 != -1)
              goto LABEL_38;
          }
          v42 = *(_DWORD *)(v62 + 24);
        }
        while ((v42 & 1) == 0);
        v43 = *a7;
      }
      v65 = (v42 >> 1) & 0xF;
      if (v65)
      {
        v66 = (unsigned int *)(*a4 + 4 * (v42 >> 5));
        for (i = (v42 >> 1) & 0xF; i; --i)
        {
          v69 = *v66++;
          v68 = v69;
          if (v65 < 2)
            goto LABEL_33;
          v70 = a3 + 24 * v68;
          v71 = *(float32x4_t *)(v70 + 12);
          v72 = vaddq_f32(*(float32x4_t *)v70, v71);
          v73 = vsubq_f32(v71, *(float32x4_t *)v70);
          v72.i32[3] = 0;
          v73.i32[3] = 0;
          v74 = vaddq_f32(v89, v73);
          v75 = vaddq_f32(v72, v74);
          v76 = vsubq_f32(v72, v74);
          v77 = vsubq_f32(v19, v72);
          *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v77.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), 4uLL);
          v78.i64[1] = v77.u32[0];
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v74.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), 4uLL);
          v79.i64[1] = v74.u32[0];
          *(int16x4_t *)v74.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v75, v28), (int8x16_t)vcgeq_f32(v29, v76)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v88, v79), v87, v74), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v78), v77, v86)))));
          if (vuzp1_s8(*(int8x8_t *)v74.f32, *(int8x8_t *)v74.f32).u32[0] == -1)
          {
LABEL_33:
            v93 = v29;
            v95 = v28;
            if (!(**a9)(a9, &v96, a2 + 16 * v68))
            {
              v83 = 0;
              goto LABEL_41;
            }
            v80 = v96;
            v20 = v90;
            v19 = v91;
            v29 = v93;
            v28 = v95;
            if (v96 < v43)
            {
              *a7 = v96;
              v81 = vmlaq_n_f32(v91, v90, v80);
              v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
              v28 = vminq_f32(v91, v81);
              v29 = vmaxq_f32(v91, v81);
            }
          }
        }
      }
      v23 = v88;
      v22 = v89;
      v31 = v86;
      v24 = v87;
    }
LABEL_38:
    ;
  }
  while (v12--);
  v83 = 1;
LABEL_41:
  if ((v100 & 0x8000000000000000) == 0 && (v100 & 0x7FFFFFFF00000000) != 0 && v99 != v97 && v99)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v83;
}

uint64_t physx::Sq::AABBPruner::raycast(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, unsigned int (**a5)(_QWORD, float *, uint64_t))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  char v17;

  v10 = *(_QWORD **)(a1 + 8);
  if (!v10
    || (v12 = *(_QWORD *)(a1 + 424),
        v11 = *(_QWORD *)(a1 + 432),
        v15 = 0,
        v16 = 0,
        v13 = physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v17, v11, v12, v10, a2, a3, a4, (uint64_t)&v15, (unsigned int (***)(_QWORD, float *, uint64_t))a5), result = 0, v13))
  {
    if (*(_BYTE *)(a1 + 496) && *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324))
      return physx::Sq::ExtendedBucketPruner::raycast(a1 + 80, a2, a3, a4, a5);
    else
      return 1;
  }
  return result;
}

uint64_t physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x2_t *a5, float32x2_t *a6, float *a7, uint64_t a8, unsigned int (***a9)(_QWORD, float *, uint64_t))
{
  int v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  double v16;
  double v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  unsigned int v41;
  float v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned __int32 v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned __int32 v58;
  uint64_t v60;
  float32x4_t v62;
  unsigned int v63;
  unsigned int *v64;
  int i;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float32x4_t v79;
  uint64_t v81;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float v93;
  _QWORD v94[256];
  char v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;

  v12 = 0;
  v98 = *MEMORY[0x24BDAC8D0];
  v13 = a5[1].f32[0] + a5[1].f32[0];
  v14 = vadd_f32(*a5, *a5);
  v15 = vadd_f32(*a6, *a6);
  v16 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  v17 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v18.f32 = v14;
  v18.i64[1] = LODWORD(v13);
  v19 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v19);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  v22 = vabsq_f32(v20);
  *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v23.i64[1] = v22.u32[0];
  v24 = v13 + (float)(v19 * *a7);
  v25 = -3.4028e38;
  if (v19 >= 0.0)
    v25 = 3.4028e38;
  if (v19 != 0.0)
    v13 = v25;
  if (*a7 >= 3.4028e38)
  {
    *(double *)v26.i64 = v17;
  }
  else
  {
    v13 = v24;
    *(double *)v26.i64 = v16;
  }
  v26.i64[1] = LODWORD(v13);
  v27 = vminq_f32(v18, v26);
  v28 = vmaxq_f32(v18, v26);
  v97 = 0x10000000100;
  v95 = 1;
  v96 = v94;
  v29 = a4[2];
  v94[0] = v29;
  v30 = vnegq_f32(v21);
  v87 = v20;
  v88 = v18;
  v85 = v23;
  v86 = v22;
  v84 = v30;
  do
  {
    v31 = v96[v12];
    v32 = *(float32x4_t *)(v31 + 12);
    v33 = (int8x16_t)vsubq_f32(v32, *(float32x4_t *)v31);
    v34 = (float32x4_t)v33;
    v34.i32[3] = 0;
    v35 = vaddq_f32(*(float32x4_t *)v31, v32);
    v35.i32[3] = 0;
    v36 = vaddq_f32(v35, v34);
    v37 = vsubq_f32(v35, v34);
    v38 = vsubq_f32(v18, v35);
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
    v39.i64[1] = v38.u32[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), 4uLL);
    v40.i64[1] = v33.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v36, v27), (int8x16_t)vcgeq_f32(v28, v37)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v40), v23, v34), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v39), v38, v30))))), *(int8x8_t *)v32.f32).u32[0] == -1)
    {
      v41 = HIDWORD(*(_OWORD *)(v31 + 12));
      v42 = *a7;
      v93 = *a7;
      if ((v32.i8[12] & 1) == 0)
      {
        v23 = v85;
        v22 = v86;
        v30 = v84;
        v89 = v28;
        v91 = v27;
        do
        {
          v43 = v29 + 28 * (v41 >> 1);
          v44 = *(float32x4_t *)(v43 + 12);
          v45 = (int8x16_t)vsubq_f32(v44, *(float32x4_t *)v43);
          v46 = (float32x4_t)v45;
          v46.i32[3] = 0;
          v47 = vaddq_f32(*(float32x4_t *)v43, v44);
          v47.i32[3] = 0;
          v48 = vsubq_f32(v18, v47);
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), 4uLL);
          v49.i64[1] = v48.u32[0];
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), 4uLL);
          v50.i64[1] = v45.u32[0];
          v51 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v47, v46), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v47, v46))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v50), v23, v46), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v49), v48, v30))))), *(int8x8_t *)v47.f32).u32[0];
          v52 = *(float32x4_t *)(v43 + 28);
          v53 = *(float32x4_t *)(v43 + 40);
          v54 = (int8x16_t)vsubq_f32(v53, v52);
          v55 = (float32x4_t)v54;
          v55.i32[3] = 0;
          v56 = vaddq_f32(v52, v53);
          v56.i32[3] = 0;
          v57 = vsubq_f32(v18, v56);
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
          v49.i64[1] = v57.u32[0];
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), 4uLL);
          v50.i64[1] = v54.u32[0];
          v58 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v56, v55), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v56, v55))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v50), v23, v55), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v49), v57, v30))))), *(int8x8_t *)v47.f32).u32[0];
          if (v51 == -1 && v58 == -1)
          {
            v62 = vmulq_f32(v20, vsubq_f32(v56, v47));
            v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
            v62.f32[0] = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32).f32[0];
            v96[v12] = v43 + 28 * (v62.f32[0] > 0.0);
            v60 = v43 + 28 * (v62.f32[0] <= 0.0);
            if (v12 + 1 == (HIDWORD(v97) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v94, 2 * (v12 + 1));
              v28 = v89;
              v27 = v91;
              v30 = v84;
              v23 = v85;
              v22 = v86;
              v20 = v87;
              v18 = v88;
            }
            ++v12;
          }
          else
          {
            if (v51 == -1)
              v60 = v43;
            else
              v60 = v43 + 28;
            if (v51 != -1 && v58 != -1)
              goto LABEL_38;
          }
          v41 = *(_DWORD *)(v60 + 24);
        }
        while ((v41 & 1) == 0);
        v42 = *a7;
      }
      v63 = (v41 >> 1) & 0xF;
      if (v63)
      {
        v64 = (unsigned int *)(*a4 + 4 * (v41 >> 5));
        for (i = (v41 >> 1) & 0xF; i; --i)
        {
          v67 = *v64++;
          v66 = v67;
          if (v63 < 2)
            goto LABEL_33;
          v68 = a3 + 24 * v66;
          v69 = *(float32x4_t *)(v68 + 12);
          v70 = vaddq_f32(*(float32x4_t *)v68, v69);
          v71 = (int8x16_t)vsubq_f32(v69, *(float32x4_t *)v68);
          v70.i32[3] = 0;
          v72 = (float32x4_t)v71;
          v72.i32[3] = 0;
          v73 = vaddq_f32(v70, v72);
          v74 = vsubq_f32(v70, v72);
          v75 = vsubq_f32(v18, v70);
          *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v75.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), 4uLL);
          v76.i64[1] = v75.u32[0];
          *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v71.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), 4uLL);
          v77.i64[1] = v71.u32[0];
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v73, v27), (int8x16_t)vcgeq_f32(v28, v74)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v86, v77), v85, v72), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v76), v75, v84)))));
          if (vuzp1_s8(*(int8x8_t *)v71.i8, *(int8x8_t *)v71.i8).u32[0] == -1)
          {
LABEL_33:
            v90 = v28;
            v92 = v27;
            if (!(**a9)(a9, &v93, a2 + 16 * v66))
            {
              v81 = 0;
              goto LABEL_41;
            }
            v78 = v93;
            v20 = v87;
            v18 = v88;
            v28 = v90;
            v27 = v92;
            if (v93 < v42)
            {
              *a7 = v93;
              v79 = vmlaq_n_f32(v88, v87, v78);
              v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
              v27 = vminq_f32(v88, v79);
              v28 = vmaxq_f32(v88, v79);
            }
          }
        }
      }
      v23 = v85;
      v22 = v86;
      v30 = v84;
    }
LABEL_38:
    ;
  }
  while (v12--);
  v81 = 1;
LABEL_41:
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v94 && v96)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v81;
}

uint64_t physx::Sq::AABBPruner::purge(physx::Sq::AABBPruner *this)
{
  uint64_t result;

  result = physx::Sq::AABBPruner::release(this);
  *((_BYTE *)this + 497) = 1;
  return result;
}

uint64_t physx::Sq::AABBPruner::setRebuildRateHint(uint64_t this, int a2)
{
  *(_DWORD *)(this + 404) = a2 - 3;
  *(_DWORD *)(this + 412) = 0;
  return this;
}

uint64_t physx::Sq::AABBPruner::commit(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  const physx::Sq::AABBTree *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = this;
  if (!*(_BYTE *)(this + 497) && *(_DWORD *)(this + 400) != 6)
    return this;
  *(_BYTE *)(this + 497) = 0;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    if (*(_BYTE *)(this + 496))
    {
      if (*(_DWORD *)(this + 400) != 6)
        return (uint64_t)physx::Sq::AABBPruner::refitUpdatedAndRemoved((uint64_t *)this);
      physx::Sq::AABBTree::~AABBTree(*(physx::Sq::AABBTree **)(this + 8));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
      if (*(_QWORD *)(v1 + 56))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(_QWORD *)(v1 + 56) = 0;
      *(_DWORD *)(v1 + 400) = 0;
      v3 = *(_DWORD *)(v1 + 68);
      v4 = *(_DWORD *)(v1 + 404);
      if (v3 <= v4)
      {
        if (v3 >= v4)
        {
LABEL_26:
          v11 = *(const physx::Sq::AABBTree **)(v1 + 48);
          *(_QWORD *)(v1 + 8) = v11;
          *(_QWORD *)(v1 + 48) = 0;
          v12 = (_QWORD *)(v1 + 464);
          if (*(_DWORD *)(v1 + 416) <= *(_DWORD *)(v1 + 64))
            v13 = *(_DWORD *)(v1 + 64);
          else
            v13 = *(_DWORD *)(v1 + 416);
          physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBTreeUpdateMap *)(v1 + 464), v13, v11);
          if (*(_DWORD *)(v1 + 512))
          {
            v14 = *(unsigned int **)(v1 + 504);
            do
            {
              v15 = *v14;
              if (*(_DWORD *)(v1 + 472) > v15 && *(_DWORD *)(*v12 + 4 * v15) != -1)
              {
                physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v1 + 8), *(_DWORD *)(*v12 + 4 * v15));
                LODWORD(v15) = *v14;
              }
              physx::Sq::AABBTreeUpdateMap::invalidate((uint64_t *)(v1 + 464), v15, v14[1], **(_QWORD **)(v1 + 8), *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16));
              v14 += 2;
            }
            while ((unint64_t)v14 < *(_QWORD *)(v1 + 504) + 8 * (unint64_t)*(unsigned int *)(v1 + 512));
          }
          *(_DWORD *)(v1 + 512) = 0;
          v16 = *(unsigned int *)(v1 + 528);
          if ((_DWORD)v16)
          {
            v17 = 0;
            v18 = 4 * v16;
            do
            {
              v19 = *(unsigned int *)(*(_QWORD *)(v1 + 520) + v17);
              if (*(_DWORD *)(v1 + 472) > v19)
              {
                v20 = *(_DWORD *)(*v12 + 4 * v19);
                if (v20 != -1)
                  physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v1 + 8), v20);
              }
              v17 += 4;
            }
            while (v18 != v17);
          }
          *(_DWORD *)(v1 + 528) = 0;
          physx::Sq::AABBPruner::refitUpdatedAndRemoved((uint64_t *)v1);
          this = physx::Sq::ExtendedBucketPruner::removeMarkedObjects((physx::Sq::ExtendedBucketPruner *)(v1 + 80), *(_DWORD *)(v1 + 72) - 1);
          *(_BYTE *)(v1 + 498) = *(_DWORD *)(v1 + 236) + *(_DWORD *)(v1 + 164) + *(_DWORD *)(v1 + 324) != 0;
          return this;
        }
        v5 = -1;
      }
      else
      {
        v5 = 1;
      }
      *(_DWORD *)(v1 + 412) += v5;
      goto LABEL_26;
    }
    physx::Sq::AABBTree::~AABBTree(*(physx::Sq::AABBTree **)(this + 8));
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *(_QWORD *)(v1 + 8) = 0;
  v6 = *(_DWORD *)(v1 + 416);
  if (v6)
  {
    v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
    else
      v8 = "<allocation names disabled>";
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, 104, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBPruner.cpp", 750);
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 96) = 0;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 76) = 0u;
    *(_QWORD *)(v1 + 8) = v9;
    v22 = *(_QWORD *)(v1 + 424);
    v23 = 0;
    LODWORD(v21) = 4;
    HIDWORD(v21) = v6;
    this = physx::Sq::AABBTree::build((_DWORD *)v9, (uint64_t)&v21);
    v21 = 0;
    v22 = 0;
    if (v23)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_BYTE *)(v1 + 496))
    {
      if (v6 <= *(_DWORD *)(v1 + 64))
        v10 = *(_DWORD *)(v1 + 64);
      else
        v10 = v6;
      return (uint64_t)physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBTreeUpdateMap *)(v1 + 464), v10, *(const physx::Sq::AABBTree **)(v1 + 8));
    }
  }
  return this;
}

uint64_t *physx::Sq::AABBPruner::refitUpdatedAndRemoved(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = (uint64_t *)this[1];
  if (v1)
  {
    v2 = this;
    if (*((_DWORD *)this + 104))
    {
      physx::Sq::ExtendedBucketPruner::refitMarkedNodes((uint64_t)(this + 10), this[53]);
      return physx::Sq::AABBTree::refitMarkedNodes(v1, v2[53]);
    }
  }
  return this;
}

void *physx::Sq::AABBTreeUpdateMap::initMap(physx::Sq::AABBTreeUpdateMap *this, unsigned int a2, const physx::Sq::AABBTree *a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v11;
  void *v12;
  void *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  if (a2)
  {
    v6 = a2 + (a2 >> 2);
    v7 = *((_DWORD *)this + 3);
    v8 = v7 & 0x7FFFFFFF;
    v9 = (v7 >> 1) & 0x3FFFFFFF;
    if (v8 - v6 <= 0x400 || v6 >= v9)
      v11 = v8;
    else
      v11 = 0;
    if (v11 < a2)
    {
      v26 = 0;
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this, 0, &v26);
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this, *((_DWORD *)this + 2));
      if ((*((_DWORD *)this + 3) & 0x7FFFFFFFu) < v6)
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this, v6);
    }
    *((_DWORD *)this + 2) = a2;
    v12 = *(void **)this;
    result = memset(v12, 255, 4 * a2);
    v14 = *((unsigned int *)a3 + 16);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = *((_QWORD *)a3 + 2);
      v17 = *(_QWORD *)a3;
      do
      {
        v18 = v16 + 28 * v15;
        v21 = *(_DWORD *)(v18 + 24);
        v19 = (unsigned int *)(v18 + 24);
        v20 = v21;
        if ((v21 & 1) != 0)
        {
          v22 = (v20 >> 1) & 0xF;
          if ((_DWORD)v22)
          {
            v23 = v17;
            do
            {
              v24 = *(unsigned int *)(v23 + (((unint64_t)*v19 >> 3) & 0x1FFFFFFC));
              v23 += 4;
              *((_DWORD *)v12 + v24) = v15;
              --v22;
            }
            while (v22);
          }
        }
        ++v15;
      }
      while (v15 != v14);
    }
  }
  else
  {
    v25 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this, 0, &v25);
    return (void *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this, *((_DWORD *)this + 2));
  }
  return result;
}

float physx::Sq::AABBPruner::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  float result;
  uint64_t v5;
  uint64_t v6;

  result = physx::Sq::PruningPool::shiftOrigin((unsigned int *)(a1 + 416), a2);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    result = physx::Sq::AABBTree::shiftOrigin(v5, a2);
  if (*(_BYTE *)(a1 + 496))
    physx::Sq::ExtendedBucketPruner::shiftOrigin(a1 + 80, a2);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    return physx::Sq::AABBTree::shiftOrigin(v6, a2);
  return result;
}

float physx::Sq::AABBTree::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  float result;

  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2)
  {
    v3 = 0;
    _X10 = (float *)(*(_QWORD *)(a1 + 16) + 20);
    do
    {
      if (++v3 < v2)
        __asm { PRFM            #0, [X10,#8] }
      *(float32x2_t *)(_X10 - 5) = vsub_f32(*(float32x2_t *)(_X10 - 5), *a2);
      *(_X10 - 3) = *(_X10 - 3) - a2[1].f32[0];
      *((float32x2_t *)_X10 - 1) = vsub_f32(*(float32x2_t *)(_X10 - 2), *a2);
      result = *_X10 - a2[1].f32[0];
      *_X10 = result;
      _X10 += 7;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::visualize(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 && *(_QWORD *)(v6 + 16))
  {
    v8 = xmmword_2260E5D70;
    v9 = 0;
    v10 = 0;
    physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v8);
    a2[1] = a3;
    physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*(_QWORD *)(v6 + 16), *(__int128 **)(v6 + 16), a2);
  }
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  result = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v8);
  a2[1] = -1;
  if (*(_BYTE *)(a1 + 496))
  {
    if (*(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324))
      return physx::Sq::ExtendedBucketPruner::visualize(a1 + 80, a2, a3);
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  v10 = 1;
  result = physx::Cm::operator<<(a3, (uint64_t *)&v8);
  if ((*((_DWORD *)a2 + 6) & 1) == 0)
  {
    physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(a1, a1 + 28 * (*((_DWORD *)a2 + 6) >> 1), a3);
    if (a1)
      v7 = a1 + 28 * (*((_DWORD *)a2 + 6) >> 1) + 28;
    else
      v7 = 0;
    return physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(a1, v7, a3);
  }
  return result;
}

BOOL physx::Sq::AABBPruner::buildStep(physx::Sq::AABBPruner *this, int a2)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  unint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unsigned int v35;
  unsigned int *v36;
  _OWORD *v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;

  if (!*((_BYTE *)this + 498))
    return 0;
  switch(*((_DWORD *)this + 100))
  {
    case 0:
      if (!a2 || ((*(uint64_t (**)(physx::Sq::AABBPruner *))(*(_QWORD *)this + 152))(this) & 1) == 0)
        return 0;
      goto LABEL_43;
    case 1:
      physx::Sq::AABBTree::progressiveBuild(*((physx::Sq::AABBTree **)this + 6), (uint64_t)this + 16, (uint64_t *)this + 5, 0, 0);
      v5 = 0;
      *((_DWORD *)this + 100) = 2;
      *((_DWORD *)this + 17) = 0;
      v6 = *((_DWORD *)this + 5);
      v7 = v6;
      break;
    case 2:
      ++*((_DWORD *)this + 17);
      if (physx::Sq::AABBTree::progressiveBuild(*((physx::Sq::AABBTree **)this + 6), (uint64_t)this + 16, (uint64_t *)this + 5, 1, *((_DWORD *)this + 102) / *((_DWORD *)this + 101) + 1))goto LABEL_42;
      v12 = 3;
LABEL_41:
      *((_DWORD *)this + 100) = v12;
LABEL_42:
      if (a2)
        goto LABEL_43;
      return *((_DWORD *)this + 100) == 6;
    case 3:
      ++*((_DWORD *)this + 17);
      *((_DWORD *)this + 100) = 4;
      if (!*((_DWORD *)this + 128))
        goto LABEL_42;
      if (*((_DWORD *)this + 104) <= *((_DWORD *)this + 16))
        v13 = *((_DWORD *)this + 16);
      else
        v13 = *((_DWORD *)this + 104);
      physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBPruner *)((char *)this + 480), v13, *((const physx::Sq::AABBTree **)this + 6));
      if (*((_DWORD *)this + 128))
      {
        v14 = (unsigned int *)*((_QWORD *)this + 63);
        do
        {
          v15 = *v14;
          v16 = v14[1];
          v14 += 2;
          physx::Sq::AABBTreeUpdateMap::invalidate((uint64_t *)this + 60, v15, v16, **((_QWORD **)this + 6), *(_QWORD *)(*((_QWORD *)this + 6) + 16));
        }
        while ((unint64_t)v14 < *((_QWORD *)this + 63) + 8 * (unint64_t)*((unsigned int *)this + 128));
      }
      *((_DWORD *)this + 128) = 0;
      if (!a2)
        return *((_DWORD *)this + 100) == 6;
      goto LABEL_43;
    case 4:
      ++*((_DWORD *)this + 17);
      *((_DWORD *)this + 100) = 5;
      v17 = (uint64_t *)*((_QWORD *)this + 6);
      v18 = *((_DWORD *)v17 + 16);
      if (v18)
      {
        v19 = *((_QWORD *)this + 53);
        v20 = *v17;
        v21 = v17[2];
        v22 = vdupq_n_s32(0x5A60B17Fu);
        v23 = vdupq_n_s32(0xDA60B17F);
        do
        {
          _X15 = (float32x4_t *)(v21 + 28 * --v18);
          if (v18)
            __asm { PRFUM           #0, [X15,#-0x1C] }
          v29 = *(unsigned int *)(v21 + 28 * v18 + 24);
          if ((v29 & 1) != 0)
          {
            v35 = (v29 >> 1) & 0xF;
            v34 = (float32x4_t)v23;
            v31 = (float32x4_t)v22;
            if (v35)
            {
              v36 = (unsigned int *)(v20 + ((v29 >> 3) & 0x1FFFFFFC));
              v37 = (_OWORD *)(v19 + 24 * *v36);
              v31 = *(float32x4_t *)v37;
              v34 = *(float32x4_t *)((char *)v37 + 12);
              if (v35 != 1)
              {
                v38 = v36 + 1;
                v39 = 4 * v35 - 4;
                do
                {
                  v40 = *v38++;
                  v41 = v19 + 24 * v40;
                  v31 = vminq_f32(v31, *(float32x4_t *)v41);
                  v34 = vmaxq_f32(v34, *(float32x4_t *)(v41 + 12));
                  v39 -= 4;
                }
                while (v39);
              }
            }
          }
          else
          {
            v30 = v21 + 28 * (*(_DWORD *)(v21 + 28 * v18 + 24) >> 1);
            v31 = vminq_f32(*(float32x4_t *)v30, *(float32x4_t *)(v30 + 28));
            v32.i32[0] = HIDWORD(*(_OWORD *)v30);
            v32.i32[1] = *(_DWORD *)(v30 + 16);
            v32.i64[1] = *(unsigned int *)(v30 + 20);
            v33.i32[0] = HIDWORD(*(_OWORD *)(v30 + 28));
            v33.i32[1] = *(_DWORD *)(v30 + 44);
            v33.i64[1] = *(unsigned int *)(v30 + 48);
            v34 = vmaxq_f32(v32, v33);
          }
          v31.i32[3] = v34.i32[0];
          *_X15 = v31;
          _X15[1].i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL).u64[0];
        }
        while (v18);
      }
      goto LABEL_42;
    case 5:
      v12 = 6;
      goto LABEL_41;
    default:
      goto LABEL_42;
  }
  while (v7 >= 2)
  {
    v7 >>= 1;
    if (++v5 == 32)
    {
      v5 = -1;
      break;
    }
  }
  v8 = v5 * v6;
  v9 = *((_QWORD *)this + 1);
  if (v9)
    LODWORD(v9) = *(_DWORD *)(v9 + 68);
  if (v8 <= 2 * (int)v9 && v8 >= v9 >> 1)
  {
    v11 = *((_DWORD *)this + 103);
  }
  else
  {
    v11 = 0;
    *((_DWORD *)this + 103) = 0;
    LODWORD(v9) = v8;
  }
  *((_DWORD *)this + 102) = (v9 + v11 * v6) & ~((int)(v9 + v11 * v6) >> 31);
  if (a2)
LABEL_43:
    *((_BYTE *)this + 497) = 1;
  return *((_DWORD *)this + 100) == 6;
}

uint64_t physx::Sq::AABBTree::progressiveBuild(physx::Sq::AABBTree *this, uint64_t a2, uint64_t *a3, int a4, unsigned int a5)
{
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t result;
  unsigned int i;
  uint64_t v15;
  int v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int32 v23;
  uint64_t v24;
  int v25;
  uint64_t v27;

  if (a4 == 1)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 9) + 8))
    {
      if (a5)
      {
        for (i = 0; i < a5; i += v23)
        {
          v15 = *((_QWORD *)this + 9);
          v16 = *(_DWORD *)(v15 + 8);
          if (!v16)
            break;
          v17 = *(unsigned int *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = v17 + 1;
          v18 = *(float32x4_t **)(*(_QWORD *)v15 + 8 * v17);
          if ((_DWORD)v17 + 1 == v16)
          {
            *(_DWORD *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
          }
          physx::Gu::AABBTreeBuildNode::subdivide(v18, a2, a3, (uint64_t)this + 24, *(_QWORD *)this);
          v19 = v18[1].i64[1];
          if (v19)
          {
            v27 = v19 + 40;
            v20 = *(unsigned int *)(v15 + 8);
            v21 = *(_DWORD *)(v15 + 12) & 0x7FFFFFFF;
            if (v21 <= v20)
            {
              physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(v15, &v27);
              v22 = *(unsigned int *)(v15 + 8);
              v21 = *(_DWORD *)(v15 + 12) & 0x7FFFFFFF;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v15 + 8 * v20) = v19 + 40;
              v22 = v20 + 1;
              *(_DWORD *)(v15 + 8) = v20 + 1;
            }
            v27 = v19;
            if (v21 <= v22)
            {
              physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(v15, &v27);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v15 + 8 * v22) = v19;
              *(_DWORD *)(v15 + 8) = v22 + 1;
            }
          }
          v23 = v18[2].i32[1];
          *((_DWORD *)a3 + 1) += v23;
        }
      }
      return 1;
    }
    else
    {
      physx::Sq::AABBTree::buildEnd((uint64_t)this, a2, a3);
      v24 = *((_QWORD *)this + 9);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 12);
        if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *(_QWORD *)v24 != 0)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v24);
      }
      result = 0;
      *((_QWORD *)this + 9) = 0;
    }
  }
  else if (!a4
         && (v8 = *(_DWORD *)(a2 + 4)) != 0
         && (physx::Sq::AABBTree::release(this, 1),
             *((_DWORD *)this + 2) = v8,
             physx::Gu::initAABBTreeBuild(a2, (physx::Sq::AABBTree *)((char *)this + 24), a3, (uint64_t *)this)))
  {
    v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::FIFOStack>::getName() [T = physx::Sq::FIFOStack]";
    else
      v10 = "<allocation names disabled>";
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 24, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 281);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    *((_QWORD *)this + 9) = v11;
    v27 = *((_QWORD *)this + 3);
    physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(v11, &v27);
    return 0;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::prepareBuild(physx::Sq::AABBPruner *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  int v9;

  if (!*((_BYTE *)this + 498))
    return 0;
  if (*((_DWORD *)this + 100))
    return 1;
  v3 = *((_DWORD *)this + 104);
  if (!v3)
    return 0;
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 6));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
  else
    v6 = "<allocation names disabled>";
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 104, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBPruner.cpp", 691);
  v8 = 0;
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 76) = 0u;
  *((_QWORD *)this + 6) = v7;
  *((_DWORD *)this + 16) = v3;
  if (v3 != -1)
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (v3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBPruner.cpp", 695);
  *((_QWORD *)this + 7) = v8;
  memcpy(v8, *((const void **)this + 53), (24 * v3));
  ++*((_DWORD *)this + 18);
  *((int8x8_t *)this + 11) = vbic_s8((int8x8_t)0x100000001, *(int8x8_t *)((char *)this + 88));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)this + 4))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 16);
  *((_QWORD *)this + 3) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 4) = 4;
  *((_DWORD *)this + 5) = v9;
  *((_QWORD *)this + 5) = 0;
  result = 1;
  *((_DWORD *)this + 100) = 1;
  return result;
}

BOOL physx::Sq::AABBTree::build(_DWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    physx::Sq::AABBTree::release((physx::Sq::AABBTree *)a1, 1);
    v6 = 0;
    a1[2] = v2;
    physx::Gu::buildAABBTree(a2, (physx::Gu::NodeAllocator *)(a1 + 6), &v6, (uint64_t *)a1);
    physx::Sq::AABBTree::buildEnd((uint64_t)a1, a2, &v6);
  }
  return v2 != 0;
}

uint64_t *physx::Sq::AABBTree::refitMarkedNodes(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  unsigned int *v28;
  _OWORD *v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;

  v2 = result[10];
  if (v2)
  {
    v3 = *((unsigned int *)result + 24);
    v4 = v3 + 1;
    if ((_DWORD)v3 != -1)
    {
      v5 = *result;
      v6 = result[2];
      v7 = vdupq_n_s32(0x5A60B17Fu);
      v8 = vdupq_n_s32(0xDA60B17F);
      do
      {
        v9 = v3;
        v10 = *(_DWORD *)(v2 + 4 * v3);
        if (v10)
        {
          v11 = 32 * v4;
          v12 = 0x80000000;
          v13 = 31;
          do
          {
            v14 = v13;
            _X2 = (float32x4_t *)(v6 + 28 * --v11);
            __asm { PRFM            #0, [X2] }
            if ((v12 & v10) != 0)
            {
              v21 = *(unsigned int *)(v6 + 28 * v11 + 24);
              if ((v21 & 1) != 0)
              {
                v27 = (v21 >> 1) & 0xF;
                v26 = (float32x4_t)v8;
                v23 = (float32x4_t)v7;
                if (v27)
                {
                  v28 = (unsigned int *)(v5 + ((v21 >> 3) & 0x1FFFFFFC));
                  v29 = (_OWORD *)(a2 + 24 * *v28);
                  v23 = *(float32x4_t *)v29;
                  v26 = *(float32x4_t *)((char *)v29 + 12);
                  if (v27 != 1)
                  {
                    v30 = v28 + 1;
                    v31 = 4 * v27 - 4;
                    do
                    {
                      v32 = *v30++;
                      v33 = a2 + 24 * v32;
                      v23 = vminq_f32(v23, *(float32x4_t *)v33);
                      v26 = vmaxq_f32(v26, *(float32x4_t *)(v33 + 12));
                      v31 -= 4;
                    }
                    while (v31);
                  }
                }
              }
              else
              {
                v22 = v6 + 28 * (*(_DWORD *)(v6 + 28 * v11 + 24) >> 1);
                v23 = vminq_f32(*(float32x4_t *)v22, *(float32x4_t *)(v22 + 28));
                v24.i32[0] = HIDWORD(*(_OWORD *)v22);
                v24.i32[1] = *(_DWORD *)(v22 + 16);
                v24.i64[1] = *(unsigned int *)(v22 + 20);
                v25.i32[0] = HIDWORD(*(_OWORD *)(v22 + 28));
                v25.i32[1] = *(_DWORD *)(v22 + 44);
                v25.i64[1] = *(unsigned int *)(v22 + 48);
                v26 = vmaxq_f32(v24, v25);
              }
              v23.i32[3] = v26.i32[0];
              *_X2 = v23;
              _X2[1].i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
            }
            v12 >>= 1;
            v13 = v14 - 1;
          }
          while (v14);
          *(_DWORD *)(v2 + 4 * v9) = 0;
        }
        v3 = v9 - 1;
        v4 = v9;
      }
      while (v9);
    }
    *((_DWORD *)result + 24) = 0;
  }
  return result;
}

int32x2_t *physx::Sq::AABBPruner::merge(int32x2_t *this, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  unint64_t i;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  v2 = (uint64_t)this[1];
  if (v2)
  {
    v3 = *((unsigned int *)a2 + 4);
    v4 = this[52].i32[0] - v3;
    v5 = *(_DWORD *)a2;
    v6 = a2[1];
    v7 = a2[3];
    v31 = *(_DWORD *)a2;
    v32 = v6;
    v33 = v3;
    v34 = v7;
    v35 = v4;
    if (this[62].i8[0])
    {
      return (int32x2_t *)physx::Sq::ExtendedBucketPruner::addTree(this + 10, (uint64_t)&v31, this[9].u32[0]);
    }
    else
    {
      v8 = *(_DWORD *)(v2 + 8);
      if (v8 + (_DWORD)v3)
      {
        v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v8 + v3), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 840);
        v8 = *(_DWORD *)(v2 + 8);
      }
      else
      {
        v9 = 0;
      }
      memcpy(v9, *(const void **)v2, (4 * v8));
      if (*(_QWORD *)v2)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(_QWORD *)v2 = v9;
      *(_DWORD *)(v2 + 68) += v3;
      if ((_DWORD)v3)
      {
        for (i = 0; i < v3; ++i)
          *((_DWORD *)v9 + (i + *(_DWORD *)(v2 + 8))) = *(_DWORD *)(v7 + 4 * i) + v4;
      }
      v11 = *(_DWORD *)(v2 + 64) + v5 + 1;
      if ((v11 & 0x1F) != 0)
        v12 = (v11 >> 5) + 1;
      else
        v12 = v11 >> 5;
      if (v12 > *(_DWORD *)(v2 + 88))
      {
        v13 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 337);
        bzero(&v13[4 * *(unsigned int *)(v2 + 88)], 4 * (v12 - *(_DWORD *)(v2 + 88)));
        memcpy(v13, *(const void **)(v2 + 80), (4 * *(_DWORD *)(v2 + 88)));
        if (*(_QWORD *)(v2 + 80))
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *(_QWORD *)(v2 + 80) = v13;
        *(_DWORD *)(v2 + 88) = v12;
      }
      if (!*(_QWORD *)(v2 + 56))
      {
        v14 = *(unsigned int *)(v2 + 64);
        if ((_DWORD)v14)
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v14, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 859);
        else
          v15 = 0;
        *(_QWORD *)(v2 + 56) = v15;
        _createParentArray(v15, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 16));
      }
      v16 = *(_QWORD *)(v2 + 16);
      v17 = *(float *)v6;
      if (*(float *)v16 <= *(float *)v6)
      {
        v18 = *(float *)(v6 + 4);
        if (*(float *)(v16 + 4) <= v18)
        {
          v19 = *(float *)(v6 + 8);
          if (*(float *)(v16 + 8) <= v19)
          {
            v20 = *(float *)(v6 + 12);
            if (*(float *)(v16 + 12) >= v20)
            {
              v21 = *(float *)(v6 + 16);
              if (*(float *)(v16 + 16) >= v21)
              {
                v22 = *(float *)(v6 + 20);
                if (*(float *)(v16 + 20) >= v22)
                {
                  v23 = *(_DWORD *)(v16 + 24);
                  if ((v23 & 1) == 0)
                  {
                    v24 = 0;
                    v25 = *(_QWORD *)(v2 + 16);
                    while (1)
                    {
                      v26 = v23 >> 1;
                      v27 = v16 + 28 * (v23 >> 1);
                      if (*(float *)v27 > v17
                        || *(float *)(v27 + 4) > v18
                        || *(float *)(v27 + 8) > v19
                        || *(float *)(v27 + 12) < v20
                        || *(float *)(v27 + 16) < v21
                        || *(float *)(v27 + 20) < v22)
                      {
                        if (*(float *)(v27 + 28) > v17
                          || *(float *)(v27 + 32) > v18
                          || *(float *)(v27 + 36) > v19
                          || *(float *)(v27 + 40) < v20
                          || *(float *)(v27 + 44) < v21
                          || *(float *)(v27 + 48) < v22)
                        {
                          if ((v23 & 1) != 0)
                            this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeLeaf(v2, v25, &v31, v24);
                          else
                            this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeNode(v2, v25, &v31, v24);
                          goto LABEL_54;
                        }
                        ++v26;
                        v27 += 28;
                      }
                      v23 = *(_DWORD *)(v27 + 24);
                      v25 = v27;
                      v24 = v26;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeLeaf(v2, v16, &v31, 0);
      else
        this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeNode(v2, v16, &v31, 0);
      v28 = *(_QWORD *)(v2 + 16);
      v29 = *(float *)(v28 + 8);
      if (v29 >= *(float *)(v6 + 8))
        v29 = *(float *)(v6 + 8);
      *(int8x8_t *)v28 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v6, *(float32x2_t *)v28), *(int8x8_t *)v28, *(int8x8_t *)v6);
      *(float *)(v28 + 8) = v29;
      v30 = *(float *)(v28 + 20);
      if (v30 <= *(float *)(v6 + 20))
        v30 = *(float *)(v6 + 20);
      *(int8x8_t *)(v28 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v28 + 12), *(float32x2_t *)(v6 + 12)), *(int8x8_t *)(v28 + 12), *(int8x8_t *)(v6 + 12));
      *(float *)(v28 + 20) = v30;
LABEL_54:
      *(_DWORD *)(v2 + 8) += v3;
    }
  }
  return this;
}

uint64_t **flatten(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  int v20;

  v2 = *((unsigned int *)result + 4);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = result[1];
    do
    {
      result = (uint64_t **)&v5[2 * v3];
      v6 = *((unsigned int *)result + 2);
      if ((_DWORD)v6)
      {
        v7 = 0;
        result = (uint64_t **)*result;
        do
        {
          v8 = (uint64_t *)&result[5 * v7];
          v9 = (uint64_t *)(a2 + 28 * v4);
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v10 = v8[3];
          if (v10)
          {
            v11 = 0;
            v12 = (unsigned int *)(v5 + 1);
            v13 = v2;
            do
            {
              v14 = *((_QWORD *)v12 - 1);
              v15 = *v12;
              v16 = v14 + 40 * *v12;
              v18 = v10 >= v14;
              v17 = v10 - v14;
              v18 = !v18 || v10 >= v16;
              if (!v18)
              {
                v20 = -858993459 * (v17 >> 3);
                goto LABEL_15;
              }
              v12 += 4;
              v11 += v15;
              --v13;
            }
            while (v13);
            v20 = -1;
LABEL_15:
            v19 = 2 * (v20 + v11);
          }
          else
          {
            v19 = (32 * LODWORD(result[5 * v7 + 4])) | (2 * (HIDWORD(result[5 * v7 + 4]) & 0xF)) | 1;
          }
          *(_DWORD *)(a2 + 28 * v4++ + 24) = v19;
          ++v7;
        }
        while (v7 != v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void physx::Sq::AABBTree::~AABBTree(physx::Sq::AABBTree *this)
{
  physx::Sq::AABBTree::release(this, 0);
  if (*((_QWORD *)this + 10))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 10) = 0;
  physx::Gu::NodeAllocator::~NodeAllocator((physx::Sq::AABBTree *)((char *)this + 24));
}

void physx::Sq::AABBTree::release(physx::Sq::AABBTree *this, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v7;

  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 12);
    if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *(_QWORD *)v4 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)this + 7))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 7) = 0;
  v7 = *((_QWORD *)this + 2);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7 - 16);
  *((_QWORD *)this + 2) = 0;
  physx::Gu::NodeAllocator::release((physx::Sq::AABBTree *)((char *)this + 24));
  if (*(_QWORD *)this)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 2) = 0;
  if (a2)
    bzero(*((void **)this + 10), (4 * *((_DWORD *)this + 22)));
  *((_DWORD *)this + 24) = 0;
}

void *physx::Sq::AABBTree::initTree(uint64_t a1, const void **a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  int v10;

  v4 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v4)
  {
    v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 168);
    LODWORD(v4) = *((_DWORD *)a2 + 4);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v4;
  memcpy(v5, a2[3], (4 * v4));
  v6 = *(unsigned int *)a2;
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::getName() [T = physx::Sq"
         "::AABBTreeRuntimeNode]";
  else
    v8 = "<allocation names disabled>";
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24)
                                                                                                  + 16))(v7 + 24, 28 * v6 + 16, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 173);
  *v9 = 28;
  v9[1] = v6;
  v9 += 2;
  *(_QWORD *)(a1 + 16) = v9;
  v10 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)a2;
  return memcpy(v9, a2[1], (28 * v10));
}

uint64_t physx::Sq::AABBTree::buildEnd(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  uint64_t **v12;

  if (*(_QWORD *)(a2 + 16))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *a3;
  *(_QWORD *)(a1 + 64) = *a3;
  v7 = v6;
  v8 = 28 * v6 + 16;
  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::getName() [T = physx::S"
          "q::AABBTreeRuntimeNode]";
  else
    v10 = "<allocation names disabled>";
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, v8, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 209);
  *v11 = 28;
  v11[1] = v7;
  *(_QWORD *)(a1 + 16) = v11 + 2;
  v12 = (uint64_t **)(a1 + 24);
  flatten(v12, (uint64_t)(v11 + 2));
  return physx::Gu::NodeAllocator::release((physx::Gu::NodeAllocator *)v12);
}

uint64_t physx::Sq::BitArray::init(physx::Sq::BitArray *this, unsigned int a2)
{
  unsigned int v3;
  void *v4;
  size_t v5;

  v3 = a2 >> 5;
  if ((a2 & 0x1F) != 0)
    ++v3;
  *((_DWORD *)this + 2) = v3;
  if (*(_QWORD *)this)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v3 = *((_DWORD *)this + 2);
  }
  if (v3)
  {
    v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 325);
    v5 = (4 * *((_DWORD *)this + 2));
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  *(_QWORD *)this = v4;
  bzero(v4, v5);
  return 1;
}

uint64_t _createParentArray(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  *(_DWORD *)(result + 0xFFFFFFFEDB6DB6DCLL * ((unint64_t)(a3 - a4) >> 2)) = -1227133513
                                                                                                * ((unint64_t)(a2 - a4) >> 2);
  v5 = (unsigned int *)(a3 + 24);
  v4 = *(_DWORD *)(a3 + 24);
  if ((v4 & 1) == 0)
  {
    v7 = a3;
    v8 = result;
    v9 = a4 + 28;
    do
    {
      result = _createParentArray(v8, v7, a4 + 28 * (v4 >> 1), a4);
      v10 = (unint64_t)*v5 >> 1;
      v11 = v7 - a4;
      v7 = v9 + 28 * v10;
      if (a4)
        v12 = v9 + 28 * v10;
      else
        v12 = 0;
      *(_DWORD *)(v8 + 0xFFFFFFFEDB6DB6DCLL * ((unint64_t)(v12 - a4) >> 2)) = -1227133513
                                                                                                 * (v11 >> 2);
      v13 = *(_DWORD *)(v12 + 24);
      v5 = (unsigned int *)(v12 + 24);
      v4 = v13;
    }
    while ((v13 & 1) == 0);
  }
  return result;
}

uint64_t physx::Sq::AABBTree::addRuntimeChilds(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (*a3)
  {
    v3 = 0;
    v4 = *a2;
    v5 = *(_QWORD *)(result + 16);
    v6 = *((_QWORD *)a3 + 1) + 16;
    v7 = *a2;
    do
    {
      v8 = v7;
      v9 = (_QWORD *)(v5 + 28 * v7);
      *v9 = *(_QWORD *)(v6 - 16);
      v9[1] = *(_QWORD *)(v6 - 8);
      v9[2] = *(_QWORD *)v6;
      v10 = *(_DWORD *)(v6 + 8);
      if ((v10 & 1) != 0)
      {
        *(_DWORD *)(v5 + 28 * v8 + 24) = *(_DWORD *)(v6 + 8) & 0x1E | (*(_DWORD *)(v6 + 8)
                                                                       + 32 * *(_DWORD *)(result + 8)) & 0xFFFFFFE0 | 1;
      }
      else
      {
        v11 = v4 + (v10 >> 1);
        *(_DWORD *)(v5 + 28 * v8 + 24) = 2 * v11;
        v12 = *(_QWORD *)(result + 56);
        *(_DWORD *)(v12 + 4 * v11) = *a2;
        *(_DWORD *)(v12 + 4 * (v11 + 1)) = *a2;
      }
      v6 += 28;
      v7 = *a2 + 1;
      *a2 = v7;
      ++v3;
    }
    while (v3 < *a3);
  }
  return result;
}

uint64_t physx::Sq::AABBTree::mergeRuntimeLeaf(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  char *v12;
  int v13;
  void *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  unsigned int v22;

  v8 = *(_DWORD *)(a1 + 64) + *a3 + 1;
  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::getName() [T = physx::S"
          "q::AABBTreeRuntimeNode]";
  else
    v10 = "<allocation names disabled>";
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 28 * v8 + 16, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 659);
  *v11 = 28;
  v11[1] = v8;
  v12 = (char *)(v11 + 2);
  v13 = *(_DWORD *)(a1 + 64);
  if (v13 + *a3 == -1)
  {
    v14 = 0;
  }
  else
  {
    v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v13 + *a3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 660);
    v13 = *(_DWORD *)(a1 + 64);
  }
  memcpy(v12, *(const void **)(a1 + 16), (28 * v13));
  memcpy(v14, *(const void **)(a1 + 56), (4 * *(_DWORD *)(a1 + 64)));
  v15 = *(unsigned int *)(a1 + 64);
  v16 = &v12[28 * v15];
  *(_QWORD *)v16 = *(_QWORD *)a2;
  *((_QWORD *)v16 + 1) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v16 + 2) = *(_QWORD *)(a2 + 16);
  *((_DWORD *)v16 + 6) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)v14 + v15) = a4;
  v17 = *(_QWORD *)(a1 + 80);
  if (v17 && ((*(_DWORD *)(v17 + 4 * (a4 >> 5)) >> a4) & 1) != 0)
  {
    *(_DWORD *)(v17 + 4 * (v15 >> 5)) |= 1 << v15;
    v18 = *(_DWORD *)(a1 + 96);
    if (v18 <= (v15 >> 5))
      v18 = v15 >> 5;
    *(_DWORD *)(a1 + 96) = v18;
  }
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v19 - 16);
  *(_QWORD *)(a1 + 16) = v12;
  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 56) = v14;
  v22 = v15 + 1;
  result = physx::Sq::AABBTree::addRuntimeChilds(a1, &v22, a3);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (*(_DWORD *)(a1 + 64) + 1)) = a4;
  v21 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 28 * a4 + 24) = 2 * v21;
  *(_DWORD *)(a1 + 64) = v21 + *a3 + 1;
  return result;
}

uint64_t physx::Sq::AABBTree::mergeRuntimeNode(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;

  v27 = *(unsigned int *)(a2 + 24);
  v8 = v27 >> 1;
  v9 = *(_DWORD *)(a1 + 64) + *a3 + 1;
  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::getName() [T = physx::S"
          "q::AABBTreeRuntimeNode]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 28 * v9 + 16, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 725);
  *v12 = 28;
  v12[1] = v9;
  v13 = (char *)(v12 + 2);
  if (*(_DWORD *)(a1 + 64) + *a3 == -1)
    v14 = 0;
  else
    v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (*(_DWORD *)(a1 + 64) + *a3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 726);
  memcpy(v13, *(const void **)(a1 + 16), (28 * v8));
  memcpy(v14, *(const void **)(a1 + 56), (4 * v8));
  v28 = v27 >> 1;
  v15 = &v13[28 * v8];
  *(_QWORD *)v15 = *(_QWORD *)a2;
  *((_QWORD *)v15 + 1) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v15 + 2) = *(_QWORD *)(a2 + 16);
  *((_DWORD *)v15 + 6) = 2 * (*a3 + (*(_DWORD *)(a2 + 24) >> 1)) + 2;
  v16 = &v14[4 * v8];
  *(_DWORD *)v16 = a4;
  v17 = *(_QWORD *)(a1 + 80);
  if (v17 && ((*(_DWORD *)(v17 + 4 * (a4 >> 5)) >> a4) & 1) != 0)
  {
    *(_DWORD *)(v17 + 4 * (v27 >> 6)) |= 1 << (v27 >> 1);
    v18 = *(_DWORD *)(a1 + 96);
    if (v18 <= (v27 >> 6))
      v18 = v27 >> 6;
    *(_DWORD *)(a1 + 96) = v18;
  }
  v19 = *(_DWORD *)(a1 + 64) - v8;
  if (v19)
  {
    memcpy(&v15[28 * *a3 + 28], (const void *)(*(_QWORD *)(a1 + 16) + 28 * v8), (28 * v19));
    memcpy(&v16[4 * *a3 + 4], (const void *)(*(_QWORD *)(a1 + 56) + 4 * v8), (4 * (*(_DWORD *)(a1 + 64) - v8)));
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v20 - 16);
  *(_QWORD *)(a1 + 16) = v13;
  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 56) = v14;
  v28 = v8 + 1;
  result = physx::Sq::AABBTree::addRuntimeChilds(a1, &v28, a3);
  *(_DWORD *)(a1 + 64) += *a3 + 1;
  v22 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v22 + 4 * (v8 + 1)) = a4;
  v23 = *a3 + (_DWORD)v8 + 1;
  if (v23 < *(_DWORD *)(a1 + 64))
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = (unsigned int *)(v24 + 28 * v23 + 24);
    do
    {
      v26 = *(_DWORD *)(v22 + 4 * v23);
      if (v26 == a4)
      {
        *(_DWORD *)(v22 + 4 * v23) = v8;
      }
      else if (v26 >= v8)
      {
        *(_DWORD *)(v22 + 4 * v23) = v26 + *a3 + 1;
      }
      else if ((v23 & 1) != 0)
      {
        *(_DWORD *)(v24 + 28 * v26 + 24) = (*(_DWORD *)(v24 + 28 * v26 + 24) + 2 * *a3 + 2) & 0xFFFFFFFE;
      }
      if ((*v25 & 1) == 0)
        *v25 = (*v25 + 2 * *a3 + 2) & 0xFFFFFFFE;
      ++v23;
      v25 += 7;
    }
    while (v23 < *(unsigned int *)(a1 + 64));
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate(result, a2);
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

float32x4_t *physx::Sq::IncrementalAABBTree::insert(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t *v14;
  __int8 *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  _BOOL4 v24;
  int v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  unsigned __int32 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  float32x4_t *v34;
  _DWORD *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *k;
  int8x8_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *i;
  __int8 *v44;
  float32x4_t *v45;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  _DWORD *v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t *j;
  int8x8_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  float32x4_t *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  float32x4_t **v89;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;

  v6 = (_OWORD *)(a3 + 24 * a2);
  v7 = *(float32x4_t *)v6;
  v7.i32[3] = 0;
  v8 = *(float32x4_t *)((char *)v6 + 12);
  v8.i32[3] = 0;
  v97 = v8;
  v98 = v7;
  v9 = *(float32x4_t **)(a1 + 1144);
  if (v9)
  {
    v12 = (float32x4_t *)v9[3].i64[0];
    if (v12)
    {
      v13 = vaddq_f32(v7, v8);
      v15 = &v9[2].i8[8];
      v14 = (float32x4_t *)v9[2].i64[1];
      v16 = v14[1];
      v17 = v12[1];
      v18 = vsubq_f32(v13, vaddq_f32(v16, *v14));
      v19 = vsubq_f32(v13, vaddq_f32(v17, *v12));
      v20 = vsubq_f32(v16, *v14);
      v21 = vsubq_f32(v17, *v12);
      v22 = vmulq_laneq_f32(vmulq_lane_f32(v20, *(float32x2_t *)v20.f32, 1), v20, 2);
      v23 = vmulq_laneq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v21.f32, 1), v21, 2);
      v24 = (float)(3.0 * v22.f32[0]) < v23.f32[0];
      v25 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v22, v23))).u16[0];
      if ((float)(3.0 * v23.f32[0]) < v22.f32[0])
        v24 = 1;
      v26 = v24 & v25;
      v18.i32[3] = 0;
      v27 = vmulq_f32(v18, v18);
      v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
      v19.i32[3] = 0;
      v28 = vmulq_f32(v19, v19);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      v29 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32)), 0), *(int8x8_t *)v13.f32).u32[0];
      if (v24)
      {
        v30 = *(_QWORD *)(*(_QWORD *)&v15[8 * v26] + 48) == 0;
        if (*(_QWORD *)(*(_QWORD *)&v15[8 * v26] + 48))
          v31 = *(_QWORD *)(a1 + 1144);
        else
          v31 = 0;
      }
      else
      {
        v31 = 0;
        v30 = 1;
      }
      v34 = *(float32x4_t **)&v15[8 * (v29 == -1)];
      v96 = v34;
      for (i = (float32x4_t *)v34[3].i64[0]; i; i = (float32x4_t *)v34[3].i64[0])
      {
        v44 = &v34[2].i8[8];
        v45 = (float32x4_t *)v34[2].i64[1];
        _X14 = v45[2].i64[1];
        __asm { PRFM            #0, [X14] }
        _X14 = i[2].i64[1];
        __asm { PRFM            #0, [X14] }
        v54 = *v45;
        v53 = v45[1];
        v56 = *i;
        v55 = i[1];
        if ((v30 & 1) != 0)
        {
          v57 = vsubq_f32(v53, v54);
          v58 = vsubq_f32(v55, v56);
          v59 = vmulq_laneq_f32(vmulq_lane_f32(v57, *(float32x2_t *)v57.f32, 1), v57, 2);
          v60 = vmulq_laneq_f32(vmulq_lane_f32(v58, *(float32x2_t *)v58.f32, 1), v58, 2);
          _NF = (float)(3.0 * v59.f32[0]) < v60.f32[0] || (float)(3.0 * v60.f32[0]) < v59.f32[0];
          v62 = *(_QWORD *)&vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v59, v60))) & 1;
          if (_NF)
            v26 = v62;
          if (_NF)
            LOBYTE(v24) = 1;
        }
        if (!v31)
        {
          if (v24)
          {
            if (*(_QWORD *)(*(_QWORD *)&v44[8 * v26] + 48))
              v31 = (uint64_t)v34;
            else
              v31 = 0;
            v30 &= *(_QWORD *)(*(_QWORD *)&v44[8 * v26] + 48) == 0;
          }
          else
          {
            v31 = 0;
          }
        }
        v63 = vsubq_f32(v13, vaddq_f32(v53, v54));
        v64 = vsubq_f32(v13, vaddq_f32(v55, v56));
        v63.i32[3] = 0;
        v65 = vmulq_f32(v63, v63);
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        v64.i32[3] = 0;
        v66 = vmulq_f32(v64, v64);
        v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
        v34 = *(float32x4_t **)&v44[8
                                  * (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32)), 0), *(int8x8_t *)v13.f32).u32[0] == -1)];
        v96 = v34;
      }
      v67 = (_DWORD *)v34[2].i64[1];
      v68 = *v67;
      if (v68 > 3)
      {
        v77 = *(_DWORD *)(a4 + 8);
        if (v77 && **(float32x4_t ***)a4 == v34)
          *(_DWORD *)(a4 + 8) = v77 - 1;
        physx::Sq::IncrementalAABBTree::splitLeafNode(a1, v34, a2, &v98, &v97, a3);
        v34 = v78;
        v79 = v78[2].i64[0];
        v80 = (_QWORD *)(v79 + 40);
        v81 = *(unsigned int *)(a4 + 8);
        v82 = *(_DWORD *)(a4 + 12) & 0x7FFFFFFF;
        if (v82 <= v81)
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, v80);
          v83 = *(_DWORD *)(a4 + 8);
          v82 = *(_DWORD *)(a4 + 12) & 0x7FFFFFFF;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v81) = *v80;
          v83 = v81 + 1;
          *(_DWORD *)(a4 + 8) = v83;
        }
        v89 = (float32x4_t **)(v79 + 48);
        if (v82 > v83)
        {
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v83) = *v89;
          v76 = v83 + 1;
          goto LABEL_67;
        }
      }
      else
      {
        *v67 = v68 + 1;
        v67[v68 + 1] = a2;
        v69 = vminq_f32(*v34, v7);
        v70 = vmaxq_f32(v34[1], v8);
        *v34 = v69;
        v34[1] = v70;
        for (j = (float32x4_t *)v34[2].i64[0]; j; j = (float32x4_t *)j[2].i64[0])
        {
          if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*j, v69)), *(int8x8_t *)v70.f32).u32[0] & 0xFFFFFF) == 0)
          {
            v72 = (int8x8_t)vmovn_s32(vcgtq_f32(v70, j[1]));
            if ((vuzp1_s8(v72, v72).u32[0] & 0xFFFFFF) == 0)
              break;
          }
          v73 = (float32x4_t *)j[2].i64[1];
          v74 = (float32x4_t *)j[3].i64[0];
          v69 = vminq_f32(*v73, *v74);
          *j = v69;
          v70 = vmaxq_f32(v73[1], v74[1]);
          j[1] = v70;
        }
        v75 = *(unsigned int *)(a4 + 8);
        if ((_DWORD)v75)
        {
          if (**(float32x4_t ***)a4 == v34)
            goto LABEL_68;
          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) > v75)
          {
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v75) = v34;
            v76 = v75 + 1;
LABEL_67:
            *(_DWORD *)(a4 + 8) = v76;
LABEL_68:
            if (!v31)
              return v34;
            goto LABEL_72;
          }
        }
        else if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFF) != 0)
        {
          **(_QWORD **)a4 = v34;
          v76 = 1;
          goto LABEL_67;
        }
        v89 = &v96;
      }
      physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, v89);
      if (v31)
      {
LABEL_72:
        physx::Sq::IncrementalAABBTree::rotateTree(a1, v31, a4, v26, a3, 1);
        return 0;
      }
    }
    else
    {
      v35 = (_DWORD *)v9[2].i64[1];
      v36 = *v35;
      if (v36 > 3)
      {
        v84 = *(_DWORD *)(a4 + 8);
        if (v84 && **(float32x4_t ***)a4 == v9)
          *(_DWORD *)(a4 + 8) = v84 - 1;
        physx::Sq::IncrementalAABBTree::splitLeafNode(a1, v9, a2, &v98, &v97, a3);
        v34 = v85;
        v96 = v85;
        v86 = v85[2].i64[0];
        *(_QWORD *)(a1 + 1144) = v86;
        v87 = *(float32x4_t **)(v86 + 40);
        if (v87 == v85)
          v87 = *(float32x4_t **)(v86 + 48);
        v95 = v87;
        v88 = *(unsigned int *)(a4 + 8);
        if (!v87[3].i64[0])
        {
          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v88)
          {
            physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, &v95);
            LODWORD(v88) = *(_DWORD *)(a4 + 8);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v88) = v87;
            LODWORD(v88) = v88 + 1;
            *(_DWORD *)(a4 + 8) = v88;
          }
        }
        if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v88)
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, &v96);
          return v96;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v88) = v34;
          *(_DWORD *)(a4 + 8) = v88 + 1;
        }
      }
      else
      {
        *v35 = v36 + 1;
        v35[v36 + 1] = a2;
        v37 = vminq_f32(*v9, v7);
        v38 = vmaxq_f32(v9[1], v8);
        *v9 = v37;
        v9[1] = v38;
        for (k = (float32x4_t *)v9[2].i64[0]; k; k = (float32x4_t *)k[2].i64[0])
        {
          if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*k, v37)), *(int8x8_t *)v38.f32).u32[0] & 0xFFFFFF) == 0)
          {
            v40 = (int8x8_t)vmovn_s32(vcgtq_f32(v38, k[1]));
            if ((vuzp1_s8(v40, v40).u32[0] & 0xFFFFFF) == 0)
              break;
          }
          v41 = (float32x4_t *)k[2].i64[1];
          v42 = (float32x4_t *)k[3].i64[0];
          v37 = vminq_f32(*v41, *v42);
          *k = v37;
          v38 = vmaxq_f32(v41[1], v42[1]);
          k[1] = v38;
        }
        return *(float32x4_t **)(a1 + 1144);
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 568);
    if (!v32)
    {
      v91 = v8;
      v93 = v7;
      physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(a1 + 8);
      v8 = v91;
      v7 = v93;
      v32 = *(_QWORD *)(a1 + 568);
    }
    *(_QWORD *)(a1 + 568) = *(_QWORD *)v32;
    ++*(_DWORD *)(a1 + 556);
    *(_DWORD *)v32 = 1;
    *(_DWORD *)(v32 + 4) = a2;
    *(_QWORD *)(v32 + 8) = 0;
    *(_DWORD *)(v32 + 16) = 0;
    v33 = *(_QWORD **)(a1 + 1136);
    if (!v33)
    {
      v92 = v8;
      v94 = v7;
      physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(a1 + 576);
      v8 = v92;
      v7 = v94;
      v33 = *(_QWORD **)(a1 + 1136);
    }
    *(_QWORD *)(a1 + 1136) = *v33;
    ++*(_DWORD *)(a1 + 1124);
    *(_QWORD *)(a1 + 1144) = v33;
    *(float32x4_t *)v33 = v7;
    *(float32x4_t *)(*(_QWORD *)(a1 + 1144) + 16) = v8;
    *(_QWORD *)(*(_QWORD *)(a1 + 1144) + 40) = v32;
    *(_QWORD *)(*(_QWORD *)(a1 + 1144) + 48) = 0;
    v34 = *(float32x4_t **)(a1 + 1144);
    v34[2].i64[0] = 0;
  }
  return v34;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

float32x4_t *physx::Sq::IncrementalAABBTree::update(uint64_t a1, float32x4_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v9 = physx::Sq::IncrementalAABBTree::remove(a1, a2, a3, a4);
  v12 = v9;
  if (v9 && !*(_QWORD *)(v9 + 48))
  {
    v10 = *(unsigned int *)(a5 + 8);
    if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v10)
    {
      physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a5, &v12);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v10) = v9;
      *(_DWORD *)(a5 + 8) = v10 + 1;
    }
  }
  return physx::Sq::IncrementalAABBTree::insert(a1, a3, a4, a5);
}

uint64_t physx::Sq::IncrementalAABBTree::remove(uint64_t a1, float32x4_t *a2, int a3, uint64_t a4)
{
  float32x4_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int32 v7;
  __int32 v8;
  float32x4_t *v9;
  uint64_t result;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  __int32 *v22;
  unsigned int v23;
  uint64_t v24;
  float32x4_t *i;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t v33;
  uint64_t v34;
  _OWORD *v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  __int32 *v39;
  unsigned int v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t v44;
  _QWORD *v45;

  v4 = (float32x4_t *)a2[2].i64[1];
  v5 = v4->u32[0];
  if (v5 < 2)
  {
    if (*(float32x4_t **)(a1 + 1144) == a2)
    {
      result = 0;
      --*(_DWORD *)(a1 + 1124);
      a2->i64[0] = *(_QWORD *)(a1 + 1136);
      *(_QWORD *)(a1 + 1136) = a2;
      *(_QWORD *)(a1 + 1144) = 0;
    }
    else
    {
      result = a2[2].i64[0];
      v12 = *(float32x4_t **)(result + 40);
      v13 = v12;
      if (v12 == a2)
        v13 = *(float32x4_t **)(result + 48);
      *(float32x4_t *)(result + 16) = v13[1];
      *(float32x4_t *)result = *v13;
      v14 = v13[2].i64[1];
      v15 = v13[3].i64[0];
      *(_QWORD *)(result + 40) = v14;
      if (v15)
      {
        *(_QWORD *)(v14 + 32) = result;
        v16 = v13[3].i64[0];
        *(_QWORD *)(result + 48) = v16;
        *(_QWORD *)(v16 + 32) = result;
      }
      else
      {
        *(_QWORD *)(result + 48) = 0;
      }
      v30 = *(float32x4_t **)(result + 32);
      if (v30)
      {
        v32 = (float32x4_t *)v30[2].i64[1];
        v31 = (float32x4_t *)v30[3].i64[0];
        if (!v31)
        {
          v34 = v32->u32[0];
          v35 = (_OWORD *)(a4 + 24 * v32->u32[1]);
          v36 = *(float32x4_t *)v35;
          v37 = *(float32x4_t *)((char *)v35 + 12);
          if (v34 >= 2)
          {
            v38 = v34 - 1;
            v39 = &v32->i32[2];
            do
            {
              v40 = *v39++;
              v41 = a4 + 24 * v40;
              v36 = vminq_f32(v36, *(float32x4_t *)v41);
              v37 = vmaxq_f32(v37, *(float32x4_t *)(v41 + 12));
              --v38;
            }
            while (v38);
          }
          v36.i32[3] = 0;
          v37.i32[3] = 0;
          *v30 = v36;
          v30[1] = v37;
          goto LABEL_32;
        }
        *v30 = vminq_f32(*v32, *v31);
        v33 = vmaxq_f32(v32[1], v31[1]);
        while (1)
        {
          v30[1] = v33;
LABEL_32:
          v30 = (float32x4_t *)v30[2].i64[0];
          if (!v30)
            break;
          v42 = (float32x4_t *)v30[2].i64[1];
          v43 = (float32x4_t *)v30[3].i64[0];
          v44 = vminq_f32(*v42, *v43);
          v33 = vmaxq_f32(v42[1], v43[1]);
          if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*v30, v44)), *(int8x8_t *)v33.f32).u32[0] == -1
            && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v33, v30[1])), *(int8x8_t *)v33.f32).u32[0] == -1)
          {
            break;
          }
          *v30 = v44;
        }
      }
      v45 = (_QWORD *)a2[2].i64[1];
      if (v45)
      {
        --*(_DWORD *)(a1 + 556);
        *v45 = *(_QWORD *)(a1 + 568);
        *(_QWORD *)(a1 + 568) = v45;
      }
      if (v12)
      {
        --*(_DWORD *)(a1 + 1124);
        v12->i64[0] = *(_QWORD *)(a1 + 1136);
        *(_QWORD *)(a1 + 1136) = v12;
      }
    }
  }
  else
  {
    v6 = v5;
    while (v6 * 4)
    {
      v7 = v4->i32[v6--];
      if (v7 == a3)
      {
        v8 = v5 - 1;
        v4->i32[0] = v8;
        *(_DWORD *)(a2[2].i64[1] + v6 * 4 + 4) = v4->i32[v8 + 1];
        v4 = (float32x4_t *)a2[2].i64[1];
        break;
      }
    }
    v9 = (float32x4_t *)a2[3].i64[0];
    if (v9)
    {
      *a2 = vminq_f32(*v4, *v9);
      a2[1] = vmaxq_f32(v4[1], v9[1]);
    }
    else
    {
      v17 = v4->u32[0];
      v18 = (_OWORD *)(a4 + 24 * v4->u32[1]);
      v19 = *(float32x4_t *)v18;
      v20 = *(float32x4_t *)((char *)v18 + 12);
      if (v17 >= 2)
      {
        v21 = v17 - 1;
        v22 = &v4->i32[2];
        do
        {
          v23 = *v22++;
          v24 = a4 + 24 * v23;
          v19 = vminq_f32(v19, *(float32x4_t *)v24);
          v20 = vmaxq_f32(v20, *(float32x4_t *)(v24 + 12));
          --v21;
        }
        while (v21);
      }
      v19.i32[3] = 0;
      v20.i32[3] = 0;
      *a2 = v19;
      a2[1] = v20;
    }
    for (i = (float32x4_t *)a2[2].i64[0]; i; i = (float32x4_t *)i[2].i64[0])
    {
      v26 = (float32x4_t *)i[2].i64[1];
      v27 = (float32x4_t *)i[3].i64[0];
      v28 = vminq_f32(*v26, *v27);
      v29 = vmaxq_f32(v26[1], v27[1]);
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*i, v28)), *(int8x8_t *)v29.f32).u32[0] == -1
        && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v29, i[1])), *(int8x8_t *)v29.f32).u32[0] == -1)
      {
        break;
      }
      *i = v28;
      i[1] = v29;
    }
    return 0;
  }
  return result;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, unsigned int (***a5)(_QWORD, int *, uint64_t))
{
  int v9;
  int v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unsigned int v16;
  __int8 *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int v22;
  __int32 *v23;
  __int32 v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  int v35;
  _QWORD v36[256];
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v39 = 0x10000000100;
  v9 = 1;
  v37 = 1;
  v38 = v36;
  v36[0] = a3;
  while (1)
  {
    v10 = v9 - 1;
    v11 = (float32x4_t *)v38[v9 - 1];
    v12 = v11[1];
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = vmulq_f32(vsubq_f32(v12, *v11), v13);
    v14.i32[3] = 0;
    v15 = vmulq_f32(vaddq_f32(v12, *v11), v13);
    v15.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v15, v14))
    {
      v16 = 2 * v9;
      while (1)
      {
        v10 = v9 - 1;
        v17 = &v11[2].i8[8];
        v11 = (float32x4_t *)v11[2].i64[1];
        if (!*((_QWORD *)v17 + 1))
          break;
        v38[v10] = v11 + 4;
        if (v9 == (HIDWORD(v39) & 0x7FFFFFFF))
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v36, v16);
        v18 = v11[1];
        v19.i64[0] = 0x3F0000003F000000;
        v19.i64[1] = 0x3F0000003F000000;
        v20 = vmulq_f32(vsubq_f32(v18, *v11), v19);
        v20.i32[3] = 0;
        v21 = vmulq_f32(vaddq_f32(v18, *v11), v19);
        v21.i32[3] = 0;
        ++v9;
        v16 += 2;
        if (!physx::Gu::OBBAABBTests<true>::operator()(a4, v21, v20))
        {
          v10 = v9 - 1;
          goto LABEL_15;
        }
      }
      v22 = v11->i32[0];
      if (v11->i32[0])
        break;
    }
LABEL_15:
    v9 = v10;
    if (!v10)
    {
      v33 = 1;
      goto LABEL_18;
    }
  }
  v23 = &v11->i32[1];
  v24 = v11->i32[0];
  while (1)
  {
    v26 = *v23++;
    v25 = v26;
    if (v22 < 2)
      goto LABEL_26;
    v27 = a2 + 24 * v25;
    v28 = *(float32x4_t *)(v27 + 12);
    v29 = vaddq_f32(*(float32x4_t *)v27, v28);
    v30.i64[0] = 0x3F0000003F000000;
    v30.i64[1] = 0x3F0000003F000000;
    v31 = vmulq_f32(vsubq_f32(v28, *(float32x4_t *)v27), v30);
    v32 = vmulq_f32(v29, v30);
    v32.i32[3] = 0;
    v31.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v32, v31))
    {
LABEL_26:
      v35 = 0;
      if (!(**a5)(a5, &v35, a1 + 16 * v25))
        break;
    }
    if (!--v24)
      goto LABEL_15;
  }
  v33 = 0;
LABEL_18:
  if ((v39 & 0x8000000000000000) == 0 && (v39 & 0x7FFFFFFF00000000) != 0 && v38 != v36 && v38)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v33;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t (***a5)(_QWORD, int *, uint64_t))
{
  unsigned int v9;
  float32x4_t v10;
  unsigned int v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x8_t v17;
  __int8 *v18;
  float32x4_t v19;
  unsigned int v20;
  __int32 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  int v32;
  _QWORD v33[256];
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v36 = 0x10000000100;
  v9 = 1;
  v34 = 1;
  v35 = v33;
  v33[0] = a3;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    v11 = 2 * v9--;
    v12 = (float32x4_t *)v35[v9];
    v13 = v12[1];
    v14 = vmulq_f32(vsubq_f32(v13, *v12), v10);
    v14.i32[3] = 0;
    v15 = vaddq_f32(v13, *v12);
    while (1)
    {
      v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      v17 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v14, a4[1]), vabdq_f32(v16, *a4)));
      if ((~vuzp1_s8(v17, v17).u32[0] & 0xFFFFFF) != 0)
        break;
      v18 = &v12[2].i8[8];
      v12 = (float32x4_t *)v12[2].i64[1];
      if (!*((_QWORD *)v18 + 1))
      {
        v20 = v12->i32[0];
        if (v12->i32[0])
        {
          v21 = &v12->i32[1];
          v22 = v20;
          while (1)
          {
            v24 = *v21++;
            v23 = v24;
            if (v20 < 2
              || (v25 = a2 + 24 * v23,
                  v26 = *(float32x4_t *)(v25 + 12),
                  v27 = vmulq_f32(vsubq_f32(v26, *(float32x4_t *)v25), v10),
                  v27.i32[3] = 0,
                  v28 = vmulq_f32(vaddq_f32(*(float32x4_t *)v25, v26), v10),
                  v28.i32[3] = 0,
                  *(int16x4_t *)v27.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(a4[1], v27), vabdq_f32(v28, *a4))),
                  (~vuzp1_s8(*(int8x8_t *)v27.f32, *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0))
            {
              v32 = 0;
              v29 = (**a5)(a5, &v32, a1 + 16 * v23);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v29)
                break;
            }
            if (!--v22)
              goto LABEL_14;
          }
          v30 = 0;
          goto LABEL_17;
        }
        break;
      }
      v35[v9] = v12 + 4;
      if (v9 + 1 == (HIDWORD(v36) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v33, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      v19 = v12[1];
      v14 = vmulq_f32(vsubq_f32(v19, *v12), v10);
      v14.i32[3] = 0;
      v15 = vaddq_f32(v19, *v12);
      v11 += 2;
      ++v9;
    }
LABEL_14:
    if (v9)
      continue;
    break;
  }
  v30 = 1;
LABEL_17:
  if ((v36 & 0x8000000000000000) == 0 && (v36 & 0x7FFFFFFF00000000) != 0 && v35 != v33 && v35)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v30;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t (***a5)(_QWORD, int *, uint64_t))
{
  unsigned int v9;
  float32x4_t v10;
  unsigned int v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int8 *v21;
  float32x4_t v22;
  unsigned int v23;
  __int32 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  int v39;
  _QWORD v40[256];
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v43 = 0x10000000100;
  v9 = 1;
  v41 = 1;
  v42 = v40;
  v40[0] = a3;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    v11 = 2 * v9--;
    v12 = (float32x4_t *)v42[v9];
    v13 = v12[1];
    v14 = vmulq_f32(vsubq_f32(v13, *v12), v10);
    v14.i32[3] = 0;
    v15 = vaddq_f32(v13, *v12);
    while (1)
    {
      v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      v17 = vaddq_f32(v14, a4[3]);
      v18 = vsubq_f32(*a4, v16);
      *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
      v19.i64[1] = v18.u32[0];
      *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), 4uLL);
      v20.i64[1] = v17.u32[0];
      *(int16x4_t *)v17.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a4[7], vsubq_f32(v16, v17)), (int8x16_t)vcgeq_f32(vaddq_f32(v16, v17), a4[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a4[4], v20), a4[5], v17), vabsq_f32(vmlsq_f32(vmulq_f32(a4[1], v19), v18, a4[2])))));
      if (vuzp1_s8(*(int8x8_t *)v17.f32, *(int8x8_t *)v17.f32).u32[0] != -1)
        break;
      v21 = &v12[2].i8[8];
      v12 = (float32x4_t *)v12[2].i64[1];
      if (!*((_QWORD *)v21 + 1))
      {
        v23 = v12->i32[0];
        if (v12->i32[0])
        {
          v24 = &v12->i32[1];
          v25 = v23;
          while (1)
          {
            v27 = *v24++;
            v26 = v27;
            if (v23 < 2)
              goto LABEL_25;
            v28 = a2 + 24 * v26;
            v29 = *(float32x4_t *)(v28 + 12);
            v30 = vmulq_f32(vsubq_f32(v29, *(float32x4_t *)v28), v10);
            v31 = vmulq_f32(vaddq_f32(*(float32x4_t *)v28, v29), v10);
            v31.i32[3] = 0;
            v30.i32[3] = 0;
            v32 = vaddq_f32(a4[3], v30);
            v33 = vsubq_f32(*a4, v31);
            *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
            v34.i64[1] = v33.u32[0];
            *(int8x8_t *)v35.f32 = vext_s8(*(int8x8_t *)v32.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
            v35.i64[1] = v32.u32[0];
            *(int16x4_t *)v32.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a4[7], vsubq_f32(v31, v32)), (int8x16_t)vcgeq_f32(vaddq_f32(v31, v32), a4[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a4[4], v35), a4[5], v32), vabsq_f32(vmlsq_f32(vmulq_f32(a4[1], v34), v33, a4[2])))));
            if (vuzp1_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v32.f32).u32[0] == -1)
            {
LABEL_25:
              v39 = 0;
              v36 = (**a5)(a5, &v39, a1 + 16 * v26);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v36)
                break;
            }
            if (!--v25)
              goto LABEL_14;
          }
          v37 = 0;
          goto LABEL_17;
        }
        break;
      }
      v42[v9] = v12 + 4;
      if (v9 + 1 == (HIDWORD(v43) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v40, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      v22 = v12[1];
      v14 = vmulq_f32(vsubq_f32(v22, *v12), v10);
      v14.i32[3] = 0;
      v15 = vaddq_f32(v22, *v12);
      v11 += 2;
      ++v9;
    }
LABEL_14:
    if (v9)
      continue;
    break;
  }
  v37 = 1;
LABEL_17:
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x7FFFFFFF00000000) != 0 && v42 != v40 && v42)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v37;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(_QWORD, int *, uint64_t))
{
  unsigned int v9;
  float32x4_t v10;
  unsigned int v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int8 *v21;
  float32x4_t v22;
  unsigned int v23;
  __int32 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  int v39;
  _QWORD v40[256];
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v43 = 0x10000000100;
  v9 = 1;
  v41 = 1;
  v42 = v40;
  v40[0] = a3;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    v11 = 2 * v9--;
    v12 = (float32x4_t *)v42[v9];
    v13 = v12[1];
    v14 = vmulq_f32(vsubq_f32(v13, *v12), v10);
    v14.i32[3] = 0;
    v15 = vaddq_f32(v13, *v12);
    while (1)
    {
      v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      v17 = vsubq_f32(*(float32x4_t *)a4, v16);
      v18 = vnegq_f32(v14);
      v18.i32[3] = 0;
      v19 = vsubq_f32(v17, vmaxq_f32(vminq_f32(v17, v14), v18));
      v20 = vmulq_f32(v19, v19);
      v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
      *(int16x4_t *)v20.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a4 + 16), vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)), 0);
      if (vuzp1_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v20.f32).u32[0] != -1)
        break;
      v21 = &v12[2].i8[8];
      v12 = (float32x4_t *)v12[2].i64[1];
      if (!*((_QWORD *)v21 + 1))
      {
        v23 = v12->i32[0];
        if (v12->i32[0])
        {
          v24 = &v12->i32[1];
          v25 = v23;
          while (1)
          {
            v27 = *v24++;
            v26 = v27;
            if (v23 < 2)
              goto LABEL_25;
            v28 = a2 + 24 * v26;
            v29 = *(float32x4_t *)(v28 + 12);
            v30 = vmulq_f32(vsubq_f32(v29, *(float32x4_t *)v28), v10);
            v31 = vmulq_f32(vaddq_f32(*(float32x4_t *)v28, v29), v10);
            v31.i32[3] = 0;
            v30.i32[3] = 0;
            v32 = vsubq_f32(*(float32x4_t *)a4, v31);
            v33 = vnegq_f32(v30);
            v33.i32[3] = 0;
            v34 = vsubq_f32(v32, vmaxq_f32(vminq_f32(v32, v30), v33));
            v35 = vmulq_f32(v34, v34);
            v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
            *(int16x4_t *)v35.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a4 + 16), vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32)), 0);
            if (vuzp1_s8(*(int8x8_t *)v35.f32, *(int8x8_t *)v35.f32).u32[0] == -1)
            {
LABEL_25:
              v39 = 0;
              v36 = (**a5)(a5, &v39, a1 + 16 * v26);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v36)
                break;
            }
            if (!--v25)
              goto LABEL_14;
          }
          v37 = 0;
          goto LABEL_17;
        }
        break;
      }
      v42[v9] = v12 + 4;
      if (v9 + 1 == (HIDWORD(v43) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v40, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      v22 = v12[1];
      v14 = vmulq_f32(vsubq_f32(v22, *v12), v10);
      v14.i32[3] = 0;
      v15 = vaddq_f32(v22, *v12);
      v11 += 2;
      ++v9;
    }
LABEL_14:
    if (v9)
      continue;
    break;
  }
  v37 = 1;
LABEL_17:
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x7FFFFFFF00000000) != 0 && v42 != v40 && v42)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v37;
}

uint64_t physx::Gu::AABBTreeRaycast<true,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6, float *a7, float32x2_t *a8, unsigned int (***a9)(_QWORD, float *, uint64_t))
{
  int v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  double v17;
  double v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unsigned __int32 v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned __int32 v58;
  float32x4_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int i;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float32x4_t v79;
  uint64_t v81;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float v93;
  _QWORD v94[256];
  char v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;

  v12 = 0;
  v98 = *MEMORY[0x24BDAC8D0];
  v13 = a5[1].f32[0] + a5[1].f32[0];
  v14 = vadd_f32(*a5, *a5);
  v15 = vadd_f32(*a6, *a6);
  v16 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v22.f32 = vadd_f32(*a8, *a8);
  v17 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  v18 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v19.f32 = v14;
  v19.i64[1] = LODWORD(v13);
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v16);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  v22.f32[2] = a8[1].f32[0] + a8[1].f32[0];
  v22.i32[3] = 0;
  v23 = vabsq_f32(v20);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
  v24.i64[1] = v23.u32[0];
  v25 = v13 + (float)(v16 * *a7);
  v26 = -3.4028e38;
  if (v16 >= 0.0)
    v26 = 3.4028e38;
  if (v16 != 0.0)
    v13 = v26;
  if (*a7 >= 3.4028e38)
  {
    *(double *)v27.i64 = v18;
  }
  else
  {
    v13 = v25;
    *(double *)v27.i64 = v17;
  }
  v27.i64[1] = LODWORD(v13);
  v28 = vminq_f32(v19, v27);
  v29 = vmaxq_f32(v19, v27);
  v97 = 0x10000000100;
  v95 = 1;
  v96 = v94;
  v94[0] = *(_QWORD *)(a4 + 1144);
  v30 = vnegq_f32(v21);
  v87 = v20;
  v88 = v19;
  v85 = v23;
  v86 = v22;
  v83 = v30;
  v84 = v24;
  do
  {
    v31 = (float32x4_t *)v96[v12];
    v32 = v31[1];
    v33 = vsubq_f32(v32, *v31);
    v33.i32[3] = 0;
    v34 = vaddq_f32(v32, *v31);
    v34.i32[3] = 0;
    v35 = vaddq_f32(v22, v33);
    v36 = vaddq_f32(v34, v35);
    v37 = vsubq_f32(v34, v35);
    v38 = vsubq_f32(v19, v34);
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
    v39.i64[1] = v38.u32[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v35.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), 4uLL);
    v40.i64[1] = v35.u32[0];
    *(int16x4_t *)v38.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v36, v28), (int8x16_t)vcgeq_f32(v29, v37)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v40), v24, v35), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v39), v38, v30)))));
    if (vuzp1_s8(*(int8x8_t *)v38.f32, *(int8x8_t *)v38.f32).u32[0] == -1)
    {
      v41 = *a7;
      v93 = *a7;
      if (v31[3].i64[0])
      {
        v23 = v85;
        v22 = v86;
        v30 = v83;
        v24 = v84;
        v89 = v29;
        v91 = v28;
        do
        {
          v42 = (float32x4_t *)v31[2].i64[1];
          v43 = v42[1];
          v44 = vsubq_f32(v43, *v42);
          v44.i32[3] = 0;
          v45 = vaddq_f32(v43, *v42);
          v45.i32[3] = 0;
          v46 = vaddq_f32(v22, v44);
          v47 = vsubq_f32(v19, v45);
          *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v47.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), 4uLL);
          v48.i64[1] = v47.u32[0];
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), 4uLL);
          v49.i64[1] = v46.u32[0];
          v50 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v45, v46), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v45, v46))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v49), v24, v46), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v48), v47, v30))))), *(int8x8_t *)v45.f32).u32[0];
          v51 = v42[4];
          v52 = v42[5];
          v53 = vsubq_f32(v52, v51);
          v53.i32[3] = 0;
          v54 = vaddq_f32(v52, v51);
          v54.i32[3] = 0;
          v55 = vaddq_f32(v22, v53);
          v56 = vsubq_f32(v19, v54);
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), 4uLL);
          v49.i64[1] = v56.u32[0];
          *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
          v57.i64[1] = v55.u32[0];
          v58 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v54, v55), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v54, v55))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v57), v24, v55), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v49), v56, v30))))), *(int8x8_t *)v45.f32).u32[0];
          if (v50 == -1 && v58 == -1)
          {
            v61 = vmulq_f32(v20, vsubq_f32(v54, v45));
            v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
            v61.f32[0] = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32).f32[0];
            v96[v12] = &v42[4 * (unint64_t)(v61.f32[0] > 0.0)];
            v31 = &v42[4 * (unint64_t)(v61.f32[0] <= 0.0)];
            if (v12 + 1 == (HIDWORD(v97) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v94, 2 * (v12 + 1));
              v29 = v89;
              v28 = v91;
              v30 = v83;
              v24 = v84;
              v23 = v85;
              v22 = v86;
              v20 = v87;
              v19 = v88;
            }
            ++v12;
          }
          else
          {
            if (v50 == -1)
              v31 = (float32x4_t *)v31[2].i64[1];
            else
              v31 = v42 + 4;
            if (v50 != -1 && v58 != -1)
              goto LABEL_38;
          }
        }
        while (v31[3].i64[0]);
        v41 = *a7;
      }
      v62 = (unsigned int *)v31[2].i64[1];
      v63 = *v62;
      if (*v62)
      {
        v64 = v62 + 1;
        for (i = *v62; i; --i)
        {
          v67 = *v64++;
          v66 = v67;
          if (v63 < 2)
            goto LABEL_33;
          v68 = a3 + 24 * v66;
          v69 = *(float32x4_t *)(v68 + 12);
          v70 = vaddq_f32(*(float32x4_t *)v68, v69);
          v71 = vsubq_f32(v69, *(float32x4_t *)v68);
          v70.i32[3] = 0;
          v71.i32[3] = 0;
          v72 = vaddq_f32(v86, v71);
          v73 = vaddq_f32(v70, v72);
          v74 = vsubq_f32(v70, v72);
          v75 = vsubq_f32(v19, v70);
          *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v75.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), 4uLL);
          v76.i64[1] = v75.u32[0];
          *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v72.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), 4uLL);
          v77.i64[1] = v72.u32[0];
          *(int16x4_t *)v72.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v73, v28), (int8x16_t)vcgeq_f32(v29, v74)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v85, v77), v84, v72), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v76), v75, v83)))));
          if (vuzp1_s8(*(int8x8_t *)v72.f32, *(int8x8_t *)v72.f32).u32[0] == -1)
          {
LABEL_33:
            v90 = v29;
            v92 = v28;
            if (!(**a9)(a9, &v93, a2 + 16 * v66))
            {
              v81 = 0;
              goto LABEL_41;
            }
            v78 = v93;
            v20 = v87;
            v19 = v88;
            v29 = v90;
            v28 = v92;
            if (v93 < v41)
            {
              *a7 = v93;
              v79 = vmlaq_n_f32(v88, v87, v78);
              v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
              v28 = vminq_f32(v88, v79);
              v29 = vmaxq_f32(v88, v79);
            }
          }
        }
      }
      v23 = v85;
      v22 = v86;
      v30 = v83;
      v24 = v84;
    }
LABEL_38:
    ;
  }
  while (v12--);
  v81 = 1;
LABEL_41:
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v94 && v96)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v81;
}

uint64_t physx::Gu::AABBTreeRaycast<false,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6, float *a7, uint64_t a8, unsigned int (***a9)(_QWORD, float *, uint64_t))
{
  int v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  double v16;
  double v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float32x4_t *v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unsigned __int32 v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int32 v56;
  float32x4_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int i;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76;
  float32x4_t v77;
  uint64_t v79;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float v90;
  _QWORD v91[256];
  char v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;

  v12 = 0;
  v95 = *MEMORY[0x24BDAC8D0];
  v13 = a5[1].f32[0] + a5[1].f32[0];
  v14 = vadd_f32(*a5, *a5);
  v15 = vadd_f32(*a6, *a6);
  v16 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  v17 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v18.f32 = v14;
  v18.i64[1] = LODWORD(v13);
  v19 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v19);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  v22 = vabsq_f32(v20);
  *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v23.i64[1] = v22.u32[0];
  v24 = v13 + (float)(v19 * *a7);
  v25 = -3.4028e38;
  if (v19 >= 0.0)
    v25 = 3.4028e38;
  if (v19 != 0.0)
    v13 = v25;
  if (*a7 >= 3.4028e38)
  {
    *(double *)v26.i64 = v17;
  }
  else
  {
    v13 = v24;
    *(double *)v26.i64 = v16;
  }
  v26.i64[1] = LODWORD(v13);
  v27 = vminq_f32(v18, v26);
  v28 = vmaxq_f32(v18, v26);
  v94 = 0x10000000100;
  v92 = 1;
  v93 = v91;
  v91[0] = *(_QWORD *)(a4 + 1144);
  v29 = vnegq_f32(v21);
  v84 = v20;
  v85 = v18;
  v82 = v23;
  v83 = v22;
  v81 = v29;
  do
  {
    v30 = (float32x4_t *)v93[v12];
    v31 = v30[1];
    v32 = (int8x16_t)vsubq_f32(v31, *v30);
    v33 = (float32x4_t)v32;
    v33.i32[3] = 0;
    v34 = vaddq_f32(v31, *v30);
    v34.i32[3] = 0;
    v35 = vaddq_f32(v34, v33);
    v36 = vsubq_f32(v34, v33);
    v37 = vsubq_f32(v18, v34);
    *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), 4uLL);
    v38.i64[1] = v37.u32[0];
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), 4uLL);
    v39.i64[1] = v32.u32[0];
    *(int16x4_t *)v37.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v35, v27), (int8x16_t)vcgeq_f32(v28, v36)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v39), v23, v33), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v38), v37, v29)))));
    if (vuzp1_s8(*(int8x8_t *)v37.f32, *(int8x8_t *)v37.f32).u32[0] == -1)
    {
      v40 = *a7;
      v90 = *a7;
      if (v30[3].i64[0])
      {
        v23 = v82;
        v22 = v83;
        v29 = v81;
        v86 = v28;
        v88 = v27;
        do
        {
          v41 = (float32x4_t *)v30[2].i64[1];
          v42 = v41[1];
          v43 = (int8x16_t)vsubq_f32(v42, *v41);
          v44 = (float32x4_t)v43;
          v44.i32[3] = 0;
          v45 = vaddq_f32(v42, *v41);
          v45.i32[3] = 0;
          v46 = vsubq_f32(v18, v45);
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), 4uLL);
          v47.i64[1] = v46.u32[0];
          *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v43.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), 4uLL);
          v48.i64[1] = v43.u32[0];
          v49 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v45, v44), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v45, v44))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v48), v23, v44), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v47), v46, v29))))), *(int8x8_t *)v45.f32).u32[0];
          v50 = v41[4];
          v51 = v41[5];
          v52 = (int8x16_t)vsubq_f32(v51, v50);
          v53 = (float32x4_t)v52;
          v53.i32[3] = 0;
          v54 = vaddq_f32(v51, v50);
          v54.i32[3] = 0;
          v55 = vsubq_f32(v18, v54);
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
          v47.i64[1] = v55.u32[0];
          *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
          v48.i64[1] = v52.u32[0];
          v56 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v54, v53), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v54, v53))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v48), v23, v53), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v47), v55, v29))))), *(int8x8_t *)v45.f32).u32[0];
          if (v49 == -1 && v56 == -1)
          {
            v59 = vmulq_f32(v20, vsubq_f32(v54, v45));
            v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
            v59.f32[0] = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32).f32[0];
            v93[v12] = &v41[4 * (unint64_t)(v59.f32[0] > 0.0)];
            v30 = &v41[4 * (unint64_t)(v59.f32[0] <= 0.0)];
            if (v12 + 1 == (HIDWORD(v94) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v91, 2 * (v12 + 1));
              v28 = v86;
              v27 = v88;
              v29 = v81;
              v23 = v82;
              v22 = v83;
              v20 = v84;
              v18 = v85;
            }
            ++v12;
          }
          else
          {
            if (v49 == -1)
              v30 = (float32x4_t *)v30[2].i64[1];
            else
              v30 = v41 + 4;
            if (v49 != -1 && v56 != -1)
              goto LABEL_38;
          }
        }
        while (v30[3].i64[0]);
        v40 = *a7;
      }
      v60 = (unsigned int *)v30[2].i64[1];
      v61 = *v60;
      if (*v60)
      {
        v62 = v60 + 1;
        for (i = *v60; i; --i)
        {
          v65 = *v62++;
          v64 = v65;
          if (v61 < 2)
            goto LABEL_33;
          v66 = a3 + 24 * v64;
          v67 = *(float32x4_t *)(v66 + 12);
          v68 = vaddq_f32(*(float32x4_t *)v66, v67);
          v69 = (int8x16_t)vsubq_f32(v67, *(float32x4_t *)v66);
          v68.i32[3] = 0;
          v70 = (float32x4_t)v69;
          v70.i32[3] = 0;
          v71 = vaddq_f32(v68, v70);
          v72 = vsubq_f32(v68, v70);
          v73 = vsubq_f32(v18, v68);
          *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v73.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), 4uLL);
          v74.i64[1] = v73.u32[0];
          *(int8x8_t *)v75.f32 = vext_s8(*(int8x8_t *)v69.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), 4uLL);
          v75.i64[1] = v69.u32[0];
          *(int16x4_t *)v69.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v71, v27), (int8x16_t)vcgeq_f32(v28, v72)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v83, v75), v82, v70), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v74), v73, v81)))));
          if (vuzp1_s8(*(int8x8_t *)v69.i8, *(int8x8_t *)v69.i8).u32[0] == -1)
          {
LABEL_33:
            v87 = v28;
            v89 = v27;
            if (!(**a9)(a9, &v90, a2 + 16 * v64))
            {
              v79 = 0;
              goto LABEL_41;
            }
            v76 = v90;
            v20 = v84;
            v18 = v85;
            v28 = v87;
            v27 = v89;
            if (v90 < v40)
            {
              *a7 = v90;
              v77 = vmlaq_n_f32(v85, v84, v76);
              v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
              v27 = vminq_f32(v85, v77);
              v28 = vmaxq_f32(v85, v77);
            }
          }
        }
      }
      v23 = v82;
      v22 = v83;
      v29 = v81;
    }
LABEL_38:
    ;
  }
  while (v12--);
  v79 = 1;
LABEL_41:
  if ((v94 & 0x8000000000000000) == 0 && (v94 & 0x7FFFFFFF00000000) != 0 && v93 != v91 && v93)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v79;
}

physx::Sq::IncrementalAABBPrunerCore *physx::Sq::IncrementalAABBPrunerCore::IncrementalAABBPrunerCore(physx::Sq::IncrementalAABBPrunerCore *this, const physx::Sq::PruningPool *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  int8x8_t v7;

  *(_QWORD *)this = 1;
  v4 = (char *)this + 152;
  v5 = 8;
  do
  {
    v6 = (char *)this + v5;
    *(_DWORD *)v6 = 0;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *((_DWORD *)v6 + 14) = 1061158912;
    *(_QWORD *)(v6 + 60) = 0xFFFFFFFFLL;
    *((_DWORD *)v6 + 17) = 0;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + v5 + 16, 0x40u, 0);
    v5 += 72;
  }
  while (v6 + 72 != v4);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = a2;
  *((_QWORD *)this + 21) = 0;
  if (*((_DWORD *)this + 15) <= 0xFFu)
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 24, 0x100u, v7);
  if (*((_DWORD *)this + 33) <= 0xFFu)
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 96, 0x100u, v7);
  if ((*((_DWORD *)this + 43) & 0x7FFFFFE0) == 0)
    physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)this + 160, 0x20u);
  return this;
}

void physx::Sq::IncrementalAABBPrunerCore::~IncrementalAABBPrunerCore(physx::Sq::IncrementalAABBPrunerCore *this)
{
  __n128 v2;
  int v3;
  uint64_t i;

  v2.n128_f64[0] = physx::Sq::IncrementalAABBPrunerCore::release(this);
  v3 = *((_DWORD *)this + 43);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 20) != 0)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  for (i = 96; i != -48; i -= 72)
  {
    if (*(_QWORD *)((char *)this + i))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
}

double physx::Sq::IncrementalAABBPrunerCore::release(physx::Sq::IncrementalAABBPrunerCore *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  physx::Sq::IncrementalAABBTree *v6;
  _QWORD *v7;
  physx::Sq::IncrementalAABBTree *v8;
  double result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 72 * v2;
    v8 = (physx::Sq::IncrementalAABBTree *)*((_QWORD *)v5 + 2);
    v7 = v5 + 16;
    v6 = v8;
    if (v8)
    {
      physx::Sq::IncrementalAABBTree::~IncrementalAABBTree(v6);
      (*(void (**)(uint64_t, physx::Sq::IncrementalAABBTree *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                    + 24)
                                                                        + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
      *v7 = 0;
    }
    physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 72 * v2 + 24);
    v3 = 0;
    *((_DWORD *)v7 - 2) = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  *(_QWORD *)&result = 1;
  *(_QWORD *)this = 1;
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::updateMapping(uint64_t result, int32x2_t *a2, int a3, uint64_t a4, int8x8_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  char v18;
  char v19;
  char v20;

  v17 = a3;
  v7 = *(unsigned int *)(result + 168);
  if ((_DWORD)v7)
  {
    v8 = result;
    if (!a4)
      goto LABEL_4;
    if (*(_QWORD *)(a4 + 48))
      goto LABEL_4;
    v13 = *(_DWORD **)(a4 + 40);
    if (!*v13)
      goto LABEL_4;
    v14 = 0;
    do
    {
      v16 = 0;
      v16 = v13[v14 + 1];
      v18 = 0;
      result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a2, &v16, &v18, a5);
      if (!v18)
        *(_DWORD *)result = v16;
      *(_QWORD *)(result + 8) = a4;
      ++v14;
      v13 = *(_DWORD **)(a4 + 40);
    }
    while (v14 < *v13);
    v7 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v7)
    {
LABEL_4:
      for (i = 0; i < v7; ++i)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v8 + 160) + 8 * i);
        v11 = *(_DWORD **)(v10 + 40);
        if (*v11)
        {
          v12 = 0;
          do
          {
            v15 = 0;
            v15 = v11[v12 + 1];
            v19 = 0;
            result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a2, &v15, &v19, a5);
            if (!v19)
              *(_DWORD *)result = v15;
            *(_QWORD *)(result + 8) = v10;
            ++v12;
            v11 = *(_DWORD **)(v10 + 40);
          }
          while (v12 < *v11);
          v7 = *(unsigned int *)(v8 + 168);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a2, &v17, &v20, a5);
    if (!v20)
      *(_DWORD *)result = v17;
    *(_QWORD *)(result + 8) = a4;
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::removeObject(int32x2_t *this, int a2, int a3, unsigned int *a4)
{
  int v7;
  uint64_t v8;
  unsigned __int32 v9;
  uint64_t result;
  int32x2_t *v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  int v19;
  int8x8_t v20;
  uint64_t v21;
  unsigned __int32 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  _DWORD *i;
  int v28;
  uint64_t v29;
  int v30;
  float32x4_t *v31;
  int v32;
  int v33;
  char v34;

  v32 = a3;
  v33 = a2;
  v30 = 0;
  v31 = 0;
  v7 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * this->u32[1] + 3], &v33, (uint64_t)&v30);
  v8 = 1;
  if (!v7)
    v8 = 0;
  v9 = this->u32[v8];
  if (v9 != this->i32[0]
    || (result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * v9 + 3], &v33, (uint64_t)&v30), (_DWORD)result))
  {
    v11 = &this[9 * v9];
    *a4 = v11[1].u32[0];
    v12 = physx::Sq::IncrementalAABBTree::remove(*(_QWORD *)&v11[2], v31, v33, *(_QWORD *)(*(_QWORD *)&this[19] + 8));
    if (v12)
    {
      v14 = v12;
      if (!*(_QWORD *)(v12 + 48))
      {
        v15 = *(_DWORD **)(v12 + 40);
        if (*v15)
        {
          v16 = 0;
          v17 = &this[9 * v9 + 3];
          do
          {
            v28 = 0;
            v28 = v15[v16 + 1];
            v34 = 0;
            v18 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v17, &v28, &v34, v13);
            if (!v34)
              *(_DWORD *)v18 = v28;
            *(_QWORD *)(v18 + 8) = v14;
            ++v16;
            v15 = *(_DWORD **)(v14 + 40);
          }
          while (v16 < *v15);
        }
      }
    }
    if (v33 != a3)
    {
      v28 = 0;
      v29 = 0;
      v19 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * this->u32[0] + 3], &v32, (uint64_t)&v28);
      v21 = 1;
      if (v19)
        v21 = 0;
      v22 = this->u32[v21];
      if (v22 != this->i32[1]
        || physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * v22 + 3], &v32, (uint64_t)&v28))
      {
        v23 = v29;
        v34 = 0;
        v24 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(&this[9 * v22 + 3], &v33, &v34, v20);
        if (!v34)
          *(_DWORD *)v24 = v33;
        *(_QWORD *)(v24 + 8) = v23;
        v25 = *(unsigned int **)(v29 + 40);
        v26 = *v25;
        if ((_DWORD)v26)
        {
          for (i = v25 + 1; *i != v32; ++i)
          {
            if (!--v26)
              return 1;
          }
          *i = v33;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::swapIndex(int32x2_t *this, int a2, int a3)
{
  int v4;
  int8x8_t v5;
  uint64_t v6;
  unsigned __int32 v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _DWORD *i;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;

  v15 = a3;
  v16 = a2;
  v13 = 0;
  v14 = 0;
  v4 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * this->u32[0] + 3], &v15, (uint64_t)&v13);
  v6 = 1;
  if (v4)
    v6 = 0;
  v7 = this->u32[v6];
  if (v7 != this->i32[1]
    || (result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * v7 + 3], &v15, (uint64_t)&v13), (_DWORD)result))
  {
    v9 = v14;
    v17 = 0;
    result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(&this[9 * v7 + 3], &v16, &v17, v5);
    if (!v17)
      *(_DWORD *)result = v16;
    *(_QWORD *)(result + 8) = v9;
    v10 = *(unsigned int **)(v14 + 40);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      for (i = v10 + 1; *i != v15; ++i)
      {
        if (!--v11)
          return result;
      }
      *i = v16;
    }
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::updateObject(int32x2_t *this, unsigned int a2)
{
  unsigned __int32 v4;
  int32x2_t *v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t *v10;
  char *v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t v24;
  uint64_t v25;
  _OWORD *v26;
  float32x4_t v27;
  uint64_t v28;
  __int32 *v29;
  unsigned int v30;
  uint64_t v31;
  float32x4_t *i;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  uint64_t v36;

  v4 = this->u32[1];
  v5 = &this[9 * v4];
  if (!v5[9].i32[1]
    || (v6 = (char *)&v5[3],
        v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10)),
        v8 = *(unsigned int *)(*((_QWORD *)v6 + 3)
                             + 4
                             * ((*((_DWORD *)v6 + 9) - 1) & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16)))),
        (_DWORD)v8 == -1))
  {
LABEL_6:
    v4 = this->i32[0];
    v10 = &this[9 * this->u32[0]];
    if (!v10[9].i32[1])
      return 0;
    v11 = (char *)&v10[3];
    v12 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v8 = *(unsigned int *)(*((_QWORD *)v11 + 3)
                         + 4
                         * ((*((_DWORD *)v11 + 9) - 1) & (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) >> 16))));
    if ((_DWORD)v8 == -1)
      return 0;
    v9 = *((_QWORD *)v11 + 1);
    while (*(_DWORD *)(v9 + 16 * v8) != a2)
    {
      v8 = *(unsigned int *)(*((_QWORD *)v11 + 2) + 4 * v8);
      if ((_DWORD)v8 == -1)
        return 0;
    }
  }
  else
  {
    v9 = *((_QWORD *)v6 + 1);
    while (*(_DWORD *)(v9 + 16 * v8) != a2)
    {
      v8 = *(unsigned int *)(*((_QWORD *)v6 + 2) + 4 * v8);
      if ((_DWORD)v8 == -1)
        goto LABEL_6;
    }
  }
  v14 = v9 + 16 * v8;
  this[21].i32[0] = 0;
  v15 = (uint64_t)this[9 * v4 + 2];
  v16 = *(float32x4_t **)(v14 + 8);
  v17 = *(_QWORD *)(*(_QWORD *)&this[19] + 8);
  v18 = *(float32x4_t *)(v17 + 24 * a2 + 12);
  v18.i32[3] = 0;
  *(int16x4_t *)v18.f32 = vmovn_s32(vcgtq_f32(*v16, v18));
  if ((vuzp1_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v18.f32).u32[0] & 0xFFFFFF) != 0
    || (v19 = *(float32x4_t *)(v17 + 24 * a2),
        v19.i32[3] = 0,
        *(int16x4_t *)v19.f32 = vmovn_s32(vcgtq_f32(v19, v16[1])),
        (vuzp1_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v19.f32).u32[0] & 0xFFFFFF) != 0))
  {
    v20 = physx::Sq::IncrementalAABBTree::remove(*(_QWORD *)&this[9 * v4 + 2], *(float32x4_t **)(v14 + 8), a2, *(_QWORD *)(*(_QWORD *)&this[19] + 8));
    v36 = v20;
    if (v20 && !*(_QWORD *)(v20 + 48))
    {
      v21 = this[21].u32[0];
      if ((this[21].i32[1] & 0x7FFFFFFFu) <= v21)
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack((uint64_t)&this[20], &v36);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&this[20] + 8 * v21) = v20;
        this[21].i32[0] = v21 + 1;
      }
    }
    v16 = physx::Sq::IncrementalAABBTree::insert(v15, a2, v17, (uint64_t)&this[20]);
  }
  else
  {
    v23 = (float32x4_t *)v16[2].i64[1];
    v22 = (float32x4_t *)v16[3].i64[0];
    if (v22)
    {
      *v16 = vminq_f32(*v23, *v22);
      v24 = vmaxq_f32(v23[1], v22[1]);
    }
    else
    {
      v25 = v23->u32[0];
      v26 = (_OWORD *)(v17 + 24 * v23->u32[1]);
      v27 = *(float32x4_t *)v26;
      v24 = *(float32x4_t *)((char *)v26 + 12);
      if (v25 >= 2)
      {
        v28 = v25 - 1;
        v29 = &v23->i32[2];
        do
        {
          v30 = *v29++;
          v31 = v17 + 24 * v30;
          v27 = vminq_f32(v27, *(float32x4_t *)v31);
          v24 = vmaxq_f32(v24, *(float32x4_t *)(v31 + 12));
          --v28;
        }
        while (v28);
      }
      v27.i32[3] = 0;
      *v16 = v27;
      v24.i32[3] = 0;
    }
    v16[1] = v24;
    for (i = (float32x4_t *)v16[2].i64[0]; i; i = (float32x4_t *)i[2].i64[0])
    {
      v33 = (float32x4_t *)i[2].i64[1];
      v34 = (float32x4_t *)i[3].i64[0];
      v35 = vminq_f32(*v33, *v34);
      v24 = vmaxq_f32(v33[1], v34[1]);
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*i, v35)), *(int8x8_t *)v24.f32).u32[0] == -1
        && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v24, i[1])), *(int8x8_t *)v24.f32).u32[0] == -1)
      {
        break;
      }
      *i = v35;
      i[1] = v24;
    }
  }
  if (this[21].i32[0] || v16 != *(float32x4_t **)(v14 + 8))
    physx::Sq::IncrementalAABBPrunerCore::updateMapping((uint64_t)this, &this[9 * v4 + 3], a2, (uint64_t)v16, *(int8x8_t *)v24.f32);
  return 1;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::removeMarkedObjects(physx::Sq::IncrementalAABBPrunerCore *this)
{
  unsigned int v1;
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *((_DWORD *)this + 1);
  v2 = (char *)this + 72 * v1;
  v5 = *((_QWORD *)v2 + 2);
  v4 = (uint64_t *)(v2 + 16);
  v3 = v5;
  if (!v5 || !*(_QWORD *)(v3 + 1144))
    return 0;
  v6 = (_DWORD *)((char *)this + 72 * v1);
  v7 = v6[19];
  physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(v6 + 6);
  v6[2] = 0;
  v8 = *v4;
  v9 = *(_QWORD **)(v8 + 1144);
  if (v9)
  {
    physx::Sq::IncrementalAABBTree::releaseNode(v8, v9);
    *(_QWORD *)(v8 + 1144) = 0;
  }
  return v7;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::overlap(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, int *, uint64_t), double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v13;
  uint64_t v14;
  __int32 *v15;
  char v16;
  int8x8_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  double v29;
  double v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  int32x4_t v34;
  int8x16_t v35;
  __int128 v36;
  float v37;
  float v38;
  BOOL v39;
  float v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v50;
  float32x4_t v51;
  __int128 v52;
  int32x4_t v53;
  int8x16_t v54;
  __int128 v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;

  v13 = 0;
  v58 = *MEMORY[0x24BDAC8D0];
  v14 = a2 + 48;
  v15 = (__int32 *)(a2 + 12);
  v16 = 1;
  v17 = (int8x8_t)vdup_n_s32(0x7F7FFFFFu);
  v18 = 1;
  do
  {
    v19 = v16;
    v20 = a1 + 72 * v13;
    v23 = *(_QWORD *)(v20 + 16);
    v22 = v20 + 16;
    v21 = v23;
    if (v23)
    {
      v24 = *(_QWORD *)(v21 + 1144);
      if (((v24 != 0) & v18) == 1)
      {
        v18 = 1;
        switch(*(_WORD *)(a2 + 98))
        {
          case 0:
            LODWORD(a4) = *(_DWORD *)(a2 + 112);
            v25 = *(float32x4_t *)(a2 + 100);
            v25.i64[1] = *(unsigned int *)(a2 + 108);
            v50 = v25;
            *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
            *(int32x2_t *)v51.f32 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
            v18 = physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), v24, (uint64_t)&v50, a3);
            break;
          case 2:
            v26 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
            v27 = *(float *)(a2 + 120);
            v31.i64[0] = *(_QWORD *)(a2 + 112);
            v28 = *(float32x2_t *)(a2 + 12);
            v29 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v31.f32, vmul_n_f32(v28, v26)));
            v30 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v28), *(int8x8_t *)v31.f32, vbsl_s8((int8x8_t)vcgez_f32(v28), v17, (int8x8_t)0x80000000800000)));
            v31.i64[1] = LODWORD(v27);
            *(float32x2_t *)v32.f32 = v28;
            *(float *)&a6 = *(float *)(a2 + 124) * 1.01;
            v32.i64[1] = *(unsigned int *)(a2 + 20);
            v50 = v31;
            v51 = v32;
            *(int8x8_t *)&v33 = vext_s8((int8x8_t)v28, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
            *((_QWORD *)&v33 + 1) = v28.u32[0];
            v34 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
            v34.i32[3] = 0;
            v52 = v33;
            v53 = v34;
            v35 = (int8x16_t)vabsq_f32(v32);
            *(int8x8_t *)&v36 = vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
            v37 = v27 + (float)(v26 * v32.f32[2]);
            v38 = -3.4028e38;
            if (v32.f32[2] >= 0.0)
              v38 = 3.4028e38;
            if (v32.f32[2] != 0.0)
              v27 = v38;
            v39 = v26 < 3.4028e38;
            if (v26 >= 3.4028e38)
              v40 = v27;
            else
              v40 = v37;
            if (v39)
              *(double *)v41.i64 = v29;
            else
              *(double *)v41.i64 = v30;
            v41.i64[1] = LODWORD(v40);
            v54 = v35;
            *((_QWORD *)&v36 + 1) = v35.u32[0];
            v55 = v36;
            v56 = vminq_f32(v31, v41);
            v57 = vmaxq_f32(v31, v41);
            v18 = physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), v24, &v50, a3);
            break;
          case 3:
            if (*(_WORD *)(a2 + 96))
              goto LABEL_18;
            v42 = *(float *)(a2 + 80);
            v43 = *(float *)(a2 + 92);
            v44 = *(float32x2_t *)(a2 + 72);
            v45 = *(float32x2_t *)(a2 + 84);
            *(float32x2_t *)v46.f32 = vmul_f32(vadd_f32(v44, v45), (float32x2_t)0x3F0000003F000000);
            v46.f32[2] = (float)(v42 + v43) * 0.5;
            v46.i32[3] = 0;
            v47 = v43 - v42;
            *(float32x2_t *)v48.f32 = vmul_f32(vsub_f32(v45, v44), (float32x2_t)0x3F0000003F000000);
            v48.i64[1] = COERCE_UNSIGNED_INT(v47 * 0.5);
            v50 = v46;
            v51 = v48;
            v18 = physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), v24, &v50, a3);
            break;
          case 4:
LABEL_18:
            physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)&v50, v14, v15, a2, a4, a5, a6, a7, a8, a9, a10);
            v18 = physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), *(_QWORD *)(*(_QWORD *)v22 + 1144), &v50, (unsigned int (***)(_QWORD, int *, uint64_t))a3);
            break;
          default:
            break;
        }
      }
    }
    v16 = 0;
    v13 = 1;
  }
  while ((v19 & 1) != 0);
  return v18 & 1;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::sweep(uint64_t a1, float *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(_QWORD, float *, uint64_t))
{
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v25;
  float v26;
  char v27;
  float32x2_t v28;
  float v29;

  v10 = 0;
  v11 = 1;
  v12 = 1;
  do
  {
    v13 = v11;
    v14 = *(_QWORD *)(a1 + 72 * v10 + 16);
    if (v14 && ((*(_QWORD *)(v14 + 1144) != 0) & v12) == 1)
    {
      v15 = a2[18];
      v16 = a2[19];
      v18 = a2[20];
      v17 = a2[21];
      v19 = a2[22];
      v20 = a2[23];
      v28.f32[0] = (float)(v17 - v15) * 0.5;
      v28.f32[1] = (float)(v19 - v16) * 0.5;
      v29 = (float)(v20 - v18) * 0.5;
      v21 = *(_QWORD *)(a1 + 152);
      v23 = *(_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 16);
      v25.f32[0] = (float)(v17 + v15) * 0.5;
      v25.f32[1] = (float)(v19 + v16) * 0.5;
      v26 = (float)(v20 + v18) * 0.5;
      v12 = physx::Gu::AABBTreeRaycast<true,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v27, v22, v23, v14, &v25, a3, a4, &v28, a5);
    }
    v11 = 0;
    v10 = 1;
  }
  while ((v13 & 1) != 0);
  return v12 & 1;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::raycast(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(_QWORD, float *, uint64_t))
{
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  char v21;

  v10 = 0;
  v11 = 1;
  v12 = 1;
  do
  {
    v13 = v11;
    v14 = *(_QWORD *)(a1 + 72 * v10 + 16);
    if (v14 && ((*(_QWORD *)(v14 + 1144) != 0) & v12) == 1)
    {
      v15 = *(_QWORD *)(a1 + 152);
      v17 = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(v15 + 16);
      v19 = 0;
      v20 = 0;
      v12 = physx::Gu::AABBTreeRaycast<false,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v21, v16, v17, v14, a2, a3, a4, (uint64_t)&v19, a5);
    }
    v11 = 0;
    v10 = 1;
  }
  while ((v13 & 1) != 0);
  return v12 & 1;
}

void physx::Sq::IncrementalAABBPrunerCore::shiftOrigin(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 72 * v4 + 16);
    if (v7)
    {
      v8 = *(float32x4_t **)(v7 + 1144);
      if (v8)
      {
        v9 = *a2;
        v9.i32[3] = 0;
        v10 = v9;
        shiftNode(v8, &v10);
      }
    }
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::visualize(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v5 = result;
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = v5 + 72 * v6;
    v12 = *(_QWORD *)(v9 + 16);
    v11 = v9 + 16;
    v10 = v12;
    if (v12)
    {
      if (*(_QWORD *)(v10 + 1144))
      {
        v13 = xmmword_2260E5D70;
        v14 = 0;
        v15 = 0;
        physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v13);
        a2[1] = a3;
        physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*(int **)(*(_QWORD *)v11 + 1144), a2);
        v13 = xmmword_2260E5D70;
        v14 = 0;
        v15 = 0;
        result = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v13);
        a2[1] = -1;
      }
    }
    v7 = 0;
    v6 = 1;
  }
  while ((v8 & 1) != 0);
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(int *a1, _DWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  __int128 v9;
  int v10;
  char v11;

  *(_QWORD *)&v4 = *(_QWORD *)(a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = a1[6];
  v8 = *a1;
  *((_QWORD *)&v4 + 1) = v5;
  v9 = v4;
  v10 = v6;
  v11 = 1;
  result = physx::Cm::operator<<(a2, (uint64_t *)&v8);
  if (*((_QWORD *)a1 + 6))
  {
    physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*((_QWORD *)a1 + 5), a2);
    return physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*((_QWORD *)a1 + 6), a2);
  }
  return result;
}

void physx::Sq::IncrementalAABBTree::~IncrementalAABBTree(physx::Sq::IncrementalAABBTree *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 143);
  if (v2)
  {
    physx::Sq::IncrementalAABBTree::releaseNode((uint64_t)this, v2);
    *((_QWORD *)this + 143) = 0;
  }
  physx::Gu::NodeAllocator::~NodeAllocator((physx::Sq::IncrementalAABBTree *)((char *)this + 1152));
  physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::~PoolBase((uint64_t)this + 576);
  physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::~PoolBase((uint64_t)this + 8);
}

uint64_t physx::Sq::IncrementalAABBTree::releaseNode(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = result;
  v5 = a2 + 5;
  v4 = (_QWORD *)a2[5];
  if (v5[1])
  {
    physx::Sq::IncrementalAABBTree::releaseNode(result, v4);
    result = physx::Sq::IncrementalAABBTree::releaseNode(v3, a2[6]);
  }
  else if (v4)
  {
    --*(_DWORD *)(result + 556);
    *v4 = *(_QWORD *)(result + 568);
    *(_QWORD *)(result + 568) = v4;
  }
  v6 = a2[4];
  if (v6)
  {
    if (*(_QWORD **)(v6 + 48) == a2)
    {
      v7 = *(_QWORD **)(v6 + 40);
      if (v7)
      {
        --*(_DWORD *)(v3 + 1124);
        *v7 = *(_QWORD *)(v3 + 1136);
        *(_QWORD *)(v3 + 1136) = v7;
      }
    }
  }
  else
  {
    --*(_DWORD *)(v3 + 1124);
    *a2 = *(_QWORD *)(v3 + 1136);
    *(_QWORD *)(v3 + 1136) = a2;
  }
  return result;
}

float32x4_t physx::Sq::IncrementalAABBTree::splitLeafNode(uint64_t a1, float32x4_t *a2, unsigned int a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  float32x4_t *v12;
  unsigned int *v13;
  float32x4_t v14;
  float32x4_t result;
  float32x4_t v16;
  float32x4_t v17;
  unsigned __int8 v18;
  float v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  unsigned int v24;
  unsigned int *v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  _OWORD *v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  float32x4_t *i;
  int8x8_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float *v53;
  uint64_t v54;
  float32x4_t v55;

  v12 = *(float32x4_t **)(a1 + 1136);
  if (!v12)
  {
    physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(a1 + 576);
    v12 = *(float32x4_t **)(a1 + 1136);
  }
  *(_QWORD *)(a1 + 1136) = v12->i64[0];
  ++*(_DWORD *)(a1 + 1124);
  v13 = *(unsigned int **)(a1 + 568);
  if (!v13)
  {
    physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(a1 + 8);
    v13 = *(unsigned int **)(a1 + 568);
  }
  *(_QWORD *)(a1 + 568) = *(_QWORD *)v13;
  ++*(_DWORD *)(a1 + 556);
  v14 = vminq_f32(*a2, *a4);
  result = vmaxq_f32(a2[1], *a5);
  v16.i64[0] = 0x3F0000003F000000;
  v16.i64[1] = 0x3F0000003F000000;
  v17 = vsubq_f32(result, v14);
  v55 = vmulq_f32(vaddq_f32(v14, result), v16);
  v54 = v17.i64[0];
  v18 = vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1), v17)).u8[0];
  v19 = *(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v18 & 1)));
  v12[2].i64[0] = (uint64_t)a2;
  v12[6].i64[0] = (uint64_t)a2;
  v20 = (unsigned int *)a2[2].i64[1];
  v12[2].i64[1] = (uint64_t)v20;
  v12[3].i64[0] = 0;
  v12[6].i64[1] = (uint64_t)v13;
  v12[7].i64[0] = 0;
  *v13 = 0;
  v21 = *v20;
  if (!*v20)
    goto LABEL_14;
  v22 = v18 & 1;
  if (v17.f32[2] > v19)
    v22 = 2;
  v23 = *(float *)((unint64_t)&v55 | (4 * v22));
  v24 = v21 - 1;
  do
  {
    v25 = &v20[v24];
    v28 = v25[1];
    v26 = v25 + 1;
    v27 = v28;
    if (v23 >= (float)((float)(*(float *)(a6 + 4 * v22 + 24 * v28) + *(float *)(a6 + 4 * v22 + 24 * v28 + 12)) * 0.5))
    {
      v29 = *v13;
      *v13 = v29 + 1;
      v13[v29 + 1] = v27;
      v21 = *v20 - 1;
      *v20 = v21;
      *v26 = v20[v21 + 1];
    }
  }
  while ((unint64_t)v24--);
  if (v21 && (v31 = *v13, (_DWORD)v31 != 4))
  {
    if (v21 == 4)
    {
      *v13 = 1;
      v32 = v13 + 1;
    }
    else
    {
      v53 = (float *)(a6 + 24 * a3 + 4 * v22);
      if (v23 >= (float)((float)(*v53 + v53[3]) * 0.5))
      {
        *v13 = v31 + 1;
        v32 = &v13[v31 + 1];
      }
      else
      {
        *v20 = v21 + 1;
        v32 = &v20[v21 + 1];
      }
    }
  }
  else
  {
LABEL_14:
    *v20 = 1;
    v32 = v20 + 1;
  }
  *v32 = a3;
  v33 = *v20;
  v34 = (_OWORD *)(a6 + 24 * v20[1]);
  v35 = *(float32x4_t *)v34;
  v36 = *(float32x4_t *)((char *)v34 + 12);
  if (v33 >= 2)
  {
    v37 = v33 - 1;
    v38 = v20 + 2;
    do
    {
      v39 = *v38++;
      v40 = a6 + 24 * v39;
      v35 = vminq_f32(v35, *(float32x4_t *)v40);
      v36 = vmaxq_f32(v36, *(float32x4_t *)(v40 + 12));
      --v37;
    }
    while (v37);
  }
  v35.i32[3] = 0;
  v36.i32[3] = 0;
  *v12 = v35;
  v12[1] = v36;
  v41 = *v13;
  v42 = (_OWORD *)(a6 + 24 * v13[1]);
  v43 = *(float32x4_t *)v42;
  v44 = *(float32x4_t *)((char *)v42 + 12);
  if (v41 >= 2)
  {
    v45 = v41 - 1;
    v46 = v13 + 2;
    do
    {
      v47 = *v46++;
      v48 = a6 + 24 * v47;
      v43 = vminq_f32(v43, *(float32x4_t *)v48);
      v44 = vmaxq_f32(v44, *(float32x4_t *)(v48 + 12));
      --v45;
    }
    while (v45);
  }
  v43.i32[3] = 0;
  v44.i32[3] = 0;
  v12[4] = v43;
  v12[5] = v44;
  a2[2].i64[1] = (uint64_t)v12;
  a2[3].i64[0] = (uint64_t)&v12[4];
  *a2 = v14;
  a2[1] = result;
  for (i = (float32x4_t *)a2[2].i64[0]; i; i = (float32x4_t *)i[2].i64[0])
  {
    if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*i, v14)), *(int8x8_t *)result.f32).u32[0] & 0xFFFFFF) == 0)
    {
      v50 = (int8x8_t)vmovn_s32(vcgtq_f32(result, i[1]));
      *(int8x8_t *)result.f32 = vuzp1_s8(v50, v50);
      if ((result.i32[0] & 0xFFFFFF) == 0)
        break;
    }
    v51 = (float32x4_t *)i[2].i64[1];
    v52 = (float32x4_t *)i[3].i64[0];
    v14 = vminq_f32(*v51, *v52);
    *i = v14;
    result = vmaxq_f32(v51[1], v52[1]);
    i[1] = result;
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBTree::rotateTree(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *i;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t v47;
  uint64_t v48;
  _OWORD *v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  __int32 *v53;
  unsigned int v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  __int8 *v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unsigned __int8 v71;
  unsigned int v73;
  uint64_t v74;
  char v75;
  int v76;
  float32x4_t *v77;
  float32x4_t v78;
  float32x4_t v79;
  unsigned __int32 v80;
  uint64_t v81;
  float32x4_t *j;
  __int8 *v83;
  float32x4_t *v84;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  BOOL v97;
  unsigned int v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int *v103;
  int v104;
  _DWORD *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t *k;
  int8x8_t v117;
  float32x4_t *v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  _QWORD *v125;
  float32x4_t *v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t m;
  int8x8_t v130;
  float32x4_t *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t v136;

  v9 = result;
  v10 = *(float32x4_t **)(a2 + 40 + 8 * (a4 == 0));
  v11 = *(_QWORD *)(a2 + 40 + 8 * a4);
  v12 = vaddq_f32(v10[1], *v10);
  v13 = vsubq_f32(v12, vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v11 + 40) + 16), *(float32x4_t *)*(_QWORD *)(v11 + 40)));
  v14 = vsubq_f32(v12, vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v11 + 48) + 16), *(float32x4_t *)*(_QWORD *)(v11 + 48)));
  v13.i32[3] = 0;
  v15 = vmulq_f32(v13, v13);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v14.i32[3] = 0;
  v16 = vmulq_f32(v14, v14);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  for (i = *(float32x4_t **)(v11
                            + 40
                            + 8
                            * (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)), 0), *(int8x8_t *)v12.f32).u32[0] == -1));
        ;
        i = (float32x4_t *)i[2].i64[(vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)), 0), *(int8x8_t *)v12.f32).u32[0] == -1)+ 1])
  {
    v18 = (float32x4_t *)i[3].i64[0];
    if (!v18)
      break;
    v19 = (float32x4_t *)i[2].i64[1];
    _X10 = v19[2].i64[1];
    __asm { PRFM            #0, [X10] }
    _X10 = v18[2].i64[1];
    __asm { PRFM            #0, [X10] }
    v27 = vsubq_f32(v12, vaddq_f32(v19[1], *v19));
    v28 = vsubq_f32(v12, vaddq_f32(v18[1], *v18));
    v27.i32[3] = 0;
    v29 = vmulq_f32(v27, v27);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    v28.i32[3] = 0;
    v30 = vmulq_f32(v28, v28);
    v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  }
  v31 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v31)
  {
    v32 = 0;
    while (*(float32x4_t **)(*(_QWORD *)a3 + 8 * v32) != i)
    {
      if (v31 == ++v32)
        goto LABEL_12;
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if ((_DWORD)v32 != (_DWORD)v31)
  {
    v33 = *(_QWORD *)a3;
    v34 = v31 - 1;
    *(_DWORD *)(a3 + 8) = v34;
    *(_QWORD *)(v33 + 8 * v32) = *(_QWORD *)(v33 + 8 * v34);
  }
LABEL_12:
  v35 = i[2].i64[0];
  v136 = v35;
  v36 = *(float32x4_t **)(v35 + 40);
  v37 = v36;
  if (v36 == i)
    v37 = *(float32x4_t **)(v35 + 48);
  *(float32x4_t *)(v35 + 16) = v37[1];
  *(float32x4_t *)v35 = *v37;
  v38 = v37[2].i64[1];
  v39 = v37[3].i64[0];
  *(_QWORD *)(v35 + 40) = v38;
  if (v39)
  {
    *(_QWORD *)(v38 + 32) = v35;
    v40 = v37[3].i64[0];
    *(_QWORD *)(v35 + 48) = v40;
    *(_QWORD *)(v40 + 32) = v35;
  }
  else
  {
    *(_QWORD *)(v35 + 48) = 0;
    v41 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v41)
    {
      v42 = 0;
      while (*(float32x4_t **)(*(_QWORD *)a3 + 8 * v42) != v37)
      {
        if (v41 == ++v42)
          goto LABEL_24;
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    if ((_DWORD)v42 != (_DWORD)v41)
    {
      v43 = *(_QWORD *)a3;
      LODWORD(v41) = v41 - 1;
      *(_DWORD *)(a3 + 8) = v41;
      *(_QWORD *)(v43 + 8 * v42) = *(_QWORD *)(v43 + 8 * v41);
    }
LABEL_24:
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v41)
    {
      result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v136);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v41) = v136;
      *(_DWORD *)(a3 + 8) = v41 + 1;
    }
  }
  v44 = *(float32x4_t **)(v136 + 32);
  if (v44)
  {
    v46 = (float32x4_t *)v44[2].i64[1];
    v45 = (float32x4_t *)v44[3].i64[0];
    if (!v45)
    {
      v48 = v46->u32[0];
      v49 = (_OWORD *)(a5 + 24 * v46->u32[1]);
      v50 = *(float32x4_t *)v49;
      v51 = *(float32x4_t *)((char *)v49 + 12);
      if (v48 >= 2)
      {
        v52 = v48 - 1;
        v53 = &v46->i32[2];
        do
        {
          v54 = *v53++;
          v55 = a5 + 24 * v54;
          v50 = vminq_f32(v50, *(float32x4_t *)v55);
          v51 = vmaxq_f32(v51, *(float32x4_t *)(v55 + 12));
          --v52;
        }
        while (v52);
      }
      v50.i32[3] = 0;
      v51.i32[3] = 0;
      *v44 = v50;
      v44[1] = v51;
      goto LABEL_35;
    }
    *v44 = vminq_f32(*v46, *v45);
    v47 = vmaxq_f32(v46[1], v45[1]);
    while (1)
    {
      v44[1] = v47;
LABEL_35:
      v44 = (float32x4_t *)v44[2].i64[0];
      if (!v44)
        break;
      v56 = (float32x4_t *)v44[2].i64[1];
      v57 = (float32x4_t *)v44[3].i64[0];
      v58 = vminq_f32(*v56, *v57);
      v47 = vmaxq_f32(v56[1], v57[1]);
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*v44, v58)), *(int8x8_t *)v47.f32).u32[0] == -1
        && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v47, v44[1])), *(int8x8_t *)v47.f32).u32[0] == -1)
      {
        break;
      }
      *v44 = v58;
    }
  }
  v59 = (float32x4_t *)v10[3].i64[0];
  if (v59)
  {
    v60 = vaddq_f32(i[1], *i);
    v61 = &v10[2].i8[8];
    v62 = (float32x4_t *)v10[2].i64[1];
    v63 = v62[1];
    v64 = v59[1];
    v65 = vsubq_f32(v60, vaddq_f32(v63, *v62));
    v66 = vsubq_f32(v60, vaddq_f32(v64, *v59));
    if (a6)
    {
      v67 = vsubq_f32(v63, *v62);
      v68 = vsubq_f32(v64, *v59);
      v69 = vmulq_laneq_f32(vmulq_lane_f32(v67, *(float32x2_t *)v67.f32, 1), v67, 2);
      v70 = vmulq_laneq_f32(vmulq_lane_f32(v68, *(float32x2_t *)v68.f32, 1), v68, 2);
      v71 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v69, v70))).u8[0];
      _NF = (float)(3.0 * v69.f32[0]) < v70.f32[0] || (float)(3.0 * v70.f32[0]) < v69.f32[0];
      v73 = v71 & 1;
      if (_NF)
        v74 = v73;
      else
        v74 = 0;
      v75 = !_NF;
      v76 = _NF;
    }
    else
    {
      v74 = 0;
      v76 = 0;
      v75 = 1;
    }
    v65.i32[3] = 0;
    v78 = vmulq_f32(v65, v65);
    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
    v66.i32[3] = 0;
    v79 = vmulq_f32(v66, v66);
    v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
    v80 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32)), 0), *(int8x8_t *)v60.f32).u32[0];
    if ((v75 & 1) != 0)
    {
      v77 = 0;
    }
    else
    {
      v81 = *(_QWORD *)(*(_QWORD *)&v61[8 * v74] + 48);
      if (v81)
        v77 = v10;
      else
        v77 = 0;
      if (v81)
        LOBYTE(a6) = 0;
    }
    v10 = *(float32x4_t **)&v61[8 * (v80 == -1)];
    v135 = v10;
    for (j = (float32x4_t *)v10[3].i64[0]; j; j = (float32x4_t *)v10[3].i64[0])
    {
      v83 = &v10[2].i8[8];
      v84 = (float32x4_t *)v10[2].i64[1];
      _X13 = v84[2].i64[1];
      __asm { PRFM            #0, [X13] }
      _X13 = j[2].i64[1];
      __asm { PRFM            #0, [X13] }
      v90 = *v84;
      v89 = v84[1];
      v92 = *j;
      v91 = j[1];
      if ((a6 & 1) != 0)
      {
        v93 = vsubq_f32(v89, v90);
        v94 = vsubq_f32(v91, v92);
        v95 = vmulq_laneq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v93.f32, 1), v93, 2);
        v96 = vmulq_laneq_f32(vmulq_lane_f32(v94, *(float32x2_t *)v94.f32, 1), v94, 2);
        v97 = (float)(3.0 * v95.f32[0]) < v96.f32[0] || (float)(3.0 * v96.f32[0]) < v95.f32[0];
        v98 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v95, v96))).u8[0] & 1;
        v74 = v97 ? v98 : v74;
        if (v97)
          v76 = 1;
      }
      if (!v77)
      {
        if (v76)
        {
          if (*(_QWORD *)(*(_QWORD *)&v83[8 * v74] + 48))
            v77 = v10;
          else
            v77 = 0;
          LOBYTE(a6) = a6 & (*(_QWORD *)(*(_QWORD *)&v83[8 * v74] + 48) == 0);
        }
        else
        {
          v77 = 0;
        }
      }
      v99 = vsubq_f32(v60, vaddq_f32(v89, v90));
      v100 = vsubq_f32(v60, vaddq_f32(v91, v92));
      v99.i32[3] = 0;
      v101 = vmulq_f32(v99, v99);
      v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
      v100.i32[3] = 0;
      v102 = vmulq_f32(v100, v100);
      v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
      v10 = *(float32x4_t **)&v83[8
                                * (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32), vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32)), 0), *(int8x8_t *)v60.f32).u32[0] == -1)];
      v135 = v10;
    }
  }
  else
  {
    v74 = 0;
    v77 = 0;
    v135 = v10;
  }
  v103 = (int *)v10[2].i64[1];
  v104 = *v103;
  v105 = (_DWORD *)i[2].i64[1];
  if ((*v105 + *v103) > 4)
  {
    v112 = *(float32x4_t **)(v9 + 1136);
    if (!v112)
    {
      result = physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(v9 + 576);
      v112 = *(float32x4_t **)(v9 + 1136);
    }
    *(_QWORD *)(v9 + 1136) = v112->i64[0];
    ++*(_DWORD *)(v9 + 1124);
    v112[2].i64[0] = (uint64_t)v10;
    v112[6].i64[0] = (uint64_t)v10;
    v112[2].i64[1] = v10[2].i64[1];
    v112[3].i64[0] = 0;
    *v112 = *v10;
    v112[1] = v10[1];
    v112[6].i64[1] = i[2].i64[1];
    v112[7].i64[0] = 0;
    v112[4] = *i;
    v113 = v112 + 4;
    v133 = v112 + 4;
    v134 = v112;
    v112[5] = i[1];
    v10[2].i64[1] = (uint64_t)v112;
    v10[3].i64[0] = (uint64_t)&v112[4];
    v114 = vminq_f32(*v112, v112[4]);
    *v10 = v114;
    v115 = vmaxq_f32(v112[1], v112[5]);
    v10[1] = v115;
    for (k = (float32x4_t *)v10[2].i64[0]; k; k = (float32x4_t *)k[2].i64[0])
    {
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*k, v114)), *(int8x8_t *)v115.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v117 = (int8x8_t)vmovn_s32(vcgtq_f32(v115, k[1]));
        if ((vuzp1_s8(v117, v117).u32[0] & 0xFFFFFF) == 0)
          break;
      }
      v118 = (float32x4_t *)k[2].i64[1];
      v119 = (float32x4_t *)k[3].i64[0];
      v114 = vminq_f32(*v118, *v119);
      *k = v114;
      v115 = vmaxq_f32(v118[1], v119[1]);
      k[1] = v115;
    }
    v120 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v120)
    {
      v121 = 0;
      while (*(float32x4_t **)(*(_QWORD *)a3 + 8 * v121) != v10)
      {
        if (v120 == ++v121)
          goto LABEL_105;
      }
    }
    else
    {
      LODWORD(v121) = 0;
    }
    if ((_DWORD)v121 != (_DWORD)v120)
    {
      v122 = *(_QWORD *)a3;
      LODWORD(v120) = v120 - 1;
      *(_DWORD *)(a3 + 8) = v120;
      *(_QWORD *)(v122 + 8 * v121) = *(_QWORD *)(v122 + 8 * v120);
    }
LABEL_105:
    v123 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
    if (v123 <= v120)
    {
      result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v134);
      v124 = *(_DWORD *)(a3 + 8);
      v123 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v120) = v112;
      v124 = v120 + 1;
      *(_DWORD *)(a3 + 8) = v120 + 1;
    }
    if (v123 <= v124)
    {
      result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v133);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v124) = v113;
      *(_DWORD *)(a3 + 8) = v124 + 1;
    }
  }
  else
  {
    if (*v105)
    {
      v106 = 0;
      do
      {
        v107 = v105[v106 + 1];
        *v103 = v104 + v106 + 1;
        v103[(v104 + v106++) + 1] = v107;
      }
      while (v106 < *v105);
    }
    v108 = *(unsigned int *)(a3 + 8);
    v109 = *(_QWORD *)a3;
    if ((_DWORD)v108)
    {
      v110 = 0;
      while (*(float32x4_t **)(v109 + 8 * v110) != v10)
      {
        if (v108 == ++v110)
        {
          v111 = *(unsigned int *)(a3 + 8);
          goto LABEL_118;
        }
      }
      v111 = *(unsigned int *)(a3 + 8);
    }
    else
    {
      v111 = 0;
      LODWORD(v110) = 0;
    }
    if ((_DWORD)v110 == (_DWORD)v108)
    {
LABEL_118:
      if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v108)
      {
        result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v135);
      }
      else
      {
        *(_QWORD *)(v109 + 8 * v111) = v10;
        *(_DWORD *)(a3 + 8) = v108 + 1;
      }
    }
    v125 = (_QWORD *)i[2].i64[1];
    if (v125)
    {
      --*(_DWORD *)(v9 + 556);
      *v125 = *(_QWORD *)(v9 + 568);
      *(_QWORD *)(v9 + 568) = v125;
    }
    v126 = v135;
    v127 = v135[1];
    v128 = vminq_f32(*v135, *i);
    *v135 = v128;
    for (m = vmaxq_f32(v127, i[1]); ; m = vmaxq_f32(v131[1], v132[1]))
    {
      v126[1] = m;
      v126 = (float32x4_t *)v126[2].i64[0];
      if (!v126)
        break;
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*v126, v128)), *(int8x8_t *)m.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v130 = (int8x8_t)vmovn_s32(vcgtq_f32(m, v126[1]));
        if ((vuzp1_s8(v130, v130).u32[0] & 0xFFFFFF) == 0)
          break;
      }
      v131 = (float32x4_t *)v126[2].i64[1];
      v132 = (float32x4_t *)v126[3].i64[0];
      v128 = vminq_f32(*v131, *v132);
      *v126 = v128;
    }
  }
  if (v36)
  {
    --*(_DWORD *)(v9 + 1124);
    v36->i64[0] = *(_QWORD *)(v9 + 1136);
    *(_QWORD *)(v9 + 1136) = v36;
  }
  if (v77)
    return physx::Sq::IncrementalAABBTree::rotateTree(v9, v77, a3, v74, a5, 0);
  return result;
}

float32x4_t shiftNode(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t result;
  float32x4_t *v5;
  float32x4_t v6;

  v2 = *a1;
  a1[1] = vsubq_f32(a1[1], *a2);
  result = vsubq_f32(v2, *a2);
  *a1 = result;
  if (a1[3].i64[0])
  {
    v5 = a1;
    do
    {
      shiftNode(v5[2].i64[1], a2);
      v5 = (float32x4_t *)v5[3].i64[0];
      v6 = *v5;
      v5[1] = vsubq_f32(v5[1], *a2);
      result = vsubq_f32(v6, *a2);
      *v5 = result;
    }
    while (v5[3].i64[0]);
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBTree::copyNode(uint64_t result, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;

  v9 = a2;
  v10 = result;
  *(_QWORD *)(a2 + 32) = a5;
  v11 = *a3;
  HIDWORD(v11) = 0;
  *(_OWORD *)a2 = v11;
  v12 = *(__int128 *)((char *)a3 + 12);
  HIDWORD(v12) = 0;
  *(_OWORD *)(a2 + 16) = v12;
  v13 = (_DWORD *)a3 + 6;
  if ((*((_BYTE *)a3 + 24) & 1) != 0)
  {
    v17 = a2;
  }
  else
  {
    v15 = a4 + 28;
    do
    {
      v16 = *(_QWORD *)(v10 + 1136);
      if (!v16)
      {
        physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(v10 + 576);
        v16 = *(_QWORD *)(v10 + 1136);
      }
      *(_QWORD *)(v10 + 1136) = *(_QWORD *)v16;
      ++*(_DWORD *)(v10 + 1124);
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 80) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_QWORD *)(v9 + 40) = v16;
      *(_QWORD *)(v9 + 48) = v16 + 64;
      result = physx::Sq::IncrementalAABBTree::copyNode(v10);
      v17 = *(_QWORD *)(v9 + 48);
      if (a4)
        v18 = (__int128 *)(v15 + 28 * (*v13 >> 1));
      else
        v18 = 0;
      *(_QWORD *)(v17 + 32) = v9;
      v19 = *v18;
      HIDWORD(v19) = 0;
      *(_OWORD *)v17 = v19;
      v20 = *(__int128 *)((char *)v18 + 12);
      HIDWORD(v20) = 0;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = *((_BYTE *)v18 + 24);
      v13 = (_DWORD *)v18 + 6;
      v9 = v17;
    }
    while ((v21 & 1) == 0);
  }
  v22 = *(_QWORD **)(v10 + 568);
  if (!v22)
  {
    result = physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(v10 + 8);
    v22 = *(_QWORD **)(v10 + 568);
  }
  *(_QWORD *)(v10 + 568) = *v22;
  ++*(_DWORD *)(v10 + 556);
  *(_QWORD *)(v17 + 40) = v22;
  v23 = *v13;
  v24 = (v23 >> 1) & 0xF;
  *(_DWORD *)v22 = v24;
  if ((_DWORD)v24)
  {
    v25 = (unsigned int *)(a6 + ((v23 >> 3) & 0x1FFFFFFC));
    v26 = (unsigned int *)v22 + 1;
    do
    {
      v27 = *v25++;
      *v26++ = v27;
      *(_QWORD *)(*a7 + 8 * v27) = v17;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBTree::copy(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 1136);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(a1 + 576);
      v7 = *(_QWORD *)(a1 + 1136);
    }
    *(_QWORD *)(a1 + 1136) = *(_QWORD *)v7;
    ++*(_DWORD *)(a1 + 1124);
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(a1 + 1144) = v7;
    return physx::Sq::IncrementalAABBTree::copyNode(a1, v7, *(__int128 **)(a2 + 72), *(_QWORD *)(a2 + 72), 0, *(_QWORD *)(a2 + 56), a3);
  }
  return result;
}

void physx::Sq::computeStaticWorldAABB(float32x2_t *a1, uint64_t a2, int32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int8x8_t *v10;
  int32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  __int32 v39;

  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = (int8x8_t *)(a2 + 64);
  if ((v8 & 4) != 0)
    v10 = *(int8x8_t **)(a2 + 16);
  if ((a3->i32[2] & 0x40) != 0)
    v11 = (int32x4_t *)(a3[1].i64[0] + 176);
  else
    v11 = a3 + 3;
  v12.i64[0] = v11[1].i64[0];
  v12.i64[1] = v11[1].u32[2];
  *(int8x8_t *)v13.f32 = v10[2];
  v13.i64[1] = v10[3].u32[0];
  v14 = *(int8x16_t *)v10->i8;
  v15 = (float32x2_t)vdupq_laneq_s32(*v11, 3).u64[0];
  v16 = *(float32x4_t *)v11;
  v16.i32[3] = 0;
  v17 = *(float32x4_t *)v10->i8;
  v17.i32[3] = 0;
  v18 = vmulq_f32(v16, v17);
  v19 = (float32x2_t)vpaddq_f32(v18, v18).u64[0];
  v20 = (float32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v18.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v21 = (float32x2_t)vext_s8(*(int8x8_t *)v11->i8, (int8x8_t)v20, 4uLL);
  v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11->i8, (float32x2_t)vext_s8(*v10, *(int8x8_t *)v18.f32, 4uLL)), v21, (float32x2_t)*v10);
  *(int8x8_t *)v18.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v20, (float32x2_t)*v10), *(float32x2_t *)v11->i8, *(float32x2_t *)v18.f32), 4uLL);
  v18.i64[1] = v22.u32[0];
  v23 = vmlaq_laneq_f32(v18, v17, *(float32x4_t *)v11, 3);
  v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
  v24 = vmulq_n_f32(v13, vmla_f32((float32x2_t)0xBF000000BF000000, v15, v15).f32[0]);
  v24.i32[3] = 0;
  *(float32x2_t *)v17.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v11, *(int8x16_t *)v11, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), vpadd_f32(v19, v19));
  v25 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11->i8, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v25, 4uLL)), v21, *(float32x2_t *)v13.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v13.f32), *(float32x2_t *)v11->i8, v25), 4uLL);
  v27.i64[1] = v26.u32[0];
  v28 = vmlaq_laneq_f32(v24, v27, *(float32x4_t *)v11, 3);
  v29 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  v28.i64[1] = v29;
  v34 = vmlaq_laneq_f32(v23, v16, *(float32x4_t *)v10->i8, 3);
  v30 = vmulq_f32(v16, v13);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  v31 = vmlaq_n_f32(v28, v16, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  v32.i64[0] = 0x4000000040000000;
  v32.i64[1] = 0x4000000040000000;
  v33 = vmlaq_f32(v12, v32, v31);
  v39 = v33.i32[2];
  v34.i32[3] = v17.i32[1];
  v38 = v33.i64[0];
  v37 = v34;
  v35 = v9 + 64;
  if ((v8 & 1) != 0)
    v36 = v35;
  else
    v36 = a2 + 104;
  v32.i32[0] = 1065437102;
  v33.i32[0] = 0;
  physx::Gu::computeBounds(a1, v36, (uint64_t)&v37, 0, v33, (int8x16_t)v32, *(double *)v16.i64, *(double *)v14.i64, *(double *)v34.i64, COERCE_DOUBLE((unint64_t)v29), *(double *)v27.i64, (int32x4_t)v31, a5, a6, a7, a8, v37.i8[0]);
}

void physx::Sq::computeDynamicWorldAABB(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int32 v9;
  float32x2_t *v10;
  int v11;
  __n128 *v12;
  unsigned __int8 *v13;
  float32x4_t *v14;
  unsigned __int32 *v15;
  unsigned __int32 *v16;
  unsigned __int32 *v17;
  int8x8_t *v18;
  float32x2_t *v19;
  int32x4_t *v20;
  int32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x8_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x8_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  __int32 v68;

  v9 = a2[1].i32[0];
  v10 = (float32x2_t *)a2[2];
  v11 = *(_DWORD *)(a3 + 284);
  v12 = *(__n128 **)(a3 + 16);
  v13 = &v12[21].n128_u8[12];
  if ((v11 & 0x4000) == 0)
    v13 = (unsigned __int8 *)(a3 + 76);
  if ((~*v13 & 3) != 0)
    goto LABEL_10;
  if ((v11 & 0x8000) != 0)
  {
    a4 = (float32x4_t)v12[17];
    v65 = a4;
    v16 = (unsigned __int32 *)&v12[18];
    v15 = &v12[18].n128_u32[1];
    v17 = &v12[18].n128_u32[2];
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 8) >> 30 == 3
    || (v14 = *(float32x4_t **)(a3 + 208)) == 0
    || v14[1].i8[15] != 1
    || !v14[1].i8[12])
  {
LABEL_10:
    v18 = (int8x8_t *)(a3 + 224);
    v16 = (unsigned __int32 *)(a3 + 240);
    v15 = (unsigned __int32 *)(a3 + 244);
    v17 = (unsigned __int32 *)(a3 + 248);
    goto LABEL_13;
  }
  v15 = &v14[1].u32[1];
  a4 = *v14;
  v65 = *v14;
  v16 = (unsigned __int32 *)&v14[1];
  v17 = &v14[1].u32[2];
LABEL_12:
  v18 = (int8x8_t *)&v65;
LABEL_13:
  v19 = a2 + 8;
  if ((v9 & 4) != 0)
    v19 = v10;
  v20 = (int32x4_t *)&v12[14];
  if ((v11 & 0x400) != 0)
    v21 = v20;
  else
    v21 = (int32x4_t *)(a3 + 80);
  *(float32x2_t *)v22.f32 = v19[2];
  v22.i64[1] = v19[3].u32[0];
  v23.i64[0] = v21[1].i64[0];
  v23.i64[1] = v21[1].u32[2];
  a4.i32[0] = *v16;
  a4.i32[1] = *v15;
  a4.i32[2] = *v17;
  v24 = (float32x2_t)vdupq_laneq_s32(*v21, 3).u64[0];
  v25 = *(float32x4_t *)v21;
  v25.i32[3] = 0;
  v26 = *(float32x4_t *)v19->f32;
  v26.i32[3] = 0;
  v27 = vmulq_f32(v26, v25);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  v28 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v29 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  v30 = (float32x2_t)vext_s8(*(int8x8_t *)v21->i8, (int8x8_t)v29, 4uLL);
  v31 = (int8x8_t)vmls_f32(vmul_f32(*v19, v30), (float32x2_t)vext_s8((int8x8_t)*v19, (int8x8_t)v28, 4uLL), *(float32x2_t *)v21->i8);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v21->i8), *v19, v29), 4uLL);
  v32.i64[1] = v31.u32[0];
  v33 = vmlaq_laneq_f32(v32, v26, *(float32x4_t *)v21, 3);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  v34 = vmlsq_laneq_f32(v33, v25, *(float32x4_t *)v19->f32, 3);
  v35 = *(float32x4_t *)v18->i8;
  v35.i32[3] = 0;
  v36 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  v37 = (float32x2_t)vext_s8(*v18, (int8x8_t)v36, 4uLL);
  v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v18, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL)), v37, *(float32x2_t *)v34.f32);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  v39 = vsubq_f32(v22, v23);
  v40 = vmulq_n_f32(v39, vmla_f32((float32x2_t)0xBF000000BF000000, v24, v24).f32[0]);
  v40.i32[3] = 0;
  *(float32x2_t *)v27.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v19->f32, 3), v24);
  v41 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL)), *(float32x2_t *)v39.f32, v29);
  v42 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v39.f32, v30), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL), *(float32x2_t *)v21->i8);
  *(int8x8_t *)v43.f32 = vext_s8(v42, v41, 4uLL);
  v43.i64[1] = v42.u32[0];
  v44 = vmlaq_laneq_f32(v40, v43, *(float32x4_t *)v21, 3);
  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
  v45 = vmulq_f32(v25, v39);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  v46 = vmlaq_n_f32(v44, v25, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32).f32[0]);
  v45.i64[0] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
  v47 = vadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
  v46.i64[1] = v45.u32[0];
  v48 = vaddq_f32(v46, v46);
  v53 = vdupq_laneq_s32(*(int32x4_t *)v18->i8, 3);
  v49 = vmulq_f32(v35, v34);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  *(int8x8_t *)v50.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32(v36, *(float32x2_t *)v34.f32), (float32x2_t)*v18, *(float32x2_t *)&v34.u32[2]), 4uLL);
  v50.i64[1] = v38.u32[0];
  v51 = vmlaq_laneq_f32(v50, v34, *(float32x4_t *)v18->i8, 3);
  v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
  v52 = vmulq_n_f32(v48, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8).f32[0]);
  v52.i32[3] = 0;
  *(float32x2_t *)v53.i8 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v18->i8, *(int8x16_t *)v18->i8, 8uLL), *(float32x2_t *)v27.f32), vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32));
  *(float32x2_t *)v45.f32 = vadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  v54 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v18, (float32x2_t)vext_s8((int8x8_t)v47, *(int8x8_t *)v45.f32, 4uLL)), v37, v47);
  *(int8x8_t *)v55.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(v36, v47), (float32x2_t)*v18, *(float32x2_t *)v45.f32), 4uLL);
  v55.i64[1] = v54.u32[0];
  v56 = vmlaq_laneq_f32(v52, v55, *(float32x4_t *)v18->i8, 3);
  v57 = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  v56.i64[1] = v57;
  v58 = vmlaq_n_f32(v51, v35, v27.f32[0]);
  v59 = vmulq_f32(v35, v48);
  v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
  v60 = vmlaq_n_f32(v56, v35, vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32).f32[0]);
  v60.i64[1] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u32[0];
  v61.i64[0] = 0x4000000040000000;
  v61.i64[1] = 0x4000000040000000;
  v62 = vmlaq_f32(a4, v61, v60);
  v68 = v62.i32[2];
  v58.i32[3] = v53.i32[1];
  v67 = v62.i64[0];
  v66 = v58;
  v63 = (uint64_t)&v10[8];
  if ((v9 & 1) != 0)
    v64 = v63;
  else
    v64 = (uint64_t)&a2[13];
  v61.i32[0] = 1065437102;
  v62.i32[0] = 0;
  physx::Gu::computeBounds(a1, v64, (uint64_t)&v66, 0, v62, (int8x16_t)v61, COERCE_DOUBLE((unint64_t)v57), *(double *)v55.i64, *(double *)v60.i64, *(double *)v48.i64, *(double *)&v47, v53, a6, a7, a8, a9, v65.i8[0]);
}

physx::Sq::BVHCompoundPruner *physx::Sq::BVHCompoundPruner::BVHCompoundPruner(physx::Sq::BVHCompoundPruner *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED90728;
  *((_QWORD *)this + 69) = 0x4000000000;
  *((_BYTE *)this + 536) = 1;
  *((_QWORD *)this + 68) = (char *)this + 24;
  *((_QWORD *)this + 70) = 256;
  *((_DWORD *)this + 142) = 5120;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 140) = 0x4000000000;
  *((_BYTE *)this + 1104) = 1;
  *((_QWORD *)this + 139) = (char *)this + 592;
  *((_QWORD *)this + 141) = 256;
  *((_DWORD *)this + 284) = 0x8000;
  v2 = (char *)this + 1192;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *((_QWORD *)this + 159) = -3233808384;
  *((_QWORD *)this + 160) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 1232, 0x40u, 0);
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  if (*((_DWORD *)this + 303) <= 0x1Fu)
    physx::Sq::CompoundTreePool::resize((physx::Sq::BVHCompoundPruner *)((char *)this + 1208), 0x20u);
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resizeUninitialized((uint64_t)v2, 0x20u);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resizeUninitialized((uint64_t)this + 1288, 0x20u);
  if ((*((_DWORD *)this + 329) & 0x7FFFFFE0) == 0)
    physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)this + 1304, 0x20u);
  return this;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(result, a2);
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

void physx::Sq::BVHCompoundPruner::~BVHCompoundPruner(physx::Sq::BVHCompoundPruner *this)
{
  int v2;
  int v4;
  int v6;

  *(_QWORD *)this = &off_24ED90728;
  v2 = *((_DWORD *)this + 329);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 163) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 325);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 161) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 154))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Sq::CompoundTreePool::~CompoundTreePool((physx::Sq::BVHCompoundPruner *)((char *)this + 1208));
  v6 = *((_DWORD *)this + 301);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 149))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Sq::IncrementalAABBTree::~IncrementalAABBTree((physx::Sq::BVHCompoundPruner *)((char *)this + 8));
}

{
  uint64_t v2;

  physx::Sq::BVHCompoundPruner::~BVHCompoundPruner(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sq::BVHCompoundPruner *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                + 24)
                                                                    + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Sq::BVHCompoundPruner::addCompound(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float *a5, int a6, __int128 *a7)
{
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float32x4_t *v48;
  int8x8_t v49;
  _DWORD *v50;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  char v58;

  v57 = a4;
  v9 = *(float **)(a3 + 72);
  v10 = v9[1];
  v12 = v9[2];
  v11 = v9[3];
  v14 = v9[4];
  v13 = v9[5];
  v15 = (float)((float)(*v9 + v11) * 0.5) + (float)((float)(*v9 + v11) * 0.5);
  v16 = (float)((float)(v10 + v14) * 0.5) + (float)((float)(v10 + v14) * 0.5);
  v17 = (float)((float)(v12 + v13) * 0.5) + (float)((float)(v12 + v13) * 0.5);
  v19 = a5[2];
  v18 = a5[3];
  v20 = (float)(v18 * v18) + -0.5;
  v21 = *a5;
  v22 = a5[1];
  v23 = (float)((float)(v16 * v22) + (float)(*a5 * v15)) + (float)(v19 * v17);
  v24 = (float)((float)(v18 * (float)((float)(v22 * v17) - (float)(v19 * v16))) + (float)(v15 * v20))
      + (float)(*a5 * v23);
  v25 = (float)((float)(v18 * (float)((float)(v19 * v15) - (float)(*a5 * v17))) + (float)(v16 * v20))
      + (float)(v22 * v23);
  v26 = (float)((float)(v18 * (float)((float)(*a5 * v16) - (float)(v22 * v15))) + (float)(v17 * v20))
      + (float)(v19 * v23);
  v27 = a5[4] + v24;
  v28 = a5[5] + v25;
  v29 = a5[6] + v26;
  v30 = v22 + v22;
  v31 = v19 + v19;
  v32 = v22 * (float)(v22 + v22);
  v33 = v19 * (float)(v19 + v19);
  v34 = (float)(v21 + v21) * v22;
  v35 = (float)(v21 + v21) * v19;
  v36 = v18 * (float)(v21 + v21);
  v37 = v30 * v19;
  v38 = v18 * v30;
  v39 = v18 * v31;
  v40 = 1.0 - (float)(v21 * (float)(v21 + v21));
  v41 = (float)(v11 - *v9) * 0.5;
  v42 = (float)(v14 - v10) * 0.5;
  v43 = (float)(v13 - v12) * 0.5;
  v44 = fabsf(v43 * (float)(v35 + v38))
      + (float)(fabsf(v41 * (float)((float)(1.0 - v32) - v33)) + fabsf(v42 * (float)(v34 - v39)));
  v45 = fabsf(v43 * (float)(v37 - v36)) + (float)(fabsf(v41 * (float)(v34 + v39)) + fabsf(v42 * (float)(v40 - v33)));
  v46 = fabsf(v43 * (float)(v40 - v32)) + (float)(fabsf(v41 * (float)(v35 - v38)) + fabsf(v42 * (float)(v36 + v37)));
  *(float *)&v52 = v27 - v44;
  *((float *)&v52 + 1) = v28 - v45;
  v53 = v29 - v46;
  v54 = v27 + v44;
  v55 = v28 + v45;
  v56 = v29 + v46;
  v47 = physx::Sq::CompoundTreePool::addCompound((physx::Sq::CompoundTreePool *)(a1 + 1208), a2, a3, &v52, (uint64_t)a5, a6, a7);
  *(_DWORD *)(a1 + 1312) = 0;
  v48 = physx::Sq::IncrementalAABBTree::insert(a1 + 8, v47, *(_QWORD *)(a1 + 1216), a1 + 1304);
  physx::Sq::BVHCompoundPruner::updateMapping(a1, v47, (uint64_t)v48);
  v58 = 0;
  v50 = (_DWORD *)physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(a1 + 1232), &v57, &v58, v49);
  if (!v58)
    *v50 = a4;
  v50[1] = v47;
  *(_DWORD *)(*(_QWORD *)(a1 + 1288) + 4 * v47) = a4;
  return 1;
}

uint64_t physx::Sq::BVHCompoundPruner::updateMapping(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;

  v5 = result;
  v6 = (_QWORD *)(result + 1192);
  v7 = *(_DWORD *)(result + 1200);
  if (v7 <= a2)
  {
    v8 = 2 * v7;
    v17 = 0;
    physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resize(result + 1192, 2 * v7, &v17);
    v16 = 0;
    result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v5 + 1288, v8, &v16);
  }
  LODWORD(v9) = *(_DWORD *)(v5 + 1312);
  if ((_DWORD)v9)
  {
    if (a3)
    {
      if (!*(_QWORD *)(a3 + 48))
      {
        v10 = *(_DWORD **)(a3 + 40);
        if (*v10)
        {
          v11 = 0;
          do
          {
            *(_QWORD *)(*v6 + 8 * v10[++v11]) = a3;
            v10 = *(_DWORD **)(a3 + 40);
          }
          while (v11 < *v10);
        }
      }
    }
    v12 = 0;
    if (v9 <= 1)
      v9 = 1;
    else
      v9 = v9;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 1304) + 8 * v12);
      v14 = *(_DWORD **)(v13 + 40);
      if (*v14)
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(*v6 + 8 * v14[++v15]) = v13;
          v14 = *(_DWORD **)(v13 + 40);
        }
        while (v15 < *v14);
      }
      ++v12;
    }
    while (v12 != v9);
  }
  else
  {
    *(_QWORD *)(*v6 + 8 * a2) = a3;
  }
  return result;
}

uint64_t physx::Sq::BVHCompoundPruner::removeCompound(uint64_t this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int8x8_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (*(_DWORD *)(this + 1284))
  {
    v3 = this;
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
    v6 = *(unsigned int *)(*(_QWORD *)(this + 1256) + 4 * ((*(_DWORD *)(this + 1268) - 1) & v5));
    if ((_DWORD)v6 != -1)
    {
      v7 = *(_QWORD *)(this + 1240);
      while (*(_DWORD *)(v7 + 8 * v6) != a2)
      {
        v6 = *(unsigned int *)(*(_QWORD *)(this + 1248) + 4 * v6);
        if ((_DWORD)v6 == -1)
          return this;
      }
      v8 = v7 + 8 * v6;
      v9 = *(unsigned int *)(v8 + 4);
      physx::Sq::CompoundTreePool::removeCompound((physx::Sq::CompoundTreePool *)(this + 1208), *(_DWORD *)(v8 + 4));
      v11 = v10;
      this = physx::Sq::IncrementalAABBTree::remove(v3 + 8, *(float32x4_t **)(*(_QWORD *)(v3 + 1192) + 8 * v9), v9, *(_QWORD *)(v3 + 1216));
      if (this)
      {
        if (!*(_QWORD *)(this + 48))
        {
          v13 = *(_DWORD **)(this + 40);
          if (*v13)
          {
            v14 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v3 + 1192) + 8 * v13[++v14]) = this;
              v13 = *(_DWORD **)(this + 40);
            }
            while (v14 < *v13);
          }
        }
      }
      if (v11 != (_DWORD)v9)
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 1192) + 8 * v9) = *(_QWORD *)(*(_QWORD *)(v3 + 1192) + 8 * v11);
        v15 = v11;
        v16 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v3 + 1192) + 8 * v9) + 40);
        v17 = *v16;
        if ((_DWORD)v17)
        {
          v18 = v16 + 1;
          while (*v18 != v11)
          {
            ++v18;
            if (!--v17)
              goto LABEL_19;
          }
          *v18 = v9;
        }
LABEL_19:
        v19 = *(_QWORD *)(v3 + 1288);
        v20 = (_DWORD *)(v19 + 4 * v11);
        v33 = 0;
        this = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(v3 + 1232), (int *)(v19 + 4 * v15), &v33, v12);
        if (!v33)
          *(_DWORD *)this = *v20;
        *(_DWORD *)(this + 4) = v9;
        *(_DWORD *)(*(_QWORD *)(v3 + 1288) + 4 * v9) = *(_DWORD *)(*(_QWORD *)(v3 + 1288) + 4 * v15);
      }
      if (*(_DWORD *)(v3 + 1284))
      {
        v21 = *(_QWORD *)(v3 + 1256);
        v22 = (_DWORD *)(v21 + 4 * ((*(_DWORD *)(v3 + 1268) - 1) & v5));
        v23 = *v22;
        if ((_DWORD)v23 != -1)
        {
          v24 = *(_QWORD *)(v3 + 1240);
          v25 = *(_QWORD *)(v3 + 1248);
          if (*(_DWORD *)(v24 + 8 * v23) == a2)
          {
LABEL_28:
            *v22 = *(_DWORD *)(v25 + 4 * v23);
            v27 = *(_DWORD *)(v3 + 1284) - 1;
            *(_DWORD *)(v3 + 1284) = v27;
            ++*(_DWORD *)(v3 + 1280);
            if ((_DWORD)v23 != v27)
            {
              *(_QWORD *)(v24 + 8 * v23) = *(_QWORD *)(v24 + 8 * v27);
              *(_DWORD *)(v25 + 4 * v23) = *(_DWORD *)(v25 + 4 * v27);
              v28 = 9
                  * ((*(_DWORD *)(v24 + 8 * v23) + ~(*(_DWORD *)(v24 + 8 * v23) << 15)) ^ ((*(_DWORD *)(v24 + 8 * v23) + ~(*(_DWORD *)(v24 + 8 * v23) << 15)) >> 10));
              v29 = (_DWORD *)(v21
                             + 4
                             * ((((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6))
                                                                                      + ~((v28 ^ (v28 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(v3 + 1268) - 1)));
              v30 = *(unsigned int *)(v3 + 1284);
              v31 = *v29;
              if (v31 != v30)
              {
                do
                {
                  v32 = v31;
                  v31 = *(unsigned int *)(v25 + 4 * v31);
                }
                while (v31 != v30);
                v29 = (_DWORD *)(v25 + 4 * v32);
              }
              *v29 = v23;
            }
            --*(_DWORD *)(v3 + 1276);
          }
          else
          {
            while (1)
            {
              v26 = v23;
              v23 = *(unsigned int *)(v25 + 4 * v23);
              if ((_DWORD)v23 == -1)
                break;
              if (*(_DWORD *)(v24 + 8 * v23) == a2)
              {
                v22 = (_DWORD *)(v25 + 4 * v26);
                goto LABEL_28;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t physx::Sq::BVHCompoundPruner::updateCompound(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  float *v48;
  float32x4_t *v49;

  if (*(_DWORD *)(result + 1284))
  {
    v3 = result;
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = *(unsigned int *)(*(_QWORD *)(result + 1256)
                         + 4
                         * ((*(_DWORD *)(result + 1268) - 1) & (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16))));
    if ((_DWORD)v5 != -1)
    {
      v6 = *(_QWORD *)(result + 1240);
      while (*(_DWORD *)(v6 + 8 * v5) != a2)
      {
        v5 = *(unsigned int *)(*(_QWORD *)(result + 1248) + 4 * v5);
        if ((_DWORD)v5 == -1)
          return result;
      }
      v7 = *(unsigned int *)(v6 + 8 * v5 + 4);
      v8 = *(_QWORD *)(result + 1224) + 56 * v7;
      v9 = *(float **)(*(_QWORD *)v8 + 1144);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)a3;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 48) = *(_DWORD *)(a3 + 24);
      v10 = v9[1];
      v11 = v9[2];
      v12 = v9[4];
      v13 = v9[5];
      v14 = v9[6];
      v15 = (float)((float)(*v9 + v12) * 0.5) + (float)((float)(*v9 + v12) * 0.5);
      v16 = (float)((float)(v10 + v13) * 0.5) + (float)((float)(v10 + v13) * 0.5);
      v17 = (float)((float)(v11 + v14) * 0.5) + (float)((float)(v11 + v14) * 0.5);
      v19 = *(float *)(a3 + 8);
      v18 = *(float *)(a3 + 12);
      v20 = (float)(v18 * v18) + -0.5;
      v21 = *(float *)a3;
      v22 = *(float *)(a3 + 4);
      v23 = (float)((float)(v16 * v22) + (float)(*(float *)a3 * v15)) + (float)(v19 * v17);
      v24 = (float)((float)(v18 * (float)((float)(v22 * v17) - (float)(v19 * v16))) + (float)(v15 * v20))
          + (float)(*(float *)a3 * v23);
      v25 = (float)((float)(v18 * (float)((float)(v19 * v15) - (float)(*(float *)a3 * v17))) + (float)(v16 * v20))
          + (float)(v22 * v23);
      v26 = (float)((float)(v18 * (float)((float)(*(float *)a3 * v16) - (float)(v22 * v15))) + (float)(v17 * v20))
          + (float)(v19 * v23);
      v27 = *(float *)(a3 + 16) + v24;
      v28 = *(float *)(a3 + 20) + v25;
      v29 = *(float *)(a3 + 24) + v26;
      v30 = v22 + v22;
      v31 = v19 + v19;
      v32 = v22 * (float)(v22 + v22);
      v33 = v19 * (float)(v19 + v19);
      v34 = (float)(v21 + v21) * v22;
      v35 = (float)(v21 + v21) * v19;
      v36 = v18 * (float)(v21 + v21);
      v37 = v30 * v19;
      v38 = v18 * v30;
      v39 = v18 * v31;
      v40 = 1.0 - (float)(v21 * (float)(v21 + v21));
      v41 = (float)(v12 - *v9) * 0.5;
      v42 = (float)(v13 - v10) * 0.5;
      v43 = (float)(v14 - v11) * 0.5;
      v44 = fabsf(v43 * (float)(v35 + v38))
          + (float)(fabsf(v41 * (float)((float)(1.0 - v32) - v33)) + fabsf(v42 * (float)(v34 - v39)));
      v45 = fabsf(v43 * (float)(v37 - v36)) + (float)(fabsf(v41 * (float)(v34 + v39)) + fabsf(v42 * (float)(v40 - v33)));
      v46 = fabsf(v43 * (float)(v40 - v32)) + (float)(fabsf(v41 * (float)(v35 - v38)) + fabsf(v42 * (float)(v36 + v37)));
      v47 = *(_QWORD *)(result + 1216);
      v48 = (float *)(v47 + 24 * v7);
      *v48 = v27 - v44;
      v48[1] = v28 - v45;
      v48[2] = v29 - v46;
      v48[3] = v27 + v44;
      v48[4] = v28 + v45;
      v48[5] = v29 + v46;
      *(_DWORD *)(result + 1312) = 0;
      v49 = physx::Sq::IncrementalAABBTree::update(result + 8, *(float32x4_t **)(*(_QWORD *)(result + 1192) + 8 * v7), v7, v47, result + 1304);
      return physx::Sq::BVHCompoundPruner::updateMapping(v3, v7, (uint64_t)v49);
    }
  }
  return result;
}

uint64_t physx::Sq::BVHCompoundPruner::raycast(_QWORD *a1, float32x2_t *a2, float32x2_t *a3, float *a4, uint64_t a5, __int16 *a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v9;
  uint64_t v10;
  int v12;
  __int16 v13;
  float v14;
  float32x2_t v15;
  double v16;
  double v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float32x4_t *v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unsigned __int32 v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unsigned __int32 v59;
  float32x4_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float v79;
  float32x4_t v80;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  _QWORD v92[5];
  __int16 v93;
  uint64_t v94;
  int v95;
  float v96;
  _QWORD v97[256];
  char v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v9 = a1[144];
  v10 = 1;
  if (!v9)
    return v10;
  v12 = 0;
  v94 = 0;
  v95 = 0;
  v13 = *a6;
  v92[2] = a3;
  v92[3] = &v94;
  v92[0] = &off_24ED90920;
  v92[1] = a2;
  v92[4] = a5;
  v93 = v13;
  v14 = a2[1].f32[0] + a2[1].f32[0];
  v15 = vadd_f32(*a2, *a2);
  *(float32x2_t *)a9.f32 = vadd_f32(*a3, *a3);
  v16 = COERCE_DOUBLE(vadd_f32(v15, vmul_n_f32(*(float32x2_t *)a9.f32, *a4)));
  v17 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)a9.f32), (int8x8_t)v15, vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a9.f32), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v18.f32 = v15;
  v18.i64[1] = LODWORD(v14);
  v19 = a3[1].f32[0] + a3[1].f32[0];
  v22 = a9;
  v22.f32[2] = v19;
  v20 = a1[153];
  v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v22.i32[3] = 0;
  *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)a9.f32, v21, 4uLL);
  v23.i64[1] = a9.u32[0];
  v24 = vabsq_f32(v22);
  *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), 4uLL);
  v25.i64[1] = v24.u32[0];
  v26 = v14 + (float)(v19 * *a4);
  v27 = -3.4028e38;
  if (v19 >= 0.0)
    v27 = 3.4028e38;
  if (v19 != 0.0)
    v14 = v27;
  if (*a4 >= 3.4028e38)
  {
    *(double *)v28.i64 = v17;
  }
  else
  {
    v14 = v26;
    *(double *)v28.i64 = v16;
  }
  v28.i64[1] = LODWORD(v14);
  v29 = a1[152];
  v30 = vminq_f32(v18, v28);
  v31 = vmaxq_f32(v18, v28);
  v100 = 0x10000000100;
  v98 = 1;
  v99 = v97;
  v97[0] = v9;
  v32 = vnegq_f32(v23);
  v86 = v22;
  v87 = v18;
  v84 = v25;
  v85 = v24;
  v83 = v32;
  while (1)
  {
    v33 = (float32x4_t *)v99[v12];
    v34 = v33[1];
    v35 = (int8x16_t)vsubq_f32(v34, *v33);
    v36 = (float32x4_t)v35;
    v36.i32[3] = 0;
    v37 = vaddq_f32(v34, *v33);
    v37.i32[3] = 0;
    v38 = vaddq_f32(v37, v36);
    v39 = vsubq_f32(v37, v36);
    v40 = vsubq_f32(v18, v37);
    *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), 4uLL);
    v41.i64[1] = v40.u32[0];
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
    v42.i64[1] = v35.u32[0];
    *(int16x4_t *)v40.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v38, v30), (int8x16_t)vcgeq_f32(v31, v39)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v24, v42), v25, v36), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v41), v40, v32)))));
    if (vuzp1_s8(*(int8x8_t *)v40.f32, *(int8x8_t *)v40.f32).u32[0] == -1)
      break;
LABEL_39:
    if (!v12--)
    {
      v10 = 1;
      goto LABEL_42;
    }
  }
  v43 = *a4;
  v96 = *a4;
  if (v33[3].i64[0])
  {
    v25 = v84;
    v24 = v85;
    v32 = v83;
    v88 = v31;
    v90 = v30;
    do
    {
      v44 = (float32x4_t *)v33[2].i64[1];
      v45 = v44[1];
      v46 = (int8x16_t)vsubq_f32(v45, *v44);
      v47 = (float32x4_t)v46;
      v47.i32[3] = 0;
      v48 = vaddq_f32(v45, *v44);
      v48.i32[3] = 0;
      v49 = vsubq_f32(v18, v48);
      *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), 4uLL);
      v50.i64[1] = v49.u32[0];
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), 4uLL);
      v51.i64[1] = v46.u32[0];
      v52 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v48, v47), v30), (int8x16_t)vcgeq_f32(v31, vsubq_f32(v48, v47))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v24, v51), v25, v47), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v50), v49, v32))))), *(int8x8_t *)v48.f32).u32[0];
      v53 = v44[4];
      v54 = v44[5];
      v55 = (int8x16_t)vsubq_f32(v54, v53);
      v56 = (float32x4_t)v55;
      v56.i32[3] = 0;
      v57 = vaddq_f32(v54, v53);
      v57.i32[3] = 0;
      v58 = vsubq_f32(v18, v57);
      *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
      v50.i64[1] = v58.u32[0];
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v55.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), 4uLL);
      v51.i64[1] = v55.u32[0];
      v59 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v57, v56), v30), (int8x16_t)vcgeq_f32(v31, vsubq_f32(v57, v56))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v24, v51), v25, v56), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v50), v58, v32))))), *(int8x8_t *)v48.f32).u32[0];
      if (v52 == -1 && v59 == -1)
      {
        v62 = vmulq_f32(v22, vsubq_f32(v57, v48));
        v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
        v62.f32[0] = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32).f32[0];
        v99[v12] = &v44[4 * (unint64_t)(v62.f32[0] > 0.0)];
        v33 = &v44[4 * (unint64_t)(v62.f32[0] <= 0.0)];
        if (v12 + 1 == (HIDWORD(v100) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v97, 2 * (v12 + 1));
          v31 = v88;
          v30 = v90;
          v32 = v83;
          v25 = v84;
          v24 = v85;
          v22 = v86;
          v18 = v87;
        }
        ++v12;
      }
      else
      {
        if (v52 == -1)
          v33 = (float32x4_t *)v33[2].i64[1];
        else
          v33 = v44 + 4;
        if (v52 != -1 && v59 != -1)
          goto LABEL_39;
      }
    }
    while (v33[3].i64[0]);
    v43 = *a4;
  }
  v63 = (unsigned int *)v33[2].i64[1];
  v64 = *v63;
  if (!*v63)
  {
LABEL_38:
    v25 = v84;
    v24 = v85;
    v32 = v83;
    goto LABEL_39;
  }
  v65 = v63 + 1;
  v66 = *v63;
  while (1)
  {
    v68 = *v65++;
    v67 = v68;
    if (v64 < 2)
      break;
    v69 = v29 + 24 * v67;
    v70 = *(float32x4_t *)(v69 + 12);
    v71 = vaddq_f32(*(float32x4_t *)v69, v70);
    v72 = (int8x16_t)vsubq_f32(v70, *(float32x4_t *)v69);
    v71.i32[3] = 0;
    v73 = (float32x4_t)v72;
    v73.i32[3] = 0;
    v74 = vaddq_f32(v71, v73);
    v75 = vsubq_f32(v71, v73);
    v76 = vsubq_f32(v18, v71);
    *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v76.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), 4uLL);
    v77.i64[1] = v76.u32[0];
    *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v72.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), 4uLL);
    v78.i64[1] = v72.u32[0];
    *(int16x4_t *)v72.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v74, v30), (int8x16_t)vcgeq_f32(v31, v75)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v85, v78), v84, v73), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v77), v76, v83)))));
    if (vuzp1_s8(*(int8x8_t *)v72.i8, *(int8x8_t *)v72.i8).u32[0] == -1)
      break;
LABEL_37:
    if (!--v66)
      goto LABEL_38;
  }
  v89 = v31;
  v91 = v30;
  if ((*(unsigned int (**)(_QWORD *, float *, uint64_t))(v92[0] + 16))(v92, &v96, v20 + 56 * v67))
  {
    v79 = v96;
    v22 = v86;
    v18 = v87;
    v31 = v89;
    v30 = v91;
    if (v96 < v43)
    {
      *a4 = v96;
      v80 = vmlaq_n_f32(v87, v86, v79);
      v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
      v30 = vminq_f32(v87, v80);
      v31 = vmaxq_f32(v87, v80);
    }
    goto LABEL_37;
  }
  v10 = 0;
LABEL_42:
  if ((v100 & 0x8000000000000000) == 0 && (v100 & 0x7FFFFFFF00000000) != 0 && v99 != v97 && v99)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v10;
}

uint64_t physx::Sq::BVHCompoundPruner::overlap(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 *a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, float32x4_t a11)
{
  uint64_t v11;
  uint64_t v13;
  float32x4_t v17;
  float32x2_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float32x4_t v23;
  unsigned int v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x8_t v34;
  __int8 *v35;
  float32x4_t v36;
  unsigned int v37;
  __int32 *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  float v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  double v55;
  double v56;
  float32x4_t v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  int8x16_t v62;
  float v63;
  float v64;
  BOOL v65;
  float v66;
  float32x4_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  float32x4_t v72;
  unsigned int v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  double v87;
  float32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  int8x8_t v93;
  __int8 *v94;
  float32x4_t v95;
  unsigned int v96;
  __int32 *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int8x16_t v113;
  int v114;
  __int16 v115;
  float v116;
  float v117;
  double v118;
  double v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  float32x4_t v127;
  unsigned int v128;
  float32x4_t *v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  double v134;
  float32x4_t v135;
  int8x8_t v136;
  int8x8_t v137;
  __int8 *v138;
  float32x4_t v139;
  unsigned int v140;
  __int32 *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int v149;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  void (**v162)(MainTreeOBBOverlapCompoundPrunerCallback *__hidden);
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  float v166;
  float32x4_t v167[128];
  char v168;
  float32x4_t *v169;
  uint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v11 = a1[144];
  if (!v11)
    return 1;
  v13 = 1;
  switch(*(_WORD *)(a2 + 98))
  {
    case 0:
      v17 = *(float32x4_t *)(a2 + 100);
      v17.i64[1] = *(unsigned int *)(a2 + 108);
      v159 = v17;
      *(float *)&a5 = *(float *)(a2 + 112) * *(float *)(a2 + 112);
      v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
      v19 = *a4;
      v163 = a2;
      v164 = a3;
      v165 = v19;
      v162 = &off_24ED908E0;
      v20 = a1[153];
      v21 = a1[152];
      v170 = 0x10000000100;
      v22 = 1;
      v168 = 1;
      v169 = v167;
      v167[0].i64[0] = v11;
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      while (1)
      {
        v24 = 2 * v22--;
        v25 = (float32x4_t *)v169->i64[v22];
        v26 = v25[1];
        v27 = vmulq_f32(vsubq_f32(v26, *v25), v23);
        v27.i32[3] = 0;
        v28 = vaddq_f32(v26, *v25);
        while (1)
        {
          v29 = vmulq_f32(v28, v23);
          v29.i32[3] = 0;
          v30 = vsubq_f32(v159, v29);
          v31 = vnegq_f32(v27);
          v31.i32[3] = 0;
          v32 = vsubq_f32(v30, vmaxq_f32(vminq_f32(v30, v27), v31));
          v33 = vmulq_f32(v32, v32);
          v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
          *(int16x4_t *)v33.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v18, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)), 0);
          v34 = vuzp1_s8(*(int8x8_t *)v33.f32, *(int8x8_t *)v33.f32);
          if (v34.i32[0] != -1)
            goto LABEL_16;
          v35 = &v25[2].i8[8];
          v25 = (float32x4_t *)v25[2].i64[1];
          if (!*((_QWORD *)v35 + 1))
            break;
          v169->i64[v22] = (uint64_t)&v25[4];
          if (v22 + 1 == (HIDWORD(v170) & 0x7FFFFFFF))
          {
            physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v167, v24);
            v23.i64[0] = 0x3F0000003F000000;
            v23.i64[1] = 0x3F0000003F000000;
          }
          v36 = v25[1];
          v27 = vmulq_f32(vsubq_f32(v36, *v25), v23);
          v27.i32[3] = 0;
          v28 = vaddq_f32(v36, *v25);
          v24 += 2;
          ++v22;
        }
        v37 = v25->i32[0];
        if (v25->i32[0])
        {
          v38 = &v25->i32[1];
          v39 = v37;
          do
          {
            v41 = *v38++;
            v40 = v41;
            if (v37 < 2)
              goto LABEL_70;
            v42 = v21 + 24 * v40;
            v43 = *(float32x4_t *)(v42 + 12);
            v44 = vmulq_f32(vsubq_f32(v43, *(float32x4_t *)v42), v23);
            v45 = vmulq_f32(vaddq_f32(*(float32x4_t *)v42, v43), v23);
            v45.i32[3] = 0;
            v44.i32[3] = 0;
            v46 = vsubq_f32(v159, v45);
            v47 = vnegq_f32(v44);
            v47.i32[3] = 0;
            v48 = vsubq_f32(v46, vmaxq_f32(vminq_f32(v46, v44), v47));
            v49 = vmulq_f32(v48, v48);
            v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
            *(int16x4_t *)v49.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v18, vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32)), 0);
            v34 = vuzp1_s8(*(int8x8_t *)v49.f32, *(int8x8_t *)v49.f32);
            if (v34.i32[0] == -1)
            {
LABEL_70:
              v166 = 0.0;
              v50 = ((uint64_t (*)(MainTreeSphereOverlapCompoundPrunerCallback *, float *, const physx::Sq::CompoundTree *, double))v162[2])((MainTreeSphereOverlapCompoundPrunerCallback *)&v162, &v166, (const physx::Sq::CompoundTree *)(v20 + 56 * v40), *(double *)&v34);
              v23.i64[0] = 0x3F0000003F000000;
              v23.i64[1] = 0x3F0000003F000000;
              if (!v50)
                goto LABEL_61;
            }
            --v39;
          }
          while (v39);
        }
LABEL_16:
        if (!v22)
          goto LABEL_60;
      }
    case 2:
      v51 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
      v52 = *(float *)(a2 + 120);
      v53 = *(float32x2_t *)(a2 + 112);
      v54 = *(float32x2_t *)(a2 + 12);
      v55 = COERCE_DOUBLE(vadd_f32(v53, vmul_n_f32(v54, v51)));
      v56 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v54), (int8x8_t)v53, vbsl_s8((int8x8_t)vcgez_f32(v54), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
      *(float32x2_t *)v57.f32 = v53;
      v57.i64[1] = LODWORD(v52);
      v58 = *(float *)(a2 + 20);
      *(float32x2_t *)v59.f32 = v54;
      v59.i64[1] = LODWORD(v58);
      *(float *)&a7 = *(float *)(a2 + 124) * 1.01;
      *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)v54, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), 4uLL);
      v60.i64[1] = v54.u32[0];
      v61 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v61.i32[3] = 0;
      v156 = (float32x4_t)v61;
      v157 = v59;
      v62 = (int8x16_t)vabsq_f32(v59);
      *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), 4uLL);
      v59.i64[1] = v62.u32[0];
      v154 = v59;
      v155 = (float32x4_t)v62;
      v63 = v52 + (float)(v51 * v58);
      v64 = -3.4028e38;
      if (v58 >= 0.0)
        v64 = 3.4028e38;
      if (v58 != 0.0)
        v52 = v64;
      v65 = v51 < 3.4028e38;
      if (v51 >= 3.4028e38)
        v66 = v52;
      else
        v66 = v63;
      if (v65)
        *(double *)v67.i64 = v55;
      else
        *(double *)v67.i64 = v56;
      v67.i64[1] = LODWORD(v66);
      v68 = *a4;
      v163 = a2;
      v164 = a3;
      v165 = v68;
      v160 = v57;
      v152 = vmaxq_f32(v57, v67);
      v153 = vminq_f32(v57, v67);
      v162 = &off_24ED908A0;
      v69 = a1[153];
      v70 = a1[152];
      v170 = 0x10000000100;
      v71 = 1;
      v168 = 1;
      v169 = v167;
      v167[0].i64[0] = v11;
      v151 = vnegq_f32(v60);
      v72.i64[0] = 0x3F0000003F000000;
      v72.i64[1] = 0x3F0000003F000000;
      while (2)
      {
        v73 = 2 * v71--;
        v74 = (float32x4_t *)v169->i64[v71];
        v75 = v74[1];
        v76 = vmulq_f32(vsubq_f32(v75, *v74), v72);
        v76.i32[3] = 0;
        v77 = vaddq_f32(v75, *v74);
        while (2)
        {
          v78 = vmulq_f32(v77, v72);
          v78.i32[3] = 0;
          v79 = vaddq_f32(v156, v76);
          v80 = vaddq_f32(v78, v79);
          v81 = vsubq_f32(v78, v79);
          v82 = vsubq_f32(v160, v78);
          *(int8x8_t *)v83.f32 = vext_s8(*(int8x8_t *)v82.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL), 4uLL);
          v83.i64[1] = v82.u32[0];
          *(int8x8_t *)v84.f32 = vext_s8(*(int8x8_t *)v79.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), 4uLL);
          v84.i64[1] = v79.u32[0];
          v85 = vmlaq_f32(vmulq_f32(v157, v83), v82, v151);
          v86 = vmulq_f32(v155, v84);
          v87 = *(double *)v154.i64;
          v88 = vmlaq_f32(v86, v154, v79);
          v89 = (int8x16_t)vcgeq_f32(v80, v153);
          v90 = (int8x16_t)vcgeq_f32(v152, v81);
          v91 = vabsq_f32(v85);
          v92 = (int8x16_t)vcgeq_f32(v88, v91);
          *(int16x4_t *)v89.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8(v90, v89), v92));
          v93 = vuzp1_s8(*(int8x8_t *)v89.i8, *(int8x8_t *)v89.i8);
          if (v93.i32[0] == -1)
          {
            v94 = &v74[2].i8[8];
            v74 = (float32x4_t *)v74[2].i64[1];
            if (*((_QWORD *)v94 + 1))
            {
              v169->i64[v71] = (uint64_t)&v74[4];
              if (v71 + 1 == (HIDWORD(v170) & 0x7FFFFFFF))
              {
                physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v167, v73);
                v72.i64[0] = 0x3F0000003F000000;
                v72.i64[1] = 0x3F0000003F000000;
              }
              v95 = v74[1];
              v76 = vmulq_f32(vsubq_f32(v95, *v74), v72);
              v76.i32[3] = 0;
              v77 = vaddq_f32(v95, *v74);
              v73 += 2;
              ++v71;
              continue;
            }
            v96 = v74->i32[0];
            if (v74->i32[0])
            {
              v97 = &v74->i32[1];
              v98 = v96;
              while (1)
              {
                v100 = *v97++;
                v99 = v100;
                if (v96 < 2)
                  goto LABEL_71;
                v101 = v70 + 24 * v99;
                v102 = *(float32x4_t *)(v101 + 12);
                v103 = vmulq_f32(vsubq_f32(v102, *(float32x4_t *)v101), v72);
                v104 = vmulq_f32(vaddq_f32(*(float32x4_t *)v101, v102), v72);
                v104.i32[3] = 0;
                v103.i32[3] = 0;
                v105 = vaddq_f32(v156, v103);
                v106 = vaddq_f32(v104, v105);
                v107 = vsubq_f32(v104, v105);
                v108 = vsubq_f32(v160, v104);
                *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v108.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL), 4uLL);
                v109.i64[1] = v108.u32[0];
                *(int8x8_t *)v110.f32 = vext_s8(*(int8x8_t *)v105.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), 4uLL);
                v110.i64[1] = v105.u32[0];
                v85 = vmlaq_f32(vmulq_f32(v157, v109), v108, v151);
                v111 = vmulq_f32(v155, v110);
                v87 = *(double *)v154.i64;
                v112 = vmlaq_f32(v111, v154, v105);
                v113 = (int8x16_t)vcgeq_f32(v106, v153);
                v90 = (int8x16_t)vcgeq_f32(v152, v107);
                v91 = vabsq_f32(v85);
                v92 = (int8x16_t)vcgeq_f32(v112, v91);
                *(int16x4_t *)v113.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8(v90, v113), v92));
                v93 = vuzp1_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v113.i8);
                if (v93.i32[0] == -1)
                {
LABEL_71:
                  v166 = 0.0;
                  v114 = ((uint64_t (*)(MainTreeCapsuleOverlapCompoundPrunerCallback *, float *, const physx::Sq::CompoundTree *, double, double, double, double, double, double))v162[2])((MainTreeCapsuleOverlapCompoundPrunerCallback *)&v162, &v166, (const physx::Sq::CompoundTree *)(v69 + 56 * v99), *(double *)&v93, *(double *)v92.i64, *(double *)v90.i64, *(double *)v91.i64, *(double *)v85.i64, v87);
                  v72.i64[0] = 0x3F0000003F000000;
                  v72.i64[1] = 0x3F0000003F000000;
                  if (!v114)
                    goto LABEL_61;
                }
                if (!--v98)
                  goto LABEL_42;
              }
            }
          }
          break;
        }
LABEL_42:
        if (v71)
          continue;
        goto LABEL_60;
      }
    case 3:
      if (*(_WORD *)(a2 + 96))
        goto LABEL_45;
      v116 = *(float *)(a2 + 80);
      v117 = *(float *)(a2 + 92);
      v118 = *(double *)(a2 + 72);
      v119 = *(double *)(a2 + 84);
      *(float32x2_t *)v121.f32 = vmul_f32(vadd_f32(*(float32x2_t *)&v118, *(float32x2_t *)&v119), (float32x2_t)0x3F0000003F000000);
      v121.f32[2] = (float)(v116 + v117) * 0.5;
      v120 = v117 - v116;
      v121.i32[3] = 0;
      *(float32x2_t *)v122.f32 = vmul_f32(vsub_f32(*(float32x2_t *)&v119, *(float32x2_t *)&v118), (float32x2_t)0x3F0000003F000000);
      v122.i64[1] = COERCE_UNSIGNED_INT(v120 * 0.5);
      v158 = v122;
      v161 = v121;
      v123 = *a4;
      v163 = a2;
      v164 = a3;
      v165 = v123;
      v162 = &off_24ED90860;
      v124 = a1[153];
      v125 = a1[152];
      v170 = 0x10000000100;
      v126 = 1;
      v168 = 1;
      v169 = v167;
      v167[0].i64[0] = v11;
      v127.i64[0] = 0x3F0000003F000000;
      v127.i64[1] = 0x3F0000003F000000;
      break;
    case 4:
LABEL_45:
      physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)v167, a2 + 48, (__int32 *)(a2 + 12), a2, a5, a6, a7, a8, a9, a10, a11);
      v115 = *a4;
      v163 = a2;
      v164 = a3;
      v165 = v115;
      v162 = &off_24ED90810;
      return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::CompoundTree,MainTreeOBBOverlapCompoundPrunerCallback>::operator()(a1[153], a1[152], a1[144], v167, (uint64_t)&v162);
    default:
      return v13;
  }
  while (2)
  {
    v128 = 2 * v126--;
    v129 = (float32x4_t *)v169->i64[v126];
    v130 = v129[1];
    v131 = vmulq_f32(vsubq_f32(v130, *v129), v127);
    v131.i32[3] = 0;
    v132 = vaddq_f32(v130, *v129);
    while (1)
    {
      v133 = vmulq_f32(v132, v127);
      v133.i32[3] = 0;
      v134 = *(double *)v161.i64;
      v135 = vabdq_f32(v133, v161);
      v136 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v158, v131), v135));
      v137 = vuzp1_s8(v136, v136);
      if ((~v137.i32[0] & 0xFFFFFF) != 0)
        break;
      v138 = &v129[2].i8[8];
      v129 = (float32x4_t *)v129[2].i64[1];
      if (!*((_QWORD *)v138 + 1))
      {
        v140 = v129->i32[0];
        if (v129->i32[0])
        {
          v141 = &v129->i32[1];
          v142 = v140;
          while (1)
          {
            v144 = *v141++;
            v143 = v144;
            if (v140 < 2)
              goto LABEL_72;
            v145 = v125 + 24 * v143;
            v146 = *(float32x4_t *)(v145 + 12);
            v147 = vmulq_f32(vsubq_f32(v146, *(float32x4_t *)v145), v127);
            v148 = vmulq_f32(vaddq_f32(*(float32x4_t *)v145, v146), v127);
            v148.i32[3] = 0;
            v147.i32[3] = 0;
            v134 = *(double *)v161.i64;
            v135 = vabdq_f32(v148, v161);
            *(int16x4_t *)v147.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(v158, v147), v135));
            v137 = vuzp1_s8(*(int8x8_t *)v147.f32, *(int8x8_t *)v147.f32);
            if ((~v137.i32[0] & 0xFFFFFF) == 0)
            {
LABEL_72:
              v166 = 0.0;
              v149 = ((uint64_t (*)(MainTreeAABBOverlapCompoundPrunerCallback *, float *, const physx::Sq::CompoundTree *, double, double, double, float32x4_t, double, double, float32x4_t))v162[2])((MainTreeAABBOverlapCompoundPrunerCallback *)&v162, &v166, (const physx::Sq::CompoundTree *)(v124 + 56 * v143), *(double *)&v137, *(double *)v135.i64, v134, v127, v118, v119, v121);
              v127.i64[0] = 0x3F0000003F000000;
              v127.i64[1] = 0x3F0000003F000000;
              if (!v149)
                break;
            }
            if (!--v142)
              goto LABEL_59;
          }
LABEL_61:
          v13 = 0;
          goto LABEL_62;
        }
        break;
      }
      v169->i64[v126] = (uint64_t)&v129[4];
      if (v126 + 1 == (HIDWORD(v170) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v167, v128);
        v127.i64[0] = 0x3F0000003F000000;
        v127.i64[1] = 0x3F0000003F000000;
      }
      v139 = v129[1];
      v131 = vmulq_f32(vsubq_f32(v139, *v129), v127);
      v131.i32[3] = 0;
      v132 = vaddq_f32(v139, *v129);
      v128 += 2;
      ++v126;
    }
LABEL_59:
    if (v126)
      continue;
    break;
  }
LABEL_60:
  v13 = 1;
LABEL_62:
  if ((v170 & 0x8000000000000000) == 0 && (v170 & 0x7FFFFFFF00000000) != 0 && v169 != v167 && v169)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v13;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::CompoundTree,MainTreeOBBOverlapCompoundPrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  int v9;
  int v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unsigned int v16;
  __int8 *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int v22;
  __int32 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  int v35;
  _QWORD v36[256];
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v39 = 0x10000000100;
  v9 = 1;
  v37 = 1;
  v38 = v36;
  v36[0] = a3;
  while (1)
  {
    v10 = v9 - 1;
    v11 = (float32x4_t *)v38[v9 - 1];
    v12 = v11[1];
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = vmulq_f32(vsubq_f32(v12, *v11), v13);
    v14.i32[3] = 0;
    v15 = vmulq_f32(vaddq_f32(v12, *v11), v13);
    v15.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v15, v14))
    {
      v16 = 2 * v9;
      while (1)
      {
        v10 = v9 - 1;
        v17 = &v11[2].i8[8];
        v11 = (float32x4_t *)v11[2].i64[1];
        if (!*((_QWORD *)v17 + 1))
          break;
        v38[v10] = v11 + 4;
        if (v9 == (HIDWORD(v39) & 0x7FFFFFFF))
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v36, v16);
        v18 = v11[1];
        v19.i64[0] = 0x3F0000003F000000;
        v19.i64[1] = 0x3F0000003F000000;
        v20 = vmulq_f32(vsubq_f32(v18, *v11), v19);
        v20.i32[3] = 0;
        v21 = vmulq_f32(vaddq_f32(v18, *v11), v19);
        v21.i32[3] = 0;
        ++v9;
        v16 += 2;
        if (!physx::Gu::OBBAABBTests<true>::operator()(a4, v21, v20))
        {
          v10 = v9 - 1;
          goto LABEL_15;
        }
      }
      v22 = v11->i32[0];
      if (v11->i32[0])
        break;
    }
LABEL_15:
    v9 = v10;
    if (!v10)
    {
      v33 = 1;
      goto LABEL_18;
    }
  }
  v23 = &v11->i32[1];
  v24 = v22;
  while (1)
  {
    v26 = *v23++;
    v25 = v26;
    if (v22 < 2)
      goto LABEL_26;
    v27 = a2 + 24 * v25;
    v28 = *(float32x4_t *)(v27 + 12);
    v29 = vaddq_f32(*(float32x4_t *)v27, v28);
    v30.i64[0] = 0x3F0000003F000000;
    v30.i64[1] = 0x3F0000003F000000;
    v31 = vmulq_f32(vsubq_f32(v28, *(float32x4_t *)v27), v30);
    v32 = vmulq_f32(v29, v30);
    v32.i32[3] = 0;
    v31.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v32, v31))
    {
LABEL_26:
      v35 = 0;
      if (!(*(unsigned int (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a5 + 16))(a5, &v35, a1 + 56 * v25))
        break;
    }
    if (!--v24)
      goto LABEL_15;
  }
  v33 = 0;
LABEL_18:
  if ((v39 & 0x8000000000000000) == 0 && (v39 & 0x7FFFFFFF00000000) != 0 && v38 != v36 && v38)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v33;
}

uint64_t physx::Sq::BVHCompoundPruner::sweep(_QWORD *a1, uint64_t a2, float32x2_t *a3, float *a4, uint64_t a5, __int16 *a6, double a7, double a8, double a9, double a10, float32x4_t a11)
{
  uint64_t v11;
  uint64_t v12;
  int v14;
  float v15;
  float v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  double v26;
  double v27;
  float32x4_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unsigned __int32 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  unsigned __int32 v67;
  float32x4_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float v87;
  float32x4_t v88;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  _QWORD v101[5];
  __int16 v102;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  float v107;
  _QWORD v108[256];
  char v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v11 = a1[144];
  v12 = 1;
  if (!v11)
    return v12;
  v14 = 0;
  v101[0] = &off_24ED90958;
  v101[1] = &v103;
  v101[2] = a3;
  v101[3] = &v105;
  v15 = *(float *)(a2 + 92);
  v16 = *(float *)(a2 + 80);
  v106 = (float)(v15 - v16) * 0.5;
  v104 = (float)(v15 + v16) * 0.5;
  v17 = *a6;
  v101[4] = a5;
  v102 = v17;
  v18 = a1[153];
  v19 = a1[152];
  v20 = v104 + v104;
  v21 = *(float32x2_t *)(a2 + 84);
  v22 = *(float32x2_t *)(a2 + 72);
  v105 = vmul_f32(vsub_f32(v21, v22), (float32x2_t)0x3F0000003F000000);
  v23 = vmul_f32(vadd_f32(v21, v22), (float32x2_t)0x3F0000003F000000);
  v24 = vadd_f32(v23, v23);
  *(float32x2_t *)a11.f32 = vadd_f32(*a3, *a3);
  v25 = a3[1].f32[0] + a3[1].f32[0];
  *(float32x2_t *)v32.f32 = vadd_f32(v105, v105);
  v26 = COERCE_DOUBLE(vadd_f32(v24, vmul_n_f32(*(float32x2_t *)a11.f32, *a4)));
  v27 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)a11.f32), (int8x8_t)v24, vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a11.f32), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v28.f32 = v24;
  v28.f32[2] = v104 + v104;
  v28.i32[3] = 0;
  v30 = a11;
  v30.f32[2] = v25;
  v29 = (int8x8_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  v30.i32[3] = 0;
  *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)a11.f32, v29, 4uLL);
  v31.i64[1] = a11.u32[0];
  v32.f32[2] = v106 + v106;
  v32.i32[3] = 0;
  v33 = vabsq_f32(v30);
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
  v34.i64[1] = v33.u32[0];
  v35 = -3.4028e38;
  if (v25 >= 0.0)
    v35 = 3.4028e38;
  if (v25 != 0.0)
    v20 = v35;
  if (*a4 >= 3.4028e38)
  {
    *(double *)v36.i64 = v27;
  }
  else
  {
    v20 = (float)(v104 + v104) + (float)(v25 * *a4);
    *(double *)v36.i64 = v26;
  }
  v36.i64[1] = LODWORD(v20);
  v103 = v23;
  v37 = vminq_f32(v28, v36);
  v38 = vmaxq_f32(v28, v36);
  v111 = 0x10000000100;
  v109 = 1;
  v110 = v108;
  v108[0] = v11;
  v39 = vnegq_f32(v31);
  v95 = v30;
  v96 = v28;
  v93 = v33;
  v94 = v32;
  v91 = v39;
  v92 = v34;
  while (1)
  {
    v40 = (float32x4_t *)v110[v14];
    v41 = v40[1];
    v42 = vsubq_f32(v41, *v40);
    v42.i32[3] = 0;
    v43 = vaddq_f32(v41, *v40);
    v43.i32[3] = 0;
    v44 = vaddq_f32(v32, v42);
    v45 = vaddq_f32(v43, v44);
    v46 = vsubq_f32(v43, v44);
    v47 = vsubq_f32(v28, v43);
    *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v47.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), 4uLL);
    v48.i64[1] = v47.u32[0];
    *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v44.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), 4uLL);
    v49.i64[1] = v44.u32[0];
    *(int16x4_t *)v47.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v45, v37), (int8x16_t)vcgeq_f32(v38, v46)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v49), v34, v44), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v48), v47, v39)))));
    if (vuzp1_s8(*(int8x8_t *)v47.f32, *(int8x8_t *)v47.f32).u32[0] == -1)
      break;
LABEL_39:
    if (!v14--)
    {
      v12 = 1;
      goto LABEL_42;
    }
  }
  v50 = *a4;
  v107 = *a4;
  if (v40[3].i64[0])
  {
    v33 = v93;
    v32 = v94;
    v39 = v91;
    v34 = v92;
    v97 = v38;
    v99 = v37;
    do
    {
      v51 = (float32x4_t *)v40[2].i64[1];
      v52 = v51[1];
      v53 = vsubq_f32(v52, *v51);
      v53.i32[3] = 0;
      v54 = vaddq_f32(v52, *v51);
      v54.i32[3] = 0;
      v55 = vaddq_f32(v32, v53);
      v56 = vsubq_f32(v28, v54);
      *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), 4uLL);
      v57.i64[1] = v56.u32[0];
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
      v58.i64[1] = v55.u32[0];
      v59 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v54, v55), v37), (int8x16_t)vcgeq_f32(v38, vsubq_f32(v54, v55))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v58), v34, v55), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v57), v56, v39))))), *(int8x8_t *)v54.f32).u32[0];
      v60 = v51[4];
      v61 = v51[5];
      v62 = vsubq_f32(v61, v60);
      v62.i32[3] = 0;
      v63 = vaddq_f32(v61, v60);
      v63.i32[3] = 0;
      v64 = vaddq_f32(v32, v62);
      v65 = vsubq_f32(v28, v63);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), 4uLL);
      v58.i64[1] = v65.u32[0];
      *(int8x8_t *)v66.f32 = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), 4uLL);
      v66.i64[1] = v64.u32[0];
      v67 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v63, v64), v37), (int8x16_t)vcgeq_f32(v38, vsubq_f32(v63, v64))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v66), v34, v64), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v58), v65, v39))))), *(int8x8_t *)v54.f32).u32[0];
      if (v59 == -1 && v67 == -1)
      {
        v70 = vmulq_f32(v30, vsubq_f32(v63, v54));
        v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
        v70.f32[0] = vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32).f32[0];
        v110[v14] = &v51[4 * (unint64_t)(v70.f32[0] > 0.0)];
        v40 = &v51[4 * (unint64_t)(v70.f32[0] <= 0.0)];
        if (v14 + 1 == (HIDWORD(v111) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v108, 2 * (v14 + 1));
          v38 = v97;
          v37 = v99;
          v39 = v91;
          v34 = v92;
          v33 = v93;
          v32 = v94;
          v30 = v95;
          v28 = v96;
        }
        ++v14;
      }
      else
      {
        if (v59 == -1)
          v40 = (float32x4_t *)v40[2].i64[1];
        else
          v40 = v51 + 4;
        if (v59 != -1 && v67 != -1)
          goto LABEL_39;
      }
    }
    while (v40[3].i64[0]);
    v50 = *a4;
  }
  v71 = (unsigned int *)v40[2].i64[1];
  v72 = *v71;
  if (!*v71)
  {
LABEL_38:
    v33 = v93;
    v32 = v94;
    v39 = v91;
    v34 = v92;
    goto LABEL_39;
  }
  v73 = v71 + 1;
  v74 = *v71;
  while (1)
  {
    v76 = *v73++;
    v75 = v76;
    if (v72 < 2)
      break;
    v77 = v19 + 24 * v75;
    v78 = *(float32x4_t *)(v77 + 12);
    v79 = vaddq_f32(*(float32x4_t *)v77, v78);
    v80 = vsubq_f32(v78, *(float32x4_t *)v77);
    v79.i32[3] = 0;
    v80.i32[3] = 0;
    v81 = vaddq_f32(v94, v80);
    v82 = vaddq_f32(v79, v81);
    v83 = vsubq_f32(v79, v81);
    v84 = vsubq_f32(v28, v79);
    *(int8x8_t *)v85.f32 = vext_s8(*(int8x8_t *)v84.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), 4uLL);
    v85.i64[1] = v84.u32[0];
    *(int8x8_t *)v86.f32 = vext_s8(*(int8x8_t *)v81.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), 4uLL);
    v86.i64[1] = v81.u32[0];
    *(int16x4_t *)v81.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v82, v37), (int8x16_t)vcgeq_f32(v38, v83)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v93, v86), v92, v81), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v85), v84, v91)))));
    if (vuzp1_s8(*(int8x8_t *)v81.f32, *(int8x8_t *)v81.f32).u32[0] == -1)
      break;
LABEL_37:
    if (!--v74)
      goto LABEL_38;
  }
  v98 = v38;
  v100 = v37;
  if ((*(unsigned int (**)(_QWORD *, float *, uint64_t))(v101[0] + 16))(v101, &v107, v18 + 56 * v75))
  {
    v87 = v107;
    v30 = v95;
    v28 = v96;
    v38 = v98;
    v37 = v100;
    if (v107 < v50)
    {
      *a4 = v107;
      v88 = vmlaq_n_f32(v96, v95, v87);
      v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
      v37 = vminq_f32(v96, v88);
      v38 = vmaxq_f32(v96, v88);
    }
    goto LABEL_37;
  }
  v12 = 0;
LABEL_42:
  if ((v111 & 0x8000000000000000) == 0 && (v111 & 0x7FFFFFFF00000000) != 0 && v110 != v108 && v110)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v12;
}

uint64_t physx::Sq::BVHCompoundPruner::getPayload(physx::Sq::BVHCompoundPruner *this, unsigned int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v3 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = *(unsigned int *)(*((_QWORD *)this + 157) + 4 * ((*((_DWORD *)this + 317) - 1) & (v4 ^ HIWORD(v4))));
  for (i = *((_QWORD *)this + 155); *(_DWORD *)(i + 8 * v5) != a3; v5 = *(unsigned int *)(*((_QWORD *)this + 156)
                                                                                         + 4 * v5))
    ;
  v7 = *(_QWORD *)(*((_QWORD *)this + 153) + 56 * *(unsigned int *)(i + 8 * v5 + 4) + 8);
  return *(_QWORD *)(v7 + 16) + 16 * *(unsigned int *)(*(_QWORD *)(v7 + 24) + 4 * a2);
}

uint64_t physx::Sq::BVHCompoundPruner::getPayload(uint64_t a1, unsigned int a2, int a3, _QWORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;

  v4 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 1256) + 4 * ((*(_DWORD *)(a1 + 1268) - 1) & (v5 ^ HIWORD(v5))));
  for (i = *(_QWORD *)(a1 + 1240); *(_DWORD *)(i + 8 * v6) != a3; v6 = *(unsigned int *)(*(_QWORD *)(a1 + 1248) + 4 * v6))
    ;
  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 1224) + 56 * *(unsigned int *)(i + 8 * v6 + 4) + 8);
  v9 = *(unsigned int *)(v8[3] + 4 * a2);
  *a4 = v8[1] + 24 * v9;
  return v8[2] + 16 * v9;
}

uint64_t physx::Sq::BVHCompoundPruner::updateObjectAfterManualBoundsUpdates(uint64_t this, int a2, unsigned int a3)
{
  physx::Sq::BVHCompoundPruner *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(this + 1284))
  {
    v3 = (physx::Sq::BVHCompoundPruner *)this;
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = *(unsigned int *)(*(_QWORD *)(this + 1256)
                         + 4
                         * ((*(_DWORD *)(this + 1268) - 1) & (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16))));
    if ((_DWORD)v5 != -1)
    {
      v6 = *(_QWORD *)(this + 1240);
      while (*(_DWORD *)(v6 + 8 * v5) != a2)
      {
        v5 = *(unsigned int *)(*(_QWORD *)(this + 1248) + 4 * v5);
        if ((_DWORD)v5 == -1)
          return this;
      }
      v7 = v6 + 8 * v5;
      physx::Sq::CompoundTree::updateObjectAfterManualBoundsUpdates((physx::Sq::CompoundTree *)(*(_QWORD *)(this + 1224) + 56 * *(unsigned int *)(v7 + 4)), a3);
      return physx::Sq::BVHCompoundPruner::updateMainTreeNode(v3, *(_DWORD *)(v7 + 4));
    }
  }
  return this;
}

uint64_t physx::Sq::BVHCompoundPruner::updateMainTreeNode(physx::Sq::BVHCompoundPruner *this, unsigned int a2)
{
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float *v44;
  float32x4_t *v45;

  v4 = (float *)(*((_QWORD *)this + 153) + 56 * a2);
  v5 = *(float **)(*(_QWORD *)v4 + 1144);
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[4];
  v9 = v5[5];
  v10 = v5[6];
  v11 = (float)((float)(*v5 + v8) * 0.5) + (float)((float)(*v5 + v8) * 0.5);
  v12 = (float)((float)(v6 + v9) * 0.5) + (float)((float)(v6 + v9) * 0.5);
  v13 = (float)((float)(v7 + v10) * 0.5) + (float)((float)(v7 + v10) * 0.5);
  v15 = v4[8];
  v14 = v4[9];
  v16 = (float)(v14 * v14) + -0.5;
  v17 = v4[6];
  v18 = v4[7];
  v19 = (float)((float)(v12 * v18) + (float)(v17 * v11)) + (float)(v15 * v13);
  v20 = (float)((float)(v14 * (float)((float)(v18 * v13) - (float)(v15 * v12))) + (float)(v11 * v16))
      + (float)(v17 * v19);
  v21 = (float)((float)(v14 * (float)((float)(v15 * v11) - (float)(v17 * v13))) + (float)(v12 * v16))
      + (float)(v18 * v19);
  v22 = (float)((float)(v14 * (float)((float)(v17 * v12) - (float)(v18 * v11))) + (float)(v13 * v16))
      + (float)(v15 * v19);
  v23 = v4[10] + v20;
  v24 = v4[11] + v21;
  v25 = v4[12] + v22;
  v26 = v18 + v18;
  v27 = v15 + v15;
  v28 = v18 * (float)(v18 + v18);
  v29 = v15 * (float)(v15 + v15);
  v30 = (float)(v17 + v17) * v18;
  v31 = (float)(v17 + v17) * v15;
  v32 = v14 * (float)(v17 + v17);
  v33 = v26 * v15;
  v34 = v14 * v26;
  v35 = v14 * v27;
  v36 = 1.0 - (float)(v17 * (float)(v17 + v17));
  v37 = (float)(v8 - *v5) * 0.5;
  v38 = (float)(v9 - v6) * 0.5;
  v39 = (float)(v10 - v7) * 0.5;
  v40 = fabsf(v39 * (float)(v31 + v34))
      + (float)(fabsf(v37 * (float)((float)(1.0 - v28) - v29)) + fabsf(v38 * (float)(v30 - v35)));
  v41 = fabsf(v39 * (float)(v33 - v32)) + (float)(fabsf(v37 * (float)(v30 + v35)) + fabsf(v38 * (float)(v36 - v29)));
  v42 = fabsf(v39 * (float)(v36 - v28)) + (float)(fabsf(v37 * (float)(v31 - v34)) + fabsf(v38 * (float)(v32 + v33)));
  v43 = *((_QWORD *)this + 152);
  v44 = (float *)(v43 + 24 * a2);
  *v44 = v23 - v40;
  v44[1] = v24 - v41;
  v44[2] = v25 - v42;
  v44[3] = v23 + v40;
  v44[4] = v24 + v41;
  v44[5] = v25 + v42;
  *((_DWORD *)this + 328) = 0;
  v45 = physx::Sq::IncrementalAABBTree::update((uint64_t)this + 8, *(float32x4_t **)(*((_QWORD *)this + 149) + 8 * a2), a2, v43, (uint64_t)this + 1304);
  return physx::Sq::BVHCompoundPruner::updateMapping((uint64_t)this, a2, (uint64_t)v45);
}

uint64_t physx::Sq::BVHCompoundPruner::removeObject(uint64_t this, uint64_t a2, unsigned int a3)
{
  physx::Sq::BVHCompoundPruner *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(this + 1284))
  {
    v4 = (physx::Sq::BVHCompoundPruner *)this;
    v5 = 9 * ((~((_DWORD)a2 << 15) + a2) ^ ((~((_DWORD)a2 << 15) + a2) >> 10));
    v6 = *(unsigned int *)(*(_QWORD *)(this + 1256)
                         + 4
                         * ((*(_DWORD *)(this + 1268) - 1) & (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16))));
    if ((_DWORD)v6 != -1)
    {
      v7 = *(_QWORD *)(this + 1240);
      while (*(_DWORD *)(v7 + 8 * v6) != (_DWORD)a2)
      {
        v6 = *(unsigned int *)(*(_QWORD *)(this + 1248) + 4 * v6);
        if ((_DWORD)v6 == -1)
          return this;
      }
      v8 = *(unsigned int *)(v7 + 8 * v6 + 4);
      physx::Sq::CompoundTree::removeObject((physx::Sq::CompoundTree *)(*(_QWORD *)(this + 1224) + 56 * v8), a3);
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 153) + 56 * v8) + 1144))
        return physx::Sq::BVHCompoundPruner::updateMainTreeNode(v4, v8);
      else
        return (*(uint64_t (**)(physx::Sq::BVHCompoundPruner *, uint64_t))(*(_QWORD *)v4 + 8))(v4, a2);
    }
  }
  return this;
}

uint64_t physx::Sq::BVHCompoundPruner::addObject(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (!*(_DWORD *)(a1 + 1284))
    return 0;
  v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 1256)
                       + 4
                       * ((*(_DWORD *)(a1 + 1268) - 1) & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16))));
  if ((_DWORD)v8 == -1)
    return 0;
  v9 = *(_QWORD *)(a1 + 1240);
  while (*(_DWORD *)(v9 + 8 * v8) != a2)
  {
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 1248) + 4 * v8);
    if ((_DWORD)v8 == -1)
      return 0;
  }
  v11 = v9 + 8 * v8;
  physx::Sq::CompoundTree::addObject(*(_QWORD *)(a1 + 1224) + 56 * *(unsigned int *)(v11 + 4), a3, a4, a5, a6);
  physx::Sq::BVHCompoundPruner::updateMainTreeNode((physx::Sq::BVHCompoundPruner *)a1, *(_DWORD *)(v11 + 4));
  return 1;
}

double physx::Sq::BVHCompoundPruner::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  double result;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;

  *(float *)&result = physx::Sq::CompoundTreePool::shiftOrigin((unsigned int *)(a1 + 1208), a2);
  v5 = *(float32x4_t **)(a1 + 1152);
  if (v5)
  {
    v6 = *(float32x4_t *)a2->f32;
    v6.i32[3] = 0;
    v7 = v6;
    *(_QWORD *)&result = shiftNode(v5, &v7).u64[0];
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::getPayload(physx::Sq::AABBPruner *this, unsigned int a2)
{
  return *((_QWORD *)this + 54) + 16 * *(unsigned int *)(*((_QWORD *)this + 55) + 4 * a2);
}

uint64_t physx::Sq::AABBPruner::getPayload(_QWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a1[55] + 4 * a2);
  *a3 = a1[53] + 24 * v3;
  return a1[54] + 16 * v3;
}

uint64_t physx::Sq::AABBPruner::preallocate(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 420) < a2)
    return physx::Sq::PruningPool::resize((physx::Sq::PruningPool *)(this + 416), a2);
  return this;
}

uint64_t physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>::getName() [T = physx::"
           "Gu::AABBTreeBuildNode *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *result;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 16 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = &v11[v10 + 8];
    do
    {
      v17 = *(_DWORD *)v15 + ~(*(_DWORD *)v15 << 15);
      v18 = (9 * (v17 ^ (v17 >> 10))) ^ ((9 * (v17 ^ (v17 >> 10))) >> 6);
      v19 = ((v18 + ~(v18 << 11)) ^ ((v18 + ~(v18 << 11)) >> 16)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v14] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v14;
      *((_DWORD *)v16 - 2) = *(_DWORD *)v15;
      *(_QWORD *)v16 = *(_QWORD *)(v15 + 8);
      v16 += 16;
      ++v14;
      v15 += 16;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = &v11[v10];
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::~PoolBase(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 548))
  {
    v13 = 0;
    v14 = 0;
    v2 = *(_QWORD *)(a1 + 560);
    if (v2)
    {
      do
      {
        v12 = v2;
        v3 = v14;
        if ((HIDWORD(v14) & 0x7FFFFFFFu) <= v14)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::growAndPushBack((uint64_t)&v13, &v12);
        }
        else
        {
          *(_QWORD *)&v13[8 * v14] = v2;
          LODWORD(v14) = v3 + 1;
        }
        v2 = **(_QWORD **)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v2;
      }
      while (v2);
      v4 = v13;
      v5 = v14;
      v6 = HIDWORD(v14);
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>(v4, v5);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>(*(char **)(a1 + 528), *(_DWORD *)(a1 + 536));
    if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && v4)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  v7 = *(_QWORD **)(a1 + 528);
  v8 = *(unsigned int *)(a1 + 536);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    do
    {
      if (*v7)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      ++v7;
      v9 -= 8;
    }
    while (v9);
    v7 = *(_QWORD **)(a1 + 528);
  }
  v10 = *(_DWORD *)(a1 + 540);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0)
  {
    if (v7 == (_QWORD *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 520) = 0;
    }
    else if (v7)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
    }
  }
  return a1;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::getName() [T ="
           " physx::Sq::IncrementalAABBTreeNodePair]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::getName() [T ="
           " physx::Sq::IncrementalAABBTreeNodePair]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::~PoolBase(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 548))
  {
    v13 = 0;
    v14 = 0;
    v2 = *(_QWORD *)(a1 + 560);
    if (v2)
    {
      do
      {
        v12 = v2;
        v3 = v14;
        if ((HIDWORD(v14) & 0x7FFFFFFFu) <= v14)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::growAndPushBack((uint64_t)&v13, &v12);
        }
        else
        {
          *(_QWORD *)&v13[8 * v14] = v2;
          LODWORD(v14) = v3 + 1;
        }
        v2 = **(_QWORD **)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v2;
      }
      while (v2);
      v4 = v13;
      v5 = v14;
      v6 = HIDWORD(v14);
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>(v4, v5);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>(*(char **)(a1 + 528), *(_DWORD *)(a1 + 536));
    if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && v4)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  v7 = *(_QWORD **)(a1 + 528);
  v8 = *(unsigned int *)(a1 + 536);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    do
    {
      if (*v7)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      ++v7;
      v9 -= 8;
    }
    while (v9);
    v7 = *(_QWORD **)(a1 + 528);
  }
  v10 = *(_DWORD *)(a1 + 540);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0)
  {
    if (v7 == (_QWORD *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 520) = 0;
    }
    else if (v7)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
    }
  }
  return a1;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::getName() [T = physx::Sq::"
           "AABBTreeIndices]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::getName() [T = physx::Sq::"
           "AABBTreeIndices]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void MainTreeOBBOverlapCompoundPrunerCallback::~MainTreeOBBOverlapCompoundPrunerCallback(MainTreeOBBOverlapCompoundPrunerCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeOBBOverlapCompoundPrunerCallback::invoke(MainTreeOBBOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  __int32 v30;
  float v31;
  float v32;
  __int32 v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float32x4_t v39[12];
  __int32 v40[4];
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  float v45[3];

  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0 || !*(_QWORD *)(*(_QWORD *)a3 + 1144))
    return 1;
  v12 = *((_QWORD *)this + 1);
  a7.i32[0] = *(_DWORD *)(v12 + 44);
  *(float *)&a4 = *(float *)(v12 + 48) - *((float *)a3 + 10);
  *(float *)&a5 = *(float *)(v12 + 52) - *((float *)a3 + 11);
  *(float *)&a6 = *(float *)(v12 + 56) - *((float *)a3 + 12);
  *(float *)&a4 = *(float *)&a4 + *(float *)&a4;
  *(float *)&a5 = *(float *)&a5 + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a6;
  a10.i32[0] = *((_DWORD *)a3 + 8);
  LODWORD(a9) = *((_DWORD *)a3 + 9);
  *(float *)&a8 = (float)(*(float *)&a9 * *(float *)&a9) + -0.5;
  v13 = *((float *)a3 + 6);
  v14 = *((float *)a3 + 7);
  v15 = (float)((float)(*(float *)&a5 * v14) + (float)(v13 * *(float *)&a4)) + (float)(a10.f32[0] * *(float *)&a6);
  v45[0] = (float)((float)(*(float *)&a4 * *(float *)&a8)
                 - (float)((float)((float)(v14 * *(float *)&a6) - (float)(a10.f32[0] * *(float *)&a5)) * *(float *)&a9))
         + (float)(v13 * v15);
  v45[1] = (float)((float)(*(float *)&a5 * *(float *)&a8)
                 - (float)((float)((float)(a10.f32[0] * *(float *)&a4) - (float)(v13 * *(float *)&a6)) * *(float *)&a9))
         + (float)(v14 * v15);
  v45[2] = (float)((float)(*(float *)&a6 * *(float *)&a8)
                 - (float)((float)((float)(v13 * *(float *)&a5) - (float)(v14 * *(float *)&a4)) * *(float *)&a9))
         + (float)(a10.f32[0] * v15);
  *(float *)&a4 = v13 + v13;
  *(float *)&a5 = v14 + v14;
  *(float *)&a6 = a10.f32[0] + a10.f32[0];
  *(float *)&a8 = v13 * (float)(v13 + v13);
  v16 = v14 * (float)(v14 + v14);
  v17 = a10.f32[0] * (float)(a10.f32[0] + a10.f32[0]);
  v18 = *(float *)&a4 * v14;
  v19 = *(float *)&a4 * a10.f32[0];
  *(float *)&a4 = *(float *)&a9 * *(float *)&a4;
  a10.f32[0] = *(float *)&a5 * a10.f32[0];
  *(float *)&a5 = *(float *)&a9 * *(float *)&a5;
  *(float *)&a6 = *(float *)&a9 * *(float *)&a6;
  v20 = (float)(1.0 - v16) - v17;
  v21 = v18 + *(float *)&a6;
  v22 = v19 - *(float *)&a5;
  *(float *)&a6 = v18 - *(float *)&a6;
  *(float *)&a8 = 1.0 - *(float *)&a8;
  *(float *)&a9 = *(float *)&a8 - v17;
  v23 = *(float *)&a4 + a10.f32[0];
  *(float *)&a5 = v19 + *(float *)&a5;
  *(float *)&a4 = a10.f32[0] - *(float *)&a4;
  *(float *)&a8 = *(float *)&a8 - v16;
  a10.i32[0] = *(_DWORD *)(v12 + 12);
  v24 = *(float *)(v12 + 16);
  v25 = (float)(v20 * a10.f32[0]) + (float)(v21 * v24);
  v26 = (float)(*(float *)&a6 * a10.f32[0]) + (float)(*(float *)&a9 * v24);
  a10.f32[0] = (float)(*(float *)&a5 * a10.f32[0]) + (float)(*(float *)&a4 * v24);
  v27 = *(float *)(v12 + 20);
  v28 = *(float *)(v12 + 24);
  v29 = v25 + (float)(v22 * v27);
  *(float *)&v30 = v26 + (float)(v23 * v27);
  a10.f32[0] = a10.f32[0] + (float)(*(float *)&a8 * v27);
  v31 = *(float *)(v12 + 28);
  v32 = *(float *)(v12 + 32);
  *(float *)&v33 = (float)((float)(v20 * v28) + (float)(v21 * v31)) + (float)(v22 * v32);
  *(float *)&v34 = (float)((float)(*(float *)&a6 * v28) + (float)(*(float *)&a9 * v31)) + (float)(v23 * v32);
  *(float *)&v35 = (float)((float)(*(float *)&a5 * v28) + (float)(*(float *)&a4 * v31)) + (float)(*(float *)&a8 * v32);
  v36 = *(float *)(v12 + 36);
  v37 = *(float *)(v12 + 40);
  *(float *)&a6 = (float)(*(float *)&a6 * v36) + (float)(*(float *)&a9 * v37);
  *(float *)&a4 = (float)(*(float *)&a5 * v36) + (float)(*(float *)&a4 * v37);
  *(float *)&a5 = v22 * a7.f32[0];
  *(float *)&a9 = v23 * a7.f32[0];
  a7.f32[0] = *(float *)&a8 * a7.f32[0];
  *(float *)&a5 = (float)((float)(v20 * v36) + (float)(v21 * v37)) + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a9;
  *(float *)v40 = v29;
  v40[1] = v30;
  v40[2] = a10.i32[0];
  v40[3] = v33;
  v41 = __PAIR64__(v35, v34);
  *(float *)&a4 = *(float *)&a4 + a7.f32[0];
  v42 = LODWORD(a5);
  v43 = LODWORD(a6);
  v44 = LODWORD(a4);
  physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)v39, (uint64_t)v45, v40, v12, a4, a5, a6, a7, a8, a9, a10);
  return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16), *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 1144), v39, *((unsigned int (****)(_QWORD, int *, uint64_t))this + 2));
}

void MainTreeAABBOverlapCompoundPrunerCallback::~MainTreeAABBOverlapCompoundPrunerCallback(MainTreeAABBOverlapCompoundPrunerCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeAABBOverlapCompoundPrunerCallback::invoke(MainTreeAABBOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  __int32 v30;
  float v31;
  float v32;
  __int32 v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float32x4_t v39[12];
  __int32 v40[4];
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  float v45[3];

  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0 || !*(_QWORD *)(*(_QWORD *)a3 + 1144))
    return 1;
  v12 = *((_QWORD *)this + 1);
  a7.i32[0] = *(_DWORD *)(v12 + 44);
  *(float *)&a4 = *(float *)(v12 + 48) - *((float *)a3 + 10);
  *(float *)&a5 = *(float *)(v12 + 52) - *((float *)a3 + 11);
  *(float *)&a6 = *(float *)(v12 + 56) - *((float *)a3 + 12);
  *(float *)&a4 = *(float *)&a4 + *(float *)&a4;
  *(float *)&a5 = *(float *)&a5 + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a6;
  a10.i32[0] = *((_DWORD *)a3 + 8);
  LODWORD(a9) = *((_DWORD *)a3 + 9);
  *(float *)&a8 = (float)(*(float *)&a9 * *(float *)&a9) + -0.5;
  v13 = *((float *)a3 + 6);
  v14 = *((float *)a3 + 7);
  v15 = (float)((float)(*(float *)&a5 * v14) + (float)(v13 * *(float *)&a4)) + (float)(a10.f32[0] * *(float *)&a6);
  v45[0] = (float)((float)(*(float *)&a4 * *(float *)&a8)
                 - (float)((float)((float)(v14 * *(float *)&a6) - (float)(a10.f32[0] * *(float *)&a5)) * *(float *)&a9))
         + (float)(v13 * v15);
  v45[1] = (float)((float)(*(float *)&a5 * *(float *)&a8)
                 - (float)((float)((float)(a10.f32[0] * *(float *)&a4) - (float)(v13 * *(float *)&a6)) * *(float *)&a9))
         + (float)(v14 * v15);
  v45[2] = (float)((float)(*(float *)&a6 * *(float *)&a8)
                 - (float)((float)((float)(v13 * *(float *)&a5) - (float)(v14 * *(float *)&a4)) * *(float *)&a9))
         + (float)(a10.f32[0] * v15);
  *(float *)&a4 = v13 + v13;
  *(float *)&a5 = v14 + v14;
  *(float *)&a6 = a10.f32[0] + a10.f32[0];
  *(float *)&a8 = v13 * (float)(v13 + v13);
  v16 = v14 * (float)(v14 + v14);
  v17 = a10.f32[0] * (float)(a10.f32[0] + a10.f32[0]);
  v18 = *(float *)&a4 * v14;
  v19 = *(float *)&a4 * a10.f32[0];
  *(float *)&a4 = *(float *)&a9 * *(float *)&a4;
  a10.f32[0] = *(float *)&a5 * a10.f32[0];
  *(float *)&a5 = *(float *)&a9 * *(float *)&a5;
  *(float *)&a6 = *(float *)&a9 * *(float *)&a6;
  v20 = (float)(1.0 - v16) - v17;
  v21 = v18 + *(float *)&a6;
  v22 = v19 - *(float *)&a5;
  *(float *)&a6 = v18 - *(float *)&a6;
  *(float *)&a8 = 1.0 - *(float *)&a8;
  *(float *)&a9 = *(float *)&a8 - v17;
  v23 = *(float *)&a4 + a10.f32[0];
  *(float *)&a5 = v19 + *(float *)&a5;
  *(float *)&a4 = a10.f32[0] - *(float *)&a4;
  *(float *)&a8 = *(float *)&a8 - v16;
  a10.i32[0] = *(_DWORD *)(v12 + 12);
  v24 = *(float *)(v12 + 16);
  v25 = (float)(v20 * a10.f32[0]) + (float)(v21 * v24);
  v26 = (float)(*(float *)&a6 * a10.f32[0]) + (float)(*(float *)&a9 * v24);
  a10.f32[0] = (float)(*(float *)&a5 * a10.f32[0]) + (float)(*(float *)&a4 * v24);
  v27 = *(float *)(v12 + 20);
  v28 = *(float *)(v12 + 24);
  v29 = v25 + (float)(v22 * v27);
  *(float *)&v30 = v26 + (float)(v23 * v27);
  a10.f32[0] = a10.f32[0] + (float)(*(float *)&a8 * v27);
  v31 = *(float *)(v12 + 28);
  v32 = *(float *)(v12 + 32);
  *(float *)&v33 = (float)((float)(v20 * v28) + (float)(v21 * v31)) + (float)(v22 * v32);
  *(float *)&v34 = (float)((float)(*(float *)&a6 * v28) + (float)(*(float *)&a9 * v31)) + (float)(v23 * v32);
  *(float *)&v35 = (float)((float)(*(float *)&a5 * v28) + (float)(*(float *)&a4 * v31)) + (float)(*(float *)&a8 * v32);
  v36 = *(float *)(v12 + 36);
  v37 = *(float *)(v12 + 40);
  *(float *)&a6 = (float)(*(float *)&a6 * v36) + (float)(*(float *)&a9 * v37);
  *(float *)&a4 = (float)(*(float *)&a5 * v36) + (float)(*(float *)&a4 * v37);
  *(float *)&a5 = v22 * a7.f32[0];
  *(float *)&a9 = v23 * a7.f32[0];
  a7.f32[0] = *(float *)&a8 * a7.f32[0];
  *(float *)&a5 = (float)((float)(v20 * v36) + (float)(v21 * v37)) + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a9;
  *(float *)v40 = v29;
  v40[1] = v30;
  v40[2] = a10.i32[0];
  v40[3] = v33;
  v41 = __PAIR64__(v35, v34);
  *(float *)&a4 = *(float *)&a4 + a7.f32[0];
  v42 = LODWORD(a5);
  v43 = LODWORD(a6);
  v44 = LODWORD(a4);
  physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)v39, (uint64_t)v45, v40, v12, a4, a5, a6, a7, a8, a9, a10);
  return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16), *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 1144), v39, *((unsigned int (****)(_QWORD, int *, uint64_t))this + 2));
}

void MainTreeCapsuleOverlapCompoundPrunerCallback::~MainTreeCapsuleOverlapCompoundPrunerCallback(MainTreeCapsuleOverlapCompoundPrunerCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeCapsuleOverlapCompoundPrunerCallback::invoke(MainTreeCapsuleOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t (***v30)(_QWORD, int *, uint64_t);
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float32x4_t v72[8];

  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0)
    return 1;
  v9 = *(_QWORD *)a3;
  if (!*(_QWORD *)(*(_QWORD *)a3 + 1144))
    return 1;
  v10 = *((float *)a3 + 6);
  v11 = *((float *)a3 + 7);
  v12 = *((float *)a3 + 8);
  v13 = *((float *)a3 + 9);
  v14 = v11 * (float)(v11 + v11);
  v15 = v12 * (float)(v12 + v12);
  v16 = (float)(v10 + v10) * v11;
  v17 = (float)(v10 + v10) * v12;
  v18 = (float)(v10 + v10) * v13;
  v19 = (float)(v11 + v11) * v12;
  v20 = (float)(v11 + v11) * v13;
  v21 = (float)(v12 + v12) * v13;
  v54.f32[0] = (float)(1.0 - v14) - v15;
  *(float *)&a9 = v16 + v21;
  v22 = v17 - v20;
  v23 = v16 - v21;
  v24 = 1.0 - (float)(v10 * (float)(v10 + v10));
  v25 = v24 - v15;
  v26 = v19 + v18;
  v27 = v17 + v20;
  v28 = v19 - v18;
  v29 = v24 - v14;
  v31 = (float *)*((_QWORD *)this + 1);
  v30 = (uint64_t (***)(_QWORD, int *, uint64_t))*((_QWORD *)this + 2);
  v32 = v31[28] - *((float *)a3 + 10);
  v33 = v31[29] - *((float *)a3 + 11);
  v34 = v31[30] - *((float *)a3 + 12);
  v35 = v32 + v32;
  v36 = v33 + v33;
  v37 = v34 + v34;
  v38 = (float)(v13 * v13) + -0.5;
  v39 = (float)((float)(v11 * v36) + (float)(v10 * v35)) + (float)(v12 * v37);
  v40 = (float)(v35 * v38) - (float)((float)((float)(v11 * v37) - (float)(v12 * v36)) * v13);
  v41 = (float)((float)(v36 * v38) - (float)((float)((float)(v12 * v35) - (float)(v10 * v37)) * v13))
      + (float)(v11 * v39);
  v42 = -(float)(v11 * v35);
  v43 = v40 + (float)(v10 * v39);
  v44 = (float)((float)(v37 * v38) - (float)((float)(v42 + (float)(v10 * v36)) * v13)) + (float)(v12 * v39);
  v45 = v31[3];
  v46 = v31[4];
  v47 = (float)(v54.f32[0] * v45) + (float)(*(float *)&a9 * v46);
  *(float *)&a9 = (float)(v23 * v45) + (float)(v25 * v46);
  v48 = (float)(v27 * v45) + (float)(v28 * v46);
  v49 = v31[5];
  *(float *)&v50 = v47 + (float)(v22 * v49);
  v51 = *(float *)&a9 + (float)(v26 * v49);
  v52 = v48 + (float)(v29 * v49);
  v53 = v31[15] + v31[15];
  *(float *)&a9 = v31[31] * 1.01;
  v54.i32[3] = 0;
  v55.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v43));
  v55.i64[1] = LODWORD(v44);
  v56 = (float32x4_t)v50;
  v56.f32[1] = v51;
  v57 = v56;
  v57.f32[2] = v52;
  *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
  v56.i64[1] = v50;
  v72[0] = v55;
  v72[1] = v57;
  v58 = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  v58.i32[3] = 0;
  v72[2] = v56;
  v72[3] = (float32x4_t)v58;
  v59 = (int8x16_t)vabsq_f32(v57);
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), 4uLL);
  v61 = v43 + (float)(*(float *)&v50 * v53);
  v62 = (float)(v51 * v53) + v41;
  v63 = v44 + (float)(v52 * v53);
  v64 = *(float *)&v50 == 0.0;
  v68 = *(float *)&v50 < 0.0;
  v65 = -3.4028e38;
  if (v68)
    v66 = -3.4028e38;
  else
    v66 = 3.4028e38;
  if (!v64)
    v43 = v66;
  if (v51 >= 0.0)
    v65 = 3.4028e38;
  if (v51 == 0.0)
    v65 = v41;
  v67 = -3.4028e38;
  if (v52 >= 0.0)
    v67 = 3.4028e38;
  if (v52 != 0.0)
    v44 = v67;
  v68 = v53 < 3.4028e38;
  if (v53 >= 3.4028e38)
    v69 = v43;
  else
    v69 = v61;
  if (v53 >= 3.4028e38)
    v70 = v65;
  else
    v70 = v62;
  if (v68)
    v44 = v63;
  v54.i64[0] = __PAIR64__(LODWORD(v70), LODWORD(v69));
  v54.f32[2] = v44;
  v72[4] = (float32x4_t)v59;
  v60.i64[1] = v59.u32[0];
  v72[5] = v60;
  v72[6] = vminq_f32(v55, v54);
  v72[7] = vmaxq_f32(v55, v54);
  return physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16), *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), *(_QWORD *)(v9 + 1144), v72, v30);
}

void MainTreeSphereOverlapCompoundPrunerCallback::~MainTreeSphereOverlapCompoundPrunerCallback(MainTreeSphereOverlapCompoundPrunerCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeSphereOverlapCompoundPrunerCallback::invoke(MainTreeSphereOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4)
{
  uint64_t v4;
  uint64_t (***v5)(_QWORD, int *, uint64_t);
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v22;
  int32x2_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0)
    return 1;
  v4 = *(_QWORD *)(*(_QWORD *)a3 + 1144);
  if (!v4)
    return 1;
  v6 = (float *)*((_QWORD *)this + 1);
  v5 = (uint64_t (***)(_QWORD, int *, uint64_t))*((_QWORD *)this + 2);
  *(float *)&a4 = v6[25] - *((float *)a3 + 10);
  v7 = v6[26] - *((float *)a3 + 11);
  v8 = v6[28];
  v9 = v6[27] - *((float *)a3 + 12);
  *(float *)&a4 = *(float *)&a4 + *(float *)&a4;
  v10 = v7 + v7;
  v11 = v9 + v9;
  v13 = *((float *)a3 + 8);
  v12 = *((float *)a3 + 9);
  v14 = (float)(v12 * v12) + -0.5;
  v15 = *((float *)a3 + 6);
  v16 = *((float *)a3 + 7);
  v17 = (float)((float)(v10 * v16) + (float)(v15 * *(float *)&a4)) + (float)(v13 * v11);
  v18 = (float)(*(float *)&a4 * v14) - (float)((float)((float)(v16 * v11) - (float)(v13 * v10)) * v12);
  v19 = (float)((float)(v10 * v14) - (float)((float)((float)(v13 * *(float *)&a4) - (float)(v15 * v11)) * v12))
      + (float)(v16 * v17);
  *(float *)&a4 = (float)((float)(v11 * v14) - (float)((float)((float)(v15 * v10) - (float)(v16 * *(float *)&a4)) * v12))
                + (float)(v13 * v17);
  *(float *)&v20 = v18 + (float)(v15 * v17);
  *((float *)&v20 + 1) = v19;
  *((_QWORD *)&v20 + 1) = LODWORD(a4);
  v22 = v20;
  *(float *)&a4 = v8 * v8;
  v23 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
  return physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16), *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), v4, (uint64_t)&v22, v5);
}

uint64_t physx::shdfnd::Array<physx::Sq::AABBPruner::NewTreeFixup,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner::NewTreeFixup>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner::NewTreeFixup>::getName() [T = ph"
           "ysx::Sq::AABBPruner::NewTreeFixup]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

float32x4_t physx::Gu::OBBAABBTests<true>::OBBAABBTests(uint64_t a1, uint64_t a2, __int32 *a3, uint64_t a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, float32x4_t a11)
{
  __int128 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x2_t v23;
  float32x4_t v24;
  int8x8_t v25;
  float32x4_t result;

  *(_QWORD *)&v11 = *(_QWORD *)a2;
  *((_QWORD *)&v11 + 1) = *(unsigned int *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = v11;
  v12.i64[0] = *(_QWORD *)a4;
  v12.i64[1] = *(unsigned int *)(a4 + 8);
  *(float32x4_t *)a1 = v12;
  v13.i32[0] = *a3;
  v13.i32[1] = a3[3];
  v13.i64[1] = a3[6];
  a8.i32[0] = a3[1];
  a8.i32[1] = a3[4];
  a8.i32[2] = a3[7];
  a11.i32[0] = a3[2];
  a11.i32[1] = a3[5];
  a11.i32[2] = a3[8];
  v14 = vaddq_f32(vabsq_f32(v13), (float32x4_t)xmmword_2261A9050);
  v15 = vaddq_f32(vabsq_f32(a8), (float32x4_t)xmmword_2261A9050);
  v16 = vaddq_f32(vabsq_f32(a11), (float32x4_t)xmmword_2261A9050);
  v17 = vmulq_f32(v12, v14);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vmulq_f32(v12, v15);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vmulq_f32(v12, v16);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  *(int8x8_t *)&v20 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), 4uLL);
  *((_QWORD *)&v20 + 1) = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).u32[0];
  v18.i64[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v12.f32, *(int8x8_t *)v18.f32, 4uLL);
  *(int32x2_t *)v19.f32 = vrev64_s32(*(int32x2_t *)v18.f32);
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v12.f32, 4uLL);
  v17.i64[1] = v12.u32[0];
  *(int8x8_t *)&v18.u32[2] = vext_s8(*(int8x8_t *)v12.f32, *(int8x8_t *)v19.f32, 4uLL);
  v12.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  *(int32x2_t *)v19.f32 = vrev64_s32(*(int32x2_t *)v12.f32);
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v14.f32, 4uLL);
  *(int8x8_t *)&v21.u32[2] = vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v19.f32, 4uLL);
  *(float32x4_t *)(a1 + 64) = a11;
  *(float32x4_t *)(a1 + 80) = v14;
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v12.f32, 4uLL);
  v12.i64[1] = v14.u32[0];
  *(float32x4_t *)(a1 + 32) = v13;
  *(float32x4_t *)(a1 + 48) = a8;
  v22 = vmlaq_f32(vmulq_f32(v18, v12), v21, v17);
  v23 = (int32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  *(int32x2_t *)v12.f32 = vrev64_s32(v23);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v12.f32, *(int8x8_t *)v15.f32, 4uLL);
  *(int8x8_t *)&v24.u32[2] = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v12.f32, 4uLL);
  *(float32x4_t *)(a1 + 96) = v15;
  *(float32x4_t *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 128) = v20;
  *(float32x4_t *)(a1 + 144) = v22;
  *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v23, 4uLL);
  v22.i64[1] = v15.u32[0];
  v15.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v25 = (int8x8_t)vrev64_s32(*(int32x2_t *)v15.f32);
  *(int8x8_t *)v12.f32 = vext_s8(v25, *(int8x8_t *)v16.f32, 4uLL);
  *(int8x8_t *)&v12.u32[2] = vext_s8(*(int8x8_t *)v16.f32, v25, 4uLL);
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v16.f32, *(int8x8_t *)v15.f32, 4uLL);
  v15.i64[1] = v16.u32[0];
  result = vmlaq_f32(vmulq_f32(v18, v15), v12, v17);
  *(float32x4_t *)(a1 + 160) = vmlaq_f32(vmulq_f32(v18, v22), v24, v17);
  *(float32x4_t *)(a1 + 176) = result;
  return result;
}

BOOL physx::Gu::OBBAABBTests<true>::operator()(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x8_t v37;

  v3 = a1[1];
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v3, a2), vaddq_f32(a1[8], a3))), *(int8x8_t *)a2.f32).u32[0] & 0xFFFFFF) != 0)
    return 0;
  v4 = vsubq_f32(v3, a2);
  v6 = a1[2];
  v5 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = vmulq_n_f32(v6, v4.f32[0]);
  v11.i32[3] = 0;
  v12 = vmlaq_lane_f32(v11, v5, *(float32x2_t *)v4.f32, 1);
  v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
  v13 = vmlaq_laneq_f32(v12, v8, v4, 2);
  v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
  v14 = vmlaq_n_f32(*a1, v7, a3.f32[0]);
  v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
  v15 = vmlaq_lane_f32(v14, v9, *(float32x2_t *)a3.f32, 1);
  v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  v16 = vmlaq_laneq_f32(v15, v10, a3, 2);
  v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v13), v16)), *(int8x8_t *)v7.f32).u32[0] & 0xFFFFFF) != 0)
    return 0;
  v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 1);
  v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a3, 2);
  v20 = vmulq_laneq_f32(v5, v4, 2);
  v20.i32[3] = 0;
  v21 = vmlsq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1), v8);
  v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
  v22 = vmlaq_f32(a1[9], v18, v10);
  v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  v23 = vmlaq_f32(v22, v19, v9);
  v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
  v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
  v25 = vmulq_n_f32(v8, v4.f32[0]);
  v25.i32[3] = 0;
  v26 = vmlsq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), v6);
  v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
  v27 = (int8x16_t)vcgtq_f32(v21, v23);
  v28 = vnegq_f32(v23);
  v28.i32[3] = 0;
  v29 = vmlaq_f32(a1[10], v24, v10);
  v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  v30 = vmlaq_f32(v29, v19, v7);
  v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
  v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  v32 = vmulq_lane_f32(v6, *(float32x2_t *)v4.f32, 1);
  v32.i32[3] = 0;
  v33 = vmlsq_lane_f32(v32, v5, *(float32x2_t *)v4.f32, 0);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  v34 = vmlaq_f32(a1[11], v24, v9);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  v35 = vmlaq_f32(v34, v18, v7);
  v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
  v36 = vnegq_f32(v35);
  v36.i32[3] = 0;
  v37 = (int8x8_t)vcltz_s16(vshl_n_s16((int16x4_t)vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v28, v21), vorrq_s8(v27, (int8x16_t)vcgtq_f32(v26, v30))), vorrq_s8((int8x16_t)vcgtq_f32(v31, v26), (int8x16_t)vcgtq_f32(v33, v35))), (int8x16_t)vcgtq_f32(v36, v33)))), 0xFuLL));
  return vuzp1_s8(v37, v37).u32[0] == -1;
}

uint64_t physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 2068) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::recreate(result, a2);
  *(_DWORD *)(v3 + 2064) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (!a2)
    goto LABEL_10;
  if ((8 * a2) <= 0x800 && !*(_BYTE *)(result + 2048))
  {
    *(_BYTE *)(result + 2048) = 1;
    v4 = (_QWORD *)result;
    goto LABEL_11;
  }
  if (8 * a2)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Sq::AABBTreeRuntimeNode *>::getName() [T ="
           " const physx::Sq::AABBTreeRuntimeNode *]";
    else
      v6 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                             + 16))(v5 + 24, (8 * a2), v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_QWORD *)result;
  }
  else
  {
LABEL_10:
    v4 = 0;
  }
LABEL_11:
  v7 = *(unsigned int *)(v3 + 2064);
  v8 = *(uint64_t **)(v3 + 2056);
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v4[v7];
    v10 = v4;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)(v3 + 2056);
  }
  if ((*(_DWORD *)(v3 + 2068) & 0x80000000) == 0)
  {
    if (v8 == (uint64_t *)v3)
    {
      *(_BYTE *)(v3 + 2048) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 2056) = v4;
  *(_DWORD *)(v3 + 2068) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>::getName() [T = p"
           "hysx::Sq::IncrementalAABBTreeNode *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 2068) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::recreate(result, a2);
  *(_DWORD *)(v3 + 2064) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = (8 * a2);
  if (v4 <= 0x800 && *(_BYTE *)(result + 2048) == 0)
  {
    *(_BYTE *)(result + 2048) = 1;
    v8 = (_QWORD *)result;
  }
  else if ((_DWORD)v4)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Sq::IncrementalAABBTreeNode *>::getName() "
           "[T = const physx::Sq::IncrementalAABBTreeNode *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 2064);
  v10 = *(uint64_t **)(v3 + 2056);
  if ((_DWORD)v9)
  {
    v11 = (unint64_t)&v8[v9];
    v12 = v8;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)(v3 + 2056);
  }
  if ((*(_DWORD *)(v3 + 2068) & 0x80000000) == 0)
  {
    if (v10 == (uint64_t *)v3)
    {
      *(_BYTE *)(v3 + 2048) = 0;
    }
    else if (v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 2056) = v8;
  *(_DWORD *)(v3 + 2068) = a2;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, int *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = *a2;
  v8 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
  v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  v10 = (v9 ^ HIWORD(v9)) & (v6 - 1);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
      v10 = (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16)) & (v6 - 1);
    }
    v15 = a1[5].u32[1];
    a1[5].i32[1] = v15 + 1;
    v16 = a1[3];
    v17 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v15) = *(_DWORD *)(*(_QWORD *)&v16 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v16 + 4 * v10) = v15;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v17 + 16 * v15;
  }
  v12 = a1[1];
  while (*(_DWORD *)(*(_QWORD *)&v12 + 16 * v11) != v7)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 16 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_DWORD *)(a1 + 52))
    return 0;
  v3 = *a2;
  v4 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_DWORD *)(v5
                + 4
                * ((((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
  v7 = *v6;
  if ((_DWORD)v7 == -1)
    return 0;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v9 + 16 * v7) != v3)
  {
    while (1)
    {
      v10 = v7;
      v7 = *(unsigned int *)(v8 + 4 * v7);
      if ((_DWORD)v7 == -1)
        return 0;
      if (*(_DWORD *)(v9 + 16 * v7) == v3)
      {
        v6 = (_DWORD *)(v8 + 4 * v10);
        break;
      }
    }
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(v9 + 16 * v7 + 8);
  v11 = *v6;
  *v6 = *(_DWORD *)(v8 + 4 * v11);
  v12 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v12;
  if ((_DWORD)v11 != v12)
  {
    v13 = v9 + 16 * v11;
    v14 = v9 + 16 * v12;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(v8 + 4 * v11) = *(_DWORD *)(v8 + 4 * v12);
    *(_QWORD *)(v13 + 8) = v15;
    v16 = 9
        * ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) ^ ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) >> 10));
    v17 = (_DWORD *)(v5
                   + 4
                   * ((((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6))
                                                                            + ~((v16 ^ (v16 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
    v18 = *(unsigned int *)(a1 + 52);
    v19 = *v17;
    if (v19 != v18)
    {
      do
      {
        v20 = v19;
        v19 = *(unsigned int *)(v8 + 4 * v19);
      }
      while (v19 != v18);
      v17 = (_DWORD *)(v8 + 4 * v20);
    }
    *v17 = v11;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::getName() [T ="
           " physx::Sq::IncrementalAABBTreeNodePair]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + ((unint64_t)*(unsigned int *)(v1 + 544) << 7) - 128);
    do
    {
      *v9 = v8;
      v9 -= 16;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::getName() [T = p"
         "hysx::Sq::IncrementalAABBTreeNodePair]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::getName() [T = physx::Sq::"
           "AABBTreeIndices]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 20 * *(unsigned int *)(v1 + 544) - 20;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 20 * *(unsigned int *)(v1 + 544) - 20);
    do
    {
      *v9 = v8;
      v9 = (unint64_t *)((char *)v9 - 20);
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = (char *)v9 + 20;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(result + 512) == 0)
  {
    *(_BYTE *)(result + 512) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::getName() [T = physx::Sq::AABBTreeIndices]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 528);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 520);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 520);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(_QWORD *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>::getName() [T = p"
           "hysx::Sq::IncrementalAABBTreeNode *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    v16 = *(_DWORD **)(a1 + 8);
    do
    {
      v17 = *v16 + ~(*v16 << 15);
      v18 = (9 * (v17 ^ (v17 >> 10))) ^ ((9 * (v17 ^ (v17 >> 10))) >> 6);
      v19 = ((v18 + ~(v18 << 11)) ^ ((v18 + ~(v18 << 11)) >> 16)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      v20 = *(_QWORD *)v16;
      v16 += 2;
      *(_QWORD *)&v13[8 * v15++] = v20;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, int *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = *a2;
  v8 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
  v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  v10 = (v9 ^ HIWORD(v9)) & (v6 - 1);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
      v10 = (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16)) & (v6 - 1);
    }
    v15 = a1[5].u32[1];
    a1[5].i32[1] = v15 + 1;
    v16 = a1[3];
    v17 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v15) = *(_DWORD *)(*(_QWORD *)&v16 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v16 + 4 * v10) = v15;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v17 + 8 * v15;
  }
  v12 = a1[1];
  while (*(_DWORD *)(*(_QWORD *)&v12 + 8 * v11) != v7)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

void MainTreeRaycastCompoundPrunerCallback<false>::~MainTreeRaycastCompoundPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeRaycastCompoundPrunerCallback<false>::invoke(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t *v21;
  unsigned int (***v22)(_QWORD, float *, uint64_t);
  char v24;
  uint64_t v25;
  int v26;
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float v30;

  if ((*(_DWORD *)(a3 + 52) & *(unsigned __int16 *)(a1 + 40)) == 0)
    return 1;
  v3 = *(_QWORD *)a3;
  if (!*(_QWORD *)(*(_QWORD *)a3 + 1144))
    return 1;
  v4 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v6 = v4[1] - *(float *)(a3 + 44);
  v7 = v4[2] - *(float *)(a3 + 48);
  v8 = (float)(*v4 - *(float *)(a3 + 40)) + (float)(*v4 - *(float *)(a3 + 40));
  v9 = v6 + v6;
  v10 = v7 + v7;
  v12 = *(float *)(a3 + 32);
  v11 = *(float *)(a3 + 36);
  v13 = (float)(v11 * v11) + -0.5;
  v14 = *(float *)(a3 + 24);
  v15 = *(float *)(a3 + 28);
  v16 = (float)((float)(v9 * v15) + (float)(v14 * v8)) + (float)(v12 * v10);
  v29.f32[0] = (float)((float)(v8 * v13) - (float)((float)((float)(v15 * v10) - (float)(v12 * v9)) * v11))
             + (float)(v14 * v16);
  v29.f32[1] = (float)((float)(v9 * v13) - (float)((float)((float)(v12 * v8) - (float)(v14 * v10)) * v11))
             + (float)(v15 * v16);
  v30 = (float)((float)(v10 * v13) - (float)((float)((float)(v14 * v9) - (float)(v15 * v8)) * v11)) + (float)(v12 * v16);
  v17 = *v5 + *v5;
  v18 = v5[1] + v5[1];
  v19 = v5[2] + v5[2];
  v20 = (float)((float)(v15 * v18) + (float)(v14 * v17)) + (float)(v12 * v19);
  v27.f32[0] = (float)((float)(v17 * v13) - (float)((float)((float)(v15 * v19) - (float)(v12 * v18)) * v11))
             + (float)(v14 * v20);
  v27.f32[1] = (float)((float)(v18 * v13) - (float)((float)((float)(v12 * v17) - (float)(v14 * v19)) * v11))
             + (float)(v15 * v20);
  v28 = (float)((float)(v19 * v13) - (float)((float)((float)(v14 * v18) - (float)(v15 * v17)) * v11))
      + (float)(v12 * v20);
  v21 = *(uint64_t **)(a1 + 24);
  v22 = *(unsigned int (****)(_QWORD, float *, uint64_t))(a1 + 32);
  v25 = *v21;
  v26 = *((_DWORD *)v21 + 2);
  return physx::Gu::AABBTreeRaycast<false,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v24, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), v3, &v29, &v27, a2, (uint64_t)&v25, v22);
}

void MainTreeRaycastCompoundPrunerCallback<true>::~MainTreeRaycastCompoundPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeRaycastCompoundPrunerCallback<true>::invoke(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  char v71;
  float32x2_t v72;
  float v73;
  float32x2_t v74;
  float v75;
  float32x2_t v76;
  float v77;

  if ((*(_DWORD *)(a3 + 52) & *(unsigned __int16 *)(a1 + 40)) == 0)
    return 1;
  v3 = *(_QWORD *)a3;
  if (!*(_QWORD *)(*(_QWORD *)a3 + 1144))
    return 1;
  v4 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v6 = v4[1];
  v8 = *(float *)(a3 + 40);
  v7 = *(float *)(a3 + 44);
  v9 = v4[2];
  v10 = *(float *)(a3 + 48);
  v11 = (float)(*v4 - v8) + (float)(*v4 - v8);
  v12 = (float)(v6 - v7) + (float)(v6 - v7);
  v13 = (float)(v9 - v10) + (float)(v9 - v10);
  v15 = *(float *)(a3 + 32);
  v14 = *(float *)(a3 + 36);
  v16 = (float)(v14 * v14) + -0.5;
  v17 = *(float *)(a3 + 24);
  v18 = *(float *)(a3 + 28);
  v19 = (float)((float)(v12 * v18) + (float)(v17 * v11)) + (float)(v15 * v13);
  v76.f32[0] = (float)((float)(v11 * v16) - (float)((float)((float)(v18 * v13) - (float)(v15 * v12)) * v14))
             + (float)(v17 * v19);
  v76.f32[1] = (float)((float)(v12 * v16) - (float)((float)((float)(v15 * v11) - (float)(v17 * v13)) * v14))
             + (float)(v18 * v19);
  v77 = (float)((float)(v13 * v16) - (float)((float)((float)(v17 * v12) - (float)(v18 * v11)) * v14))
      + (float)(v15 * v19);
  v20 = *v5 + *v5;
  v21 = v5[1] + v5[1];
  v22 = v5[2] + v5[2];
  v23 = (float)((float)(v18 * v21) + (float)(v17 * v20)) + (float)(v15 * v22);
  v74.f32[0] = (float)((float)(v20 * v16) - (float)((float)((float)(v18 * v22) - (float)(v15 * v21)) * v14))
             + (float)(v17 * v23);
  v74.f32[1] = (float)((float)(v21 * v16) - (float)((float)((float)(v15 * v20) - (float)(v17 * v22)) * v14))
             + (float)(v18 * v23);
  v75 = (float)((float)(v22 * v16) - (float)((float)((float)(v17 * v21) - (float)(v18 * v20)) * v14))
      + (float)(v15 * v23);
  v24 = *(float **)(a1 + 24);
  v25 = v24[1];
  v26 = v24[2];
  v27 = *v4 - *v24;
  v28 = v6 - v25;
  v29 = v9 - v26;
  v30 = *v24 + *v4;
  v31 = v25 + v6;
  v32 = v9 + v26;
  if (v27 <= v30)
  {
    v33 = -v15;
    v34 = -v18;
    v35 = v10 * -2.0;
    v36 = v8 * -2.0;
    v37 = v7 * -2.0;
    v38 = (float)((float)(v37 * v18) + (float)(v17 * v36)) + (float)(v15 * v35);
    v39 = (float)((float)(v35 * v16) - (float)((float)((float)(v36 * (float)-v18) + (float)(v17 * v37)) * v14))
        + (float)(v15 * v38);
    v40 = (float)((float)(v37 * v16) - (float)((float)((float)(v35 * (float)-v17) + (float)(v15 * v36)) * v14))
        + (float)(v18 * v38);
    v41 = (float)((float)(v36 * v16) - (float)((float)((float)(v37 * (float)-v15) + (float)(v18 * v35)) * v14))
        + (float)(v17 * v38);
    v42 = (float)((float)(v27 + v30) * 0.5) + (float)((float)(v27 + v30) * 0.5);
    v43 = (float)((float)(v28 + v31) * 0.5) + (float)((float)(v28 + v31) * 0.5);
    v44 = (float)((float)(v29 + v32) * 0.5) + (float)((float)(v29 + v32) * 0.5);
    v45 = (float)((float)(v43 * (float)-v18) + (float)((float)-v17 * v42)) + (float)((float)-v15 * v44);
    v46 = (float)((float)(v14 * (float)((float)(v15 * v43) + (float)((float)-v18 * v44))) + (float)(v42 * v16))
        + (float)((float)-v17 * v45);
    v47 = (float)((float)(v14 * (float)((float)(v17 * v44) + (float)((float)-v15 * v42))) + (float)(v43 * v16))
        + (float)((float)-v18 * v45);
    v48 = (float)((float)(v14 * (float)((float)(v18 * v42) + (float)((float)-v17 * v43))) + (float)(v44 * v16))
        + (float)((float)-v15 * v45);
    v49 = v41 + v46;
    v50 = v40 + v47;
    v51 = v39 + v48;
    v52 = (float)-v17 - v17;
    v53 = (float)-v18 - v18;
    v54 = (float)-v15 - v15;
    v55 = v53 * v34;
    v56 = v54 * v33;
    v57 = v52 * v34;
    v58 = v52 * v33;
    v59 = v14 * v52;
    v60 = v53 * v33;
    v61 = v14 * v53;
    v62 = v14 * v54;
    v63 = (float)(v17 * v52) + 1.0;
    v64 = (float)(v30 - v27) * 0.5;
    v65 = (float)(v31 - v28) * 0.5;
    v66 = (float)(v32 - v29) * 0.5;
    v67 = fabsf((float)(v58 + v61) * v66)
        + (float)(fabsf((float)((float)(1.0 - v55) - v56) * v64) + fabsf((float)(v57 - v62) * v65));
    v68 = fabsf((float)(v60 - v59) * v66) + (float)(fabsf((float)(v57 + v62) * v64) + fabsf((float)(v63 - v56) * v65));
    v69 = fabsf((float)(v63 - v55) * v66) + (float)(fabsf((float)(v58 - v61) * v64) + fabsf((float)(v59 + v60) * v65));
    v27 = v49 - v67;
    v28 = v50 - v68;
    v29 = v51 - v69;
    v30 = v67 + v49;
    v31 = v68 + v50;
    v32 = v69 + v51;
  }
  v72.f32[0] = (float)(v30 - v27) * 0.5;
  v72.f32[1] = (float)(v31 - v28) * 0.5;
  v73 = (float)(v32 - v29) * 0.5;
  return physx::Gu::AABBTreeRaycast<true,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v71, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), v3, &v76, &v74, a2, &v72, *(unsigned int (****)(_QWORD, float *, uint64_t))(a1 + 32));
}

uint64_t physx::Sq::CompoundTree::updateObjectAfterManualBoundsUpdates(physx::Sq::CompoundTree *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 4 * a2);
  v8 = 0;
  v9 = 0;
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)&v8, 8u);
  v6 = physx::Sq::IncrementalAABBTree::update(*(_QWORD *)this, *(float32x4_t **)(**((_QWORD **)this + 2) + 8 * v5), v5, v4, (uint64_t)&v8);
  result = physx::Sq::CompoundTree::updateMapping((uint64_t)this, v5, (uint64_t)v6, (uint64_t)&v8);
  if ((v9 & 0x8000000000000000) == 0 && (v9 & 0x7FFFFFFF00000000) != 0)
  {
    if (v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  return result;
}

uint64_t physx::Sq::CompoundTree::updateMapping(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;

  LODWORD(v4) = *(_DWORD *)(a4 + 8);
  if ((_DWORD)v4)
  {
    if (a3)
    {
      if (!*(_QWORD *)(a3 + 48))
      {
        v5 = *(_DWORD **)(a3 + 40);
        if (*v5)
        {
          v6 = 0;
          do
          {
            *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v5[++v6]) = a3;
            v5 = *(_DWORD **)(a3 + 40);
          }
          while (v6 < *v5);
        }
      }
    }
    v7 = 0;
    if (v4 <= 1)
      v4 = 1;
    else
      v4 = v4;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v7);
      v9 = *(_DWORD **)(v8 + 40);
      if (*v9)
      {
        v10 = 0;
        do
        {
          *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v9[++v10]) = v8;
          v9 = *(_DWORD **)(v8 + 40);
        }
        while (v10 < *v9);
      }
      ++v7;
    }
    while (v7 != v4);
  }
  else
  {
    *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * a2) = a3;
  }
  return result;
}

uint64_t physx::Sq::CompoundTree::removeObject(physx::Sq::CompoundTree *this, unsigned int a2)
{
  physx::Sq::PruningPool *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *i;

  v3 = (physx::Sq::PruningPool *)*((_QWORD *)this + 1);
  v4 = *(unsigned int *)(*((_QWORD *)v3 + 3) + 4 * a2);
  v5 = physx::Sq::PruningPool::removeObject(v3, a2);
  result = physx::Sq::IncrementalAABBTree::remove(*(_QWORD *)this, *(float32x4_t **)(**((_QWORD **)this + 2) + 8 * v4), v4, *(_QWORD *)(*((_QWORD *)this + 1) + 8));
  if (result)
  {
    if (!*(_QWORD *)(result + 48))
    {
      v7 = *(_DWORD **)(result + 40);
      if (*v7)
      {
        v8 = 0;
        do
        {
          *(_QWORD *)(**((_QWORD **)this + 2) + 8 * v7[++v8]) = result;
          v7 = *(_DWORD **)(result + 40);
        }
        while (v8 < *v7);
      }
    }
  }
  *(_QWORD *)(**((_QWORD **)this + 2) + 8 * v4) = *(_QWORD *)(**((_QWORD **)this + 2) + 8 * v5);
  if (v5 != (_DWORD)v4)
  {
    v9 = *(unsigned int **)(*(_QWORD *)(**((_QWORD **)this + 2) + 8 * v4) + 40);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      for (i = v9 + 1; *i != v5; ++i)
      {
        if (!--v10)
          return result;
      }
      *i = v4;
    }
  }
  return result;
}

uint64_t physx::Sq::PruningPool::removeObject(physx::Sq::PruningPool *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  v3 = *(unsigned int *)(v2 + 4 * a2);
  v4 = (*(_DWORD *)this - 1);
  *(_DWORD *)this = v4;
  if ((_DWORD)v4 != (_DWORD)v3)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    v7 = v5 + 24 * v4;
    v8 = v5 + 24 * v3;
    v9 = *(unsigned int *)(*((_QWORD *)this + 4) + 4 * v4);
    *(_OWORD *)v8 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)(v6 + 16 * v3) = *(_OWORD *)(v6 + 16 * v4);
    v2 = *((_QWORD *)this + 3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v3) = v9;
    *(_DWORD *)(v2 + 4 * v9) = v3;
  }
  *(_DWORD *)(v2 + 4 * a2) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = a2;
  return v4;
}

uint64_t physx::Sq::CompoundTree::addObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  float32x4_t *v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v5 = (unsigned int *)a2;
  *(_QWORD *)&v11 = a4;
  *((_QWORD *)&v11 + 1) = a5;
  physx::Sq::PruningPool::addObjects(*(physx::Sq::PruningPool **)(a1 + 8), a2, a3, &v11, 1u);
  LODWORD(v5) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 4 * *v5);
  v9 = 0;
  v10 = 0;
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)&v9, 8u);
  v7 = physx::Sq::IncrementalAABBTree::insert(*(_QWORD *)a1, v5, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v9);
  physx::Sq::CompoundTree::updateMapping(a1, v5, (uint64_t)v7, (uint64_t)&v9);
  if ((v10 & 0x8000000000000000) == 0 && (v10 & 0x7FFFFFFF00000000) != 0 && v9)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return 1;
}

uint64_t physx::Sq::PruningPool::addObjects(physx::Sq::PruningPool *this, uint64_t a2, uint64_t a3, __int128 *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (!a5)
  {
    LODWORD(v9) = 0;
    goto LABEL_16;
  }
  v9 = 0;
  v10 = (uint64_t *)(a3 + 16);
  while (1)
  {
    v11 = *(_DWORD *)this;
    if (*(_DWORD *)this == *((_DWORD *)this + 1))
      break;
LABEL_9:
    *(_DWORD *)this = v11 + 1;
    v14 = *((unsigned int *)this + 10);
    if ((_DWORD)v14 == -1)
    {
      v14 = v11;
      v15 = v11;
    }
    else
    {
      *((_DWORD *)this + 10) = *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v14);
      v15 = v14;
    }
    v16 = *((_QWORD *)this + 2);
    v17 = (_QWORD *)(*((_QWORD *)this + 1) + 24 * v11);
    *v17 = *(v10 - 2);
    v17[1] = *(v10 - 1);
    v18 = *v10;
    v10 += 3;
    v17[2] = v18;
    v19 = *a4++;
    *(_OWORD *)(v16 + 16 * v11) = v19;
    v20 = *((_QWORD *)this + 3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v11) = v15;
    *(_DWORD *)(v20 + 4 * v14) = v11;
    *(_DWORD *)(a2 + 4 * v9++) = v15;
    if (a5 == v9)
    {
      LODWORD(v9) = a5;
      goto LABEL_16;
    }
  }
  v12 = 2 * v11;
  if (v12 <= 0x40)
    v13 = 64;
  else
    v13 = v12;
  if (physx::Sq::PruningPool::resize(this, v13))
  {
    v11 = *(_DWORD *)this;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 4 * v9) = -1;
LABEL_16:
  if (v9 >= a5)
    return a5;
  else
    return v9;
}

void physx::Sq::CompoundTreePool::~CompoundTreePool(physx::Sq::CompoundTreePool *this)
{
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 2) = 0;
}

uint64_t physx::Sq::CompoundTreePool::resize(physx::Sq::CompoundTreePool *this, unsigned int a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  const void *v8;

  if (a2 == -1)
  {
    v4 = 0;
    v5 = 0x37FFFFFFC8;
  }
  else
  {
    v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 152);
    v5 = 56 * a2;
    if (!a2)
    {
      bzero(0, 56 * a2);
      v6 = 0;
      goto LABEL_16;
    }
  }
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 153);
  bzero(v6, v5 & 0xFFFFFFF8);
  if (v4 && v6)
  {
    v7 = (const void *)*((_QWORD *)this + 1);
    if (v7)
      memcpy(v4, v7, (24 * *(_DWORD *)this));
    v8 = (const void *)*((_QWORD *)this + 2);
    if (v8)
      memcpy(v6, v8, (56 * *(_DWORD *)this));
    *((_DWORD *)this + 1) = a2;
    if (*((_QWORD *)this + 1))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1) = 0;
    if (*((_QWORD *)this + 2))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1) = v4;
    *((_QWORD *)this + 2) = v6;
    return 1;
  }
LABEL_16:
  if (v4)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  if (v6)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return 0;
}

float physx::Sq::CompoundTreePool::shiftOrigin(unsigned int *a1, float32x2_t *a2)
{
  uint64_t v2;
  float *v3;
  float32x2_t *v4;
  float result;

  v2 = *a1;
  if ((_DWORD)v2)
  {
    v3 = (float *)(*((_QWORD *)a1 + 2) + 48);
    v4 = (float32x2_t *)(*((_QWORD *)a1 + 1) + 12);
    do
    {
      *(float32x2_t *)((char *)v4 - 12) = vsub_f32(*(float32x2_t *)((char *)v4 - 12), *a2);
      v4[-1].f32[1] = v4[-1].f32[1] - a2[1].f32[0];
      *v4 = vsub_f32(*v4, *a2);
      v4[1].f32[0] = v4[1].f32[0] - a2[1].f32[0];
      *((float32x2_t *)v3 - 1) = vsub_f32(*(float32x2_t *)(v3 - 2), *a2);
      result = *v3 - a2[1].f32[0];
      *v3 = result;
      v3 += 14;
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t physx::Sq::CompoundTreePool::addCompound(physx::Sq::CompoundTreePool *this, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6, __int128 *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  physx::Sq::PruningPool *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  char v32;

  v14 = *(unsigned int *)this;
  if ((_DWORD)v14 == *((_DWORD *)this + 1))
  {
    if ((2 * v14) <= 0x20)
      v15 = 32;
    else
      v15 = 2 * v14;
    if (!physx::Sq::CompoundTreePool::resize(this, v15))
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 207, "CompoundTreePool::addCompound memory allocation in resize failed.", v16, v17, v18, v32);
      return 0xFFFFFFFFLL;
    }
    v14 = *(unsigned int *)this;
  }
  *(_DWORD *)this = v14 + 1;
  v19 = (_QWORD *)(*((_QWORD *)this + 1) + 24 * v14);
  *v19 = *a4;
  v19[1] = a4[1];
  v19[2] = a4[2];
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3);
  v21 = *((_QWORD *)this + 2);
  v22 = v21 + 56 * v14;
  *(_OWORD *)(v22 + 24) = *(_OWORD *)a5;
  *(_QWORD *)(v22 + 40) = *(_QWORD *)(a5 + 16);
  *(_DWORD *)(v22 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(v22 + 52) = a6;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 48, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 228);
  v24 = (physx::Sq::PruningPool *)v23;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_QWORD *)(v23 + 32) = 0;
  *(_DWORD *)(v23 + 40) = -1;
  if (v20)
    physx::Sq::PruningPool::resize((physx::Sq::PruningPool *)v23, v20);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
  physx::Sq::PruningPool::addObjects(v24, a2, v25, a7, v20);
  v26 = v21 + 56 * v14;
  *(_QWORD *)(v26 + 8) = v24;
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 234);
  *v27 = 0;
  v27[1] = 0;
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resizeUninitialized((uint64_t)v27, v20);
  *(_QWORD *)(v26 + 16) = v27;
  v28 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTree>::getName() [T = physx::S"
          "q::IncrementalAABBTree]";
  else
    v29 = "<allocation names disabled>";
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v28 + 24) + 16))(v28 + 24, 1184, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 238);
  *(_QWORD *)(v30 + 544) = 0x4000000000;
  *(_BYTE *)(v30 + 528) = 1;
  *(_QWORD *)(v30 + 536) = v30 + 16;
  *(_QWORD *)(v30 + 552) = 256;
  *(_DWORD *)(v30 + 560) = 5120;
  *(_QWORD *)(v30 + 568) = 0;
  *(_QWORD *)(v30 + 1112) = 0x4000000000;
  *(_BYTE *)(v30 + 1096) = 1;
  *(_QWORD *)(v30 + 1104) = v30 + 584;
  *(_QWORD *)(v30 + 1120) = 256;
  *(_DWORD *)(v30 + 1128) = 0x8000;
  *(_OWORD *)(v30 + 1136) = 0u;
  *(_OWORD *)(v30 + 1152) = 0u;
  *(_OWORD *)(v30 + 1168) = 0u;
  physx::Sq::IncrementalAABBTree::copy(v30, a3, v27);
  *(_QWORD *)v22 = v30;
  return v14;
}

float physx::Sq::CompoundTreePool::removeCompound(physx::Sq::CompoundTreePool *this, unsigned int a2)
{
  uint64_t v4;
  physx::Sq::IncrementalAABBTree *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  float result;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;

  v4 = a2;
  v5 = *(physx::Sq::IncrementalAABBTree **)(*((_QWORD *)this + 2) + 56 * a2);
  v6 = (_QWORD *)*((_QWORD *)v5 + 143);
  if (v6)
  {
    physx::Sq::IncrementalAABBTree::releaseNode((uint64_t)v5, v6);
    *((_QWORD *)v5 + 143) = 0;
    v5 = *(physx::Sq::IncrementalAABBTree **)(*((_QWORD *)this + 2) + 56 * v4);
  }
  physx::Sq::IncrementalAABBTree::~IncrementalAABBTree(v5);
  v7 = *((_QWORD *)this + 2);
  if (*(_QWORD *)(v7 + 56 * v4))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v7 = *((_QWORD *)this + 2);
  }
  v8 = (_QWORD *)(v7 + 56 * v4);
  *v8 = 0;
  v9 = v8[2];
  *(_DWORD *)(v9 + 8) = 0;
  v10 = *(_DWORD *)(v9 + 12);
  if (v10 < 0
    || ((v10 & 0x7FFFFFFF) != 0 ? (v11 = *(_QWORD *)v9 == 0) : (v11 = 1),
        v11
     || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(_QWORD *)v9), v12 = *((_QWORD *)this + 2), *(_QWORD *)(v12 + 56 * v4 + 16))))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v12 = *((_QWORD *)this + 2);
  }
  v13 = v12 + 56 * v4;
  *(_QWORD *)(v13 + 16) = 0;
  physx::Sq::PruningPool::~PruningPool(*(physx::Sq::PruningPool **)(v13 + 8));
  v15 = *((_QWORD *)this + 2);
  if (*(_QWORD *)(v15 + 56 * v4 + 8))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v15 = *((_QWORD *)this + 2);
  }
  *(_QWORD *)(v15 + 56 * v4 + 8) = 0;
  v16 = *(_DWORD *)this - 1;
  *(_DWORD *)this = v16;
  if (v16 != a2)
  {
    v17 = *((_QWORD *)this + 1);
    v18 = v17 + 24 * v16;
    v19 = v17 + 24 * v4;
    *(_OWORD *)v19 = *(_OWORD *)v18;
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
    v20 = 56 * v16;
    v21 = (__int128 *)(v15 + v20);
    v22 = v15 + 56 * v4;
    v23 = *v21;
    *(_QWORD *)(v22 + 16) = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 24) = *(__int128 *)((char *)v21 + 24);
    *(_QWORD *)(v22 + 40) = *((_QWORD *)v21 + 5);
    result = *((float *)v21 + 12);
    *(float *)(v22 + 48) = result;
    *(_DWORD *)(v22 + 52) = *((_DWORD *)v21 + 13);
    v24 = (_QWORD *)(*((_QWORD *)this + 2) + v20);
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
  }
  return result;
}

uint64_t physx::Sq::BucketPrunerNode::classifyBoxes(uint64_t result, unsigned int a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, int a7, int a8, float32_t a9, float a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  int v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  _BYTE v38[168];
  uint64_t v39;

  v10 = 0;
  v39 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  do
  {
    *(_OWORD *)&v38[v10 + 80] = xmmword_2261A9070;
    *(_OWORD *)&v38[v10] = xmmword_2261A9080;
    v10 += 16;
  }
  while (v10 != 80);
  v11 = 2;
  if (a8 != 1)
    v11 = 1;
  if (a7)
    v12 = 16;
  else
    v12 = 0;
  v13 = a2;
  v14 = (float32x4_t *)a3;
  v15 = a2;
  do
  {
    v16 = v14[1];
    v17 = vsubq_f32(*v14, v16);
    v18 = vaddq_f32(*v14, v16);
    v19 = gCodes[v12 | (v17.f32[0] > a9) | (2 * (v18.f32[0] < a9)) | (4
                                                                      * ((float)(v14->f32[v11] - v14[1].f32[v11]) > a10)) | (8 * ((float)(v14->f32[v11] + v14[1].f32[v11]) < a10))];
    v20 = vminq_f32(*(float32x4_t *)&v38[16 * v19 + 80], v17);
    v21 = *(float32x4_t *)&v38[16 * v19];
    *(float32x4_t *)&v38[16 * v19 + 80] = v20;
    *(float32x4_t *)&v38[16 * v19] = vmaxq_f32(v21, v18);
    v14->i32[3] = v19;
    ++*(_DWORD *)(result + 4 * v19);
    v14 += 2;
    --v15;
  }
  while (v15);
  v22 = 0;
  v23 = 0;
  *(_DWORD *)(result + 20) = 0;
  do
  {
    v23 += *(_DWORD *)(result + v22);
    *(_DWORD *)(result + v22 + 24) = v23;
    v22 += 4;
  }
  while (v22 != 16);
  v24 = (__int128 *)(a3 + 16);
  do
  {
    v25 = result + 4 * *((unsigned int *)v24 - 1);
    v26 = *(unsigned int *)(v25 + 20);
    *(_DWORD *)(v25 + 20) = v26 + 1;
    v27 = (_OWORD *)(a5 + 32 * v26);
    *v27 = *(v24 - 1);
    v28 = *v24;
    v24 += 2;
    v27[1] = v28;
    v29 = *a4++;
    *(_OWORD *)(a6 + 16 * v26) = v29;
    --v13;
  }
  while (v13);
  v30 = 0;
  *(_DWORD *)(result + 20) = 0;
  do
  {
    v30 += *(_DWORD *)(result + v13);
    *(_DWORD *)(result + v13 + 24) = v30;
    v13 += 4;
  }
  while (v13 != 16);
  v31 = 0;
  v32 = (_DWORD *)(result + 72);
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  do
  {
    v34 = *(float32x4_t *)&v38[v31 + 80];
    v35 = *(float32x4_t *)&v38[v31];
    v36 = vmulq_f32(vaddq_f32(v34, v35), v33);
    v37 = vmulq_f32(vsubq_f32(v35, v34), v33);
    *((_QWORD *)v32 - 3) = v36.i64[0];
    *(v32 - 4) = v36.i32[2];
    *((_QWORD *)v32 - 1) = v37.i64[0];
    *v32 = v37.i32[2];
    v31 += 16;
    v32 += 8;
  }
  while (v31 != 80);
  return result;
}

void *processChildBuckets(void *result, const void *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  float32_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  __int128 *v18;
  uint64_t v19;

  v9 = result;
  v10 = 0;
  if (a7 == 1)
    v11 = 2;
  else
    v11 = 1;
  v12 = (float32_t *)(a3 + 12);
  v13 = a3;
  do
  {
    v15 = *v13++;
    v14 = v15;
    if (v15)
    {
      v16 = a3[5];
      v17 = (void *)(a5 + 32 * v16);
      v18 = (__int128 *)(a6 + 16 * v16);
      physx::Sq::BucketPrunerNode::classifyBoxes(a4 + v10, v14, (uint64_t)v17, v18, (uint64_t)v9, (uint64_t)a2, v10 == 896, a7, *v12, v12[v11]);
      memcpy(v17, v9, 32 * v14);
      result = memcpy(v18, a2, 16 * v14);
    }
    else
    {
      v19 = a4 + v10;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      *(_DWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 28) = 0;
      *(_QWORD *)(v19 + 20) = 0;
      *(_DWORD *)(v19 + 36) = 0;
    }
    v10 += 224;
    v12 += 8;
    a3 = v13;
  }
  while (v10 != 1120);
  return result;
}

uint64_t gPrecomputeSort(uint64_t result)
{
  __int16 v1;
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint32x4_t v8;
  unsigned __int128 v9;
  unsigned __int128 v10;
  unsigned __int128 v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  unsigned __int128 v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint32x4_t v38;
  int32x4_t v39;
  uint32x4_t v40;
  int32x4_t v41;
  uint32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  char v68;
  char v69;
  char v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  char v88;
  char v89;
  char v90;
  char v91;
  __int32 v92;
  __int32 v93;
  __int32 v94;
  __int32 v95;
  __int32 v96;

  if ((vaddvq_s32(*(int32x4_t *)result) + *(_DWORD *)(result + 16)) > 0xF)
  {
    v2.i32[0] = v92;
    v3.i32[0] = v93;
    v4.i32[0] = v94;
    v5.i32[0] = v95;
    v6.i32[0] = v96;
    v2.i32[1] = v92;
    v3.i32[1] = v93;
    v4.i32[1] = v94;
    v5.i32[1] = v95;
    v6.i32[1] = v96;
    v2.i32[2] = v92;
    v3.i32[2] = v93;
    v4.i32[2] = v94;
    v5.i32[2] = v95;
    v6.i32[2] = v96;
    v2.i32[3] = v92;
    v7 = (int8x16_t)vdupq_n_s32(0x7FFFFFF8u);
    v3.i32[3] = v93;
    v8 = (uint32x4_t)vandq_s8(v2, v7);
    v9 = *(_OWORD *)&vandq_s8(v3, v7) | __PAIR128__(0x100000001, 0x100000001);
    v4.i32[3] = v94;
    v10 = *(_OWORD *)&vandq_s8(v4, v7) | __PAIR128__(0x200000002, 0x200000002);
    v5.i32[3] = v95;
    v11 = *(_OWORD *)&vandq_s8(v5, v7) | __PAIR128__(0x300000003, 0x300000003);
    v12 = vmaxq_u32((uint32x4_t)v9, v8);
    v13 = vmaxq_u32((uint32x4_t)v10, v12);
    v14 = vminq_u32((uint32x4_t)v9, v8);
    v15 = vminq_u32((uint32x4_t)v10, v12);
    v16 = vminq_u32((uint32x4_t)v11, v13);
    v6.i32[3] = v96;
    v17 = *(_OWORD *)&vandq_s8(v6, v7) | __PAIR128__(0x400000004, 0x400000004);
    v18 = vmaxq_u32((uint32x4_t)v11, v13);
    v19 = vminq_u32((uint32x4_t)v17, v18);
    v20 = vmaxq_u32(v15, v14);
    v21 = vmaxq_u32(v16, v20);
    v22 = vmaxq_u32((uint32x4_t)v17, v18);
    v23 = vminq_u32(v15, v14);
    v24 = vminq_u32(v16, v20);
    v25 = vminq_u32(v19, v21);
    v26 = vmaxq_u32(v19, v21);
    v27 = vminq_u32(v22, v26);
    v28 = vmaxq_u32(v22, v26);
    v29 = vminq_u32(v24, v23);
    v30 = vmaxq_u32(v24, v23);
    v31 = vminq_u32(v25, v30);
    v32 = vmaxq_u32(v25, v30);
    v33 = vminq_u32(v27, v32);
    v34 = vmaxq_u32(v27, v32);
    v35 = vminq_u32(v28, v34);
    v36 = (int8x16_t)vmaxq_u32(v28, v34);
    v37 = (int8x16_t)vminq_u32(v31, v29);
    v38 = vmaxq_u32(v31, v29);
    v39 = (int32x4_t)vminq_u32(v33, v38);
    v40 = vmaxq_u32(v33, v38);
    v41 = (int32x4_t)vminq_u32(v35, v40);
    v42 = vmaxq_u32(v35, v40);
    v43 = (int32x4_t)vminq_u32((uint32x4_t)v36, v42);
    v44 = (int32x4_t)vmaxq_u32((uint32x4_t)v36, v42);
    v36.i64[0] = 0x700000007;
    v36.i64[1] = 0x700000007;
    v45 = vandq_s8(v37, v36);
    v46 = (int8x16_t)vshlq_n_s32(v39, 3uLL);
    v39.i64[0] = 0x3800000038;
    v39.i64[1] = 0x3800000038;
    v47 = vorrq_s8(vandq_s8(v46, (int8x16_t)v39), v45);
    v48 = (int8x16_t)vdupq_n_s32(0x1C0u);
    v39.i64[0] = 0xE0000000E00;
    v39.i64[1] = 0xE0000000E00;
    v49 = vorrq_s8(vorrq_s8(v47, vandq_s8((int8x16_t)vshlq_n_s32(v41, 6uLL), v48)), vandq_s8((int8x16_t)vshlq_n_s32(v43, 9uLL), (int8x16_t)v39));
    v41.i64[0] = 0x700000007000;
    v41.i64[1] = 0x700000007000;
    *(int16x4_t *)(result + 208) = vmovn_s32((int32x4_t)vorrq_s8(v49, vandq_s8((int8x16_t)vshlq_n_s32(v44, 0xCuLL), (int8x16_t)v41)));
    v49.i32[0] = v92;
    v44.i32[0] = v93;
    v41.i32[0] = v94;
    v39.i32[0] = v95;
    v43.i32[0] = v96;
    v49.i32[1] = v92;
    *(int8x8_t *)v49.i8 = vand_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v7.i8);
    v44.i32[1] = v93;
    v41.i32[1] = v94;
    v44.i64[0] = *(_QWORD *)&vand_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v7.i8) | 0x100000001;
    v41.i64[0] = *(_QWORD *)&vand_s8(*(int8x8_t *)v41.i8, *(int8x8_t *)v7.i8) | 0x200000002;
    v39.i32[1] = v95;
    v39.i64[0] = *(_QWORD *)&vand_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v7.i8) | 0x300000003;
    *(uint32x2_t *)v20.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v21.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v49.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v44.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v21.i8);
    v43.i32[1] = v96;
    v7.i64[0] = *(_QWORD *)&vand_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v7.i8) | 0x400000004;
    *(uint32x2_t *)v39.i8 = vmax_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v21.i8);
    *(uint32x2_t *)v43.i8 = vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v20.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v21.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v7.i8 = vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v49.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v44.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v21.i8);
    *(uint32x2_t *)v39.i8 = vmax_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v21.i8);
    *(uint32x2_t *)v43.i8 = vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v7.i8 = vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v39.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v44.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmax_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v43.i8 = vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v7.i8 = vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v44.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v39.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v44.i8);
    *(uint32x2_t *)v44.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v44.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v44.i8);
    *(uint32x2_t *)v44.i8 = vmax_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v44.i8);
    *(int8x8_t *)v7.i8 = vorr_s8(vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v39.i8, 3uLL), (int8x8_t)0x3800000038), vand_s8(*(int8x8_t *)v49.i8, (int8x8_t)0x700000007)), vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v41.i8, 6uLL), *(int8x8_t *)v48.i8)), vand_s8((int8x8_t)vshl_n_s32((int32x2_t)vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v44.i8), 9uLL), (int8x8_t)0xE0000000E00)), vand_s8((int8x8_t)vshl_n_s32((int32x2_t)vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v44.i8), 0xCuLL), (int8x8_t)0x700000007000));
    *(_WORD *)(result + 218) = v7.i16[2];
    *(_WORD *)(result + 216) = v7.i16[0];
    v50 = v92 & 0x7FFFFFF8;
    v51 = v93 & 0x7FFFFFF8 | 1;
    v52 = v94 & 0x7FFFFFF8 | 2;
    v53 = v95 & 0x7FFFFFF8 | 3;
    v54 = v96 & 0x7FFFFFF8 | 4;
    if (v51 >= (v92 & 0x7FFFFFF8u))
      v55 = v92 & 0x7FFFFFF8;
    else
      v55 = v93 & 0x7FFFFFF8 | 1;
    if (v51 > v50)
      v50 = v93 & 0x7FFFFFF8 | 1;
    if (v52 >= v50)
      v56 = v50;
    else
      v56 = v94 & 0x7FFFFFF8 | 2;
    if (v52 > v50)
      v50 = v94 & 0x7FFFFFF8 | 2;
    if (v53 >= v50)
      v57 = v50;
    else
      v57 = v95 & 0x7FFFFFF8 | 3;
    if (v53 > v50)
      v50 = v95 & 0x7FFFFFF8 | 3;
    if (v54 >= v50)
      v58 = v50;
    else
      v58 = v96 & 0x7FFFFFF8 | 4;
    if (v54 <= v50)
      v54 = v50;
    if (v56 >= v55)
      v59 = v55;
    else
      v59 = v56;
    if (v56 <= v55)
      v56 = v55;
    if (v57 >= v56)
      v60 = v56;
    else
      v60 = v57;
    if (v57 > v56)
      v56 = v57;
    if (v58 >= v56)
      v61 = v56;
    else
      v61 = v58;
    if (v58 > v56)
      v56 = v58;
    if (v54 >= v56)
      v62 = v56;
    else
      v62 = v54;
    if (v54 <= v56)
      v54 = v56;
    if (v60 >= v59)
      v63 = v59;
    else
      v63 = v60;
    if (v60 > v59)
      v59 = v60;
    if (v61 >= v59)
      v64 = v59;
    else
      v64 = v61;
    if (v61 > v59)
      v59 = v61;
    if (v62 >= v59)
      v65 = v59;
    else
      v65 = v62;
    if (v62 > v59)
      v59 = v62;
    if (v54 >= v59)
      v66 = v59;
    else
      v66 = v54;
    if (v54 <= v59)
      v54 = v59;
    if (v64 >= v63)
      v67 = v63;
    else
      v67 = v64;
    if (v64 > v63)
      v63 = v64;
    if (v65 >= v63)
      v68 = v63;
    else
      v68 = v65;
    if (v65 > v63)
      v63 = v65;
    if (v66 >= v63)
      v69 = v63;
    else
      v69 = v66;
    if (v66 > v63)
      v63 = v66;
    if (v54 >= v63)
      v70 = v63;
    else
      v70 = v54;
    if (v54 <= v63)
      LOBYTE(v54) = v63;
    *(_WORD *)(result + 220) = v67 & 7 | (8 * (v68 & 7)) & 0x3F | ((v69 & 7) << 6) & 0x81FF | ((v70 & 7) << 9) & 0x8FFF | ((v54 & 7) << 12);
    v71 = v92 & 0x7FFFFFF8;
    v72 = v93 & 0x7FFFFFF8 | 1;
    v73 = v94 & 0x7FFFFFF8 | 2;
    v74 = v95 & 0x7FFFFFF8 | 3;
    v75 = v96 & 0x7FFFFFF8 | 4;
    if (v72 >= (v92 & 0x7FFFFFF8u))
      v76 = v92 & 0x7FFFFFF8;
    else
      v76 = v93 & 0x7FFFFFF8 | 1;
    if (v72 > v71)
      v71 = v93 & 0x7FFFFFF8 | 1;
    if (v73 >= v71)
      v77 = v71;
    else
      v77 = v94 & 0x7FFFFFF8 | 2;
    if (v73 > v71)
      v71 = v94 & 0x7FFFFFF8 | 2;
    if (v74 >= v71)
      v78 = v71;
    else
      v78 = v95 & 0x7FFFFFF8 | 3;
    if (v74 > v71)
      v71 = v95 & 0x7FFFFFF8 | 3;
    if (v75 >= v71)
      v79 = v71;
    else
      v79 = v96 & 0x7FFFFFF8 | 4;
    if (v75 <= v71)
      v75 = v71;
    if (v77 >= v76)
      v80 = v76;
    else
      v80 = v77;
    if (v77 <= v76)
      v77 = v76;
    if (v78 >= v77)
      v81 = v77;
    else
      v81 = v78;
    if (v78 > v77)
      v77 = v78;
    if (v79 >= v77)
      v82 = v77;
    else
      v82 = v79;
    if (v79 > v77)
      v77 = v79;
    if (v75 >= v77)
      v83 = v77;
    else
      v83 = v75;
    if (v75 <= v77)
      v75 = v77;
    if (v81 >= v80)
      v84 = v80;
    else
      v84 = v81;
    if (v81 > v80)
      v80 = v81;
    if (v82 >= v80)
      v85 = v80;
    else
      v85 = v82;
    if (v82 > v80)
      v80 = v82;
    if (v83 >= v80)
      v86 = v80;
    else
      v86 = v83;
    if (v83 > v80)
      v80 = v83;
    if (v75 >= v80)
      v87 = v80;
    else
      v87 = v75;
    if (v75 <= v80)
      v75 = v80;
    if (v85 >= v84)
      v88 = v84;
    else
      v88 = v85;
    if (v85 > v84)
      v84 = v85;
    if (v86 >= v84)
      v89 = v84;
    else
      v89 = v86;
    if (v86 > v84)
      v84 = v86;
    if (v87 >= v84)
      v90 = v84;
    else
      v90 = v87;
    if (v87 > v84)
      v84 = v87;
    if (v75 >= v84)
      v91 = v84;
    else
      v91 = v75;
    if (v75 > v84)
      LOBYTE(v84) = v75;
    v1 = v88 & 7 | (8 * (v89 & 7)) & 0x3F | ((v90 & 7) << 6) & 0x81FF | ((v91 & 7) << 9) & 0x8FFF | ((v84 & 7) << 12);
  }
  else
  {
    v1 = 18056;
    *(int16x4_t *)(result + 208) = vdup_n_s16(0x4688u);
    *(_DWORD *)(result + 216) = 1183336072;
    *(_WORD *)(result + 220) = 18056;
  }
  *(_WORD *)(result + 222) = v1;
  return result;
}

uint64_t BucketPrunerOverlapTraversal<OBBAABBTest_SIMD,false>::operator()(float32x4_t *a1, float32x4_t *a2, uint64_t (***a3)(_QWORD, int *, uint64_t), uint64_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  float32x4_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  float *v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  unsigned int v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x8_t v32;
  uint64_t result;
  __n128 v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x8_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x8_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x8_t v112;
  float32x4_t *v113;
  uint64_t v114;
  __int32 *v115;
  __int32 *v116;
  uint64_t (***v117)(_QWORD, int *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  float32x4_t *v120;
  int v121;
  int v122;

  v11 = a1;
  v12 = a1[3].u32[0];
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = &a1[3].i64[1];
    v15 = &a1[20].f32[3];
    do
    {
      v16 = *(v15 - 3);
      v17 = *(float32x2_t *)(v15 - 5);
      v18 = *(float32x2_t *)(v15 - 2);
      *(float32x2_t *)v24.f32 = vmul_f32(vadd_f32(v17, v18), (float32x2_t)0x3F0000003F000000);
      *(float *)&v19 = (float)(v16 + *v15) * 0.5;
      v20 = vsub_f32(v18, v17);
      v17.f32[0] = vmuls_lane_f32(0.5, v20, 1);
      v18.f32[0] = (float)(*v15 - v16) * 0.5;
      a8.i8[4] = 0;
      a8.i8[5] = 0;
      a8.i8[6] = 0;
      a8.i8[7] = 0;
      a8.i8[8] = 0;
      a8.i8[9] = 0;
      a8.i8[10] = 0;
      a8.i8[11] = 0;
      a8.i8[12] = 0;
      a8.i8[13] = 0;
      a8.i8[14] = 0;
      a8.i8[15] = 0;
      *(float *)a8.i32 = 0.5 * v20.f32[0];
      v21 = (float32x4_t)a8.u32[0];
      v21.i32[1] = v17.i32[0];
      v22 = v21;
      v22.i32[2] = v18.i32[0];
      v23 = a2[1];
      v24.i64[1] = v19;
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v23, v24), vaddq_f32(a2[8], v22))), *(int8x8_t *)v21.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v25 = vsubq_f32(v23, v24);
        v26 = vmulq_n_f32(a2[2], v25.f32[0]);
        v26.i32[3] = 0;
        v27 = vmlaq_lane_f32(v26, a2[3], *(float32x2_t *)v25.f32, 1);
        v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
        v28 = vmlaq_laneq_f32(v27, a2[4], v25, 2);
        v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
        v29 = vmlaq_n_f32(*a2, a2[5], *(float *)a8.i32);
        a8 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
        a8.i32[1] = 0;
        v29.i64[1] = a8.u32[0];
        v30 = vmlaq_lane_f32(v29, a2[6], *(float32x2_t *)v21.f32, 1);
        v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
        v31 = vmlaq_laneq_f32(v30, a2[7], v22, 2);
        v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
        v32 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v28), v31));
        if ((vuzp1_s8(v32, v32).u32[0] & 0xFFFFFF) == 0)
        {
          v121 = -1082130432;
          result = (**a3)(a3, &v121, (uint64_t)v14);
          if (!(_DWORD)result)
            return result;
          v12 = v11[3].u32[0];
        }
      }
      ++v13;
      v14 += 2;
      v15 += 6;
    }
    while (v13 < v12);
  }
  if (!v11[50].i32[2])
    return 1;
  a8.i32[0] = v11[53].i32[0];
  v34 = (__n128)a8;
  v34.n128_u32[1] = v11[53].u32[1];
  v35 = (float32x4_t)v34;
  v35.i32[2] = v11[53].i32[2];
  v36 = a2[1];
  v37 = v11[52];
  v37.i64[1] = v11[52].u32[2];
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v36, v37), vaddq_f32(v35, a2[8]))), (int8x8_t)v34.n128_u64[0]).u32[0] & 0xFFFFFF) != 0)
    return 1;
  v38 = vsubq_f32(v36, v37);
  v39 = vmulq_n_f32(a2[2], v38.f32[0]);
  v39.i32[3] = 0;
  v40 = vmlaq_lane_f32(v39, a2[3], *(float32x2_t *)v38.f32, 1);
  v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
  v41 = vmlaq_laneq_f32(v40, a2[4], v38, 2);
  v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
  v42 = vmlaq_n_f32(*a2, a2[5], *(float *)a8.i32);
  v43 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
  v43.i32[1] = 0;
  v42.i64[1] = v43.u32[0];
  v44 = vmlaq_lane_f32(v42, a2[6], (float32x2_t)v34.n128_u64[0], 1);
  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
  v45 = vmlaq_laneq_f32(v44, a2[7], v35, 2);
  v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
  v46 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v41), v45));
  if ((vuzp1_s8(v46, v46).u32[0] & 0xFFFFFF) != 0)
    return 1;
  v117 = a3;
  v47 = 0;
  v48 = (int *)(a4 + 4 * v11[51].u32[0]);
  v49 = *v48;
  v50 = *v48 | 0x80000000;
  v51 = v48[3];
  if (v49 < 0)
    v52 = ~v49;
  else
    v52 = v50;
  if (v51 < 0)
    v53 = ~v51;
  else
    v53 = v51 | 0x80000000;
  v120 = v11 + 54;
  while (1)
  {
    if (v120->i32[v47])
    {
      v54 = &v11[2 * v47];
      v43.i32[0] = v54[58].i32[0];
      v55 = (float32x4_t)v43;
      v55.i32[1] = v54[58].i32[1];
      v56 = v55;
      v56.i32[2] = v54[58].i32[2];
      v57 = a2[1];
      v58.i64[0] = v54[57].i64[0];
      v58.i64[1] = v54[57].u32[2];
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v57, v58), vaddq_f32(v56, a2[8]))), *(int8x8_t *)v55.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v59 = vsubq_f32(v57, v58);
        v60 = vmulq_n_f32(a2[2], v59.f32[0]);
        v60.i32[3] = 0;
        v61 = vmlaq_lane_f32(v60, a2[3], *(float32x2_t *)v59.f32, 1);
        v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
        v62 = vmlaq_laneq_f32(v61, a2[4], v59, 2);
        v62.i64[1] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u32[0];
        v63 = vmlaq_n_f32(*a2, a2[5], *(float *)v43.i32);
        v43 = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL);
        v43.i32[1] = 0;
        v63.i64[1] = v43.u32[0];
        v64 = vmlaq_lane_f32(v63, a2[6], *(float32x2_t *)v55.f32, 1);
        v64.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u32[0];
        v65 = vmlaq_laneq_f32(v64, a2[7], v56, 2);
        v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
        v66 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v62), v65));
        if ((vuzp1_s8(v66, v66).u32[0] & 0xFFFFFF) == 0)
          break;
      }
    }
LABEL_38:
    if (++v47 == 5)
      return 1;
  }
  v67 = 0;
  v68 = (uint64_t)&v11[14 * v47 + 68];
  v115 = &v11[55].i32[v47 + 1];
  while (1)
  {
    if (*(_DWORD *)(v68 + 4 * v67))
    {
      v69 = (uint64_t)&v11[14 * v47 + 2 * v67];
      v43.i32[0] = *(_DWORD *)(v69 + 1152);
      v70 = (float32x4_t)v43;
      v70.i32[1] = *(_DWORD *)(v69 + 1156);
      v71 = v70;
      v71.i32[2] = *(_DWORD *)(v69 + 1160);
      v72 = a2[1];
      v73.i64[0] = *(_QWORD *)(v69 + 1136);
      v73.i64[1] = *(unsigned int *)(v69 + 1144);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v72, v73), vaddq_f32(v71, a2[8]))), *(int8x8_t *)v70.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v74 = vsubq_f32(v72, v73);
        v75 = vmulq_n_f32(a2[2], v74.f32[0]);
        v75.i32[3] = 0;
        v76 = vmlaq_lane_f32(v75, a2[3], *(float32x2_t *)v74.f32, 1);
        v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
        v77 = vmlaq_laneq_f32(v76, a2[4], v74, 2);
        v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
        v78 = vmlaq_n_f32(*a2, a2[5], *(float *)v43.i32);
        v43 = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL);
        v43.i32[1] = 0;
        v78.i64[1] = v43.u32[0];
        v79 = vmlaq_lane_f32(v78, a2[6], *(float32x2_t *)v70.f32, 1);
        v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
        v80 = vmlaq_laneq_f32(v79, a2[7], v71, 2);
        v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
        v81 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v77), v80));
        if ((vuzp1_s8(v81, v81).u32[0] & 0xFFFFFF) == 0)
          break;
      }
    }
LABEL_37:
    if (++v67 == 5)
      goto LABEL_38;
  }
  v82 = 0;
  v83 = (uint64_t)&v11[70 * v47 + 138 + 14 * v67];
  v116 = &v11[14 * v47 + 69].i32[v67 + 1];
  v118 = v83;
  v119 = v67;
  while (1)
  {
    v84 = *(_DWORD *)(v83 + 4 * v82);
    if (v84)
    {
      v85 = (uint64_t)&v11[70 * v47 + 14 * v67 + 2 * v82];
      v43.i32[0] = *(_DWORD *)(v85 + 2272);
      v86 = (float32x4_t)v43;
      v86.i32[1] = *(_DWORD *)(v85 + 2276);
      v87 = v86;
      v87.i32[2] = *(_DWORD *)(v85 + 2280);
      v88 = a2[1];
      v89.i64[0] = *(_QWORD *)(v85 + 2256);
      v89.i64[1] = *(unsigned int *)(v85 + 2264);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v88, v89), vaddq_f32(v87, a2[8]))), *(int8x8_t *)v86.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v90 = vsubq_f32(v88, v89);
        v91 = vmulq_n_f32(a2[2], v90.f32[0]);
        v91.i32[3] = 0;
        v92 = vmlaq_lane_f32(v91, a2[3], *(float32x2_t *)v90.f32, 1);
        v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
        v93 = vmlaq_laneq_f32(v92, a2[4], v90, 2);
        v93.i64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
        v94 = vmlaq_n_f32(*a2, a2[5], *(float *)v43.i32);
        v43 = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL);
        v43.i32[1] = 0;
        v94.i64[1] = v43.u32[0];
        v95 = vmlaq_lane_f32(v94, a2[6], *(float32x2_t *)v86.f32, 1);
        v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
        v96 = vmlaq_laneq_f32(v95, a2[7], v87, 2);
        v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
        v97 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v93), v96));
        if ((vuzp1_s8(v97, v97).u32[0] & 0xFFFFFF) == 0)
          break;
      }
    }
LABEL_36:
    if (++v82 == 5)
      goto LABEL_37;
  }
  v98 = (*v116 + *v115 + v11[70 * v47 + 139 + 14 * v67].i32[v82 + 1]);
  v99 = v11[2].i64[1] + 16 * v98;
  v100 = (unsigned int *)(v11[2].i64[0] + 32 * v98 + 16);
  while (1)
  {
    if (v100[3] >= v52)
    {
      if (*(v100 - 1) > v53)
        goto LABEL_36;
      v43.i32[1] = 0;
      v43.i64[1] = 0;
      v101 = (float32x4_t)*v100;
      v101.i32[1] = v100[1];
      v102 = v101;
      v102.i32[2] = v100[2];
      v103 = a2[1];
      v104.i64[0] = *((_QWORD *)v100 - 2);
      v104.i64[1] = *(v100 - 2);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v103, v104), vaddq_f32(v102, a2[8]))), *(int8x8_t *)v101.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v105 = vsubq_f32(v103, v104);
        v106 = vmulq_n_f32(a2[2], v105.f32[0]);
        v106.i32[3] = 0;
        v107 = vmlaq_lane_f32(v106, a2[3], *(float32x2_t *)v105.f32, 1);
        v107.i64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u32[0];
        v108 = vmlaq_laneq_f32(v107, a2[4], v105, 2);
        v108.i64[1] = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u32[0];
        v109 = vmlaq_n_f32(*a2, a2[5], *(float *)v100);
        v43 = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL);
        v43.i32[1] = 0;
        v109.i64[1] = v43.u32[0];
        v110 = vmlaq_lane_f32(v109, a2[6], *(float32x2_t *)v101.f32, 1);
        v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
        v111 = vmlaq_laneq_f32(v110, a2[7], v102, 2);
        v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
        v112 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v108), v111));
        if ((vuzp1_s8(v112, v112).u32[0] & 0xFFFFFF) == 0)
        {
          v122 = -1082130432;
          v113 = v11;
          v114 = v53;
          result = (**v117)(v117, &v122, v99);
          v83 = v118;
          v67 = v119;
          v53 = v114;
          v11 = v113;
          if (!(_DWORD)result)
            return result;
        }
      }
    }
    v99 += 16;
    v100 += 8;
    if (!--v84)
      goto LABEL_36;
  }
}

uint64_t visualize(_DWORD *a1, _QWORD *a2, double a3, double a4, float32x4_t a5)
{
  float v5;
  int32x2_t v6;
  float v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  __int128 v11;
  float v13;
  __int128 v14;
  float v15;
  char v16;

  v5 = *((float *)a2 + 4);
  v6 = *(int32x2_t *)a2;
  v7 = *((float *)a2 + 2);
  v8.i64[0] = *(_QWORD *)((char *)a2 + 20);
  v13 = COERCE_FLOAT(*a2) - v5;
  a5.i32[0] = vdup_lane_s32(v6, 1).u32[0];
  v9 = v7 + v8.f32[1];
  a5.f32[1] = v7;
  v10.i64[0] = a5.i64[0];
  v10.i64[1] = __PAIR64__(v8.u32[0], LODWORD(v5));
  *(int32x2_t *)&v8.u32[2] = v6;
  *(_QWORD *)&v11 = vsubq_f32(a5, v8).u64[0];
  *((_QWORD *)&v11 + 1) = vaddq_f32(v10, v8).i64[1];
  v14 = v11;
  v15 = v9;
  v16 = 1;
  return physx::Cm::operator<<(a1, (uint64_t *)&v13);
}

void physx::Sq::BucketPruner::~BucketPruner(physx::Sq::BucketPruner *this)
{
  char *v2;

  v2 = (char *)this + 7824;
  *(_QWORD *)this = &off_24ED909B8;
  physx::Sq::PruningPool::~PruningPool((physx::Sq::BucketPruner *)((char *)this + 7840));
  *v2 = 1;
  *((_QWORD *)this + 2) = 0;
  if (v2[1])
  {
    if (*((_QWORD *)this + 3))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 3) = 0;
    if (*((_QWORD *)this + 4))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 4) = 0;
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 5) = 0;
  }
  if (*((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 7))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 103) = 0;
  *((_DWORD *)this + 16) = 0;
  physx::Bp::PairManagerData::purge((uint64_t)this + 776);
  physx::Bp::PairManagerData::purge((uint64_t)this + 776);
}

{
  uint64_t v2;

  physx::Sq::BucketPruner::~BucketPruner(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sq::BucketPruner *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::Sq::BucketPruner::addObjects(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v8;
  int v9;

  v5 = 1;
  if (a5)
  {
    v8 = a1 + 7824;
    v9 = physx::Sq::PruningPool::addObjects((physx::Sq::PruningPool *)(a1 + 7840), a2, a3, a4, a5);
    *(_BYTE *)v8 = 1;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 7840);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v8 + 24);
    *(_QWORD *)(a1 + 40) = 0;
    return v9 == a5;
  }
  return v5;
}

__n128 physx::Sq::BucketPruner::removeObjects(physx::Sq::BucketPruner *this, unsigned int *a2, unsigned int a3)
{
  char *v5;
  physx::Sq::PruningPool *v6;
  uint64_t v7;
  unsigned int v8;
  __n128 result;

  if (a3)
  {
    v5 = (char *)this + 7824;
    v6 = (physx::Sq::BucketPruner *)((char *)this + 7840);
    v7 = a3;
    do
    {
      v8 = *a2++;
      physx::Sq::PruningPool::removeObject(v6, v8);
      --v7;
    }
    while (v7);
    *((_DWORD *)this + 4) = *((_DWORD *)this + 1960);
    result = *(__n128 *)(v5 + 24);
    *(__n128 *)((char *)this + 24) = result;
    *((_QWORD *)this + 5) = 0;
    *v5 = 1;
  }
  return result;
}

__n128 physx::Sq::BucketPruner::updateObjectsAfterManualBoundsUpdates(physx::Sq::BucketPruner *this, const unsigned int *a2, int a3)
{
  __n128 result;

  if (a3)
  {
    *((_DWORD *)this + 4) = *((_DWORD *)this + 1960);
    result = *(__n128 *)((char *)this + 7848);
    *(__n128 *)((char *)this + 24) = result;
    *((_QWORD *)this + 5) = 0;
    *((_BYTE *)this + 7824) = 1;
  }
  return result;
}

uint64_t physx::Sq::BucketPruner::updateObjectsAndInflateBounds(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  unsigned int v9;
  float32x4_t *v10;
  unsigned int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  uint64_t v17;

  if (a5)
  {
    v5 = *(_QWORD *)(result + 7864);
    v6 = *(_QWORD *)(result + 7848);
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x3BA3D70Au);
    do
    {
      v9 = *a2++;
      v10 = (float32x4_t *)(v6 + 24 * *(unsigned int *)(v5 + 4 * v9));
      v11 = *a3++;
      v12 = a4 + 24 * v11;
      v13 = *(float32x4_t *)(v12 + 12);
      v14 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v12), v8);
      v15 = vsubq_f32(*(float32x4_t *)v12, v14);
      v16 = (int8x16_t)vaddq_f32(v13, v14);
      v15.i32[3] = v16.i32[0];
      *v10 = v15;
      v10[1].i64[0] = vextq_s8(v16, v16, 4uLL).u64[0];
      --v7;
    }
    while (v7);
    v17 = *(_QWORD *)(result + 7856);
    *(_DWORD *)(result + 16) = *(_DWORD *)(result + 7840);
    *(_QWORD *)(result + 24) = v6;
    *(_QWORD *)(result + 32) = v17;
    *(_QWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 7824) = 1;
  }
  return result;
}

void physx::Sq::BucketPruner::commit(physx::Sq::BucketPruner *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  float *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int v22;
  float *v23;
  float v24;
  uint64_t v25;
  unsigned int *v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t i;
  uint64_t v76;
  uint64_t v77;
  uint64_t j;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  _QWORD v86[514];

  v2 = MEMORY[0x24BDAC7A8](this);
  v86[512] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v1 + 7824))
  {
    v3 = v1;
    *(_BYTE *)(v1 + 7824) = 0;
    v4 = *(unsigned int *)(v1 + 16);
    if ((_DWORD)v4)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, double))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 1093, v2);
      v6 = v5;
      v7 = 0;
      v8 = *(_QWORD **)(v3 + 32);
      v9 = v8;
      do
      {
        *(_QWORD *)(v5 + 8 * v7) = *v9;
        *v9 = v7;
        v9 += 2;
        ++v7;
      }
      while (v4 != v7);
      if (v4 <= 0x100)
      {
        v10 = (float *)v86;
        v11 = &v85;
      }
      else
      {
        v10 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 1108);
        v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 32 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 1109);
        v8 = *(_QWORD **)(v3 + 32);
      }
      v12 = *(_QWORD *)(v3 + 24);
      v13 = (v4 - 1);
      v14 = (float32x4_t *)(v12 + 24 * v13);
      v15 = *v14;
      v16.i32[0] = HIDWORD(*(unsigned __int128 *)v14);
      v16.i32[1] = v14[1].i32[0];
      v16.i64[1] = v14[1].u32[1];
      if ((_DWORD)v4 != 1)
      {
        v17 = *(_QWORD *)(v3 + 24);
        do
        {
          v15 = vminq_f32(v15, *(float32x4_t *)v17);
          v16 = vmaxq_f32(v16, *(float32x4_t *)(v17 + 12));
          v17 += 24;
          --v13;
        }
        while (v13);
      }
      v18 = 0;
      v19.i64[0] = 0x3F0000003F000000;
      v19.i64[1] = 0x3F0000003F000000;
      v20 = vmulq_f32(vaddq_f32(v16, v15), v19);
      v21 = vmulq_f32(vsubq_f32(v16, v15), v19);
      *(_QWORD *)(v3 + 848) = v20.i64[0];
      *(_DWORD *)(v3 + 856) = v20.i32[2];
      *(_QWORD *)(v3 + 864) = v21.i64[0];
      *(_DWORD *)(v3 + 872) = v21.i32[2];
      if (fabsf(v21.f32[1]) < fabsf(v21.f32[2]))
        v22 = 1;
      else
        v22 = 2;
      v23 = (float *)(v12 + 4 * v22);
      do
      {
        v24 = *v23;
        v23 += 6;
        v10[v18++] = v24;
      }
      while (v4 != v18);
      *(_QWORD *)&v82 = 0;
      v80 = 0u;
      v81 = 0u;
      BYTE8(v82) = 1;
      DWORD2(v79) = 0x80000000;
      *(_QWORD *)&v79 = &off_24ED90D50;
      physx::Cm::RadixSortBuffered::Sort((physx::Cm::RadixSortBuffered *)&v79, v10);
      v25 = 0;
      v26 = (unsigned int *)v80;
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      v28 = v4;
      do
      {
        v29 = *v26++;
        v30 = (float32x4_t *)(v12 + 24 * v29);
        v31.i32[0] = HIDWORD(*(unsigned __int128 *)v30);
        v31.i32[1] = v30[1].i32[0];
        v31.i64[1] = v30[1].u32[1];
        v32 = vmulq_f32(vaddq_f32(*v30, v31), v27);
        v33 = vmulq_f32(vsubq_f32(v31, *v30), v27);
        v34 = (float32x4_t *)&v11[16 * v25];
        *v34 = v32;
        v34[1] = v33;
        *(_OWORD *)&v10[2 * v25] = *(_OWORD *)&v8[2 * v29];
        v25 += 2;
        --v28;
      }
      while (v28);
      *(_QWORD *)&v79 = &off_24ED90D50;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v79);
      *(_DWORD *)(v3 + 832) = v22;
      *(_DWORD *)(v3 + 824) = v4;
      v35 = *(_DWORD *)(v3 + 828);
      if (v35 < v4 || v35 >> 1 > v4)
      {
        v37 = v4 | (v4 >> 1) | ((v4 | (v4 >> 1)) >> 2);
        v38 = v37 | (v37 >> 4) | ((v37 | (v37 >> 4)) >> 8);
        v39 = (v38 | HIWORD(v38)) + 1;
        *(_DWORD *)(v3 + 828) = v39;
        v40 = (32 * v39);
        if (*(_QWORD *)(v3 + 56))
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v41 = (16 * v39);
        if (*(_QWORD *)(v3 + 48))
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        if ((_DWORD)v40)
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, v40, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 484);
        else
          v42 = 0;
        *(_QWORD *)(v3 + 48) = v42;
        if ((_DWORD)v41)
          v36 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, v41, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 485);
        else
          v36 = 0;
        *(_QWORD *)(v3 + 56) = v36;
        v22 = *(_DWORD *)(v3 + 832);
      }
      else
      {
        v36 = *(_QWORD *)(v3 + 56);
      }
      v43 = 4;
      if (v22 == 1)
        v43 = 8;
      physx::Sq::BucketPrunerNode::classifyBoxes(v3 + 880, v4, (uint64_t)v11, (__int128 *)v10, *(_QWORD *)(v3 + 48), v36, 0, v22, *(float32_t *)(v3 + 848), *(float *)(v3 + 848 + v43));
      v44 = (unsigned int *)(v3 + 1104);
      processChildBuckets(v11, v10, (unsigned int *)(v3 + 880), v3 + 1104, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_DWORD *)(v3 + 832));
      v45 = 0;
      v46 = v3 + 2224;
      do
      {
        processChildBuckets(v11, v10, v44, v46, *(_QWORD *)(v3 + 48) + 32 * *(unsigned int *)(v3 + 900 + v45), *(_QWORD *)(v3 + 56) + 16 * *(unsigned int *)(v3 + 900 + v45), *(_DWORD *)(v3 + 832));
        v45 += 4;
        v46 += 1120;
        v44 += 56;
      }
      while (v45 != 20);
      v47 = *(_QWORD *)(v3 + 48);
      if (v4 <= 1)
        v48 = 1;
      else
        v48 = v4;
      v49 = 4 * *(unsigned int *)(v3 + 832);
      v50 = v48;
      do
      {
        v51 = *(float *)(v47 + v49);
        v52 = *(float *)(v47 + v49 + 16);
        v53 = v51 - v52;
        v54 = v51 + v52;
        if (v53 < 0.0)
          v55 = ~LODWORD(v53);
        else
          v55 = LODWORD(v53) | 0x80000000;
        *(_DWORD *)(v47 + 12) = v55;
        if (v54 < 0.0)
          v56 = ~LODWORD(v54);
        else
          v56 = LODWORD(v54) | 0x80000000;
        *(_DWORD *)(v47 + 28) = v56;
        v47 += 32;
        --v50;
      }
      while (v50);
      if (v4 > 0x100)
      {
        if (v11)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
        if (v10)
          (*(void (**)(uint64_t, float *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
      }
      v57 = 0;
      v58 = *(_QWORD **)(v3 + 56);
      v59 = *(_QWORD *)(v3 + 32);
      v60 = *(_QWORD *)(v3 + 40);
      do
      {
        v61 = *(unsigned int *)v58;
        v62 = *(_QWORD *)(v6 + 8 * v61);
        *v58 = v62;
        *(_QWORD *)(v59 + 16 * v61) = v62;
        if (v60)
          *(_DWORD *)(v60 + 4 * v61) = v57;
        ++v57;
        v58 += 2;
      }
      while (v48 != v57);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
      v63 = 0;
      __asm { FMOV            V0.4S, #1.0 }
      v79 = _Q0;
      v80 = xmmword_226130410;
      v81 = xmmword_2261A7190;
      v82 = xmmword_2261A9090;
      v83 = xmmword_2261A90A0;
      v84 = xmmword_2261A90A0;
      do
      {
        v69 = (float *)((char *)&v79 + v63);
        v71 = *(float *)((char *)&v79 + v63);
        v70 = *(float *)((char *)&v79 + v63 + 4);
        v72 = *(float *)((char *)&v79 + v63 + 8);
        v73 = sqrtf((float)((float)(v70 * v70) + (float)(v71 * v71)) + (float)(v72 * v72));
        if (v73 > 0.0)
        {
          v74 = 1.0 / v73;
          *(float *)((char *)&v79 + v63) = v71 * v74;
          v69[1] = v70 * v74;
          v69[2] = v72 * v74;
        }
        v63 += 12;
      }
      while (v63 != 96);
      gPrecomputeSort(v3 + 880);
      for (i = 0; i != 1120; i += 224)
        gPrecomputeSort(v3 + 1104 + i);
      v76 = 0;
      v77 = v3 + 2224;
      do
      {
        for (j = 0; j != 1120; j += 224)
          gPrecomputeSort(v77 + j);
        ++v76;
        v77 += 1120;
      }
      while (v76 != 5);
    }
    else
    {
      *(_DWORD *)(v1 + 824) = 0;
    }
  }
}

float32x2_t *physx::Sq::BucketPruner::shiftOrigin(float32x2_t *result, float32x2_t *a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  float32x2_t *v12;
  uint64_t v13;
  float32x2_t *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t i;
  float32x2_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  uint64_t j;
  float32x2_t *v27;
  uint64_t k;
  uint64_t v29;
  float32x2_t *v30;
  uint64_t m;
  float32x2_t *v32;

  v2 = result[8].u32[0];
  if ((_DWORD)v2)
  {
    v3 = (float *)&result[43] + 1;
    do
    {
      *(float32x2_t *)(v3 - 5) = vsub_f32(*(float32x2_t *)(v3 - 5), *a2);
      *(v3 - 3) = *(v3 - 3) - a2[1].f32[0];
      *((float32x2_t *)v3 - 1) = vsub_f32(*(float32x2_t *)(v3 - 2), *a2);
      *v3 = *v3 - a2[1].f32[0];
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  v4 = result[2].u32[0];
  result[106] = vsub_f32(result[106], *a2);
  result[107].f32[0] = result[107].f32[0] - a2[1].f32[0];
  v5 = result[104].u32[0];
  v6 = (float *)&result[106] + v5;
  v7 = v6[4];
  v8 = *v6 + v7;
  v9 = *v6 - v7;
  if (v9 < 0.0)
    v10 = ~LODWORD(v9);
  else
    v10 = LODWORD(v9) | 0x80000000;
  result[107].i32[1] = v10;
  if (v8 < 0.0)
    v11 = ~LODWORD(v8);
  else
    v11 = LODWORD(v8) | 0x80000000;
  result[109].i32[1] = v11;
  if ((_DWORD)v4)
  {
    v12 = (float32x2_t *)(*(_QWORD *)&result[3] + 12);
    do
    {
      *(float32x2_t *)((char *)v12 - 12) = vsub_f32(*(float32x2_t *)((char *)v12 - 12), *a2);
      v12[-1].f32[1] = v12[-1].f32[1] - a2[1].f32[0];
      *v12 = vsub_f32(*v12, *a2);
      v12[1].f32[0] = v12[1].f32[0] - a2[1].f32[0];
      v12 += 3;
      --v4;
    }
    while (v4);
  }
  v13 = result[103].u32[0];
  if ((_DWORD)v13)
  {
    v14 = (float32x2_t *)result[6];
    v15 = v5;
    do
    {
      *v14 = vsub_f32(*v14, *a2);
      v14[1].f32[0] = v14[1].f32[0] - a2[1].f32[0];
      v16 = v14->f32[v15];
      v17 = v14[2].f32[v15];
      v18 = v16 - v17;
      v19 = v16 + v17;
      if (v18 < 0.0)
        v20 = ~LODWORD(v18);
      else
        v20 = LODWORD(v18) | 0x80000000;
      v14[1].i32[1] = v20;
      if (v19 < 0.0)
        v21 = ~LODWORD(v19);
      else
        v21 = LODWORD(v19) | 0x80000000;
      v14[3].i32[1] = v21;
      v14 += 4;
      --v13;
    }
    while (v13);
  }
  for (i = 0; i != 20; i += 4)
  {
    v23 = &result[i];
    v23[116] = vsub_f32(result[i + 116], *a2);
    v23[117].f32[0] = result[i + 117].f32[0] - a2[1].f32[0];
  }
  v24 = 0;
  v25 = result;
  do
  {
    for (j = 0; j != 20; j += 4)
    {
      v27 = &v25[j];
      v27[144] = vsub_f32(v25[j + 144], *a2);
      v27[145].f32[0] = v25[j + 145].f32[0] - a2[1].f32[0];
    }
    ++v24;
    v25 += 28;
  }
  while (v24 != 5);
  for (k = 0; k != 5; ++k)
  {
    v29 = 0;
    v30 = result;
    do
    {
      for (m = 0; m != 20; m += 4)
      {
        v32 = &v30[m];
        v32[284] = vsub_f32(v30[m + 284], *a2);
        v32[285].f32[0] = v30[m + 285].f32[0] - a2[1].f32[0];
      }
      ++v29;
      v30 += 28;
    }
    while (v29 != 5);
    result += 140;
  }
  return result;
}

uint64_t physx::Sq::BucketPruner::sweep(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float *a4, unsigned int (***a5)(_QWORD, float *, float32x2_t *))
{
  float v6;
  float v7;
  float v8;
  float v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float v14;
  __int32 v15;
  uint64_t v16;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x2_t v39;
  float v40;
  float32x2_t v41;
  float32x4_t v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  double v48;
  float v49;
  float32x4_t v50;
  float v51;
  float v52;
  BOOL v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  unint64_t v57;
  float32x4_t v58;
  unint64_t v59;
  float32x2_t *v60;
  float *v61;
  float v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x8_t v80;
  char v81;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  float32x2_t *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int v106;
  unsigned int v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float32x4_t v148;
  float *v149;
  char v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  float32x2_t *v157;
  unsigned int v158;
  int v159;
  unsigned int (***v160)(_QWORD, int8x8_t *, uint64_t);
  float32x4_t v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float v167;
  float32x4_t v168;
  uint64_t v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float v174;
  float32x4_t v175;
  float32x4_t v176;
  uint64_t v177;
  float v178;
  float32x2_t v179;
  float v180;
  int8x8_t v181;
  float v182;
  int8x8_t v183;
  float v184;

  if (!a1[978].i8[0])
  {
    v6 = *(float *)(a2 + 92);
    v7 = *(float *)(a2 + 80);
    v8 = (float)(v6 - v7) * 0.5;
    v9 = v6 + v7;
    v10 = *(float32x2_t *)(a2 + 84);
    v11 = *(float32x2_t *)(a2 + 72);
    *(float32x2_t *)v12.f32 = vmul_f32(vsub_f32(v10, v11), (float32x2_t)0x3F0000003F000000);
    v13 = vmul_f32(vadd_f32(v10, v11), (float32x2_t)0x3F0000003F000000);
    v14 = v9 * 0.5;
    v179 = v13;
    v180 = v9 * 0.5;
    v177 = v12.i64[0];
    v178 = v8;
    v15 = a1[103].i32[0];
    v16 = a1[8].u32[0];
    if (v15 | v16)
    {
      v20 = *a4;
      if (*a4 == 3.4028e38)
      {
        v171 = v13;
        v174 = v14;
        v21 = a1[107].f32[0];
        v22 = a1[109].f32[0];
        v23 = a1[106];
        v24 = a1[108];
        v25 = vsub_f32(vsub_f32(v23, v24), *(float32x2_t *)v12.f32);
        v26 = (float)(v21 - v22) - v8;
        v183 = (int8x8_t)v25;
        v184 = v26;
        v27 = v21 + v22;
        v28 = vadd_f32(*(float32x2_t *)v12.f32, vadd_f32(v23, v24));
        v29 = v8 + v27;
        v181 = (int8x8_t)v28;
        v182 = v29;
        if ((_DWORD)v16)
        {
          v30 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
          v31 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
          v32 = (float *)&a1[43] + 1;
          v33 = 8.5071e37;
          v34 = -8.5071e37;
          do
          {
            v31 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v32 - 5), v31), (int8x8_t)v31, *(int8x8_t *)(v32 - 5));
            if (v33 >= *(v32 - 3))
              v33 = *(v32 - 3);
            v30 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v30, *(float32x2_t *)(v32 - 2)), (int8x8_t)v30, *(int8x8_t *)(v32 - 2));
            v35 = *v32;
            v32 += 6;
            v36 = v35;
            if (v34 <= v35)
              v34 = v36;
            --v16;
          }
          while (v16);
          v37 = v33 - v8;
          v38 = v8 + v34;
          if (v26 >= v37)
            v26 = v37;
          v39 = vsub_f32(v31, *(float32x2_t *)v12.f32);
          v183 = vbsl_s8((int8x8_t)vcgt_f32(v39, v25), (int8x8_t)v25, (int8x8_t)v39);
          v184 = v26;
          if (v29 <= v38)
            v40 = v38;
          else
            v40 = v29;
          v41 = vadd_f32(*(float32x2_t *)v12.f32, v30);
          v181 = vbsl_s8((int8x8_t)vcgt_f32(v28, v41), (int8x8_t)v28, (int8x8_t)v41);
          v182 = v40;
        }
        v167 = v8;
        v169 = v12.i64[0];
        clipRay((float *)&v179, (float *)a3, a4, (float *)&v183, (float *)&v181);
        v8 = v167;
        v12.i64[0] = v169;
        v20 = *a4;
        v14 = v174;
        v13 = v171;
      }
      *(float32x2_t *)v42.f32 = v13;
      v42.i64[1] = LODWORD(v14);
      v43 = a3[1].f32[0];
      *(float32x2_t *)v44.f32 = *a3;
      v44.i64[1] = LODWORD(v43);
      *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)*a3, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), 4uLL);
      v45.i64[1] = a3->u32[0];
      v12.i64[1] = LODWORD(v8);
      v46 = vabsq_f32(v44);
      *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), 4uLL);
      v47.i64[1] = v46.u32[0];
      v48 = COERCE_DOUBLE(vadd_f32(v13, vmul_n_f32(*a3, v20)));
      v49 = v14 + (float)(v20 * v43);
      *(int8x8_t *)v50.f32 = vbsl_s8((int8x8_t)vceqz_f32(*a3), (int8x8_t)v13, vbsl_s8((int8x8_t)vcgez_f32(*a3), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000));
      v51 = -3.4028e38;
      if (v43 >= 0.0)
        v51 = 3.4028e38;
      if (v43 == 0.0)
        v52 = v14;
      else
        v52 = v51;
      v53 = v20 < 3.4028e38;
      if (v20 >= 3.4028e38)
        v54 = v52;
      else
        v54 = v49;
      if (v53)
        *(double *)v50.i64 = v48;
      v50.i64[1] = LODWORD(v54);
      v55 = vminq_f32(v42, v50);
      v56 = vmaxq_f32(v42, v50);
      v57 = a1[8].u32[0];
      v58 = vnegq_f32(v45);
      v168 = v42;
      v170 = v12;
      v165 = v46;
      v166 = v44;
      v164 = v47;
      v161 = v45;
      v163 = v58;
      if ((_DWORD)v57)
      {
        v59 = 0;
        v60 = a1 + 9;
        v61 = (float *)&a1[43] + 1;
        v175 = v55;
        v172 = v56;
        do
        {
          v62 = *(v61 - 3);
          v63 = *(float32x2_t *)(v61 - 5);
          v64 = *(float32x2_t *)(v61 - 2);
          *(float32x2_t *)v65.f32 = vmul_f32(vadd_f32(v63, v64), (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)v66.f32 = vmul_f32(vsub_f32(v64, v63), (float32x2_t)0x3F0000003F000000);
          v65.i64[1] = COERCE_UNSIGNED_INT((float)(v62 + *v61) * 0.5);
          v66.f32[2] = (float)(*v61 - v62) * 0.5;
          v66.i32[3] = 0;
          v67 = vaddq_f32(v12, v66);
          v68 = vaddq_f32(v65, v67);
          v69 = vsubq_f32(v65, v67);
          v70 = vsubq_f32(v42, v65);
          *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), 4uLL);
          v65.i64[1] = v70.u32[0];
          *(int8x8_t *)v71.f32 = vext_s8(*(int8x8_t *)v67.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), 4uLL);
          v71.i64[1] = v67.u32[0];
          *(int16x4_t *)v67.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v68, v55), (int8x16_t)vcgeq_f32(v56, v69)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v71), v47, v67), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v65), v70, v58)))));
          if (vuzp1_s8(*(int8x8_t *)v67.f32, *(int8x8_t *)v67.f32).u32[0] == -1)
          {
            if (!(**a5)(a5, a4, v60))
            {
              v81 = 0;
              return v81 & 1;
            }
            v57 = a1[8].u32[0];
            v42 = v168;
            v12 = v170;
            v46 = v165;
            v44 = v166;
            v58 = v163;
            v47 = v164;
            v55 = v175;
            v56 = v172;
          }
          ++v59;
          v60 += 2;
          v61 += 6;
        }
        while (v59 < v57);
      }
      if (v15)
      {
        *(float32x2_t *)v72.f32 = a1[106];
        v72.i64[1] = a1[107].u32[0];
        *(float32x2_t *)v73.f32 = a1[108];
        v73.i64[1] = a1[109].u32[0];
        v74 = vaddq_f32(v12, v73);
        v75 = vaddq_f32(v72, v74);
        v76 = vsubq_f32(v72, v74);
        v77 = vsubq_f32(v42, v72);
        *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v77.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), 4uLL);
        v78.i64[1] = v77.u32[0];
        *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v74.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), 4uLL);
        v79.i64[1] = v74.u32[0];
        *(int16x4_t *)v77.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v75, v55), (int8x16_t)vcgeq_f32(v56, v76)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v79), v47, v74), vabsq_f32(vmlsq_f32(vmulq_f32(v44, v78), v77, v161)))));
        v80 = vuzp1_s8(*(int8x8_t *)v77.f32, *(int8x8_t *)v77.f32);
        if (v80.i32[0] == -1)
        {
          v83 = 0;
          v84 = 0;
          v85 = a1[104].u32[0];
          v149 = a4;
          v80.i32[0] = *(__int32 *)a4;
          v86 = *((float *)&v177 + v85);
          v87 = v179.f32[v85];
          v156 = v85;
          v88 = v87 + (float)(*a4 * a3->f32[v85]);
          if (v87 >= v88)
            v89 = v87 + (float)(*(float *)v80.i32 * a3->f32[v85]);
          else
            v89 = v179.f32[v85];
          v90 = v89 - v86;
          if (v87 > v88)
            v88 = v179.f32[v85];
          v91 = v86 + v88;
          if (v90 < 0.0)
            v92 = ~LODWORD(v90);
          else
            v92 = LODWORD(v90) | 0x80000000;
          v93 = a3;
          if (v91 < 0.0)
            v94 = ~LODWORD(v91);
          else
            v94 = LODWORD(v91) | 0x80000000;
          v183.i32[0] = v80.i32[0];
          v157 = v93;
          v151 = ((unsigned __int32)v93->i32[0] >> 29) & 4 | ((unsigned __int32)v93->i32[1] >> 30) & 0xFFFFFFFE | ((unsigned __int32)v93[1].i32[0] >> 31);
          v95 = a1[136].u16[v151];
          v160 = (unsigned int (***)(_QWORD, int8x8_t *, uint64_t))a5;
          do
          {
            v96 = v95 & 7;
            v152 = v95;
            v153 = v84;
            if (a1[110].i32[v96])
            {
              v97 = &a1[4 * v96];
              *(float32x2_t *)v98.f32 = v97[116];
              v98.i64[1] = v97[117].u32[0];
              *(float32x2_t *)v99.f32 = v97[118];
              v99.i64[1] = v97[119].u32[0];
              v100 = vaddq_f32(v12, v99);
              v101 = vaddq_f32(v98, v100);
              v102 = vsubq_f32(v98, v100);
              v103 = vsubq_f32(v42, v98);
              *(int8x8_t *)v104.f32 = vext_s8(*(int8x8_t *)v103.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL), 4uLL);
              v104.i64[1] = v103.u32[0];
              *(int8x8_t *)v105.f32 = vext_s8(*(int8x8_t *)v100.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), 4uLL);
              v105.i64[1] = v100.u32[0];
              if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v101, v55), (int8x16_t)vcgeq_f32(v56, v102)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v105), v47, v100), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v104), v103, v58))))), v80).u32[0] == -1)
              {
                v150 = v83;
                v106 = 0;
                v154 = (uint64_t)&a1[28 * v96 + 138];
                v107 = *(unsigned __int16 *)(v154 + 2 * v151 + 208);
                v108 = *(float *)v80.i32;
                do
                {
                  v109 = v107 & 7;
                  v158 = v107;
                  v159 = v106;
                  if (!*(_DWORD *)(v154 + 4 * v109))
                    goto LABEL_57;
                  v110 = (uint64_t)&a1[28 * v96 + 4 * v109];
                  v111.i64[0] = *(_QWORD *)(v110 + 1152);
                  v111.i64[1] = *(unsigned int *)(v110 + 1160);
                  v112.i64[0] = *(_QWORD *)(v110 + 1168);
                  v112.i64[1] = *(unsigned int *)(v110 + 1176);
                  v113 = vaddq_f32(v12, v112);
                  v114 = vaddq_f32(v111, v113);
                  v115 = vsubq_f32(v111, v113);
                  v116 = vsubq_f32(v42, v111);
                  *(int8x8_t *)v117.f32 = vext_s8(*(int8x8_t *)v116.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL), 4uLL);
                  v117.i64[1] = v116.u32[0];
                  *(int8x8_t *)v118.f32 = vext_s8(*(int8x8_t *)v113.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL), 4uLL);
                  v118.i64[1] = v113.u32[0];
                  *(int16x4_t *)v116.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v114, v55), (int8x16_t)vcgeq_f32(v56, v115)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v118), v47, v113), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v117), v116, v58)))));
                  v80 = vuzp1_s8(*(int8x8_t *)v116.f32, *(int8x8_t *)v116.f32);
                  if (v80.i32[0] == -1)
                  {
                    v119 = 0;
                    v155 = a1[28 * v96 + 140].i32[v109 + 1] + a1[112].i32[v96 + 1];
                    v162 = (uint64_t)&a1[140 * v96 + 278 + 28 * (v107 & 7)];
                    v120 = *(unsigned __int16 *)(v162 + 2 * v151 + 208);
                    do
                    {
                      v121 = v120 & 7;
                      v122 = *(unsigned int *)(v162 + 4 * v121);
                      if ((_DWORD)v122)
                      {
                        v123 = (uint64_t)&a1[140 * v96 + 28 * v109 + 4 * v121];
                        v124.i64[0] = *(_QWORD *)(v123 + 2272);
                        v124.i64[1] = *(unsigned int *)(v123 + 2280);
                        v125.i64[0] = *(_QWORD *)(v123 + 2288);
                        v125.i64[1] = *(unsigned int *)(v123 + 2296);
                        v126 = vaddq_f32(v12, v125);
                        v127 = vaddq_f32(v124, v126);
                        v128 = vsubq_f32(v124, v126);
                        v129 = vsubq_f32(v42, v124);
                        *(int8x8_t *)v130.f32 = vext_s8(*(int8x8_t *)v129.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), 4uLL);
                        v130.i64[1] = v129.u32[0];
                        *(int8x8_t *)v131.f32 = vext_s8(*(int8x8_t *)v126.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), 4uLL);
                        v131.i64[1] = v126.u32[0];
                        *(int16x4_t *)v129.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v127, v55), (int8x16_t)vcgeq_f32(v56, v128)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v131), v47, v126), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v130), v129, v58)))));
                        v80 = vuzp1_s8(*(int8x8_t *)v129.f32, *(int8x8_t *)v129.f32);
                        if (v80.i32[0] == -1)
                        {
                          v132 = (v155
                                              + a1[140 * v96 + 280 + 28 * v109].i32[v121 + 1]);
                          v133 = *(_QWORD *)&a1[7] + 16 * v132;
                          v134 = *(_QWORD *)&a1[6] + 32 * v132 + 16;
                          v135 = 32 * v122;
                          while (1)
                          {
                            if (*(_DWORD *)(v134 + 12) < v92)
                              goto LABEL_70;
                            if (*(_DWORD *)(v134 - 4) > v94)
                              break;
                            v136.i64[0] = *(_QWORD *)(v134 - 16);
                            v136.i64[1] = *(unsigned int *)(v134 - 8);
                            v137.i64[0] = *(_QWORD *)v134;
                            v137.i64[1] = *(unsigned int *)(v134 + 8);
                            v138 = vaddq_f32(v12, v137);
                            v139 = vaddq_f32(v136, v138);
                            v140 = vsubq_f32(v136, v138);
                            v141 = vsubq_f32(v42, v136);
                            *(int8x8_t *)v142.f32 = vext_s8(*(int8x8_t *)v141.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL), 4uLL);
                            v142.i64[1] = v141.u32[0];
                            *(int8x8_t *)v143.f32 = vext_s8(*(int8x8_t *)v138.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL), 4uLL);
                            v143.i64[1] = v138.u32[0];
                            *(int16x4_t *)v141.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v56, v140), (int8x16_t)vcgeq_f32(v139, v55)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v143), v47, v138), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v142), v141, v58)))));
                            v80 = vuzp1_s8(*(int8x8_t *)v141.f32, *(int8x8_t *)v141.f32);
                            if (v80.i32[0] == -1)
                            {
                              v173 = v56;
                              v176 = v55;
                              if (!(**v160)(v160, &v183, v133))
                              {
                                v81 = v150;
                                return v81 & 1;
                              }
                              v80.i32[0] = v183.i32[0];
                              if (*(float *)v183.i32 >= v108)
                              {
                                v42 = v168;
                                v12 = v170;
                                v46 = v165;
                                v44 = v166;
                                v58 = v163;
                                v47 = v164;
                                v55 = v176;
                                v56 = v173;
                              }
                              else
                              {
                                v144 = v87 + (float)(*(float *)v183.i32 * v157->f32[v156]);
                                if (v87 >= v144)
                                  v145 = v87 + (float)(*(float *)v183.i32 * v157->f32[v156]);
                                else
                                  v145 = v87;
                                v146 = v145 - v86;
                                if (v87 > v144)
                                  v144 = v87;
                                v147 = v86 + v144;
                                v44 = v166;
                                v42 = v168;
                                v148 = vmlaq_n_f32(v168, v166, *(float *)v183.i32);
                                v148.i64[1] = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u32[0];
                                v55 = vminq_f32(v168, v148);
                                v56 = vmaxq_f32(v168, v148);
                                if (v146 < 0.0)
                                  v92 = ~LODWORD(v146);
                                else
                                  v92 = LODWORD(v146) | 0x80000000;
                                if (v147 < 0.0)
                                  v94 = ~LODWORD(v147);
                                else
                                  v94 = LODWORD(v147) | 0x80000000;
                                v12 = v170;
                                v47 = v164;
                                v46 = v165;
                                v58 = v163;
                              }
                            }
                            else
                            {
LABEL_70:
                              *(float *)v80.i32 = v108;
                            }
                            v133 += 16;
                            v134 += 32;
                            v108 = *(float *)v80.i32;
                            v135 -= 32;
                            if (!v135)
                              goto LABEL_64;
                          }
                        }
                      }
                      *(float *)v80.i32 = v108;
LABEL_64:
                      v120 >>= 3;
                      ++v119;
                      v108 = *(float *)v80.i32;
                    }
                    while (v119 != 5);
                  }
                  else
                  {
LABEL_57:
                    *(float *)v80.i32 = v108;
                  }
                  v107 = v158 >> 3;
                  v106 = v159 + 1;
                  v108 = *(float *)v80.i32;
                }
                while (v159 != 4);
              }
            }
            v95 = v152 >> 3;
            v83 = v153 > 3;
            v84 = v153 + 1;
          }
          while (v153 != 4);
          *v149 = *(float *)v80.i32;
        }
      }
    }
  }
  v81 = 1;
  return v81 & 1;
}

uint64_t physx::Sq::BucketPruner::overlap(float32x4_t *a1, uint64_t a2, uint64_t (***a3)(_QWORD, int *, uint64_t), double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t result;
  uint64_t v11;
  float32x4_t v12;
  float32x2_t v13;
  unint64_t v14;
  unint64_t v15;
  __int8 *v16;
  float *v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  __int32 v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  double v72;
  double v73;
  double v74;
  int8x16_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  __int8 *v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  float *f32;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  uint64_t v116;
  float *v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  uint64_t v129;
  __int32 v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  float32x4_t v158;
  float32x4_t v159[10];

  if (a1[489].i8[0])
    return 1;
  result = 1;
  v11 = a2 + 72;
  switch(*(_WORD *)(a2 + 98))
  {
    case 0:
      v12 = *(float32x4_t *)(a2 + 100);
      v12.i64[1] = *(unsigned int *)(a2 + 108);
      *(float *)&a4 = *(float *)(a2 + 112) * *(float *)(a2 + 112);
      v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
      v14 = a1[4].u32[0];
      v158 = v12;
      if (!(_DWORD)v14)
        goto LABEL_10;
      v15 = 0;
      v16 = &a1[4].i8[8];
      v17 = &a1[21].f32[3];
      do
      {
        v18 = *(v17 - 3);
        v19 = *(float32x2_t *)(v17 - 5);
        v20 = *(float32x2_t *)(v17 - 2);
        *(float32x2_t *)v21.f32 = vmul_f32(vadd_f32(v19, v20), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v22.f32 = vmul_f32(vsub_f32(v20, v19), (float32x2_t)0x3F0000003F000000);
        v21.i64[1] = COERCE_UNSIGNED_INT((float)(v18 + *v17) * 0.5);
        v22.f32[2] = (float)(*v17 - v18) * 0.5;
        v22.i32[3] = 0;
        v23 = vsubq_f32(v12, v21);
        v24 = vnegq_f32(v22);
        v24.i32[3] = 0;
        v25 = vsubq_f32(v23, vmaxq_f32(vminq_f32(v23, v22), v24));
        v26 = vmulq_f32(v25, v25);
        v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
        *(int16x4_t *)v26.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)), 0);
        if (vuzp1_s8(*(int8x8_t *)v26.f32, *(int8x8_t *)v26.f32).u32[0] == -1)
        {
          v159[0].i32[0] = -1082130432;
          result = (**a3)(a3, (int *)v159, (uint64_t)v16);
          if (!(_DWORD)result)
            return result;
          v14 = a1[4].u32[0];
          v12 = v158;
        }
        ++v15;
        v16 += 16;
        v17 += 6;
      }
      while (v15 < v14);
LABEL_10:
      if (!a1[51].i32[2])
        return 1;
      v27.i64[0] = a1[53].i64[0];
      v27.i64[1] = a1[53].u32[2];
      v28.i64[0] = a1[54].i64[0];
      v28.i64[1] = a1[54].u32[2];
      v29 = vsubq_f32(v12, v27);
      v30 = vnegq_f32(v28);
      v30.i32[3] = 0;
      v31 = vsubq_f32(v29, vmaxq_f32(vminq_f32(v29, v28), v30));
      v32 = vmulq_f32(v31, v31);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      *(int16x4_t *)v32.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32)), 0);
      if (vuzp1_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v32.f32).u32[0] != -1)
        return 1;
      v33 = 0;
      v34 = a1[52].u32[0];
      v35 = *(_DWORD *)(v11 + 4 * v34);
      v36 = *(_DWORD *)(a2 + 4 * v34 + 84);
      if (v35 < 0)
        v37 = ~v35;
      else
        v37 = v35 | 0x80000000;
      if (v36 < 0)
        v38 = ~v36;
      else
        v38 = v36 | 0x80000000;
      while (1)
      {
        if (a1[55].i32[v33])
        {
          v39 = &a1[2 * v33];
          v40.i64[0] = v39[58].i64[0];
          v40.i64[1] = v39[58].u32[2];
          v41.i64[0] = v39[59].i64[0];
          v41.i64[1] = v39[59].u32[2];
          v42 = vsubq_f32(v12, v40);
          v43 = vnegq_f32(v41);
          v43.i32[3] = 0;
          v44 = vsubq_f32(v42, vmaxq_f32(vminq_f32(v42, v41), v43));
          v45 = vmulq_f32(v44, v44);
          v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
          *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32).u32[0] == -1)
            break;
        }
LABEL_20:
        ++v33;
        result = 1;
        if (v33 == 5)
          return result;
      }
      v46 = 0;
      while (1)
      {
        if (a1[14 * v33 + 69].i32[v46])
        {
          v47 = (uint64_t)&a1[14 * v33 + 2 * v46];
          v48.i64[0] = *(_QWORD *)(v47 + 1152);
          v48.i64[1] = *(unsigned int *)(v47 + 1160);
          v49.i64[0] = *(_QWORD *)(v47 + 1168);
          v49.i64[1] = *(unsigned int *)(v47 + 1176);
          v50 = vsubq_f32(v12, v48);
          v51 = vnegq_f32(v49);
          v51.i32[3] = 0;
          v52 = vsubq_f32(v50, vmaxq_f32(vminq_f32(v50, v49), v51));
          v53 = vmulq_f32(v52, v52);
          v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
          *(int16x4_t *)v53.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v53.f32).u32[0] == -1)
            break;
        }
LABEL_35:
        if (++v46 == 5)
          goto LABEL_20;
      }
      v54 = 0;
      while (1)
      {
        v55 = a1[70 * v33 + 139 + 14 * v46].i32[v54];
        if (v55)
        {
          v56 = (uint64_t)&a1[70 * v33 + 14 * v46 + 2 * v54];
          v57.i64[0] = *(_QWORD *)(v56 + 2272);
          v57.i64[1] = *(unsigned int *)(v56 + 2280);
          v58.i64[0] = *(_QWORD *)(v56 + 2288);
          v58.i64[1] = *(unsigned int *)(v56 + 2296);
          v59 = vsubq_f32(v12, v57);
          v60 = vnegq_f32(v58);
          v60.i32[3] = 0;
          v61 = vsubq_f32(v59, vmaxq_f32(vminq_f32(v59, v58), v60));
          v62 = vmulq_f32(v61, v61);
          v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
          *(int16x4_t *)v62.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v62.f32, *(int8x8_t *)v62.f32).u32[0] == -1)
            break;
        }
LABEL_34:
        if (++v54 == 5)
          goto LABEL_35;
      }
      v63 = (a1[14 * v33 + 70].i32[v46 + 1]
                         + a1[56].i32[v33 + 1]
                         + a1[70 * v33 + 140 + 14 * v46].i32[v54 + 1]);
      v64 = a1[3].i64[1] + 16 * v63;
      v65 = a1[3].i64[0] + 32 * v63 + 16;
      while (1)
      {
        if (*(_DWORD *)(v65 + 12) >= v37)
        {
          if (*(_DWORD *)(v65 - 4) > v38)
            goto LABEL_34;
          v66.i64[0] = *(_QWORD *)(v65 - 16);
          v66.i64[1] = *(unsigned int *)(v65 - 8);
          v67.i64[0] = *(_QWORD *)v65;
          v67.i64[1] = *(unsigned int *)(v65 + 8);
          v68 = vsubq_f32(v12, v66);
          v69 = vnegq_f32(v67);
          v69.i32[3] = 0;
          v70 = vsubq_f32(v68, vmaxq_f32(vminq_f32(v68, v67), v69));
          v71 = vmulq_f32(v70, v70);
          v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
          *(int16x4_t *)v71.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v71.f32, *(int8x8_t *)v71.f32).u32[0] == -1)
          {
            v159[0].i32[0] = -1082130432;
            result = (**a3)(a3, (int *)v159, v64);
            v12 = v158;
            if (!(_DWORD)result)
              return result;
          }
        }
        v64 += 16;
        v65 += 32;
        if (!--v55)
          goto LABEL_34;
      }
    case 2:
    case 4:
      goto LABEL_38;
    case 3:
      if (*(_WORD *)(a2 + 96))
      {
LABEL_38:
        *(float *)&v72 = OBBAABBTest_SIMD::OBBAABBTest_SIMD(v159, (__int32 *)(a2 + 12), a2 + 48, a2, a4, a5, a6, a7);
        return BucketPrunerOverlapTraversal<OBBAABBTest_SIMD,false>::operator()(a1 + 1, v159, a3, v11, v72, v73, v74, v75);
      }
      v76 = a2 + 84;
      v77 = *(float *)(a2 + 84);
      v78 = *(float *)(a2 + 72);
      v79 = *(float *)(a2 + 76);
      v80 = *(float *)(a2 + 80);
      v81 = *(float *)(a2 + 88);
      v82 = *(float *)(a2 + 92);
      v83 = a1[4].u32[0];
      if (!(_DWORD)v83)
        goto LABEL_51;
      v84 = 0;
      v85 = &a1[4].i8[8];
      v86 = &a1[21].f32[3];
      break;
    default:
      return result;
  }
  do
  {
    if (v78 <= *(v86 - 2)
      && *(v86 - 5) <= v77
      && v79 <= *(v86 - 1)
      && *(v86 - 4) <= v81
      && v80 <= *v86
      && *(v86 - 3) <= v82)
    {
      v159[0].i32[0] = -1082130432;
      result = (**a3)(a3, (int *)v159, (uint64_t)v85);
      if (!(_DWORD)result)
        return result;
      v83 = a1[4].u32[0];
    }
    ++v84;
    v85 += 16;
    v86 += 6;
  }
  while (v84 < v83);
  if (!a1[51].i32[2])
    return 1;
LABEL_51:
  v87 = a1[53].f32[0];
  v88 = a1[54].f32[0];
  v89 = a1[53].f32[1];
  v90 = a1[54].f32[1];
  v91 = a1[53].f32[2];
  v92 = a1[54].f32[2];
  v93 = v78 <= (float)(v87 + v88) && (float)(v87 - v88) <= v77;
  v94 = v93 && v79 <= (float)(v89 + v90);
  v95 = v94 && (float)(v89 - v90) <= v81;
  v96 = v95 && v80 <= (float)(v91 + v92);
  if (!v96 || (float)(v91 - v92) > v82)
    return 1;
  v98 = 0;
  v99 = a1[52].u32[0];
  v100 = *(_DWORD *)(v11 + 4 * v99);
  v101 = *(_DWORD *)(v76 + 4 * v99);
  if (v100 < 0)
    v102 = ~v100;
  else
    v102 = v100 | 0x80000000;
  if (v101 < 0)
    v103 = ~v101;
  else
    v103 = v101 | 0x80000000;
  while (1)
  {
    if (a1[55].i32[v98])
    {
      f32 = a1[2 * v98].f32;
      v105 = f32[232];
      v106 = f32[236];
      v107 = f32[233];
      v108 = f32[237];
      v109 = f32[234];
      v110 = f32[238];
      v111 = v78 <= (float)(v105 + v106) && (float)(v105 - v106) <= v77;
      v112 = v111 && v79 <= (float)(v107 + v108);
      v113 = v112 && (float)(v107 - v108) <= v81;
      v114 = v113 && v80 <= (float)(v109 + v110);
      if (v114 && (float)(v109 - v110) <= v82)
        break;
    }
LABEL_92:
    ++v98;
    result = 1;
    if (v98 == 5)
      return result;
  }
  v116 = 0;
  while (1)
  {
    if (a1[14 * v98 + 69].i32[v116])
    {
      v117 = a1[14 * v98 + 2 * v116].f32;
      v118 = v117[288];
      v119 = v117[292];
      v120 = v117[289];
      v121 = v117[293];
      v122 = v117[290];
      v123 = v117[294];
      v124 = v78 <= (float)(v118 + v119) && (float)(v118 - v119) <= v77;
      v125 = v124 && v79 <= (float)(v120 + v121);
      v126 = v125 && (float)(v120 - v121) <= v81;
      v127 = v126 && v80 <= (float)(v122 + v123);
      if (v127 && (float)(v122 - v123) <= v82)
        break;
    }
LABEL_155:
    if (++v116 == 5)
      goto LABEL_92;
  }
  v129 = 0;
  while (1)
  {
    v130 = a1[70 * v98 + 139 + 14 * v116].i32[v129];
    if (v130)
    {
      v131 = a1[70 * v98 + 14 * v116 + 2 * v129].f32;
      v132 = v131[568];
      v133 = v131[572];
      v134 = v131[569];
      v135 = v131[573];
      v136 = v131[570];
      v137 = v131[574];
      v138 = v78 <= (float)(v132 + v133) && (float)(v132 - v133) <= v77;
      v139 = v138 && v79 <= (float)(v134 + v135);
      v140 = v139 && (float)(v134 - v135) <= v81;
      v141 = v140 && v80 <= (float)(v136 + v137);
      if (v141 && (float)(v136 - v137) <= v82)
        break;
    }
LABEL_154:
    if (++v129 == 5)
      goto LABEL_155;
  }
  v143 = (a1[14 * v98 + 70].i32[v116 + 1]
                      + a1[56].i32[v98 + 1]
                      + a1[70 * v98 + 140 + 14 * v116].i32[v129 + 1]);
  v144 = a1[3].i64[1] + 16 * v143;
  v145 = a1[3].i64[0] + 32 * v143 + 16;
  while (1)
  {
    if (*(_DWORD *)(v145 + 12) >= v102)
    {
      if (*(_DWORD *)(v145 - 4) > v103)
        goto LABEL_154;
      v146 = *(float *)(v145 - 16);
      v147 = *(float *)(v145 - 12);
      v148 = *(float *)(v145 + 4);
      v149 = v147 - v148;
      v150 = *(float *)(v145 - 8);
      v151 = *(float *)(v145 + 8);
      v152 = v147 + v148;
      v153 = v78 <= (float)(v146 + *(float *)v145) && (float)(v146 - *(float *)v145) <= v77;
      v154 = v153 && v79 <= v152;
      v155 = v154 && v149 <= v81;
      v156 = v155 && v80 <= (float)(v150 + v151);
      if (v156 && (float)(v150 - v151) <= v82)
      {
        v159[0].i32[0] = -1082130432;
        result = (**a3)(a3, (int *)v159, v144);
        if (!(_DWORD)result)
          return result;
      }
    }
    v144 += 16;
    v145 += 32;
    if (!--v130)
      goto LABEL_154;
  }
}

uint64_t physx::Sq::BucketPruner::raycast(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(_QWORD, float *, float32x2_t *))
{
  __int128 v5;
  __int32 v7;
  uint64_t v8;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  float32x4_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unint64_t v52;
  float32x4_t v53;
  unint64_t v54;
  float32x2_t *v55;
  float *v56;
  float v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x8_t v78;
  char v79;
  BOOL v81;
  unsigned int v82;
  uint64_t v83;
  int8x8_t v84;
  int32x2_t v85;
  unsigned int v86;
  uint64_t v87;
  float32x2_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  int v97;
  unsigned int v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  uint64_t v127;
  uint64_t v128;
  int8x8_t *v129;
  uint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x4_t v141;
  int32x2_t v142;
  char v143;
  uint64_t v144;
  float *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  float32x2_t *v151;
  float32x2_t *v152;
  int v153;
  uint64_t v154;
  float32x4_t v155;
  __int128 v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int8x8_t v166;
  float v167;
  unint64_t v168;
  float v169;

  if (!a1[978].i8[0])
  {
    v7 = a1[103].i32[0];
    v8 = a1[8].u32[0];
    if (v7 | v8)
    {
      v13 = *a4;
      if (*a4 == 3.4028e38)
      {
        v14 = a1[107].f32[0];
        v15 = a1[109].f32[0];
        v16 = v14 - v15;
        v169 = v14 - v15;
        v17 = v14 + v15;
        v18 = a1[106];
        v19 = a1[108];
        v20 = vsub_f32(v18, v19);
        v168 = (unint64_t)v20;
        v21 = vadd_f32(vadd_f32(v18, v19), 0);
        v22 = v17 + 0.0;
        v166 = (int8x8_t)v21;
        v167 = v22;
        if ((_DWORD)v8)
        {
          v23 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
          v24 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
          v25 = (float *)&a1[43] + 1;
          v26 = 8.5071e37;
          v27 = -8.5071e37;
          do
          {
            v23 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v25 - 5), v23), (int8x8_t)v23, *(int8x8_t *)(v25 - 5));
            if (v26 >= *(v25 - 3))
              v26 = *(v25 - 3);
            v24 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v24, *(float32x2_t *)(v25 - 2)), (int8x8_t)v24, *(int8x8_t *)(v25 - 2));
            v28 = *v25;
            v25 += 6;
            v29 = v28;
            if (v27 <= v28)
              v27 = v29;
            --v8;
          }
          while (v8);
          v30 = vcgt_f32(v23, v20);
          v31 = vadd_f32(v24, 0);
          v32 = v27 + 0.0;
          if ((v30.i8[0] & 1) != 0)
            v33 = v20.f32[0];
          else
            v33 = v23.f32[0];
          v34 = v20.f32[1];
          if ((v30.i8[4] & 1) == 0)
            v34 = v23.f32[1];
          if (v16 >= v26)
            v16 = v26;
          v168 = __PAIR64__(LODWORD(v34), LODWORD(v33));
          v169 = v16;
          if (v22 <= v32)
            v35 = v32;
          else
            v35 = v22;
          v166 = vbsl_s8((int8x8_t)vcgt_f32(v21, v31), (int8x8_t)v21, (int8x8_t)v31);
          v167 = v35;
        }
        clipRay((float *)a2, (float *)a3, a4, (float *)&v168, (float *)&v166);
        v13 = *a4;
      }
      v36 = a2[1].f32[0];
      v37 = COERCE_DOUBLE(vadd_f32(*a2, vmul_n_f32(*a3, v13)));
      v38 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(*a3), (int8x8_t)*a2, vbsl_s8((int8x8_t)vcgez_f32(*a3), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
      *(float32x2_t *)v39.f32 = *a2;
      v39.i64[1] = LODWORD(v36);
      v40 = a3[1].f32[0];
      *(float32x2_t *)v41.f32 = *a3;
      v41.i64[1] = LODWORD(v40);
      *(int8x8_t *)v42.f32 = vext_s8((int8x8_t)*a3, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
      v42.i64[1] = a3->u32[0];
      v43 = vabsq_f32(v41);
      *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v43.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), 4uLL);
      v44.i64[1] = v43.u32[0];
      v45 = v36 + (float)(v13 * v40);
      v46 = -3.4028e38;
      if (v40 >= 0.0)
        v46 = 3.4028e38;
      if (v40 != 0.0)
        v36 = v46;
      v47 = v13 < 3.4028e38;
      if (v13 >= 3.4028e38)
        v48 = v36;
      else
        v48 = v45;
      if (v47)
        *(double *)v49.i64 = v37;
      else
        *(double *)v49.i64 = v38;
      v49.i64[1] = LODWORD(v48);
      v50 = vminq_f32(v39, v49);
      v51 = vmaxq_f32(v39, v49);
      v52 = a1[8].u32[0];
      v155 = v42;
      v53 = vnegq_f32(v42);
      v160 = v41;
      v161 = v39;
      v158 = v44;
      v159 = v43;
      v157 = v53;
      if ((_DWORD)v52)
      {
        v54 = 0;
        v55 = a1 + 9;
        v56 = (float *)&a1[43] + 1;
        v162 = v51;
        v164 = v50;
        do
        {
          v57 = *(v56 - 3);
          v49.i64[0] = *(_QWORD *)(v56 - 5);
          v58 = *(float32x2_t *)(v56 - 2);
          *(float32x2_t *)v59.f32 = vmul_f32(vadd_f32(*(float32x2_t *)v49.f32, v58), (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)v49.f32 = vmul_f32(vsub_f32(v58, *(float32x2_t *)v49.f32), (float32x2_t)0x3F0000003F000000);
          v59.i64[1] = COERCE_UNSIGNED_INT((float)(v57 + *v56) * 0.5);
          v60 = v49;
          v60.f32[2] = (float)(*v56 - v57) * 0.5;
          v61 = v60;
          v61.i32[3] = 0;
          v62 = vaddq_f32(v59, v61);
          v63 = vsubq_f32(v59, v61);
          v64 = vsubq_f32(v39, v59);
          *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), 4uLL);
          v65.i64[1] = v64.u32[0];
          *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), 4uLL);
          v60.i64[1] = v49.u32[0];
          v49 = (float32x4_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v43, v60), v44, v61), vabsq_f32(vmlaq_f32(vmulq_f32(v41, v65), v64, v53)));
          *(int16x4_t *)v61.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v62, v50), (int8x16_t)vcgeq_f32(v51, v63)), (int8x16_t)v49));
          if (vuzp1_s8(*(int8x8_t *)v61.f32, *(int8x8_t *)v61.f32).u32[0] == -1)
          {
            if (!(**a5)(a5, a4, v55))
            {
              v79 = 0;
              return v79 & 1;
            }
            v52 = a1[8].u32[0];
            v41 = v160;
            v39 = v161;
            v44 = v158;
            v43 = v159;
            v53 = v157;
            v51 = v162;
            v50 = v164;
          }
          ++v54;
          v55 += 2;
          v56 += 6;
        }
        while (v54 < v52);
      }
      if (v7)
      {
        *(float32x2_t *)v66.f32 = a1[106];
        v66.i64[1] = a1[107].u32[0];
        *(float32x2_t *)v49.f32 = a1[108];
        v67 = v49;
        v67.i32[2] = a1[109].i32[0];
        v68 = v67;
        v68.i32[3] = 0;
        v69 = vaddq_f32(v66, v68);
        v70 = vsubq_f32(v66, v68);
        v71 = vsubq_f32(v39, v66);
        *(int8x8_t *)v72.f32 = vext_s8(*(int8x8_t *)v71.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), 4uLL);
        v72.i64[1] = v71.u32[0];
        *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), 4uLL);
        v67.i64[1] = v49.u32[0];
        v73 = vmlsq_f32(vmulq_f32(v41, v72), v71, v155);
        v74 = vmlaq_f32(vmulq_f32(v43, v67), v44, v68);
        v75 = (int8x16_t)vcgeq_f32(v69, v50);
        v76 = (int8x16_t)vcgeq_f32(v74, vabsq_f32(v73));
        v77 = vandq_s8(v75, (int8x16_t)vcgeq_f32(v51, v70));
        *(int16x4_t *)v76.i8 = vmovn_s32((int32x4_t)vandq_s8(v77, v76));
        v78 = vuzp1_s8(*(int8x8_t *)v76.i8, *(int8x8_t *)v76.i8);
        if (v78.i32[0] == -1)
        {
          v81 = 0;
          v82 = 0;
          v83 = a1[104].u32[0];
          v77.i32[0] = a2->i32[v83];
          v150 = v83;
          v78.i32[0] = *(__int32 *)a4;
          *(float *)v75.i32 = *(float *)v77.i32 + (float)(*a4 * a3->f32[v83]);
          v84 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 0);
          v77.i32[1] = v75.i32[0];
          v85 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v77.i8), *(float32x2_t *)v77.i8), v84, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 0));
          *(int8x8_t *)&v5 = vbsl_s8((int8x8_t)vcltz_s32(v85), vmvn_s8((int8x8_t)v85), (int8x8_t)(*(_QWORD *)&v85 | 0x8000000080000000));
          *(float *)&v168 = *a4;
          v144 = ((unsigned __int32)a3->i32[0] >> 29) & 4 | ((unsigned __int32)a3->i32[1] >> 30) & 0xFFFFFFFE | ((unsigned __int32)a3[1].i32[0] >> 31);
          v145 = a4;
          v86 = a1[136].u16[v144];
          v151 = a2;
          v152 = a3;
          do
          {
            v87 = v86 & 7;
            v146 = v86;
            v147 = v82;
            if (a1[110].i32[v87])
            {
              v88 = &a1[4 * v87];
              *(float32x2_t *)v89.f32 = v88[116];
              v89.i64[1] = v88[117].u32[0];
              *(float32x2_t *)v75.i8 = v88[118];
              v90 = (float32x4_t)v75;
              v90.i32[2] = v88[119].i32[0];
              v91 = v90;
              v91.i32[3] = 0;
              v92 = vaddq_f32(v89, v91);
              v93 = vsubq_f32(v89, v91);
              v94 = vsubq_f32(v39, v89);
              *(int8x8_t *)v95.f32 = vext_s8(*(int8x8_t *)v94.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), 4uLL);
              v95.i64[1] = v94.u32[0];
              *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v75.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), 4uLL);
              v90.i64[1] = v75.u32[0];
              v75 = vandq_s8((int8x16_t)vcgeq_f32(v92, v50), (int8x16_t)vcgeq_f32(v51, v93));
              v96 = vandq_s8(v75, (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v43, v90), v44, v91), vabsq_f32(vmlaq_f32(vmulq_f32(v41, v95), v94, v53))));
              if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)v96), v78).u32[0] == -1)
              {
                v143 = v81;
                v97 = 0;
                v148 = (uint64_t)&a1[28 * v87 + 138];
                v98 = *(unsigned __int16 *)(v148 + 2 * v144 + 208);
                v99 = *(float *)v78.i32;
                do
                {
                  v100 = v98 & 7;
                  v153 = v97;
                  if (!*(_DWORD *)(v148 + 4 * v100))
                    goto LABEL_51;
                  v101 = (uint64_t)&a1[28 * v87 + 4 * v100];
                  v102.i64[0] = *(_QWORD *)(v101 + 1152);
                  v102.i64[1] = *(unsigned int *)(v101 + 1160);
                  v96.i64[0] = *(_QWORD *)(v101 + 1168);
                  v103 = (float32x4_t)v96;
                  v103.i32[2] = *(_DWORD *)(v101 + 1176);
                  v104 = v103;
                  v104.i32[3] = 0;
                  v105 = vaddq_f32(v102, v104);
                  v106 = vsubq_f32(v102, v104);
                  v107 = vsubq_f32(v39, v102);
                  *(int8x8_t *)v108.f32 = vext_s8(*(int8x8_t *)v107.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL), 4uLL);
                  v108.i64[1] = v107.u32[0];
                  *(int8x8_t *)v103.f32 = vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL), 4uLL);
                  v103.i64[1] = v96.u32[0];
                  v109 = vmlaq_f32(vmulq_f32(v41, v108), v107, v53);
                  v110 = vmlaq_f32(vmulq_f32(v43, v103), v44, v104);
                  v75 = (int8x16_t)vcgeq_f32(v105, v50);
                  v111 = (int8x16_t)vcgeq_f32(v110, vabsq_f32(v109));
                  v96 = vandq_s8(v75, (int8x16_t)vcgeq_f32(v51, v106));
                  *(int16x4_t *)v111.i8 = vmovn_s32((int32x4_t)vandq_s8(v96, v111));
                  v78 = vuzp1_s8(*(int8x8_t *)v111.i8, *(int8x8_t *)v111.i8);
                  if (v78.i32[0] == -1)
                  {
                    v112 = 0;
                    v149 = a1[28 * v87 + 140].i32[v100 + 1] + a1[112].i32[v87 + 1];
                    v154 = (uint64_t)&a1[140 * v87 + 278 + 28 * (v98 & 7)];
                    v113 = *(unsigned __int16 *)(v154 + 2 * v144 + 208);
                    do
                    {
                      v114 = v113 & 7;
                      v115 = *(unsigned int *)(v154 + 4 * v114);
                      if ((_DWORD)v115)
                      {
                        v116 = (uint64_t)&a1[140 * v87 + 28 * v100 + 4 * v114];
                        v117.i64[0] = *(_QWORD *)(v116 + 2272);
                        v117.i64[1] = *(unsigned int *)(v116 + 2280);
                        v96.i64[0] = *(_QWORD *)(v116 + 2288);
                        v118 = (float32x4_t)v96;
                        v118.i32[2] = *(_DWORD *)(v116 + 2296);
                        v119 = v118;
                        v119.i32[3] = 0;
                        v120 = vaddq_f32(v117, v119);
                        v121 = vsubq_f32(v117, v119);
                        v122 = vsubq_f32(v39, v117);
                        *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v122.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL), 4uLL);
                        v123.i64[1] = v122.u32[0];
                        *(int8x8_t *)v118.f32 = vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), 4uLL);
                        v118.i64[1] = v96.u32[0];
                        v124 = vmlaq_f32(vmulq_f32(v41, v123), v122, v53);
                        v125 = vmlaq_f32(vmulq_f32(v43, v118), v44, v119);
                        v75 = (int8x16_t)vcgeq_f32(v120, v50);
                        v126 = (int8x16_t)vcgeq_f32(v125, vabsq_f32(v124));
                        v96 = vandq_s8(v75, (int8x16_t)vcgeq_f32(v51, v121));
                        *(int16x4_t *)v126.i8 = vmovn_s32((int32x4_t)vandq_s8(v96, v126));
                        v78 = vuzp1_s8(*(int8x8_t *)v126.i8, *(int8x8_t *)v126.i8);
                        if (v78.i32[0] == -1)
                        {
                          v127 = (v149
                                              + a1[140 * v87 + 280 + 28 * v100].i32[v114 + 1]);
                          v128 = *(_QWORD *)&a1[7] + 16 * v127;
                          v129 = (int8x8_t *)(*(_QWORD *)&a1[6] + 32 * v127 + 16);
                          v130 = 32 * v115;
                          while (1)
                          {
                            if (v129[1].i32[1] < v5)
                              goto LABEL_64;
                            if (v129[-1].i32[1] > DWORD1(v5))
                              break;
                            *(int8x8_t *)v131.f32 = v129[-2];
                            v131.i64[1] = v129[-1].u32[0];
                            *(int8x8_t *)v96.i8 = *v129;
                            v132 = (float32x4_t)v96;
                            v132.i32[2] = v129[1].i32[0];
                            v133 = v132;
                            v133.i32[3] = 0;
                            v134 = vaddq_f32(v131, v133);
                            v135 = vsubq_f32(v131, v133);
                            v136 = vsubq_f32(v39, v131);
                            *(int8x8_t *)v137.f32 = vext_s8(*(int8x8_t *)v136.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL), 4uLL);
                            v137.i64[1] = v136.u32[0];
                            *(int8x8_t *)v132.f32 = vext_s8(*v129, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL), 4uLL);
                            v132.i64[1] = v129->u32[0];
                            v138 = vmlaq_f32(vmulq_f32(v41, v137), v136, v53);
                            v139 = vmlaq_f32(vmulq_f32(v43, v132), v44, v133);
                            v75 = (int8x16_t)vcgeq_f32(v134, v50);
                            v140 = (int8x16_t)vcgeq_f32(v139, vabsq_f32(v138));
                            v96 = vandq_s8((int8x16_t)vcgeq_f32(v51, v135), v75);
                            *(int16x4_t *)v140.i8 = vmovn_s32((int32x4_t)vandq_s8(v96, v140));
                            v78 = vuzp1_s8(*(int8x8_t *)v140.i8, *(int8x8_t *)v140.i8);
                            if (v78.i32[0] == -1)
                            {
                              v156 = v5;
                              v163 = v51;
                              v165 = v50;
                              if (!(**a5)(a5, (float *)&v168, (float32x2_t *)v128))
                              {
                                v79 = v143;
                                return v79 & 1;
                              }
                              v78.i32[0] = v168;
                              v5 = v156;
                              if (*(float *)&v168 >= v99)
                              {
                                v41 = v160;
                                v39 = v161;
                                v44 = v158;
                                v43 = v159;
                                v53 = v157;
                                v51 = v163;
                                v50 = v165;
                              }
                              else
                              {
                                v96.i32[0] = v151->i32[v150];
                                *(float *)v75.i32 = *(float *)v96.i32 + (float)(*(float *)&v168 * v152->f32[v150]);
                                v41 = v160;
                                v39 = v161;
                                v141 = vmlaq_n_f32(v161, v160, *(float *)&v168);
                                v141.i64[1] = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u32[0];
                                v50 = vminq_f32(v161, v141);
                                v51 = vmaxq_f32(v161, v141);
                                *(int32x2_t *)v141.f32 = vdup_lane_s32(*(int32x2_t *)v96.i8, 0);
                                v96.i32[1] = v75.i32[0];
                                v142 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v96.i8), *(float32x2_t *)v96.i8), *(int8x8_t *)v141.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 0));
                                *(int8x8_t *)&v5 = vbsl_s8((int8x8_t)vcltz_s32(v142), vmvn_s8((int8x8_t)v142), (int8x8_t)(*(_QWORD *)&v142 | 0x8000000080000000));
                                v44 = v158;
                                v43 = v159;
                                v53 = v157;
                              }
                            }
                            else
                            {
LABEL_64:
                              *(float *)v78.i32 = v99;
                            }
                            v128 += 16;
                            v129 += 4;
                            v99 = *(float *)v78.i32;
                            v130 -= 32;
                            if (!v130)
                              goto LABEL_58;
                          }
                        }
                      }
                      *(float *)v78.i32 = v99;
LABEL_58:
                      v113 >>= 3;
                      ++v112;
                      v99 = *(float *)v78.i32;
                    }
                    while (v112 != 5);
                  }
                  else
                  {
LABEL_51:
                    *(float *)v78.i32 = v99;
                  }
                  v98 >>= 3;
                  v97 = v153 + 1;
                  v99 = *(float *)v78.i32;
                }
                while (v153 != 4);
              }
            }
            v86 = v146 >> 3;
            v81 = v147 > 3;
            v82 = v147 + 1;
          }
          while (v147 != 4);
          *v145 = *(float *)v78.i32;
        }
      }
    }
  }
  v79 = 1;
  return v79 & 1;
}

uint64_t physx::Sq::BucketPruner::visualize(uint64_t a1, _DWORD *a2, int a3)
{
  _DWORD *v6;
  double v7;
  double v8;
  float32x4_t v9;
  uint64_t result;
  double v11;
  double v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v22 = xmmword_2260E5D70;
  v23 = 0;
  v24 = 0;
  v6 = (_DWORD *)physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v22);
  a2[1] = a3;
  result = visualize(v6, (_QWORD *)(a1 + 848), v7, v8, v9);
  v14 = 0;
  v21 = (_QWORD *)(a1 + 2272);
  v20 = a1 + 2224;
  do
  {
    if (*(_DWORD *)(a1 + 880 + 4 * v14))
    {
      result = visualize(a2, (_QWORD *)(a1 + 16 + 32 * v14 + 912), v11, v12, v13);
      v15 = 0;
      v17 = v20;
      v16 = v21;
      do
      {
        if (*(_DWORD *)(a1 + 16 + 224 * v14 + 1088 + 4 * v15))
        {
          result = visualize(a2, (_QWORD *)(a1 + 224 * v14 + 32 * v15 + 1152), v11, v12, v13);
          v18 = 0;
          v19 = v16;
          do
          {
            if (*(_DWORD *)(v17 + v18))
              result = visualize(a2, v19, v11, v12, v13);
            v19 += 4;
            v18 += 4;
          }
          while (v18 != 20);
        }
        ++v15;
        v16 += 28;
        v17 += 224;
      }
      while (v15 != 5);
    }
    ++v14;
    v20 += 1120;
    v21 += 140;
  }
  while (v14 != 5);
  return result;
}

physx::Sq::ExtendedBucketPruner *physx::Sq::ExtendedBucketPruner::ExtendedBucketPruner(physx::Sq::ExtendedBucketPruner *this, const physx::Sq::PruningPool *a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24ED90A48;
  physx::Sq::IncrementalAABBPrunerCore::IncrementalAABBPrunerCore((physx::Sq::ExtendedBucketPruner *)((char *)this + 8), a2);
  *((_QWORD *)this + 23) = a2;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1061158912;
  *(_QWORD *)((char *)this + 236) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 61) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 192, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 312) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *((_DWORD *)this + 77) = 32;
  *((_QWORD *)this + 36) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 792, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 60);
  v4 = *((unsigned int *)this + 77);
  if ((_DWORD)v4)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 61);
    v7 = *((_DWORD *)this + 77);
    *((_QWORD *)this + 37) = v5;
    if (*((_DWORD *)this + 57) < v7)
      physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 192, v7, v6);
  }
  else
  {
    *((_QWORD *)this + 37) = 0;
  }
  v8 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v9 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
  else
    v9 = "<allocation names disabled>";
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v8 + 24) + 16))(v8 + 24, 104, v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 65);
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 96) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 76) = 0u;
  *((_QWORD *)this + 31) = v10;
  if (*((_DWORD *)this + 77))
  {
    v11 = 0;
    v12 = 0;
    v13 = *((_QWORD *)this + 37);
    do
    {
      *(_QWORD *)(v13 + v11 + 8) = 0;
      v14 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
      else
        v15 = "<allocation names disabled>";
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24)
                                                                                             + 16))(v14 + 24, 104, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 71);
      *(_QWORD *)v16 = 0;
      *(_DWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 96) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 76) = 0u;
      v13 = *((_QWORD *)this + 37);
      *(_QWORD *)(v13 + v11) = v16;
      ++v12;
      v11 += 16;
    }
    while (v12 < *((unsigned int *)this + 77));
  }
  return this;
}

void physx::Sq::ExtendedBucketPruner::~ExtendedBucketPruner(physx::Sq::ExtendedBucketPruner *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = &off_24ED90A48;
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 31));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((_QWORD *)this + 31) = 0;
  }
  v3 = *((unsigned int *)this + 77);
  if ((_DWORD)v3)
  {
    v4 = 0;
    for (i = 0; i < v3; ++i)
    {
      v6 = *((_QWORD *)this + 37);
      v7 = *(_QWORD *)(v6 + v4);
      if (v7)
      {
        physx::Sq::AABBTree::~AABBTree(*(physx::Sq::AABBTree **)(v6 + v4));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
        v3 = *((unsigned int *)this + 77);
      }
      v4 += 16;
    }
  }
  if (*((_QWORD *)this + 36))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 37))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 71);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 34))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 67);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 32))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 24))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::Sq::IncrementalAABBPrunerCore::~IncrementalAABBPrunerCore((physx::Sq::ExtendedBucketPruner *)((char *)this + 8));
}

{
  physx::Sq::ExtendedBucketPruner::~ExtendedBucketPruner(this);
  JUMPOUT(0x2276933B8);
}

void physx::Sq::ExtendedBucketPruner::release(physx::Sq::ExtendedBucketPruner *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  physx::Sq::IncrementalAABBPrunerCore::release((physx::Sq::ExtendedBucketPruner *)((char *)this + 8));
  v5 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 256, 0, &v5);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 256, *((_DWORD *)this + 66));
  v6 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 272, 0, &v6);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 272, *((_DWORD *)this + 70));
  physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 192);
  if (*((_DWORD *)this + 77))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)this + 37) + v2;
      *(_QWORD *)(v4 + 8) = 0;
      physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)v4, 1);
      ++v3;
      v2 += 16;
    }
    while (v3 < *((unsigned int *)this + 77));
  }
  *((_DWORD *)this + 76) = 0;
}

void *physx::Sq::ExtendedBucketPruner::addTree(int32x2_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int32 v5;
  unsigned int v6;
  void *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *result;
  int8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t i;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  int32x2_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v5 = a1[38].u32[0];
  v54 = a2;
  if (v5 == a1[38].i32[1])
  {
    v6 = 2 * v5;
    v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * ((2 * v5) | 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 201);
    memcpy(v7, *(const void **)&a1[36], (24 * a1[38].i32[1]));
    if (a1[36])
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    a1[36] = (int32x2_t)v7;
    if (v6)
      v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 32 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 208);
    else
      v8 = 0;
    memcpy(v8, *(const void **)&a1[37], (16 * a1[38].i32[1]));
    if (a1[37])
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    a1[37] = (int32x2_t)v8;
    v9 = a1[38].u32[1];
    if (v9 < v6)
    {
      v10 = v9 - v6;
      v11 = 16 * v9;
      do
      {
        *(_QWORD *)&v8[v11 + 8] = 0;
        v12 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
        else
          v13 = "<allocation names disabled>";
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24)
                                                                                               + 16))(v12 + 24, 104, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 217);
        *(_QWORD *)v14 = 0;
        *(_DWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 96) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 76) = 0u;
        v8 = (char *)a1[37];
        *(_QWORD *)&v8[v11] = v14;
        v11 += 16;
      }
      while (!__CFADD__(v10++, 1));
    }
    a1[38].i32[1] = v6;
    v5 = a1[38].u32[0];
    a2 = v54;
  }
  else
  {
    v8 = (char *)a1[37];
  }
  a1[38].i32[0] = v5 + 1;
  v16 = *(_QWORD *)(*(_QWORD *)&a1[23] + 16);
  v17 = *(unsigned int *)(a2 + 32);
  v18 = (uint64_t *)&v8[16 * v5];
  v55 = a3;
  v18[1] = a3;
  v19 = (unsigned int *)*v18;
  physx::Sq::AABBTree::initTree(*v18, (const void **)a2);
  v20 = *(_QWORD **)(v54 + 8);
  v21 = (_QWORD *)(*(_QWORD *)&a1[36] + 24 * v5);
  *v21 = *v20;
  v21[1] = v20[1];
  v21[2] = v20[2];
  physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBTreeUpdateMap *)&a1[34], *(_DWORD *)(v54 + 16), (const physx::Sq::AABBTree *)v19);
  result = physx::Sq::ExtendedBucketPruner::buildMainAABBTree((physx::Sq::ExtendedBucketPruner *)a1);
  v24 = v54;
  v25 = *(unsigned int *)(v54 + 16);
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = v16 + 16 * v17;
    do
    {
      if (v26 >= a1[35].u32[0])
        v28 = 0xFFFFFFFFLL;
      else
        v28 = *(unsigned int *)(*(_QWORD *)&a1[34] + 4 * v26);
      v29 = (uint64_t *)(v27 + 16 * v26);
      v30 = *v29;
      v31 = v29[1];
      v32 = a1[28].u32[1];
      v33 = ~(v30 << 32);
      if (v32)
      {
        v34 = (v33 + v30 + (v31 << 32)) ^ ((v33 + (unint64_t)v30 + (v31 << 32)) >> 22);
        v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
        v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
        v37 = (v32 - 1) & ((v36 >> 31) ^ v36);
        for (i = *(unsigned int *)(*(_QWORD *)&a1[27] + 4 * v37);
              (_DWORD)i != -1;
              i = *(unsigned int *)(*(_QWORD *)&a1[26] + 4 * i))
        {
          v39 = (uint64_t *)(*(_QWORD *)&a1[25] + 32 * i);
          v41 = *v39;
          v40 = v39[1];
          if (v41 == v30 && v40 == v31)
            goto LABEL_40;
        }
      }
      else
      {
        v37 = 0;
      }
      if (a1[30].i32[1] == a1[28].i32[0])
      {
        if (v32)
          v43 = 2 * v32;
        else
          v43 = 16;
        if (v32 < v43)
        {
          result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&a1[24], v43, v23);
          v24 = v54;
          v32 = a1[28].u32[1];
        }
        v44 = (v33 + v30 + (v31 << 32)) ^ ((v33 + (unint64_t)v30 + (v31 << 32)) >> 22);
        v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
        v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
        v37 = (v32 - 1) & ((v46 >> 31) ^ v46);
      }
      v47 = a1[29].u32[1];
      a1[29].i32[1] = v47 + 1;
      v48 = a1[27];
      v49 = a1[25];
      *(_DWORD *)(*(_QWORD *)&a1[26] + 4 * v47) = *(_DWORD *)(*(_QWORD *)&v48 + 4 * v37);
      *(_DWORD *)(*(_QWORD *)&v48 + 4 * v37) = v47;
      v23 = (int8x8_t)vadd_s32(a1[30], (int32x2_t)0x100000001);
      a1[30] = (int32x2_t)v23;
      v50 = *(_QWORD *)&v49 + 32 * v47;
      *(_QWORD *)v50 = v30;
      *(_QWORD *)(v50 + 8) = v31;
      *(_QWORD *)(v50 + 16) = v55 | (v28 << 32);
      *(_DWORD *)(v50 + 24) = v5;
      v25 = *(unsigned int *)(v24 + 16);
LABEL_40:
      ++v26;
    }
    while (v26 < v25);
  }
  if (v19[2])
  {
    v51 = 0;
    v52 = *(_DWORD *)(v24 + 32);
    v53 = *(_QWORD *)v19;
    do
      *(_DWORD *)(v53 + 4 * v51++) += v52;
    while (v51 < v19[2]);
  }
  return result;
}

void *physx::Sq::ExtendedBucketPruner::buildMainAABBTree(physx::Sq::ExtendedBucketPruner *this)
{
  int v2;
  void *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)this + 76);
  v5 = *((_QWORD *)this + 36);
  v6 = 0;
  LODWORD(v4) = 4;
  HIDWORD(v4) = v2;
  physx::Sq::AABBTree::build(*((_DWORD **)this + 31), (uint64_t)&v4);
  result = physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::ExtendedBucketPruner *)((char *)this + 256), *((_DWORD *)this + 76), *((const physx::Sq::AABBTree **)this + 31));
  v4 = 0;
  v5 = 0;
  if (v6)
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::updateObject(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;

  if (!*(_DWORD *)(a1 + 244))
    return physx::Sq::IncrementalAABBPrunerCore::updateObject((int32x2_t *)(a1 + 8), a4);
  v5 = a3[1];
  v6 = ~(*a3 << 32) + *a3 + (v5 << 32);
  v7 = 9 * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 216)
                       + 4 * ((*(_DWORD *)(a1 + 228) - 1) & ((v8 >> 31) ^ v8)));
  if ((_DWORD)v9 == -1)
    return physx::Sq::IncrementalAABBPrunerCore::updateObject((int32x2_t *)(a1 + 8), a4);
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 200) + 32 * v9;
    if (*(_QWORD *)v10 == *a3 && *(_QWORD *)(v10 + 8) == v5)
      break;
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 208) + 4 * v9);
    if ((_DWORD)v9 == -1)
      return physx::Sq::IncrementalAABBPrunerCore::updateObject((int32x2_t *)(a1 + 8), a4);
  }
  physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(*(_QWORD *)(a1 + 296) + 16 * *(unsigned int *)(v10 + 24)), *(_DWORD *)(v10 + 20));
  v13 = *(unsigned int *)(v10 + 24);
  if (*(_DWORD *)(a1 + 264) <= v13)
    v14 = -1;
  else
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v13);
  physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(a1 + 248), v14);
  *(_BYTE *)(a1 + 312) = 1;
  return 1;
}

void physx::Sq::ExtendedBucketPruner::refitMarkedNodes(uint64_t a1, uint64_t a2)
{
  int v3;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  physx::Sq::AABBTree *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (!*(_BYTE *)(a1 + 312))
    return;
  v3 = *(_DWORD *)(a1 + 304);
  if (!v3)
  {
    v22 = *(_QWORD *)(a1 + 288);
    goto LABEL_77;
  }
  v5 = 0;
  v6 = v3 - 1;
  do
  {
    v7 = v6;
    v8 = *(uint64_t **)(*(_QWORD *)(a1 + 296) + 16 * v6);
    physx::Sq::AABBTree::refitMarkedNodes(v8, a2);
    v9 = (float *)v8[2];
    v10 = *v9;
    if ((~*(_DWORD *)v9 & 0x7F800000) == 0)
    {
      v11 = v9[1];
      goto LABEL_36;
    }
    v11 = v9[1];
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      v12 = v9[2];
      if ((~LODWORD(v12) & 0x7F800000) != 0)
      {
        v13 = v9[3];
        if ((~LODWORD(v13) & 0x7F800000) != 0)
        {
          v14 = v9[4];
          if ((~LODWORD(v14) & 0x7F800000) != 0)
          {
            v15 = v9[5];
            if ((~LODWORD(v15) & 0x7F800000) != 0)
            {
              if (v10 <= v13 && v11 <= v14 && v12 <= v15)
                goto LABEL_35;
              if (v10 == 8.5071e37 && v11 == 8.5071e37)
              {
                if (v12 != 8.5071e37 || v13 != -8.5071e37 || v14 != -8.5071e37 || v15 != -8.5071e37)
                {
                  v11 = 8.5071e37;
                  goto LABEL_36;
                }
LABEL_35:
                ++v5;
              }
            }
          }
        }
      }
    }
LABEL_36:
    v22 = *(_QWORD *)(a1 + 288);
    v23 = v22 + 24 * v6;
    *(float *)v23 = v10;
    *(float *)(v23 + 4) = v11;
    *(_QWORD *)(v23 + 8) = *((_QWORD *)v9 + 1);
    *(_QWORD *)(v23 + 16) = *((_QWORD *)v9 + 2);
    --v6;
  }
  while (v7);
  v24 = *(unsigned int *)(a1 + 304);
  if (v5 == (_DWORD)v24)
  {
LABEL_77:
    physx::Sq::AABBTree::refitMarkedNodes(*(uint64_t **)(a1 + 248), v22);
    goto LABEL_88;
  }
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, (4 * v24) | 1, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 300);
  if (*(_DWORD *)(a1 + 304))
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = *(_QWORD *)(a1 + 296);
    do
    {
      v31 = *(physx::Sq::AABBTree **)(v30 + v27);
      v32 = (float *)*((_QWORD *)v31 + 2);
      v33 = *v32;
      if ((~*(_DWORD *)v32 & 0x7F800000) == 0)
        goto LABEL_70;
      v34 = v32[1];
      if ((~LODWORD(v34) & 0x7F800000) == 0)
        goto LABEL_70;
      v35 = v32[2];
      if ((~LODWORD(v35) & 0x7F800000) == 0)
        goto LABEL_70;
      v36 = v32[3];
      if ((~LODWORD(v36) & 0x7F800000) == 0)
        goto LABEL_70;
      v37 = v32[4];
      if ((~LODWORD(v37) & 0x7F800000) == 0)
        goto LABEL_70;
      v38 = v32[5];
      if ((~LODWORD(v38) & 0x7F800000) == 0)
        goto LABEL_70;
      v39 = v33 > v36 || v34 > v37;
      v40 = v39 || v35 > v38;
      if (!v40
        || (v33 == 8.5071e37 ? (v41 = v34 == 8.5071e37) : (v41 = 0),
            v41 ? (v42 = v35 == 8.5071e37) : (v42 = 0),
            v42 ? (v43 = v36 == -8.5071e37) : (v43 = 0),
            v43 ? (v44 = v37 == -8.5071e37) : (v44 = 0),
            v44 ? (v45 = v38 == -8.5071e37) : (v45 = 0),
            v45))
      {
        if (v28 != v29)
        {
          v46 = *(_QWORD *)(v30 + 16 * v29);
          *(_OWORD *)(v30 + 16 * v29) = *(_OWORD *)(v30 + v27);
          v47 = *(_QWORD *)(a1 + 288);
          v30 = *(_QWORD *)(a1 + 296);
          *(_QWORD *)(v30 + v27) = v46;
          v48 = v47 + v26;
          v49 = v47 + 24 * v29;
          *(_OWORD *)v49 = *(_OWORD *)v48;
          *(_QWORD *)(v49 + 16) = *(_QWORD *)(v48 + 16);
        }
        *(_DWORD *)(v25 + 4 * v28) = v29++;
      }
      else
      {
LABEL_70:
        physx::Sq::AABBTree::release(v31, 1);
        v30 = *(_QWORD *)(a1 + 296);
        *(_QWORD *)(v30 + v27 + 8) = 0;
      }
      *(_DWORD *)(v25 + 4 * *(unsigned int *)(a1 + 304)) = v28++;
      v27 += 16;
      v26 += 24;
    }
    while (v28 < *(unsigned int *)(a1 + 304));
  }
  *(_DWORD *)(a1 + 304) = v5;
  if (v5)
  {
    physx::Sq::ExtendedBucketPruner::buildMainAABBTree((physx::Sq::ExtendedBucketPruner *)a1);
    if (*(_DWORD *)(a1 + 224))
    {
      v50 = *(unsigned int **)(a1 + 216);
      v51 = *v50;
      if ((_DWORD)v51 == -1)
      {
        v52 = 0;
        while (*(_DWORD *)(a1 + 228) - 1 != v52)
        {
          v51 = v50[++v52];
          if ((_DWORD)v51 != -1)
            goto LABEL_91;
        }
      }
      else
      {
        LODWORD(v52) = 0;
LABEL_91:
        v53 = *(_QWORD *)(a1 + 200);
        v54 = *(_QWORD *)(a1 + 208);
        do
        {
LABEL_92:
          *(_DWORD *)(v53 + 32 * v51 + 24) = *(_DWORD *)(v25 + 4 * *(unsigned int *)(v53 + 32 * v51 + 24));
          v51 = *(unsigned int *)(v54 + 4 * v51);
        }
        while ((_DWORD)v51 != -1);
        while (*(_DWORD *)(a1 + 228) - 1 != (_DWORD)v52)
        {
          LODWORD(v52) = v52 + 1;
          v51 = v50[v52];
          if ((_DWORD)v51 != -1)
            goto LABEL_92;
        }
      }
    }
  }
  else
  {
    physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)(a1 + 248), 1);
  }
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v25);
LABEL_88:
  *(_BYTE *)(a1 + 312) = 0;
}

uint64_t physx::Sq::ExtendedBucketPruner::removeObject(uint64_t a1, uint64_t *a2, int a3, _QWORD *a4, int a5, unsigned int *a6)
{
  unsigned int v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  unsigned int v15;

  v13[0] = 0;
  v13[1] = 0;
  v15 = 0;
  v14 = 0;
  if ((physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 192, a2, (uint64_t)v13) & 1) != 0)
  {
    physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(*(_QWORD *)(a1 + 296) + 16 * v15), HIDWORD(v14));
    if (*(_DWORD *)(a1 + 264) <= v15)
      v11 = -1;
    else
      v11 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v15);
    physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(a1 + 248), v11);
    physx::Sq::ExtendedBucketPruner::invalidateObject((int32x2_t *)a1, (uint64_t)&v14, a3, a4, a5);
    result = 1;
    *(_BYTE *)(a1 + 312) = 1;
  }
  else
  {
    physx::Sq::ExtendedBucketPruner::swapIndex((int32x2_t *)a1, a3, a4, a5, 0);
    return physx::Sq::IncrementalAABBPrunerCore::removeObject((int32x2_t *)(a1 + 8), a3, a5, a6);
  }
  return result;
}

int32x2_t *physx::Sq::ExtendedBucketPruner::swapIndex(int32x2_t *result, int a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  int *i;

  if (a2 != a4)
  {
    if (!result[30].i32[1]
      || (v5 = a3[1],
          v6 = ~(*a3 << 32) + *a3 + (v5 << 32),
          v7 = 9
             * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8)),
          v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27),
          v9 = *(unsigned int *)(*(_QWORD *)&result[27]
                               + 4 * ((result[28].i32[1] - 1) & ((v8 >> 31) ^ v8))),
          (_DWORD)v9 == -1))
    {
LABEL_9:
      if (a5)
        return (int32x2_t *)physx::Sq::IncrementalAABBPrunerCore::swapIndex(result + 1, a2, a4);
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)&result[25] + 32 * v9;
        if (*(_QWORD *)v10 == *a3 && *(_QWORD *)(v10 + 8) == v5)
          break;
        v9 = *(unsigned int *)(*(_QWORD *)&result[26] + 4 * v9);
        if ((_DWORD)v9 == -1)
          goto LABEL_9;
      }
      v12 = *(_QWORD **)(*(_QWORD *)&result[37] + 16 * *(unsigned int *)(v10 + 24));
      v13 = *(unsigned int *)(v12[2] + 28 * *(unsigned int *)(v10 + 20) + 24);
      v14 = (v13 >> 1) & 0xF;
      if ((_DWORD)v14)
      {
        for (i = (int *)(*v12 + ((v13 >> 3) & 0x1FFFFFFC)); *i != a4; ++i)
        {
          if (!--v14)
            return result;
        }
        *i = a2;
      }
    }
  }
  return result;
}

int32x2_t *physx::Sq::ExtendedBucketPruner::invalidateObject(int32x2_t *a1, uint64_t a2, int a3, _QWORD *a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int v14;

  v5 = *(_QWORD **)(*(_QWORD *)&a1[37] + 16 * *(unsigned int *)(a2 + 8));
  v6 = v5[2] + 28 * *(unsigned int *)(a2 + 4);
  v9 = *(_DWORD *)(v6 + 24);
  v7 = (_DWORD *)(v6 + 24);
  v8 = v9;
  v10 = ((unint64_t)v9 >> 1) & 0xF;
  if ((_DWORD)v10)
  {
    v11 = *v5 + ((v8 >> 3) & 0x1FFFFFFC);
    v12 = (_DWORD *)v11;
    v13 = v10;
    while (*v12 != a3)
    {
      ++v12;
      if (!--v13)
        return physx::Sq::ExtendedBucketPruner::swapIndex(a1, a3, a4, a5, 1);
    }
    v14 = v10 - 1;
    *v7 = v8 & 0xFFFFFFE1 | (2 * v14);
    *v12 = -1;
    if ((_DWORD)v13 != 1)
    {
      *v12 = *(_DWORD *)(v11 + 4 * v14);
      *(_DWORD *)(v11 + 4 * v14) = -1;
    }
  }
  return physx::Sq::ExtendedBucketPruner::swapIndex(a1, a3, a4, a5, 1);
}

uint64_t physx::Sq::ExtendedBucketPruner::removeMarkedObjects(physx::Sq::ExtendedBucketPruner *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  physx::Sq::AABBTree *v25;
  physx::Sq::AABBTree **v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *i;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;

  v4 = physx::Sq::IncrementalAABBPrunerCore::removeMarkedObjects((physx::Sq::ExtendedBucketPruner *)((char *)this + 8));
  v5 = *((unsigned int *)this + 76);
  if ((_DWORD)v5)
  {
    v6 = *((_QWORD *)this + 37);
    if (*(_QWORD *)(v6 + 16 * (v5 - 1) + 8) == a2)
    {
      v7 = 0;
      v8 = 0;
      v9 = *((_DWORD *)this + 61);
      do
      {
        physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)(v6 + v7), 1);
        v6 = *((_QWORD *)this + 37);
        *(_QWORD *)(v6 + v7 + 8) = 0;
        ++v8;
        v7 += 16;
      }
      while (v8 < *((unsigned int *)this + 76));
      v4 = (v9 + v4);
      physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 192);
      *((_DWORD *)this + 76) = 0;
      physx::Sq::AABBTree::release(*((physx::Sq::AABBTree **)this + 31), 1);
      return v4;
    }
    if (*(_QWORD *)(v6 + 8) == a2)
    {
      v10 = 0;
      v11 = -1;
      while (16 * v5 - 16 != v10)
      {
        v12 = *(_QWORD *)(v6 + v10 + 24);
        ++v11;
        v10 += 16;
        if (v12 != a2)
          goto LABEL_12;
      }
      v11 = v5 - 1;
LABEL_12:
      if (v11 != -1)
      {
        v13 = v11;
        v14 = v11 + 1;
        LODWORD(v5) = v5 - (v11 + 1);
        *((_DWORD *)this + 76) = v5;
        if (!(_DWORD)v5)
          goto LABEL_17;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = v13 + v17 + 1;
          v19 = (uint64_t *)(v6 + 16 * v18);
          v21 = *v19;
          v20 = v19[1];
          v22 = *(_QWORD **)(v21 + 16);
          v23 = (_QWORD *)(*((_QWORD *)this + 36) + v15);
          *v23 = *v22;
          v23[1] = v22[1];
          v23[2] = v22[2];
          v24 = v6 + v16;
          *(_QWORD *)(v24 + 8) = v20;
          v25 = *(physx::Sq::AABBTree **)v24;
          physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)v24, 1);
          v6 = *((_QWORD *)this + 37);
          v26 = (physx::Sq::AABBTree **)(v6 + 16 * v18);
          *(_QWORD *)(v6 + v16) = *v26;
          *v26 = v25;
          v26[1] = 0;
          ++v17;
          v5 = *((unsigned int *)this + 76);
          v16 += 16;
          v15 += 24;
        }
        while (v17 < v5);
        if (v5 <= v13)
        {
LABEL_17:
          v27 = v13 - v5 + 1;
          v28 = 16 * v5;
          do
          {
            physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)(v6 + v28), 1);
            v6 = *((_QWORD *)this + 37);
            *(_QWORD *)(v6 + v28 + 8) = 0;
            v28 += 16;
            --v27;
          }
          while (v27);
        }
        physx::Sq::ExtendedBucketPruner::buildMainAABBTree(this);
        v29 = *((unsigned int *)this + 57);
        if ((_DWORD)v29)
        {
          v30 = 0;
          v31 = (_DWORD *)*((_QWORD *)this + 27);
          i = v31;
          while (1)
          {
            v33 = *i;
            if ((_DWORD)v33 != -1)
              break;
            ++v30;
            ++i;
            if (v29 == v30)
              goto LABEL_47;
          }
          v34 = *((_QWORD *)this + 25);
          if (v34)
          {
            LODWORD(v29) = 0;
            v35 = v30 + 1;
            v36 = v34 + 32 * v33;
            while (*(_DWORD *)(v36 + 16) != a2)
            {
              *(_DWORD *)(v36 + 24) -= v14;
              i = (_DWORD *)(*((_QWORD *)this + 26) + 4 * *i);
              LODWORD(v33) = *i;
              if (*i == -1)
              {
                v50 = *((_DWORD *)this + 57);
                if (v35 >= v50)
                  return (v29 + v4);
                for (i = &v31[v35]; ; ++i)
                {
                  LODWORD(v33) = *i;
                  if (*i != -1)
                    break;
                  if (v50 == ++v35)
                    return (v29 + v4);
                }
LABEL_44:
                ++v35;
              }
LABEL_45:
              v36 = v34 + 32 * v33;
              if (!v34)
                return (v29 + v4);
            }
            *i = *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v33);
            v37 = (*((_DWORD *)this + 61) - 1);
            ++*((_DWORD *)this + 60);
            *((_DWORD *)this + 61) = v37;
            if ((_DWORD)v33 != (_DWORD)v37)
            {
              v38 = v34 + 32 * v33;
              v39 = v34 + 32 * v37;
              *(_OWORD *)v38 = *(_OWORD *)v39;
              v40 = *(_DWORD *)(v39 + 24);
              *(_QWORD *)(v38 + 16) = *(_QWORD *)(v39 + 16);
              *(_DWORD *)(v38 + 24) = v40;
              v34 = *((_QWORD *)this + 25);
              v41 = *((_QWORD *)this + 26);
              *(_DWORD *)(v41 + 4 * v33) = *(_DWORD *)(v41 + 4 * *((unsigned int *)this + 61));
              v42 = ~(*(_QWORD *)(v34 + 32 * v33) << 32)
                  + *(_QWORD *)(v34 + 32 * v33)
                  + (*(_QWORD *)(v34 + 32 * v33 + 8) << 32);
              v43 = (v42 ^ (v42 >> 22)) + ~((v42 ^ (v42 >> 22)) << 13);
              v44 = (9 * (v43 ^ (v43 >> 8))) ^ ((9 * (v43 ^ (v43 >> 8))) >> 15);
              LODWORD(v38) = (*((_DWORD *)this + 57) - 1) & (((v44 + ~(v44 << 27)) >> 31) ^ (v44 + ~((_DWORD)v44 << 27)));
              v31 = (_DWORD *)*((_QWORD *)this + 27);
              v45 = &v31[v38];
              v46 = *((unsigned int *)this + 61);
              v47 = *v45;
              if (v47 != v46)
              {
                do
                {
                  v48 = v47;
                  v47 = *(unsigned int *)(v41 + 4 * v47);
                }
                while (v47 != v46);
                v45 = (_DWORD *)(v41 + 4 * v48);
              }
              *v45 = v33;
            }
            LODWORD(v29) = v29 + 1;
            --*((_DWORD *)this + 59);
            LODWORD(v33) = *i;
            if (*i != -1)
              goto LABEL_45;
            v49 = *((_DWORD *)this + 57);
            if (v35 >= v49)
              return (v29 + v4);
            for (i = &v31[v35]; ; ++i)
            {
              LODWORD(v33) = *i;
              if (*i != -1)
                break;
              if (v49 == ++v35)
                return (v29 + v4);
            }
            goto LABEL_44;
          }
LABEL_47:
          LODWORD(v29) = 0;
        }
        return (v29 + v4);
      }
    }
  }
  return v4;
}

void physx::Sq::ExtendedBucketPruner::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  physx::Sq::AABBTree::shiftOrigin(*(_QWORD *)(a1 + 248), a2);
  if (*(_DWORD *)(a1 + 304))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      physx::Sq::AABBTree::shiftOrigin(*(_QWORD *)(*(_QWORD *)(a1 + 296) + v4), a2);
      ++v5;
      v4 += 16;
    }
    while (v5 < *(unsigned int *)(a1 + 304));
  }
  physx::Sq::IncrementalAABBPrunerCore::shiftOrigin(a1 + 8, (float32x4_t *)a2);
}

uint64_t physx::Sq::ExtendedBucketPruner::raycast(uint64_t a1, unsigned int (**a2)(_QWORD, float *, uint64_t), unsigned int (**a3)(_QWORD, float *, uint64_t), float *a4, unsigned int (**a5)(_QWORD, float *, uint64_t))
{
  uint64_t result;
  unsigned int (**v11)(_QWORD, float *, uint64_t);
  char v12;
  unsigned int (**v13[6])(_QWORD, float *, uint64_t);
  uint64_t v14;
  int v15;

  if (!(*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 156))
    || (result = physx::Sq::IncrementalAABBPrunerCore::raycast(a1 + 8, (float32x2_t *)a2, (float32x2_t *)a3, a4, (unsigned int (***)(_QWORD, float *, uint64_t))a5), (_DWORD)result))
  {
    if (*(_DWORD *)(a1 + 244))
    {
      v15 = 0;
      v11 = *(unsigned int (***)(_QWORD, float *, uint64_t))(a1 + 184);
      v13[0] = (unsigned int (**)(_QWORD, float *, uint64_t))off_24ED90B90;
      v13[1] = a2;
      v13[2] = a3;
      v13[3] = (unsigned int (**)(_QWORD, float *, uint64_t))&v14;
      v13[4] = a5;
      v13[5] = v11;
      v14 = 0;
      return physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v12, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD **)(a1 + 248), (float32x2_t *)a2, (float32x2_t *)a3, a4, (uint64_t)&v14, v13);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::overlap(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, int *, uint64_t), double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t result;
  float32x4_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float32x2_t v18;
  double v19;
  double v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  __int128 v24;
  int32x4_t v25;
  __int128 v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  uint64_t v41;
  char v42;
  uint64_t (**v43)();
  float32x4_t *v44;
  uint64_t (***v45)(_QWORD, int *, uint64_t);
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  int32x4_t v50;
  int8x16_t v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!(*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 156))
    || (result = physx::Sq::IncrementalAABBPrunerCore::overlap(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10),
        (_DWORD)result))
  {
    if (*(_DWORD *)(a1 + 244))
    {
      result = 1;
      switch(*(_WORD *)(a2 + 98))
      {
        case 0:
          LODWORD(a4) = *(_DWORD *)(a2 + 112);
          v14 = *(float32x4_t *)(a2 + 100);
          v14.i64[1] = *(unsigned int *)(a2 + 108);
          v47 = v14;
          *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
          *(int32x2_t *)v48.f32 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
          v15 = *(_QWORD *)(a1 + 184);
          v43 = off_24ED90CA0;
          v44 = &v47;
          v45 = a3;
          v46 = v15;
          result = physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD **)(a1 + 248), (uint64_t)&v47, (uint64_t (***)(_QWORD, int *, uint64_t))&v43);
          break;
        case 2:
          v16 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
          v17 = *(float *)(a2 + 120);
          v21.i64[0] = *(_QWORD *)(a2 + 112);
          v18 = *(float32x2_t *)(a2 + 12);
          v19 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v21.f32, vmul_n_f32(v18, v16)));
          v20 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v18), *(int8x8_t *)v21.f32, vbsl_s8((int8x8_t)vcgez_f32(v18), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
          v21.i64[1] = LODWORD(v17);
          v22 = *(float *)(a2 + 20);
          *(float32x2_t *)v23.f32 = v18;
          v23.i64[1] = LODWORD(v22);
          *(float *)&a6 = *(float *)(a2 + 124) * 1.01;
          v47 = v21;
          v48 = v23;
          *(int8x8_t *)&v24 = vext_s8((int8x8_t)v18, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
          *((_QWORD *)&v24 + 1) = v18.u32[0];
          v25 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
          v25.i32[3] = 0;
          v49 = v24;
          v50 = v25;
          v51 = (int8x16_t)vabsq_f32(v23);
          *(int8x8_t *)&v26 = vext_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), 4uLL);
          *((_QWORD *)&v26 + 1) = v51.u32[0];
          v27 = v17 + (float)(v16 * v22);
          v28 = -3.4028e38;
          if (v22 >= 0.0)
            v28 = 3.4028e38;
          if (v22 != 0.0)
            v17 = v28;
          v29 = v16 < 3.4028e38;
          if (v16 >= 3.4028e38)
            v30 = v17;
          else
            v30 = v27;
          if (v29)
            *(double *)v31.i64 = v19;
          else
            *(double *)v31.i64 = v20;
          v31.i64[1] = LODWORD(v30);
          v52 = v26;
          v53 = vminq_f32(v21, v31);
          v54 = vmaxq_f32(v21, v31);
          v32 = *(_QWORD *)(a1 + 184);
          v43 = off_24ED90C60;
          v44 = &v47;
          v45 = a3;
          v46 = v32;
          result = physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD **)(a1 + 248), &v47, (uint64_t (***)(_QWORD, int *, uint64_t))&v43);
          break;
        case 3:
          if (*(_WORD *)(a2 + 96))
            goto LABEL_19;
          v34 = *(float *)(a2 + 80);
          v35 = *(float *)(a2 + 92);
          v36 = *(float32x2_t *)(a2 + 72);
          v37 = *(float32x2_t *)(a2 + 84);
          *(float32x2_t *)v38.f32 = vmul_f32(vadd_f32(v36, v37), (float32x2_t)0x3F0000003F000000);
          v38.f32[2] = (float)(v34 + v35) * 0.5;
          v38.i32[3] = 0;
          v39 = v35 - v34;
          *(float32x2_t *)v40.f32 = vmul_f32(vsub_f32(v37, v36), (float32x2_t)0x3F0000003F000000);
          v40.i64[1] = COERCE_UNSIGNED_INT(v39 * 0.5);
          v47 = v38;
          v48 = v40;
          v41 = *(_QWORD *)(a1 + 184);
          v43 = off_24ED90C20;
          v44 = &v47;
          v45 = a3;
          v46 = v41;
          result = physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD **)(a1 + 248), &v47, (uint64_t (***)(_QWORD, int *, uint64_t))&v43);
          break;
        case 4:
LABEL_19:
          physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)&v47, a2 + 48, (__int32 *)(a2 + 12), a2, a4, a5, a6, a7, a8, a9, a10);
          v33 = *(_QWORD *)(a1 + 184);
          v43 = off_24ED90BE0;
          v44 = &v47;
          v45 = a3;
          v46 = v33;
          result = physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD **)(a1 + 248), &v47, (unsigned int (***)(_QWORD, int *, uint64_t))&v43);
          break;
        default:
          return result;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::sweep(uint64_t a1, float *a2, unsigned int (**a3)(_QWORD, float *, uint64_t), float *a4, unsigned int (**a5)(_QWORD, float *, uint64_t))
{
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int (**v17)(_QWORD, float *, uint64_t);
  char v18;
  unsigned int (**v19[6])(_QWORD, float *, uint64_t);
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  float v23;

  if (!(*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 156))
    || (result = physx::Sq::IncrementalAABBPrunerCore::sweep(a1 + 8, a2, (float32x2_t *)a3, a4, (unsigned int (***)(_QWORD, float *, uint64_t))a5), (_DWORD)result))
  {
    if (*(_DWORD *)(a1 + 244))
    {
      v11 = a2[18];
      v12 = a2[19];
      v14 = a2[20];
      v13 = a2[21];
      v15 = a2[22];
      v16 = a2[23];
      v22.f32[0] = (float)(v13 - v11) * 0.5;
      v22.f32[1] = (float)(v15 - v12) * 0.5;
      v23 = (float)(v16 - v14) * 0.5;
      v20.f32[0] = (float)(v13 + v11) * 0.5;
      v20.f32[1] = (float)(v15 + v12) * 0.5;
      v21 = (float)(v16 + v14) * 0.5;
      v17 = *(unsigned int (***)(_QWORD, float *, uint64_t))(a1 + 184);
      v19[0] = (unsigned int (**)(_QWORD, float *, uint64_t))off_24ED90CE0;
      v19[1] = (unsigned int (**)(_QWORD, float *, uint64_t))&v20;
      v19[2] = a3;
      v19[3] = (unsigned int (**)(_QWORD, float *, uint64_t))&v22;
      v19[4] = a5;
      v19[5] = v17;
      return physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v18, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD **)(a1 + 248), &v20, (float32x2_t *)a3, a4, &v22, v19);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::visualize(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;

  visualizeTree((uint64_t)a2, a3, *(_QWORD *)(a1 + 248));
  if (*(_DWORD *)(a1 + 304))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      visualizeTree((uint64_t)a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 296) + v6));
      ++v7;
      v6 += 16;
    }
    while (v7 < *(unsigned int *)(a1 + 304));
  }
  return physx::Sq::IncrementalAABBPrunerCore::visualize(a1 + 8, a2, a3);
}

uint64_t visualizeTree(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v4;
  __int128 v5;
  uint64_t v6;
  int v7;

  if (a3)
  {
    if (*(_QWORD *)(a3 + 16))
    {
      v4 = (_DWORD *)result;
      v5 = xmmword_2260E5D70;
      v6 = 0;
      v7 = 0;
      *(_DWORD *)(physx::Cm::RenderOutput::operator<<(result, (uint64_t)&v5) + 4) = a2;
      return physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*(_QWORD *)(a3 + 16), *(__int128 **)(a3 + 16), v4);
    }
  }
  return result;
}

void physx::Sq::PruningPool::~PruningPool(physx::Sq::PruningPool *this)
{
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)this + 4))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 4) = 0;
}

uint64_t physx::Sq::PruningPool::resize(physx::Sq::PruningPool *this, unsigned int a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  BOOL v10;
  BOOL v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  if (a2 == -1)
  {
    v4 = 0;
    v5 = 0xFFFFFFFFLL;
LABEL_5:
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 62);
    v7 = 4 * v5;
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 63);
    v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 64);
    goto LABEL_7;
  }
  v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 61);
  if (a2)
  {
    v5 = a2;
    goto LABEL_5;
  }
  v6 = 0;
  v8 = 0;
  v9 = 0;
LABEL_7:
  if (v4)
    v10 = v6 == 0;
  else
    v10 = 1;
  v12 = v10 || v8 == 0 || v9 == 0;
  v13 = v12;
  if (v12)
  {
    if (v4)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    if (v6)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v8)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    if (v9)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
  }
  else
  {
    v14 = (const void *)*((_QWORD *)this + 1);
    if (v14)
      memcpy(v4, v14, (24 * *(_DWORD *)this));
    v15 = (const void *)*((_QWORD *)this + 2);
    if (v15)
      memcpy(v6, v15, (16 * *(_DWORD *)this));
    v16 = (const void *)*((_QWORD *)this + 4);
    if (v16)
      memcpy(v8, v16, (4 * *(_DWORD *)this));
    v17 = (const void *)*((_QWORD *)this + 3);
    if (v17)
      memcpy(v9, v17, (4 * *((_DWORD *)this + 1)));
    *((_DWORD *)this + 1) = a2;
    if (*((_QWORD *)this + 1))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1) = 0;
    if (*((_QWORD *)this + 2))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 2) = 0;
    if (*((_QWORD *)this + 3))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 3) = 0;
    if (*((_QWORD *)this + 4))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1) = v4;
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v9;
    *((_QWORD *)this + 4) = v8;
  }
  return v13 ^ 1u;
}

float32_t physx::Sq::PruningPool::shiftOrigin(unsigned int *a1, float32x2_t *a2)
{
  uint64_t v2;
  float32x2_t *v3;
  float32_t result;

  v2 = *a1;
  if ((_DWORD)v2)
  {
    v3 = (float32x2_t *)(*((_QWORD *)a1 + 1) + 12);
    do
    {
      *(float32x2_t *)((char *)v3 - 12) = vsub_f32(*(float32x2_t *)((char *)v3 - 12), *a2);
      v3[-1].f32[1] = v3[-1].f32[1] - a2[1].f32[0];
      *v3 = vsub_f32(*v3, *a2);
      result = v3[1].f32[0] - a2[1].f32[0];
      v3[1].f32[0] = result;
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void physx::Sq::PruningStructure::~PruningStructure(physx::Sq::PruningStructure *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;

  *(_QWORD *)this = off_24ED90A68;
  if ((*((_WORD *)this + 5) & 1) != 0)
  {
    v2 = 0;
    v3 = 1;
    do
    {
      v4 = v3;
      v5 = (char *)this + 8 * v2;
      if (*((_QWORD *)v5 + 6))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      if (*((_QWORD *)v5 + 3))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v3 = 0;
      v2 = 1;
    }
    while ((v4 & 1) != 0);
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v2;

  physx::Sq::PruningStructure::~PruningStructure(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Sq::PruningStructure *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Sq::PruningStructure::release(physx::Sq::PruningStructure *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 16);
  if ((_DWORD)v1)
  {
    v2 = *((_QWORD *)this + 9);
    do
    {
      v3 = *(unsigned __int16 *)(*(_QWORD *)v2 + 8);
      if (v3 == 5 || v3 == 6)
        *(_QWORD *)(*(_QWORD *)v2 + 80) = 0;
      v2 += 8;
      --v1;
    }
    while (v1);
  }
  v4 = *(_QWORD *)this;
  if ((*((_WORD *)this + 5) & 1) != 0)
    return (*(uint64_t (**)(void))(v4 + 32))();
  else
    return (*(uint64_t (**)(void))(v4 + 24))();
}

uint64_t physx::Sq::PruningStructure::build(physx::Sq::PruningStructure *this, physx::PxRigidActor *const *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v16;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  physx::PxRigidActor *v29;
  _QWORD *v30;
  uint64_t v31;
  physx::PxRigidActor *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  float32x2_t *v47;
  uint64_t v48;
  __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  float32x2_t *v60;
  uint64_t v61;
  __int8 *v62;
  float32x2_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t i;
  _QWORD *v71;
  uint64_t v72;
  char v73;
  physx::Sq::PruningStructure *v74;
  char v75;
  int v76;
  char *v77;
  _DWORD *v78;
  uint64_t v79;
  const void **v80;
  uint64_t v81;
  _DWORD *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  size_t v88;
  uint64_t j;
  char v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char v95;
  unint64_t v97;
  char v98;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[26];
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];

  v8 = a3;
  v107[1] = *MEMORY[0x24BDAC8D0];
  v107[0] = 0;
  if (!a3)
  {
    v12 = 0;
LABEL_29:
    v34 = 0;
    v35 = 1;
    LODWORD(v107[0]) = v12;
    v105 = 0;
    v106 = 0;
    do
    {
      v36 = v35;
      v37 = *((_DWORD *)v107 + v34);
      if (v37)
      {
        _CF = __CFADD__(v37, 1);
        v38 = v37 + 1;
        if (_CF)
          v39 = 0;
        else
          v39 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * v38, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 227);
        *(&v105 + v34) = v39;
      }
      v35 = 0;
      v34 = 1;
    }
    while ((v36 & 1) != 0);
    v107[0] = 0;
    if (v8)
    {
      v40 = 0;
      do
      {
        v41 = (int32x4_t *)a2[v40];
        v42 = v41->u16[4];
        if (v42 == 5)
        {
          v56 = v106;
          v57 = HIDWORD(v107[0]);
          v58 = (*(uint64_t (**)(physx::PxRigidActor *const))(v41->i64[0] + 184))(a2[v40]);
          if (v58)
          {
            v59 = 0;
            v60 = (float32x2_t *)(v56 + 24 * v57);
            v61 = 8 * v58;
            do
            {
              v62 = &v41[2].i8[8];
              if (v41[3].i16[0] != 1)
                v62 = (__int8 *)v41[2].i64[1];
              v63 = *(float32x2_t **)&v62[v59];
              (*(void (**)(_QWORD *__return_ptr, float32x2_t *))(*(_QWORD *)v63 + 312))(v104, v63);
              if ((v104[0] & 2) != 0)
              {
                physx::Sq::computeDynamicWorldAABB(v60, v63 + 6, (uint64_t)v41[6].i64, v69, v64, v65, v66, v67, v68);
                v60 += 3;
                ++HIDWORD(v107[0]);
              }
              v59 += 8;
            }
            while (v61 != v59);
          }
        }
        else if (v42 == 6)
        {
          v43 = v105;
          v44 = v107[0];
          v45 = (*(uint64_t (**)(physx::PxRigidActor *const))(v41->i64[0] + 184))(a2[v40]);
          if (v45)
          {
            v46 = 0;
            v47 = (float32x2_t *)(v43 + 24 * v44);
            v48 = 8 * v45;
            do
            {
              v49 = &v41[2].i8[8];
              if (v41[3].i16[0] != 1)
                v49 = (__int8 *)v41[2].i64[1];
              v50 = *(_QWORD *)&v49[v46];
              (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v50 + 312))(v104, v50);
              if ((v104[0] & 2) != 0)
              {
                physx::Sq::computeStaticWorldAABB(v47, v50 + 48, v41 + 6, v51, v52, v53, v54, v55);
                v47 += 3;
                ++LODWORD(v107[0]);
              }
              v46 += 8;
            }
            while (v48 != v46);
          }
        }
        ++v40;
      }
      while (v40 != a3);
    }
    for (i = 0; i != 26; i += 13)
    {
      v71 = &v104[i];
      *v71 = 0;
      *((_DWORD *)v71 + 2) = 0;
      *((_DWORD *)v71 + 24) = 0;
      *((_OWORD *)v71 + 1) = 0uLL;
      *((_OWORD *)v71 + 2) = 0uLL;
      *((_OWORD *)v71 + 3) = 0uLL;
      *((_OWORD *)v71 + 4) = 0uLL;
      *(_OWORD *)((char *)v71 + 76) = 0uLL;
    }
    v72 = 0;
    v73 = 1;
    v74 = this;
    do
    {
      v75 = v73;
      v76 = *((_DWORD *)v107 + v72);
      v77 = (char *)v74 + 4 * v72;
      *((_DWORD *)v77 + 10) = v76;
      v78 = v77 + 40;
      if (v76)
      {
        v79 = *(&v105 + v72);
        v102 = v79;
        v103 = 0;
        HIDWORD(v101) = v76;
        LODWORD(v101) = 4;
        v80 = (const void **)&v104[13 * v72];
        physx::Sq::AABBTree::build(v80, (uint64_t)&v101);
        v81 = *((unsigned int *)v80 + 16);
        *((_DWORD *)v77 + 3) = v81;
        v82 = v77 + 12;
        if ((_DWORD)v81)
        {
          v83 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 28 * v81, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 267);
          LODWORD(v81) = *v82;
        }
        else
        {
          v83 = 0;
        }
        v84 = (char *)this + 8 * v72;
        *((_QWORD *)v84 + 3) = v83;
        memcpy(v83, (const void *)v104[13 * v72 + 2], (28 * v81));
        v85 = *v78;
        if ((_DWORD)v85)
        {
          v86 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v85, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 269);
          LODWORD(v85) = *v78;
        }
        else
        {
          v86 = 0;
        }
        *((_QWORD *)v84 + 6) = v86;
        memcpy(v86, *v80, (4 * v85));
        if (v79)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v79);
        v101 = 0;
        v102 = 0;
        if (v103)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v74 = this;
      }
      v73 = 0;
      v72 = 1;
    }
    while ((v75 & 1) != 0);
    *((_DWORD *)v74 + 16) = a3;
    if (a3)
    {
      v87 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 279);
      v88 = (8 * *((_DWORD *)v74 + 16));
    }
    else
    {
      v88 = 0;
      v87 = 0;
    }
    *((_QWORD *)v74 + 9) = v87;
    memcpy(v87, a2, v88);
    for (j = 13; j != -13; j -= 13)
      physx::Sq::AABBTree::~AABBTree((physx::Sq::AABBTree *)&v104[j]);
    v90 = 1;
    return v90 & 1;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a3;
  v97 = a3;
  while (1)
  {
    v98 = v11;
    v14 = v9 + 1;
    if (v9 + 1 < v13)
    {
      _X8 = (unint64_t)a2[v14];
      v16 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
        _CF = __CFADD__(v16++, 1);
      }
      while (!_CF);
    }
    v21 = (unsigned __int16 *)a2[v9];
    v22 = v21[4];
    v23 = *(_DWORD *)((char *)v21 + *((_QWORD *)&physx::NpActor::sLazyInitOffsets + v21[4] + 18) + 8) >> 30;
    if (v23)
      _ZF = v23 == 3;
    else
      _ZF = 1;
    if (!_ZF)
    {
      v91 = physx::shdfnd::Foundation::mInstance;
      v92 = "PrunerStructure::build: Actor already assigned to a scene!";
      v93 = 167;
      goto LABEL_81;
    }
    v25 = (*(uint64_t (**)(physx::PxRigidActor *const))(*(_QWORD *)v21 + 184))(a2[v9]);
    if (!v25)
      goto LABEL_74;
    v26 = v25;
    v27 = 0;
    v28 = 0;
    do
    {
      v104[0] = 0;
      (*(void (**)(unsigned __int16 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v21 + 192))(v21, v104, 1, v27);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v104[0] + 312))(&v101);
      if ((v101 & 2) != 0)
      {
        if (v22 == 6)
          ++v12;
        else
          ++v10;
        v28 = 1;
      }
      v27 = (v27 + 1);
    }
    while (v26 != (_DWORD)v27);
    if ((v28 & 1) == 0)
    {
LABEL_74:
      v91 = physx::shdfnd::Foundation::mInstance;
      v92 = "PrunerStructure::build: Provided actor has no scene query shape!";
      v93 = 190;
      goto LABEL_81;
    }
    if (v22 == 5)
      break;
    if (v22 != 6)
    {
      v91 = physx::shdfnd::Foundation::mInstance;
      v92 = "PrunerStructure::build: Provided actor is not a rigid actor!";
      v93 = 216;
      goto LABEL_81;
    }
    v29 = a2[v9];
    v31 = *((_QWORD *)v29 + 10);
    v30 = (_QWORD *)((char *)v29 + 80);
    if (v31)
    {
      v91 = physx::shdfnd::Foundation::mInstance;
      v92 = "PrunerStructure::build: Provided actor has already a pruning structure!";
      v93 = 199;
      goto LABEL_81;
    }
LABEL_26:
    *v30 = this;
    ++v9;
    v13 = v97;
    v11 = v14 >= v97;
    if (v14 == v97)
    {
      HIDWORD(v107[0]) = v10;
      v8 = a3;
      goto LABEL_29;
    }
  }
  v32 = a2[v9];
  v33 = *((_QWORD *)v32 + 10);
  v30 = (_QWORD *)((char *)v32 + 80);
  if (!v33)
    goto LABEL_26;
  v91 = physx::shdfnd::Foundation::mInstance;
  v92 = "PrunerStructure::build: Provided actor has already a pruning structure!";
  v93 = 209;
LABEL_81:
  physx::shdfnd::Foundation::error(v91, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", v93, v92, a6, a7, a8, v95);
  v90 = v98;
  return v90 & 1;
}

uint64_t physx::Sq::PruningStructure::resolveReferences(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v6;

  if (*(_BYTE *)(result + 80))
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 64);
    if ((_DWORD)v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(v2 + 72);
        if (*(_QWORD *)(v6 + 8 * i))
        {
          result = (**a2)(a2, 0x80000000);
          *(_QWORD *)(v6 + 8 * i) = result;
          v3 = *(unsigned int *)(v2 + 64);
        }
      }
    }
  }
  return result;
}

uint64_t physx::Sq::PruningStructure::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  if (*(_BYTE *)(result + 80))
  {
    v2 = result;
    if (*(_DWORD *)(result + 64))
    {
      v4 = 0;
      do
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(v2 + 72) + 8 * v4++));
      while (v4 < *(unsigned int *)(v2 + 64));
    }
  }
  return result;
}

uint64_t physx::Sq::PruningStructure::getRigidActors(physx::Sq::PruningStructure *this, physx::PxRigidActor **a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t result;
  physx::PxRigidActor **v11;
  uint64_t v12;
  physx::PxRigidActor *v13;
  char vars0;

  if (*((_BYTE *)this + 80))
  {
    v9 = (*((_DWORD *)this + 16) - a4) & ~((int)(*((_DWORD *)this + 16) - a4) >> 31);
    if (v9 >= a3)
      result = a3;
    else
      result = v9;
    if ((_DWORD)result)
    {
      v11 = (physx::PxRigidActor **)(*((_QWORD *)this + 9) + 8 * a4);
      v12 = result;
      do
      {
        v13 = *v11++;
        *a2++ = v13;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 392, "PrunerStructure::getRigidActors: Pruning structure is invalid!", a6, a7, a8, vars0);
    return 0;
  }
  return result;
}

uint64_t physx::Sq::PruningStructure::invalidate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;

  v2 = *(unsigned int *)(result + 64);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)(result + 72);
    v4 = *(unsigned int *)(result + 64);
    v5 = v3;
    while (*v5 != a2)
    {
      ++v5;
      if (!--v4)
        goto LABEL_10;
    }
    v6 = *(unsigned __int16 *)(a2 + 8);
    if (v6 == 5 || v6 == 6)
      *(_QWORD *)(a2 + 80) = 0;
    *(_DWORD *)(result + 64) = v2 - 1;
    *v5 = v3[v2];
  }
LABEL_10:
  *(_BYTE *)(result + 80) = 0;
  return result;
}

void physx::Sq::PrunerExt::~PrunerExt(physx::Sq::PrunerExt *this)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  *(_QWORD *)this = 0;
  v3 = *((_DWORD *)this + 9);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1) && (*((_DWORD *)this + 4) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 1) = 0;
}

physx::Sq::ExtendedBucketPruner *physx::Sq::PrunerExt::init(physx::Sq::ExtendedBucketPruner *result, int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int32x2_t v10;
  int32x2_t *v11;
  char *v12;
  char *v13;
  int32x2_t v14;
  physx::Sq::ExtendedBucketPruner *v15;
  uint64_t i;
  int32x2_t *v17;
  int32x2_t v18;
  physx::Sq::ExtendedBucketPruner *v19;
  uint64_t j;
  int32x2_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  physx::Sq::ExtendedBucketPruner *v25;
  uint64_t k;
  char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;

  v4 = result;
  *((_DWORD *)result + 10) = a2;
  *((_DWORD *)result + 11) = 0;
  if (a2 == 2)
  {
    v28 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner>::getName() [T = physx::Sq::AABBPruner]";
    else
      v29 = "<allocation names disabled>";
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v28 + 24) + 16))(v28 + 24, 544, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 85);
    *(_QWORD *)v7 = &off_24ED90678;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 1;
    *(_OWORD *)(v7 + 20) = 0u;
    *(_OWORD *)(v7 + 36) = 0u;
    *(_OWORD *)(v7 + 52) = 0u;
    *(_QWORD *)(v7 + 68) = 0;
    result = physx::Sq::ExtendedBucketPruner::ExtendedBucketPruner((physx::Sq::ExtendedBucketPruner *)(v7 + 80), (const physx::Sq::PruningPool *)(v7 + 416));
    *(_QWORD *)(v7 + 400) = 0x6400000000;
    *(_OWORD *)(v7 + 412) = 0u;
    *(_OWORD *)(v7 + 428) = 0u;
    *(_OWORD *)(v7 + 440) = 0u;
    *(_DWORD *)(v7 + 456) = -1;
    *(_OWORD *)(v7 + 504) = 0u;
    *(_OWORD *)(v7 + 520) = 0u;
    *(_OWORD *)(v7 + 464) = 0u;
    *(_OWORD *)(v7 + 480) = 0u;
    *(_DWORD *)(v7 + 495) = 0;
    goto LABEL_32;
  }
  if (a2 == 1)
  {
    v30 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v31 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner>::getName() [T = physx::Sq::AABBPruner]";
    else
      v31 = "<allocation names disabled>";
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v30 + 24) + 16))(v30 + 24, 544, v31, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 84);
    *(_QWORD *)v7 = &off_24ED90678;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 1;
    *(_OWORD *)(v7 + 20) = 0u;
    *(_OWORD *)(v7 + 36) = 0u;
    *(_OWORD *)(v7 + 52) = 0u;
    *(_QWORD *)(v7 + 68) = 0;
    result = physx::Sq::ExtendedBucketPruner::ExtendedBucketPruner((physx::Sq::ExtendedBucketPruner *)(v7 + 80), (const physx::Sq::PruningPool *)(v7 + 416));
    *(_QWORD *)(v7 + 400) = 0x6400000000;
    *(_OWORD *)(v7 + 412) = 0u;
    *(_OWORD *)(v7 + 428) = 0u;
    *(_OWORD *)(v7 + 440) = 0u;
    *(_DWORD *)(v7 + 456) = -1;
    *(_OWORD *)(v7 + 464) = 0u;
    *(_OWORD *)(v7 + 480) = 0u;
    *(_WORD *)(v7 + 496) = 1;
    *(_BYTE *)(v7 + 498) = 0;
    *(_OWORD *)(v7 + 504) = 0u;
    *(_OWORD *)(v7 + 520) = 0u;
LABEL_32:
    *(_QWORD *)(v7 + 536) = a3;
    goto LABEL_34;
  }
  if (a2)
  {
    v7 = 0;
  }
  else
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::BucketPruner>::getName() [T = physx::Sq::BucketPruner]";
    else
      v6 = "<allocation names disabled>";
    result = (physx::Sq::ExtendedBucketPruner *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 7888, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 83);
    v7 = (uint64_t)result;
    v8 = 0;
    v9 = (char *)result + 7824;
    *(_QWORD *)result = &off_24ED909B8;
    *((_QWORD *)result + 97) = 0;
    *((_DWORD *)result + 196) = 0;
    *((_QWORD *)result + 99) = 0;
    *((_QWORD *)result + 101) = 0;
    *((_QWORD *)result + 100) = 0;
    *((_DWORD *)result + 204) = 0;
    *((_QWORD *)result + 103) = 0;
    *((_DWORD *)result + 208) = 0;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_DWORD *)result + 16) = 0;
    v10 = vdup_n_s32(0xFE7FFFFF);
    do
    {
      v11 = (int32x2_t *)((char *)result + v8);
      v11[116] = 0;
      v11[117].i32[0] = 0;
      v11[118] = v10;
      v11[119].i32[0] = -25165825;
      v8 += 32;
    }
    while (v8 != 160);
    v12 = (char *)result + 1104;
    v13 = (char *)result + 2224;
    v14 = vdup_n_s32(0xFE7FFFFF);
    v15 = result;
    do
    {
      for (i = 0; i != 160; i += 32)
      {
        v17 = (int32x2_t *)((char *)v15 + i);
        v17[144] = 0;
        v17[145].i32[0] = 0;
        v17[146] = v14;
        v17[147].i32[0] = -25165825;
      }
      v12 += 224;
      v15 = (physx::Sq::ExtendedBucketPruner *)((char *)v15 + 224);
    }
    while (v12 != v13);
    v18 = vdup_n_s32(0xFE7FFFFF);
    v19 = result;
    do
    {
      for (j = 0; j != 160; j += 32)
      {
        v21 = (int32x2_t *)((char *)v19 + j);
        v21[284] = 0;
        v21[285].i32[0] = 0;
        v21[286] = v18;
        v21[287].i32[0] = -25165825;
      }
      v13 += 224;
      v19 = (physx::Sq::ExtendedBucketPruner *)((char *)v19 + 224);
    }
    while (v13 != v9);
    v22 = 0;
    *(_WORD *)v9 = 1;
    *((_QWORD *)result + 106) = 0;
    *((_DWORD *)result + 214) = 0;
    *((int32x2_t *)result + 108) = vdup_n_s32(0xFE7FFFFF);
    *((_DWORD *)result + 218) = -25165825;
    *((_OWORD *)result + 55) = 0u;
    *((_OWORD *)result + 56) = 0u;
    *((_QWORD *)result + 114) = 0;
    do
    {
      v23 = (char *)result + v22;
      *((_DWORD *)v23 + 280) = 0;
      *((_OWORD *)v23 + 69) = 0uLL;
      *((_DWORD *)v23 + 285) = 0;
      *(_OWORD *)((char *)result + v22 + 1124) = 0uLL;
      v22 += 224;
    }
    while (v22 != 1120);
    v24 = 0;
    v25 = result;
    do
    {
      for (k = 0; k != 1120; k += 224)
      {
        v27 = (char *)v25 + k;
        *((_DWORD *)v27 + 560) = 0;
        *((_OWORD *)v27 + 139) = 0uLL;
        *((_DWORD *)v27 + 565) = 0;
        *(_OWORD *)((char *)v25 + k + 2244) = 0uLL;
      }
      ++v24;
      v25 = (physx::Sq::ExtendedBucketPruner *)((char *)v25 + 1120);
    }
    while (v24 != 5);
    *((_QWORD *)result + 984) = 0;
    *((_OWORD *)result + 491) = 0u;
    *((_OWORD *)result + 490) = 0u;
    *((_DWORD *)result + 1970) = -1;
  }
LABEL_34:
  *v4 = v7;
  return result;
}

uint64_t physx::Sq::PrunerExt::preallocate(physx::Sq::PrunerExt *this, uint64_t a2)
{
  uint64_t result;

  if (a2 > 32 * *((_DWORD *)this + 4))
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 8, a2);
  result = *(_QWORD *)this;
  if (*(_QWORD *)this)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, a2);
  return result;
}

uint64_t physx::Sq::PrunerExt::flushMemory(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (!*(_DWORD *)(this + 32))
  {
    v1 = this;
    v2 = this + 24;
    v3 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(this + 24, 0, &v3);
    return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v2, *(_DWORD *)(v1 + 32));
  }
  return this;
}

uint64_t physx::Sq::PrunerExt::flushShapes(uint64_t this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned int *)(this + 32);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)this;
    v4 = 0;
    v5 = *(_QWORD *)(this + 24);
    v6 = physx::Sq::gComputeBoundsTable[a2];
    do
    {
      v7 = *v3;
      *(_DWORD *)(v3[1] + (((unint64_t)*(unsigned int *)(v5 + v4) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(v5 + v4));
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
      ((void (*)(_QWORD, _QWORD, _QWORD))v6)(0, *v8, v8[1]);
      v4 += 4;
    }
    while (4 * v2 != v4);
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 16))(*v3, v5, v2);
    *((_DWORD *)v3 + 11) += v2;
    *((_DWORD *)v3 + 8) = 0;
  }
  return this;
}

uint64_t physx::Sq::PrunerExt::addToDirtyList(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v7 = a2;
  v2 = *(_QWORD *)(this + 8);
  v3 = a2 >> 5;
  v4 = *(_DWORD *)(v2 + 4 * v3);
  if ((v4 & (1 << a2)) == 0)
  {
    v5 = this;
    *(_DWORD *)(v2 + 4 * v3) = v4 | (1 << a2);
    v6 = *(unsigned int *)(this + 32);
    if ((*(_DWORD *)(this + 36) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 24, &v7);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(this + 24) + 4 * v6) = a2;
      ++*(_DWORD *)(this + 32);
    }
    ++*(_DWORD *)(v5 + 44);
  }
  return this;
}

uint64_t physx::Sq::PrunerExt::removeFromDirtyList(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(this + 8);
  v3 = a2 >> 5;
  v4 = *(_DWORD *)(v2 + 4 * v3);
  if ((v4 & (1 << a2)) != 0)
  {
    *(_DWORD *)(v2 + 4 * v3) = v4 & ~(1 << a2);
    v5 = *(unsigned int *)(this + 32);
    if ((_DWORD)v5)
    {
      v6 = 0;
      while (*(_DWORD *)(*(_QWORD *)(this + 24) + 4 * v6) != a2)
      {
        if (v5 == ++v6)
          return this;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v6 != (_DWORD)v5)
    {
      v7 = *(_QWORD *)(this + 24);
      v8 = v5 - 1;
      *(_DWORD *)(this + 32) = v8;
      *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v7 + 4 * v8);
    }
  }
  return this;
}

void physx::Sq::PrunerExt::growDirtyList(physx::Sq::PrunerExt *this, unsigned int a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = (_QWORD *)((char *)this + 8);
  v4 = *((_DWORD *)this + 4);
  if (a2 >= 32 * v4)
  {
    v5 = v4 << 6;
    if (v5 <= 0x400)
      v6 = 1024;
    else
      v6 = v5;
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 8, v6);
  }
  *(_DWORD *)(*v3 + 4 * (a2 >> 5)) &= ~(1 << a2);
}

void physx::Sq::CompoundPrunerExt::~CompoundPrunerExt(physx::Sq::CompoundPrunerExt *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  *(_QWORD *)this = 0;
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

_QWORD *physx::Sq::CompoundPrunerExt::flushShapes(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int32x4_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  float32x2_t *v25;

  v1 = *((unsigned int *)this + 15);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = this + 1;
    v4 = (unsigned int *)(this[2] + 4);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v25 = 0;
      v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float32x2_t **))(*(_QWORD *)*v2 + 80))(*v2, v5, v6, &v25);
      v20 = *(_QWORD *)v7;
      v21 = *(_DWORD *)(*(_QWORD *)v7 + 8);
      if ((v21 & 4) != 0)
        v22 = *(_QWORD *)(v20 + 16);
      else
        v22 = v20 + 64;
      if ((v21 & 1) != 0)
        v23 = *(_QWORD *)(v20 + 16) + 64;
      else
        v23 = v20 + 104;
      v4 += 2;
      v12.i32[0] = 0;
      v13.i32[0] = 1065437102;
      physx::Gu::computeBounds(v25, v23, v22, 0, v12, v13, v14, v15, v16, v17, v18, v19, v8, v9, v10, v11, v24);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v2 + 24))(*v2, v6, v5);
      --v1;
    }
    while (v1);
    return physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(v3);
  }
  return this;
}

BOOL physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::insert(int32x2_t *a1, int *a2, int8x8_t a3)
{
  _DWORD *v4;
  int v5;
  unsigned __int8 v7;

  v7 = 0;
  v4 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1, a2, &v7, a3);
  v5 = v7;
  if (!v7)
    *(_QWORD *)v4 = *(_QWORD *)a2;
  return v5 == 0;
}

uint64_t physx::Sq::SceneQueryManager::SceneQueryManager(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  physx::Sq::BVHCompoundPruner *v25;
  int8x8_t v26;

  for (i = 0; i != 96; i += 48)
  {
    v13 = a1 + i;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 40) = 0xFFFFFFFF00000003;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 144) = 1061158912;
  *(_QWORD *)(a1 + 148) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 156) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 104, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_QWORD *)(a1 + 168) = a2;
  v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v15 = "<allocation names disabled>";
  v16 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, 72, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 176) = v16;
  physx::shdfnd::MutexImpl::MutexImpl(v16);
  *(_QWORD *)(a1 + 184) = &off_24ED90B40;
  physx::Sq::PrunerExt::init((physx::Sq::ExtendedBucketPruner *)a1, a3, *(_QWORD *)(a2 + 40));
  physx::Sq::PrunerExt::init((physx::Sq::ExtendedBucketPruner *)(a1 + 48), a4, *(_QWORD *)(a2 + 40));
  v17 = 0;
  *(_DWORD *)(a1 + 160) = a5;
  v18 = 1;
  do
  {
    v19 = v18;
    v20 = *(_QWORD *)(a1 + 48 * v17);
    if (v20 && *(_DWORD *)(a1 + 48 * v17 + 40) == 1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 136))(v20, a5);
    v18 = 0;
    v17 = 1;
  }
  while ((v19 & 1) != 0);
  v21 = *(unsigned int *)(a6 + 8);
  v22 = *(unsigned int *)(a6 + 12);
  physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)a1, v21);
  physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)(a1 + 48), v22);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 200) = a1 + 92;
  v23 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v24 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::BVHCompoundPruner>::getName() [T = physx::Sq:"
          ":BVHCompoundPruner]";
  else
    v24 = "<allocation names disabled>";
  v25 = (physx::Sq::BVHCompoundPruner *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v23 + 24) + 16))(v23 + 24, 1320, v24, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 268);
  *(_QWORD *)(a1 + 96) = physx::Sq::BVHCompoundPruner::BVHCompoundPruner(v25);
  if (*(_DWORD *)(a1 + 156) <= 0x1Fu && *(_DWORD *)(a1 + 140) <= 0x1Fu)
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 104, 0x20u, v26);
  *(_BYTE *)(a1 + 208) = 0;
  return a1;
}

void physx::Sq::SceneQueryManager::~SceneQueryManager(pthread_mutex_t **this)
{
  uint64_t i;

  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 22);
  physx::Sq::CompoundPrunerExt::~CompoundPrunerExt((physx::Sq::CompoundPrunerExt *)(this + 12));
  for (i = 6; i != -6; i -= 6)
    physx::Sq::PrunerExt::~PrunerExt((physx::Sq::PrunerExt *)&this[i]);
}

void *physx::Sq::SceneQueryManager::flushMemory(physx::Sq::SceneQueryManager *this)
{
  void *result;

  physx::Sq::PrunerExt::flushMemory((uint64_t)this);
  result = (void *)physx::Sq::PrunerExt::flushMemory((uint64_t)this + 48);
  if (!*((_DWORD *)this + 39))
    return physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 104);
  return result;
}

uint64_t physx::Sq::SceneQueryManager::markForUpdate(int32x2_t *this, int a2, unint64_t a3, int8x8_t a4)
{
  int v5[2];

  this[26].i8[0] = 1;
  if (a2 == -1)
    return physx::Sq::PrunerExt::addToDirtyList((uint64_t)&this[6 * (a3 & 1)], a3 >> 1);
  ++this[6 * (a3 & 1) + 5].i32[1];
  v5[0] = a2;
  v5[1] = a3 >> 1;
  return physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::insert(this + 13, v5, a4);
}

uint64_t physx::Sq::SceneQueryManager::addPrunerShape(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  physx::Sq::PrunerExt *v19;
  int v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD v34[2];

  *(_BYTE *)(a1 + 208) = 1;
  v34[0] = a2;
  v34[1] = a3;
  v33 = 0;
  v19 = (physx::Sq::PrunerExt *)(a1 + 48 * a4);
  ++*((_DWORD *)v19 + 11);
  if ((_DWORD)a5 == -1)
  {
    if (a6)
    {
      v26 = *(float32x4_t *)(a6 + 12);
      v27 = vmulq_f32(vsubq_f32(v26, *(float32x4_t *)a6), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
      v28 = vsubq_f32(*(float32x4_t *)a6, v27);
      v29 = (int8x16_t)vaddq_f32(v26, v27);
      v28.i32[3] = v29.i32[0];
      v31 = v28;
      v32 = vextq_s8(v29, v29, 4uLL).u64[0];
    }
    else
    {
      ((void (*)(float32x4_t *, uint64_t, uint64_t))physx::Sq::gComputeBoundsTable[a4])(&v31, a2, a3);
    }
    (***(void (****)(_QWORD, unsigned int *, float32x4_t *, _QWORD *, uint64_t, uint64_t))v19)(*(_QWORD *)v19, &v33, &v31, v34, 1, a7);
    physx::Sq::PrunerExt::growDirtyList(v19, v33);
  }
  else
  {
    v22 = *(_DWORD *)(a2 + 8);
    if ((v22 & 4) != 0)
      v23 = *(_QWORD *)(a2 + 16);
    else
      v23 = a2 + 64;
    if ((v22 & 1) != 0)
      v24 = *(_QWORD *)(a2 + 16) + 64;
    else
      v24 = a2 + 104;
    a10.i32[0] = 1065437102;
    a9.i32[0] = 0;
    physx::Gu::computeBounds((float32x2_t *)&v31, v24, v23, 0, a9, a10, a11, a12, a13, a14, a15, a16, a5, a6, a7, a8, v31.i8[0]);
    (*(void (**)(_QWORD, uint64_t, unsigned int *, float32x4_t *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96)
                                                                                             + 40))(*(_QWORD *)(a1 + 96), a5, &v33, &v31, a2, a3);
  }
  return a4 | (2 * v33);
}

uint64_t physx::Sq::SceneQueryManager::removePrunerShape(physx::Sq::SceneQueryManager *this, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v7;
  int v8;
  int v9[2];

  *((_BYTE *)this + 208) = 1;
  v4 = a3 >> 1;
  v8 = a3 >> 1;
  ++*((_DWORD *)this + 12 * (a3 & 1) + 11);
  if ((_DWORD)a2 == -1)
  {
    v7 = (_QWORD *)((char *)this + 48 * (a3 & 1));
    physx::Sq::PrunerExt::removeFromDirtyList((uint64_t)v7, a3 >> 1);
    return (*(uint64_t (**)(_QWORD, int *, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, &v8, 1);
  }
  else
  {
    v9[0] = a2;
    v9[1] = a3 >> 1;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 104, v9);
    return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), a2, v4);
  }
}

physx::Sq::SceneQueryManager *physx::Sq::SceneQueryManager::afterSync(physx::Sq::SceneQueryManager *this, int a2)
{
  physx::Sq::SceneQueryManager *v2;
  BOOL v3;
  uint64_t v5;
  char v6;
  char v7;
  physx::Sq::SceneQueryManager **v8;

  v2 = this;
  if (a2 == 2)
  {
    v3 = 1;
  }
  else
  {
    physx::Sq::SceneQueryManager::flushShapes(this);
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v6;
      v8 = (physx::Sq::SceneQueryManager **)((char *)v2 + 48 * v5);
      this = *v8;
      if (*v8 && *((_DWORD *)v2 + 12 * v5 + 10) == 1)
        this = (physx::Sq::SceneQueryManager *)(*(uint64_t (**)(physx::Sq::SceneQueryManager *, uint64_t))(*(_QWORD *)this + 144))(this, 1);
      if (!a2)
        this = (physx::Sq::SceneQueryManager *)(*(uint64_t (**)(physx::Sq::SceneQueryManager *))(*(_QWORD *)*v8 + 32))(*v8);
      v6 = 0;
      v5 = 1;
    }
    while ((v7 & 1) != 0);
    v3 = a2 != 0;
  }
  *((_BYTE *)v2 + 208) = v3;
  return this;
}

_QWORD *physx::Sq::SceneQueryManager::flushShapes(physx::Sq::SceneQueryManager *this)
{
  physx::Sq::PrunerExt::flushShapes((uint64_t)this, 0);
  physx::Sq::PrunerExt::flushShapes((uint64_t)this + 48, 1);
  return physx::Sq::CompoundPrunerExt::flushShapes((_QWORD *)this + 12);
}

uint64_t physx::Sq::SceneQueryManager::flushUpdates(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  if (*(_BYTE *)(this + 208))
  {
    v1 = this;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 176));
    if (*(_BYTE *)(v1 + 208))
    {
      physx::Sq::SceneQueryManager::flushShapes((physx::Sq::SceneQueryManager *)v1);
      v2 = 0;
      v3 = 1;
      do
      {
        v4 = v3;
        this = *(_QWORD *)(v1 + 48 * v2);
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
        v3 = 0;
        v2 = 1;
      }
      while ((v4 & 1) != 0);
      __dmb(0xBu);
      *(_BYTE *)(v1 + 208) = 0;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 176));
  }
  return this;
}

uint64_t physx::Sq::SceneQueryManager::forceDynamicTreeRebuild(uint64_t this, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  _BYTE v8[2];

  v3 = this;
  v8[0] = a2;
  v8[1] = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 176));
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v8[v4])
    {
      v7 = (_QWORD *)(v3 + 48 * v4);
      this = *v7;
      if (*v7)
      {
        if (*(_DWORD *)(v3 + 48 * v4 + 40) == 1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)this + 128))(this);
          this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7);
        }
      }
    }
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 176));
  return this;
}

uint64_t physx::Sq::DynamicBoundsSync::sync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((_DWORD)a5)
  {
    v10 = result;
    v11 = *(_DWORD *)(a6 + 8) & 0x7FFFFFFF;
    if (!(_DWORD)v11)
      goto LABEL_12;
    v12 = 0;
    v13 = *(unsigned int **)a6;
    do
    {
      v14 = *v13++;
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v15.i16[0] = vaddlv_u8(v15);
      v12 += v15.i32[0];
      --v11;
    }
    while (v11);
    if (v12)
    {
      v16 = 0;
      v17 = 0;
      v18 = a5;
      a5 = 0;
      do
      {
        if (((*(_DWORD *)(*(_QWORD *)a6 + (((unint64_t)*(unsigned int *)(a3 + 4 * v16) >> 3) & 0x1FFFFFFC)) >> *(_DWORD *)(a3 + 4 * v16)) & 1) != 0)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 + 8) + 24))(*(_QWORD *)(v10 + 8), a2 + 4 * v17, a3 + 4 * v17, a4, a5);
          a5 = 0;
          v17 = ++v16;
        }
        else
        {
          a5 = (a5 + 1);
          ++v16;
        }
      }
      while (v16 != v18);
    }
    else
    {
LABEL_12:
      v17 = 0;
    }
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 + 8) + 24))(*(_QWORD *)(v10 + 8), a2 + 4 * v17, a3 + 4 * v17, a4, a5);
    ++**(_DWORD **)(v10 + 16);
  }
  return result;
}

_QWORD *physx::Sq::SceneQueryManager::addPruningStructure(_QWORD *this, const physx::Sq::PruningStructure *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v5 = this;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
  {
    v7 = *((_DWORD *)a2 + 10);
    v8 = *((_QWORD *)a2 + 6);
    v12 = *((_DWORD *)a2 + 3);
    v13 = v6;
    v14 = v7;
    v15 = v8;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD, int *, uint64_t, uint64_t))(*(_QWORD *)*this + 40))(*this, &v12, a3, a4);
  }
  v9 = *((_QWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((_DWORD *)a2 + 11);
    v11 = *((_QWORD *)a2 + 7);
    v12 = *((_DWORD *)a2 + 4);
    v13 = v9;
    v14 = v10;
    v15 = v11;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v5[6] + 40))(v5[6], &v12);
  }
  return this;
}

uint64_t physx::Sq::SceneQueryManager::addCompoundShape(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t i;
  _BYTE v26[4];
  unsigned int v27;
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  uint64_t v31;

  v28 = a4;
  v27 = a3;
  v31 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v13 = v12;
  v14 = (4 * v12);
  if (v14 < 0x401)
  {
    MEMORY[0x24BDAC7A8](v12);
    v16 = &v26[-((v14 + 15) & 0x1FFFFFFF0)];
    bzero(v16, v14);
  }
  else
  {
    v15 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v30, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 561);
    v16 = v15;
  }
  v17 = 16 * v13;
  if (v17 < 0x401)
  {
    MEMORY[0x24BDAC7A8](v15);
    v18 = &v26[-((v17 + 15) & 0x1FFFFFFF0)];
    bzero(v18, 16 * v13);
    if (!v13)
      goto LABEL_10;
LABEL_8:
    v19 = v13;
    v20 = v18 + 1;
    do
    {
      v21 = *a6++;
      *(v20 - 1) = v21;
      *v20 = a7;
      v20 += 2;
      --v19;
    }
    while (v19);
    goto LABEL_10;
  }
  v18 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v29, 16 * v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 562);
  if (v13)
    goto LABEL_8;
LABEL_10:
  if (*(_BYTE *)(*((_QWORD *)&physx::Scb::Actor::sLazyInitOffsets + (*(_BYTE *)(a7 + 11) & 0xF) + 3) + a7 + 13) == 1)
    v22 = 2;
  else
    v22 = 1;
  result = (***(uint64_t (****)(_QWORD, _BYTE *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))(a1 + 96))(*(_QWORD *)(a1 + 96), v16, a2, v27, v28, v22, v18);
  v24 = a1 + 48 * ((v22 & 1) == 0);
  ++*(_DWORD *)(v24 + 44);
  if (v13)
  {
    for (i = 0; i != v13; ++i)
      *(_QWORD *)(a5 + 8 * i) = ((v22 & 1) == 0) | (2 * *(_DWORD *)&v16[4 * i]);
    if (v17 >= 0x401)
      result = physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v30, (char *)v18);
    if (v14 >= 0x401)
      return physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v30, v16);
  }
  return result;
}

uint64_t physx::Sq::BucketPruner::getPayload(physx::Sq::BucketPruner *this, unsigned int a2)
{
  return *((_QWORD *)this + 982) + 16 * *(unsigned int *)(*((_QWORD *)this + 983) + 4 * a2);
}

uint64_t physx::Sq::BucketPruner::getPayload(_QWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a1[983] + 4 * a2);
  *a3 = a1[981] + 24 * v3;
  return a1[982] + 16 * v3;
}

uint64_t physx::Sq::BucketPruner::preallocate(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 7844) < a2)
    return physx::Sq::PruningPool::resize((physx::Sq::PruningPool *)(this + 7840), a2);
  return this;
}

const char *physx::PxPruningStructure::getConcreteTypeName(physx::PxPruningStructure *this)
{
  return "PxPruningStructure";
}

uint64_t physx::PxBase::isReleasable(physx::PxBase *this)
{
  return (*((unsigned __int16 *)this + 5) >> 1) & 1;
}

BOOL physx::PxPruningStructure::isKindOf(physx::PxPruningStructure *this, const char *a2)
{
  return !strcmp("PxPruningStructure", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Sq::PruningStructure::getNbRigidActors(physx::Sq::PruningStructure *this)
{
  return *((unsigned int *)this + 16);
}

void physx::Sq::DynamicBoundsSync::~DynamicBoundsSync(physx::Sq::DynamicBoundsSync *this)
{
  JUMPOUT(0x2276933B8);
}

float OBBAABBTest_SIMD::OBBAABBTest_SIMD(float32x4_t *a1, __int32 *a2, uint64_t a3, uint64_t a4, double a5, double a6, float32x4_t a7, float32x4_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float result;

  v8.i64[0] = *(_QWORD *)a3;
  v8.i64[1] = *(unsigned int *)(a3 + 8);
  a1[1] = v8;
  v8.i64[0] = *(_QWORD *)a4;
  v8.i64[1] = *(unsigned int *)(a4 + 8);
  *a1 = v8;
  v9.i32[0] = *a2;
  v9.i32[1] = a2[3];
  v9.i64[1] = a2[6];
  a7.i32[0] = a2[1];
  a7.i32[1] = a2[4];
  a7.i32[2] = a2[7];
  a8.i32[0] = a2[2];
  a8.i32[1] = a2[5];
  a8.i32[2] = a2[8];
  a1[2] = v9;
  a1[3] = a7;
  v10 = vaddq_f32(vabsq_f32(v9), (float32x4_t)xmmword_2261A9050);
  v11 = vaddq_f32(vabsq_f32(a7), (float32x4_t)xmmword_2261A9050);
  v12 = vaddq_f32(vabsq_f32(a8), (float32x4_t)xmmword_2261A9050);
  a1[4] = a8;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
  v13 = vmulq_f32(v8, v10);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  v14 = vmulq_f32(v8, v11);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  v15 = vmulq_f32(v8, v12);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  LODWORD(result) = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  *(int8x8_t *)v13.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), 4uLL);
  v13.i64[1] = LODWORD(result);
  a1[8] = v13;
  return result;
}

float clipRay(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;

  v5 = a5[1];
  v6 = a4[1];
  v7 = a5[2];
  v8 = a4[2];
  v9 = (float)(v7 + v8) * 0.5;
  v10 = (float)(v7 - v8) * 0.5;
  v11 = a2[1];
  v12 = a2[2];
  v13 = (float)((float)((float)((float)(v5 + v6) * 0.5) * v11) + (float)((float)((float)(*a5 + *a4) * 0.5) * *a2))
      + (float)(v9 * v12);
  v14 = sqrtf((float)((float)((float)((float)(v5 - v6) * 0.5) * (float)((float)(v5 - v6) * 0.5))+ (float)((float)((float)(*a5 - *a4) * 0.5) * (float)((float)(*a5 - *a4) * 0.5)))+ (float)(v10 * v10));
  v15 = v13 - v14;
  v16 = v14 + v13;
  v17 = (float)((float)(v11 * a1[1]) + (float)(*a1 * *a2)) + (float)(a1[2] * v12);
  v18 = v14 + v14;
  v19 = vabds_f32(v15, v17);
  v20 = vabds_f32(v16, v17);
  if (v19 >= v20)
    v19 = v20;
  result = v19 + (float)(v18 * 2.0);
  *a3 = result;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 32 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 32 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a1 + 8) + v15;
      v18 = ~(*(_QWORD *)v17 << 32) + *(_QWORD *)v17 + (*(_QWORD *)(v17 + 8) << 32);
      v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
      v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
      LODWORD(v20) = (v3 - 1) & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
      *(_DWORD *)&v12[4 * v16] = *(_DWORD *)&v11[4 * v20];
      *(_DWORD *)&v11[4 * v20] = v16;
      v21 = &v13[v15];
      *(_OWORD *)v21 = *(_OWORD *)v17;
      v22 = *(_QWORD *)(v17 + 16);
      *((_DWORD *)v21 + 6) = *(_DWORD *)(v17 + 24);
      *((_QWORD *)v21 + 2) = v22;
      ++v16;
      v15 += 32;
    }
    while (v16 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!*(_DWORD *)(a1 + 52))
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = ~(*a2 << 32) + *a2 + (v4 << 32);
  v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = (_DWORD *)(*(_QWORD *)(a1 + 24)
                + 4 * ((*(_DWORD *)(a1 + 36) - 1) & ((v7 >> 31) ^ v7)));
  v9 = *v8;
  if ((_DWORD)v9 == -1)
    return 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)(v10 + 32 * v9);
  if (*v11 != v3 || v11[1] != v4)
  {
    v13 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v14 = v9;
      v9 = *(unsigned int *)(v13 + 4 * v9);
      if ((_DWORD)v9 == -1)
        return 0;
      v11 = (_QWORD *)(v10 + 32 * v9);
      if (*v11 == v3 && v11[1] == v4)
      {
        v8 = (_DWORD *)(v13 + 4 * v14);
        break;
      }
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)v11;
  v16 = v10 + 32 * v9;
  v17 = *(_QWORD *)(v16 + 16);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v16 + 24);
  *(_QWORD *)(a3 + 16) = v17;
  v18 = *v8;
  *v8 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v18);
  v19 = (*(_DWORD *)(a1 + 52) - 1);
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v19;
  if ((_DWORD)v18 != (_DWORD)v19)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = v20 + 32 * v18;
    v22 = v20 + 32 * v19;
    *(_OWORD *)v21 = *(_OWORD *)v22;
    LODWORD(v20) = *(_DWORD *)(v22 + 24);
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
    *(_DWORD *)(v21 + 24) = v20;
    v24 = *(_QWORD *)(a1 + 8);
    v23 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v23 + 4 * v18) = *(_DWORD *)(v23 + 4 * *(unsigned int *)(a1 + 52));
    v25 = ~(*(_QWORD *)(v24 + 32 * v18) << 32)
        + *(_QWORD *)(v24 + 32 * v18)
        + (*(_QWORD *)(v24 + 32 * v18 + 8) << 32);
    v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
    v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
    v28 = (_DWORD *)(*(_QWORD *)(a1 + 24)
                   + 4
                   * ((*(_DWORD *)(a1 + 36) - 1) & (((v27 + ~(v27 << 27)) >> 31) ^ ((_DWORD)v27
                                                                                                + ~((_DWORD)v27 << 27)))));
    v29 = *(unsigned int *)(a1 + 52);
    v30 = *v28;
    if (v30 != v29)
    {
      do
      {
        v31 = v30;
        v30 = *(unsigned int *)(v23 + 4 * v30);
      }
      while (v30 != v29);
      v28 = (_DWORD *)(v23 + 4 * v31);
    }
    *v28 = v18;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t MainTreeRaycastPrunerCallback<false>::invoke(uint64_t a1, float *a2, _QWORD **a3)
{
  char v4;

  return physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *a3, *(float32x2_t **)(a1 + 8), *(float32x2_t **)(a1 + 16), a2, *(_QWORD *)(a1 + 24), *(unsigned int (****)(_QWORD, float *, uint64_t))(a1 + 32));
}

void MainTreeRaycastPrunerCallback<false>::~MainTreeRaycastPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::OBBAABBTests<true>>::invoke(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  char v4;

  return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *a3, *(float32x4_t **)(a1 + 8), *(unsigned int (****)(_QWORD, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::OBBAABBTests<true>>::~MainTreeOverlapPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::AABBAABBTest>::invoke(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  char v4;

  return physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *a3, *(float32x4_t **)(a1 + 8), *(uint64_t (****)(_QWORD, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::AABBAABBTest>::~MainTreeOverlapPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::CapsuleAABBTest>::invoke(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  char v4;

  return physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *a3, *(float32x4_t **)(a1 + 8), *(uint64_t (****)(_QWORD, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::CapsuleAABBTest>::~MainTreeOverlapPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::SphereAABBTest>::invoke(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  char v4;

  return physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *a3, *(_QWORD *)(a1 + 8), *(uint64_t (****)(_QWORD, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::SphereAABBTest>::~MainTreeOverlapPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t MainTreeRaycastPrunerCallback<true>::invoke(uint64_t a1, float *a2, _QWORD **a3)
{
  char v4;

  return physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *a3, *(float32x2_t **)(a1 + 8), *(float32x2_t **)(a1 + 16), a2, *(float32x2_t **)(a1 + 24), *(unsigned int (****)(_QWORD, float *, uint64_t))(a1 + 32));
}

void MainTreeRaycastPrunerCallback<true>::~MainTreeRaycastPrunerCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  int v18;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v18 = *(_DWORD *)(a1 + 32);
  v8 = (float)(*(float *)(a1 + 40) * (float)v3);
  v9 = ((-4 * (v3 + v8)) & 0xC) + 4 * (v3 + v8);
  if ((_DWORD)v9 + 8 * v8)
    v10 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v9 + 8 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v10 = 0;
  v11 = &v10[4 * v3];
  v12 = &v10[v9];
  result = (uint64_t)memset(v10, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v14 = 0;
    v15 = v3 - 1;
    v16 = *(int **)(a1 + 8);
    do
    {
      result = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*v16, v16[1]);
      *(_DWORD *)&v11[4 * v14] = *(_DWORD *)&v10[4 * (result & v15)];
      *(_DWORD *)&v10[4 * (result & v15)] = v14;
      v17 = *(_QWORD *)v16;
      v16 += 2;
      *(_QWORD *)&v12[8 * v14++] = v17;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v18;
  return result;
}

uint64_t physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(int a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v3 = (v2 ^ (v2 >> 6)) + ~((v2 ^ (v2 >> 6)) << 11);
  v4 = 9 * ((~(a1 << 15) + a1) ^ ((~(a1 << 15) + a1) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  return (1000007 * (v5 ^ HIWORD(v5) ^ 0xFC955B95)) ^ HIWORD(v3) ^ v3;
}

_DWORD *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, int *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *result;
  unsigned int v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;

  v7 = a1[4].u32[1];
  if (!v7)
  {
    v10 = 0;
    goto LABEL_10;
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*a2, v9) & (v7 - 1);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_10:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v7)
        v14 = 2 * v7;
      else
        v14 = 16;
      if (v7 < v14)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v14, a4);
        v7 = a1[4].u32[1];
      }
      v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*a2, a2[1]) & (v7 - 1);
    }
    v15 = a1[5].u32[1];
    a1[5].i32[1] = v15 + 1;
    v16 = a1[3];
    v17 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v15) = *(_DWORD *)(*(_QWORD *)&v16 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v16 + 4 * v10) = v15;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return (_DWORD *)(*(_QWORD *)&v17 + 8 * v15);
  }
  while (1)
  {
    result = (_DWORD *)(*(_QWORD *)&a1[1] + 8 * v11);
    if (*result == v8 && result[1] == v9)
      break;
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_10;
  }
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!*(_DWORD *)(a1 + 52))
    return 0;
  v3 = *(_DWORD *)(a1 + 36);
  v4 = *a2;
  v5 = a2[1];
  v6 = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*a2, v5);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_DWORD *)(v7 + 4 * (v6 & (v3 - 1)));
  v9 = *v8;
  if ((_DWORD)v9 == -1)
    return 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v10 + 8 * v9;
  v15 = *(_DWORD *)(v12 + 4);
  v13 = (_DWORD *)(v12 + 4);
  v14 = v15;
  if (*(_DWORD *)(v10 + 8 * v9) != v4 || v14 != v5)
  {
    while (1)
    {
      v17 = v9;
      v9 = *(unsigned int *)(v11 + 4 * v9);
      if ((_DWORD)v9 == -1)
        return 0;
      v18 = v10 + 8 * v9;
      v20 = *(_DWORD *)(v18 + 4);
      v13 = (_DWORD *)(v18 + 4);
      v19 = v20;
      if (*(_DWORD *)(v10 + 8 * v9) == v4 && v19 == v5)
      {
        v8 = (_DWORD *)(v11 + 4 * v17);
        break;
      }
    }
  }
  *v8 = *(_DWORD *)(v11 + 4 * v9);
  v22 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v22;
  if ((_DWORD)v9 != v22)
  {
    v23 = (int *)(v10 + 8 * v9);
    v24 = (int *)(v10 + 8 * v22);
    v25 = *v24;
    LODWORD(v24) = v24[1];
    *v23 = v25;
    *v13 = (_DWORD)v24;
    *(_DWORD *)(v11 + 4 * v9) = *(_DWORD *)(v11 + 4 * v22);
    v26 = *(_DWORD *)(a1 + 36);
    v27 = (_DWORD *)(v7
                   + 4
                   * (physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*v23, v23[1]) & (v26 - 1)));
    v28 = *(unsigned int *)(a1 + 52);
    v29 = *v27;
    if (v29 != v28)
    {
      do
      {
        v30 = v29;
        v29 = *(unsigned int *)(v11 + 4 * v29);
      }
      while (v29 != v28);
      v27 = (_DWORD *)(v11 + 4 * v30);
    }
    *v27 = v9;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

float physx::PxTransformFromPlaneEquation@<S0>(float *a1@<X0>, uint64_t a2@<X8>, int32x2_t a3@<D2>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  int32x2_t v14;
  float v15;
  float result;
  uint64_t v17;
  int v18;
  float v19[2];
  int32x2_t v20;
  float v21[4];

  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = 1.0 / sqrtf((float)((float)(v4 * v4) + (float)(*a1 * *a1)) + (float)(v5 * v5));
  v9 = v4 * v7;
  v21[0] = *a1 * v7;
  v8 = v21[0];
  v21[1] = v4 * v7;
  v10 = v5 * v7;
  v11 = v6 * v7;
  v21[2] = v5 * v7;
  v21[3] = v6 * v7;
  v12 = (float)(v4 * v7) == 0.0;
  if (v21[0] == 0.0)
    ++v12;
  if (v10 == 0.0)
    ++v12;
  if (v12 == 2)
  {
    v13 = 0.0;
    if (v21[0] > 0.0)
    {
      v14 = (int32x2_t)0x3F80000000000000;
LABEL_12:
      v15 = 0.0;
      goto LABEL_13;
    }
    if (v21[0] < 0.0)
    {
      v14 = (int32x2_t)1065353216;
      goto LABEL_12;
    }
    v15 = v10 * -0.70711;
    a3.i32[0] = 1060439283;
    v14 = vdup_lane_s32(a3, 0);
    *(float *)v14.i32 = v9 * 0.70711;
  }
  else
  {
    v17 = 1065353216;
    v18 = 0;
    physx::PxShortestRotation((float *)&v17, v21, v19);
    v13 = v19[0];
    v15 = v19[1];
    v14 = v20;
  }
LABEL_13:
  *(float *)a2 = v13;
  *(float *)(a2 + 4) = v15;
  result = -(float)(v10 * v11);
  *(int32x2_t *)(a2 + 8) = v14;
  *(float *)(a2 + 16) = -(float)(v8 * v11);
  *(float *)(a2 + 20) = -(float)(v9 * v11);
  *(float *)(a2 + 24) = result;
  return result;
}

float32x2_t physx::PxTransformFromSegment@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float *a3@<X2>, uint64_t a4@<X8>)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  __int128 v12;
  float v13;
  float32x2_t result;
  float32x2_t v15;
  float v16;
  uint64_t v17;
  int v18;
  __int128 v19;

  v5 = *a2;
  v6 = *a1;
  v7 = vsub_f32(*a2, *a1);
  v8 = a2[1].f32[0];
  v9 = a1[1].f32[0];
  v10 = v8 - v9;
  v11 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v7, v7).i32[1]), v7.f32[0], v7.f32[0]) + (float)(v10 * v10));
  if (a3)
  {
    *a3 = v11 * 0.5;
    v5 = *a2;
    v6 = *a1;
    v8 = a2[1].f32[0];
    v9 = a1[1].f32[0];
  }
  if (v11 >= 0.000001)
  {
    v17 = 1065353216;
    v18 = 0;
    v13 = 1.0 / v11;
    v15 = vmul_n_f32(v7, v13);
    v16 = v10 * v13;
    physx::PxShortestRotation((float *)&v17, (float *)&v15, (float *)&v19);
    v12 = v19;
  }
  else
  {
    v12 = xmmword_2260E5D70;
  }
  *(_OWORD *)a4 = v12;
  result = vmul_f32(vadd_f32(v6, v5), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)(a4 + 16) = result;
  *(float *)(a4 + 24) = (float)(v9 + v8) * 0.5;
  return result;
}

uint64_t physx::Cm::PtrTable::clear(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = result;
  if (*(_BYTE *)(result + 10))
  {
    v3 = *(unsigned __int16 *)(result + 8);
    if (v3 >= 2)
    {
      v4 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)result, 8 * (v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8)) + 8);
    }
  }
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 10) = 1;
  *(_WORD *)(v2 + 8) = 0;
  return result;
}

uint64_t physx::Cm::PtrTable::realloc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  uint64_t result;
  void *v9;

  v5 = a3;
  v6 = a2;
  if (!*((_BYTE *)a1 + 10)
    || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3),
        (result & 1) == 0))
  {
    v9 = (void *)(**(uint64_t (***)(uint64_t, _QWORD))a4)(a4, (8 * v5));
    result = (uint64_t)memcpy(v9, (const void *)*a1, 8 * *((unsigned __int16 *)a1 + 4));
    if (*((_BYTE *)a1 + 10))
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 8))(a4, *a1, (8 * v6));
    *a1 = v9;
    *((_BYTE *)a1 + 10) = 1;
  }
  return result;
}

uint64_t physx::Cm::PtrTable::add(uint64_t result, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *(unsigned __int16 *)(result + 8);
  if ((_DWORD)v6 == 1)
  {
    v7 = *(_QWORD *)result;
    result = (**a3)(a3, 16);
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = v7;
    *(_WORD *)(v5 + 10) = 1;
  }
  else
  {
    if (!*(_WORD *)(result + 8))
    {
      *(_QWORD *)result = a2;
      *(_WORD *)(result + 8) = 1;
      *(_BYTE *)(result + 11) = 1;
      return result;
    }
    if (!*(_BYTE *)(result + 10))
    {
      v9 = v6 | (v6 >> 1) | ((v6 | (v6 >> 1)) >> 2);
      v8 = (v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8)) + 1;
      v6 = 0;
      goto LABEL_9;
    }
    if ((v6 & ((_DWORD)v6 - 1)) == 0)
    {
      v8 = (2 * v6);
LABEL_9:
      result = physx::Cm::PtrTable::realloc((_QWORD *)result, v6, v8, (uint64_t)a3);
    }
  }
  v10 = *(_QWORD *)v5;
  v11 = *(unsigned __int16 *)(v5 + 8);
  *(_WORD *)(v5 + 8) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11) = a2;
  return result;
}

uint64_t physx::Cm::PtrTable::replaceWithLast(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v4 = result;
  v5 = *(unsigned __int16 *)(result + 8);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)result + 8 * (1 - a2));
    if (*(_BYTE *)(result + 10))
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 8))(a3, *(_QWORD *)result, 16);
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 16842753;
  }
  else
  {
    v6 = v5 - 1;
    if (!v6)
    {
      *(_QWORD *)result = 0;
      *(_WORD *)(result + 8) = 0;
      *(_BYTE *)(result + 11) = 0;
      return result;
    }
    v8 = *(_QWORD *)result;
    *(_WORD *)(result + 8) = v6;
    *(_QWORD *)(v8 + 8 * a2) = *(_QWORD *)(v8 + 8 * (unsigned __int16)v6);
    v9 = (unsigned __int16)v6;
    if (!*(_BYTE *)(result + 10))
    {
      v11 = ((unsigned __int16)v6 - 1) | (((unsigned __int16)v6 - 1) >> 1) | ((((unsigned __int16)v6 - 1) | (((unsigned __int16)v6 - 1) >> 1)) >> 2);
      v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
      v9 = (v12 | HIWORD(v12)) + 1;
      v10 = 0;
      return physx::Cm::PtrTable::realloc((_QWORD *)result, v10, v9, a3);
    }
    if (((unsigned __int16)v6 & ((unsigned __int16)v6 - 1)) == 0)
    {
      v10 = 2 * (unsigned __int16)v6;
      return physx::Cm::PtrTable::realloc((_QWORD *)result, v10, v9, a3);
    }
  }
  return result;
}

void physx::Cm::RadixSort::~RadixSort(physx::Cm::RadixSort *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Cm::RadixSort::Sort(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  _DWORD *v65;

  if (!a2 || (int)a3 < 1)
    return a1;
  ++*(_DWORD *)(a1 + 48);
  bzero(*(void **)(a1 + 32), 0x1000uLL);
  v8 = 4 * a3;
  v9 = &a2[v8];
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v10 + 1024;
  v12 = v10 + 2048;
  v13 = v10 + 3072;
  v14 = *(_DWORD *)(a1 + 8);
  if (a4 != 1)
  {
    if (v14 < 0)
    {
      if (!(_DWORD)v8)
      {
LABEL_32:
        v34 = 0;
        ++*(_DWORD *)(a1 + 52);
        v35 = *(_QWORD *)(a1 + 16);
        if (a3 <= 1)
          v36 = 1;
        else
          v36 = a3;
        do
        {
          *(_DWORD *)(v35 + 4 * v34) = v34;
          ++v34;
        }
        while (v36 != v34);
        return a1;
      }
      v31 = *(_DWORD *)a2;
      v22 = a2;
      while (1)
      {
        v32 = *(_DWORD *)v22;
        if (*(_DWORD *)v22 < v31)
          break;
        ++*(_DWORD *)(v10 + 4 * *(_DWORD *)v22);
        ++*(_DWORD *)(v11 + 4 * v22[1]);
        ++*(_DWORD *)(v12 + 4 * v22[2]);
        v33 = v22[3];
        v22 += 4;
        ++*(_DWORD *)(v13 + 4 * v33);
        v31 = v32;
        v8 -= 4;
        if (!v8)
          goto LABEL_32;
      }
    }
    else
    {
      if (!(_DWORD)v8)
        goto LABEL_15;
      v20 = *(unsigned int **)(a1 + 16);
      v21 = *(_DWORD *)&a2[4 * *v20];
      v22 = a2;
      while (1)
      {
        v23 = *(_DWORD *)&a2[4 * *v20];
        if (v23 < v21)
          break;
        ++v20;
        ++*(_DWORD *)(v10 + 4 * *v22);
        ++*(_DWORD *)(v11 + 4 * v22[1]);
        ++*(_DWORD *)(v12 + 4 * v22[2]);
        v24 = v22[3];
        v22 += 4;
        ++*(_DWORD *)(v13 + 4 * v24);
        v21 = v23;
        v8 -= 4;
        if (!v8)
          goto LABEL_15;
      }
    }
    while (v22 != v9)
    {
      ++*(_DWORD *)(v10 + 4 * *v22);
      ++*(_DWORD *)(v11 + 4 * v22[1]);
      ++*(_DWORD *)(v12 + 4 * v22[2]);
      ++*(_DWORD *)(v13 + 4 * v22[3]);
      v22 += 4;
    }
    goto LABEL_39;
  }
  if (v14 < 0)
  {
    if (!(_DWORD)v8)
    {
LABEL_20:
      v28 = 0;
      ++*(_DWORD *)(a1 + 52);
      v29 = *(_QWORD *)(a1 + 16);
      if (a3 <= 1)
        v30 = 1;
      else
        v30 = a3;
      do
      {
        *(_DWORD *)(v29 + 4 * v28) = v28;
        ++v28;
      }
      while (v30 != v28);
      return a1;
    }
    v25 = *(_DWORD *)a2;
    v17 = a2;
    while (1)
    {
      v26 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 < v25)
        goto LABEL_26;
      ++*(_DWORD *)(v10 + 4 * *(_DWORD *)v17);
      ++*(_DWORD *)(v11 + 4 * v17[1]);
      ++*(_DWORD *)(v12 + 4 * v17[2]);
      v27 = v17[3];
      v17 += 4;
      ++*(_DWORD *)(v13 + 4 * v27);
      v25 = v26;
      v8 -= 4;
      if (!v8)
        goto LABEL_20;
    }
  }
  if (!(_DWORD)v8)
  {
LABEL_15:
    ++*(_DWORD *)(a1 + 52);
    return a1;
  }
  v15 = *(unsigned int **)(a1 + 16);
  v16 = *(_DWORD *)&a2[4 * *v15];
  v17 = a2;
  while (1)
  {
    v18 = *(_DWORD *)&a2[4 * *v15];
    if (v18 < v16)
      break;
    ++v15;
    ++*(_DWORD *)(v10 + 4 * *v17);
    ++*(_DWORD *)(v11 + 4 * v17[1]);
    ++*(_DWORD *)(v12 + 4 * v17[2]);
    v19 = v17[3];
    v17 += 4;
    ++*(_DWORD *)(v13 + 4 * v19);
    v16 = v18;
    v8 -= 4;
    if (!v8)
      goto LABEL_15;
  }
LABEL_26:
  while (v17 != v9)
  {
    ++*(_DWORD *)(v10 + 4 * *v17);
    ++*(_DWORD *)(v11 + 4 * v17[1]);
    ++*(_DWORD *)(v12 + 4 * v17[2]);
    ++*(_DWORD *)(v13 + 4 * v17[3]);
    v17 += 4;
  }
LABEL_39:
  if (a4)
  {
    v37 = 0;
  }
  else
  {
    v38 = 0;
    v39 = v10 + 3584;
    v40 = 0uLL;
    do
    {
      v40 = vaddq_s32(*(int32x4_t *)(v39 + v38), v40);
      v38 += 16;
    }
    while (v38 != 512);
    v37 = vaddvq_s32(v40);
  }
  v41 = 0;
  v42 = 0;
  if (a3 <= 1)
    v43 = 1;
  else
    v43 = a3;
  v44 = 512;
  do
  {
    v45 = *(_QWORD *)(a1 + 32);
    v46 = (char *)&a2[v42];
    if (v45)
      v47 = *(_DWORD *)(v45 + (v42 << 10) + 4 * a2[v42]) == a3;
    else
      v47 = 1;
    if (!v47)
    {
      v48 = *(_QWORD **)(a1 + 40);
      v49 = *(_QWORD *)(a1 + 24);
      if (a4 == 1 || v42 != 3)
      {
        v55 = 0;
        *v48 = v49;
        v56 = v45 + v41;
        do
        {
          v49 += 4 * *(unsigned int *)(v56 + 4 * v55);
          v48[++v55] = v49;
        }
        while (v55 != 255);
      }
      else
      {
        v50 = 0;
        v51 = v49 + 4 * v37;
        *v48 = v51;
        do
        {
          v51 += 4 * *(unsigned int *)(v45 + v41 + 4 * v50);
          v48[++v50] = v51;
        }
        while (v50 != 127);
        v52 = 0;
        v53 = *(_QWORD *)(a1 + 24);
        v48[128] = v53;
        v54 = v45 + v44;
        do
        {
          v53 += 4 * *(unsigned int *)(v54 + 4 * v52);
          v48[v52++ + 129] = v53;
        }
        while (v52 != 127);
      }
      if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
      {
        v62 = 0;
        for (i = 0; i != v43; ++i)
        {
          v64 = v46[v62 & 0xFFFFFFFC];
          v65 = (_DWORD *)v48[v64];
          *v65 = i;
          v48[v64] = v65 + 1;
          v62 += 4;
        }
        *(_DWORD *)(a1 + 8) &= ~0x80000000;
      }
      else
      {
        v57 = *(int **)(a1 + 16);
        v58 = 4 * a3;
        do
        {
          v59 = *v57++;
          v60 = v46[4 * v59];
          v61 = (_DWORD *)v48[v60];
          *v61 = v59;
          v48[v60] = v61 + 1;
          v58 -= 4;
        }
        while (v58);
      }
      *(int8x16_t *)(a1 + 16) = vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL);
    }
    ++v42;
    v41 += 1024;
    v44 += 1024;
  }
  while (v42 != 4);
  return a1;
}

physx::Cm::RadixSort *physx::Cm::RadixSort::Sort(physx::Cm::RadixSort *this, float *a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  float v12;
  uint64_t v13;
  const float *v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  int64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t *v57;
  uint32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int *v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t i;
  uint64_t v73;
  _DWORD *v74;
  uint64_t j;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int64x2_t v84;
  int32x2_t v85;

  if (a2 && (int)a3 >= 1)
  {
    ++*((_DWORD *)this + 12);
    bzero(*((void **)this + 4), 0x1000uLL);
    v6 = 4 * a3;
    v7 = *((_QWORD *)this + 4);
    v8 = v7 + 1024;
    v9 = v7 + 2048;
    v10 = v7 + 3072;
    if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    {
      if ((_DWORD)v6)
      {
        v17 = *a2;
        v18 = 4 * a3;
        v14 = a2;
        do
        {
          v19 = v17;
          v17 = *v14;
          if (*v14 < v19)
            goto LABEL_18;
          ++*(_DWORD *)(v7 + 4 * LOBYTE(v17));
          ++*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v14 + 1));
          ++*(_DWORD *)(v9 + 4 * *((unsigned __int8 *)v14 + 2));
          v20 = *((unsigned __int8 *)v14++ + 3);
          ++*(_DWORD *)(v10 + 4 * v20);
          v18 -= 4;
        }
        while (v18);
      }
      v21 = 0;
      ++*((_DWORD *)this + 13);
      v22 = *((_QWORD *)this + 2);
      if (a3 <= 1)
        v23 = 1;
      else
        v23 = a3;
      do
      {
        *(_DWORD *)(v22 + 4 * v21) = v21;
        ++v21;
      }
      while (v23 != v21);
    }
    else
    {
      if ((_DWORD)v6)
      {
        v11 = (unsigned int *)*((_QWORD *)this + 2);
        v12 = a2[*v11];
        v13 = 4 * a3;
        v14 = a2;
        while (1)
        {
          v15 = v12;
          v12 = a2[*v11];
          if (v12 < v15)
            break;
          ++v11;
          ++*(_DWORD *)(v7 + 4 * *(unsigned __int8 *)v14);
          ++*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v14 + 1));
          ++*(_DWORD *)(v9 + 4 * *((unsigned __int8 *)v14 + 2));
          v16 = *((unsigned __int8 *)v14++ + 3);
          ++*(_DWORD *)(v10 + 4 * v16);
          v13 -= 4;
          if (!v13)
            goto LABEL_8;
        }
LABEL_18:
        v25 = &a2[v6 / 4];
        while (v14 != v25)
        {
          ++*(_DWORD *)(v7 + 4 * *(unsigned __int8 *)v14);
          ++*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v14 + 1));
          ++*(_DWORD *)(v9 + 4 * *((unsigned __int8 *)v14 + 2));
          ++*(_DWORD *)(v10 + 4 * *((unsigned __int8 *)v14++ + 3));
        }
        v26 = 0;
        v27 = v7 + 3584;
        v28 = 0uLL;
        do
        {
          v28 = vaddq_s32(*(int32x4_t *)(v27 + v26), v28);
          v26 += 16;
        }
        while (v26 != 512);
        v29 = 0;
        v30 = vaddvq_s32(v28);
        if (a3 <= 1)
          v31 = 1;
        else
          v31 = a3;
        v32 = (uint64x2_t)vdupq_n_s64(v31 - 1);
        v33 = vdupq_n_s64(2uLL);
        while (1)
        {
          v34 = *((_QWORD *)this + 4) + (v29 << 10);
          v35 = (char *)a2 + v29;
          v36 = *((unsigned __int8 *)a2 + v29);
          v37 = *(_DWORD *)(v34 + 4 * v36);
          if (v37 == a3)
            v34 = 0;
          if (v29 == 3)
            break;
          if (v34)
          {
            v42 = 0;
            v43 = (_QWORD *)*((_QWORD *)this + 5);
            v44 = *((_QWORD *)this + 3);
            *v43 = v44;
            do
            {
              v44 += 4 * *(unsigned int *)(v34 + 4 * v42);
              v43[++v42] = v44;
            }
            while (v42 != 255);
            if ((*((_DWORD *)this + 2) & 0x80000000) == 0)
            {
              v45 = (int *)*((_QWORD *)this + 2);
              v46 = 4 * a3;
              do
              {
                v47 = *v45++;
                v48 = v35[4 * v47];
                v49 = (_DWORD *)v43[v48];
                *v49 = v47;
                v43[v48] = v49 + 1;
                v46 -= 4;
              }
              while (v46);
              goto LABEL_71;
            }
            v71 = 0;
            for (i = 0; i != v31; ++i)
            {
              v73 = v35[v71 & 0xFFFFFFFC];
              v74 = (_DWORD *)v43[v73];
              *v74 = i;
              v43[v73] = v74 + 1;
              v71 += 4;
            }
LABEL_70:
            *((_DWORD *)this + 2) &= ~0x80000000;
            goto LABEL_71;
          }
LABEL_73:
          if (++v29 == 4)
            return this;
        }
        if (v37 == a3)
        {
          if (((char)v36 & 0x80000000) == 0)
            return this;
          if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
          {
            v82 = 0;
            v39 = *((_QWORD *)this + 3);
            v83 = a3 - 1;
            v84 = (int64x2_t)xmmword_2260E7EE0;
            do
            {
              v85 = vmovn_s64((int64x2_t)vcgeq_u64(v32, (uint64x2_t)v84));
              if ((v85.i8[0] & 1) != 0)
                *(_DWORD *)(v39 + 4 * v82) = v83;
              if ((v85.i8[4] & 1) != 0)
                *(_DWORD *)(v39 + 4 * v82 + 4) = (v82 ^ 0xFFFFFFFE) + a3;
              v82 += 2;
              v84 = vaddq_s64(v84, v33);
              v83 -= 2;
            }
            while (((v31 + 1) & 0x1FFFFFFFELL) != v82);
            *((_DWORD *)this + 2) &= ~0x80000000;
            v40 = *((_QWORD *)this + 2);
          }
          else
          {
            v38 = 0;
            v40 = *((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 3);
            v41 = a3 - 1;
            do
            {
              *(_DWORD *)(v39 + v38) = *(_DWORD *)(v40 + 4 * v41);
              v38 += 4;
              --v41;
            }
            while (4 * v31 != v38);
          }
        }
        else
        {
          v50 = 0;
          v51 = (int64x2_t *)*((_QWORD *)this + 5);
          v52 = *((_QWORD *)this + 3) + 4 * v30;
          v51->i64[0] = v52;
          do
          {
            v52 += 4 * *(unsigned int *)(v34 + 4 * v50);
            v51->i64[++v50] = v52;
          }
          while (v50 != 127);
          v53 = 0;
          v54 = *((_QWORD *)this + 3);
          v51[127].i64[1] = v54;
          do
          {
            v54 += 4 * *(unsigned int *)(v34 + 1020 + 4 * v53);
            v51[127].i64[v53--] = v54;
          }
          while (v53 != -127);
          v55 = 0;
          v56 = v34 + 512;
          v57 = v51 + 64;
          do
          {
            v58 = *(uint32x4_t *)(v56 + v55);
            v59 = vaddq_s64(*v57, (int64x2_t)vshll_n_u32(*(uint32x2_t *)v58.i8, 2uLL));
            v60 = vaddq_s64(v57[1], (int64x2_t)vshll_high_n_u32(v58, 2uLL));
            *v57 = v59;
            v57[1] = v60;
            v57 += 2;
            v55 += 16;
          }
          while (v55 != 512);
          if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
          {
            for (j = 0; j != v31; ++j)
            {
              v76 = LODWORD(a2[j]);
              v77 = (v76 >> 21) & 0x7F8;
              v78 = *(uint64_t *)((char *)v51->i64 + v77);
              v79 = (v76 & 0x80000000) != 0;
              if ((v76 & 0x80000000) != 0)
                v80 = v78 - 4;
              else
                v80 = v78 + 4;
              if (v79)
                v81 = -4;
              else
                v81 = 0;
              *(uint64_t *)((char *)v51->i64 + v77) = v80;
              *(_DWORD *)(v78 + v81) = j;
            }
            goto LABEL_70;
          }
          v61 = (int *)*((_QWORD *)this + 2);
          v62 = v31;
          do
          {
            v64 = *v61++;
            v63 = v64;
            v65 = LODWORD(a2[v64]);
            v66 = (v65 >> 21) & 0x7F8;
            v67 = *(uint64_t *)((char *)v51->i64 + v66);
            v68 = (v65 & 0x80000000) != 0;
            if ((v65 & 0x80000000) != 0)
              v69 = v67 - 4;
            else
              v69 = v67 + 4;
            if (v68)
              v70 = -4;
            else
              v70 = 0;
            *(uint64_t *)((char *)v51->i64 + v66) = v69;
            *(_DWORD *)(v67 + v70) = v63;
            --v62;
          }
          while (v62);
LABEL_71:
          v40 = *((_QWORD *)this + 2);
          v39 = *((_QWORD *)this + 3);
        }
        *((_QWORD *)this + 2) = v39;
        *((_QWORD *)this + 3) = v40;
        goto LABEL_73;
      }
LABEL_8:
      ++*((_DWORD *)this + 13);
    }
  }
  return this;
}

uint64_t physx::Cm::RadixSortBuffered::reset(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_BYTE *)(this + 56))
  {
    if (*(_QWORD *)(this + 24))
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (*(_QWORD *)(v1 + 16))
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v1 + 16) = 0;
  }
  *(_DWORD *)(v1 + 8) = 0x80000000;
  return this;
}

void physx::Cm::RadixSortBuffered::~RadixSortBuffered(physx::Cm::RadixSortBuffered *this)
{
  *(_QWORD *)this = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)this);
}

{
  *(_QWORD *)this = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Cm::RadixSortBuffered::Resize(physx::Cm::RadixSortBuffered *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 56))
  {
    if (*((_QWORD *)this + 3))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 3) = 0;
    if (*((_QWORD *)this + 2))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 2) = 0;
    if (a2)
    {
      v4 = 4 * a2;
      *((_QWORD *)this + 2) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmRadixSortBuffered.cpp", 76);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmRadixSortBuffered.cpp", 77);
    }
    else
    {
      v5 = 0;
    }
    *((_QWORD *)this + 3) = v5;
  }
  return 1;
}

uint64_t physx::Cm::RadixSortBuffered::Sort(uint64_t a1)
{
  physx::Cm::RadixSortBuffered *v1;
  unsigned __int8 *v2;
  signed int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  _OWORD v11[32];
  char v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (uint64_t)v1;
  v13 = *MEMORY[0x24BDAC8D0];
  if (v2)
  {
    v6 = v3;
    if (v3 >= 1)
    {
      v7 = v4;
      v8 = v2;
      v9 = *((_DWORD *)v1 + 2) & 0x7FFFFFFF;
      if (v9 != v3)
      {
        if (v9 < v3)
          physx::Cm::RadixSortBuffered::Resize(v1, v3);
        *(_DWORD *)(v5 + 8) = v6 | 0x80000000;
      }
      memset(v11, 0, sizeof(v11));
      *(_QWORD *)(v5 + 32) = &v12;
      *(_QWORD *)(v5 + 40) = v11;
      physx::Cm::RadixSort::Sort(v5, v8, v6, v7);
    }
  }
  return v5;
}

physx::Cm::RadixSortBuffered *physx::Cm::RadixSortBuffered::Sort(physx::Cm::RadixSortBuffered *this, const float *a2)
{
  physx::Cm::RadixSortBuffered *v2;
  float *v3;
  signed int v4;
  physx::Cm::RadixSortBuffered *v5;
  unsigned int v6;
  float *v7;
  unsigned int v8;
  _OWORD v10[32];
  char v11;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](this);
  v5 = v2;
  v12 = *MEMORY[0x24BDAC8D0];
  if (v3)
  {
    v6 = v4;
    if (v4 >= 1)
    {
      v7 = v3;
      v8 = *((_DWORD *)v2 + 2) & 0x7FFFFFFF;
      if (v8 != v4)
      {
        if (v8 < v4)
          physx::Cm::RadixSortBuffered::Resize(v2, v4);
        *((_DWORD *)v5 + 2) = v6 | 0x80000000;
      }
      memset(v10, 0, sizeof(v10));
      *((_QWORD *)v5 + 4) = &v11;
      *((_QWORD *)v5 + 5) = v10;
      physx::Cm::RadixSort::Sort(v5, v7, v6);
    }
  }
  return v5;
}

__n128 physx::Cm::RenderOutput::operator<<(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 36) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 48);
  *(__n128 *)(a1 + 84) = result;
  return result;
}

uint64_t physx::Cm::RenderOutput::operator<<(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[4];

  physx::PxMat44::PxMat44((uint64_t)v6, a2);
  v3 = v6[1];
  *(_OWORD *)(a1 + 36) = v6[0];
  *(_OWORD *)(a1 + 52) = v3;
  v4 = v6[3];
  *(_OWORD *)(a1 + 68) = v6[2];
  *(_OWORD *)(a1 + 84) = v4;
  return a1;
}

uint64_t physx::Cm::RenderOutput::operator<<(uint64_t a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  unsigned int v32;
  float v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  float v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v56;
  float v57;
  int v58;
  unint64_t v59;
  float v60;
  int v61;
  float32x2_t v62;
  float v63;
  int v64;

  v4 = a2[1];
  v5 = a2[2];
  v6 = (float)((float)(*a2 * *(float *)(a1 + 44)) + (float)(v4 * *(float *)(a1 + 60)))
     + (float)(v5 * *(float *)(a1 + 76));
  v7 = *(float *)(a1 + 92);
  v8 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), *a2), vmul_n_f32(*(float32x2_t *)(a1 + 52), v4)), vmul_n_f32(*(float32x2_t *)(a1 + 68), v5)), *(float32x2_t *)(a1 + 84));
  v9 = v6 + v7;
  *(float32x2_t *)a2 = v8;
  a2[2] = v6 + v7;
  v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  switch(*(_DWORD *)a1)
  {
    case 0:
      v11 = *(_QWORD *)(a1 + 104);
      v56 = (unint64_t)v8;
      v57 = v6 + v7;
      v12 = *(_DWORD *)(a1 + 4);
      v58 = v12;
      v13 = *(unsigned int *)(v11 + 16);
      if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFFFu) <= v13)
      {
        physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::growAndPushBack((uint64_t *)(v11 + 8), (uint64_t)&v56);
      }
      else
      {
        v14 = *(_QWORD *)(v11 + 8) + 16 * v13;
        *(float32x2_t *)v14 = v8;
        *(float *)(v14 + 8) = v9;
        *(_DWORD *)(v14 + 12) = v12;
        *(_DWORD *)(v11 + 16) = v13 + 1;
      }
      goto LABEL_31;
    case 1:
      if (v10 != 2)
        goto LABEL_32;
      v15 = *(_QWORD *)(a1 + 104);
      v16 = *(_DWORD *)(a1 + 8);
      v17 = *(_DWORD *)(a1 + 12);
      v56 = __PAIR64__(v17, v16);
      v18 = *(float *)(a1 + 16);
      v57 = v18;
      v19 = *(_DWORD *)(a1 + 4);
      v58 = v19;
      v59 = (unint64_t)v8;
      v60 = v9;
      v61 = v19;
      v20 = *(unsigned int *)(v15 + 32);
      if ((*(_DWORD *)(v15 + 36) & 0x7FFFFFFFu) <= v20)
      {
        physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack((uint64_t *)(v15 + 24), (uint64_t)&v56);
      }
      else
      {
        v21 = *(_QWORD *)(v15 + 24) + 32 * v20;
        *(_DWORD *)v21 = v16;
        *(_DWORD *)(v21 + 4) = v17;
        *(float *)(v21 + 8) = v18;
        *(_DWORD *)(v21 + 12) = v19;
        *(float32x2_t *)(v21 + 16) = v8;
        *(float *)(v21 + 24) = v9;
        *(_DWORD *)(v21 + 28) = v19;
        *(_DWORD *)(v15 + 32) = v20 + 1;
      }
      goto LABEL_29;
    case 2:
      if (v10 < 2)
        break;
      v22 = *(_QWORD *)(a1 + 104);
      v23 = *(_DWORD *)(a1 + 8);
      v24 = *(_DWORD *)(a1 + 12);
      v56 = __PAIR64__(v24, v23);
      v25 = *(float *)(a1 + 16);
      v57 = v25;
      v26 = *(_DWORD *)(a1 + 4);
      v58 = v26;
      v59 = (unint64_t)v8;
      v60 = v9;
      v61 = v26;
      v27 = *(unsigned int *)(v22 + 32);
      if ((*(_DWORD *)(v22 + 36) & 0x7FFFFFFFu) <= v27)
      {
        physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack((uint64_t *)(v22 + 24), (uint64_t)&v56);
      }
      else
      {
        v28 = *(_QWORD *)(v22 + 24) + 32 * v27;
        *(_DWORD *)v28 = v23;
        *(_DWORD *)(v28 + 4) = v24;
        *(float *)(v28 + 8) = v25;
        *(_DWORD *)(v28 + 12) = v26;
        *(float32x2_t *)(v28 + 16) = v8;
        *(float *)(v28 + 24) = v9;
        *(_DWORD *)(v28 + 28) = v26;
        *(_DWORD *)(v22 + 32) = v27 + 1;
      }
      goto LABEL_31;
    case 3:
      if (v10 != 3)
        goto LABEL_32;
      v29 = *(_QWORD *)(a1 + 104);
      v30 = *(_DWORD *)(a1 + 24);
      v31 = *(float *)(a1 + 28);
      v33 = *(float *)(a1 + 16);
      v32 = *(_DWORD *)(a1 + 20);
      v56 = __PAIR64__(v30, v32);
      v57 = v31;
      v34 = *(_DWORD *)(a1 + 4);
      v58 = v34;
      v36 = *(_DWORD *)(a1 + 8);
      v35 = *(_DWORD *)(a1 + 12);
      v59 = __PAIR64__(v35, v36);
      v60 = v33;
      v61 = v34;
      v62 = v8;
      v63 = v9;
      v37 = *(_DWORD *)(v29 + 48);
      v38 = *(_DWORD *)(v29 + 52) & 0x7FFFFFFF;
      v64 = v34;
      if (v38 <= v37)
      {
        physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack((uint64_t *)(v29 + 40), (uint64_t)&v56);
      }
      else
      {
        v39 = *(_QWORD *)(v29 + 40) + 48 * v37;
        *(_DWORD *)v39 = v32;
        *(_DWORD *)(v39 + 4) = v30;
        *(float *)(v39 + 8) = v31;
        *(_DWORD *)(v39 + 12) = v34;
        *(_DWORD *)(v39 + 16) = v36;
        *(_DWORD *)(v39 + 20) = v35;
        *(float *)(v39 + 24) = v33;
        *(_DWORD *)(v39 + 28) = v34;
        *(float32x2_t *)(v39 + 32) = v8;
        *(float *)(v39 + 40) = v9;
        *(_DWORD *)(v39 + 44) = v34;
        *(_DWORD *)(v29 + 48) = v37 + 1;
      }
LABEL_29:
      *(_DWORD *)(a1 + 32) = 0;
      break;
    case 4:
      if (v10 < 3)
        goto LABEL_32;
      v40 = *(_QWORD *)(a1 + 104);
      v41 = 20;
      if ((v10 & 1) != 0)
        v42 = 8;
      else
        v42 = 20;
      v43 = *(_DWORD *)(a1 + v42);
      v44 = a1 + 8;
      if ((v10 & 1) != 0)
        v45 = a1 + 8;
      else
        v45 = a1 + 20;
      v46 = *(_DWORD *)(v45 + 4);
      v47 = *(float *)(v45 + 8);
      if ((v10 & 1) != 0)
        v44 = a1 + 20;
      else
        v41 = 8;
      v56 = __PAIR64__(v46, v43);
      v57 = v47;
      v48 = *(_DWORD *)(a1 + 4);
      v58 = v48;
      v49 = *(_DWORD *)(a1 + v41);
      v50 = *(_DWORD *)(v44 + 4);
      v51 = *(float *)(v44 + 8);
      v59 = __PAIR64__(v50, v49);
      v60 = v51;
      v61 = v48;
      v62 = v8;
      v63 = v9;
      v52 = *(_DWORD *)(v40 + 48);
      v53 = *(_DWORD *)(v40 + 52) & 0x7FFFFFFF;
      v64 = v48;
      if (v53 <= v52)
      {
        physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack((uint64_t *)(v40 + 40), (uint64_t)&v56);
      }
      else
      {
        v54 = *(_QWORD *)(v40 + 40) + 48 * v52;
        *(_DWORD *)v54 = v43;
        *(_DWORD *)(v54 + 4) = v46;
        *(float *)(v54 + 8) = v47;
        *(_DWORD *)(v54 + 12) = v48;
        *(_DWORD *)(v54 + 16) = v49;
        *(_DWORD *)(v54 + 20) = v50;
        *(float *)(v54 + 24) = v51;
        *(_DWORD *)(v54 + 28) = v48;
        *(float32x2_t *)(v54 + 32) = v8;
        *(float *)(v54 + 40) = v9;
        *(_DWORD *)(v54 + 44) = v48;
        *(_DWORD *)(v40 + 48) = v52 + 1;
      }
LABEL_31:
      v10 = *(_DWORD *)(a1 + 32);
LABEL_32:
      if (v10 >= 2)
      {
        *(_QWORD *)(a1 + 20) = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 16);
      }
      break;
    default:
      goto LABEL_32;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(float *)(a1 + 16) = a2[2];
  return a1;
}

